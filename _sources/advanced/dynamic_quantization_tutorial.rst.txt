
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<eos>' b'Mogadishu' b'as' b'no' b'treatment' b'from' b'<unk>' b'Johan' b'laugh' b',' b'created' b'in' b'2015' b',' b'and' b'the' b'under' b'behalf' b'which' b'could'
    b'accompany' b'the' b'aforementioned' b'argument' b'to' b'their' b'left' b'...' b'according' b'to' b'present' b'steered' b'fortifications' b'.' b'Having' b'primordial' b'faux' b'could' b'be' b'recovered'
    b'to' b'entertain' b'the' b'trustworthy' b'language' b'on' b'several' b'victims' b'or' b'seem' b'.' b'Thus' b',' b'and' b'hurt' b'(' b'that' b'to' b'cause' b'bright'
    b'Regulation' b')' b',' b'is' b'unhappy' b'BMNH' b'Richard' b'II' b'(' b'ups' b')' b',' b'but' b'characterised' b'during' b'recreational' b'cars' b'from' b'agriculture' b'more'
    b'than' b'6' b'.' b'Then' b',' b'on' b'July' b'28' b',' b'2006' b',' b'the' b'breadth' b'of' b'<unk>' b'and' b'plant' b'Hawkins' b'were' b'considered'
    b'in' b'Slash' b'dedicated' b'to' b'their' b'usual' b'poisonous' b'Mediterranean' b'in' b'August' b'1969' b'.' b'A' b'common' b'starling' b'bound' b'in' b'England' b',' b'during'
    b'the' b'mid' b'@-@' b'19th' b'century' b',' b'the' b'other' b',' b'only' b'Scotts' b'from' b'the' b'city' b',' b'was' b'killed' b'in' b'some' b'gardens'
    b',' b'including' b'Union' b'Turtle' b',' b'a' b'former' b'by' b'History' b',' b'and' b'is' b'involved' b'in' b'<unk>' b'Street' b'.' b'There' b'was' b'no'
    b'official' b'starling' b'involved' b'Irish' b',' b'and' b'Springboks' b'.' b'In' b'the' b'mixed' b'city' b',' b'NY' b'32' b'mentioned' b'bordering' b'all' b'of' b'their'
    b'common' b'contests' b',' b'especially' b'only' b'of' b'900' b'Pipe' b'December' b'Prison' b',' b'a' b'<unk>' b'of' b'drainage' b',' b'which' b'features' b',' b'on'
    b'the' b'side' b'next' b'volume' b',' b'available' b'to' b'transition' b'towards' b'Omaha' b'and' b'other' b'birds' b'.' b'The' b'galleys' b'of' b'northern' b'Ireland' b'imagines'
    b'hunger' b'in' b'<unk>' b';' b'<unk>' b'stump' b'ran' b'up' b'@-@' b'hand' b',' b'and' b'in' b'Hydnum' b'Field' b'such' b'as' b'agonist' b'College' b','
    b'Dub' b'salmon' b'clusters' b'.' b'The' b'east' b'phases' b',' b'including' b'being' b'implemented' b'between' b'Eshmun' b'and' b'South' b'America' b',' b'is' b'also' b'even'
    b'well' b'@-@' b'sufficiently' b'to' b'feature' b'trees' b'(' b'less' b'<unk>' b',' b'as' b'they' b'are' b'like' b'in' b'1942' b')' b',' b'such' b'as'
    b'the' b'mid' b'@-@' b'Irish' b'East' b'Licence' b'(' b'1999' b')' b'.' b'It' b'will' b'be' b'produced' b'by' b'<unk>' b'rats' b'along' b'mainly' b'canals'
    b';' b'canned' b',' b'and' b'/' b'Ignace' b'.' b'<eos>' b'<unk>' b'<unk>' b'remains' b'unions' b'to' b'"' b'dig' b'together' b'in' b'water' b'when' b'this'
    b'is' b'famous' b'in' b'clean' b'<unk>' b'of' b'Tauti\xc5\xa1ka' b'Britain' b'and' b'a' b'lime' b'<unk>' b'"' b'.' b'The' b'prospect' b'of' b'the' b'possessing' b'American'
    b'monopoly' b"'" b'common' b'starling' b'measures' b'crosses' b'60' b'\xc2\xb0' b',' b'and' b'experienced' b'males' b'to' b'disrupt' b'significantly' b'performer' b'.' b'<unk>' b'was' b'often'
    b'found' b'so' b'created' b'in' b'the' b'everyday' b'cultural' b'glass' b'seat' b'during' b'Taiyuan' b'.' b'<unk>' b'has' b'not' b'limited' b'due' b'to' b'Ireland' b','
    b'which' b'led' b'it' b'for' b'three' b'>' b'towers' b',' b'special' b'arenas' b',' b'and' b'cytoplasm' b'ages' b'.' b'Other' b'settlements' b'have' b'seen' b'numbers'
    b'in' b'east' b'.' b'As' b'they' b"'m" b'they' b'want' b'to' b'be' b'because' b'the' b'kakapo' b'fuses' b'around' b'33' b'seconds' b'.' b'<eos>' b'Ireland'
    b'first' b'knew' b'about' b'to' b'enantioselective' b'Rockwilder' b'.' b'With' b'places' b',' b'confirmation' b'<unk>' b'tells' b'data' b'.' b'These' b'Iberia' b'has' b'only' b'postpone'
    b'starlings' b'.' b'A' b'like' b'number' b'will' b'be' b'discovered' b'continuously' b'deep' b'by' b'.' b'Most' b'very' b'or' b'decline' b'of' b'\xe1\x83\x98' b'is' b'elegant'
    b'.' b'Each' b'example' b'contains' b'a' b'resolution' b'of' b'particle' b',' b'<unk>' b',' b'phallic' b',' b'rocks' b'and' b'cure' b'.' b'Other' b'other' b'people'
    b'exist' b'at' b'Gold' b'estates' b'.' b'However' b',' b'research' b',' b'far' b'at' b'a' b'low' b'point' b'with' b'a' b'agreement' b'Koan' b'<unk>' b'for'
    b'categorised' b',' b'sold' b'a' b'introduction' b'@-@' b'window' b'quality' b'of' b'found' b',' b'in' b'large' b'although' b'they' b'were' b'quite' b'temporary' b'as' b'they'
    b'were' b'eventually' b'far' b'from' b'bird' b'and' b'<unk>' b'.' b'They' b'Cheaper' b'drought' b'difficulties' b'with' b'geography' b'or' b'remarks' b',' b'other' b'keepers' b'and'
    b'past' b'interior' b'trees' b'of' b'GTX' b'wapaq' b'.' b'Males' b'prevent' b'forth' b'the' b'country' b',' b'including' b'cycling' b'numerous' b',' b'or' b'heterosexual' b'while'
    b'walking' b'graves' b'.' b'Conservation' b'appears' b'to' b'have' b'Henry' b'Sullivan' b',' b'a' b'taxi' b',' b'and' b'poorly' b'headed' b'up' b'some' b'more' b'Dateline'
    b',' b'buying' b'recommended' b'so' b'ancient' b',' b'or' b'extinction' b',' b'a' b'pest' b'of' b'equilibrium' b',' b'with' b'up' b'reanalysis' b'structured' b'patches' b'.'
    b'Its' b'product' b'of' b'alive' b'is' b'described' b'by' b'contraception' b'.' b'<eos>' b'<unk>' b'with' b'their' b'bark' b',' b'row' b'will' b'be' b'aware' b'of'
    b'behaviour' b',' b'although' b'may' b'be' b'are' b'encompasses' b'on' b'their' b'behaviour' b'.' b'Sometimes' b'common' b'Web' b'pattern' b'may' b'be' b'originally' b'called' b'proponents'
    b',' b'they' b'may' b'be' b'inhabited' b'by' b'several' b'<unk>' b'.' b'<eos>' b'In' b'all' b'populations' b'than' b'prepared' b',' b'the' b'kakapo' b'grows' b'it'
    b'down' b'he' b'is' b'endangered' b'as' b'migration' b'of' b'downstream' b'due' b'to' b'only' b'difference' b'for' b'their' b'state' b'stimulated' b'prey' b'.' b'O' b'Rico'
    b'focuses' b'in' b'on' b'8' b'December' b'1945' b'when' b'specializing' b'in' b'width' b'.' b'It' b'recognizes' b'this' b'species' b'of' b'69' b'hours' b'in' b'152'
    b'years' b',' b'so' b'there' b'were' b'no' b'widespread' b'classification' b'of' b'such' b'interpretive' b'projections' b'depicted' b'as' b'been' b'unlikely' b'to' b'reduce' b'another' b'or'
    b'minor' b'celestial' b'eggs' b'.' b'Mosley' b'used' b'<unk>' b'soap' b',' b'Fork' b',' b'and' b'compassion' b',' b'reducing' b'three' b'prey' b'species' b'to' b'promote'
    b'potatoes' b'from' b'<unk>' b',' b'except' b'Gatwick' b'and' b'<unk>' b'.' b'<eos>' b'In' b'the' b'revised' b'sloped' b',' b'a' b'skilled' b'herd' b'of' b'50'
    b'%' b'of' b'the' b'population' b'down' b'over' b'35' b'meter' b',' b'with' b'5' b'@,@' b'000' b'acres' b'(' b'46' b'@.@' b'8' b'm' b')'
    b'and' b'four' b'\xe2\x80\x93' b'100' b'(' b'76' b'metres' b')' b'rest' b',' b'and' b'higher' b'measures' b'there' b'are' b'a' b'rare' b'measure' b')' b'will'
    b'still' b'be' b'associated' b'into' b'roughly' b'one' b'years' b'.' b'One' b'of' b'these' b'cycle' b'escape' b'the' b'species' b'.' b'Eventually' b',' b'they' b'are'
    b'associated' b'in' b'flight' b',' b'as' b'alone' b'had' b'criticised' b'sea' b'environments' b'.' b'A' b'instance' b'believes' b'birds' b'would' b'be' b'used' b'due' b'to'
    b'a' b'variety' b'of' b'incarnation' b'employing' b',' b'they' b'find' b'.' b'Similarly' b',' b'after' b'Wisden' b',' b'the' b'U\xc3\xad' b'envelope' b'are' b'provided' b'by'
    b'oribi' b'trees' b'.' b'This' b'is' b'commonly' b'solitary' b'.' b'The' b'primary' b'cave' b'is' b'due' b'with' b'activity' b'@-@' b'grey' b'genes' b',' b'whose'
    b'fortune' b'starlings' b',' b'pointing' b',' b'from' b'6' b'@.@' b'5' b'm' b'(' b'8' b'feet' b')' b'deep' b'.' b'A' b'female' b'fly' b'close'
    b'to' b'a' b'total' b'of' b'Veracruz' b'with' b'26' b'@.@' b'4' b'subspecies' b'(' b'present' b'brown' b'edges' b')' b'.' b'It' b'is' b'also' b'less'
    b'commonly' b'tightly' b'rare' b'(' b'Doug' b'spp' b')' b'before' b'it' b'is' b'named' b'and' b'again' b'.' b'Linga' b'brush' b'may' b'be' b'powerful' b','
    b'and' b'included' b'them' b'.' b'These' b'more' b'sins' b'are' b'worshipped' b'to' b'be' b'useful' b'or' b'away' b'by' b'purple' b'grey' b',' b'hence' b'less'
    b'colouration' b',' b'or' b'even' b'Such' b'or' b'insufficient' b',' b'usually' b'linked' b'from' b'a' b'good' b'carving' b'.' b'An' b'survey' b'involving' b'times' b'antelope'
    b'severely' b'send' b'an' b'white' b'alarm' b',' b'whom' b'the' b'Kakapo' b'starling' b'might' b'be' b'<unk>' b'on' b'medium' b'idiosyncrasies' b'.' b'These' b'white' b'exact'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 194.0
    loss: 5.168
    elapsed time (seconds): 113.9




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  17.024 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
