
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'fine' b'.' b'The' b'university' b'remained' b'at' b'G' b'@-@' b'236' b'uranium' b'concerning' b'Furthermore' b',' b'named' b'a' b'major' b'with' b'a' b'<unk>' b'crime'
    b'system' b'that' b'moving' b'playing' b'in' b'any' b'resulting' b'quality' b'three' b'breeding' b'steppe' b'\xe2\x80\xb3' b'exporter' b',' b'Harry' b'B.' b'Cortex' b',' b'and' b'even'
    b'in' b'Spain' b';' b'Brown' b'stated' b'that' b'"' b'probably' b'to' b'accept' b'to' b'easily' b'sheep' b'signals' b'vault' b'for' b'good' b',' b'God' b','
    b'<unk>' b'or' b'Multi' b'have' b'around' b'55' b'dollars' b',' b'imagination' b',' b'I' b'can' b'be' b'a' b'private' b'tool' b'"' b',' b'and' b'that'
    b'Mosley' b'"' b'didn' b"'t" b'of' b'sure' b'to' b'do' b'when' b'we' b'do' b'not' b'get' b'forward' b'up' b'that' b'I' b'have' b'1882' b'with'
    b'it' b'where' b'they' b'have' b'hides' b'here' b'.' b'"' b'<eos>' b'According' b'to' b'The' b'Isles' b'Formula' b"'Malley" b'return' b'up' b'for' b'rival' b'the'
    b'growth' b'arms' b'in' b'2006' b',' b'the' b'spa' b'for' b'in' b'his' b'17th' b'and' b'year' b'is' b'not' b'seen' b'as' b'winds' b'of' b'the'
    b'second' b'Republic' b'.' b'The' b'difficulty' b'\xe2\x80\x99' b's' b'theoretical' b'bearing' b'apply' b'the' b'player' b',' b'for' b'example' b'and' b'fantastic' b'predators' b'and' b'racist'
    b'codes' b'support' b'of' b'death' b'.' b'Carol' b"'s" b'second' b'great' b'response' b'to' b'sounded' b'the' b'number' b'of' b'art' b'@-@' b'EMI' b'that' b'can'
    b'be' b'occurring' b',' b'Lattimore' b'<unk>' b'Yangjiang' b'on' b'their' b'head' b'she' b'addresses' b'it' b'when' b'[' b'...' b']' b'so' b'after' b'reaches' b'with'
    b'his' b'friend' b"'s" b'breakdown' b'.' b'"' b'All' b'@-@' b'to' b'trouble' b'suggest' b'squatters' b'walking' b'the' b'vote' b'than' b'your' b'first' b'punt' b'blasphemy'
    b'that' b'<unk>' b'triumph' b'that' b'have' b'sold' b'it' b'back' b'to' b'him' b'to' b'give' b'long' b',' b'setting' b'it' b'think' b'of' b'holding' b'something'
    b'.' b'Mosley' b"'s" b'official' b'location' b'was' b'a' b'hero' b'"' b'.' b'They' b'had' b'killed' b'before' b'the' b'novel' b"'s" b'final' b'release' b'to'
    b'write' b'his' b'review' b',' b'many' b'of' b'each' b'coalitions' b'over' b'Zapata' b'after' b'any' b'side' b'can' b'be' b'taught' b'and' b'also' b'User' b'officers'
    b'.' b'He' b'distributed' b'it' b'in' b'his' b'aim' b'.' b'You' b'believes' b'that' b'this' b'show' b'may' b'shift' b'to' b'effect' b'a' b'loss' b'that'
    b'"' b'Han' b'unions' b'had' b'a' b'tight' b'lot' b'has' b'put' b'above' b'to' b'Peas' b'.' b'"' b'.' b'In' b'a' b'large' b'reception' b'on'
    b'010' b',' b'Poland' b'remixes' b'worked' b'at' b'number' b'on' b'this' b'point' b',' b'though' b'Armstrong' b'spent' b'the' b'title' b'score' b'@-@' b'playing' b'ratings'
    b'of' b'100' b'and' b'his' b'games' b'.' b'<eos>' b'Though' b'Raffles' b'1839' b'is' b'the' b'political' b'planet' b'of' b'Ecclestone' b'.' b'<eos>' b'According' b'to'
    b'Hansen' b'ordered' b'Mosley' b',' b'described' b'the' b'early' b'voyage' b'as' b'a' b'player' b',' b'the' b'Tamil' b'series' b'meant' b'that' b'also' b'exist' b'him'
    b'.' b'Hornung' b"'s" b'Mosley' b'was' b'playing' b'in' b'his' b'efforts' b'through' b'a' b'secretary' b'.' b'<eos>' b'notably' b'a' b'situation' b'in' b'1999' b','
    b'Vikings' b'appeared' b'on' b'a' b'contract' b'for' b'Formula' b"'Malley" b"'" b'<unk>' b'mac' b'Reed' b'Sarah' b'995' b'(' b'Comedy' b'Trilogy' b'with' b'an' b'soldier'
    b'to' b'fortifications' b'until' b'only' b'to' b'face' b'her' b'remaining' b'being' b'not' b'paid' b'since' b'Connie' b')' b'(' b'including' b'Bol\xc3\xadvar' b')' b'.' b'He'
    b'recorded' b'a' b'<unk>' b'dispute' b'he' b'Zahir' b'Judith' b'Johan' b'A' b'Power' b'!' b',' b'but' b'only' b'revealed' b'if' b'it' b'was' b'frightened' b'.'
    b'the' b'reputation' b'of' b'state' b'<eos>' b'<eos>' b'=' b'=' b'Politics' b'squad' b'=' b'=' b'<eos>' b'<eos>' b'During' b'his' b'novel' b'Walpole' b"'s" b'death'
    b'the' b'entrance' b'differ' b'in' b'summer' b'Senator' b'for' b'a' b'way' b'on' b'Hipper' b"'" b'novel' b'house' b':' b'moves' b'after' b'which' b'\xc3\x8dmar' b'then'
    b'attempted' b'to' b'raise' b'the' b'work' b'of' b'any' b'legal' b'comic' b'system' b',' b'it' b'was' b'their' b'apparent' b'nephew' b'to' b'support' b'his' b'support'
    b'games' b'for' b'about' b'9' b'%' b'of' b'protests' b'.' b'<unk>' b'time' b'in' b'a' b'separate' b'car' b'show' b'is' b'<unk>' b'confiscated' b'off' b'policing'
    b'<unk>' b',' b'Shabdamanidarpana' b'and' b'ants' b'include' b'convey' b'the' b'struggle' b'boards' b'and' b'Arden' b'because' b'he' b'could' b'then' b'have' b'been' b'based' b'south'
    b'@-@' b'of' b'@-@' b'law' b'.' b'Upon' b'<unk>' b'in' b'front' b'merged' b'in' b'homeland' b'meridian' b'the' b'find' b'of' b'decree' b'.' b'<eos>' b'<unk>'
    b'by' b'Venkateswara' b'literature' b'screen' b'his' b'inheritance' b',' b'saying' b':' b'"' b'Typically' b'they' b'influenced' b'"' b'.' b'Thus' b',' b'the' b'snake' b'into'
    b'a' b'Jesuit' b'Exit' b'team' b'limited' b'[' b'of' b'our' b'sister' b"'s" b'path' b',' b'which' b'was' b'deeply' b'described' b'throughout' b'the' b'American' b'American'
    b'Army' b'.' b'The' b'novelist' b'WRU' b'<unk>' b',' b'Jr.' b'plays' b'his' b'body' b'on' b'the' b'form' b'of' b'examining' b'FITs' b'.' b'persistent' b'journalists'
    b'of' b'Surrender' b'infest' b'his' b'collection' b',' b'authorised' b'<unk>' b'the' b'scenario' b'with' b'efforts' b'.' b'Among' b'<unk>' b',' b'the' b'character' b'Riga' b'this'
    b'would' b'not' b'be' b'<unk>' b'.' b'Jupiters' b'for' b'the' b'title' b'<unk>' b'progresses' b'the' b'full' b'year' b'on' b'December' b'1' b',' b'1986' b','
    b'and' b'reported' b'that' b'possible' b'for' b'councillors' b'<unk>' b'the' b'building' b'.' b'In' b'addition' b',' b'<unk>' b'said' b'the' b'"' b'story' b'of' b'love'
    b'"' b'entertaining' b'stealing' b'had' b'contributed' b'to' b'print' b',' b'not' b'combat' b'in' b'with' b'a' b'planet' b'stream' b'.' b'A' b'similar' b'African' b'language'
    b'attended' b'by' b'1955' b',' b'and' b'showed' b'Power' b'Gibbons' b',' b'the' b'FIA' b'IX' b'for' b'Lincoln' b'reviewed' b'lists' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'Raffles' b'was' b'a' b'48' b'%' b'of' b'thirteen' b'months' b',' b'resulting' b'at' b'the' b'World' b'War'
    b',' b'or' b'between' b'The' b'England' b'History' b'to' b'enforce' b'St.' b'Petersburg' b"'s" b'Poetry' b"'s" b'A' b'Forest' b',' b'editor' b'@-@' b'in' b'@-@'
    b'Chief' b',' b'and' b'Joe' b'Hunter' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Murchada' b'Arizona' b'State' b'=' b'<eos>' b'<eos>' b'Bob' b'Fairies' b'(' b'grief'
    b',' b'education' b',' b'on' b'the' b'Olympics' b')' b'is' b'a' b'storm' b'number' b'is' b'listed' b'by' b'wild' b'violence' b',' b'Alabama' b"'s" b'skin'
    b',' b'the' b'128' b'of' b'<unk>' b'(' b'South' b')' b',' b'her' b'coinage' b'and' b'Scotland' b',' b'voters' b'and' b'sediments' b'from' b'famed' b'Church'
    b'@-@' b'length' b'films' b',' b'with' b'one' b'enormous' b'other' b'types' b'<unk>' b',' b'and' b'McGuire' b'.' b'In' b'the' b'1930s' b'stricken' b'route' b'that'
    b'divinities' b'caused' b'dynamite' b'of' b'Ireland' b'.' b'matte' b',' b'the' b'starboard' b'prey' b'cannot' b'be' b'established' b'.' b'The' b'S.C.' b'high' b'language' b'may'
    b'be' b'that' b'they' b'had' b'<unk>' b'a' b'case' b',' b'either' b'remembered' b'Examples' b'.' b'Accordingly' b',' b'close' b'to' b'James' b'narrates' b'her' b'name'
    b'to' b'preparation' b'.' b'So' b',' b'if' b'in' b'stage' b',' b'they' b'do' b'often' b'delay' b'so' b'their' b'body' b'to' b'adopt' b'it' b'.'
    b'If' b'they' b'only' b'lie' b'on' b'with' b'another' b'male' b'when' b'this' b'bird' b'is' b'recreated' b',' b'including' b'spilled' b'around' b'the' b'way' b'of'
    b'Quite' b'worsening' b'led' b'to' b'Penarth' b'energy' b',' b'in' b'fact' b'they' b'have' b'also' b'been' b'carries' b'in' b'similarly' b'@-@' b'freezing' b'north' b','
    b'when' b'micrometres' b',' b'Vedic' b'open' b'races' b'and' b'sequences' b'such' b'as' b'the' b'Shaw' b'Monthly' b'tests' b'and' b'Big' b'algae' b'are' b'smaller' b','
    b'and' b'concerts' b'sexually' b'too' b'aiding' b',' b'they' b'are' b'dissipating' b'by' b'copulation' b',' b'who' b'can' b'have' b'long' b'enough' b'prey' b'.' b'These'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.7
    loss: 5.168
    elapsed time (seconds): 112.5




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.208 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
