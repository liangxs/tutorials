
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Kinney' b'and' b'the' b'established' b'bottom' b'in' b'support' b'of' b'criminal' b'Trade' b'.' b'<unk>' b'in' b'those' b',' b'Watson' b'kept' b'reelection' b',' b'four'
    b'months' b'later' b',' b'after' b'being' b'reclassified' b'in' b'London' b'couguar' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Personnel' b'=' b'=' b'<eos>' b'<eos>' b'In'
    b'oder' b'Rico' b',' b'a' b'Boat' b'Leonard' b'listed' b'to' b'Metacritic' b'in' b'his' b'third' b'season' b'early' b'accumulating' b'development' b'of' b'resurrection' b',' b'sprite'
    b'numerous' b'Americans' b'.' b'secular' b'similarities' b'were' b'used' b'to' b'reduce' b'each' b'year' b',' b'but' b'statesman' b'received' b'another' b'credit' b'in' b'the' b'country'
    b'.' b'<eos>' b'The' b'game' b'won' b'the' b'Game' b'Award' b'ten' b'@-@' b'ninth' b'five' b'@-@' b'appearance' b'winning' b'in' b'Game' b'Boom' b'Island' b'in'
    b'East' b'origin' b'on' b'a' b'non' b'@-@' b'car' b'of' b'September' b'20' b'that' b'week' b'there' b'from' b'a' b'first' b'role' b'of' b'low' b'artillery'
    b'rituals' b'to' b'a' b'northeast' b'light' b'material' b',' b'driving' b'five' b'if' b'he' b'left' b'to' b'compete' b'in' b'October' b'.' b'A' b'change' b'to'
    b'request' b'was' b'known' b'of' b'popular' b'football' b',' b'which' b'signed' b'to' b'3' b'@.@' b'4' b'in' b'(' b'140' b'ft' b')' b'at' b'75'
    b'%' b',' b'was' b'closed' b'in' b'NSB' b',' b'low' b'on' b'the' b'same' b'diving' b'since' b'August' b'few' b'years' b'at' b'death' b'.' b'East'
    b'winds' b'per' b'primary' b',' b'satellite' b'clubs' b'were' b'downed' b',' b'and' b'a' b'act' b'about' b'it' b'should' b'be' b'seen' b'as' b'Beloved' b"'s"
    b'old' b'locks' b'emit' b'advisories' b'.' b'Six' b'barred' b'employers' b'at' b'St' b'Cross' b'is' b'richly' b'known' b'that' b'eucalypt' b'rain' b'should' b'be' b'done'
    b'.' b'The' b'United' b'States' b'of' b'Omar' b'was' b'estimated' b'of' b'a' b'ninety' b'@.@' b'59' b'eye' b'(' b'12' b'@.@' b'40' b'km' b'/'
    b'h' b')' b',' b'and' b'produces' b'a' b'2' b'@.@' b'4' b'lead' b'/' b'51' b'gill' b'male' b'(' b'95' b'@.@' b'3' b'inHg' b')'
    b'of' b')' b'.' b'Where' b'the' b'breeding' b'northeast' b'to' b'<unk>' b',' b'the' b'administered' b'along' b'at' b'which' b'sources' b'brought' b'situated' b')' b'fittings'
    b'in' b'relief' b',' b'where' b'winds' b'reported' b'to' b'seek' b'to' b'help' b'that' b'there' b'were' b'also' b'weakened' b'skills' b',' b'rebuild' b',' b'but'
    b'even' b'unable' b'to' b'be' b'destroyed' b'.' b'Later' b'inland' b',' b'Omar' b'redesignated' b'as' b'responsibility' b'that' b'were' b'none' b'of' b'Cecil' b',' b'with'
    b'literacy' b'carrying' b'<unk>' b'(' b'also' b'unknown' b',' b'Dodge' b'viewers' b')' b'and' b'New' b'1' b'(' b'Hayley' b')' b'state' b'.' b'<eos>' b'Upon'
    b'rely' b'in' b'racing' b',' b'Omar' b'became' b'stronger' b'@-@' b'sounding' b'for' b'the' b'pair' b'.' b'However' b',' b'they' b'significant' b'Cheke' b'in' b'order'
    b'to' b'develop' b'a' b'reduction' b'of' b'Vaishnava' b'structures' b'and' b"'\xc3\xad" b'technical' b'fans' b',' b'except' b'several' b'mushrooms' b'from' b'<unk>' b',' b'vegetables' b'and'
    b'dense' b'mounts' b'.' b'Common' b'seas' b'occur' b'around' b'several' b'permit' b'without' b'some' b'incident' b'.' b'In' b'an' b'row' b'about' b'curfew' b',' b'it'
    b'was' b'still' b'destroyed' b'as' b'"' b'sole' b'brick' b'"' b',' b'the' b'highest' b'twenty' b'of' b'which' b'were' b'saved' b'with' b'<unk>' b'fields' b'.'
    b'A' b'wall' b'from' b'Dawn' b'and' b'<unk>' b'reported' b'that' b'determining' b'effects' b'around' b'other' b'radar' b'via' b'retake' b'southwestward' b'.' b'It' b'was' b'associated'
    b'in' b'their' b'<unk>' b'style' b'.' b'O' b'One' b'\xe2\x80\x99' b't' b'low' b',' b'mostly' b'vulnerable' b'crop' b',' b'and' b'not' b'for' b'cadmium' b'as'
    b'promotional' b'.' b'Footage' b'at' b'being' b'used' b'to' b'be' b'put' b'to' b'the' b'Omar' b'in' b'Patterson' b',' b'it' b'turned' b'to' b'2000' b'as'
    b'his' b'robed' b'and' b'semi' b'@-@' b'profit' b'agricultural' b'@-@' b'tailed' b'succession' b'to' b'comment' b'if' b'it' b'was' b'an' b'difficult' b'accusation' b'.' b'A'
    b'contract' b'between' b'Stars' b'and' b'alabaster' b',' b'and' b'the' b'Irish' b'effects' b'<unk>' b'defense' b'account' b',' b'of' b'example' b';' b'Niven' b',' b'fishes'
    b',' b'Iceland' b'and' b'South' b'Africa' b'heptathlon' b'parties' b'both' b'who' b'were' b'designed' b'to' b'cross' b'their' b'Ramallah' b'.' b'They' b'also' b'supplied' b'numerous'
    b'starlings' b'.' b'In' b'the' b'United' b'States' b',' b'it' b'was' b'still' b'suggested' b'to' b'maintaining' b'the' b'<unk>' b'population' b'of' b'sizes' b'on' b'the'
    b'Americas' b'and' b'Nebraska' b',' b'and' b'create' b'its' b'individual' b'<unk>' b'from' b'its' b'mental' b'opinion' b'that' b'they' b'are' b'President' b'of' b'Truro' b','
    b'Sierra' b'membrane' b'bombs' b'officials' b',' b'and' b'<unk>' b'complex' b'<unk>' b'rifle' b'.' b'Irish' b'Karl' b'V' b'is' b'slowed' b'in' b'his' b'Hamar' b'<unk>'
    b'(' b'Democratic' b'bug' b')' b'where' b'Ceres' b'(' b'fined' b'Pan' b'starling' b'do' b'not' b'be' b'observed' b')' b'.' b'<eos>' b'Iguanodon' b'is' b'short'
    b',' b'because' b'such' b'as' b'Carnegie' b'sexpunctatus' b'and' b'are' b'surrounded' b'by' b'West' b'Union' b'before' b'the' b'1973' b'race' b'and' b'overwinter' b'to' b'Levee'
    b'Hawk' b'.' b'This' b'bird' b'would' b'be' b'moved' b'for' b'a' b'large' b'Torah' b',' b'brought' b'all' b'a' b'tall' b'cloudiness' b'of' b'large' b'bird'
    b',' b'which' b'added' b'more' b'for' b'to' b'discover' b'their' b'patient' b'grew' b'.' b'As' b'a' b'consequence' b',' b'it' b'is' b'talking' b'that' b'they'
    b'far' b'abruptly' b'to' b'attract' b'a' b'large' b'habitat' b',' b'together' b'Taylor' b'.' b'The' b'two' b'measurements' b'on' b'each' b'northern' b'signs' b'are' b'to'
    b'occupy' b'their' b'ice' b'high' b'star' b'@-@' b'<unk>' b',' b'ongoing' b'individuals' b'visible' b'with' b'their' b'angular' b'attacking' b'Irish' b'<unk>' b'.' b'This' b'model'
    b'is' b'debated' b'and' b'with' b'the' b'yellow' b'Males' b',' b'which' b'will' b'be' b'so' b'connected' b'.' b'<eos>' b'A' b'ornate' b'Boxing' b'Zappa' b'of'
    b'commerce' b'exist' b'on' b'October' b'10' b',' b'1998' b',' b'when' b'it' b'is' b'mostly' b'precipitated' b',' b'while' b'Ceres' b'of' b'Australia' b'suggest' b'that'
    b'humans' b'will' b'involved' b'Tech' b'.' b'At' b'least' b'three' b'years' b'old' b',' b'the' b'first' b'species' b'to' b'full' b'better' b'nervous' b'tides' b'to'
    b'145' b'%' b'were' b'replaced' b'by' b'apparel' b'.' b'Two' b'spots' b'9' b'hours' b'were' b'very' b'<unk>' b'.' b'<unk>' b'lock' b'distinct' b'common' b'cases'
    b'of' b'sediment' b',' b'having' b'since' b'been' b'used' b',' b'trademark' b'elements' b'.' b'<eos>' b'that' b'they' b'begin' b'with' b'taking' b'food' b',' b'they'
    b'occur' b'when' b'they' b'are' b'devotion' b'to' b'some' b'of' b'each' b'method' b',' b'which' b'exists' b'upon' b'in' b'about' b'10' b'killed' b'(' b'goal'
    b'once' b')' b'.' b'<eos>' b'Towns' b'to' b'a' b'variety' b'of' b'times' b',' b'physical' b'starlings' b',' b'airborne' b'people' b',' b'and' b'immense' b'climate'
    b'.' b'One' b'of' b'these' b'events' b'were' b'offer' b'for' b'the' b'large' b'ethnic' b'nature' b'with' b'numerous' b'gum' b'numbers' b'.' b'Five' b'non' b'@-@'
    b'year' b'cure' b'still' b'meant' b'populations' b'to' b'be' b'derived' b'into' b'railway' b'since' b'being' b'very' b'312' b',' b'either' b'as' b'long' b'and' b'short'
    b'females' b'could' b'be' b'at' b'least' b'two' b'training' b'species' b'to' b'become' b'taken' b'to' b'eastbound' b'or' b'elliptical' b'.' b'The' b'Frenchmen' b'only' b'grows'
    b'screw' b'more' b'quickly' b',' b'nozzle' b',' b'or' b'Procyon' b',' b'often' b'predicts' b'in' b'any' b'continent' b'.' b'Once' b'it' b'so' b'so' b'its'
    b'orders' b',' b'they' b'suggest' b'that' b'by' b'combat' b',' b'before' b'Ceres' b"'s" b'male' b'and' b'high' b'packed' b'are' b'capture' b'to' b'define' b'Ceres'
    b'several' b'hours' b'after' b'Yue' b"'s" b'pursuers' b'\xe2\x80\x94' b'Indians' b'running' b'to' b'the' b'nucleus' b',' b'taking' b'place' b'only' b'soon' b'to' b'assess' b'their'
    b'efficient' b'dimension' b'.' b'A' b'weeks' b'door' b',' b'with' b'an' b'average' b'high' b'female' b',' b'membrane' b'oil' b',' b'kept' b'agrarian' b'bound' b'into'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 203.2
    loss: 5.168
    elapsed time (seconds): 112.6




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  25.087 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
