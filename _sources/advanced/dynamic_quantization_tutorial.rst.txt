
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'was' b'adopted' b'after' b'these' b'expulsion' b'flights' b'to' b'1922' b'.' b'<eos>' b'pincers' b'subdued' b'contract' b',' b'effect' b'during' b'his' b'native' b'home'
    b',' b'glimpse' b',' b'and' b'failed' b'Sephiroth' b'introduces' b'a' b'new' b'reduction' b'for' b'British' b'male' b'spirit' b'of' b'Groundsel' b'.' b'Setting' b'with' b'turbines'
    b'and' b'dance' b',' b'ascent' b'<unk>' b'[' b'conformist' b']' b'deposit' b'campaign' b',' b'reaching' b'18' b':' b'00' b'professor' b',' b'one' b'of' b'32'
    b'@.@' b'79' b'ends' b',' b'and' b'40' b'@.@' b'4' b'percent' b',' b'of' b'with' b'RedOctane' b'designed' b'in' b'2001' b',' b'and' b'Hillsgrove' b','
    b'Saint' b'Mead' b',' b'racial' b'Gallian' b',' b'South' b'America' b',' b'and' b'over' b'10' b'%' b'on' b'and' b'alleging' b'.' b'When' b'he' b'slowly'
    b'named' b'the' b'discovery' b'of' b'cello' b',' b'they' b'only' b'<unk>' b'influence' b',' b'postal' b'heavy' b',' b'yellow' b',' b'and' b'muscle' b'by' b'fold'
    b'at' b'98' b'.' b'Since' b'continuing' b'as' b"'" b'first' b'in' b'the' b'movement' b'developing' b'its' b'such' b'@-@' b'party' b'<unk>' b',' b'these' b'birds'
    b'interpreted' b'that' b'her' b'church' b'is' b'enter' b'by' b'attaining' b'Few' b'contact' b'beyond' b'their' b'Has' b'participation' b'by' b'willing' b'to' b'be' b'paid' b'to'
    b'seal' b'.' b'Black' b',' b'both' b'Occupational' b',' b'and' b'no' b'impossible' b'group' b'and' b'rusty' b'power' b'<unk>' b',' b'south' b'of' b'a' b'distance'
    b'between' b'000' b'bulls' b',' b'<unk>' b'Hubble' b'viruses' b',' b'have' b'never' b'been' b'listed' b'upon' b'as' b'fractures' b'as' b'his' b'non' b'@-@' b'governing'
    b'origin' b'.' b'<unk>' b'is' b'generally' b'intended' b'to' b'feature' b'taking' b'Muhammad' b'against' b'birds' b'of' b'effective' b'birds' b'.' b'The' b'state' b'from' b'shorter'
    b'grew' b'and' b'hordes' b',' b'migration' b'<unk>' b',' b'dull' b'shaped' b'ranging' b'in' b'not' b'six' b'pairs' b'depending' b'in' b'rodents' b',' b'with' b'an'
    b'women' b'of' b'popularly' b'or' b'caps' b'blockaded' b',' b'well' b'electrical' b'Rhodesian' b',' b'indicating' b'it' b'clear' b',' b'Commissioner' b'long' b'has' b'allowed' b'Plain'
    b'.' b'There' b'is' b'only' b'strong' b'molecules' b'to' b'be' b'a' b'certain' b'organelle' b'dating' b'to' b'Virginia' b'.' b'VII' b'practices' b'exist' b'upon' b'rates'
    b'of' b'Rodriguez' b"'s" b'traits' b'of' b'memory' b'to' b'base' b'the' b'<unk>' b'school' b'<unk>' b'.' b'Finally' b',' b'it' b'has' b'been' b'so' b'heard'
    b'from' b'continental' b'and' b'Hoysala' b',' b'and' b'it' b'is' b'an' b'sacking' b'that' b'were' b'thought' b'to' b'have' b'occurred' b',' b'with' b'a' b'preferred'
    b'restless' b'shaped' b',' b'and' b'had' b'to' b'be' b'known' b'by' b'<unk>' b'n\xe1\xb9\xafr' b'.' b'<unk>' b'may' b'be' b'applied' b'to' b'birds' b',' b'Marseille'
    b',' b'also' b'even' b'monitored' b'with' b'their' b'informal' b'rocks' b',' b'instead' b'of' b'eastern' b'or' b'those' b'term' b'charges' b'.' b'Some' b'series' b'addresses'
    b'disputes' b'Fusiliers' b'plants' b'there' b'also' b'historical' b'@-@' b'treated' b'blue' b'bright' b'spots' b',' b'so' b'athletes' b'observed' b'food' b'as' b'they' b'have' b'fallen'
    b'to' b'large' b'spines' b'.' b'eyesight' b'brought' b'it' b'to' b'their' b'telephone' b'<unk>' b'and' b'populations' b'and' b'alligators' b',' b'and' b'they' b'are' b'shaped'
    b'as' b'chemical' b',' b'severe' b'signal' b',' b'so' b'<unk>' b'problems' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Odysseus' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'Most' b'gill' b'factors' b'have' b'shown' b'a' b'radius' b'by' b'behaviour' b'in' b'including' b'juvenile' b'.' b'creamy' b'authorities' b'included' b'each' b'winter' b','
    b'known' b'as' b'grasp' b'seaboard' b',' b'even' b'dense' b'food' b'.' b'They' b'can' b'only' b'be' b'located' b',' b'and' b'their' b'European' b'<unk>' b'coastal'
    b'Ordnance' b'.' b'Ingrid' b'clients' b'up' b'from' b'their' b'lunar' b'battle' b'on' b'England' b'on' b'December' b'9' b',' b'Florida' b',' b'but' b'it' b'contains'
    b'no' b'certain' b'array' b'being' b'noticed' b'to' b'globular' b',' b'among' b'magnitude' b'<unk>' b'<unk>' b'in' b'bobcat' b'.' b'recent' b'urban' b'starlings' b'have' b'been'
    b'relocated' b'to' b'the' b'central' b'male' b'remains' b'of' b'spread' b'<eos>' b'Today' b',' b'Ceres' b'contract' b'at' b'his' b'next' b'consecutive' b'and' b'conventional' b'stability'
    b'until' b'City' b"'s" b'Earth' b'is' b'still' b'noted' b'with' b'1532' b'.' b'One' b'king' b'743' b'gradually' b'traveling' b'from' b'a' b'old' b'offensive' b'of'
    b'a' b'frontal' b'distribution' b',' b'when' b'low' b'tails' b'injuries' b'does' b'not' b'extend' b'into' b'.' b'Instead' b',' b'they' b'are' b'also' b'known' b'to'
    b'adapt' b'its' b'Cities' b',' b'particularly' b'curved' b'even' b'toward' b'leg' b',' b'not' b'fires' b'.' b'In' b'his' b'wings' b',' b'they' b'must' b'open'
    b'taste' b'upon' b'latex' b'cells' b'.' b'G.' b'galericulata' b'have' b'been' b'rare' b'by' b'<unk>' b',' b'unrestricted' b',' b'<unk>' b',' b'and' b'cells' b'.'
    b'As' b'these' b'chicks' b'are' b'Molecular' b',' b'the' b'tentative' b'starling' b'reaches' b'into' b'its' b'townships' b',' b'only' b'in' b'the' b'Norman' b'form' b'of'
    b'radioactive' b'starlings' b',' b'and' b'the' b'changes' b'was' b'called' b'that' b'allows' b'throughout' b'the' b'temperate' b'cell' b'by' b'a' b'small' b'wild' b'circle' b'.'
    b'<eos>' b'In' b'a' b'boulders' b'review' b'that' b'disability' b'length' b'and' b'eyes' b'are' b'set' b'there' b',' b'they' b'can' b'be' b'been' b'seriously' b'able'
    b'.' b'However' b',' b'when' b'it' b'could' b'be' b'back' b'in' b'the' b'world' b'to' b'be' b'quoted' b'by' b'Archer' b',' b'he' b'may' b'be'
    b'neutrality' b'or' b'taking' b'even' b'a' b'Independence' b'River' b'date' b'.' b'If' b'they' b'share' b'off' b'of' b'<unk>' b'other' b'more' b'fat' b'factors' b','
    b'they' b'recovered' b'so' b'on' b'ground' b'.' b'Flagler' b',' b'and' b'or' b'close' b'at' b'least' b'one' b'or' b'leads' b'the' b'earlier' b'task' b'of'
    b'kakapo' b',' b'\xc2\xb0' b'or' b'other' b'birds' b'such' b'as' b'mint' b',' b'such' b'as' b'endurance' b'when' b'they' b'are' b'spotted' b'.' b'skin' b','
    b'or' b'those' b',' b'it' b'attempt' b'to' b'enjoy' b'some' b'or' b'legal' b'<unk>' b'that' b'become' b'currently' b'kept' b'to' b'stay' b'on' b'a' b'prey'
    b'Sovetskaya' b'.' b'Specimens' b'may' b'be' b'made' b'by' b'other' b'eukaryotic' b'origin' b'blamed' b'common' b'hot' b'parrot' b',' b'but' b'various' b'birds' b'for' b'common'
    b'starlings' b'throw' b'mRNA' b'<unk>' b'\xe2\x80\x94' b'which' b'formerly' b'gone' b'.' b'"' b'<unk>' b'@-@' b'up' b'"' b',' b'which' b'are' b'now' b'known' b'as'
    b'extending' b'(' b'long' b',' b'<unk>' b',' b'illustrious' b')' b'and' b'the' b'other' b'fuel' b'types' b',' b'are' b'the' b'true' b'type' b'of' b'only'
    b'between' b'them' b'.' b'At' b'the' b'same' b'head' b',' b'they' b'can' b'be' b'understood' b'by' b'the' b'fact' b'and' b'eye' b'Memorial' b',' b'but'
    b'may' b'also' b'be' b'used' b'but' b'there' b'are' b'some' b'remaining' b'species' b'completed' b'in' b'.' b'<unk>' b'either' b'alloys' b',' b'where' b'females' b'have'
    b'now' b'waste' b'tends' b'to' b'be' b'brittle' b'or' b'mammals' b'V\xc3\xa9ron' b'Pinus' b'poorer' b'.' b'According' b'to' b'plaster' b'roosts' b',' b'the' b'substrate' b'is'
    b'<unk>' b'introns' b'in' b'<unk>' b'with' b'other' b'cats' b'.' b'If' b'in' b'semi' b'children' b',' b'two' b'nesting' b'scholars' b'do' b'not' b'be' b'<unk>'
    b'.' b'Levon' b'incompleteness' b'conducted' b'coverts' b',' b'taking' b'every' b'change' b'on' b'the' b'top' b'of' b'three' b'feathers' b'.' b'Such' b'degenerated' b'from' b'past'
    b'males' b'.' b'In' b'orbit' b',' b'when' b'it' b'is' b'apparent' b'for' b'their' b'time' b'with' b'help' b',' b'it' b'possesses' b',' b'or' b'<unk>'
    b'<unk>' b'in' b'loud' b'foliage' b'.' b'Large' b'atrocities' b'of' b'the' b'kakapo' b'was' b'often' b'slowly' b'constructed' b'by' b'private' b'heritage' b'.' b'This' b'bird'
    b'is' b'remembered' b'by' b'discordant' b',' b'and' b'the' b'bird' b'itself' b'age' b'begins' b'his' b'eye' b'.' b'beetles' b',' b'quite' b'leading' b',' b'may'
    b'be' b'owned' b'as' b'a' b'bacteria' b'@-@' b'mate' b':' b'instead' b'of' b'installation' b'is' b'doing' b'at' b'on' b'a' b'way' b'or' b'has' b'incapable'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.0
    loss: 5.168
    elapsed time (seconds): 113.1




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.265 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
