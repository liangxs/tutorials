
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'a' b'native' b'attack' b'from' b'business' b'temperatures' b',' b'crossing' b'on' b'a' b'volcano' b'19' b'\xc2\xb0' b'in' b'2015' b'.' b'The' b'entire' b'FISA' b'song'
    b'it' b'would' b'be' b'support' b'of' b'the' b'<unk>' b'Game' b'American' b'State' b'for' b'three' b'dollars' b',' b'which' b'poetry' b'from' b'minor' b'attempts' b'prior'
    b'to' b'tests' b'that' b'think' b'less' b'paramount' b'between' b'the' b'same' b'thing' b'.' b'Gentlemen' b'saw' b'it' b'not' b'process' b'at' b'multiple' b'months' b','
    b'because' b'she' b'Manders' b'out' b'it' b'would' b'be' b'in' b'2006' b'.' b'The' b'diet' b'were' b'well' b'paid' b',' b'because' b'Midge' b"'s" b'description'
    b'led' b'in' b'two' b'1647' b'on' b'July' b'9' b'.' b'Since' b'he' b'sons' b'attended' b'his' b'crew' b'on' b'16' b'March' b'1801' b',' b'headed'
    b'to' b'100' b'%' b'of' b'daughters' b',' b'O' b"'Malley" b',' b'and' b'Band' b'<unk>' b'interchanges' b'of' b'law' b',' b'and' b'suggests' b'would' b'have'
    b'been' b'his' b'key' b'province' b'.' b'<eos>' b'The' b'population' b'of' b'an' b'higher' b'European' b'tent' b'included' b'Israel' b'just' b'just' b',' b'however' b','
    b'after' b'Movies' b'.' b'In' b'a' b'fifty' b'@-@' b'year' b'accomplishments' b'that' b'have' b'developed' b'activity' b"'s" b'bill' b',' b'the' b'largest' b'government' b'of'
    b'Siad' b'schools' b'<unk>' b'note' b'"' b'Blue' b')' b'licenses' b'with' b'burial' b'"' b',' b'being' b'published' b'<unk>' b'by' b'The' b'sky' b"'s" b'award'
    b'.' b'Doyle' b'are' b'HMS' b'alive' b'and' b'was' b'experimental' b'as' b'Leo' b'O' b'Gama' b',' b'then' b"'" b'Kudirka' b"'" b'ministers' b'.' b'<eos>'
    b'In' b'1954' b',' b'during' b'which' b',' b'during' b'uppermost' b'years' b',' b'a' b'psyche' b'of' b'Australian' b'and' b'chasing' b'ideal' b'habitat' b'required' b'in'
    b'Oregon' b'type' b'in' b'pose' b'and' b'spread' b'in' b'a' b'effort' b'to' b'be' b'found' b'.' b'Despite' b'these' b'games' b'in' b'the' b'vote' b','
    b'Villa' b'Mode' b'is' b'eaten' b'by' b'Bible' b'<unk>' b'introduced' b'by' b'vengeance' b'.' b'Casting' b'Boom' b'Bang' b'Bros.' b'did' b'not' b'conference' b'for' b'a'
    b'definition' b'to' b'release' b'territory' b'with' b'poaching' b',' b'providing' b'sequences' b'in' b'<unk>' b'production' b'quartered' b'.' b'It' b'is' b'known' b'on' b'substantial' b'practices'
    b'known' b'as' b'<unk>' b',' b'halides' b',' b'a' b'organ' b',' b'and' b'(' b'Rancho' b',' b'eclectic' b',' b'European' b',' b'and' b'farming' b')'
    b'with' b'an' b'rise' b'.' b'Further' b'as' b'their' b'taxon' b',' b'the' b'eye' b'has' b'advocated' b',' b'many' b'dams' b',' b'and' b'adults' b'Sioux'
    b'.' b'The' b'many' b'of' b'his' b'sex' b',' b'books' b',' b'and' b'fruit' b'Australian' b'ways' b'were' b'<unk>' b'.' b'The' b'title' b',' b'which'
    b'are' b'likewise' b'in' b'the' b'churches' b'are' b'<unk>' b';' b'@-@' b'ALL' b'and' b'a' b'dormitory' b'of' b'distinctly' b'bleak' b'support' b',' b'and' b'the'
    b'male' b'which' b'declined' b'to' b'appease' b'rolls' b'recognizing' b'a' b'bill' b'and' b'solved' b'the' b'storm' b'or' b'flanked' b',' b'having' b'a' b'waist' b'by'
    b'pure' b'eggs' b'.' b'For' b'example' b',' b'some' b'net' b'astronomers' b'are' b'distributed' b'to' b'processes' b'into' b'Bone' b'Space' b':' b'<unk>' b'or' b'seral'
    b',' b'Gophna' b'(' b'1994' b')' b',' b'and' b'<unk>' b'of' b'Norway' b'over' b'inherently' b'poets' b'.' b'The' b'letters' b'are' b'initially' b'separated' b'.'
    b'Arba' b'Pleasence' b'is' b'particularly' b'facing' b'in' b'and' b'interactive' b'absorption' b'.' b'For' b'example' b',' b'such' b'as' b'<unk>' b',' b'fingering' b',' b'Jarl'
    b'led' b'the' b'pieces' b'and' b'under' b'even' b',' b'by' b'44' b'\xe2\x80\x93' b'3' b',' b'at' b'which' b'several' b'lines' b'segregation' b'preventing' b'their' b'head'
    b'except' b'down' b',' b'from' b"'" b'salmon' b'or' b'della' b'screen' b',' b'and' b'simultaneously' b'.' b'The' b'other' b'types' b'bone' b'on' b'the' b'heart'
    b'above' b'the' b'ground' b'may' b'be' b'found' b'at' b'firmly' b'@-@' b'up' b'.' b'Both' b'interphase' b'areas' b'were' b'drinking' b',' b'to' b'not' b'continue'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>' b'<eos>' b'An' b'first' b'cell' b'authors' b'saw' b'worldwide' b'capacity' b'comments' b',' b'on'
    b'top' b'by' b'grazing' b',' b'<unk>' b',' b'cattle' b',' b'monazite' b',' b'Junction' b',' b'American' b'@-@' b'Georgian' b',' b'devout' b'or' b'vernacular' b','
    b'<unk>' b',' b'<unk>' b'or' b'ice' b',' b'a' b'era' b'so' b'reagent' b'and' b'a' b'white' b'species' b'that' b'favourable' b'than' b'what' b'are' b'important'
    b'before' b'relating' b'to' b'better' b'sea' b',' b'so' b'such' b'as' b'sheath' b'or' b'inhabitant' b',' b'were' b'<unk>' b'for' b'a' b'morphology' b'to' b'form'
    b'further' b'eaten' b'them' b'through' b'Chinese' b'with' b'spreading' b'their' b'high' b'complement' b'.' b'An' b'bird' b'\xe2\x80\x94' b'hunt' b'and' b'BL' b'and' b'allow' b'runs'
    b'to' b'wine' b',' b'arise' b',' b',' b'thought' b'that' b'the' b'kakapo' b'gets' b'out' b'into' b'an' b'angular' b'imagination' b'working' b'on' b'the' b'eye'
    b'.' b'For' b'example' b',' b'the' b'male' b'may' b'Brian' b'that' b'state' b'belt' b',' b'rather' b'than' b'5' b'miles' b'(' b'5' b'in' b')'
    b'across' b'which' b'they' b'are' b'administers' b'only' b'after' b'flying' b'.' b'(' b'1817' b',' b'when' b'being' b'Dench' b')' b',' b'even' b'air' b'occurring'
    b'natural' b'rosary' b',' b'each' b'male' b'species' b'may' b'be' b'preserved' b'down' b'.' b'<eos>' b'In' b'large' b'numbers' b',' b'a' b'horizontal' b'Rush' b'species'
    b'progressed' b'at' b'a' b'angle' b'of' b'350' b'kg' b'(' b'4' b'km' b'/' b'h' b')' b',' b'which' b'is' b'frequent' b',' b'help' b','
    b'and' b'the' b'trustees' b',' b'and' b'M.' b'O.' b'S.' b'europaeus' b',' b'especially' b'with' b'clusters' b'for' b'\xe2\x80\x93' b'mitosis' b'.' b'A' b'resurrection' b'called'
    b'thousands' b'of' b'Dollar' b'et' b'Mayo' b'to' b'maintain' b'tune' b'in' b'maturity' b'.' b'In' b'contrast' b',' b'PML' b'declines' b'1727' b'with' b'habit' b'of'
    b'food' b',' b'and' b'by' b'contrast' b'that' b'they' b'should' b'do' b'not' b'be' b'to' b'be' b'happy' b',' b'blue' b'birds' b'have' b'since' b'become'
    b'close' b'they' b'varies' b'until' b'their' b'night' b'.' b'However' b',' b'they' b'faces' b'on' b'underwater' b'cells' b'while' b'inside' b'predators' b'had' b'yield' b'on'
    b'their' b'current' b'pocket' b'molecule' b'gut' b'and' b'side' b'bleed' b'.' b'A' b'breeding' b'bowler' b'would' b'be' b'characterizing' b'by' b'their' b'previous' b'strategy' b','
    b'as' b'it' b'is' b'rare' b'by' b'a' b'mistake' b'.' b'It' b'has' b'short' b'effect' b'entertainment' b',' b'<unk>' b'minimum' b'directly' b',' b'but' b'('
    b'fonts' b')' b'.' b'In' b'2006' b',' b'they' b'are' b'commonly' b'very' b'elder' b',' b'which' b'only' b'pretty' b'fond' b'of' b'potential' b'Gaelic' b'displays'
    b'under' b'moored' b'coniferous' b',' b'typically' b'them' b'well' b'that' b'fresh' b'migration' b'are' b'reduced' b'to' b'<unk>' b',' b'which' b'enjoyed' b'them' b'seated' b'.'
    b'The' b'authenticity' b'of' b'<unk>' b'(' b'TBSA' b')' b'includes' b'it' b'the' b'first' b'<unk>' b'pale' b'glucose' b'horse' b'technique' b'.' b'The' b'beak' b','
    b'sometimes' b'forward' b'of' b'salt' b',' b'is' b'unknown' b'.' b'High' b'species' b'often' b'arise' b'in' b'some' b'native' b'areas' b',' b'similar' b'to' b'<unk>'
    b',' b'destroying' b'a' b'non' b'@-@' b'age' b'pattern' b'River' b'from' b'<unk>' b'.' b'The' b'fungus' b'speculated' b'that' b'most' b'species' b'of' b'the' b'ice'
    b'island' b'and' b'do' b'not' b'be' b'variable' b'.' b'That' b'caves' b'might' b'be' b'dark' b',' b'as' b'they' b'must' b'not' b'properly' b'swung' b'them'
    b'through' b'ordering' b'wings' b'.' b'<eos>' b'Capablanca' b'(' b'<unk>' b'<unk>' b')' b'are' b'derived' b'into' b'it' b',' b'meaning' b'that' b'or' b'when' b'there'
    b'may' b'be' b'access' b'to' b'territory' b',' b'they' b'may' b'be' b'obtained' b'under' b'inviting' b'predators' b',' b'and' b'they' b'firmly' b'succeeded' b'.' b'Their'
    b'prey' b'Arizona' b'find' b'contact' b'of' b'bellied' b',' b'and' b'they' b'have' b'most' b'grown' b'with' b'different' b'birds' b'throughout' b'the' b'worlds' b'.' b'Odaenathus'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.4
    loss: 5.168
    elapsed time (seconds): 116.0




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  44.525 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
