
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'loyalist' b'12' b'cm' b'(' b'50' b'ft' b'/' b'h' b')' b'at' b'Chauvel' b'level' b'of' b'lower' b'mobile' b'material' b'.' b'Researchers' b'markings' b'bonus'
    b'stones' b'such' b'in' b'other' b'km' b'rival' b'game' b'(' b'through' b'pier' b'arrest' b',' b'most' b'of' b'how' b'are' b'important' b'from' b'her' b'power'
    b'back' b'arrived' b'on' b'the' b'reorganisation' b'of' b'Oxfam' b')' b'.' b'They' b'ties' b'for' b'over' b'1' b'%' b'of' b'the' b'series' b'.' b'Also'
    b',' b'they' b'are' b'associated' b'it' b',' b'before' b'some' b'or' b'five' b'are' b'the' b'very' b'male' b'@-@' b'shaped' b'epithet' b'atrox' b',' b'a'
    b'profound' b'centre' b',' b'and' b'will' b'go' b'to' b'the' b'surrounding' b'companionship' b'.' b'<eos>' b'The' b'detailed' b'planet' b'takes' b'place' b'at' b'Saginaw' b'in'
    b'Idaho' b'and' b'Atwood' b"'s" b'Republic' b',' b'on' b'highest' b'or' b'only' b'the' b'largest' b'today' b'that' b'began' b'for' b'a' b'undisclosed' b'convoy' b'.'
    b'Three' b'are' b'next' b'when' b'it' b'is' b'commanded' b'by' b'Griffith' b',' b'black' b',' b'often' b'threatening' b'.' b'<eos>' b'Cambridge' b',' b'ranging' b'in'
    b'this' b'date' b',' b'criticized' b'a' b'common' b'majority' b'under' b'grout' b'from' b'living' b'guy' b'and' b'<unk>' b'mass' b',' b'Maggie' b"'" b'comprehensive' b'undated'
    b'and' b'becomes' b'<unk>' b'in' b'English' b',' b'a' b'making' b'divided' b'after' b'the' b'<unk>' b'cry' b'.' b'Other' b'birds' b'with' b'air' b'forests' b'contains'
    b'local' b'restrictions' b'of' b'Amazon' b'(' b'eating' b'remains' b')' b',' b'unable' b'to' b'orbit' b'an' b'nestlings' b'based' b'almost' b'at' b'nest' b'cell' b','
    b'but' b'naturalists' b'in' b'New' b'Zealand' b',' b'western' b'Reproduction' b',' b'has' b'also' b'reduced' b'over' b'each' b'other' b'.' b'The' b'next' b'year' b'the'
    b'eggs' b'were' b'party' b'zombies' b'.' b'St.' b'Health' b'Project' b'(' b'"' b'The' b"'" b'circles' b'@-@' b'Feel' b'Plum' b'"' b')' b'uses' b'mayor'
    b'@-@' b'shaped' b'owl' b'@-@' b'5' b',' b'commonly' b'known' b'as' b'<unk>' b',' b'inhabits' b'still' b'the' b'ships' b'.' b'The' b'forests' b'were' b'ruins'
    b'of' b'with' b'a' b'number' b'of' b'balls' b'.' b'More' b'recent' b'in' b'more' b'than' b'32' b'%' b'of' b'outbreaks' b'range' b'in' b'wider' b'sources'
    b'.' b'Both' b'altar' b'is' b'Gaboon' b'considered' b'to' b'be' b'long' b'made' b'to' b'be' b'spread' b'until' b'his' b'old' b'European' b'<unk>' b',' b'including'
    b'start' b'White' b"'s" b'thumb' b',' b'capable' b'of' b'a' b'Urania' b'which' b'are' b'relinquished' b'by' b'the' b'limbs' b'.' b'They' b'may' b'replace' b'short'
    b'birds' b'made' b'by' b'early' b'<unk>' b'sediment' b',' b'in' b'other' b'similar' b'gap' b',' b'scrap' b'or' b'handles' b'damage' b',' b'because' b'birds' b'for'
    b'Sites' b'were' b'certainly' b'deeply' b'contested' b',' b'mostly' b'present' b',' b'<unk>' b'the' b'Persians' b'.' b'Mason' b"'s" b'function' b'longer' b'pagoda' b'<unk>' b'.'
    b'A' b'number' b'of' b'birds' b',' b'caricatures' b',' b'importance' b'fuel' b',' b'rounded' b'kings' b'to' b'formation' b',' b'can' b'be' b'listed' b'"' b'or'
    b'spreading' b'in' b'flocks' b',' b'and' b'<unk>' b',' b'or' b'wishes' b'the' b'<unk>' b'featured' b'<unk>' b',' b'and' b'by' b'dissipating' b'.' b'"' b'it'
    b'is' b'reported' b'that' b'they' b'were' b'never' b'slow' b'.' b'birds' b'from' b'natural' b'starling' b'are' b'generally' b'of' b'fun' b'.' b'If' b'the' b'state'
    b'display' b',' b'stood' b'in' b'normal' b'form' b',' b'current' b'radiation' b';' b'she' b'often' b'has' b'-' b'hope' b'as' b'they' b'prevents' b'Something' b'legends'
    b'.' b'If' b'the' b'pistol' b'grows' b'to' b'the' b'ground' b',' b'her' b'feathers' b'linked' b'to' b'a' b'new' b'orange' b'spike' b'to' b'produce' b'the'
    b'female' b'to' b'whether' b'they' b'pass' b'to' b'Vai' b'.' b'If' b'they' b'restart' b'the' b'nature' b'of' b'undesirable' b'division' b',' b'they' b'are' b'upstream'
    b'by' b'Uganda' b'COB' b',' b'when' b'they' b'can' b'still' b'turn' b'an' b'well' b'among' b'the' b'males' b'.' b'For' b'slow' b',' b'these' b'the'
    b'<unk>' b',' b'so' b'possible' b',' b'it' b'does' b'not' b'meet' b'a' b'planet' b'to' b'this' b'species' b'is' b'similar' b'to' b'hospital' b'.' b'These'
    b'<unk>' b'migrate' b'and' b'may' b'be' b'mentioned' b'he' b'loose' b'one' b'or' b'other' b'prey' b'vapor' b',' b'especially' b'under' b'other' b'eggs' b'.' b'In'
    b'the' b'Freeland' b',' b'this' b'may' b'be' b'about' b'Flowers' b'for' b'other' b'birds' b',' b'Europe' b',' b'1947' b',' b'Prior' b'to' b'convictions' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>' b'<eos>' b'Mycena' b'galericulata' b'of' b'Ceres' b'include' b'semen' b'nocturnal' b',' b'remix' b'of' b'Decatur'
    b',' b'absorption' b',' b'<unk>' b',' b'and' b'muscle' b'cladogram' b'.' b'Its' b'standing' b'is' b'modified' b'6' b'@.@' b'5' b'in' b'(' b'430' b'@.@'
    b'8' b'mph' b')' b'at' b'their' b'upper' b'eastern' b'length' b'.' b'According' b'to' b'intensity' b',' b'they' b'were' b'Delia' b'and' b'other' b'of' b'his'
    b'behaviour' b'.' b'In' b'the' b'amount' b'of' b'disassembly' b',' b'A.' b'<unk>' b'(' b'born' b'The' b'same' b'name' b')' b'in' b'a' b'game' b'involved'
    b'from' b'2' b'@.@' b'5' b',' b'plus' b'40' b'seconds' b'.' b'The' b'human' b'number' b'of' b'lifespan' b'ordering' b'nearly' b'much' b'two' b'or' b'150'
    b'or' b'eight' b',' b'four' b'spots' b'if' b'the' b'Plan' b'of' b'downs' b',' b'especially' b'.' b'These' b'fertilizers' b'walks' b'established' b'even' b'Ramsbury' b'during'
    b'any' b'other' b'parrot' b'.' b'It' b'is' b'Nielsen' b'McNeill' b',' b'and' b'Pagoda' b'states' b'they' b'are' b'behind' b'their' b'condition' b'.' b'<eos>' b'Another'
    b'average' b'mating' b'(' b'minerals' b')' b'extends' b'around' b'the' b'first' b'six' b'seconds' b'of' b'apply' b'over' b'an' b'larger' b'to' b'prepare' b',' b'23'
    b'@.@' b'8' b'kg' b'(' b'45' b'@.@' b'7' b'mi' b')' b'away' b',' b'and' b'to' b'allow' b'age' b'theories' b'(' b'NBA' b'when' b'females'
    b')' b'may' b'Hawkins' b',' b'but' b'is' b'usually' b'large' b'by' b'measuring' b'to' b'meet' b'once' b'when' b'they' b'see' b'.' b'If' b'they' b'be'
    b'rarely' b'used' b'in' b'cash' b',' b'they' b'are' b'present' b'.' b'As' b'they' b'care' b',' b'they' b'may' b'have' b'<unk>' b'evidence' b'watches' b','
    b'with' b'those' b'characteristic' b'through' b'their' b'consolidation' b'carrying' b'it' b'.' b'<eos>' b'Above' b'Felicia' b',' b'mistakenly' b',' b'forming' b'thousands' b'of' b'range' b'of'
    b'Merrill' b';' b'while' b'those' b'from' b'Sicilian' b',' b'between' b'example' b',' b'females' b'expected' b'it' b'they' b'didn' b"'t" b'not' b'ye' b'for' b'metallicity'
    b'and' b'eyed' b'.' b'According' b'to' b'predators' b',' b'they' b'shall' b'be' b'so' b'present' b'by' b'alkali' b'sequence' b',' b'under' b'male' b'smaller' b'proportion'
    b'being' b'spherical' b',' b'such' b'as' b'stimulated' b'down' b',' b'fat' b',' b'or' b'morphologies' b',' b'including' b'others' b'to' b'fly' b'like' b'as' b'overly'
    b'.' b'In' b'the' b'same' b'piece' b',' b'as' b'nightingale' b'of' b'male' b'behaviour' b'are' b'also' b'that' b'of' b'other' b'movement' b',' b'found' b'as'
    b'a' b'@-@' b'post' b'disturbance' b'.' b'<eos>' b'cluster' b'have' b'been' b'considerably' b'divided' b'when' b'small' b',' b'most' b'successful' b'in' b'Montana' b'except' b'coins'
    b'Salman' b',' b'allowed' b'that' b'collapsing' b'amounts' b'of' b'birds' b'throughout' b'all' b'a' b'original' b'presence' b',' b'so' b'the' b'kakapo' b'<unk>' b'chemical' b'and'
    b'power' b'sides' b'has' b'been' b'separated' b'.' b'<eos>' b'Panthers' b'completed' b'the' b'population' b'of' b'<unk>' b',' b'exit' b',' b'which' b'developed' b'is' b'scripts'
    b',' b'but' b'reaches' b'a' b'flour' b'back' b'around' b'<unk>' b'and' b'erotic' b'.' b'A' b'meeting' b'later' b',' b'uses' b'their' b'Sb' b'to' b'their'
    b'male' b'bird' b',' b'has' b'assisting' b'evident' b'prey' b'.' b'<eos>' b'The' b'fulfill' b'species' b',' b'though' b'being' b'replaced' b'by' b'unsuitable' b'.' b'They'
    b'are' b'pale' b'associated' b'by' b'this' b'same' b'individual' b'.' b'Kakapo' b'spots' b'eat' b'companions' b'and' b'their' b'assessment' b'in' b'the' b'office' b'of' b'plants'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 201.1
    loss: 5.168
    elapsed time (seconds): 112.5




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  22.864 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
