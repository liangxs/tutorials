
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'ZX' b'Brenda' b',' b'and' b'are' b'source' b'forlorn' b'.' b'In' b'the' b'Oxford' b'Journal' b',' b'INS' b'147' b'is' b'eight' b',' b'estimated' b'to'
    b'be' b'able' b'to' b'meet' b'<eos>' b'CBS' b'@-@' b'Media' b'were' b'largely' b'teachings' b'to' b'fragilis' b'.' b'<unk>' b'totals' b'estimate' b'that' b'they' b'were'
    b'spreading' b'whilst' b'they' b'keep' b'founded' b'.' b'Also' b'the' b'first' b'public' b'alphabets' b'change' b'of' b'their' b'return' b'strengthening' b'by' b'Chicago' b',' b'where'
    b'other' b'groups' b'allegedly' b'spread' b'totals' b'prior' b'to' b'their' b'account' b'it' b'is' b'restrained' b'by' b'almost' b'as' b'they' b'emit' b'.' b'Banksia' b'Fairies'
    b'is' b'believed' b'to' b'that' b'if' b'Alfred' b'acknowledged' b'transferring' b'O' b'Croix' b'and' b'Road' b'to' b'help' b'their' b'flag' b'chicks' b'Market' b'<unk>' b'the'
    b'planet' b'<unk>' b'for' b'Munster' b'.' b'<eos>' b'The' b'scientific' b'language' b'of' b'males' b'are' b'sometimes' b'known' b'.' b'Likewise' b',' b'he' b'Gardnerian' b'pale'
    b'1973' b'and' b'travel' b'the' b'lands' b',' b'particularly' b'as' b',' b'with' b'informal' b'dynamics' b'Ireland' b'as' b'even' b'the' b'MK' b'horns' b'.' b'However'
    b',' b'some' b'human' b'non' b'@-@' b'spored' b'the' b'condensation' b'of' b'astronomical' b'bright' b'Waves' b'has' b'been' b'some' b'survived' b'for' b'illegally' b'.' b'<eos>'
    b'The' b'243' b'deck' b'poses' b'was' b'painted' b'in' b'Viking' b'areas' b',' b'which' b'use' b'detailed' b'@-@' b'purposes' b'between' b'its' b'origin' b'and' b'female'
    b',' b'with' b'Boulder' b'from' b'former' b'that' b'are' b'locally' b'possible' b',' b'the' b'thorough' b'structure' b'of' b'aerial' b'shamans' b'.' b'This' b'comprises' b'will'
    b'be' b'shown' b'in' b'listings' b',' b'and' b'there' b'is' b'no' b'sound' b'of' b'an' b'one' b'since' b'different' b'history' b'is' b'too' b'modest' b'and'
    b'<unk>' b'.' b'The' b'lit' b'scales' b'elsewhere' b',' b'when' b'males' b'(' b'370' b'@-@' b'eared' b',' b'grey' b'and' b'male' b'females' b')' b'is'
    b'derived' b'down' b'Pallas' b'and' b'the' b'birds' b'only' b'usual' b'with' b'a' b'large' b'capital' b'of' b'alloys' b'.' b'<eos>' b'Although' b'the' b'griffin' b'of'
    b'compact' b'studies' b'into' b'Ceres' b'is' b'mountains' b',' b'they' b'cause' b'eight' b'dots' b'.' b'During' b'third' b',' b'females' b'leave' b'a' b'neck' b'across'
    b'each' b'grazing' b';' b'we' b'follow' b',' b'and' b'there' b'is' b'generally' b'more' b'other' b'grape' b'migrants' b'for' b'two' b'statues' b'of' b'Ceres' b'.'
    b'But' b'human' b'violet' b'amounts' b'are' b'heated' b',' b'are' b'generally' b'though' b'this' b'AOC' b'is' b'New' b'only' b'so' b'to' b'be' b'a' b'very'
    b'erratic' b'descendant' b'until' b'her' b'will' b'strengthen' b'.' b'Established' b'they' b'do' b'plumage' b'his' b'excavations' b'of' b'five' b'\xe2\x80\x93' b'six' b'or' b'four' b'females'
    b'from' b'female' b',' b'@-@' b'flock' b',' b'and' b'incomplete' b'plumage' b'.' b'In' b'particular' b',' b'it' b'are' b'often' b'visible' b'around' b'123' b'or'
    b'100' b'females' b'to' b'obtain' b'over' b'100' b'ships' b'reconciliation' b',' b'sometimes' b'the' b'with' b'screen' b'or' b'dropped' b'blue' b'.' b'The' b'pagan' b'chicks'
    b'compared' b'into' b'1862' b'rest' b',' b'although' b'their' b'rest' b'as' b'a' b'natural' b'feature' b'are' b'<unk>' b'.' b'There' b'are' b'also' b'reports' b'of'
    b'whether' b'to' b'spread' b'a' b'large' b'city' b',' b'according' b'to' b'dredge' b'embankments' b',' b'it' b'is' b'because' b'they' b'eventually' b'suffer' b'to' b'feed'
    b'.' b'<unk>' b'above' b'100' b'minutes' b'has' b'been' b'variants' b'or' b'20' b'@-@' b'lived' b',' b'into' b'which' b',' b'f' b'with' b'long' b'vocalization'
    b'<unk>' b'(' b'<unk>' b')' b'are' b'a' b'short' b'species' b'.' b'Further' b'export' b',' b'mature' b',' b'5' b'\xe2\x80\x93' b'68' b'and' b'(' b'1872'
    b')' b',' b'females' b'Chorus' b'with' b'the' b'24' b'@-@' b'double' b'catalytic' b'chicks' b'for' b'Amylostereum' b'oxygen' b'.' b'The' b'tail' b'parallels' b'a' b'eye'
    b'perception' b'for' b'a' b'network' b'of' b'recovery' b'and' b'inscriptions' b'.' b'<eos>' b'fruitcake' b'model' b'is' b'distinguished' b'as' b'it' b'walks' b'towards' b'co' b'@-@'
    b'Lowman' b'to' b'condoms' b'and' b'may' b'be' b'darkening' b',' b'whereas' b'they' b'were' b'well' b'up' b'.' b'Firstly' b',' b'there' b'are' b'them' b'references'
    b'to' b'there' b'.' b'In' b'the' b'deaths' b'they' b"'m" b'such' b'to' b'manage' b'finds' b'passengers' b'or' b'mice' b',' b'it' b'has' b'green' b'organizing'
    b'calls' b'close' b'to' b'more' b'pure' b'.' b'In' b'rapid' b'Witchcraft' b',' b'other' b'genes' b'were' b'<unk>' b'by' b'several' b'<unk>' b'Xi' b'relaxing' b','
    b'"' b'and' b'birds' b'<unk>' b'SR' b'supervising' b'strong' b'harm' b'<unk>' b'nation' b',' b'and' b'mink' b'(' b'queen' b')' b',' b'long' b'and' b'device'
    b'to' b'be' b'seen' b',' b'and' b'his' b'characteristic' b'Echave' b'@-@' b'44b' b',' b'and' b'far' b'them' b',' b'they' b'shall' b'weren' b"'t" b'be'
    b'unreliable' b'.' b'As' b'expatriates' b',' b'a' b'laser' b'drink' b'"' b'.' b'The' b'inscription' b'is' b'very' b'lobster' b'in' b'other' b'male' b'circumstances' b':'
    b'a' b'bone' b'pathway' b'(' b'<unk>' b',' b'<unk>' b'.' b'"' b'Eye' b'"' b')' b',' b'6th' b'paintings' b'(' b'see' b'and' b'tall' b'subway'
    b')' b'and' b'food' b'Corran' b'(' b'<unk>' b')' b',' b'and' b'black' b'criticisms' b')' b'are' b'still' b'lower' b'types' b'by' b'her' b'wings' b'and'
    b'continue' b'to' b'convey' b'the' b'characters' b'or' b'falling' b'into' b'its' b'own' b'eggs' b'.' b'This' b'looks' b'on' b'ground' b'back' b'in' b'Verde' b','
    b'with' b'one' b'six' b'km' b'(' b'0' b'@.@' b'8' b'in' b')' b',' b'driving' b'from' b'hundreds' b'of' b'chicks' b'27th' b'with' b'the' b'affected'
    b',' b'one' b'wall' b';' b'with' b'food' b'@-@' b'shaped' b',' b'renditions' b',' b'Laurie' b'homes' b',' b'Athens' b'scores' b',' b'percussion' b'Infinity' b','
    b'<unk>' b',' b'algae' b',' b'\xe1\x83\xa1' b',' b'leather' b',' b'who' b'issued' b'the' b'European' b'nature' b'of' b'humorous' b',' b'secular' b'carriers' b',' b'supporting'
    b',' b'it' b'and' b'enlarged' b'their' b'noise' b'at' b'his' b'date' b'.' b'A' b'small' b'earth' b'proposes' b'Kirchner' b'that' b'long' b'presents' b'Doom' b'throughout'
    b'the' b'traditional' b'East' b'case' b'of' b'Roman' b'Places' b',' b'containing' b'her' b'location' b'Toulouse' b'under' b'Quinn' b'.' b'crib' b',' b'hence' b',' b'plantations'
    b'.' b'<eos>' b'A' b'zinc' b'margin' b'form' b'oil' b',' b'Florida' b',' b'and' b'Brian' b'publishes' b'Con' b'with' b'Seitz' b'.' b'Although' b'they' b'abundant'
    b'<unk>' b',' b'they' b'set' b'successful' b'152' b'hours' b'in' b'adoption' b',' b'even' b'back' b'.' b'Inside' b'on' b'a' b'variety' b'of' b'other' b'kakapo'
    b',' b'they' b'were' b'pitted' b'by' b'females' b'on' b'culprits' b',' b'particularly' b'if' b"'s" b'phylogenetic' b'measures' b'occurs' b'into' b'previously' b'monitors' b'.' b'They'
    b'will' b'have' b'different' b'appear' b'towards' b'its' b'extinct' b'territories' b'that' b'find' b'develop' b'Europe' b'.' b'If' b'although' b'agility' b'granted' b'the' b'feeding' b'from'
    b'side' b',' b'Rock' b'and' b'calls' b'missing' b'reach' b'the' b'nest' b'at' b'a' b'oriented' b'end' b'while' b'there' b'was' b'12' b'km' b'(' b'<unk>'
    b'ft' b')' b'per' b'sexual' b'plants' b'.' b'One' b'birds' b'found' b'to' b'do' b'down' b'the' b'coast' b'and' b'function' b'not' b'joyful' b'before' b'<unk>'
    b'.' b'In' b'their' b'roosts' b',' b'it' b'provides' b'very' b'widespread' b'images' b'of' b'five' b'in' b'<unk>' b',' b'the' b'male' b'actually' b'indicates' b'<unk>'
    b'.' b'They' b'then' b'ritualistic' b'individuals' b'Haifa' b',' b'or' b'blond' b'and' b'beings' b',' b'which' b'pre' b'@-@' b'economic' b'<unk>' b'.' b'Once' b'entering'
    b'appreciation' b',' b'the' b'chicks' b'are' b'targeted' b'during' b'Hebrew' b'and' b'very' b'tight' b'I' b'do' b'surface' b'animals' b'.' b'Other' b'variation' b'flee' b'in'
    b'shift' b',' b'Kantara' b',' b'intrusion' b',' b'and' b'<unk>' b'argue' b'.' b'<eos>' b'In' b'the' b'<unk>' b"'s" b'flock' b'of' b'kakapo' b',' b'they'
    b'have' b'significant' b'results' b'to' b'have' b'measured' b'colour' b',' b'which' b'favored' b'it' b'as' b'not' b'a' b'mocking' b'forms' b'a' b'indication' b'of' b'930'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.8
    loss: 5.168
    elapsed time (seconds): 114.2




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  21.331 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
