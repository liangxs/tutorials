
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'Its' b'efforts' b'has' b'also' b'experienced' b'permission' b'to' b'be' b'a' b'approaches' b'of' b'his' b'female' b'and' b'to' b'those' b'of' b'material' b'('
    b'Orkney' b')' b';' b'even' b'the' b'sound' b'will' b'be' b'<unk>' b'.' b'This' b'fact' b'is' b'not' b'appeals' b'to' b'suborder' b',' b'off' b'Renewed'
    b'peregrine' b'Brill' b'intercourse' b',' b'and' b'eventually' b'in' b'the' b'village' b'of' b'France' b',' b'the' b'copy' b'of' b'any' b'other' b'active' b'image' b','
    b'Gielgud' b'(' b'died' b'as' b'Arizona' b')' b'and' b'knocks' b'William' b'Enriquillo' b'somewhat' b'playing' b'as' b'<unk>' b',' b'under' b'<unk>' b'<unk>' b',' b'formally'
    b'Zweig' b'refers' b'a' b'leg' b'of' b'six' b'others' b',' b'<unk>' b'\xe2\x80\x93' b'consult' b'on' b'other' b'sculptor' b'flower' b',' b'designed' b'footage' b'to' b'his'
    b'insemination' b'first' b'guild' b'.' b'"' b'The' b'Dream' b'Vida' b'University' b'was' b'probably' b'away' b'in' b'art' b'school' b'Section' b'II' b'egg' b'in' b'main'
    b'privacy' b'"' b',' b'while' b'"' b'leather' b'in' b'1978' b'"' b'of' b'one' b'demanding' b'the' b'"' b'I' b'wanted' b'to' b'dig' b'down' b'it'
    b'in' b'any' b'show' b',' b'saying' b'night' b'that' b'that' b'Vocals' b'did' b'explode' b'.' b'II' b'is' b'\xe2\x80\x94' b'their' b'mistake' b'well' b'as' b'a'
    b'Catholic' b'covering' b'all' b'of' b'developments' b'.' b'Another' b'proof' b'is' b'so' b'dangerous' b'into' b'Meeting' b'.' b'"' b'Jordan' b'comments' b'surviving' b'affected' b'materials'
    b'on' b'any' b'concept' b'school' b',' b'while' b'the' b'Siege' b'of' b'everyone' b'had' b'affects' b'.' b'Ceres' b'also' b'went' b'on' b'between' b'several' b'languages'
    b'by' b'a' b'additional' b'contemporary' b'businessman' b',' b'Kirkpatrick' b'social' b'order' b'which' b'described' b'a' b'reactions' b'success' b',' b'as' b'he' b'won' b'of' b'controlling'
    b'1703' b'a' b'PlayStation' b'2' b'@-@' b'43' b'ECU' b'that' b'lasted' b'greater' b'shows' b'who' b'.' b'Goodwin' b'logic' b'O' b"'Malley" b'from' b'same' b'or'
    b'broken' b'several' b'children' b',' b'including' b'a' b'prince' b'who' b'deemed' b'surgery' b'from' b'Adventure' b'Lane' b"'" b'End' b'"' b'Robert' b'Of' b'this' b'Sholay'
    b'(' b'dimension' b'"' b')' b';' b'in' b'his' b'2001' b'performance' b'of' b'prayer' b'in' b'June' b'1917' b'he' b'had' b'two' b'witch' b'bells' b'philosopher'
    b'Wheeler' b"'s" b'next' b'wife' b'<unk>' b'.' b'Then' b'as' b'a' b'Anonymus' b'book' b',' b'O' b"'Malley" b'listed' b'a' b'pad' b'Mixed' b'with' b'the'
    b'resident' b'recruiting' b'combinations' b'(' b'which' b'declined' b'Henson' b'Chaak' b'from' b'May' b'5' b',' b'2009' b'.' b'Sixth' b'visits' b'by' b'<unk>' b'GameSpy' b'of'
    b'Bills' b')' b',' b'The' b'game' b"'s" b'all' b'game' b',' b'while' b'four' b'critics' b',' b'and' b'a' b'bad' b'school' b'effort' b',' b'did'
    b'not' b'be' b'O' b'ser' b'of' b'.' b'Not' b'average' b'AML' b'for' b'staff' b',' b'Australian' b'actress' b'Maurice' b'<unk>' b'said' b'that' b'Raffles' b'who'
    b'had' b'his' b'administrative' b',' b'and' b'3D' b'Jack' b'Those' b',' b'both' b'reviewer' b'Halliwell' b'<unk>' b',' b'Rainn' b'v.' b'Per' b'MP' b'who' b'played'
    b'this' b'as' b'"' b'<unk>' b'of' b'for' b'interests' b'without' b'this' b'life' b'would' b'move' b'one' b'is' b'gather' b'in' b'farming' b'Goffman' b'or' b'Financial'
    b'It' b'drug' b'The' b'Church' b';' b'more' b'made' b'[' b'The' b']' b'value' b'Pizhi' b'"' b'writes' b'what' b'they' b'remember' b'anything' b'"' b'it'
    b"'s" b'see' b'the' b'item' b'started' b',' b'a' b'patient' b'thinks' b'in' b'<unk>' b'moments' b',' b'air' b'so' b'and' b'pictures' b',' b'"' b'and'
    b'"' b'DeGroot' b'was' b'used' b'to' b'Arnold' b'<unk>' b'of' b'devotion' b'"' b'.' b'<eos>' b'In' b'May' b'1969' b'Mosley' b'announced' b'a' b'distributor' b'<unk>'
    b'influence' b':' b'The' b'world' b'had' b'been' b'positive' b'as' b'a' b'sensation' b',' b'instead' b'of' b'six' b'amateur' b'stories' b'on' b'the' b'coast' b'December'
    b'Stratford' b',' b'Ulysses' b'<unk>' b'<unk>' b',' b'<unk>' b',' b'<unk>' b'Davis' b'and' b'each' b'Seville' b'in' b'Van' b'.' b'<eos>' b'The' b'story' b'was'
    b'released' b'as' b'a' b'highlight' b'from' b'city' b'.' b'The' b'two' b'popular' b'books' b'are' b'shown' b'in' b'Johnny' b'Hunter' b'.' b'The' b'book' b'involved'
    b'Gaul' b'\xe2\x80\x93' b'<unk>' b',' b'a' b'<unk>' b'fit' b'that' b'won' b'fourth' b'the' b'Rock' b'in' b'February' b'1943' b',' b'while' b'Cornet' b"'" b'publisher'
    b'"' b'Bono' b']' b'of' b'many' b'@-@' b'eyed' b'girl' b'"' b'in' b'Cloud' b'in' b'the' b'2007' b'television' b'film' b'The' b'Post' b';' b'the'
    b'album' b'described' b'up' b'to' b'Raffles' b"'s" b'character' b'to' b'accomplish' b'several' b'students' b'.' b'According' b'to' b'Hornung' b',' b'Hornung' b'acknowledged' b'a' b'120'
    b'@-@' b'seam' b'<unk>' b'instead' b',' b'published' b'for' b'the' b'head' b'in' b'the' b'town' b'of' b'remembering' b'him' b'for' b'a' b'criminal' b'case' b'at'
    b'there' b',' b'Adrenaline' b'in' b'1976' b'.' b'The' b'character' b'is' b'credited' b'to' b'some' b'exceptions' b',' b'Jordan' b'bondage' b'denied' b'both' b'@-@' b'of'
    b'@-@' b'law' b'.' b'In' b'1983' b'musicians' b'released' b'Hokie' b'Day' b'criticizes' b'could' b'store' b'up' b'%' b'from' b'Robin' b'Ray' b'on' b'the' b'film'
    b"'" b'TV' b'200' b'losses' b',' b'and' b'the' b'Raffles' b'<unk>' b'Dixon' b'is' b'announced' b'to' b'Mike' b'genres' b',' b'which' b'resulted' b'in' b'1986'
    b'when' b'Faulkner' b'joined' b'abbreviated' b'songwriting' b',' b'Bell' b'and' b'Doug' b'Jones' b',' b'to' b'return' b'fade' b'Even' b'to' b'facilitate' b'shipments' b'of' b'their'
    b'books' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Films' b'=' b'=' b'<eos>' b'<eos>' b'The' b'book' b'received' b'romantic' b'reviews' b'on' b'television' b'critics' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Recording' b'=' b'=' b'<eos>' b'<eos>' b'The' b'1999' b'Put' b'poet' b'!' b'I' b'stripped' b'as' b'Steve' b'Miss' b'.'
    b'The' b'paperback' b'race' b'is' b'a' b'game' b'deemed' b'a' b'collaboration' b'to' b'avoid' b'footage' b'of' b'lover' b'Dershowitz' b'was' b'the' b'son' b'.' b'Wrigley'
    b'included' b'it' b'a' b'"' b'thumb' b'@-@' b'down' b'"' b'Documentaries' b',' b'which' b'is' b'turned' b'to' b'Hope' b'as' b'"' b'taking' b'an' b'lot'
    b'"' b'project' b',' b'trivial' b'discontent' b'and' b'Raffles' b'from' b'cash' b'.' b'The' b'<unk>' b'included' b'well' b'/' b'16' b'and' b'two' b'minutes' b'.'
    b'A' b'versions' b'of' b'NBC' b'<unk>' b'competition' b'is' b'Margaret' b'restriction' b',' b'as' b'by' b'1981' b'as' b'Maeonius' b'moved' b'in' b'a' b'review' b','
    b'Seth' b'Shaotang' b'and' b'Scott' b'Jessica' b'<unk>' b'of' b'Raffles' b'in' b'Chains' b'.' b'The' b'overall' b'religious' b'novelist' b'suggests' b'throughout' b'her' b'fate' b':'
    b'"' b'He' b'then' b"'ve" b'a' b'bit' b'to' b'meaningless' b'to' b'any' b'points' b'!' b'"' b'.' b'Despite' b'this' b'African' b',' b'Joyful' b'is'
    b'worried' b'to' b'be' b'very' b'artifacts' b'.' b'<eos>' b'Following' b'the' b'sequence' b'of' b'Mars' b',' b'Bono' b'Leigh' b'wrote' b'that' b'Fungi' b'(' b'Chris'
    b'Tale' b')' b'is' b'no' b'<unk>' b'or' b'p\xc3\xa9dalier' b'.' b'It' b'can' b'have' b'been' b'perhaps' b'trying' b'to' b'hide' b',' b'intense' b',' b'<unk>'
    b',' b'issues' b'as' b'[' b',' b'such' b'less' b'one' b'and' b'her' b'<unk>' b'is' b'even' b'influenced' b'by' b'all' b'species' b'of' b'activity' b'.'
    b'Flocks' b'<unk>' b',' b'breaks' b',' b'or' b'a' b'conclusion' b'of' b'people' b'.' b'The' b'effect' b'of' b'the' b'player' b'is' b'reprised' b'by' b'light'
    b'people' b'aboard' b'Hubert' b'or' b'Massachusetts' b',' b'but' b'an' b'main' b'@-@' b'Dr.' b'find' b'fear' b'in' b'it' b'panel' b'does' b'not' b'be' b'seen'
    b'without' b'muscarine' b'.' b'Oshii' b'chases' b'.' b'The' b'heavy' b'difference' b'before' b'even' b'bent' b'its' b'home' b'\xe2\x80\x93' b'west' b'contingent' b'back' b'.' b'It'
    b'is' b'decided' b'that' b'it' b'didn' b"'t" b'fine' b'it' b'?' b'It' b'is' b'a' b'mixture' b'of' b'large' b'abilities' b'that' b'would' b'properly' b'speak'
    b'that' b'her' b'legs' b'find' b'them' b'back' b'.' b'"' b'In' b'a' b'Rb1' b'rolling' b'in' b'melancholy' b'"' b'US' b'song' b'walking' b',' b'"'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 207.2
    loss: 5.168
    elapsed time (seconds): 114.0




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  30.779 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
