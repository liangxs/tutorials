
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'sense' b'.' b'<eos>' b'The' b'entire' b'spectrum' b'of' b'<unk>' b',' b'tests' b'and' b'breast' b'feature' b'appeared' b'in' b'G' b'\xe2\x80\x94' b'based' b'on' b'X'
    b',' b'brain' b',' b'and' b'him' b'for' b'numerous' b'animals' b',' b'but' b'potentially' b'yet' b'alone' b'the' b'newspaper' b'and' b'reduced' b'KLM' b'.' b'Following'
    b'this' b'Type' b',' b'in' b'1907' b',' b'that' b'a' b'impressive' b'viewing' b'system' b'which' b'compartment' b'Ceres' b',' b'which' b'would' b'be' b'unsure' b'.'
    b'It' b'is' b'deemed' b'known' b'to' b'be' b'originally' b'"' b'quitting' b'and' b'daylight' b',' b'barons' b'fighting' b'specie' b',' b'<unk>' b'created' b'<unk>' b"'"
    b'Evolution' b'dominant' b'carrying' b'those' b'of' b'strong' b'eyes' b'of' b'<unk>' b'.' b'"' b'Basilica' b'further' b'restricted' b'within' b'this' b'book' b',' b'particularly' b'to'
    b'travel' b'to' b'<unk>' b'expose' b'them' b'only' b'.' b'<eos>' b'In' b'early' b'Fantasy' b'Fashi' b',' b'<unk>' b'warts' b'conducted' b'frequent' b'changes' b'of' b'birds'
    b'and' b'sheep' b'effects' b'such' b'as' b'Anatolia' b',' b'providing' b'significant' b'numbers' b',' b'such' b'as' b'<unk>' b',' b'Maarten' b'and' b'Interior' b'whose' b'building'
    b'would' b'be' b'introduced' b'in' b'<unk>' b'knowledge' b',' b'cell' b'Psyche' b',' b'Systema' b'<unk>' b',' b'seeds' b',' b'<unk>' b',' b'gems' b',' b'and'
    b'<unk>' b'.' b'It' b'also' b'occurs' b'large' b'ions' b'.' b'When' b'she' b'recalled' b'by' b'their' b'food' b'signature' b',' b'100' b'birds' b'have' b'two'
    b'acres' b'covers' b'long' b',' b'often' b'ordered' b'it' b'over' b'when' b'they' b'are' b'treated' b'in' b'which' b'another' b'<unk>' b'are' b'uncertain' b',' b'one'
    b'of' b'them' b'systems' b'rather' b'<unk>' b',' b'and' b'cars' b'air' b'important' b',' b'unique' b'or' b'birds' b'on' b'them' b',' b'measuring' b'to' b'good'
    b'positions' b'.' b'These' b'from' b'these' b'maintained' b'selecting' b'some' b'<unk>' b'chicks' b'of' b'M\xc4\x81ori' b'surface' b'structures' b',' b'even' b'10' b'\xe2\x80\x93' b'semi' b'in'
    b'totaled' b'targets' b'.' b'The' b'female' b'moves' b'to' b'a' b'angle' b'of' b'2' b'@.@' b'4' b'ha' b'per' b'hour' b'(' b'53' b'@.@' b'9'
    b'in' b')' b'as' b'it' b'can' b'be' b'related' b'to' b'three' b'females' b',' b'who' b'may' b'face' b'larvae' b',' b'and' b'topped' b'by' b'their'
    b'liquid' b'asymptotic' b'zone' b'who' b'is' b'probably' b'found' b'in' b'their' b'position' b'or' b'a' b'lot' b'of' b'112' b'metres' b'(' b'22' b'in' b')'
    b'.' b'Early' b'with' b'toll' b'genres' b'are' b'first' b'carried' b'.' b'On' b'both' b'other' b'large' b'days' b',' b'such' b',' b'if' b'they' b'were'
    b'heavily' b'wholly' b'outside' b'months' b',' b'strong' b'woodland' b'are' b'assembled' b'by' b'eyes' b'such' b'as' b'central' b'culling' b',' b'so' b'long' b'.' b'He'
    b'struggled' b'to' b'be' b'regarded' b'forward' b'and' b'may' b'heavier' b'kinds' b'up' b',' b'who' b'reassigned' b'even' b'to' b'risk' b'.' b'Males' b"'" b'feeding'
    b',' b'suddenly' b'because' b'up' b'or' b'undergraduates' b'.' b'mitosis' b'published' b'"' b'metric' b'people' b'"' b',' b'a' b'interwar' b'form' b'.' b'A' b'small'
    b'challenge' b'with' b'a' b'number' b'of' b'diameters' b"'" b'distinctive' b'head' b'stellar' b'.' b'From' b'this' b'time' b'the' b'pair' b'only' b'attack' b'little' b'alarmed'
    b',' b'and' b'mudskippers' b'moving' b'from' b'her' b'absence' b'and' b'distribution' b'from' b'handling' b'females' b'.' b'For' b'example' b',' b'there' b'are' b'be' b'reports'
    b'that' b'displays' b'to' b'be' b'fruiting' b'1' b'and' b'terminals' b'or' b'fast' b'factors' b':' b'low' b'methods' b'have' b'suddenly' b'recorded' b'Talk' b',' b'water'
    b'and' b'commit' b'trees' b'and' b'female' b'dense' b'springs' b'while' b'recommending' b'ellipsoid' b'and' b'giant' b'flies' b'.' b'These' b'females' b'tar' b'may' b'be' b'transported'
    b'for' b'lyrics' b'of' b'other' b'starlings' b'by' b'a' b'kind' b'of' b'feeding' b'.' b'Once' b'their' b'coloured' b'trip' b'is' b'only' b'afraid' b'.' b'Another'
    b'nests' b'has' b'been' b'only' b'dorsal' b'from' b'other' b'tales' b'\xe2\x80\x94' b'so' b'even' b',' b'when' b'he' b'energetic' b'it' b'after' b'material' b'or' b'broadly'
    b'weather' b',' b'usually' b'openly' b'goddesses' b'when' b'they' b'are' b'inside' b'<unk>' b'.' b'One' b'heavier' b'a' b'multitude' b'of' b'spots' b'on' b'lateral' b'methods'
    b'can' b'be' b'enlarged' b'.' b'In' b'the' b'reflective' b',' b'their' b'possession' b'of' b'tuk' b'is' b'infection' b'rather' b'<unk>' b',' b'may' b'be' b'considered'
    b'.' b'John' b'<unk>' b',' b'who' b'is' b'often' b'there' b'with' b'"' b'medieval' b'Hole' b'"' b'culvert' b'from' b'just' b'three' b'Decoration' b'.' b'Augusta'
    b'independently' b'has' b'one' b'sum' b'of' b'overseen' b'17' b'cents' b'.' b'There' b'it' b'may' b'be' b'rare' b'for' b'be' b'produce' b'in' b'more' b'<unk>'
    b'<unk>' b'by' b'sulfonium' b'@-@' b'plated' b'!' b'<unk>' b'.' b'There' b'are' b'simultaneous' b'similar' b'starlings' b'exactly' b'grey' b'wet' b'\xe2\x80\x93' b'earth' b'are' b'the'
    b'same' b'bird' b'of' b'decathlon' b'.' b'<eos>' b'Common' b'diet' b'sulfur' b'<unk>' b',' b'St.' b'v.' b'English' b',' b'and' b'(' b'North' b'1769' b')'
    b'is' b'not' b'generally' b'largely' b'mixed' b'.' b'In' b'the' b'long' b'12th' b'@-@' b'century' b'monument' b',' b'<unk>' b'is' b'trapped' b'in' b'temperate' b'activity'
    b'and' b'semi' b'@-@' b'feathers' b',' b'requiring' b'from' b'moderate' b'variation' b'.' b'An' b'lead' b'body' b'occurs' b'along' b'to' b'1' b'm' b'per' b'man'
    b';' b'its' b'legs' b'appear' b'away' b'.' b'At' b'a' b'three' b'@-@' b'metre' b'star' b',' b'the' b'kakapo' b"'s" b'total' b'population' b'may' b'be'
    b'filled' b'at' b'its' b'soil' b'or' b'Moorside' b'his' b'parent' b'ordinance' b';' b'they' b'are' b'well' b'gates' b'while' b'they' b'are' b'justification' b'.' b'In'
    b'addition' b',' b'there' b'are' b'very' b'speculation' b'that' b'exposure' b',' b'as' b'supporting' b'food' b'\xe2\x80\x93' b'dry' b',' b'<unk>' b'shape' b'.' b'This' b'bodies'
    b'destroyers' b'upon' b'wrapped' b'to' b'the' b'equator' b'of' b'supplies' b',' b'tying' b'some' b'or' b'a' b'superficial' b'<unk>' b'monster' b'\xe2\x80\x94' b'and' b'eye' b'flanked'
    b'in' b'season' b'maturity' b',' b'a' b'pale' b'ally' b'and' b'continues' b'to' b'scare' b'once' b'.' b'In' b'response' b',' b'they' b'range' b'into' b'the'
    b'surface' b'in' b'the' b'newborns' b',' b'light' b'or' b'psychiatric' b'.' b'There' b'are' b'eye' b'different' b'holes' b',' b'whereas' b'they' b'also' b'wished' b'to'
    b'be' b'expecting' b'if' b'even' b'they' b'continue' b'to' b'be' b'representative' b'.' b'Edibility' b'is' b'small' b',' b'but' b'has' b'shorter' b'vertices' b'as' b'does'
    b'regularly' b'cool' b'.' b'Not' b'although' b'all' b',' b'she' b'would' b'are' b'Jewish' b',' b'still' b'open' b'or' b'<unk>' b'.' b'Such' b'this' b'hoshi'
    b'explains' b'that' b'necessary' b',' b'they' b'must' b'curve' b'Humphrey' b'attempts' b'to' b'be' b'decay' b'or' b'neither' b'developing' b'or' b'swift' b'different' b'games' b'of'
    b'or' b'choosing' b'offering' b'exposure' b'to' b'a' b'signal' b'without' b'other' b'players' b'in' b'tracking' b',' b'because' b'they' b'have' b'Gateway' b',' b'giving' b'Ceres'
    b'to' b'feed' b'around' b'the' b'inner' b'trees' b'while' b'they' b'are' b'often' b'supports' b',' b'or' b'using' b'some' b'<unk>' b',' b'powered' b'by' b'kitsune'
    b',' b'<unk>' b',' b'<unk>' b',' b'and' b'domestic' b'control' b'.' b'Other' b',' b'including' b'yeast' b'data' b',' b'can' b'undergo' b'over' b'around' b'which'
    b"'s" b'transit' b'houses' b'to' b'food' b'and' b'human' b'brown' b'.' b'Within' b'example' b',' b'of' b'of' b'sea' b',' b'and' b'some' b'eggs' b'are'
    b'reported' b',' b'such' b'as' b'<unk>' b',' b'or' b'the' b'country' b',' b'addresses' b'when' b'it' b'is' b'a' b'stegosaurid' b'should' b'be' b'overlapping' b'in'
    b'males' b'.' b'They' b'may' b'govern' b'its' b'high' b'up' b'tank' b',' b'but' b'if' b'they' b'do' b'not' b'give' b'it' b',' b'even' b'they'
    b'must' b'have' b'stored' b'.' b'They' b'usually' b'questioned' b'a' b'minimum' b'potential' b'membrane' b'triple' b'.' b'The' b'pair' b'are' b'the' b'feral' b'"' b'past'
    b'56th' b'bearing' b'<unk>' b'"' b',' b'but' b'although' b'for' b'certain' b',' b'they' b'do' b'Popo' b'regain' b'.' b'They' b'may' b'also' b'be' b'applied'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 202.8
    loss: 5.168
    elapsed time (seconds): 112.2




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  24.371 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
