
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'changed' b'each' b'husband' b'including' b'first' b'without' b'three' b'451' b'Johnny' b'dollars' b',' b'<unk>' b'relinquished' b'14' b'%' b'per' b'month' b'.' b'Around' b'night'
    b',' b'clearly' b'still' b'called' b'with' b'Director' b'who' b'is' b'printed' b'by' b'The' b'other' b'mention' b'is' b'"' b'the' b'last' b'I' b'only' b'told'
    b'"' b'that' b'added' b'two' b'main' b'stone' b'musicians' b'such' b'as' b'Andrea' b'<unk>' b',' b'<unk>' b'<unk>' b',' b'and' b'YouTube' b'were' b'warned' b'they'
    b'find' b'and' b'will' b'be' b'found' b';' b'however' b',' b'but' b'that' b'"' b'Pescara' b'whose' b'voice' b'can' b'have' b'been' b'delivered' b'problem' b'.'
    b'I' b'couldn' b"'t" b'think' b'there' b'Described' b'no' b'fresh' b'plum' b'"' b'.' b'A' b'writer' b'called' b'"' b'Die' b'"' b'(' b'born' b'partner'
    b')' b',' b'"' b'The' b'conception' b'of' b'pleasure' b'"' b'(' b'<unk>' b'@-@' b'Me' b'Yat' b')' b',' b'was' b'also' b'dedicated' b'for' b'units'
    b'to' b'play' b'Highway' b'C.' b'The' b'storyline' b'about' b'another' b'date' b',' b'when' b'its' b'facial' b'executive' b'champion' b'was' b'inspired' b'.' b'The' b'new'
    b'victim' b'that' b'the' b'final' b'story' b'of' b'Venus' b'was' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Federal' b'culture' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'The' b'Boat' b'Island' b'within' b'their' b'liner' b'novel' b'(' b'<unk>' b')' b'is' b'to' b'help' b'maat' b'within' b'<unk>' b'nocturnal' b'(' b'1685'
    b')' b'.' b'The' b'first' b'twenty' b'times' b'could' b'be' b'reviewed' b'by' b'eaves' b',' b'<unk>' b',' b'the' b'Tomas' b'jackrabbit' b',' b'<unk>' b'or'
    b'<unk>' b'looser' b',' b'the' b'Book' b'of' b'spiders' b'and' b'the' b'other' b'foreign' b'Djan' b',' b'entering' b'one' b'meaningless' b'co' b'@-@' b'awaited' b'Christ'
    b',' b'Lebanon' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'and' b'other' b'Palaces' b'Bond' b',' b'himself' b'metal' b'Listed' b'.' b'Meanwhile' b','
    b'the' b'series' b'heard' b'inner' b'water' b'or' b'Carnival' b'digitally' b'on' b'its' b'set' b'.' b'When' b'the' b'meat' b'continued' b'in' b'to' b'become' b'the'
    b'last' b'person' b',' b'it' b'has' b'nine' b'years' b'generally' b'by' b'three' b'different' b'songs' b'.' b'<eos>' b'Before' b'the' b'first' b'three' b'magazine' b','
    b'several' b'potential' b'species' b'involved' b',' b'<unk>' b',' b'or' b'folk' b'on' b'stage' b'against' b'the' b'all' b'leg' b'year' b'.' b'The' b'National' b'Union'
    b'also' b'criticized' b'Camp' b',' b'a' b'40' b'@.@' b'7' b'rating' b'the' b'game' b'an' b'residential' b'half' b'video' b'story' b',' b'which' b'was' b'it'
    b'performing' b'at' b'equals' b'presbyterian' b'television' b'for' b'a' b'short' b'high' b'action' b'.' b'He' b'promised' b'spar' b'from' b'Colman' b'(' b'Maurice' b'Calloway' b')'
    b'toss' b'in' b'the' b'<unk>' b'<unk>' b'to' b'be' b'"' b'accidentally' b'of' b'a' b'<unk>' b'"' b',' b'which' b'published' b'fascination' b'before' b'independent' b'the'
    b'disc' b'.' b'Hertfordshire' b'<unk>' b'has' b'suggested' b'that' b'over' b'55' b'%' b'of' b'fans' b'are' b'obtained' b'in' b'the' b'same' b'year' b'.' b'The'
    b'Xbox' b'Gold' b'Soundtrack' b'Iron' b'Bull' b'urban' b'Enuff' b'"' b'informs' b'stunning' b'crime' b'"' b'and' b'"' b'legitimately' b'capitalist' b'"' b'and' b'"' b'the'
    b'greatest' b'plague' b'"' b'then' b'created' b'"' b'laugh' b'up' b'people' b'"' b'.' b'At' b'the' b'event' b',' b'Nuskhuri' b'in' b'Melinda' b'Nicholas' b'!'
    b'called' b'under' b'voice' b'it' b'unique' b'.' b'"' b'The' b'One' b'best' b'most' b'Lady' b'lies' b'"' b'on' b'June' b'21' b',' b'2009' b'.'
    b'<eos>' b'Fanning' b'explained' b'his' b'statement' b'is' b'the' b'plating' b'of' b'Ozawa' b',' b'and' b'the' b'story' b'is' b'not' b'described' b'on' b'your' b'<unk>'
    b'.' b'<eos>' b'According' b'to' b'Taylor' b'Stephen' b'Wieselman' b',' b'Bono' b',' b'meanwhile' b',' b'said' b'that' b'to' b'give' b'the' b'actors' b'some' b'in'
    b'Andhra' b'Simon' b'\xe2\x80\x99' b's' b'CW' b'are' b'said' b'to' b'have' b'once' b'pretty' b'killed' b'"' b'incomplete' b',' b'arid' b',' b'and' b'<unk>' b'"'
    b'.' b'Jordan' b'expected' b'\xe2\x80\x9c' b'impossible' b'to' b'be' b'"' b'in' b'account' b'that' b'cream' b'jokes' b'always' b'leaked' b'.' b'"' b'Trapdoor' b'preferred' b'Arsenal'
    b"'s" b'official' b'car' b'numbers' b'.' b'The' b'real' b'class' b'was' b'later' b'made' b'by' b'Gospel' b'Stewart' b'.' b'Stephen' b'Flash' b'M.' b'ourebi' b'has'
    b'described' b'on' b'the' b'television' b'Heatseekers' b'Video' b'Association' b'of' b'the' b'Year' b'(' b'Rolette' b')' b'to' b'write' b'the' b'story' b'of' b'a' b'number'
    b'of' b'sales' b'"' b'<unk>' b'of' b'Joe' b'Now' b'"' b',' b'and' b'wrote' b'that' b'"' b'Hornung' b'seem' b'liked' b'an' b'anyone' b'@-@' b'to'
    b'@-@' b'down' b'work' b'.' b'So' b'as' b'we' b"'ll" b'do' b'there' b'to' b'find' b'the' b'might' b'[' b'he' b']' b'is' b'[' b'Square'
    b'happened' b']' b'forth' b'.' b'"' b'<eos>' b'visits' b'as' b'a' b'writer' b'a' b'year' b'unsuccessful' b'from' b'write' b'about' b'totaling' b'it' b',' b'advocating'
    b'events' b'or' b'character' b'were' b'hastily' b'first' b'down' b'.' b'In' b'the' b'2010' b'season' b'it' b'was' b'revealed' b'that' b'his' b'novel' b'does' b'not'
    b'work' b'up' b'toward' b'Kern' b'.' b'Following' b'the' b'fourth' b'season' b',' b'<unk>' b'is' b'also' b'mentioned' b'on' b'the' b'realm' b'of' b'work' b'in'
    b'Australia' b',' b'but' b'that' b'"' b'she' b'could' b'think' b'up' b'was' b'aware' b'of' b'a' b'alien' b'seeking' b'at' b'these' b'kinds' b'of' b'My'
    b'faith' b'that' b'as' b'they' b'don' b"'t" b'bloody' b'to' b'be' b'because' b'he' b'has' b'Lawton' b'grew' b'<unk>' b'"' b'.' b'To' b'end' b'it'
    b'at' b'this' b'year' b',' b'the' b'flying' b'to' b'receive' b'it' b'accidents' b'on' b'a' b'woman' b'd' b'<unk>' b'kinase' b'Harris' b'in' b'Tripoli' b','
    b'touches' b'greatly' b',' b'tableaux' b',' b'and' b'Frank' b'Bunker' b"'s" b'The' b'position' b'a' b'show' b'of' b'Minh' b'(' b'Oval' b'\xe2\x80\x93' b'2001' b')'
    b',' b'future' b'brown' b'Regiment' b',' b'and' b'the' b'violin' b'Entertainer' b'determination' b'to' b'play' b'with' b'a' b'exclude' b'centred' b'up' b'before' b'he' b'is'
    b'able' b'to' b'have' b'nearly' b'Tennyson' b"'s" b'gravity' b'.' b'He' b'wrote' b'about' b'being' b'an' b'ruined' b'gorgeously' b'student' b'named' b',' b'and' b'appeared'
    b'on' b'a' b'forty' b'@-@' b'century' b'field' b'draft' b',' b'a' b'geological' b'treatise' b'divided' b'in' b'shooting' b'with' b'Dubois' b'and' b'(' b'his' b'puns'
    b')' b',' b'pretext' b'(' b'illustrator' b')' b',' b'asking' b'Veronica' b'36' b'm' b'(' b'50' b'in' b')' b'their' b'length' b'of' b'Buena' b'Vachana'
    b'Cook' b'in' b'the' b'7th' b'century' b'"' b'(' b'UTC' b'there' b'Josce' b',' b'in' b'the' b'1970s' b'from' b'4He' b'and' b'Bryant' b'that' b','
    b'of' b'my' b'name' b'was' b'good' b'dead' b'and' b'precise' b'right' b'[' b'...' b']' b'into' b'the' b'kind' b'of' b'lively' b',' b'and' b'attempting'
    b'to' b'disrupt' b'it' b',' b'just' b'when' b'the' b'Lacy' b'\xe2\x80\x93' b'<unk>' b'rooster' b'should' b'be' b'fair' b'.' b'"' b'In' b'2014' b',' b'it'
    b'would' b'not' b'be' b'interpreted' b'as' b'arrow' b',' b'dropping' b'by' b'<unk>' b'on' b'a' b'physical' b'chief' b',' b'buildings' b',' b'and' b'Ganymede' b'.'
    b'The' b'separate' b'wood' b'album' b'"' b'seems' b'a' b'mature' b'person' b'to' b'die' b'in' b'a' b'very' b'Dominion' b',' b'seizure' b'and' b'blue' b'who'
    b'Cutting' b'not' b'Fifteen' b'Race' b'from' b'it' b',' b'a' b'man' b',' b'"' b'room' b'and' b'Can' b'Edwards' b':' b'probes' b'(' b'The' b'Sun'
    b'where' b'Quite' b'Cole' b',' b'Montana' b'and' b'others' b',' b'or' b'in' b'the' b'previously' b'@-@' b'digit' b'respectable' b'Jakarta' b'naked' b'remains' b'43' b')'
    b'remaining' b'to' b'"' b'Augustus' b'Igual' b'Artist' b'"' b'to' b'convey' b'its' b'daughter' b'Wica' b'.' b'He' b'requires' b'four' b'titles' b'on' b'French' b'Toei'
    b',' b'whom' b'the' b'pair' b'Adrien' b'Schaefer' b'takes' b'it' b'a' b'special' b'character' b'to' b'a' b'stewards' b'<unk>' b'chord' b'killer' b'camera' b'say' b'"'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.1
    loss: 5.168
    elapsed time (seconds): 113.7




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.932 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
