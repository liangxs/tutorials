
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'cheesy' b'panels' b'was' b'sent' b'to' b'<unk>' b'of' b'Washington' b'.' b'glad' b'said' b'that' b'there' b'are' b'good' b'minerals' b'of' b'Yugoslav'
    b'as' b'this' b'is' b'Madison' b'<unk>' b'"' b',' b'<unk>' b'"' b'.' b'The' b'Wind' b'Pace' b'Williams' b'themselves' b'presents' b'Sir' b'Evans' b'flights' b'instinctively'
    b',' b'which' b'were' b'known' b'by' b'it' b'a' b'easy' b'mushroom' b'for' b'modern' b'padding' b'.' b'A' b'few' b'traditional' b'stories' b'make' b'lying' b'winds'
    b'in' b'a' b'blocked' b'<unk>' b',' b'which' b'was' b'chosen' b'to' b'be' b'introduced' b'by' b'a' b'new' b'mine' b'as' b'they' b'insert' b'the' b'world'
    b'.' b'Hampson' b'<unk>' b'is' b'a' b'shovel' b'for' b'the' b'original' b'two' b"'" b'Favorite' b'stinkhorn' b'combined' b'by' b'being' b'always' b'being' b'delivered' b'in'
    b'fourteen' b'or' b'scientists' b'.' b'Chisholm' b'National' b'populations' b'traces' b'a' b'variety' b'of' b'using' b'return' b'temperature' b'.' b'Likewise' b',' b'when' b'only' b'the'
    b'other' b',' b'Wes' b'Nigel' b'<unk>' b'Julius' b'Nagar' b'had' b'an' b'dull' b'novelist' b'called' b'"' b'The' b'orderings' b'"' b'is' b'also' b'translated' b'a'
    b'great' b'personification' b'of' b'the' b'sword' b'and' b'insects' b',' b'subalpine' b'I' b'received' b'them' b'to' b'be' b'the' b'top' b'tilt' b'over' b'hard' b'styles'
    b'.' b'<eos>' b'Between' b'Resistance' b',' b'after' b'to' b'evacuate' b'me' b',' b'dollars' b'was' b'a' b'supporter' b'be' b'clear' b',' b'mainly' b'as' b'there'
    b'reveals' b'"' b'Flowers' b'"' b',' b'which' b"'ron" b'same' b'judge' b'recorded' b',' b'and' b'goes' b'a' b'<unk>' b'Tech' b'type' b'to' b'be' b'more'
    b'recent' b'.' b'Years' b'<unk>' b'a' b'father' b'with' b'mocking' b'on' b'his' b'Roadrunner' b'<unk>' b'and' b'contacts' b'around' b'Saturday' b'Daisy' b'cricket' b',' b'which'
    b'showed' b'the' b'third' b'difference' b'after' b'which' b'man' b'comments' b'her' b'own' b'faith' b'in' b'that' b',' b'occurs' b'to' b'assist' b',' b'referred' b'to'
    b'.' b'The' b'oldest' b'novels' b',' b'which' b'began' b'assert' b'a' b'kind' b'of' b'being' b'able' b'to' b'assist' b'other' b'things' b',' b'and' b'he'
    b'will' b'have' b'enough' b'to' b'get' b'a' b'record' b'with' b'perceived' b'origin' b'(' b'this' b'name' b'will' b'be' b'put' b'into' b'the' b'jar' b'of'
    b'not' b')' b'.' b'One' b'associating' b'today' b'in' b'series' b'forced' b'a' b'Key' b'Spot' b'.' b'Robin' b'<unk>' b'they' b'negotiated' b'it' b'and' b'story'
    b'decisions' b'to' b'assign' b'universal' b'requirements' b'of' b'the' b'Big' b'District' b'series' b'(' b"'ari" b')' b'<unk>' b'their' b'orphanage' b'near' b'<unk>' b'Island' b'('
    b'<unk>' b')' b',' b'as' b'well' b'as' b'Schuster' b',' b'and' b'police' b'moons' b'a' b'<unk>' b'has' b'"' b'patients' b'between' b'his' b'face' b'"'
    b'.' b'In' b'his' b'1970' b'interview' b'with' b'Sandy' b',' b'this' b'task' b'is' b'a' b'clearly' b'associated' b'<unk>' b'soon' b'when' b'it' b'can' b'be'
    b'taken' b'using' b'him' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Influences' b'except' b'only' b'life' b'=' b'=' b'<eos>' b'<eos>' b'Until' b'its' b'next' b'year'
    b'he' b'pointed' b'from' b'a' b'reserve' b'star' b'research' b'in' b'a' b'artificial' b'version' b':' b'a' b'1623' b'Illinoise' b'Vol' b'player' b'from' b'his' b'newspapers'
    b'plot' b'.' b'The' b'chapter' b'of' b'Roy' b'and' b'Hugh' b'Toso' b'cut' b'there' b'to' b'473' b'this' b'recitals' b'steps' b'"' b'fishing' b'and' b'...'
    b'they' b'surrendered' b'what' b'are' b'also' b'remarkable' b'@-@' b'bound' b'.' b'If' b'I' b'that' b'start' b',' b'sort' b'of' b'certain' b'.' b'But' b'if'
    b',' b'like' b'unlike' b'flesh' b'you' b'is' b'very' b'late' b'alike' b'<unk>' b'<unk>' b'.' b'"' b'<eos>' b'One' b'of' b'a' b'known' b'tribble' b','
    b'The' b'final' b'bearing' b',' b'was' b'published' b'in' b'1918' b'.' b'The' b'church' b'himself' b'Joanna' b'and' b'seeks' b'to' b'<unk>' b',' b'wearing' b'the'
    b'chronology' b'of' b'Final' b'Pound' b'.' b'The' b'open' b'image' b'of' b'his' b'consensus' b'are' b'influenced' b'by' b'<unk>' b'lightest' b'with' b'structures' b'.' b'Most'
    b'measures' b'pointed' b'fake' b'mowing' b',' b'although' b'the' b'communication' b'of' b'rocks' b'between' b'the' b'two' b'remain' b',' b'and' b'the' b'friendly' b'from' b'the'
    b'Charter' b'pair' b'together' b'sire' b'@-@' b'disrupting' b'\xe2\x80\x94' b'directed' b'by' b'survives' b'.' b'Midsummer' b'have' b'been' b'on' b'display' b',' b'and' b'escaped' b'for'
    b'the' b'Eva' b'Young' b'Regiment' b'and' b'Gordon' b'Taylor' b'(' b'died' b'afterwards' b')' b',' b'Devin' b'Power' b'of' b'Zagreb' b'(' b'Owego' b')' b'operates'
    b'the' b'<unk>' b'warehouse' b'\xe2\x80\x99' b's' b'degree' b'.' b'Ceres' b'varies' b'at' b'her' b'request' b'in' b'Ravel' b'on' b'the' b'west' b'of' b'Houston' b'.'
    b'The' b'moth' b'was' b'a' b'exciting' b'Business' b'manufacturer' b'Wreath' b';' b'while' b'of' b'725' b'years' b',' b'he' b'had' b'no' b'overall' b'sweeping' b','
    b'and' b'this' b'was' b'possible' b'to' b'be' b'short' b'aged' b'for' b'a' b'series' b'of' b'power' b',' b'so' b'a' b'even' b'Bush' b'style' b'return'
    b'to' b'no' b'courage' b'.' b'He' b'leaves' b'him' b'from' b'a' b'undefended' b'supernatural' b'structure' b'finally' b'rather' b'than' b'worth' b'her' b'or' b'female' b'plumage'
    b',' b'and' b'doing' b'neutron' b'lab' b'from' b'a' b'live' b'step' b'for' b'mainstream' b'phrases' b'on' b'examples' b'.' b'The' b'subsequent' b'object' b'in' b'August'
    b'1949' b'is' b'held' b'by' b'humor' b'from' b'1829' b'contemporary' b'and' b'Star' b'propaganda' b',' b'while' b'Pasha' b'Friedrich' b'Klein' b'praised' b'the' b'crime' b'Jean'
    b'Boulevard' b'of' b'this' b'print' b',' b'she' b'wrote' b'that' b'"' b'I' b"'m" b'exactly' b'"' b'at' b'better' b'Louise' b'"' b'when' b'he' b'made'
    b'a' b'twentieth' b'@-@' b'century' b'camera' b',' b'?' b'"' b'consistent' b'delivers' b'ki' b'is' b'a' b'giant' b'rare' b'fashion' b'factor' b'but' b'Proprietary' b'aimed'
    b'made' b'different' b'of' b'his' b'body' b',' b'his' b'monthly' b'planet' b'<unk>' b'.' b'<eos>' b'The' b'512' b'portion' b'of' b'Dawn' b'or' b'Mariana' b'terminal'
    b'Away' b',' b'adequate' b',' b'and' b'"' b'Kate' b'"' b'a' b'police' b'to' b'the' b'race' b'...' b'Primetime' b'of' b'his' b'earlier' b'critics' b'were'
    b'<unk>' b',' b'but' b'"' b'when' b'I' b'was' b'less' b'supposed' b',' b'like' b'it' b'happened' b'...' b'Dr.' b'I' b'who' b'is' b'riding' b'for'
    b'him' b'after' b'all' b'that' b'mirror' b'people' b'in' b'child' b'@-@' b'amnesty' b'.' b'The' b'presence' b'of' b'<unk>' b'should' b'help' b'their' b'female' b'of'
    b'this' b'step' b',' b'but' b'copulation' b'talking' b'back' b'.' b'"' b'Hairan' b'proponent' b'describes' b'sins' b"'s" b'acting' b'@-@' b'sided' b'because' b'of' b'his'
    b'spare' b'mind' b'of' b'assuring' b'energy' b',' b'from' b'manpower' b'which' b'scholar' b'Ledger' b'intersected' b'a' b'invitation' b'to' b'fight' b'between' b'drinking' b'line' b'.'
    b'The' b'other' b'Vaballathus' b'cells' b'described' b'of' b'the' b'canopy' b'of' b'fear' b'Goldberg' b"'s" b'supreme' b'character' b'and' b'renting' b'Lawrence' b'<unk>' b',' b'and'
    b'found' b'withdraw' b'that' b'they' b'make' b'crime' b':' b"'" b'Ceres' b',' b'brought' b'in' b'every' b'fan' b'of' b'poor' b',' b'an' b'rugged' b'distance'
    b'itself' b'that' b'touching' b'a' b'apology' b'to' b'tell' b'Scientology' b'.' b'Art' b'him.Ch.' b'allows' b'a' b'narrow' b'change' b'anything' b'before' b'Andhra' b'\xe2\x80\x99' b's'
    b'teaser' b'is' b'perhaps' b'a' b'complex' b'shoulder' b'.' b'But' b'a' b'synthesizer' b'spore' b'dear' b'policy' b'may' b'be' b'distinguished' b'and' b'sincere' b',' b'they'
    b'realizes' b'we' b'are' b'.' b'Some' b'individual' b'conditional' b'subject' b'night' b'.' b'The' b'sign' b'is' b'a' b'way' b'or' b'political' b'stop' b'public' b'prokaryotes'
    b',' b'and' b'there' b'are' b'no' b'short' b',' b'military' b'crafted' b'cooking' b',' b'whom' b'it' b'occurs' b'stating' b'that' b'this' b'should' b'be' b'lbw'
    b'.' b'<unk>' b'however' b'contain' b'no' b'a' b'Garuda' b'"' b'<unk>' b'in' b',' b'as' b'they' b'connect' b'well' b'...' b'and' b'...' b'before' b'they'
    b"'re" b'fruit' b'in' b'a' b'Jain' b'race' b',' b'they' b'are' b'willing' b'to' b'end' b'it' b'on' b'a' b'situation' b'to' b'your' b'system' b'"'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.6
    loss: 5.168
    elapsed time (seconds): 112.5




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.403 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
