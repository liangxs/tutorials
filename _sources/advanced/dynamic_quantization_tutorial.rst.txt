
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'@-@' b'Instead' b'.' b'Beginning' b'on' b'a' b'call' b'about' b'75' b'%' b'of' b'their' b'variety' b'in' b'28' b'games' b',' b'Hornung' b'authored' b'an'
    b'head' b'to' b'add' b'its' b'life' b'to' b'a' b'comeback' b'together' b'.' b'Governor' b'Hunter' b'of' b'Christianity' b'Gopal' b'<unk>' b'Randy' b'Rose' b'are' b'"'
    b'all' b'about' b'style' b'"' b'.' b'<eos>' b'historians' b'can' b'be' b'involved' b'for' b'time' b'<unk>' b',' b'Tyler' b'Chapman' b',' b'shells' b'and' b'then'
    b'its' b'words' b',' b'stating' b'that' b'"' b'it' b'has' b'shall' b'be' b'better' b'-' b'[' b'or' b']' b'the' b'worst' b'or' b'host' b'the'
    b'ball' b'in' b'fact' b'to' b'like' b';' b'it' b'just' b'Ever' b'But' b'I' b'know' b',' b'but' b'if' b'it' b'are' b'probably' b'possible' b','
    b'those' b'or' b'meet' b'of' b'it' b'never' b'<unk>' b'how' b'we' b'have' b'always' b'taught' b'it' b']' b'"' b'.' b'In' b'addition' b',' b'it'
    b'appears' b'to' b'have' b'been' b'administrative' b'the' b'same' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Western' b'Interior' b'=' b'=' b'<eos>' b'<eos>' b'A' b'2013'
    b'revelations' b'in' b'Seaforth' b'history' b',' b'appearing' b'in' b'projecting' b'by' b'three' b'hundred' b'days' b'in' b'early' b'1915' b',' b'was' b'published' b'over' b'60'
    b'in' b'December' b'2010' b',' b'and' b'was' b'included' b'on' b'to' b'slip' b'beyond' b'The' b'Free' b'GMA' b'Register' b'of' b'Minnesota' b'.' b'<eos>' b'In'
    b'the' b'1995' b'ceremony' b',' b'Peshkin' b'brought' b'a' b'series' b'game' b'than' b'eight' b'families' b',' b'and' b'the' b'hospital' b'is' b'34' b'@.@' b'5'
    b',' b'and' b'four' b'in' b'his' b'minor' b'forty' b'games' b'.' b'The' b'third' b'evidence' b'in' b'the' b'10' b'to' b'2006' b'up' b'to' b'100'
    b'\xc2\xb0' b'wins' b'per' b'week' b'.' b'Sir' b'Z' b',' b'with' b'an' b'desire' b'that' b'roughly' b'fluency' b',' b'the' b'general' b'debt' b',' b'and'
    b'a' b'few' b'times' b'of' b'the' b'1549' b'as' b'he' b'would' b'run' b'to' b'produce' b'their' b'elves' b'(' b'including' b'Ingvald' b')' b'for' b'a'
    b'nation' b'or' b'changed' b'to' b'their' b'interest' b'in' b'the' b'series' b'But' b'it' b'was' b'the' b'final' b'in' b'large' b'defense' b'during' b'his' b'playing'
    b'grandson' b'that' b'Won' b"'Malley" b'found' b'as' b'Ras' b'of' b'King' b'of' b'<unk>' b'.' b'The' b'map' b',' b'which' b'were' b'set' b'in' b'the'
    b'Maharaj' b'itself' b',' b'is' b'upheld' b'by' b'fish' b',' b'<unk>' b',' b'Carla' b'and' b'water' b'\xe2\x80\x94' b'by' b'which' b'their' b'body' b'"' b'one'
    b'of' b'tiny' b'different' b'reports' b'"' b',' b'including' b'a' b'Black' b'Boom' b"'in" b'Bang' b'II' b';' b'g6' b'Gandhi' b',' b'as' b'"' b'practitioners'
    b'of' b'<unk>' b'"' b',' b'said' b'that' b'this' b'"' b'Sovereign' b'had' b'<unk>' b'the' b'candidature' b'line' b'in' b'stern' b'that' b'preceded' b'so' b'right'
    b'about' b'hears' b',' b'and' b'the' b'opus' b'artist' b'of' b'all' b'decrease' b'of' b'a' b'eye' b'wins' b'with' b'nature' b'city' b'and' b'the' b'70s'
    b'of' b'<unk>' b'in' b'<unk>' b'and' b'discretion' b'"' b'.' b'"' b'The' b'Dream' b'"' b'(' b'In' b'Marshal' b'testify' b'sold' b'the' b'aliens' b'done'
    b',' b'and' b'placed' b'upon' b'his' b'First' b'frontier' b'"' b'<unk>' b'"' b')' b'and' b'heirs' b'to' b'have' b'the' b'Joan' b'in' b'<unk>' b'('
    b'1950' b')' b'.' b'Three' b'issues' b'includes' b'The' b'romantic' b'features' b'of' b'stories' b'and' b'<unk>' b'the' b'Odaenathus' b'.' b'Sea' b'regards' b'the' b'desire'
    b'of' b'discontinued' b'to' b'him' b',' b'but' b'said' b'that' b'"' b'\xc3\x8dmar' b'<unk>' b'how' b'I' b'<unk>' b'a' b'hard' b'emotional' b'fearful' b';' b'officials'
    b'is' b'always' b'adjective' b'.' b'The' b'monster' b'would' b'be' b'designed' b',' b'but' b'it' b'removed' b'/' b'a' b'fascists' b'in' b'the' b'cytoplasm' b','
    b'though' b'to' b'YouTube' b',' b'all' b'better' b'feels' b'Vandernoot' b'to' b'always' b'share' b'with' b'enough' b'to' b'obsolete' b'Burrows' b'.' b'"' b'However' b','
    b'they' b'briefly' b'discover' b',' b'stated' b'Childe' b'in' b'computers' b'.' b'Once' b'a' b'alternative' b'man' b'with' b'himself' b'in' b'1914' b'was' b'Zhou' b"'s"
    b'most' b'poorly' b'settlers' b',' b'and' b'commented' b'it' b'"' b'couldn' b"'t" b'think' b'such' b'to' b'Environment' b':' b'There' b'is' b'trouble' b'extremely' b'Mason'
    b'up' b'species' b',' b'let' b'Jewish' b'money' b'"' b'.' b'TRIGA' b'council' b'credited' b'when' b'Kenna' b'<unk>' b'in' b'item' b"'s" b'life' b'between' b'very'
    b'supreme' b';' b'they' b'infest' b'their' b'effect' b'and' b'<unk>' b'them' b'.' b'<eos>' b'The' b'race' b'uses' b'the' b'script' b',' b'which' b'calls' b'in'
    b',' b'means' b'with' b'high' b'Futa' b'fungi' b"'ve" b'been' b'8' b'mg' b',' b'commonly' b'(' b'83' b'minutes' b')' b',' b'conducted' b'by' b'<unk>'
    b',' b'New' b'York' b',' b'<unk>' b'<eos>' b'The' b'queen' b'(' b'The' b'meaning' b'@-@' b'like' b'Promotion' b'1643' b')' b'is' b'a' b'roughly' b'10'
    b'AU' b',' b'so' b'a' b'male' b'aide' b'gives' b'it' b'as' b'a' b'whole' b'meaning' b'.' b'The' b'player' b'seems' b'to' b'have' b'Xinjiang' b'ecosystems'
    b',' b'something' b'after' b'original' b'names' b'\xe2\x80\x94' b'and' b'deals' b',' b'as' b'he' b'tries' b'it' b',' b'by' b'a' b'narrator' b'walking' b'a' b'kneeling'
    b'deal' b',' b'even' b'by' b'its' b'<unk>' b'.' b'Aware' b',' b'it' b'totals' b'to' b'poetry' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'six' b'FITs'
    b',' b'class' b'(' b'spring' b'Lone' b')' b'=' b'<eos>' b'<eos>' b'The' b'Musical' b'language' b',' b'Somerset' b'played' b'on' b'10' b'August' b'1993' b'of'
    b'a' b'concrete' b',' b'developed' b'much' b'liquid' b'interests' b',' b'and' b'the' b'population' b',' b'Missouri' b',' b'Simone' b',' b'<unk>' b'Hotel' b',' b'Provence'
    b',' b'reliable' b'migration' b'regarding' b'generation' b'of' b'Peninsula' b'accidentally' b';' b'it' b'is' b'known' b'at' b'institutions' b'County' b'Australia' b',' b'and' b'south' b'Criminal'
    b'Heritage' b'.' b'In' b'fact' b',' b'caves' b'on' b'delineated' b'agriculture' b'in' b'Hell' b'land' b'the' b'invaders' b'murders' b'the' b'ghost' b'puzzle' b'of' b'Dogger'
    b'ice' b'Patrick' b'Jackson' b',' b'southeast' b'limiting' b'shoe' b',' b'culture' b',' b'decreasing' b'mineral' b'Asquith' b'(' b'mid' b'before' b'of' b'five' b'thousand' b'\xe2\x98\x89'
    b')' b'and' b'two' b'main' b'definitions' b',' b'<unk>' b'Nachtigall' b',' b'dating' b'in' b'France' b'and' b'Rica' b'in' b'town' b'.' b'Most' b'desolate' b'vocalization'
    b'numbers' b'mean' b'that' b'the' b'sanctuary' b"'s" b'horses' b'originated' b'from' b'fulfil' b'three' b'or' b'long' b'by' b'casuarius' b'to' b'direct' b'letters' b'.' b'It'
    b'will' b'be' b'under' b'<unk>' b',' b'although' b'"' b'Different' b'eclipse' b'was' b'different' b',' b'until' b'there' b'has' b'a' b'worms' b'more' b'stock' b'<unk>'
    b'and' b'span' b'phrases' b',' b'but' b'much' b'supernatural' b'judgement' b'guns' b'are' b'fairly' b'probably' b'to' b'be' b'nut' b'in' b'what' b'they' b'can' b'avoid'
    b'abutments' b'to' b'heart' b',' b'when' b'on' b"'" b'<unk>' b',' b'they' b'were' b'no' b'steadily' b'"' b'.' b'They' b'also' b'is' b'best' b'identical'
    b'for' b'nitrogen' b',' b'thereby' b'for' b'only' b'eleven' b'months' b'old' b',' b'by' b'I' b'were' b'recorded' b'involved' b'late' b'here' b'.' b'According' b'to'
    b'<unk>' b'of' b'Tessa' b'and' b'Stockton' b',' b'they' b'are' b'often' b'difficult' b'to' b'confirm' b'hatred' b'in' b'NMR' b'.' b'These' b'public' b'bird' b'adapted'
    b'to' b'work' b',' b'such' b'as' b'Janesville' b',' b'Ceres' b',' b'and' b'may' b'be' b'classified' b'to' b'treat' b'use' b'in' b'or' b'gait' b'.'
    b'East' b'factors' b'and' b'white' b'elaborate' b'structures' b'scattered' b'to' b'PBS' b'.' b'A' b'solar' b'colonies' b'then' b'at' b'night' b'are' b'consulted' b'.' b'Thus'
    b'it' b'will' b'be' b'applied' b'to' b'the' b'relief' b'<unk>' b'predators' b',' b'which' b'do' b'not' b'be' b'Governor' b"'s" b'inscription' b'for' b'42' b'years'
    b'in' b'English' b',' b'on' b',' b'services' b'west' b'of' b'many' b'universities' b'.' b'<eos>' b'As' b'their' b'common' b'starling' b',' b'on' b'a' b'12'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.9
    loss: 5.168
    elapsed time (seconds): 113.2




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  20.401 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
