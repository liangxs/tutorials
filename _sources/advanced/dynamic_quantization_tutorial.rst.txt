
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'touch' b'to' b'the' b'2016' b'season' b',' b'saved' b'it' b'back' b'worse' b'in' b'many' b'countries' b'to' b're' b'@-@' b'construct' b'water' b'.' b'4th'
    b'was' b'ever' b'found' b'in' b'Spain' b'with' b'his' b'only' b'release' b',' b'and' b'volunteered' b',' b'O' b"'Malley" b"'" b'sister' b',' b'was' b'initially'
    b'hoped' b';' b'in' b'the' b'Times' b'Australian' b'Cricket' b',' b'Stars' b'Glass' b',' b'<unk>' b'against' b'Traditional' b'Age' b'schools' b'would' b'be' b'made' b'thirteen'
    b'of' b'his' b'sports' b'.' b'Although' b'he' b'could' b'have' b'otherwise' b'met' b'the' b'hero' b'Holy' b'History' b'landed' b'up' b'by' b'ArtWalk' b',' b'Canadians'
    b'go' b'some' b'of' b'his' b'lone' b'planet' b',' b'Vivien' b'airplane' b',' b'"' b'having' b'deteriorate' b'a' b'motor' b'deal' b'that' b'will' b'be' b'licensed'
    b'.' b'"' b'<unk>' b'were' b'acting' b'as' b'a' b'clue' b'for' b'her' b'own' b'congregation' b',' b'and' b'that' b'the' b'combined' b'community' b'would' b'be'
    b'certain' b'<unk>' b';' b'they' b'do' b'not' b'<unk>' b'her' b'.' b'But' b'he' b'has' b'paid' b'Jain' b'parties' b'.' b'In' b'February' b'1922' b'Walpole'
    b'married' b'his' b'boyfriend' b'<unk>' b'refuge' b'for' b'Sitriuc' b'for' b'both' b'illustrations' b',' b'the' b'joint' b'headlining' b'Padres' b'in' b'the' b'governor' b'of' b'FISA'
    b'.' b'The' b'Constructors' b'Origins' b'defended' b'Hugh' b'Lee' b'and' b'the' b'other' b'pieces' b'of' b'the' b'arrival' b'of' b'operators' b'of' b'murder' b'Bismarck' b'('
    b'Warm' b'<unk>' b')' b',' b'John' b'Johnson' b',' b'and' b'Robyn' b'(' b'Louise' b'Confederation' b')' b'.' b'In' b'general' b'games' b',' b'books' b'in'
    b'ordinance' b'suggested' b'were' b'to' b'support' b'.' b'As' b'such' b',' b'Bradman' b"'" b'final' b'couple' b'would' b'be' b'complicated' b'as' b'<unk>' b'are' b'in'
    b'this' b'reason' b'after' b'they' b'could' b'be' b'moved' b'along' b'their' b'inexperienced' b'comics' b'tour' b',' b'and' b'they' b'began' b'the' b'race' b'were' b'not'
    b'drawn' b'.' b'The' b'assassination' b'provides' b'as' b'increasingly' b'claiming' b'to' b'be' b'The' b'full' b'interaction' b'into' b'view' b'being' b'attached' b'to' b'advancing' b'by'
    b'the' b'theme' b'of' b'faster' b'could' b'allow' b'Barrier' b'Grace' b'.' b'<eos>' b'Besides' b'he' b'first' b'mentioned' b'an' b'changeup' b',' b'the' b'Viscount' b'holds'
    b'in' b'1859' b'.' b'The' b'Kompong' b'Soundtrack' b'used' b'certainty' b'Hobbs' b"'s" b'murderer' b'company' b',' b'who' b'heard' b'his' b'role' b'on' b'December' b'side'
    b'pier' b'and' b'circuit' b'fast' b'wooden' b'stories' b':' b'<eos>' b'With' b'rapid' b'scientist' b"'s" b'blindness' b',' b'The' b'<unk>' b'crashing' b'<unk>' b'Mack' b'is'
    b'<unk>' b'.' b'Nevertheless' b',' b'it' b'might' b'have' b'been' b'said' b'from' b'"' b'certain' b'to' b'a' b'no' b'direct' b'audience' b'"' b',' b'by'
    b'particular' b'commentator' b'David' b'R.' b'ibn' b'Pity' b'admitted' b'no' b'McDougal' b"'s" b'husband' b',' b'"' b'The' b'Only' b'education' b'of' b'a' b'nephew' b'loved'
    b'mind' b'by' b'suited' b'to' b'wings' b'and' b'compose' b'.' b'"' b'O' b"'Malley" b'then' b'fulfilled' b'traces' b'of' b'his' b'power' b',' b'and' b'"'
    b'The' b'only' b'man' b'"' b'.' b'He' b'created' b'the' b'Game' b'illustrious' b'to' b'find' b'him' b'later' b'with' b'its' b'homes' b'.' b'At' b'a'
    b'F\xc3\xa9d\xc3\xa9ration' b'Conservatoire' b'game' b'ceremony' b',' b'the' b'net' b'<unk>' b'@-@' b'grandfather' b'retired' b'...' b'these' b'ecological' b'starlings' b'occur' b'in' b'<unk>' b',' b'and'
    b'looked' b'@-@' b'digit' b'African' b'episcopal' b'region' b'that' b'incurred' b'the' b'creation' b'of' b'Kelefa' b'Heinz' b'Parker' b'.' b'He' b'failed' b'as' b'a' b'wasting'
    b'tutor' b'supported' b'by' b'Crash' b'tries' b',' b'the' b'FIA' b',' b'after' b'his' b'research' b'character' b'abused' b'his' b'lover' b',' b'then' b'ultimately' b'fine'
    b'.' b'<eos>' b'With' b'1' b'years' b',' b'in' b'the' b'civil' b'election' b',' b'lbws' b'were' b'not' b'less' b'successful' b'in' b'the' b'fundamental' b'invited'
    b'into' b'disaster' b',' b'including' b'Shapur' b"'s" b'life' b'similar' b'to' b'Singapore' b',' b'craftsmanship' b'and' b'social' b'military' b'punishment' b'.' b'Dean' b'ser' b'challenged'
    b'him' b'to' b'create' b'a' b'very' b'small' b'view' b'before' b'his' b'speech' b'and' b'will' b'be' b'stored' b'to' b'find' b'a' b'euros' b'ornament' b'.'
    b'Flow' b'stated' b'that' b'Ceres' b'still' b'liked' b'"' b'a' b'anonymous' b'nephew' b'...' b'barbettes' b'is' b'perhaps' b'official' b'again' b';' b'he' b'sustained' b'a'
    b'worry' b'between' b'<unk>' b'Charlotte' b'resembling' b'a' b'therapist' b'.' b'"' b'Resurrection' b'Christgau' b'writes' b':' b'"' b'King' b'of' b'Dripping' b'Church' b'can' b'have'
    b'Saturday' b'down' b'any' b'or' b'Soval' b'they' b"'ve" b'inherently' b'studbook' b'over' b'being' b'a' b'moment' b',' b'people' b'of' b'Chief' b'Ward' b'Edmund' b'Williams'
    b',' b'who' b',' b'however' b',' b'and' b'asked' b'gays' b'.' b'He' b'always' b'spark' b'on' b',' b'I' b'could' b'tribble' b'them' b'.' b'<unk>'
    b'@-@' b'<unk>' b'necessarily' b'to' b'let' b'the' b'same' b'and' b'a' b'bat' b'\xe2\x80\x99' b'look' b'<unk>' b',' b'put' b'enthusiastic' b'no' b',' b'something' b'his'
    b'old' b',' b'disgust' b'permanence' b',' b'"' b'but' b'was' b'probably' b'able' b'to' b'assess' b'unstable' b'land' b',' b'addicted' b'to' b'business' b'an' b'court'
    b',' b'giving' b'a' b'few' b'clean' b'intellectual' b'stress' b'and' b'that' b'99th' b'is' b'known' b'when' b'they' b'have' b'been' b'supplemented' b'structure' b'and' b'<unk>'
    b'@-@' b'up' b',' b'which' b'includes' b'140' b'short' b'innings' b'and' b'bearing' b'lieutenant' b';' b'the' b'three' b'respond' b'distributors' b'wall' b'colour' b'an' b'role'
    b'to' b'Schmoke' b"'s" b'readers' b'.' b'Doctors' b"'" b'last' b'title' b'when' b'the' b'situation' b'is' b'"' b'what' b'<unk>' b'an' b'fresh' b'part' b','
    b'and' b'think' b'to' b'Canadian' b'or' b'Curse' b'have' b'never' b'expected' b'Orioles' b'trailing' b'it' b'to' b'hamlets' b'that' b'seems' b'none' b'of' b'the' b'bite'
    b'"' b'.' b'He' b'structured' b'them' b'to' b'Vanya' b',' b'so' b'he' b'would' b'not' b'have' b'done' b'Aalborg' b'.' b'This' b'pupil' b'focuses' b'in'
    b'picks' b',' b'but' b'a' b'large' b'one' b'theology' b'serves' b'for' b'reconstruct' b'him' b'to' b'adopt' b'their' b'book' b'radicals' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'AOL' b'=' b'=' b'<eos>' b'<eos>' b'Over' b'this' b'point' b'of' b'rule' b',' b'Ceres' b'has' b'developed' b'a' b'total' b'@-@' b'conviction' b'yellow'
    b'approach' b'to' b'his' b'eyes' b'.' b'Another' b'viewing' b'story' b'is' b'<unk>' b'.' b'His' b'son' b'\xc4\x80c\xc4\x81rya' b'Beno\xc3\xaet' b'used' b'as' b'mosaic' b'king' b'Tachibana'
    b'@-@' b'<unk>' b'.' b'Ecclestone' b'Sil' b'explained' b'it' b'<eos>' b',' b'O.' b'<unk>' b'(' b'The' b'character' b'of' b'NCAP' b')' b'<unk>' b'once' b'mentioned'
    b'patterns' b',' b'as' b'being' b'much' b'like' b'to' b'try' b'to' b'manage' b'coloured' b'<unk>' b'such' b'as' b'humans' b',' b'<unk>' b',' b'<unk>' b','
    b'epic' b'1821' b',' b'goods' b'and' b'<unk>' b'from' b'<unk>' b'.' b'The' b'body' b'can' b'be' b'exposed' b"'" b'best' b'part' b',' b'"' b'He'
    b'argues' b'to' b'steal' b'a' b'robbery' b',' b'marketing' b'out' b'that' b'this' b'latest' b'another' b'<unk>' b'when' b'they' b'...' b'thoroughly' b'run' b'that' b'they'
    b'sought' b'from' b'a' b'sex' b',' b'<unk>' b'.' b'Sometimes' b'though' b'very' b'able' b'to' b'be' b'true' b'low' b'at' b'a' b'kind' b'of' b'for'
    b'scream' b'.' b'"' b'<eos>' b'In' b'December' b',' b'the' b'155' b'@-@' b'living' b'range' b'from' b'"' b'Prior' b'to' b'amber' b'Incubation' b'of' b'Jupiter'
    b'"' b'in' b'2005' b'was' b'formally' b'published' b'wearing' b'giving' b'James' b'Dublin' b'.' b'<eos>' b'O' b"'Malley" b'discussed' b'behind' b'her' b'real' b'secretary' b'Whittaker'
    b"'" b'Television' b'Festival' b'.' b'According' b'to' b'a' b'peak' b'@-@' b'eyed' b',' b'a' b'encompassed' b'critique' b',' b'is' b'a' b'violation' b'between' b'a'
    b'planet' b'and' b'Manders' b'.' b'The' b'carnival' b'lowered' b'rates' b'of' b'subtypes' b',' b'seems' b'a' b'need' b'@-@' b'up' b'game' b'to' b'different' b'different'
    b'abilities' b',' b'receiving' b'bringing' b'phosphors' b'and' b'experience' b'so' b'if' b'"' b'sometimes' b'dentist' b'Oeler' b'"' b',' b'like' b'that' b'"' b'ing' b'"'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 198.2
    loss: 5.168
    elapsed time (seconds): 111.9




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  19.221 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
