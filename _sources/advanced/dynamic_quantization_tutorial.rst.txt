
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/dynamic_quantization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we will apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.

.. GENERATED FROM PYTHON SOURCE LINES 22-32

.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F








.. GENERATED FROM PYTHON SOURCE LINES 33-39

1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 39-73

.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))








.. GENERATED FROM PYTHON SOURCE LINES 74-82

2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.

.. GENERATED FROM PYTHON SOURCE LINES 82-132

.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')








.. GENERATED FROM PYTHON SOURCE LINES 133-149

3. Load the pretrained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply
load some pretrained weights into this model architecture; these
weights were obtained by training for five epochs using the default
settings in the word language model example.

Before running this tutorial, download the required pre-trained model:

.. code-block:: bash

    wget https://s3.amazonaws.com/pytorch-tutorial-assets/word_language_model_quantize.pth

Place the downloaded file in the data directory or update the model_data_filepath accordingly.

.. GENERATED FROM PYTHON SOURCE LINES 149-170

.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu'),
            weights_only=True
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )




.. GENERATED FROM PYTHON SOURCE LINES 171-174

Now let's generate some text to ensure that the pretrained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_

.. GENERATED FROM PYTHON SOURCE LINES 174-199

.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'Larssen' b',' b'an' b'palm' b'study' b'of' b'the' b'sharp' b'@-@' b'Ramanagara' b'provisional' b'companion' b'of' b'Unknown' b'in' b'2014' b'and' b'Iago' b'.'
    b'<unk>' b'from' b'what' b'may' b'enable' b'it' b'to' b'continue' b'a' b'other' b'children' b'of' b'35' b'mph' b'(' b'12' b'km' b'/' b'h' b')'
    b'per' b'month' b':' b'<eos>' b'By' b'2006' b',' b'a' b'two' b'@-@' b'known' b'lawsuit' b'had' b'one' b'of' b'the' b'five' b'extinct' b'population' b'features'
    b'two' b'stands' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Track' b'listing' b'=' b'=' b'<eos>' b'<eos>' b'Not' b'in' b'Skinner' b',' b'Great' b'stingray' b'is'
    b'only' b'comparatively' b'ruins' b'but' b',' b'in' b'turn' b',' b'regard' b'to' b'ten' b'Indian' b'ocean' b'taxonomy' b'.' b'Three' b'years' b'in' b'numbers' b'they'
    b'are' b'Kensington' b'.' b'When' b'there' b'are' b'no' b'yellow' b'shrines' b'of' b'high' b'starlings' b',' b'the' b'booms' b'starts' b'by' b'seclusion' b'to' b'make'
    b'renew' b'flight' b'waters' b'and' b'dropped' b'governess' b'.' b'Polish' b'overpasses' b'<unk>' b',' b'even' b'<unk>' b',' b'from' b'London' b',' b'Venezuela' b',' b'<unk>'
    b',' b'and' b'into' b'other' b'hunt' b'<unk>' b'.' b'These' b'Devonport' b'increases' b',' b'and' b'the' b'discovery' b'are' b'confess' b'by' b'a' b'aerodrome' b','
    b'which' b'is' b'struck' b'by' b'provincial' b'genus' b',' b'is' b'also' b'associated' b'by' b'fire' b'disruption' b'.' b'As' b'Chomsky' b'disappearing' b'up' b'all' b'they'
    b'seemed' b'into' b'the' b'other' b'rematch' b'of' b'they' b'was' b'possessed' b'.' b'Another' b'male' b'male' b'do' b'last' b'yet' b'less' b'than' b'come' b'to'
    b'intestinal' b',' b'as' b'they' b'find' b'some' b'gregarious' b'descriptions' b'.' b'This' b'realizes' b'that' b'Ireland' b'was' b'significantly' b'unprepared' b'for' b'viruses' b'active' b','
    b'engaging' b'Witchcraft' b',' b'the' b'heaviest' b'cheese' b'in' b'ancient' b'treatment' b'line' b'.' b'It' b'also' b'has' b'long' b'horns' b'by' b'sweet' b'pests' b','
    b'sale' b'Palestro' b'or' b'<unk>' b'.' b'In' b'the' b'second' b'half' b',' b'bismill\xc4\x81h' b',' b'though' b'the' b'monastic' b'periods' b'of' b'times' b',' b'are'
    b'<unk>' b',' b'forests' b'and' b'minor' b'into' b'those' b'and' b'two' b'brown' b'quarterdeck' b'in' b'sometime' b'with' b'its' b'female' b'advance' b'.' b'Common' b'ranges'
    b'on' b'the' b'Medway' b'<unk>' b'Hoysalas' b'have' b'thrown' b'above' b'Twins' b'with' b'an' b'62' b'@.@' b'2' b'million' b'sodium' b'...' b'throwers' b',' b'arrangement'
    b';' b'but' b'is' b'<unk>' b'with' b'trousers' b'.' b'He' b'acts' b'and' b'by' b'10' b'@.@' b'7' b'\xc2\xb5m' b'(' b'0' b'\xc2\xb0' b'to' b'70'
    b'\xe2\x80\x93' b'17' b'in' b')' b',' b'with' b'1' b'@.@' b'3' b'mm' b'(' b'4' b'@.@' b'9' b'in' b')' b'high' b'(' b'Adolphe' b'5'
    b')' b',' b'in' b'2' b'August' b'Puebla' b'.' b'It' b'has' b'three' b'light' b'common' b'starlings' b',' b'although' b'this' b'can' b'be' b'embellished' b';'
    b'it' b'is' b'best' b'brown' b'than' b'its' b'male' b'to' b'crops' b'at' b'it' b'.' b'Ceres' b'rushed' b'through' b'$' b'six' b'million' b'(' b'2006'
    b'USD' b')' b'off' b'measuring' b'when' b'any' b'does' b'so' b'call' b',' b'due' b'to' b'bill' b'bridges' b',' b'and' b'it' b'is' b'proper' b'that'
    b'less' b'effective' b'tissue' b'details' b'causes' b'.' b'The' b'opening' b'movement' b'will' b'be' b'measured' b'by' b'other' b'tasks' b'and' b'foraging' b'between' b'invertebrates' b'and'
    b'other' b'birds' b',' b'but' b'the' b'latter' b'R\xc3\xa9union' b'leave' b'the' b'goddess' b'Trust' b'and' b'Amor' b'abdomen' b'(' b'the' b'<unk>' b'of' b'the' b'continuous'
    b'turnpike' b'Australian' b'burning' b',' b'on' b'23' b'August' b')' b',' b'and' b'Crash' b"'s" b'custom' b'are' b'composed' b'to' b'insulted' b'birds' b'.' b'The'
    b'abdomen' b'would' b'be' b'done' b'into' b'several' b'X' b'by' b'residual' b'access' b',' b'so' b'those' b'and' b'an' b'early' b'female' b'(' b'1856' b')'
    b'are' b'summarily' b'tightly' b'.' b'That' b'same' b'RNA' b'beak' b'of' b'the' b'haridasa' b'and' b'white' b'breast' b'observe' b'.' b'A' b'bird' b'can' b'be'
    b'placed' b'as' b'<unk>' b'by' b'wonderfully' b',' b'frame' b'<unk>' b'and' b'ocean' b'@-@' b'frequency' b'plant' b',' b'fur' b'females' b'by' b'quiet' b'proteins' b'.'
    b'<eos>' b'When' b'known' b'as' b'europaeus' b',' b'most' b'therefore' b'animals' b',' b'occasionally' b'defined' b'them' b'Abbott' b'abuse' b',' b'has' b'no' b'effect' b'parallel'
    b'to' b'cryptic' b'parts' b'.' b'These' b'Boulevard' b'@-@' b'related' b'bookcase' b'has' b'Mallory' b',' b'an' b'female' b'or' b'<unk>' b'and' b'then' b'probably' b'gained'
    b'to' b'be' b'sailors' b'for' b'large' b'maps' b'across' b'the' b'nests' b'.' b'One' b'versions' b'of' b'structure' b'or' b'eliminating' b'A' b'fly' b'starlings' b'involved'
    b'.' b'Those' b'tradition' b'may' b'also' b'accumulate' b'the' b'food' b'thickness' b'until' b'any' b'other' b'droppings' b'are' b'abrupt' b'.' b'They' b'have' b'effect' b'in'
    b'<unk>' b',' b'plant' b',' b'and' b'Christie' b'today' b'.' b'If' b'they' b'turn' b'when' b'only' b'they' b'can' b'require' b'Hoover' b'snakes' b"'s" b'prayer'
    b'at' b'its' b'distance' b'when' b'they' b'made' b'Licence' b'they' b'should' b'comply' b'by' b'their' b'habit' b'.' b'According' b'to' b'grey' b',' b'they' b'are'
    b'added' b'to' b'become' b'considered' b'by' b'common' b'starlings' b'.' b'Over' b'five' b'this' b'set' b',' b'with' b'player' b'nature' b',' b'places' b'their' b'array'
    b'are' b'known' b'to' b'permit' b',' b'dug' b'up' b'over' b'17' b'miles' b'(' b'candidates' b'in' b'0' b'in' b')' b'from' b'1960' b'.' b'Additionally'
    b',' b'these' b'factors' b'are' b'two' b'associated' b'or' b'broad' b'farms' b',' b'but' b'could' b'enter' b'seminal' b'males' b'such' b'as' b'<unk>' b',' b'<unk>'
    b',' b'etc' b',' b'or' b'1005' b'them' b'and' b'<unk>' b'employment' b'.' b'However' b',' b'brownish' b'starlings' b'carrying' b'idea' b'(' b'e.g.' b'male' b','
    b'they' b'are' b'<unk>' b')' b'.' b'Those' b',' b'the' b'common' b'DNA' b'may' b'be' b'holding' b'by' b'Baltasar' b'fir' b',' b'or' b'forming' b'several'
    b'eggs' b'.' b'The' b'female' b'is' b'solitary' b'in' b'Epsom' b'.' b'One' b'<unk>' b'observations' b'have' b'uncertain' b'a' b'right' b'distinctive' b'by' b'blocked' b'or'
    b'their' b'losing' b'leave' b'if' b'they' b'are' b'enthusiastically' b'.' b'If' b'they' b'spend' b'common' b'predators' b',' b'flies' b',' b'they' b'will' b'have' b'been'
    b'<unk>' b'in' b'native' b'Gatwick' b',' b'terrestrial' b'or' b'<unk>' b',' b'but' b'straight' b'<unk>' b'derived' b'on' b'their' b'valid' b'wing' b',' b'continuing' b'to'
    b'be' b'<unk>' b'.' b'Their' b'type' b'has' b'relaxed' b'spots' b'to' b'it' b'and' b'recurved' b'enough' b'de' b'dwarf' b'.' b'<eos>' b'Examples' b'aboard' b'latex'
    b',' b'and' b'encounter' b',' b'intense' b'motifs' b',' b'"' b'<unk>' b'Minarsih' b'"' b'and' b'brownish' b'<unk>' b'.' b'Another' b'fruits' b'that' b'this' b'is'
    b'impossible' b'in' b'the' b'breeding' b'catalog' b'of' b'<unk>' b'are' b'Acute' b'.' b'supernova' b'potential' b'on' b'ends' b'rituals' b'have' b'94' b'nests' b',' b'although'
    b'Moreover' b'by' b'Duo' b'forward' b'if' b'it' b'is' b'considered' b'rather' b'low' b'.' b'To' b'eat' b'their' b'average' b',' b'they' b'will' b'not' b'be'
    b'distinguished' b'by' b'their' b'kinds' b'.' b'On' b'train' b',' b'humans' b'or' b'activities' b',' b'spots' b',' b'genes' b'would' b'death' b'toward' b'the' b'other'
    b'pair' b',' b'stating' b'it' b'for' b'their' b'surveys' b'are' b'fun' b'.' b'famous' b',' b'old' b',' b'they' b'find' b'.' b'Once' b'bird' b','
    b'growing' b'call' b'results' b'also' b'suit' b',' b'and' b'fantasy' b'every' b'unique' b'starling' b'of' b'extraterrestrial' b',' b'they' b'should' b'delicate' b'yield' b'to' b'overcome'
    b'no' b'resulting' b'people' b',' b'even' b'searching' b'in' b'a' b'pre' b'@-@' b'ourselves' b'that' b'will' b'be' b'transported' b'in' b'by' b'AIDS' b'.' b'mammalian'
    b'governments' b'shall' b'be' b'toxic' b'on' b'food' b'.' b'The' b'proportion' b'of' b'sufficiently' b'they' b'host' b'.' b'Divine' b'@-@' b'chemical' b'useless' b'movement' b'devices'
    b'have' b'long' b'white' b'potential' b'.' b'scarlet' b'destruction' b'while' b'they' b'do' b'long' b'their' b'true' b'food' b'and' b'feed' b'in' b'their' b'findings' b'as'





.. GENERATED FROM PYTHON SOURCE LINES 200-205

It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:

.. GENERATED FROM PYTHON SOURCE LINES 205-250

.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into ``bsz`` parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the ``bsz`` batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)








.. GENERATED FROM PYTHON SOURCE LINES 251-260

4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values

.. GENERATED FROM PYTHON SOURCE LINES 260-268

.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )




.. GENERATED FROM PYTHON SOURCE LINES 269-271

The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:

.. GENERATED FROM PYTHON SOURCE LINES 271-280

.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Size (MB): 113.944455
    Size (MB): 79.738939




.. GENERATED FROM PYTHON SOURCE LINES 281-285

Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.

.. GENERATED FROM PYTHON SOURCE LINES 285-297

.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 197.7
    loss: 5.168
    elapsed time (seconds): 109.4




.. GENERATED FROM PYTHON SOURCE LINES 298-309

Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  16.335 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
