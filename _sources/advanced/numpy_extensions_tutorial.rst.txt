
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.2187,  5.4831,  4.5284,  2.7218,  8.3966],
            [12.4618,  5.1516,  9.6126,  5.7613,  8.3496],
            [ 4.5046,  3.5045,  5.0863,  0.7487, 11.2666],
            [12.2184,  5.1492, 16.0835,  4.7225,  4.8052],
            [ 9.3418, 10.8782,  7.0837, 15.8745,  9.7710],
            [12.2184,  5.9155,  5.3369,  6.8355,  4.8052],
            [ 4.5046,  6.2498,  8.9631,  4.3237, 11.2666],
            [12.4618,  8.7199,  5.9722,  3.9542,  8.3496]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5422,  1.5864,  0.2581, -1.3212,  0.0309,  0.7170, -0.3985,  1.5077],
            [ 2.5922,  0.5627, -0.7598,  0.6311,  0.2398, -0.1484, -0.8754, -0.1352],
            [ 0.4138,  0.5884,  0.2077, -0.2019,  0.0054,  0.3719,  0.0538,  0.1632],
            [ 0.6082,  1.9741, -1.1165,  0.7678,  0.3308,  1.0251, -0.2859, -0.5568],
            [-0.4312, -2.1937,  1.3223,  0.2523,  0.1125, -0.6220, -0.0051,  0.6768],
            [-0.1447, -0.1291,  0.8649,  0.9589, -1.1766, -1.7540, -0.6929, -0.9977],
            [-0.7431,  0.0056, -0.0378, -1.7215,  1.5298,  1.4153,  0.0980, -0.0373],
            [-1.0056, -0.4284, -1.7558,  0.1054, -2.6774, -0.7075, -1.8274,  0.2336]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4875, -0.2762,  0.5297],
            [ 0.7241, -1.4242,  0.3327],
            [ 0.0613, -1.9522,  0.3977]], requires_grad=True), Parameter containing:
    tensor([[1.4588]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3524,  3.0199, -3.2655, -0.7930,  0.1981, -0.6258,  4.9774,  0.1358],
            [ 1.7552, -0.4317,  0.9367,  2.4657,  1.5444, -2.0664,  3.4246, -1.4396],
            [ 1.5148, -0.7844,  5.4121,  3.7508,  3.5923,  1.2898,  3.3461,  0.7087],
            [-0.3661,  1.7196,  2.1920,  4.0106, -1.3976,  6.1026,  1.5526,  3.2930],
            [ 3.5151, -0.6844,  0.2664,  2.6407, -3.7650,  3.1450, -1.5475,  3.2046],
            [ 3.7120, -3.4885,  2.5331, -0.8037, -0.3028,  2.1392,  2.9857, -0.7617],
            [ 1.9543, -5.1376,  5.7154,  0.0397,  3.0370, -0.0261,  4.1669, -1.5321],
            [ 4.0861,  0.0948,  5.1230, -1.9549, -1.3149,  1.1594,  5.8342, -2.1729]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-7.2548e-02,  2.9006e-01, -3.2356e-01,  2.6867e-01, -5.9211e-01,
             -2.5424e-01,  5.2889e-02, -7.7251e-01,  4.0239e-01, -6.4306e-02],
            [-4.4814e-04,  3.6869e-01, -1.6395e+00, -6.7752e-02, -6.4919e-01,
              6.9444e-01,  1.8692e+00,  1.2667e-01,  5.0596e-01,  5.1907e-01],
            [ 1.1952e+00, -7.9093e-01, -1.1506e+00,  2.2266e+00,  2.4952e+00,
              3.9471e-01, -2.3449e-01, -2.7978e+00, -6.5323e-01, -3.7738e-01],
            [ 1.7213e+00, -3.4413e+00,  1.0416e+00,  4.9788e+00,  1.7408e+00,
             -4.5108e+00, -2.2721e+00, -2.3323e+00, -4.0525e-02, -4.9236e-01],
            [ 4.8849e-01, -4.9369e+00,  1.2775e+00,  1.8417e+00, -3.1568e+00,
              2.3954e+00,  5.2906e+00, -1.2859e-01,  4.2951e+00, -8.4464e-01],
            [ 4.4382e-01, -2.2575e+00,  1.5656e+00, -5.3373e-01, -4.5913e+00,
              6.1613e+00, -2.8071e-01, -1.2460e+00,  2.1315e+00, -5.8306e-01],
            [-4.8665e-01, -1.6844e+00,  1.7785e+00, -5.5317e-01, -4.2709e+00,
              2.3222e+00, -3.7173e+00, -1.4675e+00,  1.0189e+00, -2.9259e-01],
            [-1.8645e+00,  1.6221e+00,  1.0142e+00,  8.0454e-01,  2.6352e+00,
              7.6398e-01, -2.1830e+00,  1.3382e+00,  1.7712e+00, -1.1600e+00],
            [-1.0346e+00,  5.1753e+00,  4.5095e-01,  6.0578e-01,  2.7278e+00,
             -4.3344e+00, -2.3871e+00, -8.5016e-01,  3.1328e+00, -6.8557e-01],
            [-7.8490e-02,  2.4943e+00, -2.6007e-01, -3.0126e+00,  1.3733e+00,
             -2.4111e+00, -2.7641e+00, -9.6613e-01,  3.6966e+00, -6.8958e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.581 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
