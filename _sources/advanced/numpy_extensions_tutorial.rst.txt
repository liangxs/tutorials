
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[13.2267, 16.2325,  6.4736, 14.1753,  1.0438],
            [11.1164,  5.6724,  1.4801,  4.1113, 10.8490],
            [14.8334,  4.4177,  5.9067,  4.6238,  6.1248],
            [ 7.6603,  5.6947,  2.3241,  1.5284,  1.0898],
            [ 0.9497,  4.7988,  2.9280,  7.7065,  1.3157],
            [ 7.6603, 11.0690,  8.0679, 11.7996,  1.0898],
            [14.8334,  2.6170,  9.1814, 10.8978,  6.1248],
            [11.1164,  7.6243,  2.5766,  5.2960, 10.8490]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0310,  0.0061, -1.7527,  0.6278, -1.4330,  0.3429,  0.4511, -0.5439],
            [ 0.1961,  0.8702, -0.4885,  1.3653,  0.7507,  0.0592, -0.2442, -0.6616],
            [ 0.6650,  0.3980,  1.3444,  0.7767,  1.2534,  0.5396,  0.4391, -0.0621],
            [ 1.6309,  0.9532,  0.9388,  1.2753,  0.1240,  0.7040,  1.5419, -0.3207],
            [-0.1990, -0.2505,  0.4538,  0.6464,  0.7718,  1.2525,  0.7802, -1.5937],
            [-0.1579, -1.9277, -1.5211,  1.4871, -0.2720,  0.2189,  0.7413, -2.7359],
            [ 0.4730,  0.9312, -0.7186, -0.5776,  1.9815,  0.0527,  0.1803, -0.0669],
            [-1.5679, -0.0807,  1.0508,  0.9233,  0.4805,  2.2114,  0.2728, -0.7292]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4629, -0.7278,  1.3481],
            [-1.5089,  2.3118,  0.0276],
            [-0.2043, -0.2928,  1.6668]], requires_grad=True), Parameter containing:
    tensor([[-0.2430]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2990, -1.6032,  2.1274, -0.7510,  1.4982, -2.8691,  1.3412, -2.2144],
            [-5.3216, -6.5197, -0.4124,  4.9785,  4.5097,  0.4012, -0.6006,  0.5406],
            [-5.1384,  0.2049, -8.3035, -2.4750,  5.2490, -1.9051,  1.3254,  2.3440],
            [ 2.1637, -0.9885,  4.6164, -0.7520, -1.5538, -1.6668,  3.0711,  4.8866],
            [-9.0373,  2.6782,  0.0295,  0.5941,  1.7000, -6.3007, -0.2533, -0.7576],
            [-1.4302, -1.2111, -1.3571,  2.5785,  5.0813, -1.5665, -3.7718,  3.5261],
            [-2.2403,  5.2839, -3.0091,  0.2020, -1.9779,  7.6936, -4.5025,  1.0583],
            [-3.3040,  2.0204, -0.8288, -0.9543,  3.8257, -6.4821,  2.6992, -0.0774]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 5.5039e-01,  9.1760e-01,  1.8921e+00, -1.9140e+00,  3.0865e+00,
             -1.3201e+00, -9.7045e-02,  6.3374e-01, -2.7211e-03,  1.1947e-02],
            [-1.1366e+00,  7.3184e-01, -5.3683e-01,  5.0934e+00, -1.2339e+00,
              7.1285e-01, -5.4985e-01,  2.6211e+00, -1.4006e+00, -3.5671e-01],
            [ 2.3762e+00, -3.4776e+00,  6.3929e+00, -2.6750e-01,  3.5264e+00,
             -4.1127e+00,  2.7936e+00, -1.3617e+00, -3.1986e+00, -3.7910e-01],
            [ 1.3974e-01,  1.8256e+00, -3.2511e+00,  9.7132e+00, -1.3656e+00,
              8.1679e-01,  3.8274e+00, -2.5119e+00, -2.3737e+00, -7.7979e-01],
            [-2.7035e+00,  2.5613e+00,  1.4038e-01, -5.5408e+00,  4.4317e+00,
              3.7512e+00, -5.2503e+00,  1.4059e+00, -3.8331e+00, -3.4911e-01],
            [-1.0116e+00,  1.4144e+00, -1.5260e+00, -5.2393e-02,  5.5460e-01,
             -4.1397e+00,  2.7426e+00, -1.9253e+00,  3.1253e-01, -5.5629e-01],
            [ 3.3332e+00, -1.6754e+00,  4.6075e+00, -4.5079e+00,  1.9298e+00,
              1.4993e-01, -5.1236e+00,  3.6135e-01,  1.1846e+00,  4.6218e-03],
            [-2.3964e+00,  2.8173e+00,  1.8282e+00,  3.7691e+00, -8.9453e-01,
              2.6845e+00, -1.4749e+00,  1.9063e+00,  5.2317e-01, -5.7511e-01],
            [ 1.0871e-01, -1.9532e+00,  4.9065e-01,  4.7610e+00,  2.5815e+00,
             -2.6349e+00,  1.1863e+00,  1.3313e+00,  8.9363e-01, -2.0567e-01],
            [ 5.4409e-02, -1.7982e-02, -9.2430e-01,  1.9028e-01,  2.6320e+00,
              5.5728e-01, -3.1794e-01,  1.9076e+00,  1.0180e+00, -4.7716e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.576 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
