
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.3913, 11.2738,  6.4677,  5.7503,  5.9149],
            [ 1.0586,  6.4265,  2.0574, 13.2969,  5.4362],
            [ 2.9271,  6.6368,  6.8627,  3.4970,  8.5253],
            [12.6249,  2.0655,  9.1416, 15.9522, 15.2492],
            [13.5695,  1.7512,  5.8173,  6.6021,  4.7798],
            [12.6249,  5.9150, 14.6451,  9.2977, 15.2492],
            [ 2.9271,  7.6014,  4.3625,  5.5176,  8.5253],
            [ 1.0586,  4.4868,  6.6664,  9.3681,  5.4362]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0804, -1.5452,  0.2867, -1.5719,  0.1134,  0.5293, -1.0137,  0.5928],
            [-1.6041,  0.9073,  0.2937,  0.2143, -0.3702,  0.6872,  1.7936,  1.5648],
            [ 0.2968, -0.1877, -1.4468, -0.8701, -0.7795, -1.6447,  0.6599, -0.3437],
            [-0.1526,  0.1812,  0.9120,  0.3899,  0.7214,  1.4054,  0.5140, -0.1468],
            [-2.5281, -0.1921, -1.4624,  1.5131, -0.3571, -1.1570,  1.0620,  0.1301],
            [ 1.8516, -1.7914,  0.6573, -1.3898,  0.5334,  0.2659, -1.2065,  0.3971],
            [-0.0624, -0.0325,  1.3011, -1.0696, -1.2118,  1.0971,  0.6984,  0.7956],
            [-0.2030,  0.3542, -1.4522, -0.2678, -1.7215,  1.9564, -0.6961,  0.4903]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1442, -0.3848,  0.6624],
            [-1.0058,  1.1265, -0.3782],
            [-0.3584,  1.7424,  0.0851]], requires_grad=True), Parameter containing:
    tensor([[1.1272]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3990,  0.1591,  1.4437, -0.4161,  0.4130, -1.5787,  3.8945,  0.5835],
            [ 2.3367,  3.6483,  0.4333,  1.7728,  2.5878, -3.4342,  1.1238,  1.9215],
            [-1.6457,  4.6808, -0.2494,  0.8021, -1.8350, -2.0763,  4.8684,  3.0939],
            [ 3.9094, -1.5397,  7.7930,  0.3505, -1.2238,  2.7519,  2.2826,  0.8805],
            [ 3.6511,  1.8723,  1.1320, -0.2641, -0.2711,  5.4133,  1.0456,  2.0991],
            [-1.9079,  4.1577, -0.5683,  0.4574,  3.0856,  0.2866, -0.4226, -0.2515],
            [-2.2884,  5.0357, -3.1083,  2.2615,  3.5337,  0.4030,  5.1936, -0.3373],
            [ 3.2914,  1.0154, -7.7799,  0.5049, -0.2600, -3.1426,  4.0613, -4.0082]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0951,  0.1336, -0.2128, -0.4107, -0.1510, -0.2639, -0.5642,  0.6520,
              0.6734, -0.2638],
            [ 0.7721, -0.3596,  0.6711,  0.3425, -1.6928, -1.3390,  1.1790,  1.2631,
             -0.9626,  0.3275],
            [-0.2438,  0.3572,  0.0186, -2.5131, -1.5921, -2.2264,  3.0850,  0.8657,
             -1.1545, -0.3590],
            [-2.1748,  3.6614,  0.5441, -4.1960, -1.9899,  3.0733,  1.3964, -0.8836,
              0.3691,  0.3494],
            [-1.3239,  6.6200, -2.2760, -2.5070, -2.5478, -0.6669, -0.7681, -3.0849,
             -1.0758, -0.8764],
            [ 0.9952, -0.7390, -1.7051, -3.4605,  2.1179, -1.2689,  3.1810, -1.2640,
             -1.0926,  1.4845],
            [ 1.4795, -2.1571, -0.4963,  0.6750,  2.3955, -1.6508, -0.0933, -4.3521,
             -1.7034, -0.0090],
            [-0.0133, -1.6586, -3.3210,  2.5593, -0.7832,  1.5885,  1.2896, -5.4909,
              4.8578, -0.1408],
            [ 0.4337,  0.4767,  0.8436,  1.6887, -1.1948,  1.0922, -1.8132, -2.8588,
              1.6004,  0.0227],
            [ 0.1908, -0.6068, -1.4192, -1.1952,  0.8993,  1.0463, -1.6694,  0.8731,
              0.3469,  0.0145]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.599 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
