
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.9514, 13.3438,  9.6229, 10.8564, 11.4520],
            [ 8.7075,  9.8450,  6.1557,  6.2068, 16.2161],
            [ 8.0912,  6.6761, 12.2146,  4.4946,  9.0029],
            [ 8.1743, 11.4375,  5.5310,  8.6869,  6.8023],
            [10.2665,  1.7240,  2.5631,  7.0303,  1.7665],
            [ 8.1743,  2.8287,  3.8604,  6.1997,  6.8023],
            [ 8.0912, 14.5154,  8.2033,  4.7453,  9.0029],
            [ 8.7075,  3.2038,  8.3355,  5.3494, 16.2161]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6091, -0.9735, -0.1881,  0.0492,  0.1766,  0.6785,  0.9136,  0.1033],
            [-0.0524,  1.9776,  0.4645,  0.7456, -0.8123, -0.5895,  0.5309,  0.1023],
            [-0.2867,  1.3839,  0.2301,  0.1098, -0.4315, -0.1336, -0.9528, -0.1383],
            [-0.6771,  0.8831,  0.1594,  0.7350,  0.6308, -1.3976, -0.1403, -0.0855],
            [-0.6343,  0.3497,  0.1031, -2.5297, -1.8018, -2.1271,  0.5927, -0.8019],
            [ 3.0149,  0.3125,  0.9431, -2.4128, -0.9528,  0.4799,  2.9753, -1.4829],
            [-0.0240,  1.2071,  1.1928,  0.1328,  0.3738, -0.9859,  0.4700, -0.8244],
            [ 0.2794, -0.0723, -0.1109,  1.8821, -0.4293, -1.3510,  0.5358,  0.0233]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2260,  1.0506,  2.0512],
            [-0.5986, -0.7735, -1.7465],
            [-0.5255,  0.4610,  0.1658]], requires_grad=True), Parameter containing:
    tensor([[0.7804]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.4613, -1.3607, -2.0285, -0.5570,  3.2384, -0.2601, -2.3915,  4.5818],
            [ 1.0010,  2.1783,  6.4214,  4.6399,  4.6259,  2.3353, -0.2176, -4.2377],
            [ 0.3820,  1.6834, -1.3534, -1.1461,  0.0872,  3.0087,  0.6771,  4.4507],
            [ 2.2998,  0.7734,  0.2226,  1.6975,  1.4013,  1.6068,  3.8446,  1.5340],
            [ 0.3452, -3.4567, -2.1553, -4.7539, -1.3634, -7.2416, -2.8106,  3.2721],
            [ 1.7713, -0.1293,  5.4618,  3.6524,  6.7802,  5.9212,  3.7475, -1.7991],
            [-0.6587, -0.9664, -4.0900, -3.8416, -5.3960,  5.1493,  1.4735,  3.9465],
            [ 0.2920,  3.5598,  3.9550,  1.5942, -0.2076, -0.5224, -1.5218, -5.5008]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1522,  0.8708,  2.2012,  1.6783, -0.2244, -2.2377, -1.8299,  3.7078,
              2.2217,  1.2040],
            [-0.6473, -1.5624, -1.6992,  3.1723, -0.2694, -0.0106,  2.8992, -4.0430,
             -2.2601, -2.2496],
            [ 0.4450,  0.3858,  3.0997, -1.1973, -1.5621, -2.8227, -0.2952,  2.6885,
              3.1911,  3.0234],
            [ 0.1600, -3.1887, -1.4165, -1.0595,  1.2087,  1.0218, -0.2778, -2.7250,
             -2.9302, -0.4983],
            [-0.2477,  0.6651,  2.8634,  3.0728, -1.9503,  5.5264, -0.1238,  1.1714,
              1.3055, -3.1778],
            [-0.2072, -0.9662, -3.4283, -5.3890,  1.9611, -2.5390,  1.1671,  4.2761,
             -1.8088,  0.6710],
            [-0.3528,  1.4035,  3.5995,  5.6402,  1.6301,  2.8168,  3.1522,  2.6703,
              1.9883,  1.1080],
            [ 0.1094,  2.2013,  0.7398,  0.7741,  1.1610, -1.1403,  0.6085, -4.2948,
             -3.3917, -1.2781],
            [-0.6309, -2.2790, -3.1901, -4.1683, -2.9620, -4.6820, -1.0583,  0.8234,
              1.8668,  0.9206],
            [-0.5440, -0.2978,  0.4909, -0.2619,  0.1542,  0.6502,  0.8063, -0.0197,
             -0.3699, -0.0866]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.583 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
