
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.0605,  4.6147,  8.5536, 11.5980,  1.5810],
            [ 7.5632, 10.1768,  3.9395,  7.7726,  9.6682],
            [ 4.8034, 10.9463,  7.9388,  2.2029, 10.7082],
            [ 5.5093,  4.5197, 11.3867,  6.4019,  4.9599],
            [ 7.0203,  6.9492,  5.6908,  7.4341,  2.8487],
            [ 5.5093,  2.9720, 11.6211,  6.1023,  4.9599],
            [ 4.8034,  5.8118,  8.1604,  6.3825, 10.7082],
            [ 7.5632, 14.7371,  8.2264, 14.0950,  9.6682]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2112, -0.6920,  1.9796,  0.6823,  1.4432, -0.0515, -1.8678, -1.0325],
            [ 0.7052, -1.1786, -0.1616, -0.1726,  1.2113, -0.4722, -0.7634,  0.2740],
            [-0.6523,  1.1050, -0.6875, -0.0892, -1.6498, -0.1570,  0.7109,  0.0740],
            [-0.1578,  0.8525, -2.6046,  0.6337, -0.1091, -0.3848, -0.1953,  1.6995],
            [-0.3758, -0.2236,  1.1093, -0.6573,  0.6363, -0.7817, -0.6213,  1.0981],
            [ 2.5292,  0.5259,  0.2240,  0.2258,  0.4060, -0.3022, -0.0318,  2.2180],
            [ 0.4460, -1.0725,  0.7368, -0.7808,  0.7822,  0.2813, -1.9516,  1.4905],
            [-0.6360,  0.7972,  1.4723, -0.5745,  0.3218,  1.4901, -0.2975, -1.5043]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0411,  1.7624, -0.3549],
            [ 1.1540, -0.2817, -0.8144],
            [-1.3545, -1.2011, -0.1905]], requires_grad=True), Parameter containing:
    tensor([[0.5535]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2713, -5.3035, -2.2261,  4.2855,  2.4997,  3.3349,  2.2490, -0.5489],
            [-4.7567,  1.5556,  1.4544, -0.2204,  3.4855,  1.5114,  1.4050,  3.3107],
            [ 1.8121,  3.4882, -1.8768,  0.6133,  0.8075, -2.1317,  1.8487, -2.0890],
            [ 5.6283,  0.5016,  1.8170,  2.2680, -1.2232, -1.6281, -1.6307,  3.0786],
            [ 3.8490,  3.4409,  1.9870,  2.9507,  4.2327, -2.5127,  2.0803, -5.3880],
            [ 1.9185, -2.3862,  2.4567,  4.4997, -4.9867,  0.0423,  2.1577,  3.8852],
            [-3.9095, -0.6725,  2.7384, -4.8296, -1.0493,  3.6151,  2.9857,  4.5091],
            [ 0.7074,  5.2448, -0.1024,  0.2085,  5.2388,  1.4451,  3.3348,  0.2667]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0612, -2.6402, -0.2732, -2.3839,  1.4271, -1.2167, -2.2032,  2.7562,
              1.7861, -0.4493],
            [-1.6553,  2.5995, -0.9062, -1.4164,  0.1622,  2.3216,  0.8321,  1.2951,
             -3.5405, -0.5545],
            [ 3.7386,  0.9900, -0.4837,  2.8276,  4.2425,  3.2330, -2.3076, -2.5227,
             -1.8385,  0.9735],
            [-2.6623, -1.4177,  5.2257, -0.2646, -2.0500, -2.2905,  1.2855,  0.0999,
             -1.3671,  1.0894],
            [ 1.0491,  1.2402, -2.8922,  0.9715,  1.2262, -1.2767, -0.7053, -4.8869,
              1.8644,  1.3365],
            [-0.9888, -1.8057,  2.6474,  2.9966,  0.6267,  1.6353, -5.5380,  0.1684,
              2.2500,  0.5865],
            [ 0.5798, -1.4558, -1.2258, -3.6010, -2.6691, -6.2691, -2.6797,  1.1721,
              4.9071,  0.1713],
            [-1.1327,  3.9596, -0.7200, -1.8985, -2.6665,  2.6514,  6.3140,  5.1572,
             -0.7230, -0.4585],
            [ 3.5941,  0.4040, -0.1498,  2.0800,  1.8907,  2.6404,  1.4205, -2.9610,
             -0.7584,  0.9837],
            [-2.4432, -1.9528, -0.7033, -0.3385, -0.0455, -1.3260, -0.6179,  2.3755,
              1.9266,  0.2938]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.584 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
