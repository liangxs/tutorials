
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.5616, 14.3120,  7.3075,  9.0317, 11.0537],
            [ 1.7143,  7.6987,  6.1892,  2.8140, 15.2741],
            [ 2.6233, 15.7172,  7.4598,  5.0547,  8.4924],
            [12.0028,  8.4600,  7.0001,  3.2018,  6.1427],
            [ 3.4024,  7.2567, 10.1945,  9.1571,  1.4371],
            [12.0028,  9.2007,  5.1377,  7.1292,  6.1427],
            [ 2.6233,  8.0576,  5.2564,  4.9939,  8.4924],
            [ 1.7143,  8.1078, 10.4569,  3.8431, 15.2741]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-4.9769e-01,  9.4480e-01,  1.3467e+00, -1.0573e+00,  2.1895e-01,
              1.2143e+00,  1.4562e+00, -1.1622e+00],
            [-1.1543e+00, -1.9730e-02,  1.3390e-01,  9.6401e-01,  1.0620e+00,
              1.4494e+00, -2.0820e+00,  2.0061e-01],
            [-1.1180e+00,  9.3009e-01, -3.7857e-01, -2.9697e-01, -1.1464e+00,
              4.7815e-01,  4.9763e-01, -2.4667e-01],
            [-1.0670e+00,  1.4350e+00,  1.6421e+00,  2.7449e-01,  1.7381e+00,
             -5.4330e-01, -2.5918e-01, -3.2503e-01],
            [-5.1823e-01, -2.5899e+00, -2.1104e-01, -2.9908e-01,  6.3743e-01,
              6.0247e-01,  2.3138e-01, -9.9513e-01],
            [ 8.1670e-02, -1.4439e+00,  8.7809e-01,  1.5758e-01,  3.5237e+00,
              4.3406e-01, -8.5517e-01, -1.0276e+00],
            [ 4.8464e-01, -5.1302e-03,  8.5115e-01,  2.3411e-01,  6.7531e-01,
             -2.1496e-01, -8.3556e-01, -6.5097e-01],
            [ 7.7161e-01, -4.1281e-01,  1.9062e-01, -2.0290e+00, -4.1167e-01,
             -1.2473e+00, -7.8699e-02,  1.8045e-03]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4028, -1.4832,  2.3385],
            [ 0.1668, -0.8159,  0.2798],
            [ 2.1124,  1.1780, -0.6758]], requires_grad=True), Parameter containing:
    tensor([[0.6490]], requires_grad=True)]
    Output from the convolution:  tensor([[-7.7592, -0.7088, -1.4053, -5.0013,  0.5854,  3.3163,  1.9379,  4.4040],
            [-5.2179,  2.0542,  1.3920, -8.4433, -1.2738,  3.1021, -6.2299,  3.3109],
            [ 4.9696, -6.7680,  9.6248,  4.2092,  7.1464, -0.9023,  0.5075, -4.5722],
            [ 6.3198, -4.6564, -4.0506,  0.5214, -2.1881,  1.1312,  4.0463,  1.8861],
            [-0.4351,  4.0628,  2.8272, -4.4514,  0.6737,  0.3651, -3.2399,  2.2804],
            [-0.2848,  5.8009,  4.3382,  0.6280,  0.3537, -0.2084,  2.0440, -4.1427],
            [ 2.1125, -2.5174,  2.1377,  3.5354, -0.1111, -1.2038, 10.5071, -5.4715],
            [-1.2372,  3.0007, -4.0008,  4.1510,  7.1829,  4.1579,  2.0012,  6.9073]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0999,  0.7280, -1.8596,  1.9070,  0.3933, -0.1390, -0.4650,  1.4443,
              0.2347, -1.3433],
            [-0.1255,  0.5564, -1.1373,  0.7454, -2.4577,  1.8726, -1.7599,  3.2972,
             -5.3685,  4.1616],
            [-0.3390,  0.8802,  2.3045,  2.1737, -4.8103,  4.5949, -4.7874,  2.1844,
             -1.6427,  1.2617],
            [-0.5073, -0.6109, -2.3154,  0.8141,  2.7741,  0.2907, -6.0311,  4.7029,
              2.4217,  1.0153],
            [ 1.4083,  0.1931, -4.1202,  1.9962, -0.9224,  0.6595,  3.5854, -1.0187,
              1.4405, -0.5716],
            [-0.6719, -0.9566,  3.3347, -3.8540,  2.5344, -0.9346,  4.2427,  0.7690,
              3.7148, -2.6559],
            [ 1.7924,  2.8450,  2.6558, -5.1892,  3.0957, -5.8476,  2.8286, -2.0953,
              3.1346, -1.9762],
            [-0.2238, -0.5860,  0.5565, -0.4136,  6.0114, -0.8538,  2.4517, -3.3462,
             -1.9880,  1.0888],
            [ 0.3991, -1.1135, -4.0418, -6.3844, -0.0901,  1.3231,  2.0132, -0.4981,
             -1.9543,  0.6575],
            [-1.9723, -0.3972,  3.8802, -0.0639, -1.4653, -1.1616, -2.0721,  0.6902,
              0.7100, -0.2215]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.581 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
