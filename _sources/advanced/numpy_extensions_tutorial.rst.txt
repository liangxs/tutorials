
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.6751, 14.7315,  2.6237, 10.7396,  5.5741],
            [ 3.9606,  3.3743,  5.8340, 10.6467, 14.7451],
            [ 3.8137,  2.4913,  3.7746,  3.4078,  2.9149],
            [ 8.5618,  9.1070,  7.5788, 10.7161,  8.5488],
            [10.3233, 11.1545,  8.9850, 10.8586, 10.0666],
            [ 8.5618,  5.4216, 11.5085,  3.9968,  8.5488],
            [ 3.8137,  6.2339, 14.8459,  6.7611,  2.9149],
            [ 3.9606,  7.2898,  8.8776,  6.3802, 14.7451]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8645,  1.5358, -1.5086,  0.2633,  2.1578, -1.5150, -1.3016,  0.3059],
            [ 0.2613, -0.4734, -0.7332, -0.5745,  0.4254,  0.2128,  1.3301,  0.0137],
            [-1.0028,  0.5855, -2.1713, -0.5090,  1.3227, -0.6276, -0.0544, -1.1322],
            [ 0.3688, -0.2451,  0.4530, -1.1480,  1.2704, -0.7050,  2.3379,  0.8809],
            [-0.9668, -1.7450, -1.3573,  0.8011, -0.3093,  1.0127, -0.3235, -0.9044],
            [ 0.2195, -0.4980, -0.0465, -1.0303,  0.2390,  0.7222, -0.8239,  1.0110],
            [-1.8363,  0.8704, -0.9510,  0.2950, -1.1379,  1.4393,  1.6659,  0.2348],
            [-1.2525, -0.1413, -0.2762, -0.0411, -1.1395,  0.3472,  0.6516,  2.7079]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.7574, -0.0596,  0.3777],
            [ 0.6242,  0.4853,  0.0237],
            [ 0.4820, -1.9766, -3.0323]], requires_grad=True), Parameter containing:
    tensor([[-0.5824]], requires_grad=True)]
    Output from the convolution:  tensor([[ -3.3912,   1.4157,  -5.8897, -10.8793,   2.5350,  -2.1033,  -4.0018,
              -4.0608],
            [  0.8836, -10.8462,   0.6340,   9.2830,   9.6689,   1.3489,   1.2099,
               0.1746],
            [  1.8383,   8.5148,   5.2098,   0.8204,  -3.1824,  -3.7351,  -5.8178,
              -7.8799],
            [  1.0036,  -1.5999,  -3.1066,  -1.6902,  -2.6457,  -5.0873,  -6.8731,
               3.6554],
            [ -1.2012,  -0.8893,  -3.1273,  -1.0970,   1.7135,  -0.5289,  -3.4042,
               0.7665],
            [ -5.8684,   7.8369,   2.5085,  -2.3344,  -3.4176,   1.0067,  -3.7347,
              -3.1333],
            [ -5.0320,   3.2044,   4.2820,   3.4744,  -1.8361,   1.0557,   2.3496,
              -1.7635],
            [ -1.8260,   3.5669,  -4.4578,  -6.6247,  -3.0137,  -2.7963,  -1.6369,
              -2.6237]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  1.8788,   0.2504,   0.5808,   3.4395,  -0.2562,   1.5913,   0.4280,
              -0.3222,   0.1233,  -0.1053],
            [  0.4515,  -1.6186,   2.9479,   0.2680,  -0.9292,   0.8486,  -2.5362,
               0.0928,  -0.6442,  -0.0244],
            [ -0.6597,  -3.1403,  -4.4038,  -0.7261,  -4.4175,  -8.3262,   1.3964,
              -2.3864,   0.1195,   1.0623],
            [ -1.3569,   1.0153,   3.9654,  -2.0585,  -5.4547,   1.7551,   1.4723,
               4.5674,   4.1710,   0.5780],
            [ -1.9913,   1.1000,   3.0478,  -0.2154,   6.1024,  -0.9920,   1.8259,
              -0.0565,  -4.6492,  -2.0050],
            [  2.0094,  -0.5314,   0.8013,  -3.5585,   1.0407,   5.4250,   0.3192,
               3.1681,  -0.1366,  -3.4201],
            [  2.6166,   3.7810,   2.1866,   3.1225,  -1.5388,   1.8698,  -1.1945,
               3.3356,   1.7941,   2.5873],
            [  2.4003,  -4.1326,  -3.0585,  -0.8440,  -2.2021,  -0.6061,   3.8342,
               1.4696,   2.5849,  -0.2003],
            [  0.8840,  -2.1108,  -6.9127,  -3.5385,  -1.9210,   1.1059,   1.0785,
             -11.9384,  -9.3367,  -2.6937],
            [  0.2554,  -1.5858,   0.4591,   3.0210,   4.9717,   5.6951,  -2.7334,
              -3.6345,   1.3164,   3.1011]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.584 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
