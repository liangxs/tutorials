
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 6.3586,  7.8991,  6.0977,  3.3985,  2.2640],
            [12.4628,  6.9171,  7.7628, 11.1025,  5.8188],
            [ 1.5416,  5.1534,  7.8403, 12.4249, 12.6433],
            [ 5.8027,  7.5774,  2.6387,  6.1005,  5.8807],
            [ 7.2597, 10.5538, 14.6769,  6.2626,  1.4530],
            [ 5.8027,  3.0231, 11.2887, 11.4239,  5.8807],
            [ 1.5416, 11.6535,  5.8178,  4.4164, 12.6433],
            [12.4628, 10.8514,  3.8822,  9.1091,  5.8188]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0994, -0.3586, -2.1657, -1.4665,  1.6951, -1.7015,  0.0048, -0.2706],
            [-0.1048,  0.5823,  1.0313,  1.1963,  1.0697, -0.0343, -0.8951, -0.7129],
            [ 0.1533, -0.1178,  0.1980,  0.5557, -0.3733, -0.0086, -0.9338,  1.2550],
            [ 0.3375, -1.1613,  0.3446,  0.1932,  0.6616, -1.0334,  1.5312,  1.1182],
            [ 3.2251, -0.5008, -0.4549, -0.6075, -0.0867,  0.8100, -0.1264, -0.7315],
            [-0.6355, -0.0922,  0.9850,  0.8679, -1.2167, -0.7287, -0.8391, -0.1853],
            [-1.9138, -0.1059, -0.0355, -0.7912,  0.8212, -0.4466, -2.5822,  0.1526],
            [-2.1112,  1.1014,  0.0919,  1.1432, -0.1610, -0.1280,  0.3386, -2.1039]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2184,  0.0574, -0.1982],
            [ 1.1575, -0.1625, -0.0285],
            [ 0.3710,  1.6983, -0.1955]], requires_grad=True), Parameter containing:
    tensor([[2.1321]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.1654,  1.3768,  6.2675,  2.1702,  1.7916,  4.0570,  4.7590, -1.8505],
            [ 1.9332,  1.8144, -0.7667,  6.0786,  1.9519,  4.3161,  3.8149, -0.3550],
            [ 6.1213,  0.8845,  0.6327,  2.5479,  3.8095,  4.8341,  1.8571,  4.3690],
            [-1.1447,  4.3602,  2.4655, -2.6162,  2.1806,  5.1087,  5.6358,  2.6490],
            [ 1.1733,  5.3468,  4.8184,  2.2659,  1.2452,  1.6441,  3.6581,  1.3996],
            [ 1.6427, -1.0745,  4.7404,  0.4220,  0.6097,  4.0430,  5.3198,  2.1726],
            [ 0.0683, -0.1154, -0.2042,  2.3612,  2.2265,  2.6220,  2.0955,  4.5245],
            [ 1.3426, -2.2721, -0.0452, -1.1796,  0.5344,  1.9361,  2.4032,  2.7960]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.0075, -0.8006, -0.4657,  0.8402, -0.1449, -0.6613,  0.2434,  1.8695,
              0.0481, -0.2887],
            [-2.1103, -1.8684,  0.0318,  1.3206,  0.5301, -2.2935,  1.9083,  0.8825,
             -0.6017,  0.1493],
            [ 0.4381, -2.7987,  0.9781, -1.5000,  1.4756, -1.5726,  1.5377, -0.6172,
              2.5366, -0.2441],
            [ 0.6963, -2.3270, -0.1883,  0.1048,  2.1969,  1.8414, -3.1125,  2.5822,
             -1.8247,  0.1649],
            [ 1.2802, -0.5299,  1.3331,  1.3722,  1.6261, -1.4726,  0.1156,  0.2584,
             -0.0519,  0.0130],
            [ 1.5869, -2.1564, -6.9453,  3.3817,  1.5747,  3.1619, -1.6680, -0.6706,
              0.4232, -0.0639],
            [-0.8168, -0.0757, -2.8280,  0.1558,  5.3574,  1.1055, -2.5657, -0.4444,
             -0.0091,  0.0351],
            [-2.9764, -0.8240, -1.9616,  0.2391,  4.0152,  2.0676,  0.6172, -3.4753,
              0.5118,  0.3238],
            [-1.9687, -2.7727, -2.2591,  0.0923,  2.4685,  3.3620, -1.6020, -1.7820,
             -0.0285,  0.0880],
            [-0.4683, -2.2254, -0.2999, -0.5706,  0.8981,  0.1644,  0.4868, -2.1474,
             -2.9023,  0.3526]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.573 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
