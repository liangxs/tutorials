
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.8964,  3.0486,  9.1489,  6.4008, 12.1453],
            [ 2.4911,  3.7475,  4.6960,  2.8678,  4.3044],
            [13.4511, 13.6532, 10.6557, 13.7700,  7.7661],
            [11.4678,  2.6829, 10.4957,  4.1187,  9.2223],
            [ 9.1025, 10.6227,  7.9094, 13.3102,  6.5402],
            [11.4678,  5.1179,  9.3905, 14.5970,  9.2223],
            [13.4511,  6.1793,  5.3281,  2.3144,  7.7661],
            [ 2.4911,  5.2480,  6.2503,  1.3487,  4.3044]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0169,  0.6432, -2.8539, -0.8574,  0.7993, -0.0545,  0.2892, -1.9127],
            [-0.9110, -1.9171,  0.9733,  1.6518, -1.7938, -0.4915, -2.9766,  0.6360],
            [ 0.6640,  1.0982,  0.1930,  1.4137, -0.2000, -0.1016, -0.3514,  0.6378],
            [-0.4102,  0.4689, -0.1589, -0.1265,  1.4208,  0.2274, -0.4907,  1.0256],
            [ 0.4438, -0.6314, -2.6903, -0.3800, -1.7560,  0.9594,  0.7603, -1.0623],
            [ 1.0357,  0.1338, -0.1242,  0.6474,  1.3157,  0.4138, -1.3033, -0.9630],
            [-0.6357,  0.2085, -0.3140,  0.2630, -1.3202,  0.3274, -1.2161,  0.6204],
            [ 1.4335,  0.2115,  1.1873,  0.2293,  0.2063,  0.1059,  0.2463,  0.1995]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4832, -0.7634,  1.0547],
            [ 0.3367, -0.4884, -2.4265],
            [-1.4234,  0.2670, -0.0924]], requires_grad=True), Parameter containing:
    tensor([[-0.7018]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.8924,  5.1600,  2.2277, -0.4710,  0.5187, -2.9312, -2.3322,  0.9911],
            [ 0.8972, -1.8231, -0.9309,  8.4284, -1.0332, -2.0630, -0.7847, -1.0198],
            [-0.9257,  4.6107,  0.3990, -5.9952, -0.2167, -1.6423,  0.8059, -1.0960],
            [-2.1145, -3.6351,  0.1903,  4.4855,  2.7860, -2.1919, -3.6028, -2.9812],
            [-4.1619,  7.0283,  3.4607,  5.4104, -3.1401, -0.5248, -2.8259,  4.4181],
            [-1.0781, -0.7205,  0.5526, -2.1696, -1.4628,  3.3819, -3.4977, -3.6217],
            [ 3.9616, -4.2287, -4.7271,  2.0052, -6.6454, -4.5581,  1.1346,  1.6037],
            [-5.7492, -2.1690,  2.1315, -6.8958,  2.2892,  1.1684, -5.2554,  1.7296]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1366,  0.4241,  1.8364, -0.8198, -2.1202, -0.1980,  2.2088,  1.0454,
             -1.4677, -0.2808],
            [-0.2157, -1.5321, -0.9442,  4.2505,  4.3752, -0.9808, -2.6552,  0.9018,
              4.2507, -0.5699],
            [-0.2692,  2.2917, -0.4808, -5.7209, -1.0223,  0.1112,  2.7025,  3.7677,
              1.4748,  3.7484],
            [-1.0521, -2.1054,  0.1261,  2.1080, -6.4685,  6.5681,  2.4729,  1.1385,
             -2.0442, -2.5814],
            [ 0.0366,  1.8976, -4.4207,  1.6303,  3.2534, -7.8375, -2.6363, -1.7952,
              7.0754,  0.0400],
            [-0.1259,  0.1459,  2.7836, -1.1214, -4.3604,  1.5114,  1.8243, -2.6682,
             -4.0191,  2.1100],
            [ 0.1798,  1.9106,  2.2944,  1.9866,  2.3919, -4.2617, -5.8858,  0.7330,
             -5.0733,  2.4782],
            [ 0.6957, -2.5437,  4.2770, -0.9185,  1.8076, -3.3614,  3.3298,  4.1846,
              4.9611, -0.4249],
            [ 0.9631,  0.1664, -2.6528, -5.0775,  0.8206,  0.1564,  3.7273, -1.0091,
              1.5696, -4.1504],
            [-2.4492, -1.1971, -0.9223, -0.0559, -0.3337,  0.1322,  1.0489, -2.5822,
              0.5176, -0.1549]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.582 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
