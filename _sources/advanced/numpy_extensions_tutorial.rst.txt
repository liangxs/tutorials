
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.3296,  4.5748,  7.3618,  2.9107,  0.3226],
            [ 8.2872,  5.5362, 11.8352,  8.3454,  8.0268],
            [ 2.9439,  5.4658, 14.0167,  8.9278,  8.7214],
            [ 9.3230,  5.1657,  4.4328,  4.8471, 10.0551],
            [ 3.5956,  2.2029,  4.0164,  3.2902,  3.0252],
            [ 9.3230,  6.5888, 11.8994,  7.1682, 10.0551],
            [ 2.9439,  8.5114,  9.2782,  2.6768,  8.7214],
            [ 8.2872,  0.8632,  5.9429,  2.0980,  8.0268]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1017, -1.2195, -0.4689, -0.9857, -0.3681, -0.2968, -0.0443, -1.0984],
            [ 1.1187,  1.6343, -0.1031, -0.5781, -0.8160,  0.8143, -1.4360,  0.4695],
            [ 0.4326, -0.4771, -0.8021, -0.1239,  0.3147, -1.2421, -1.0331,  0.1053],
            [-0.4394, -0.7417, -0.1540, -1.4046,  0.5503,  0.7529, -0.1417,  0.3604],
            [-0.1284,  0.4939,  0.0094,  0.8906, -1.6298,  1.2928,  0.6185,  1.4653],
            [ 0.4185, -1.0184, -0.5555,  0.9396,  1.9126, -0.9040, -1.4609,  1.5966],
            [ 0.5496, -0.0830,  0.5324,  0.2567,  1.0662, -1.7364,  0.2937,  0.8514],
            [-0.3526, -0.3104,  0.2801,  0.5866, -0.8825, -0.1151,  1.7911, -0.6785]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2179, -0.8771, -0.2232],
            [ 0.3284,  1.1084,  0.7766],
            [-0.2838,  0.1479, -1.6275]], requires_grad=True), Parameter containing:
    tensor([[0.8352]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2806e+00,  2.3370e+00, -1.6604e+00,  6.0879e+00, -3.2026e-01,
              4.5576e+00,  2.1956e+00, -1.1161e+00],
            [ 1.1668e+00,  9.0419e-01, -2.5573e+00, -1.5298e+00, -2.4825e+00,
             -1.3036e+00,  2.2650e+00, -4.8239e-03],
            [ 2.3596e+00,  7.8469e-01, -1.6855e+00,  6.6662e-01,  4.6717e+00,
             -1.9138e+00,  1.7642e+00,  2.9278e+00],
            [-6.5226e-01,  1.3364e+00,  3.8246e-01, -2.3774e+00,  4.0755e+00,
              1.8773e+00,  1.4058e+00,  9.9314e-01],
            [-1.6433e+00,  1.0697e+00,  4.9744e+00,  6.3108e-01,  5.0794e+00,
              1.6207e+00, -4.5577e-01,  4.8857e+00],
            [ 2.8124e+00, -2.8512e+00, -3.7373e+00, -1.1282e+00, -2.4542e+00,
             -9.4086e-02,  1.0056e+00, -7.4549e-01],
            [-2.5843e+00,  2.0554e+00,  9.0100e-01,  3.7058e+00,  2.1775e+00,
              3.3367e+00, -1.8109e-01, -1.4884e+00],
            [ 5.4521e+00, -2.1683e+00, -2.7293e+00, -4.8354e+00,  4.4989e+00,
              1.6246e+00,  4.3137e+00,  8.4741e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4800,  0.8390, -0.1962,  0.9807, -0.8448,  0.8028,  0.7921,  1.3130,
             -1.7107, -0.3885],
            [-0.0198, -1.2933, -0.8804, -0.8005,  0.7145, -0.5823, -2.4539,  1.6882,
              4.0414,  1.6275],
            [ 1.0306,  0.5104,  1.0025,  3.0382,  0.7274,  1.0105,  1.6028, -2.5347,
             -3.8702, -3.8219],
            [ 1.6819,  0.4831, -3.0325, -1.3229, -0.2175,  1.4173, -5.0979,  0.2117,
              2.2996,  1.9737],
            [-1.0548,  1.2258,  1.6585, -1.0380, -1.2476, -1.3352,  4.4798,  0.3567,
             -0.5273,  0.1481],
            [-2.3017,  1.4553, -4.4163, -3.8865,  0.8132,  6.0436,  2.5090, -4.4781,
              3.4037, -0.4613],
            [-1.1362,  0.4191,  2.2623,  5.1699, -1.2296, -3.5599,  3.2091,  1.6608,
             -0.6119, -1.2126],
            [ 0.0515, -1.9633,  1.0789, -2.2626,  2.2056,  1.2937,  2.4996, -0.5326,
             -4.6053,  0.1426],
            [ 0.2310, -0.3857,  0.7487, -2.5553, -0.7094, -2.3766,  0.9882,  1.6742,
             -0.5133,  1.9759],
            [ 0.0080,  0.1138,  0.2336,  0.7907,  1.2041,  1.2969, -0.5336, -1.2107,
             -0.1510, -2.0249]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.583 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
