
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.0235,  4.7766,  3.1198,  6.2644,  7.0660],
            [13.2508, 12.0677,  8.2539,  3.1547,  8.9143],
            [ 5.1340,  0.7658,  6.0366, 13.5569,  7.9425],
            [11.9824,  3.5270,  6.9185, 10.1534,  3.6095],
            [ 4.2157, 10.2014,  2.9175,  7.3800, 13.1149],
            [11.9824, 11.0342,  6.6733,  3.0253,  3.6095],
            [ 5.1340,  2.8223,  3.5536,  4.9026,  7.9425],
            [13.2508,  8.3424, 15.0636,  1.5735,  8.9143]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.3104, -1.1351, -0.8259, -0.6454, -0.6307,  0.8310, -1.0955, -0.6021],
            [-0.8372,  0.1772,  1.1359, -0.0113, -0.4492,  1.4373, -0.5649, -1.3246],
            [-0.9879,  0.3155,  1.5673,  1.2846,  0.8167,  1.2692,  0.3225,  1.0980],
            [ 0.3884,  0.1337, -0.0902,  0.2333,  0.4494, -0.8078,  1.7485, -1.1276],
            [ 1.9232, -0.9542,  0.8421, -0.5360, -0.9163,  0.3719,  0.3544,  0.0866],
            [ 0.5065, -1.7098,  0.0044,  0.4330,  1.5586, -1.4919, -0.6605,  1.2748],
            [ 0.3457, -1.2359, -2.3585, -0.8525, -1.7042, -0.6682,  0.3355,  1.0749],
            [ 0.8857, -0.1796,  0.0987,  0.5230,  0.7064, -0.4129,  0.4628, -1.8939]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4995,  0.1095,  1.0032],
            [ 0.9911, -0.2364, -1.2535],
            [-2.0099,  0.2520,  0.2972]], requires_grad=True), Parameter containing:
    tensor([[-0.0954]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1823, -0.1639,  1.8292, -4.0993,  4.6488,  2.1448, -2.1164, -1.2170],
            [ 4.8741, -0.0259, -3.1033,  2.0582, -2.0384, -2.9827,  0.7593,  1.8405],
            [-0.0830,  0.7929,  0.0819, -4.6471,  2.0572,  0.4497,  2.8243,  3.9133],
            [-1.8604, -0.8261,  3.4411,  3.5614,  1.1186, -0.4978,  0.1852,  4.2847],
            [ 6.0678,  2.4339, -2.3390, -1.4949,  0.2038, -1.4803,  2.0580,  0.3530],
            [ 1.2564,  1.7908,  1.9417,  3.9825,  1.5338, -0.5273,  1.1107,  4.4609],
            [-2.1469, -1.9445,  4.7964,  4.2725, -4.9441, -1.8046,  3.8069, -1.6768],
            [-0.3954,  3.9538, -3.6976, -1.7540,  4.4727,  0.4411, -2.0530, -0.4234]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.0206e-01, -6.0545e-01, -1.5651e+00, -1.3749e-01,  8.2765e-01,
              1.6450e+00,  2.5991e-01, -1.6912e+00,  5.3449e-02,  6.1937e-01],
            [-2.6457e+00, -6.7242e-01,  2.0255e+00, -1.5826e+00, -6.5541e-01,
             -8.8127e-01,  1.1337e-01,  3.5232e+00, -4.2384e-01, -1.7031e+00],
            [ 7.4305e-01, -9.0737e-01, -4.7711e+00,  3.0681e+00, -1.2543e+00,
             -2.3274e+00, -8.7392e-01, -1.8739e+00,  1.1305e+00,  1.0157e+00],
            [-4.5666e+00, -1.5822e+00,  2.6297e-01, -6.6508e+00,  1.6240e+00,
              9.4369e-01,  1.6221e+00,  1.5270e+00, -1.7578e+00,  7.5294e-01],
            [-6.1224e-01,  2.4765e+00, -3.6090e-01,  2.3242e+00, -3.5989e+00,
             -1.4915e+00,  5.4584e-01,  1.1516e+00, -2.1085e-03, -1.8800e+00],
            [-1.8717e+00, -2.9909e-01,  3.9550e+00, -1.9020e+00,  1.0790e+00,
             -1.4545e+00, -8.7401e-01, -4.6811e+00,  1.7581e+00,  2.2269e+00],
            [-3.8111e+00,  4.8370e+00,  2.1303e+00, -2.3866e+00,  2.0327e+00,
              9.7150e-01,  3.1202e+00,  2.4362e+00, -1.3857e+00, -6.7162e-01],
            [ 3.3082e-01,  1.7251e+00,  4.0251e-01,  2.1918e+00,  2.3754e+00,
             -1.2862e+00, -1.9474e+00,  1.1520e+00,  1.6123e+00, -3.6507e-01],
            [-4.1652e+00,  3.3652e+00,  2.9452e+00, -3.1164e+00, -3.3878e-01,
              4.0141e+00,  1.2104e+00, -3.1203e+00, -1.2959e+00, -1.8119e-02],
            [-1.4971e+00,  1.0100e+00, -2.7963e+00,  9.3766e-01,  9.0400e-01,
             -2.4191e+00, -1.9149e+00,  2.8159e-01,  3.5214e-01,  4.6674e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.576 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
