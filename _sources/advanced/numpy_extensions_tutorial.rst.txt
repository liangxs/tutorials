
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.7704, 12.2994,  6.6702,  5.7514,  1.6125],
            [ 5.5180, 11.2455,  2.8952,  5.3804,  6.8379],
            [ 7.7486,  7.0743,  5.9147,  5.9168, 11.9987],
            [ 3.2959,  5.3086,  9.4818,  3.1547, 18.1806],
            [ 3.5416,  7.6287,  5.2223,  6.7572,  0.1230],
            [ 3.2959,  7.3793,  5.7875, 12.5474, 18.1806],
            [ 7.7486, 16.3704, 10.5247,  1.6377, 11.9987],
            [ 5.5180,  6.2591,  8.6432,  6.7860,  6.8379]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.6553,  0.5832, -0.0361,  1.1631,  0.4714, -0.6719, -2.4656, -0.6001],
            [-1.0107,  0.8758,  0.8560,  0.2550, -0.2080,  1.5732,  1.8476, -1.2511],
            [-0.6495,  2.0227,  0.2990,  0.1561, -0.1207, -0.0682, -0.8082,  0.8578],
            [ 0.8127, -1.0585,  0.9727, -0.4342,  0.1019, -0.1687,  0.2322, -0.1003],
            [-0.5529,  0.3743,  0.1041, -0.0270,  0.9554, -0.1764,  1.2746, -2.1670],
            [-1.9889, -0.8868, -0.4971,  1.6744, -0.6069,  1.5639,  0.7611,  0.8664],
            [ 0.6808, -1.2655,  0.2168,  1.2130,  0.4267, -0.6062,  1.5390, -1.8530],
            [ 0.9737,  0.7724,  0.7009, -0.5162, -0.1874, -1.9879, -1.2478, -0.5332]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4286,  0.8480,  1.2056],
            [ 1.1649, -1.3266,  0.0717],
            [ 1.0471, -0.6739,  0.7142]], requires_grad=True), Parameter containing:
    tensor([[0.1549]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.1495,  3.2819,  2.5372, -2.6606, -0.4819,  2.3054, -1.8581,  1.7105],
            [ 1.3784, -3.5467,  3.8182,  0.0591, -0.3326,  2.4680, -8.4163,  3.5902],
            [ 0.8351, -3.1324, -0.2206,  3.2344, -7.3969,  1.6269,  3.1144, -0.8320],
            [ 1.2646,  8.7707, -5.8782,  1.2962, -0.9404,  2.2075, -3.8323, -3.5242],
            [-2.0215,  4.0989, -0.6585,  1.3595, -0.7564,  2.5771, -1.9569, -0.5288],
            [ 2.8903, -1.4488,  0.8832, -1.2813,  0.8568, -6.7622,  6.2001,  1.2889],
            [-4.3572,  2.6675, -1.0848, -2.2480,  5.2790, -6.8034,  6.5360, -0.4490],
            [ 4.5798, -0.1153, -4.4318, -0.8220,  1.1974,  0.2487,  1.2860,  0.6416]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.7347e+00, -9.8466e-02, -2.1469e+00,  6.4253e-01,  2.0824e-01,
             -4.0243e+00, -1.4620e+00,  4.2382e+00,  1.1695e+00, -8.5304e-01],
            [-3.1570e+00, -1.0429e+00,  4.5060e+00, -1.7611e+00,  4.7789e+00,
              3.5600e+00, -4.5551e+00, -2.2342e+00,  2.1796e+00, -3.1476e-03],
            [ 1.1257e+00,  4.5230e-01, -4.4322e-01, -1.2442e+00, -7.2132e+00,
              1.9378e+00, -4.6184e-01,  8.2273e-02,  3.8140e+00,  2.6330e-01],
            [ 2.1883e-01,  2.5599e+00, -3.2649e+00,  7.9029e+00, -9.0288e+00,
              6.3903e+00, -3.7012e-01, -3.4578e-01,  1.3981e+00, -5.4189e-01],
            [-1.9395e-01, -1.6458e+00, -4.2259e+00,  3.4307e+00,  4.5571e+00,
             -1.5348e+00,  1.7069e+00, -6.7045e+00,  1.1923e+00,  2.1238e+00],
            [ 8.5799e-01,  2.2438e+00,  5.2039e-01, -4.6530e+00, -1.9335e+00,
             -3.9018e+00,  4.8674e+00,  3.1269e+00,  3.4726e-02, -3.2105e-01],
            [-9.7503e-02,  2.6487e+00, -1.0699e+00, -1.6426e+00, -1.1197e-01,
             -9.1094e-01, -6.2433e-01,  1.0672e+00, -3.5224e+00,  7.3717e-01],
            [-2.4641e+00, -1.3619e+00,  8.9043e-01,  1.3263e+00, -2.7592e+00,
              4.9413e+00, -3.5082e+00,  1.7377e-01,  8.8569e-01,  3.1883e-01],
            [ 2.3699e-01, -2.5620e+00, -3.6368e-01, -1.1682e-01, -8.2530e-01,
             -7.0949e-01, -5.6356e-01,  1.5098e+00, -1.2243e+00, -1.3823e-01],
            [ 7.9013e-01, -5.8794e-01,  3.5282e-01,  2.0118e-02,  4.2790e-01,
             -1.8091e+00,  1.3378e+00, -6.8086e-01, -1.6305e-01,  2.1872e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.572 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
