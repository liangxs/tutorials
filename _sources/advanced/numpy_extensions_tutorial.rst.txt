
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.0261, 12.4278,  8.5888,  3.3891,  8.7330],
            [ 8.0777,  4.4108,  9.2728,  4.7857,  4.6219],
            [ 5.6230,  3.2946, 10.6237,  9.5401,  1.7916],
            [ 5.3827,  6.8583,  5.9821,  5.5249,  1.3732],
            [ 0.9979,  2.1189,  4.6523,  9.4251, 10.7568],
            [ 5.3827, 13.0474,  6.4932,  4.3005,  1.3732],
            [ 5.6230, 10.6489,  2.8462, 10.5818,  1.7916],
            [ 8.0777,  5.5109, 17.1357,  6.6146,  4.6219]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8882,  1.2775, -0.0451, -1.6992, -1.2585, -0.4613,  0.3868,  0.0250],
            [ 0.0728,  0.6374,  1.7100,  0.5525, -0.0520,  1.0982, -0.6288, -0.1591],
            [-0.7921,  0.2270,  1.5495, -0.4769, -0.7079,  0.7860,  1.2995,  0.4118],
            [ 0.9194,  1.1221, -1.1949,  0.4029,  0.1897,  0.4652, -0.6393,  1.1909],
            [ 0.0821,  0.9374, -2.5515,  0.1553,  0.8456, -1.8345,  0.5189,  0.4294],
            [ 1.4287,  0.1332, -0.7639, -1.2644, -1.5027, -0.3730, -1.8434,  1.9053],
            [ 0.0057,  0.2745,  0.5860, -0.6187,  0.5134,  0.5027, -0.3075,  0.0651],
            [-0.7645,  0.7995, -0.2029, -1.1487, -0.9960,  1.6320,  0.4014, -1.1155]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0569, -0.2728,  0.5074],
            [-0.3473, -0.1492,  1.0406],
            [-2.2338, -0.0075, -1.2082]], requires_grad=True), Parameter containing:
    tensor([[0.4128]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3274,  4.1750, -1.4275,  1.8482, -2.0205, -1.3269,  1.0345, -0.2838],
            [ 1.9011, -1.2190,  0.0468,  1.8738, -3.0047,  2.8114,  0.9956,  6.2912],
            [ 0.4452,  2.5734, -2.2658,  2.4808, -6.6707, -0.3588, -0.2013, -1.1329],
            [-0.3942, -0.8737, -1.3428, -3.2538, -0.1674, -2.6264, -0.2323, -3.6686],
            [ 0.4755,  1.0489, -0.5908,  4.1439, -1.3037,  5.7642,  2.3701,  1.4880],
            [-0.1046,  0.1665,  0.1856,  1.4540,  2.6425, -1.2034, -1.4187, -1.0845],
            [ 3.6083, -0.9208,  1.8417, -3.5127,  3.6242, -2.6160,  7.1177, -4.4586],
            [-0.5820,  1.9040,  1.8694,  1.3801, -2.0350,  4.5012,  0.4316,  1.8893]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0204, -0.1527,  0.4043, -0.3153, -0.1979, -0.5558,  0.8105, -0.4727,
              0.2953, -0.5653],
            [-0.1038,  0.1669,  0.9942, -0.7702, -1.3120, -0.3594,  0.2983,  0.9404,
             -1.0872, -0.2011],
            [-0.9623,  2.4836,  1.1294,  2.9424, -2.3020,  0.6002, -1.5234,  4.9181,
             -1.7608,  3.5676],
            [-0.6177,  0.5997,  0.2254,  3.3356,  2.4442, -3.4461,  4.6584, -6.3063,
              2.0473, -1.5637],
            [ 1.9390, -2.9142,  1.4586, -1.7234, -0.7355, -1.8143, -3.8547, -0.9796,
              0.0731, -0.0099],
            [ 1.9403,  1.0204,  1.1728,  4.0986,  2.8289, -1.4521,  0.3772, -2.2105,
             -1.2336,  0.4982],
            [-1.9119, -0.7385, -0.1444,  2.2271,  1.9467,  0.9007,  3.9087, -1.9995,
              0.8837,  0.8273],
            [-0.2627, -0.6027,  0.9112,  2.0277, -2.5868,  3.4643, -1.7148, -2.5291,
              0.9654, -0.7211],
            [-2.3654, -0.2430, -5.5280, -1.1965, -3.4983,  0.7291, -1.7408, -0.8609,
             -1.5520, -0.2178],
            [ 1.6425, -2.1376,  1.1539, -3.5078, -3.2748, -0.7370, -1.9248, -0.3019,
             -0.0452, -0.3226]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.601 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
