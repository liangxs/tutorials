
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.2381,  3.7790,  5.8389,  4.8068,  8.8299],
            [ 2.6422, 11.7878,  8.6361,  6.7497, 13.6573],
            [ 1.0128,  7.9224,  6.1934,  3.7723,  5.6551],
            [ 8.0065, 12.1857,  3.1263,  9.7988, 14.4711],
            [ 7.7679,  6.1243,  7.1326,  6.1245,  9.9541],
            [ 8.0065,  2.2721,  6.0191,  7.6599, 14.4711],
            [ 1.0128,  8.4644,  7.2960,  5.9233,  5.6551],
            [ 2.6422,  7.2838,  6.6564,  9.1953, 13.6573]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8054,  0.2665,  0.0997, -1.1836,  0.4546,  0.0624, -1.1411,  0.6073],
            [ 1.8157, -0.8008,  0.3922,  0.5080, -0.4172, -1.7893,  0.4260,  0.6111],
            [ 1.1638,  0.4694, -0.9222, -0.4525, -1.4333,  0.6333,  0.5697,  1.0168],
            [-1.6748,  0.1550, -1.8425,  0.0266,  0.7407,  0.2177,  0.7977, -0.1123],
            [ 1.0961,  1.7870,  0.7412, -1.4321,  0.2647,  1.2117,  0.0838, -0.2842],
            [-0.4006, -0.1850, -0.4580, -0.5204, -0.8738,  0.6638, -0.2531, -0.1250],
            [-0.4830, -0.1161,  1.2952,  0.4330,  1.4959, -0.1514, -0.7592, -0.5850],
            [ 1.4534, -2.3850,  1.4198, -1.5717,  1.4009,  0.2988,  0.2873, -1.5700]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7406, -0.7149,  0.3042],
            [-0.6580, -1.4067,  0.6057],
            [-0.3688,  0.4058, -0.5054]], requires_grad=True), Parameter containing:
    tensor([[1.6665]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.6314,  1.7017, -1.1909,  2.3545,  2.9292,  4.1954,  3.4308,  1.7278],
            [-2.5177, -0.8615,  1.8574, -0.9623,  3.6016,  3.8651, -1.4470,  4.1039],
            [ 2.4658,  1.9109,  5.1622,  0.5634,  1.0955,  3.1312,  0.9548,  4.0493],
            [ 1.8311,  3.1086,  3.1672, -2.2981,  5.7026,  4.4172,  0.5525,  1.2198],
            [ 0.9205,  3.6491, -0.0972,  3.3717,  3.9324,  0.0545, -0.2164,  0.4492],
            [ 0.2759, -2.2218,  2.2513,  4.5194, -1.6252,  1.5316,  4.0710,  4.1978],
            [ 0.5997,  3.3992,  1.2962,  2.8034, -1.3042,  3.3183,  1.6135,  0.5499],
            [ 0.0523, -1.5338,  0.8376,  5.7482,  3.2403,  4.6644, -1.3365,  6.0883]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3398, -0.3599, -0.1145,  1.4520, -2.6146,  2.8879, -1.2928, -1.4515,
              1.6693, -0.6543],
            [-0.6466, -0.1686, -0.3563,  0.0169, -1.4083,  3.3071, -3.9155,  3.0215,
              2.1628, -0.7631],
            [-1.1491,  2.7036, -0.6031,  0.3083,  3.1724, -5.0411, -0.2802, -0.8862,
             -3.0954,  1.9198],
            [ 0.5407,  1.8695, -2.4674, -1.3915,  0.8723, -2.4134,  2.6019, -0.6341,
              2.4987, -2.0412],
            [ 1.7316,  0.6793, -0.0220,  2.5436, -0.5070,  0.3920, -3.0481,  2.1214,
              3.6444, -0.8481],
            [ 0.6162, -2.9633,  3.3628,  1.0796, -1.5739, -0.9983, -4.3190, -0.1906,
             -0.1250,  1.0412],
            [-0.2816, -2.8402,  5.8058, -3.9066,  4.1383, -3.2347, -2.0010, -0.3227,
              1.0665, -0.7078],
            [ 1.4298, -1.0269,  4.9024, -1.3806,  0.8109, -1.1852,  3.3080, -1.7439,
              0.8039, -0.1159],
            [-2.1018, -1.4683,  2.7003,  2.7902,  0.6165,  1.6823,  1.6815, -0.0194,
             -0.1044,  0.2105],
            [-1.0542,  1.7728, -1.8582,  0.9201,  0.0668,  0.9953, -0.5154,  0.9065,
             -0.0663,  0.0955]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.600 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
