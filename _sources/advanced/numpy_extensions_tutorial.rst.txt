
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.0243,  7.1533,  5.2178,  4.3926, 13.8446],
            [ 2.6926,  4.8034,  4.2027,  3.4316,  3.4909],
            [ 3.7430,  5.1897,  0.9505,  5.7202,  5.2201],
            [ 9.6803,  5.0911,  5.3329,  2.8943,  2.5525],
            [ 9.0763,  3.7200, 11.5351,  3.3006,  3.4345],
            [ 9.6803,  2.8522,  2.2122, 16.3610,  2.5525],
            [ 3.7430, 16.9571,  8.0451,  5.7655,  5.2201],
            [ 2.6926,  3.7675,  5.2487, 12.9125,  3.4909]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5365,  0.0892, -1.7718, -0.2346, -0.6796, -0.1477, -0.5716, -1.6108],
            [-1.0005,  1.5237,  0.5808,  0.1369, -0.1558, -0.6941, -1.1546, -0.2379],
            [-0.8665,  0.4898,  0.9267,  0.4592,  0.3843,  0.4121, -0.6678,  0.2241],
            [-1.1577,  0.0771, -0.2366,  0.0510, -0.4634, -1.0970,  0.7846,  0.1764],
            [ 0.2856, -1.1468, -0.5522, -1.1196, -1.1479,  1.0920, -1.5279,  1.6206],
            [ 0.2428,  0.4388,  1.6749,  1.4928, -2.6783,  0.6119, -0.2508, -0.8245],
            [-1.0805,  0.0836, -0.5465,  0.6114, -0.5755, -0.7732, -1.4902, -0.7547],
            [-0.6354, -1.2534,  0.5215,  0.6393,  0.1748,  0.7817,  0.6642,  0.2927]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5901, -0.4727, -0.2831],
            [ 0.0586, -0.5693,  0.9944],
            [ 0.5261,  1.0626, -0.5351]], requires_grad=True), Parameter containing:
    tensor([[-1.1273]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.5190, -1.6599, -1.9600, -1.4301,  0.1648, -1.3228, -0.5605, -3.7721],
            [-1.6158, -3.2865,  0.3940, -1.0445, -0.1824, -1.4853, -1.4544, -0.4407],
            [-0.2793, -1.2346, -0.5077, -3.1233,  1.4689, -1.0237, -1.7986, -2.7953],
            [ 0.5785, -2.5331, -1.0889, -0.7961, -2.4607, -2.0318, -1.1544,  1.0810],
            [-4.2421, -0.5051, -1.5822, -1.0101,  0.2971,  1.1184,  0.5101, -2.8107],
            [ 0.5141, -3.6939,  1.4594,  0.7185, -4.1357, -3.6828,  0.2362, -0.1708],
            [ 0.0894, -1.3533, -3.4114, -5.5789,  2.2499, -1.2118,  2.1472, -0.0851],
            [-2.5002, -2.4489, -3.1975,  1.1148, -0.7779, -0.4859, -3.3557, -0.0586]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.8825e-01, -8.5142e-01,  1.8566e+00, -4.3862e-01, -6.3014e-01,
              2.1277e-01,  3.7456e-01, -9.8368e-01,  6.3394e-01,  4.2773e-01],
            [-4.4429e-01,  1.2191e-01,  2.8665e+00, -4.1336e+00,  6.4936e-01,
              1.0425e+00,  9.9649e-02, -1.3093e+00,  1.0311e+00, -1.3980e+00],
            [ 5.5083e-01, -1.5954e+00, -1.4145e+00,  8.9738e-01,  2.0178e+00,
             -3.0190e-01, -2.2008e+00, -4.2660e-01, -3.7794e-01,  4.6241e-01],
            [-4.7647e-02, -1.6078e+00,  3.0562e+00,  2.4326e+00, -3.8365e+00,
              9.0763e-02,  2.4152e+00,  1.6123e+00, -1.5222e+00,  1.4049e-01],
            [ 1.2996e+00,  6.2815e-01, -1.2269e+00, -9.0196e-02,  2.2090e+00,
              2.6875e+00,  6.8518e-01, -2.3710e+00,  8.3798e-01,  1.6901e-01],
            [ 9.0999e-01, -5.5203e-01,  1.3060e+00,  1.7825e+00,  1.0244e-01,
              1.5519e-03,  6.6786e-01, -4.9875e-01,  8.5186e-01, -5.5895e-01],
            [ 1.1086e+00, -1.0630e+00,  2.0222e+00,  7.4662e-02, -7.3871e-01,
             -3.3816e-01, -6.5141e-01, -8.8138e-02,  3.0268e-01,  3.4959e-01],
            [ 1.9198e-01, -6.1633e-01,  1.8272e+00, -3.8138e+00,  1.3638e+00,
             -6.6834e-01,  1.3555e+00,  2.7164e+00,  1.5695e-01, -3.7149e-01],
            [ 4.1866e-01,  1.8235e-01, -1.5939e+00, -4.1704e-01,  1.7020e+00,
              1.7964e+00,  1.6097e-01, -2.1533e-01, -2.0870e+00, -2.9085e-01],
            [-3.6920e-01, -1.8179e+00, -1.5024e+00,  1.1857e+00, -1.2025e+00,
              6.8356e-01, -9.9638e-01, -2.4298e+00,  3.4578e-01,  3.4462e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.589 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
