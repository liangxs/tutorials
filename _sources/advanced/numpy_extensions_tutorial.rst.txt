
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 6.9381,  5.7108,  7.6001,  7.7658,  7.7060],
            [18.5240,  8.6575, 10.2586,  2.6232, 13.4801],
            [ 2.0109,  5.3542, 12.8010,  9.2872,  6.3606],
            [ 6.0556,  8.4996, 14.5125,  7.8787,  9.3872],
            [ 7.1439,  4.9494,  8.2438,  5.4374,  0.1474],
            [ 6.0556,  6.0621,  7.0074,  8.4138,  9.3872],
            [ 2.0109,  1.9461,  6.9608, 11.4287,  6.3606],
            [18.5240,  7.4497,  9.8363,  2.8961, 13.4801]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4450, -0.5699, -0.8345, -1.0076, -2.2391, -1.0749, -0.7054, -0.2663],
            [-1.1635,  0.6429, -0.7219,  0.2380,  0.3853, -1.6379, -1.1715,  0.0824],
            [-0.2944,  0.6045,  0.8889, -1.1930, -0.3690, -0.1019, -0.1449,  1.4176],
            [ 0.9355, -0.0333,  0.9668,  1.0906,  0.2618, -0.4364,  0.9979, -0.5279],
            [-0.3344,  1.3961,  0.0703,  0.6137,  0.5542,  0.2862,  1.6900, -0.9880],
            [-0.0638,  0.9587,  0.7614, -1.3769,  0.3596,  1.8027,  1.4149, -1.2966],
            [-1.2408,  0.5000, -1.6645, -0.8356,  1.0627,  0.2820, -2.3681, -0.6201],
            [-2.1910,  1.0697, -0.0116,  1.9117, -2.7822, -1.1807,  0.1840,  0.6341]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2950,  1.3176,  1.2748],
            [ 1.5298,  2.3204, -0.2298],
            [-0.9427, -0.3248,  0.8414]], requires_grad=True), Parameter containing:
    tensor([[-1.9380]], requires_grad=True)]
    Output from the convolution:  tensor([[ -4.2015,  -8.6938,  -8.4240, -12.0850,  -5.2401,  -0.2020,  -0.0645,
              -1.0939],
            [ -6.1323,  -7.7243,  -3.5097,   3.0619,   2.0405,  -2.2354,  -1.2886,
              -2.1151],
            [  1.9846,   5.1631,   0.5679,  -5.2486,  -7.7292,  -6.6220,  -1.4999,
               3.9778],
            [ -6.1244,  -6.5310,  -5.7019,  -3.8634,  -5.4851,   0.7015,   0.7985,
              -2.8132],
            [-10.0962,  -5.6027,  -3.9451,  -3.6405,   3.6825,   0.4126,  -6.8282,
              -0.6052],
            [ -6.4834,  -4.8299,  -3.8257,  -1.4032,  -6.6765,  -2.0796,   4.3579,
               0.2965],
            [ -0.2710,  -6.3493,  -4.1618,  -2.1409,  -2.6143,  -1.8938,  -3.6539,
              -2.1976],
            [-10.2177,  -3.5389,  -1.3653,  -2.8432, -10.5923, -11.3074,  -2.2394,
               0.5767]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4117, -1.9091, -1.9419,  0.3416,  0.7105,  0.7480,  1.0495,  0.4439,
              0.1327, -0.1650],
            [-2.2560, -3.6248,  2.2807,  3.0668, -0.0223, -0.0182, -0.8138,  0.9428,
             -0.3040, -0.3129],
            [ 0.3771,  1.1919,  1.9618,  0.6259, -1.8245, -4.9640, -0.3135, -0.1220,
             -0.1861, -0.3069],
            [-1.1822, -3.3383,  0.5884,  1.8142, -0.5863, -2.0196, -1.7542,  0.7135,
              1.4771,  1.2145],
            [ 2.0148,  1.3091,  0.9656,  6.4398,  3.2153, -0.1096, -4.9251,  1.0972,
              3.7753, -0.5445],
            [ 3.7201,  7.7349,  3.2335,  1.1937, -6.7560, -5.5650, -3.4364,  1.2736,
              3.0247,  3.0248],
            [-3.0016, -3.2253, -4.7279, -3.0513,  0.6570, -3.4665,  2.8141,  5.2983,
              3.9843, -1.8197],
            [ 0.7542,  1.3010, -2.1784, -5.8517,  4.1803,  7.9893,  1.7636,  3.4995,
             -1.1748, -0.5935],
            [-0.1406, -0.6998, -0.2311,  0.9644, -1.4486,  0.9694,  9.4446,  3.9224,
             -3.5105, -0.5011],
            [-0.0507,  0.4513,  0.7027, -1.1414, -0.3699, -0.9508, -3.4837,  2.4550,
              2.7920, -1.4613]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.585 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
