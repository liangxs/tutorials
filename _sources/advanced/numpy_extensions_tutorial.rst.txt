
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.6847,  9.3438,  3.0874, 16.1125,  8.7923],
            [ 8.8697,  4.5589,  3.5714,  2.7469,  5.3877],
            [10.8351,  2.9380,  6.1785,  6.4083,  3.6029],
            [ 1.7981,  4.1516,  4.2283, 16.7016,  6.6806],
            [ 4.5550,  7.2754,  6.1437, 11.8032,  3.1582],
            [ 1.7981,  4.3621, 12.9172,  3.9320,  6.6806],
            [10.8351,  9.8185, 10.1492,  4.5112,  3.6029],
            [ 8.8697,  5.3670,  8.1445,  9.9484,  5.3877]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0977,  0.1802, -0.3671,  0.9792,  0.8165,  0.9211, -1.2419,  0.4517],
            [-1.1986,  0.6961,  0.1981, -1.6557,  0.8127,  1.4123, -0.8542,  1.8865],
            [ 0.1155,  0.9157,  0.1806, -1.0971,  1.0406, -1.4388, -0.0571,  0.4836],
            [-0.1375,  0.5279,  1.2163, -0.7244, -0.0722,  1.4800,  0.2366,  0.5845],
            [-0.2513, -1.4460,  1.1091,  0.2286,  0.1122,  1.1647, -0.2876,  0.9221],
            [ 0.7826,  0.5650, -2.3070, -2.0162,  0.1336,  0.1030, -0.2040,  0.8543],
            [-0.5185, -1.2094, -0.5959, -0.2607, -2.1693, -0.0423, -0.6095,  0.4383],
            [-1.3472,  0.4842,  0.0807, -0.1249,  1.0478, -1.2768,  0.6846,  2.2516]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0645,  1.1173,  0.7119],
            [ 2.5658,  1.1428,  0.8907],
            [-0.6015,  1.2934,  1.9349]], requires_grad=True), Parameter containing:
    tensor([[-2.0551]], requires_grad=True)]
    Output from the convolution:  tensor([[ -0.9756,   2.3718,   0.3575,   5.3477,   2.5390,   2.9027,  -5.7934,
              -2.1487],
            [ -0.5529,  -0.7715,  -0.3536,  -4.7041,  -0.8244,  -4.3356,  -2.7144,
              -0.7074],
            [  4.2808,  -3.1969,  -3.0922,  -1.6305,  -6.5813,  -5.0834,  -2.2703,
              -3.6720],
            [ -0.9707,   0.4182,   3.0955,  -0.8388,  -6.6928,  -0.2902,   5.7075,
              -1.1512],
            [ -2.4120,  -1.2789,   2.6854,  -0.2565,  -1.0519,  -7.8634,  -7.3306,
               3.7897],
            [ -5.5478,  -5.0971,   0.4370,   5.4612,  -2.5167,  -2.8220,  -3.3543,
              -7.4861],
            [ -2.9752,  -5.0298,  -4.6171,  -3.7345,  -0.7446,  -1.0659,  -5.4121,
               1.1973],
            [ -5.5628, -11.4839,   1.8063,   4.2283,   1.8514,  -5.9522, -10.1720,
              -2.4774]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-6.4111e-01,  2.8008e-01, -8.1985e-01,  2.4002e+00,  5.7132e-01,
             -7.7790e-01,  9.0910e-01,  1.2497e+00, -1.1186e+00, -6.5003e-01],
            [ 2.9311e+00, -4.8673e-01,  5.7723e+00,  2.9808e+00,  1.1323e+00,
             -2.4636e+00, -2.0246e+00, -3.4398e+00, -1.8210e+00, -8.8774e-01],
            [-3.1272e+00, -5.5073e-02, -3.9858e+00, -1.8548e+00, -6.7604e+00,
             -1.0209e+01, -5.0183e+00, -4.0190e-01, -2.2009e+00, -1.8361e+00],
            [-1.8110e+00, -2.0986e+00,  2.8408e+00,  4.0695e+00, -1.5048e+00,
             -9.5175e+00, -6.2502e+00, -1.4760e+00, -2.4154e+00, -6.2487e-01],
            [ 2.4754e+00,  5.1707e+00,  2.2533e+00,  4.5349e+00,  2.5541e+00,
              1.6629e+00,  1.3471e+00, -2.2367e+00, -5.6755e-01,  1.9181e-01],
            [ 5.9273e-01,  8.4959e-03,  7.0219e-01,  9.3093e-01,  8.2773e+00,
              1.4892e+00, -1.5432e+00,  4.0273e+00,  7.7871e-01,  5.8175e-01],
            [ 2.9260e+00, -4.3568e+00, -5.1310e-01, -2.2812e-01, -3.3162e+00,
              2.5415e+00,  3.9268e+00,  4.2777e+00,  2.7671e+00,  3.7641e+00],
            [-5.6830e+00,  4.8018e+00, -2.0991e+00, -3.9660e+00,  9.7900e-01,
             -3.0886e+00,  1.1027e+00,  6.1787e+00,  4.3785e+00,  3.2737e+00],
            [ 2.3702e+00, -5.1626e+00, -5.8598e-01,  3.5566e+00, -1.9715e+00,
              6.7750e-02, -4.2483e-02,  6.3919e-01,  2.5086e+00,  1.6914e+00],
            [-2.8866e-01,  1.1584e+00, -5.6813e-01, -1.0768e+00,  1.5299e+00,
             -8.7868e-01,  3.4874e-01,  2.0153e+00, -2.2605e-01, -4.5032e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.575 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
