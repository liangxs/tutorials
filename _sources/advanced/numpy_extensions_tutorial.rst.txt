
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[8.8406e+00, 7.4578e+00, 1.0176e+01, 1.5015e+01, 1.9933e+00],
            [6.7271e+00, 2.2781e+00, 1.3875e+00, 7.8886e+00, 8.2475e+00],
            [6.8245e+00, 2.0357e+00, 8.2007e+00, 7.4024e+00, 8.5234e+00],
            [5.5762e+00, 5.0567e+00, 7.5250e+00, 7.7312e+00, 6.6563e+00],
            [5.4059e-03, 3.4755e+00, 5.1441e+00, 8.2265e+00, 1.0073e+00],
            [5.5762e+00, 1.0669e+01, 7.1589e+00, 5.2231e+00, 6.6563e+00],
            [6.8245e+00, 1.1582e+01, 7.4593e+00, 3.2693e+00, 8.5234e+00],
            [6.7271e+00, 8.4136e+00, 1.2480e+01, 8.6142e+00, 8.2475e+00]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.2223,  0.9793,  0.2240, -1.1849, -1.1541, -0.1635, -0.3523, -1.6771],
            [-0.3515, -1.2024,  1.1144,  0.0910, -0.9683, -0.9654,  0.3818, -0.0760],
            [-1.1917, -0.0384, -0.0497, -0.2378, -0.5210,  0.2984,  1.1513,  0.1601],
            [-1.7146,  0.0457, -1.2159, -0.8855,  0.1917, -0.0821,  0.3814, -0.0639],
            [ 0.2639,  1.6567, -2.1032, -0.1205, -0.4161, -0.9192, -0.4756,  1.0535],
            [-1.2951,  0.4906,  0.3977,  0.3261, -0.1660,  0.0295,  0.3502, -0.1107],
            [-0.3551,  1.2946, -0.9383, -2.0572,  2.3998, -1.2054,  1.7814,  0.7026],
            [ 1.2031,  1.8124, -0.1813, -1.1904, -0.8942, -0.0338,  0.3086, -0.1501]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4438,  2.7975,  1.2688],
            [-0.3535, -0.5078,  1.0793],
            [-0.2379, -0.1933,  0.3595]], requires_grad=True), Parameter containing:
    tensor([[-0.9173]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.7727,  6.0911, -1.8292,  0.0276, -2.0967, -1.7968, -2.9793, -0.2504],
            [-3.0797, -0.9176, -2.5120, -3.9861, -1.2314,  1.4620,  2.0603,  1.8763],
            [ 0.3735, -0.2740, -4.6036, -2.6129,  1.0908,  4.9042,  1.7498, -2.0598],
            [-0.5128, -0.3824, -4.1461, -3.5420, -2.1196,  2.1306,  3.8331, -2.7405],
            [-5.6614, -5.5815, -0.5496, -8.9704, -3.4912, -4.0580,  2.9709, -0.7424],
            [-2.4805, -0.8047, -2.0004, -3.7942, -7.7603, -4.8640, -2.7149,  2.8278],
            [ 0.4952, -6.3492, -0.5912, -0.5062, -7.2227, -0.0683, -1.4263, -1.6657],
            [-1.3811, -2.6986, -3.5326, -7.0695, -1.3459, -2.9674,  1.9737, -6.9688]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.6310e-01, -2.5295e+00,  9.1973e+00,  3.7931e+00, -4.9374e+00,
             -4.8630e+00, -1.3144e+00,  1.9218e+00,  2.4794e+00,  6.9925e-01],
            [ 7.2652e-03, -4.7364e-01,  1.1163e-01,  2.8542e+00,  5.3073e+00,
              5.4541e+00, -1.0237e+00,  1.9938e+00, -7.8437e+00, -3.5278e+00],
            [ 2.5419e-01, -2.5463e+00, -2.2343e+00, -3.3502e-01,  1.7625e+00,
              2.1919e+00, -5.2967e-01, -1.7916e+00, -1.0150e+00, -4.5190e+00],
            [-8.6990e-01,  6.6056e+00,  3.5168e+00, -3.3673e+00, -3.9666e+00,
              3.8360e+00, -3.7662e+00, -5.4918e+00,  2.0176e+00, -9.0931e-01],
            [-8.4628e-01,  2.3877e-01,  2.6355e+00, -1.3381e+00,  4.9314e+00,
              6.4468e-01, -1.6994e+00,  8.6291e-01, -1.8604e+00,  1.1276e-01],
            [-8.2028e-01, -1.3056e-01,  4.4913e+00, -5.1939e-01, -7.6632e-01,
              1.3466e+00, -1.8536e+00, -1.5464e+00, -6.2208e+00, -3.2080e+00],
            [-9.1995e-01,  4.2395e+00,  1.0734e+00,  2.9963e-01, -2.1657e+00,
              5.3664e+00,  1.8202e-01,  2.4473e+00,  5.4988e+00, -1.3938e+00],
            [-6.9260e-01, -5.8903e-01,  1.7468e+00,  7.9888e-01,  2.2862e+00,
             -1.7659e+00,  8.9298e-01, -1.2006e+00,  1.3422e-01,  2.5099e-01],
            [-4.2421e-01, -2.4735e-01,  6.5141e-01, -5.4685e-01,  8.7355e-02,
              4.4243e-01, -1.6276e-01, -9.7898e-02, -3.0187e-01,  3.4287e-01],
            [-2.6592e-02, -7.3160e-03, -4.6565e-02, -2.4556e-01,  1.5933e-01,
              2.9604e-01, -1.2055e-01,  1.2377e-01, -1.3304e-01, -1.4477e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.575 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
