
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 9.1376,  4.4322,  2.9549,  4.2940,  4.3114],
            [ 4.5368,  5.0071,  5.2255,  9.7344,  2.1470],
            [ 8.0229, 10.1293,  7.6258,  9.2264,  5.7438],
            [ 4.2729,  7.7177,  2.0959,  6.1396,  2.8104],
            [ 0.0805,  7.0015,  9.2471,  2.7543,  2.3110],
            [ 4.2729,  8.9478,  3.0859,  8.0456,  2.8104],
            [ 8.0229,  6.3365,  4.4809,  9.9312,  5.7438],
            [ 4.5368, 11.5495,  4.2084,  8.5907,  2.1470]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0490, -2.1129, -1.1412, -0.2889,  0.5091, -0.6175, -0.4716, -0.5116],
            [ 0.6512, -0.9331, -0.5686, -0.7012, -0.3983,  1.6356,  0.6632, -0.2229],
            [-0.6162,  0.5466,  0.7211,  1.1161,  0.9305,  0.6760, -0.4890, -0.8679],
            [ 0.5015, -1.0669, -0.0477, -0.3252, -1.3103,  0.8240, -0.3994, -0.1665],
            [ 1.1462, -0.7960,  0.3986,  0.3359, -1.0643, -0.8482, -0.5167,  0.0944],
            [-0.7387,  1.9239,  0.3533, -1.3096,  0.1978, -1.6296,  0.9410, -0.2249],
            [-1.1953,  0.1804, -0.0435,  0.2189,  0.9943, -0.5456,  0.1400, -0.5397],
            [ 0.1638,  0.3233,  0.1737,  0.4239, -0.3421,  0.3869, -1.6045, -1.7020]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1577,  0.6291,  0.9670],
            [-1.7511,  0.0122, -0.3700],
            [-1.6947, -0.4537,  0.8085]], requires_grad=True), Parameter containing:
    tensor([[0.8055]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.6260,  1.3606,  6.4128, -2.5896, -3.6811, -5.3610, -0.4986,  2.3576],
            [-0.2148,  0.5102,  1.6048,  0.1513, -2.3425, -4.5470, -1.7064,  5.4181],
            [ 2.6188,  1.1042,  5.9900,  3.3168,  2.6739,  2.3561, -1.4486,  2.9278],
            [ 4.3432,  2.9665, -1.9216,  2.1925,  0.9342,  1.3222,  0.4425,  1.1702],
            [-0.9992,  1.7518, -4.1398,  1.9750,  5.9474,  4.1475,  3.9877,  3.2594],
            [-2.8594,  1.9405, -1.7205,  2.4197,  1.0241, -3.0339, -5.5858, -0.8646],
            [-3.6833,  0.8557, -0.8781,  1.2089,  0.3853, -4.1681, -3.4175, -1.6343],
            [-3.1790,  2.6819,  1.8212,  0.6956,  4.9862,  3.9642, -1.5111, -0.2051]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3537, -1.3226, -2.6777,  0.0326,  1.1428,  0.4791,  0.0608,  0.4941,
              0.5497, -0.3198],
            [ 3.9404,  0.5461,  0.4051,  1.6923, -0.5564,  1.0375, -1.6192, -0.1015,
             -0.6640, -0.9566],
            [ 3.9393, -1.7798, -3.4327, -4.7513, -2.4767,  2.3850, -1.3826,  1.8553,
             -0.2717, -0.8110],
            [ 0.2547, -2.9042, -1.4058,  2.3288, -1.3524,  1.8429,  1.6268,  4.6532,
              0.5772, -1.5117],
            [ 2.3209,  3.3042,  0.4905,  5.9629, -3.0163, -0.6119,  1.4372,  2.8029,
              0.4658, -0.4358],
            [ 2.5536, -1.0954, -3.0803, -1.5562,  2.5093, -2.9299, -1.5782,  3.3423,
              0.1315, -1.1571],
            [-0.5458, -6.5651, -3.6560, -1.0471, -0.8212, -3.6668, -2.5849, -2.0564,
              1.1695,  0.1180],
            [ 1.4616, -1.3087, -1.8054,  3.2713, -0.3005,  6.3391, -0.7655,  2.5276,
             -0.5106,  0.3501],
            [ 1.4282, -0.9070, -4.0617,  1.7652,  4.7143,  1.7041,  0.6959, -4.1158,
              0.8734, -0.2487],
            [-1.0903, -2.0963,  0.8217,  0.0608, -0.0932, -0.5930,  0.4868, -0.2432,
             -0.8125,  0.5319]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.584 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
