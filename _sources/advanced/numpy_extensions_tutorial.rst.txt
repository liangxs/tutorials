
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.6382, 10.5392,  5.6192,  9.7748,  4.9380],
            [11.2803,  9.8325,  2.6832,  8.0355,  4.5217],
            [ 2.0946, 16.5669,  1.6011,  4.1304,  7.3995],
            [10.5762,  3.9221,  9.1482,  4.0763,  6.9518],
            [ 5.5442,  6.6982,  1.2838,  6.3508,  0.5319],
            [10.5762,  5.8488,  8.9842,  9.8647,  6.9518],
            [ 2.0946,  7.8678,  4.6933,  7.9232,  7.3995],
            [11.2803, 11.3007,  4.7969,  7.4792,  4.5217]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.6963, -0.9081, -0.5292, -0.1695, -0.5820,  1.6745, -0.9618,  1.8200],
            [-0.8456, -2.3687, -1.8335, -0.4661, -0.9635,  0.4095,  0.4210, -0.5787],
            [-0.3349, -0.9598, -1.7683, -0.0518,  1.0706,  0.8827,  0.8012, -0.7402],
            [-0.7638, -0.7297, -0.3905,  0.1693, -0.0820, -0.1341,  0.7363, -0.1585],
            [ 1.6355,  0.5100, -0.7257, -0.4276, -1.6492, -1.2803,  1.4056,  0.4971],
            [ 0.4994,  0.5118,  0.0391,  0.8085,  1.3351,  0.9637, -0.3096,  0.3861],
            [ 0.1792, -0.5661,  0.6134,  1.3662, -0.3183, -0.5850,  1.8116, -1.4530],
            [ 1.1255, -0.3114,  0.5134, -0.2870,  0.4857, -1.0178, -0.6611, -0.0942]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1480,  0.0785,  2.0735],
            [-0.0069, -0.3748,  0.4227],
            [-0.5095,  0.4640,  0.2565]], requires_grad=True), Parameter containing:
    tensor([[1.0652]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.6365,  3.5577,  1.2027,  2.6081,  1.4455,  1.2756,  1.3966, -0.4727],
            [ 2.6151, -1.4025,  0.5355,  3.8726, -1.3197,  1.4853,  1.7791,  1.8738],
            [ 1.9614,  2.6736,  3.9421,  1.0369,  2.5067,  3.2234, -1.6477, -0.7754],
            [-0.6180,  0.8232,  7.0618,  0.8369,  0.9865,  2.0250,  1.1097,  2.7762],
            [-0.5809,  4.5672, -1.0248,  0.8259,  2.5293, -1.5729, -2.3983,  0.3527],
            [-2.8191,  4.6766,  4.9650,  0.4364,  3.0574, -4.2770,  1.1064,  2.7375],
            [ 0.8853, -0.1732,  2.7922,  2.2160,  3.4395,  3.3268, -2.1288,  0.5449],
            [-1.3207,  0.8551, -1.9646,  6.4457,  4.6218, -1.6034,  1.4991,  5.3542]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.4185e-02, -2.2918e-01,  2.0398e-01,  3.2524e+00,  1.6557e+00,
              1.6419e+00,  1.2585e+00,  2.8141e+00,  3.1662e+00,  2.2471e+00],
            [ 5.2993e-02, -1.4724e-01, -1.0333e+00,  1.3149e+00, -3.5604e+00,
             -8.9044e-01,  1.3699e+00,  4.3845e-01, -1.7223e+00,  1.4653e+00],
            [ 1.2855e-01, -5.5993e-01, -2.4276e+00, -1.2902e+00, -1.4802e+00,
             -7.7276e-02,  7.2105e-01, -9.4563e-01,  4.0327e+00,  3.5770e+00],
            [ 9.1370e-02, -1.1591e-02,  2.0270e+00,  7.8160e-01,  3.3777e+00,
              2.3863e+00,  7.4494e+00, -1.9910e+00, -2.1733e+00, -1.1888e+00],
            [ 5.0157e-01, -1.7396e-01,  1.0045e+00, -1.4598e+00, -2.1274e+00,
              1.1765e+00, -7.7902e-01,  2.9608e+00,  1.5273e+00, -1.9690e+00],
            [-5.0432e-01, -2.3627e-01,  1.8198e+00,  1.6436e+00, -3.3046e+00,
              4.4091e+00,  2.4768e-01, -5.3751e-01, -2.3055e+00, -1.9945e+00],
            [-4.1225e-01,  1.3953e-01,  2.1959e+00, -3.3459e+00, -1.8787e+00,
              2.9443e+00, -6.8041e-01,  1.0939e+00, -1.7887e+00,  3.3063e-01],
            [-3.5223e-01, -1.3484e-01, -6.5519e-01,  1.3809e+00, -1.5476e-02,
              9.4582e-02, -1.2240e+00, -1.1602e-01, -4.9693e+00,  2.9841e-02],
            [-2.5057e-01,  1.3130e+00, -1.0596e+00, -9.9169e-01,  1.1263e+00,
              1.4161e-01, -1.0605e-01,  2.4138e-01, -7.8972e-01,  1.0998e-01],
            [ 5.8375e-01, -1.1576e+00,  1.6122e-01,  6.9467e-01,  1.7387e-01,
             -4.7685e-01,  8.0338e-01, -8.9922e-01, -4.8955e-01,  3.0287e-03]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.594 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
