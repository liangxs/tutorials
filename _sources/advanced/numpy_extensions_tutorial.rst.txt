
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[14.0954,  1.3105,  8.5485,  9.3172, 10.9624],
            [ 1.9019,  6.6939,  3.2602,  4.5861,  1.9017],
            [ 2.0466, 12.4384,  9.7581,  8.2835,  7.4586],
            [ 3.0203, 13.4305, 10.5341,  5.6199,  1.3904],
            [ 0.9556,  3.3239,  6.0166,  7.8627,  4.4628],
            [ 3.0203,  6.9239,  3.0315,  4.8520,  1.3904],
            [ 2.0466,  1.3373,  6.6185,  0.5671,  7.4586],
            [ 1.9019, 10.4366,  5.7272,  4.7653,  1.9017]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6960,  0.8056,  0.0909,  1.4507, -0.7185, -0.6195,  0.0142,  0.0930],
            [ 0.6173,  1.2622,  0.7937,  1.1056, -1.1595,  0.1753,  0.1725, -0.8365],
            [-0.6408,  0.1261,  1.0788, -0.3147, -0.4601,  0.5951,  1.2152,  0.5195],
            [-1.3404, -0.0846,  0.8527,  1.7530, -0.0790,  0.5720, -0.3842, -0.3682],
            [ 0.2334,  1.1771, -0.2055,  0.6722,  0.2851, -0.3209, -0.0033,  0.7685],
            [ 1.1802, -0.4911, -0.7052, -0.1226, -1.4113,  0.8092,  1.7252,  1.6382],
            [-0.2223, -0.1615,  0.4468,  0.4743, -0.5248,  1.1692,  1.7669, -1.5248],
            [ 1.5771, -0.1841, -0.6926,  0.2290, -0.1248,  1.1996, -1.1152,  0.9623]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.9391,  0.1632, -0.8498],
            [-0.3053, -0.2765, -1.3456],
            [-0.7973, -0.7093,  0.7107]], requires_grad=True), Parameter containing:
    tensor([[-0.3811]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.4775,  2.5030, -3.3275,  6.2565, -8.0590,  1.5951, -2.6885, -4.4697],
            [-0.3575, -0.3213, -0.4118,  1.2439, -2.8823, -2.0123, -3.1489, -1.2521],
            [ 2.6804,  0.7409, -5.2967, -5.1258, -1.5589, -1.2361,  2.8666, -4.5702],
            [ 1.8732, -5.8745, -2.1005,  1.0128, -1.1427, -3.0494, -2.6445,  0.0237],
            [ 0.8934, -0.8570,  0.1214, -5.6926,  0.5291,  0.4156, -1.9602, -2.2033],
            [ 2.8806, -1.3480, -1.7816,  1.0068, -0.5941, -5.8470, -6.3081, -1.1791],
            [ 3.9244, -5.4164,  1.5856, -0.8998, -1.7996,  4.6528, -2.3809, -0.4453],
            [ 2.5601,  1.1881, -4.7674, -1.2083,  1.6709,  0.7398, -0.5944,  3.3456]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.7582,  1.6384, -2.9145,  2.0592, -3.8342, -0.1564, -1.5945,  0.0405,
             -0.3000,  0.1521],
            [ 0.7122, -0.7181,  0.6688,  1.8859, -2.7250, -1.4782, -5.2080, -3.4569,
             -1.7077, -0.6779],
            [ 0.3244, -0.3640, -1.5342, -2.4383,  0.2714, -2.5259,  1.3216, -3.2120,
             -1.4593, -1.6447],
            [-0.8577,  2.2899, -4.7412,  0.0172, -4.6354, -0.6393, -3.7543,  0.3844,
              1.6433,  1.3982],
            [ 0.5102, -0.1656, -7.8632,  3.9262, -5.4143,  0.6786, -3.5025,  2.5416,
             -1.3135,  0.8449],
            [-1.1015,  1.4958, -1.0421, -3.4029, -7.5165,  1.8944, -1.4054, -0.2477,
             -1.4673, -1.7111],
            [-4.5506, -1.9640, -4.9297,  0.4612,  3.0593, -1.0167, -2.1475, -3.4178,
             -1.1985, -0.9597],
            [-1.8549, -3.1354,  1.5440, -3.5151,  2.9056,  1.1850,  3.2893, -3.9253,
              1.1078, -0.8190],
            [-2.0677, -3.2744,  0.7793,  1.5076,  4.8450, -1.3926,  0.3789,  0.2476,
              1.1204, -0.5715],
            [-0.3273, -1.1465,  1.5602,  2.4607, -1.4001,  0.5999,  0.5421,  0.2371,
             -1.3278,  0.4900]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.578 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
