
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.3498,  2.7373,  3.9678, 10.4203,  0.9411],
            [ 5.0102,  4.9516,  5.9982, 13.1227,  8.5279],
            [ 2.1220,  3.3027,  8.1795,  6.4451, 12.2610],
            [ 7.5449,  9.0290,  1.1790, 10.5863,  7.9907],
            [ 8.3838,  2.4072,  4.4542,  4.8951,  1.4860],
            [ 7.5449,  5.9320,  7.0058,  3.8407,  7.9907],
            [ 2.1220,  4.2325, 11.8027,  8.1469, 12.2610],
            [ 5.0102,  8.6700,  4.0927,  3.3417,  8.5279]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7915,  0.6115,  1.2140, -0.7827,  0.5342,  0.0588, -0.5444,  0.4846],
            [-1.2262, -0.6711,  0.6273, -0.1004,  0.0265, -0.0716, -0.9202,  0.5808],
            [-0.8436,  0.0723,  0.3099, -0.9200,  0.9810, -0.2727, -1.1627,  0.0185],
            [-0.4896,  1.6656, -1.2283, -0.4105,  1.1998, -0.3757,  1.1631,  0.7313],
            [-1.2969,  0.1604,  0.1584, -0.3933, -0.8748, -0.0066,  0.1457, -0.7645],
            [-0.2211,  1.2955,  0.3840,  0.0138, -1.2833,  1.8169,  0.1315,  1.0701],
            [ 0.5142, -0.3571, -0.7484, -0.3772,  0.4610, -0.3065,  0.8968,  0.4546],
            [ 2.0941, -0.5132,  0.6644,  0.4189,  1.5156, -1.0113, -1.0359, -1.8239]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1075, -0.2370,  1.3018],
            [ 0.8997,  0.6554,  0.3873],
            [ 0.1973,  0.1516,  0.1911]], requires_grad=True), Parameter containing:
    tensor([[-1.4501]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2450, -1.3721, -2.7627, -3.0885, -1.4092,  1.5363, -2.0430, -0.6847],
            [-2.4055, -2.2156, -3.6676,  1.4565, -1.5126,  0.3108, -0.5950, -0.7397],
            [-1.6194, -2.5741, -1.6463,  1.2361, -1.4817, -0.0464, -0.8668,  0.3674],
            [-3.1121, -1.0910, -2.4672,  0.1611,  0.8997, -2.4539,  0.4656, -4.1003],
            [-1.5026, -3.1068, -0.1384, -3.2818,  1.3325, -3.0296, -0.3295, -3.8717],
            [-1.3006, -1.9468,  0.1048, -2.1524,  0.0212, -3.0273, -1.0139, -3.0162],
            [-3.5845,  0.0213,  0.8920, -1.4542,  1.3265, -1.2446, -2.9018,  1.6768],
            [-1.5794, -2.5435, -2.1560, -2.7195, -2.8328, -3.9847, -1.1854, -1.3055]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.5517,  1.3383,  0.2849,  3.6756, -1.9219,  0.9556,  2.5767, -3.0077,
              3.4494, -1.7503],
            [ 2.6676,  3.4766,  2.8782,  2.3658,  1.2344,  0.1460,  3.5358, -2.1644,
              3.3592, -3.5104],
            [ 2.2519,  3.6665,  3.3672,  2.6854,  0.5349, -1.0295,  2.0821, -1.2762,
             -1.8724, -0.5876],
            [ 1.1390,  0.4166,  3.8900, -1.0008,  1.4708, -0.0151, -3.2370,  1.0085,
             -1.8370,  0.9226],
            [-1.1771, -2.1549, -0.3169, -1.2872,  0.8023, -0.7810,  0.3551, -0.7764,
              1.6266,  0.8746],
            [-2.0996, -1.3466, -0.3692,  0.8869,  2.4008,  1.3522, -0.0978,  1.7137,
              0.6475, -0.2462],
            [-1.8205,  0.3290,  1.1742,  1.4429,  1.2170,  1.3850,  0.7840, -1.3215,
              2.0360, -3.2855],
            [ 0.5814, -0.7784,  3.9054, -0.9766,  1.6426, -0.7045,  2.3758, -1.9853,
             -0.7553, -1.6446],
            [ 0.9937,  0.4748,  1.3494,  0.0265,  0.1175, -0.4087,  0.4145, -0.4560,
             -0.3539, -0.6508],
            [ 0.2494,  0.1216,  0.4174, -0.0328,  0.1636, -0.1700,  0.0510, -0.1183,
             -0.0160, -0.0904]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.586 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
