
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.2867, 11.4395,  1.4118,  5.8958,  5.4782],
            [ 2.6198,  9.2466,  0.6290,  8.5089,  8.9192],
            [ 9.8572,  2.1580, 13.6975,  5.4578,  4.9956],
            [ 3.3445,  7.9178,  8.2489,  4.3949,  1.8031],
            [ 2.1331,  9.2058,  2.3347,  2.0866,  0.5697],
            [ 3.3445,  9.4930,  9.3724, 15.6439,  1.8031],
            [ 9.8572,  7.2518,  6.5382, 11.5992,  4.9956],
            [ 2.6198,  3.0678,  3.6695,  5.5888,  8.9192]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3435,  1.2717, -1.4721,  0.5749, -0.5989,  0.1152, -0.7814, -1.2815],
            [ 1.0635,  0.1480, -0.8155,  0.1387, -0.5757,  1.6240, -0.0536,  0.1708],
            [-0.8195, -0.4768,  0.7851,  2.1831,  0.2061, -1.4958,  0.0821,  0.1115],
            [-0.2975, -1.0093, -0.3999, -1.2999, -0.2703,  1.8102,  0.4207,  0.5858],
            [ 0.6572, -0.9928, -0.8717,  0.1907, -0.2491,  1.1744, -0.3963, -1.3711],
            [-0.3261,  0.1809,  0.2213,  0.0713,  2.1407, -0.2724,  0.0461, -0.2684],
            [-0.8764, -1.1758,  1.5788, -0.2885,  1.7988,  2.1055, -0.4228,  0.6558],
            [-0.8874, -0.7151,  0.3097,  0.7893, -1.2389, -0.0416,  0.2909,  0.1697]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0776, -0.5876,  0.2476],
            [ 0.1378, -1.1629,  0.6089],
            [ 0.0890, -1.2434, -0.9790]], requires_grad=True), Parameter containing:
    tensor([[-0.0873]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.7684, -3.1501,  0.6275, -0.3900, -2.0709, -1.2732,  3.3470, -1.7703],
            [-0.6063, -0.9922, -1.7878, -3.6219, -1.7488, -3.1806,  5.7577,  1.4894],
            [-0.9153,  0.9811,  0.3208, -1.1337,  1.4000, -3.0639,  0.7775,  2.8499],
            [ 0.3836,  1.1684,  4.7850, -0.2625, -0.4110, -2.5809, -2.1385,  3.9350],
            [ 1.1866,  0.9786, -0.7224,  0.5053,  0.5468,  2.3261,  1.0356,  2.1163],
            [-2.0881, -0.6710,  2.5000,  0.3336,  2.1431, -0.2381,  1.3495,  0.4355],
            [ 2.4281, -2.6973,  1.1829, -2.3108, -3.4588, -0.5268,  0.9420,  2.7274],
            [ 0.6917, -2.5423,  0.9695,  1.1553,  0.1427, -2.2825, -1.3725,  0.8391]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.9555,  0.4775, -0.1471, -0.2656,  0.3724, -0.2950,  0.9058,  1.7074,
              0.4060, -0.2642],
            [ 0.8473, -0.1970,  3.7398,  0.0598,  0.2255, -0.7155, -0.4631,  0.2919,
              0.6446, -0.5747],
            [ 0.3613,  1.5266,  1.0832,  0.4932, -2.1105, -4.0146,  1.3055,  2.7788,
              2.3462,  0.9800],
            [ 1.2866,  1.2591,  2.1208, -0.9841,  0.6177, -1.3315, -1.5611,  3.9379,
             -0.4178, -1.0988],
            [-2.0158,  0.4610,  1.1401,  1.1839, -5.7916, -2.5666, -4.0226,  0.5045,
              3.2926,  0.5595],
            [-1.2821, -2.0173,  0.4031,  0.6530, -1.4541, -5.2366,  0.3660,  1.0668,
              1.5741,  0.7642],
            [ 0.5803, -2.2769, -2.8026, -2.9062, -1.9105, -5.2480, -4.6027,  0.9928,
              0.3382, -0.4813],
            [ 0.2933, -2.3817, -3.9567, -5.0580,  1.1756,  0.9302, -0.1624, -1.0458,
              1.8654, -0.1067],
            [-0.0477,  0.5755,  0.4291, -1.5881, -1.9884, -2.1078, -4.3538, -2.2148,
             -0.4812,  1.3148],
            [-0.0174,  0.3339, -0.9213, -3.2667, -2.8875,  0.3572,  0.4569, -0.6005,
             -1.2281, -0.7609]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.591 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
