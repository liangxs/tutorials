
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.5238,  9.2331,  6.5688,  7.6750,  5.4674],
            [ 2.9297,  9.8277,  6.5146,  2.5897,  5.9464],
            [11.8738,  3.8643,  5.0298, 14.6019,  6.5423],
            [ 6.7472,  6.8628, 12.3734,  7.0720,  4.3805],
            [ 9.6220,  5.4509,  3.1213,  8.8598,  2.2723],
            [ 6.7472,  5.4194,  7.9524,  2.5456,  4.3805],
            [11.8738,  3.9555,  5.0276,  0.2277,  6.5423],
            [ 2.9297,  1.6025,  2.9371,  8.0013,  5.9464]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0824,  1.5449,  1.5144,  0.2234, -0.0322,  1.1627,  0.7928, -1.4019],
            [ 0.0551,  1.2518,  0.2190,  0.0453,  0.5842, -0.6033,  0.1196,  0.1309],
            [ 0.9182,  0.7618, -0.1795, -1.3071, -0.9872, -0.4639,  0.7463, -0.5467],
            [ 1.4174, -0.7011, -0.9047, -1.0065,  0.0948, -0.6958, -0.0096, -0.6845],
            [ 0.5288, -1.3991,  0.7889,  0.7564, -0.1006,  0.6850, -1.1295,  0.8370],
            [-0.5782,  1.9342,  0.2407, -0.8030,  0.0915,  0.8045,  0.0091,  0.3273],
            [ 0.8413, -0.0473, -0.1722,  2.1595,  0.0539, -0.2003,  0.5556, -1.4130],
            [ 0.7895, -0.2080, -0.3827, -0.3321, -1.6218, -1.1503, -0.8496, -0.6327]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1380,  0.0784,  1.1214],
            [-1.3602, -0.3982, -0.3486],
            [ 0.6364,  0.7766, -0.4451]], requires_grad=True), Parameter containing:
    tensor([[0.8056]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.1002,  1.3542,  0.3523, -3.5273,  0.8496, -0.6788,  1.6685,  3.8524],
            [-2.2592,  3.7538,  2.2216, -0.4423,  3.5912,  2.4027, -1.7326, -1.6817],
            [ 2.9341, -1.0540, -3.4489,  1.0766,  1.5754,  2.2286,  1.4492,  0.3822],
            [-0.0288,  3.1167,  4.5009,  1.6389, -4.2880,  1.5901,  0.7361, -0.7734],
            [ 0.5766,  2.1878,  0.9292,  2.8163,  0.4333,  1.9985, -3.6987,  2.2461],
            [-2.4059,  1.3825, -4.3246, -1.6035,  3.8078,  2.9730, -0.3443,  4.8373],
            [-2.3010,  4.3437,  2.0074, -2.0562, -3.0534, -4.9302, -1.2178,  0.4699],
            [ 4.3744,  4.1750,  3.8983,  6.4906,  5.0877,  1.4503,  2.4349,  0.6062]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.1748,  0.2609,  0.3647,  0.0505, -0.5130,  0.1612,  2.0500, -0.6083,
             -0.7820,  0.3060],
            [-2.0582, -1.4239,  0.2132,  0.4653, -3.4585,  0.9322,  1.3363, -0.3799,
              0.5609,  0.0690],
            [-2.0095, -2.1745,  2.3430,  2.9543, -1.5267, -1.1618, -1.2728, -2.2055,
             -0.2609,  0.8281],
            [-0.5819, -0.9050, -1.0626,  4.7179,  2.0568, -1.3867,  2.1390, -0.3640,
             -2.1636, -0.4215],
            [ 5.4849,  2.8226, -1.8275,  0.6998, -0.4806,  4.1516,  3.4883, -1.6384,
              0.9996,  0.7495],
            [ 5.5000,  2.1009, -1.5255, -6.7406, -4.6554,  6.0127, -0.4567, -2.6463,
              1.2161, -1.9579],
            [-0.1933,  3.6819,  7.6411, -2.9985, -1.1467, -0.5596, -3.9818,  3.7708,
              2.1184,  1.3837],
            [-6.1960, -0.1438,  6.9511,  3.0265,  4.1543, -1.8041, -3.8540, -4.5845,
             -1.9856,  1.1238],
            [-1.6954, -0.4954, -3.0219, -0.4737,  2.3163,  2.8828,  3.1913, -0.1049,
              0.3321, -0.8046],
            [ 1.2987,  1.3987, -1.9087, -0.8406, -0.2645, -1.9300, -0.6563,  1.2478,
              0.5961, -0.3541]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.593 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
