
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.1448,  6.3282,  4.5437,  6.1179,  6.9207],
            [ 9.0973,  4.5414,  3.9020, 10.5712,  6.5009],
            [ 9.7797,  5.6946,  2.3258, 11.4688, 15.1827],
            [ 6.5429,  7.3148,  8.6340,  2.8826,  3.7846],
            [15.7274,  7.4910,  7.0720,  9.1041,  2.5030],
            [ 6.5429,  9.6178,  2.7122,  6.2124,  3.7846],
            [ 9.7797,  6.1364,  9.6222,  6.9962, 15.1827],
            [ 9.0973, 11.1724,  8.3633, 13.3887,  6.5009]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.1645, -0.9759,  2.1916,  0.8544,  0.1641,  1.1075,  0.3711, -0.2032],
            [ 0.2750, -0.0255, -1.3772,  0.2780,  0.2283, -0.3414, -0.6191,  0.8179],
            [ 0.1389,  2.0049, -0.1381,  0.5736,  0.2626,  0.6493,  0.7206, -0.2012],
            [ 0.2801, -0.6482, -2.1888,  0.7984,  2.7930,  0.0931,  2.2776, -1.0464],
            [ 1.5555, -1.3081,  0.9935, -0.7627, -0.8434, -0.6500,  0.5131, -0.4320],
            [ 0.5061,  0.2905, -1.3427, -1.6726, -0.7610, -0.9430, -0.4771, -0.4536],
            [ 0.2217,  1.5950,  0.8432, -0.1685, -0.0681,  1.4587, -0.0166,  0.8206],
            [ 0.5232, -0.0312,  1.3180, -0.5592, -1.6228,  0.6427,  0.1461,  0.5505]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7009,  0.6921, -0.2713],
            [-0.0660, -0.3461,  0.3486],
            [-0.4327, -2.4848, -0.0435]], requires_grad=True), Parameter containing:
    tensor([[-1.7169]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2132, -5.1997, -4.2534, -4.8406,  3.5270,  2.1764, -0.1745, -1.7764],
            [-2.0718, -7.4193, -0.3095, -3.7037, -2.6108, -7.3790, -1.6830, -2.4709],
            [-4.5315, -3.7821,  0.6831,  1.2311, -5.2203, -4.1389,  3.4000, -4.5439],
            [ 1.6974,  3.4554, -1.2178, -0.7453,  0.0660,  2.4628, -2.7008, -7.1217],
            [-3.6045, -9.5966, -3.0542, -7.8167, -3.2353, -0.2004, -2.1529, -5.3445],
            [-2.7393, -6.6652, -2.8951, -0.7429, -3.4592, -1.5942, -1.4725,  3.5980],
            [-6.2694,  2.6094,  1.4222, -4.0031, -8.9383, -1.9667,  0.7999, -3.1831],
            [ 2.1750, -3.0221,  0.9981,  1.8151, -0.7629, -0.2927, -1.4971,  0.7695]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.5533,  -1.0396,   0.3544,   1.3477,   0.3602,   0.3956,   0.4727,
              -0.8874,  -0.6395,   0.2544],
            [ -0.3925,   0.7438,   1.2778,   0.7562,   1.0150,   0.6683,   1.6764,
               0.5854,   0.2303,  -0.3838],
            [  1.1225,   2.8952,   0.7592,  -1.8965,  -2.7091,  -0.1070,  -3.4671,
               1.7054,   3.9134,  -0.3563],
            [  0.3280,   1.8982,  -1.8167,  -2.4839,  -3.3220,   0.5988,  -3.7358,
              -0.6657,  -0.4333,   0.1356],
            [ -1.9247,  -4.8113,   0.8294,   0.9723,   0.4278,  -0.3743,   3.2133,
              -0.4145,  -6.2667,   1.0642],
            [  0.8705,  -0.6332,  -4.9033,   0.6147,   1.0382,   1.6200,  -2.9396,
              -4.1434,  -3.4220,  -0.5962],
            [  0.7824,   5.5635,   2.2399,  -7.7071,  -3.6089,   2.8992,  -1.2273,
              -0.9241,   5.6349,  -0.4283],
            [  0.4940,  -0.8368,   3.0945,  -3.6739,  -4.2559, -11.1774,  -5.1087,
               2.7217,   2.8028,   0.0172],
            [ -0.0679,  -0.5498,  -0.0187,   4.8455,   4.5391,  -5.6292,  -4.2947,
              -0.7640,  -3.6315,   0.4344],
            [ -0.6111,  -3.7369,  -1.2067,   1.4939,   3.0440,  -1.1823,   3.1709,
               3.5528,  -3.3460,  -0.0599]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.585 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
