
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.1796, 11.5144,  1.5504,  3.7538,  5.8942],
            [ 6.6362, 11.0203,  1.3427,  8.6048, 11.4622],
            [13.0628,  8.7705,  2.1106,  3.7380, 11.0563],
            [ 2.7426,  7.0878,  8.1755,  6.9930,  8.8554],
            [11.9930,  3.1647,  2.0277,  6.8656, 12.6913],
            [ 2.7426,  2.0720,  8.1632,  6.6469,  8.8554],
            [13.0628,  3.2527, 14.5317,  1.2981, 11.0563],
            [ 6.6362,  8.2656,  3.0855,  9.4267, 11.4622]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.5979e+00,  2.3136e-01, -7.1089e-01, -1.0938e+00,  1.5416e+00,
             -1.2403e+00,  3.5466e-01,  5.6060e-01],
            [-9.7760e-01,  1.1355e-01,  8.1462e-05, -1.1360e+00, -3.3384e-01,
              4.2468e-01,  1.1665e+00, -6.9848e-01],
            [-5.8307e-01, -2.1368e+00,  9.4151e-01, -7.8170e-01,  3.4752e-02,
             -1.4281e+00, -1.7575e+00, -1.3669e+00],
            [ 9.2826e-02,  1.1103e+00,  4.8260e-01,  1.6371e+00,  3.7152e-01,
             -2.0969e-01, -1.8618e+00,  4.6740e-01],
            [-2.9340e-01,  2.1600e-01,  8.5247e-01,  2.0749e-01, -7.8598e-02,
              1.3718e+00, -1.4233e+00,  1.6970e-01],
            [-4.1501e-01,  8.3483e-01,  5.6586e-01,  8.7423e-01,  7.8003e-01,
             -3.6054e-02, -4.6984e-01, -9.3508e-01],
            [-1.8438e+00,  1.1502e+00,  3.2085e-01,  4.1095e-01, -9.6396e-01,
             -1.5925e+00, -8.3000e-02, -1.7035e-01],
            [ 5.8481e-02,  8.2737e-01, -1.1047e+00,  2.1706e+00, -5.8020e-01,
              6.6264e-01, -2.1797e-01,  7.4240e-01]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1416,  1.4519, -0.2009],
            [ 1.1559,  0.7255,  0.2292],
            [ 1.3259, -0.4405,  1.6607]], requires_grad=True), Parameter containing:
    tensor([[0.2770]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0346,  5.9806, -1.6418,  0.9567, -8.3902,  1.7540, -0.5897, -2.0703],
            [ 5.6199,  1.7355, -0.1508,  0.8686, -1.7516,  0.4766, -3.8706, -0.0847],
            [ 0.3266, -1.1376,  0.2455, -1.0129, -3.3769, -2.2814,  0.2789,  1.9274],
            [-4.3536, -0.9776, -4.0944,  1.1619, -3.2693,  1.6941, -1.0411, -3.2314],
            [-0.6524, -0.9630, -2.6744,  0.1639, -2.7059,  0.8665,  0.8258,  0.5081],
            [-3.1854, -2.3648, -1.9014,  2.1878, -1.3606,  3.1851,  0.6577, -0.2515],
            [ 0.5642, -0.2313, -2.0148,  0.8064, -1.3426,  2.2621, -2.2158,  6.7177],
            [ 2.6699,  0.6006,  1.6698,  5.3443, -3.9769,  1.4439, -0.4420,  6.8472]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1056, -1.1455, -0.5785, -0.7697,  0.7729,  0.7303, -2.5732,  2.3720,
              1.8002, -0.2838],
            [-0.9345, -1.8754, -1.7711,  2.0753, -0.5542, -3.2826,  1.0491,  2.2986,
              0.8055,  0.3884],
            [-1.5905, -1.5366, -1.5962,  0.6968, -2.5384, -0.7954,  4.5042, -2.6537,
              0.7064,  2.3608],
            [-0.5417,  1.2092,  2.9553, -5.1944,  3.6271, -1.2876, -0.6178, -0.8179,
              1.6950, -0.8609],
            [ 1.8733,  3.0409,  1.1411, -2.1916,  0.4246,  0.5022,  4.2303,  4.3492,
             -1.5447, -0.2780],
            [ 2.9407,  3.2863,  0.5443,  5.9236, -4.3480,  7.6654, -0.4960,  2.4988,
             -3.2626,  1.9647],
            [ 1.1624, -1.9824,  2.3261, -0.8669,  1.6367,  1.1156,  0.8604, -0.9070,
              2.1645, -1.9841],
            [-1.7686, -2.7301, -2.1735, -0.7597,  1.9839, -2.9174,  0.4770, -3.4837,
              1.3056, -2.8916],
            [-3.6312, -1.3540, -6.9050,  0.6576, -4.2891, -2.3066, -1.8079, -1.3188,
              0.4455,  0.0231],
            [-0.9166, -1.9837,  0.5440, -2.9092,  0.7823,  0.3408, -0.9671,  1.2370,
             -1.1643,  1.4323]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.574 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
