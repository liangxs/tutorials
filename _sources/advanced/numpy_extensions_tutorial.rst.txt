
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.8635,  3.1802, 13.8052, 10.8436, 14.1939],
            [11.1799,  3.7353,  9.2353,  2.3304,  6.8134],
            [ 0.8343,  5.6070,  3.5271, 10.2674, 13.9055],
            [ 8.1516,  6.7763,  5.6890, 14.5031, 10.8234],
            [ 1.2398, 15.3692,  7.4821,  7.6051,  3.5389],
            [ 8.1516,  7.6617,  8.9083, 16.4050, 10.8234],
            [ 0.8343,  6.6583,  9.8095,  1.7785, 13.9055],
            [11.1799,  0.4863,  6.8752,  4.3303,  6.8134]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8204, -0.2501, -0.6291,  0.6735, -0.1972,  1.7229, -1.1075, -0.9527],
            [-0.4159,  0.9881,  2.4655, -1.4717,  0.4670,  0.0123,  1.3659, -1.1931],
            [-0.5702, -1.7620,  0.3020, -1.3368,  1.2226, -0.5447,  0.7443,  0.4870],
            [-1.0730, -0.3610,  0.9821,  0.0164, -2.2429, -0.7968, -1.5699,  1.1981],
            [-2.3015,  0.6320, -0.4132,  0.3348,  0.8646, -0.7993,  1.4698,  0.1894],
            [ 0.2788, -1.6072,  2.1360, -0.7064, -1.0361,  0.6585, -0.4326, -0.2551],
            [-0.9228, -0.2384,  2.1095, -0.0321,  1.0598,  0.4233,  0.6182, -0.8046],
            [ 0.9341,  1.0964,  1.5129, -1.1580,  0.5221, -1.1937,  1.5650,  1.3658]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5710,  0.4369,  1.9186],
            [ 0.5334, -2.0419,  1.0566],
            [ 0.2422, -0.9997, -0.9777]], requires_grad=True), Parameter containing:
    tensor([[0.4960]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9280, -0.2562, -0.3995,  1.6491,  0.9196,  5.9151, -7.0383, -3.1149],
            [ 2.5437,  0.9466, -1.9448,  1.8113,  2.6748,  4.4801,  2.1482,  2.2933],
            [-3.4093,  4.1166,  3.7825, -0.5947,  1.3835, -1.3548,  3.8078, -1.4614],
            [-8.9517,  1.0393, -0.9486, -1.4981,  0.9120, -0.6497,  5.5478, -1.9733],
            [ 0.7887, -4.7553, -0.2647,  0.3912, -1.0098, -1.1641,  2.9630, -2.6610],
            [ 6.3433,  2.3638, -0.2996,  3.8157, -3.0592, -8.4227,  2.9578, -5.9385],
            [ 3.2172,  3.6609, -6.3538,  2.5542,  6.6695, -5.6522,  5.5488,  2.6857],
            [-1.6867,  1.0558, -4.0582, -3.3626,  4.7503,  2.8700, -0.2578,  4.1291]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.9473, -1.2714, -2.1148,  1.1799, -2.3308,  0.2317,  1.3279,  2.0666,
             -0.4490, -1.3432],
            [-0.3117,  3.1629, -5.9094,  4.3778, -1.2529, -1.3043, -2.6675,  2.9797,
              0.9069, -0.4807],
            [-1.3340,  4.6367,  0.1340,  0.5739, -2.9637,  2.3746, -3.9465, -1.4441,
             -1.1911,  0.2120],
            [-0.1778, -0.1714,  1.4355,  1.2276,  2.5472,  2.5822,  0.7027, -4.4914,
              2.6876,  1.9111],
            [ 0.6926, -1.7086, -1.2262, -1.6202,  1.4140,  5.5816,  5.3160, -0.1911,
             -1.0470,  0.0529],
            [ 0.3073,  0.5213, -0.9235, -4.4900, -7.4769,  0.9652,  2.3385,  3.5465,
             -0.1095, -2.5557],
            [-0.8440,  0.7725,  4.5177,  2.4170, -5.1518, -2.4396, -3.0572, -0.4524,
             -1.2275, -2.2512],
            [-0.0808, -0.0774,  1.7686,  2.1671, -0.5553,  0.4457, -4.3957, -2.1817,
              2.0787, -1.2346],
            [ 0.3926, -1.5225, -0.6693,  0.0697, -1.0392,  1.8987,  2.2053, -0.8606,
              2.9813,  1.4545],
            [ 0.1075, -0.5287, -0.2275,  0.9583,  0.2751,  0.4792,  2.2215,  0.9514,
             -0.3366, -0.0303]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.597 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
