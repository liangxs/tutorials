
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.5209,  9.6510,  5.2089,  3.9659,  4.8002],
            [11.2761, 15.5885,  3.9898,  7.5681,  3.5073],
            [ 5.3793,  1.8812,  3.2086,  8.8715,  8.9206],
            [ 9.4065,  1.1935, 13.0633,  4.3956,  3.4036],
            [ 3.7747,  3.1150,  0.2865, 15.9561,  6.2381],
            [ 9.4065,  6.8896,  6.9580,  7.2706,  3.4036],
            [ 5.3793, 16.5899,  3.8397,  8.4923,  8.9206],
            [11.2761,  7.3578,  4.2121,  4.6499,  3.5073]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9178, -1.1656, -1.0798,  0.3702, -0.9606,  1.0531,  0.4979, -0.8107],
            [-0.1397, -0.0036,  0.3241, -1.1148,  0.8958, -0.2432, -0.7305,  0.9841],
            [ 0.9419, -0.9209, -0.2700,  0.8415, -0.7458, -1.3192, -0.7288, -1.9302],
            [ 0.4024,  2.1355, -1.2047,  0.3274,  0.7805,  0.8333,  0.9249, -0.3976],
            [ 2.1072, -0.8935, -0.1475,  0.2056, -0.2215,  0.7323,  0.5593,  1.4384],
            [ 0.6707, -0.7078, -0.7498, -2.1649, -0.5088, -0.0047,  0.8537,  1.9813],
            [ 1.8272, -0.3172,  0.5923, -2.0068, -0.3190,  0.4097, -0.1995, -0.2702],
            [-1.6766, -1.2526, -0.5812,  0.9758,  0.7619, -0.7861, -0.3187, -0.1391]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1135, -0.2777,  0.1695],
            [-1.4370,  0.8625, -0.2100],
            [-0.7286,  1.4478, -0.2552]], requires_grad=True), Parameter containing:
    tensor([[-0.3811]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1417, -0.9056,  0.3359, -3.3541,  1.0704,  0.0115, -0.4636,  1.2976],
            [-2.2798,  3.8850, -4.4056, -0.4993,  3.5864, -3.4278, -1.5679, -2.8935],
            [ 0.2510,  0.6162, -2.0481,  1.2432,  0.9626, -1.8101,  1.2159, -2.5880],
            [ 2.8523, -4.3936,  5.3987, -3.7983, -1.1007,  1.0255, -1.2347, -1.0109],
            [-0.9500, -1.9261,  3.5746, -7.1310,  4.1027, -1.7184, -1.7238,  1.8131],
            [-3.0749,  1.4274,  1.4428, -3.5303,  1.9904,  0.6783, -1.4263,  2.2276],
            [-0.4742, -1.0240,  2.9591, -3.4208, -1.2695,  3.0812, -3.9746,  0.1391],
            [ 1.4232, -1.0368,  1.7096, -1.3862,  0.8304,  1.0414, -4.5303,  1.0889]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.0505e-04, -1.1372e-01,  3.6405e-01, -3.3054e-01, -5.9197e-02,
              8.6945e-02,  2.1495e-01, -2.0985e-02, -2.5233e-01,  1.0195e-01],
            [ 5.2770e-02,  1.3050e+00, -1.7472e+00, -4.2025e-02,  1.5031e+00,
              9.5852e-01, -2.4660e-01, -8.6787e-01,  4.6381e-01, -3.3691e-02],
            [-6.0404e-01,  1.2320e+00, -3.0783e+00,  2.3450e+00, -1.2298e+00,
              2.2233e-01, -6.3400e-01, -2.2092e+00,  1.4508e+00, -1.5585e-01],
            [-6.4648e-01,  1.1671e+00, -2.1286e+00,  2.6565e+00, -2.5529e+00,
              4.0912e+00, -2.1580e+00, -6.3916e-01,  1.2184e+00, -2.2541e-01],
            [-7.4667e-01, -1.0509e+00, -3.1399e-01, -3.2127e-01, -2.8305e-01,
              2.0455e+00, -4.5119e+00,  1.5722e+00,  8.6394e-01, -2.7582e-01],
            [-1.6540e+00,  2.1789e+00, -1.8336e+00,  1.0229e+00, -1.4284e+00,
              2.4912e+00, -1.6505e+00,  1.1263e+00,  1.2363e-01,  3.0296e-02],
            [ 3.7147e-01,  6.1983e-01, -1.3155e+00, -2.2658e-01,  4.2607e-02,
              2.2016e-01, -1.0570e-01, -5.1540e-01, -2.3619e-01,  7.9643e-02],
            [ 1.2586e-02,  1.8928e+00, -3.4555e+00,  3.5138e+00, -1.0525e+00,
              1.7014e-01,  1.2925e+00, -7.5008e-01,  8.1407e-01, -1.5320e-01],
            [-4.5693e-01,  1.4622e+00, -2.0478e+00, -9.3812e-01,  2.3248e-01,
              1.6895e+00, -1.9599e+00, -3.1534e-01,  1.0018e+00, -2.0102e-01],
            [-1.0501e-01, -7.9316e-02,  1.3379e+00, -3.4192e+00,  3.7430e+00,
              1.9842e-01, -1.9126e+00,  4.6214e-01,  3.6562e-01, -7.6047e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.577 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
