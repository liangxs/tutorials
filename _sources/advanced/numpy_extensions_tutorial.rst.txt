
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[10.7362, 16.8225,  2.6261,  6.1118, 11.9359],
            [ 6.6172,  6.3494, 11.8117,  4.8254, 13.5317],
            [15.4782,  8.1196,  3.8196,  3.8737, 12.1448],
            [ 5.5919,  4.5541, 12.0662,  2.9872,  3.7541],
            [15.2794,  2.8062,  6.3335,  4.9020,  5.4392],
            [ 5.5919,  7.6768,  2.3909,  9.3255,  3.7541],
            [15.4782,  7.0447,  5.9802,  3.0522, 12.1448],
            [ 6.6172,  5.9532,  8.0116,  3.0770, 13.5317]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3257,  0.4461, -0.3945, -0.6510,  0.3898, -0.0442, -0.7592, -1.1905],
            [ 0.8924,  0.0220,  0.7549, -1.9886,  1.8793, -2.3618, -0.8587, -1.5285],
            [-0.2637, -0.2676,  0.7894, -0.5332, -0.0684, -1.3590,  0.2273, -0.6656],
            [ 0.5122,  1.4654,  1.6431,  1.6206,  0.2906, -0.1074, -0.0500, -0.3541],
            [-0.7135,  0.4193,  0.0430,  1.7679, -0.3014, -2.0804, -2.0932,  0.7299],
            [-0.6311, -0.7497,  0.8059, -1.3793, -1.4461,  0.2906,  0.3388,  0.1422],
            [-0.4183, -0.4194, -1.0504, -2.0350, -0.7081, -1.6489, -0.8840, -0.5965],
            [ 0.2621,  0.8585,  1.5525,  0.2870,  0.4987,  0.4009, -0.9651,  0.1743]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1690,  1.3066, -0.3143],
            [-1.2184, -0.2698,  0.3224],
            [-0.3016, -0.3019,  1.3003]], requires_grad=True), Parameter containing:
    tensor([[1.2244]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3862,  4.8614,  3.5901, -1.0633,  2.0629,  1.6188,  1.2569,  6.9749],
            [-4.5899,  3.4095,  4.1623,  0.9892,  3.5208,  0.8766, -1.2732,  0.0832],
            [ 6.8060,  2.5435, -0.9154,  5.4429,  4.0000, -0.4316, -3.5669, -3.2371],
            [ 2.0262,  2.2147, -3.3359, -3.4640,  1.0500,  5.3165,  1.8485,  2.4612],
            [-1.2892,  5.1405,  7.6847,  1.3843, -1.2071,  2.5445,  3.3270,  1.6599],
            [ 0.4980, -2.6075,  3.4511,  2.5662,  1.8549,  0.8199,  6.5750, -0.4416],
            [ 0.8214,  1.7074,  2.0105,  2.5839, -2.5854, -1.4515,  0.8860,  3.0088],
            [ 0.3898, -0.2899, -0.4095, -1.4206,  0.0789,  1.8195,  1.0824, -0.3820]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1166,  0.5880,  0.3041,  0.9704, -3.0052, -0.7469,  0.2547, -1.1980,
              1.2980, -0.2144],
            [-1.4677,  0.0227,  0.0880,  1.8345,  5.4616,  1.6669, -0.9390, -1.6082,
             -1.4742,  0.4662],
            [ 1.2609,  2.6299,  0.4725, -2.0183, -0.5474, -3.1992, -3.0393,  1.1428,
             -2.4286,  0.8346],
            [ 0.0698,  0.0648,  2.0711,  2.9505,  0.0370,  0.0684,  4.3100,  1.2279,
              0.4350, -1.4322],
            [-1.9146, -1.2292, -0.6622,  1.4817,  3.2662,  0.7877, -4.3843, -5.6556,
             -1.1815, -0.3972],
            [ 0.9816,  0.0396, -1.8758, -2.5434,  3.8298,  1.7436,  0.7789,  2.2926,
              0.3051,  0.3455],
            [-0.9235,  1.4047,  3.1214, -1.0483, -0.2082,  7.5410,  0.6589, -7.0982,
             -3.2128, -0.3241],
            [ 0.7653,  0.5573,  1.9434,  0.5142, -4.0166, -1.6205,  3.8431,  3.4423,
              1.5263,  0.3762],
            [-1.1884, -0.7123, -1.1193,  0.6275,  0.7249, -0.5934,  1.4306,  1.0810,
             -3.4346, -0.5672],
            [-0.2888, -0.3464,  0.9122, -0.0090,  1.2389,  0.0642, -0.1699, -1.1959,
              0.1364,  2.2879]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.574 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
