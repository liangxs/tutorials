
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 2.5198,  7.0772,  4.4809, 11.8635,  1.9475],
            [ 0.9520, 15.2890,  8.9632, 11.3155,  7.5041],
            [ 5.6116,  5.9715,  5.2298,  6.3109,  7.7367],
            [ 8.1340,  8.9873,  2.8423, 14.6246, 11.6559],
            [ 3.4385,  0.7360,  6.4071,  8.3712,  5.1708],
            [ 8.1340,  9.6916, 11.4884,  9.3158, 11.6559],
            [ 5.6116,  1.3512, 13.5815,  4.8505,  7.7367],
            [ 0.9520,  6.9108,  9.3545,  3.8770,  7.5041]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9640, -1.1689, -0.0675,  0.0290, -1.7251, -0.4860,  0.8374,  0.1728],
            [ 1.5030, -0.4645,  2.1118, -1.3740,  0.9649, -0.1053, -1.4245, -0.2871],
            [-1.1150,  2.4542, -1.0217, -0.0194, -0.9260,  0.2528,  0.3458, -0.7201],
            [-0.4471, -0.1268,  0.0362, -0.7462,  0.4605,  0.2265, -0.6751,  2.2025],
            [ 0.3167,  0.2945, -1.2272, -0.3329,  1.9858, -1.1440, -0.7221,  1.2775],
            [-0.6688, -1.2508, -2.4199, -1.6903,  0.9390,  1.0756,  0.7044,  0.2048],
            [-1.3454, -0.1996,  0.6540, -1.2974,  1.4260,  0.2644,  1.2527, -0.0607],
            [-0.3646,  1.4086,  0.0257,  0.6113,  0.4875, -0.0098,  0.7764, -1.2243]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.8562,  1.2708,  1.5590],
            [ 1.0966,  0.8258, -1.1545],
            [ 0.1053,  0.0840,  0.2227]], requires_grad=True), Parameter containing:
    tensor([[0.6847]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3260, -1.9557,  3.8765,  6.1497, -0.1809,  0.8571,  3.5522,  2.1927],
            [ 0.4459, -0.0600,  1.2286,  3.9694,  1.7970,  1.8982,  0.1896, -3.1110],
            [ 0.6322, -1.9544,  0.4537,  2.0191,  1.5721, -0.9963, -6.5649, -1.5120],
            [-0.5069, -0.1982, -0.6576, -6.6110, -1.0659, -0.4832, -0.2893,  0.0757],
            [ 1.9815,  0.4977, -1.9862,  2.9068,  1.2263, -0.0141, -2.8756,  0.2536],
            [-0.4305,  1.3119,  1.5358, -0.8990, -2.9729,  1.3235,  2.1205, -0.8721],
            [ 0.2120, -0.7490, -2.1945, -0.6107,  0.9440,  3.6474,  6.3419,  1.2019],
            [-0.1990, -4.1751, -0.1202,  3.4160,  7.2925,  4.9993,  0.7674, -0.2914]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.4341e-01, -1.4109e-01,  3.0375e-01, -3.1659e-01,  1.3590e+00,
              6.8739e-01,  2.4377e+00,  1.5740e+00,  8.1714e-01, -1.9025e+00],
            [ 9.3580e-01,  6.2780e-01,  1.8951e+00,  3.7779e+00,  7.9551e-01,
              1.6991e+00,  1.5689e+00,  1.3330e+00, -2.3641e+00,  1.2728e+00],
            [ 7.4219e-01,  1.4712e-01, -1.2080e+00, -1.0021e+00, -9.4034e-01,
              1.0479e+00,  3.3322e+00, -1.0928e+00,  1.4332e-01, -7.2262e-01],
            [ 7.2938e-02, -9.9377e-01, -1.2459e+00,  2.0511e+00,  2.5478e+00,
             -2.5025e+00, -1.7862e+00, -2.0958e+00, -1.4716e+00, -5.6824e-01],
            [-1.7012e+00, -1.9545e+00, -2.2313e+00, -1.3738e+00, -3.8806e+00,
             -3.6748e+00, -2.7936e+00, -9.9314e-02, -2.8195e+00, -1.1219e+00],
            [-2.2136e+00, -3.1513e+00, -1.5928e-01, -5.7500e+00, -2.1002e+00,
             -3.2213e+00, -1.6759e+00, -3.1134e+00, -8.9257e-02, -7.5041e-02],
            [ 3.0399e-01, -2.7496e+00, -1.4167e+00,  1.3067e+00, -5.3953e+00,
             -1.1216e+00, -1.6429e+00,  4.0198e-01, -3.6862e+00,  4.6382e-02],
            [ 8.3568e-01, -9.9455e-01, -3.2115e+00,  3.1238e-02, -3.5054e+00,
             -5.5553e+00,  5.6756e-01, -1.1481e+00,  3.8341e+00,  3.1611e+00],
            [ 7.1011e-02, -3.2467e-01, -7.6751e-01, -1.0272e+00, -1.1445e+00,
             -4.2686e-01,  5.0875e-01,  3.1129e+00,  7.9523e-01, -2.2210e+00],
            [-1.1210e-03, -2.6929e-02, -8.1928e-02, -1.7046e-01, -2.7485e-01,
             -2.7968e-01, -2.0391e-01,  1.0732e-01,  2.5114e-01,  4.1141e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.579 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
