
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 1.1590,  3.1782,  3.3413,  8.1921,  7.8535],
            [ 6.6105,  8.2064,  3.8873,  7.0311,  3.3204],
            [ 8.8953,  4.6271,  7.2404,  6.8143,  8.4044],
            [ 8.1160,  5.9531, 10.5911, 14.0624, 10.4959],
            [13.0422,  4.3664,  8.2413,  6.2668,  3.3891],
            [ 8.1160,  5.2145,  9.1072, 10.2958, 10.4959],
            [ 8.8953,  7.8931,  2.6646,  6.4069,  8.4044],
            [ 6.6105,  7.3943, 16.0785,  4.3032,  3.3204]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5836, -1.0241,  0.0517,  1.3471, -1.3130,  0.1371,  0.2169, -0.3343],
            [ 0.9296,  0.0960, -0.4727, -1.0730,  2.4227, -0.5859,  0.1891,  0.8523],
            [ 0.5539, -0.0279, -0.6972, -0.9480, -0.8143, -0.9027, -0.6785, -0.7013],
            [ 0.8498,  1.6239,  0.1382, -0.0880, -0.3678, -0.4268, -0.0709, -1.4251],
            [ 0.4660,  0.6143, -1.4757, -0.2824,  0.2761, -0.4152,  0.7865,  0.8854],
            [-0.0428, -0.8391,  0.2528,  0.5797, -2.2489,  0.6677,  0.2661, -0.1995],
            [-0.1011, -1.8510,  2.1313, -0.2338, -1.2721, -0.8995,  1.1257, -1.1451],
            [ 0.3849,  0.5581, -0.7623,  2.0749,  2.7134,  0.1175,  0.4850,  0.5015]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7391,  0.1112,  1.2082],
            [ 0.6223, -0.6255,  1.3817],
            [-0.5151,  0.3860,  0.8137]], requires_grad=True), Parameter containing:
    tensor([[-1.1362]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.2276, -1.7914,  1.2386, -0.6928,  0.7681, -1.6483, -0.4709, -5.6992],
            [-0.6821, -1.3838,  2.4267,  0.5499, -1.9061,  0.0667, -3.6874, -5.6630],
            [-5.3708, -4.9724,  0.9811, -3.9317,  0.7520, -4.0157, -1.4847, -4.0671],
            [-3.0881, -3.3158,  1.3865, -1.8198, -4.7884,  0.1131,  2.7314, -7.1350],
            [-2.4774, -1.3040,  0.4393, -3.7288, -0.8874, -2.8401,  2.1659, -1.9256],
            [-1.0606,  0.4132,  0.3265, -0.8491, -3.8255,  2.2068, -2.5536, -1.9962],
            [-2.6610,  0.9993, -3.5952,  0.7545, -2.7935, -1.5991,  1.2762,  2.0658],
            [ 1.2808,  3.0714, -1.8092, -1.3257,  3.7844, -0.7931, -0.1007,  0.0826]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.7274, -0.8629, -1.4804,  1.4787,  1.2545,  0.3408, -1.5995, -0.7662,
              0.7186, -0.6040],
            [-0.3322,  0.9857, -3.5598,  0.3824,  4.3845,  0.8497, -1.7039, -1.0886,
             -0.0173, -1.6657],
            [-0.9404,  0.7346,  2.4698,  0.9480, -0.1171,  0.8049, -4.0110,  0.1512,
             -1.7116, -0.6255],
            [ 0.5678, -1.7883,  1.8625, -2.2584,  3.4754, -2.7039, -1.2089,  0.2470,
             -3.8455,  2.4267],
            [-0.1758,  0.7070,  1.9178, -0.9013,  1.0187, -5.7141,  0.5989,  1.9521,
             -2.6556,  3.2746],
            [-1.5029, -1.0896,  3.5831,  1.0605,  1.9473, -1.3993, -0.6637, -0.1785,
             -0.6331,  1.6523],
            [ 2.5298, -0.8103, -4.6531,  6.6132,  1.8917, -1.6239, -1.2389, -0.2073,
             -1.5443,  0.0526],
            [-2.2108,  3.1138, -1.0189,  2.5210, -0.4325, -0.9260, -3.5495,  0.2366,
              0.6828, -0.3344],
            [ 1.2855, -3.0144, -0.2202, -1.8448,  3.3457, -1.7305,  0.3240, -1.3178,
              2.0457, -0.2760],
            [-0.1147,  1.0125, -0.6168, -0.6567, -0.5505, -1.3156, -0.5200,  1.2984,
              1.5153, -0.1425]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.574 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
