
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.5454,  8.4046,  2.7837,  6.7478,  0.1500],
            [14.1803,  6.7167,  7.6531,  3.1198,  4.0945],
            [12.2878,  5.5719,  4.9289,  6.6000, 10.8619],
            [ 5.6988,  2.9870, 11.1584, 12.3643,  6.2176],
            [11.8965, 11.9322,  1.7841,  9.6219,  5.1782],
            [ 5.6988,  3.7106,  2.6572,  6.0928,  6.2176],
            [12.2878,  4.7508, 10.7147, 12.4938, 10.8619],
            [14.1803, 10.0513, 11.8036,  2.2545,  4.0945]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7722,  0.1481, -0.2601,  0.3737, -0.7581, -2.1777, -0.3767, -1.0244],
            [ 0.8422, -1.7485, -1.1871, -0.1993, -0.1102, -1.5044,  0.1282, -1.0127],
            [ 0.0157,  1.2076, -0.1553, -0.6756,  1.5149, -0.0860, -0.0585,  0.5374],
            [ 1.2762,  0.3705, -1.1159, -0.7627, -0.7249,  1.7104,  0.0690,  0.5155],
            [ 1.4395,  0.5975, -0.1043,  0.8027, -0.0338, -1.1295,  1.3082,  0.4531],
            [ 0.2523,  1.5765, -1.1932, -1.6191, -0.1799, -0.9854,  0.4322,  0.3802],
            [ 1.5779,  1.1828,  0.5131,  1.0997,  0.6943,  0.1166,  0.5501,  0.1548],
            [-1.7863, -1.9306,  0.5466,  0.5614, -1.8089,  1.3033,  0.1173,  1.5663]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 6.4469e-01,  1.3523e-01,  5.5313e-01],
            [-3.7928e-01,  8.5438e-01, -2.5327e-01],
            [-2.9195e-04, -5.9404e-01,  3.6062e-01]], requires_grad=True), Parameter containing:
    tensor([[-2.0147]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.7388e-01, -3.6855e+00, -2.8660e+00, -3.6448e-01, -3.9507e+00,
             -2.2835e+00, -2.5671e+00, -3.4394e+00],
            [-5.5550e+00, -9.5982e-01, -1.8732e+00, -3.0365e+00, -1.1394e+00,
             -3.0291e+00, -2.0554e+00, -1.1564e+00],
            [-2.3221e+00, -5.5785e+00, -1.6193e+00, -3.8817e+00, -2.7112e+00,
             -2.0975e+00, -1.2906e+00, -1.6746e+00],
            [-1.2322e+00, -3.3451e+00, -5.3763e+00, -4.7725e+00, -2.8105e+00,
             -2.5711e+00, -2.3548e+00, -5.7723e-01],
            [-2.8623e+00, -9.0248e-01, -3.7724e+00, -1.9725e+00, -5.7304e+00,
             -4.5810e+00, -2.6068e+00, -3.7309e+00],
            [ 7.5253e-02, -2.6123e+00,  2.5270e-01, -4.7054e+00, -1.8730e+00,
             -3.4990e+00, -4.3056e+00, -9.9248e-01],
            [-2.7870e+00, -5.6136e-01, -1.4833e+00, -6.8061e-01, -5.5543e-01,
             -1.9744e+00, -1.0726e+00, -1.7265e+00],
            [-2.6692e+00, -2.8662e+00,  1.4007e-03, -2.3537e+00, -1.8164e+00,
             -6.0051e-01, -1.1106e+00, -9.4192e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 9.2714e-01,  1.3565e+00,  2.5005e+00,  9.8593e-01,  1.1055e+00,
             -4.7330e-01,  5.9718e-01, -3.0053e-01,  5.4450e-01, -2.4962e-01],
            [-8.1842e-01,  1.4289e+00, -2.4400e-02,  2.3573e+00, -8.1349e-01,
              7.3694e-01,  1.0508e-01,  1.9699e+00, -3.8516e-01,  3.2372e-01],
            [ 6.8498e-01, -1.0543e+00,  1.2446e+00, -8.7325e-01,  2.9431e-01,
              6.2588e-01,  2.2416e-01, -6.5593e-01,  7.1931e-01, -5.0045e-01],
            [-6.5385e-01,  8.1318e-01, -9.1118e-01,  3.3104e-02,  1.6280e-01,
             -1.9701e+00, -9.1227e-01, -5.2325e-01, -1.6410e+00,  6.0481e-01],
            [ 4.8383e-01, -1.7258e-01,  1.3253e+00,  9.2466e-01,  9.8805e-01,
              9.7612e-01, -1.4782e-01, -2.3182e+00,  9.2792e-01, -4.8509e-01],
            [-2.7815e-01,  4.0636e-01,  6.6279e-02,  1.5515e+00, -1.1281e+00,
              1.5536e+00,  2.6386e-01, -6.5089e-01, -1.0355e+00, -6.9268e-01],
            [-7.4350e-01, -5.8524e-01, -2.5910e+00, -3.6774e-01,  1.5667e-01,
             -6.3953e-01, -8.0276e-01,  2.6094e+00, -2.7199e+00,  1.1204e+00],
            [ 3.0243e-01, -1.2892e+00,  5.5991e-01, -2.4649e+00,  1.5919e+00,
              1.2985e+00,  2.0419e+00, -4.1523e+00,  2.5843e+00, -2.0415e+00],
            [ 1.0278e-01,  6.3156e-01, -4.7069e-01,  9.9423e-01, -1.8865e+00,
              1.7881e+00, -1.3192e-01,  1.4467e+00, -2.9928e+00,  9.7609e-01],
            [ 7.8832e-05,  1.6049e-01,  8.4693e-02,  3.7431e-01, -5.1207e-01,
             -1.1923e+00,  6.6096e-01,  3.5684e-01,  9.5004e-01, -6.7606e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.599 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
