
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: Python


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: Python


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: Python


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[11.5302, 10.6877,  9.1084,  4.7353,  7.7300],
            [ 3.5427,  4.7170,  0.5469,  4.4866, 17.6176],
            [ 5.1539,  0.5420,  6.5607,  8.4312,  9.4274],
            [ 3.0803,  1.3832,  2.8232,  4.2340,  6.3500],
            [ 5.4764, 12.4037,  6.8696,  1.6064,  2.7506],
            [ 3.0803, 13.3994,  7.4393, 11.8803,  6.3500],
            [ 5.1539,  0.5606, 14.5056,  7.8734,  9.4274],
            [ 3.5427,  4.4260,  6.2071,  5.8391, 17.6176]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8484,  0.7357, -1.8379,  0.4844,  0.3332,  2.0000, -0.6617,  0.3909],
            [-0.9025,  2.1396,  0.5022,  1.4062, -1.2849, -0.2341,  0.4012, -0.5055],
            [ 0.1318, -0.6680, -0.3068,  1.7266,  1.5392,  0.0293,  0.6903, -0.0783],
            [ 2.2568, -0.7729,  2.1364,  0.3839, -0.3582, -0.6694, -0.2410,  0.6907],
            [-0.4585, -0.0060,  0.8583,  0.1670,  0.9377, -1.2856,  0.3576, -1.8726],
            [-0.8744,  0.7355,  0.3956,  0.3152, -0.2036, -0.1781, -0.2044,  1.4338],
            [ 0.2839, -0.9621,  0.5230,  1.3064, -0.5287,  0.4286, -0.7444,  0.3619],
            [ 0.4205, -0.4457, -0.2785,  2.6599,  0.5034, -0.5859, -0.6371,  0.4986]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: Python


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: Python


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7948,  0.7894,  1.1099],
            [-0.4809,  1.1311,  0.1634],
            [-1.5752, -1.5021, -1.1554]], requires_grad=True), Parameter containing:
    tensor([[0.5221]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2957,  1.4830, -1.5902, -1.1842,  0.9589, -0.7748, -2.3979,  3.9368],
            [ 0.7324,  2.3803,  0.8620,  2.2570,  3.7000, -1.7605,  1.1859, -4.2330],
            [-0.9837, -3.8507, -0.9995, -3.4088, -1.6217, -0.0195,  2.8230, -1.4602],
            [-1.1152, -0.7721, -2.4338, -2.7252,  1.4753,  0.0435,  0.7786,  2.4890],
            [ 2.3834,  2.7722,  0.5875,  1.3997,  3.9126, -0.3516,  1.9943,  2.8699],
            [-1.3648, -0.2198,  2.1663, -1.4903,  0.0433, -0.4376,  7.9530,  5.5240],
            [ 0.1148, -1.4226,  2.0676,  1.7178,  1.2186, -3.3610,  0.7713, -2.7578],
            [ 1.0812, -1.2753,  3.4080,  1.3327, -0.0499, -3.1228,  0.3881,  2.0073]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.8319,  0.3939,  1.6390,  0.2662,  0.4365, -0.0243,  1.1567, -2.2811,
             -0.3930,  1.8853],
            [ 0.0390,  0.9068, -0.8159, -1.0890,  2.0096, -0.7109,  0.8241, -0.3655,
              1.1002, -1.0494],
            [-0.6142, -4.8542, -0.9980, -1.4044, -2.2676,  0.6880,  3.9764,  0.0848,
             -0.0773, -0.9105],
            [ 1.2210,  1.5114,  4.2699, -7.3118, -1.3915,  4.5277, -3.7161,  0.2126,
              3.1323,  0.5308],
            [ 1.2487, -0.7133,  1.4365, -0.1439,  1.3877, -3.8342, -5.4058,  0.1307,
             -3.6829, -1.6938],
            [-1.4107,  2.2272,  5.0501,  0.9192, -2.6582, -1.8030,  2.3827,  2.3630,
              0.1652,  1.5414],
            [-0.7689,  1.0855, -1.5292, -0.2491,  0.8960, -4.3246, -1.3090, -0.9551,
              0.6713,  0.8467],
            [-1.4214, -0.6809, -1.2251,  1.4190,  1.3011,  0.1718,  4.1258,  1.6624,
             -0.8204, -2.1802],
            [-0.2806, -0.5314,  0.1277,  2.7303,  4.1598,  1.2625,  0.0965, -0.9712,
             -2.1344, -0.7970],
            [ 0.9168,  1.1305,  0.2708, -1.7475, -3.3007, -3.6648, -2.7162,  1.1817,
              2.0409,  1.8068]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: Python


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.598 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: numpy_extensions_tutorial.zip <numpy_extensions_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
