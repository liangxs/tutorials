
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.8762,  0.9580, 16.8737,  4.3251, 12.9928],
            [ 3.9702,  0.3916,  1.2726,  7.8053, 10.6159],
            [ 5.8621,  7.7007, 10.4420, 12.1586,  9.9386],
            [ 8.5118, 10.8849,  2.5842,  5.3469,  3.5611],
            [ 5.0553,  4.8878,  6.4886,  3.2882,  6.4370],
            [ 8.5118,  9.4564,  5.3531,  4.6080,  3.5611],
            [ 5.8621,  5.6585,  4.9451,  5.7254,  9.9386],
            [ 3.9702, 11.3716,  4.7536,  0.9389, 10.6159]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4935,  0.1211,  0.3611, -0.7015,  0.3728,  1.6524,  0.9200, -0.6382],
            [-0.2569, -0.5001,  2.1790,  0.1631,  0.9742,  0.4459,  0.1989, -0.6944],
            [ 0.5590, -1.4167,  0.3007, -1.1090, -1.0395, -0.7199,  1.5576, -0.6925],
            [ 0.4835,  0.6934, -0.2081, -1.3806, -0.0857,  1.0613,  0.7838, -1.0509],
            [-0.6456, -0.2094, -0.7065, -0.7125, -0.8887,  0.8412, -1.2811,  0.4173],
            [ 0.1017,  1.8848,  0.3102, -0.9317,  0.1207, -0.7263,  0.0930,  0.6117],
            [-0.7399,  0.6853,  1.3423,  1.5543, -0.2797, -0.0699,  0.8171, -2.1241],
            [ 1.2324, -0.3343, -0.0305, -1.3939, -0.6544,  0.4009,  0.6605, -2.0617]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3463,  0.3372, -0.5646],
            [-0.6228, -0.2134, -0.1333],
            [ 0.7534, -1.7791, -0.4472]], requires_grad=True), Parameter containing:
    tensor([[-0.6931]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2320, -3.8272,  1.7585, -1.9946, -0.5254, -3.3761, -0.4260,  1.4657],
            [ 0.3165, -2.2948, -2.2254, -3.9453, -4.0462, -1.5762,  0.2022,  2.7394],
            [-4.7563,  1.6365, -2.6969,  3.6693, -3.5746, -2.1146,  3.7616, -2.7912],
            [ 0.9039, -4.6124, -2.1041, -1.6505, -1.1492,  0.3663,  2.4403, -2.4556],
            [ 1.5122, -2.7828, -5.7693, -1.7643,  4.3901,  2.1871, -4.6323, -1.1586],
            [-0.8694,  1.3890, -4.1756, -6.9495, -0.6236,  0.8650,  1.4884,  3.7767],
            [-0.1416, -3.4736, -1.7602, -2.5937, -1.2341, -0.0955,  1.9353, -2.2089],
            [ 0.7384,  1.9772, -2.9821, -1.2322,  1.0068, -1.2256, -0.9397, -0.7680]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1106, -1.3988,  0.3467, -0.5977, -2.1855, -0.7439, -1.5524,  0.5529,
             -0.6088,  0.3349],
            [-1.3909,  0.8527, -2.7109,  1.7305, -2.5741, -2.1415, -1.0938,  0.3743,
             -0.4220,  0.4861],
            [-1.8004,  1.2046, -4.4926, -0.8966,  1.3412, -7.2559,  0.7508, -4.6322,
              1.6586, -0.0203],
            [ 2.2642, -2.1944,  2.1322, -3.6375,  4.2497,  0.7704, -3.8192, -1.5575,
              0.4961,  0.0932],
            [ 1.6104,  1.2569, -0.4341, -0.0329, -5.6059,  5.2411, -6.6199,  2.6005,
             -1.9215,  0.4076],
            [-0.0206,  0.8890,  1.1600,  3.2417,  2.1019, -1.4999,  0.7475, -0.1921,
             -2.1476,  0.1337],
            [-0.7914, -0.0912,  1.5214, -3.6915,  1.7123, -0.1436, -3.3000, -3.8723,
              1.6175,  0.5729],
            [-1.9568,  2.6121, -1.1747,  3.1231, -3.5253,  2.1229,  1.0079, -1.9881,
             -1.5886,  1.1137],
            [-0.4376,  0.7282, -0.2013, -1.7707,  2.4211, -1.8398, -1.8956,  0.6897,
              0.2308,  0.2266],
            [ 0.8604, -3.2732,  1.6956,  2.1285,  1.6108, -0.4700, -0.8565, -2.0607,
              3.2513,  0.8450]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.581 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
