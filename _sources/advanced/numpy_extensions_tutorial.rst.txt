
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 0.5760,  0.6643,  4.4620,  2.5869,  2.8993],
            [11.6070,  7.0799,  9.0823,  0.2461,  7.0219],
            [ 4.5034,  7.4787,  7.5951,  6.8317, 10.7395],
            [19.0875,  4.5394, 13.9261, 12.5031, 14.6435],
            [ 0.6384,  8.9331,  3.9208,  3.9773,  8.4604],
            [19.0875,  6.3674, 15.1558,  3.5740, 14.6435],
            [ 4.5034,  6.9103,  9.3615,  4.5347, 10.7395],
            [11.6070,  2.1898,  7.9842,  5.3174,  7.0219]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 9.1943e-03, -1.2633e-01,  9.8756e-01,  2.6944e-03,  1.4350e+00,
              6.5446e-01, -2.5396e-01, -1.3462e+00],
            [ 1.5575e+00, -2.2128e+00, -1.6283e+00, -7.5280e-01,  7.7281e-01,
             -1.7355e+00, -2.7518e-01, -7.5240e-02],
            [-3.6187e-01,  5.2271e-01, -4.4558e-02,  1.5826e+00, -1.3084e+00,
              1.5101e-01, -2.5865e-01,  6.6399e-01],
            [-1.6384e+00, -8.9172e-01,  8.3314e-01, -2.2729e+00,  3.4630e-01,
             -1.9653e+00, -1.9863e-01, -5.3072e-01],
            [ 9.3579e-01,  3.9280e-01, -3.2783e-01,  6.9837e-01,  2.2483e-01,
             -9.9017e-01,  7.2375e-02,  1.8675e-01],
            [ 3.9129e-01,  8.3691e-01,  1.0899e+00, -1.6185e+00, -8.8495e-01,
              2.8692e+00,  1.3640e+00,  2.7989e-01],
            [-1.7290e+00, -1.2992e+00, -6.4150e-02,  4.4099e-01, -1.0738e-01,
             -5.2308e-01, -2.9565e-01,  6.8252e-01],
            [ 6.3847e-01,  1.0552e+00,  2.2298e-01,  2.0964e+00,  1.9611e-01,
              4.8467e-01,  3.7323e-02,  1.5777e+00]], requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5165,  1.6412,  1.6563],
            [ 0.5852, -1.8621, -0.6424],
            [-0.6822, -2.0791,  0.6211]], requires_grad=True), Parameter containing:
    tensor([[-0.2649]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6370,  4.8309, -1.3114, -6.8911, -3.6062,  1.2298, -4.1078, -1.6405],
            [ 3.0464, -2.2428, -0.9415, -7.0494, -3.1901,  1.3297, -2.5535,  3.0654],
            [ 0.0531, -1.4054,  7.5978,  2.2106,  4.4272,  0.3825, -0.4294, -5.2733],
            [-0.9352, -4.8477, -3.9237,  1.0310,  3.2869, -5.2669,  3.2122, -0.4125],
            [-3.6782, -2.2193, -5.5668, -1.4709, -1.9533,  1.6312, -0.4629, -5.8845],
            [-1.0784,  7.6965,  0.6250, -3.4083,  1.5223,  1.4874, -7.4620,  2.4674],
            [ 8.1551,  6.6965,  2.6488, -0.2197,  3.1149,  3.6162,  3.3249,  7.9053],
            [-5.1766, -6.5922,  1.5131, -4.2700, -1.1681,  1.2502,  0.3228, -0.1147]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.0738e-01, -3.1006e-01, -3.1993e-01,  1.0385e-02, -3.4694e-01,
             -1.7929e+00, -3.4189e+00, -7.3128e-01,  3.4158e+00,  4.0622e+00],
            [-3.1085e-01, -2.9281e-01, -4.8777e-01,  2.3294e+00,  2.8563e+00,
              4.3021e+00,  3.7612e+00,  5.7756e+00,  5.6182e-01,  1.6488e-01],
            [ 1.2010e-01,  1.7251e+00,  2.5920e+00,  2.9023e-01, -3.1658e+00,
             -4.2453e+00, -2.3877e+00, -4.7747e+00, -6.8726e+00,  2.3380e+00],
            [ 4.8806e-01,  3.6669e-02, -2.1948e+00, -5.2382e+00, -2.4439e-01,
              6.3526e+00,  2.9191e+00, -4.5173e+00, -7.5294e-01,  2.2900e+00],
            [-9.4173e-01, -3.3859e+00, -6.6722e-01, -3.5779e-01, -2.0462e+00,
             -3.0572e-01, -2.4952e+00, -1.0370e+00, -3.4268e+00,  3.2928e-01],
            [-8.5220e-01,  2.8803e+00, -1.3980e+00, -2.6423e+00, -4.5992e+00,
             -3.9528e+00,  5.3006e-01, -1.1842e+00, -4.8033e+00, -1.3576e+00],
            [ 6.0052e-01,  7.1643e-01, -1.1851e+00, -5.1959e-01, -7.7113e-01,
              6.6596e+00,  5.7608e+00, -2.2337e+00, -1.0776e+00, -6.5825e-02],
            [-3.1927e-01,  1.9890e+00,  2.3155e+00,  5.1025e+00,  1.1342e+01,
              4.8976e+00, -3.1694e-01,  3.0261e+00,  6.3314e+00, -8.1551e-02],
            [ 4.2023e-01,  1.1292e+00,  1.8589e+00,  6.4417e-01, -2.5718e+00,
             -2.9063e+00, -2.0432e+00,  1.1207e-01, -5.7787e-02, -4.8819e-01],
            [-8.5111e-03,  5.8392e-02, -1.0059e+00, -4.4806e+00, -6.5728e-01,
             -6.6414e-01, -2.2283e+00, -1.7524e+00,  3.4707e-01,  8.9170e-02]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.572 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
