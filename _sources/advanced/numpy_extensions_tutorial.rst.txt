
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 5.6937, 18.5978, 11.5653,  9.6922,  6.2855],
            [ 9.4345,  1.0191,  6.1984,  3.5085,  6.4458],
            [10.2137,  8.5214,  5.1434,  5.2321,  6.4086],
            [17.4266, 11.7134,  3.0401,  5.3249,  6.6937],
            [ 1.8442,  0.6385,  7.1976,  7.8326, 18.3226],
            [17.4266,  2.0969,  2.1908, 12.2742,  6.6937],
            [10.2137,  4.1496,  9.2654,  5.4476,  6.4086],
            [ 9.4345,  7.2443,  6.6623,  4.2640,  6.4458]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.9134,  0.0544, -0.5291, -1.1066,  1.3400, -0.2055,  1.1589,  0.6545],
            [ 0.1862,  1.4436,  0.7536,  0.8869, -1.2014,  1.5769, -0.0405,  0.5894],
            [ 0.8149,  1.0217,  0.2072, -0.7053,  1.3978, -0.4449,  3.1161,  0.7950],
            [-0.1573, -0.2826, -1.9862, -1.6974,  0.5113, -0.3716, -1.2098, -0.4919],
            [ 0.3467,  0.4214, -0.2625, -0.6954,  0.5224,  1.3075,  0.1470,  0.6508],
            [-0.8410,  1.3010, -1.7469, -0.5853,  0.9760,  2.1464,  0.6969, -0.1727],
            [-0.5825, -0.2407, -1.2597, -1.2168, -1.0212, -0.7994,  0.4112, -0.6154],
            [ 1.3595,  0.4976, -2.4277, -0.0342, -1.0757,  1.0611,  1.0134,  1.2473]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3433,  0.2808, -1.8556],
            [-0.4821, -1.7833,  0.9034],
            [-1.1405,  2.0985,  0.1909]], requires_grad=True), Parameter containing:
    tensor([[1.0796]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.7809, -3.0314,  4.5519,  0.2412,  8.9378,  2.5130,  3.0381, -5.0171],
            [-1.1639,  1.4235,  0.9209,  3.1446, -2.7314, -2.8490, -1.7161,  6.3360],
            [-0.4633,  1.8457, -1.4021,  2.2627, -0.7375, -0.9494,  4.8728,  0.1039],
            [-1.5239,  0.0707,  5.9671, -0.4862, -0.0279,  0.5036,  1.0914,  2.9595],
            [ 1.2003,  2.9892, -2.3742, -5.5616,  1.7406, -0.8737,  2.1946, -1.7445],
            [ 0.3415,  2.6649, -0.3199,  1.3277, -0.3233,  0.5307, -0.6818,  2.0987],
            [ 5.9367, -0.4900,  5.5332, -2.8191,  4.8158,  2.0065, -0.8876, -2.7745],
            [-0.3735, -1.7009,  3.0120,  0.3500,  0.6513, -4.7921,  1.9678,  4.1011]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1068,  0.3537, -0.7433,  0.9770,  0.7894, -2.7635,  0.8042, -1.4755,
             -2.1604,  0.6895],
            [-0.2939, -0.4767,  1.3439, -3.0787, -1.9071,  2.8895, -2.6134,  0.8234,
              1.0197, -1.3990],
            [-0.2506, -0.5686, -1.1120, -2.6253,  3.8443,  0.1278,  3.9454,  1.1735,
             -2.5469,  2.4158],
            [-0.2489,  0.5880, -1.7535,  1.7173,  3.4522, -1.4847, -6.2193, -1.5294,
              0.6753, -4.1496],
            [ 0.4423, -4.2315,  2.2256,  3.5129, -6.0919, -2.3528, -4.7486, -2.0873,
             -3.1146, -2.2973],
            [-0.5823, -0.1739,  4.7352, -3.5602,  4.1508, -0.6438,  1.7756,  0.6686,
              4.1559, -0.0146],
            [-0.5183,  5.9747, -2.3048,  7.1825,  0.8191,  2.3239,  1.8948,  0.8721,
             -3.5471,  2.3928],
            [ 1.1390, -2.7222,  5.2046, -3.5109, -2.0793,  1.4830,  1.3779, -7.3394,
              8.6252,  0.6288],
            [-1.0431,  2.9506, -4.4355, -2.1220,  1.7291,  0.0194, -0.4615,  8.1680,
             -1.6952, -0.5252],
            [-0.5706,  0.0217,  2.4573, -0.4034,  0.1082, -0.3836,  0.4035, -3.9343,
             -1.3819, -0.0901]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.570 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
