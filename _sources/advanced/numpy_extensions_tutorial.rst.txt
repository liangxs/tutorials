
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.7640,  1.8322,  8.5624,  4.5167, 17.6685],
            [14.4728,  8.0043, 14.0416,  7.7020, 16.6467],
            [ 7.0239, 11.9905,  7.6044,  5.8048,  8.8020],
            [ 7.0702,  5.2671,  9.2985,  2.8526,  3.0659],
            [ 6.6329,  3.7792, 17.2739,  5.7226, 14.2292],
            [ 7.0702,  8.0320, 11.1164, 16.0854,  3.0659],
            [ 7.0239,  6.3396,  0.6679,  3.3056,  8.8020],
            [14.4728,  9.0688,  7.9950,  7.0693, 16.6467]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.5094, -0.3590, -1.3396, -0.8722, -0.3159,  0.3529,  0.2781, -0.3079],
            [-0.8105, -2.1323,  0.8048, -0.6670,  0.3082, -0.6879,  0.2371,  2.2690],
            [ 0.2658,  0.8027, -0.4091,  1.4885,  0.4609,  1.4697,  0.6215,  0.2054],
            [-1.4804,  1.0097,  0.7073, -0.3350, -1.8897,  0.0040,  1.7960, -0.0420],
            [-0.6064,  3.4347, -0.9252,  0.2044,  0.0120,  2.7434, -0.7487,  0.8499],
            [-1.0068,  1.0777, -1.2668,  1.9034,  0.0804,  1.0579,  0.9514,  0.3296],
            [-1.0431,  2.3433,  1.2678,  0.0074, -0.3231, -0.9096, -0.8108, -0.6299],
            [ 1.0474, -2.2375,  0.9877,  0.5180, -0.5995, -1.4548, -1.1936, -0.2202]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.1411, -0.9052,  0.3698],
            [ 2.4147, -0.9094,  0.3469],
            [-1.2871, -0.8527, -0.4408]], requires_grad=True), Parameter containing:
    tensor([[0.0101]], requires_grad=True)]
    Output from the convolution:  tensor([[ 7.4073, -0.1650,  1.0794,  1.9690, -2.4611, -5.2930, -1.2165,  6.5165],
            [ 5.7015, -3.7899, -3.2625,  3.1748, -5.5432, -0.6199,  1.7591, -1.8422],
            [-0.3279,  1.2869,  3.8347,  6.1089,  2.7718, -1.8803,  5.2883, -6.9891],
            [ 1.3773, -2.7596, -2.0950, -3.8531, -4.4760, -0.2774,  1.2124, -2.5953],
            [ 5.2097, -1.7184,  3.6597,  1.7602, -2.9260,  5.9539, -3.5142,  2.9349],
            [ 2.4772, -2.1673,  0.8287, -3.1451, -6.3628,  1.3652, -6.7543,  1.5573],
            [ 0.4973, -1.9899, -2.9511,  1.3974,  4.3158, -2.0146,  1.6592,  8.0059],
            [-2.3098, -1.2225, -7.9892, -2.1943,  4.3670, -1.7550, -1.2222,  0.4840]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-5.7702e-01,  4.7048e-01, -1.1265e+00,  1.0019e+00,  3.2909e-01,
             -1.4137e+00,  1.5977e+00, -5.8717e-01,  4.8459e-02,  6.8196e-02],
            [-1.1455e+00,  8.7434e-02, -1.0550e+00,  1.1400e+00,  7.7104e-01,
             -1.2972e+00,  5.0292e-01,  1.4728e+00, -8.6610e-01,  2.6910e-01],
            [-1.0226e+00,  1.3138e+00, -1.5165e-01,  1.4748e+00, -4.9510e-01,
              1.2678e+00, -3.9631e+00,  2.9217e+00, -1.7681e+00,  2.7444e-01],
            [-4.0438e+00,  1.9876e+00, -6.1353e+00, -5.0779e+00,  5.2332e+00,
             -2.8696e+00, -8.9733e-01,  3.6198e+00, -1.7011e+00,  1.7125e-01],
            [ 2.6506e+00, -1.9262e-01,  3.7945e+00, -2.2754e+00,  8.1744e+00,
             -5.0445e+00, -2.1797e+00, -1.2540e+00,  1.1189e+00, -1.0280e+00],
            [ 2.3780e-01, -5.4242e-01, -1.9166e+00, -3.5056e+00,  3.1739e+00,
             -8.2856e+00,  5.2990e+00, -7.6461e+00,  2.3749e+00, -1.0433e+00],
            [-1.8976e+00, -3.2056e+00,  5.0535e+00, -1.9511e+00,  4.9016e+00,
             -1.0110e+00,  4.4962e+00,  5.4974e+00,  2.0088e+00,  1.5077e+00],
            [ 6.8083e+00, -3.3034e-01,  2.7401e+00, -1.9872e+00, -3.3496e+00,
             -4.6022e-03, -6.7922e-01, -2.9351e+00, -2.4899e-01, -6.6964e-01],
            [-2.1147e-01, -6.5902e+00, -1.9165e+00,  1.2307e+00,  2.4387e+00,
              3.2400e-01,  4.7287e+00, -1.8505e+00,  1.4006e+00, -2.2121e-01],
            [-1.0866e+00,  1.2549e+00,  1.8727e+00,  1.2217e+00,  3.1966e-01,
              1.2455e+00, -8.8220e-02,  8.2662e-01,  3.5579e-01,  3.4777e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.582 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
