
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 7.6572,  8.2748,  6.5154,  9.7717,  6.1829],
            [11.5105,  5.2421,  5.3197,  3.3954,  6.3445],
            [ 5.2713, 14.8882,  4.1146,  8.0370,  9.3170],
            [ 6.8131,  4.0348,  2.1369,  6.4059,  3.9384],
            [18.8652,  5.3046,  1.6396,  7.9990,  7.8474],
            [ 6.8131,  3.4633,  3.4630, 10.1329,  3.9384],
            [ 5.2713,  3.5772,  7.2831,  2.5506,  9.3170],
            [11.5105,  8.5352, 11.1779,  5.0752,  6.3445]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.1200,  0.1748,  0.3989, -1.1770,  0.5157, -0.9195, -0.8865, -0.6439],
            [ 1.4831,  0.4348,  0.6271,  0.2651, -0.5534,  1.3939,  0.1071, -0.0638],
            [-1.0186,  0.6771,  1.2662,  1.0097,  0.3222, -0.0326,  1.8982, -1.2798],
            [ 0.6953,  0.3081,  2.7864,  1.9995, -0.3210,  1.0485,  0.5835, -0.2465],
            [ 0.2008, -0.2925, -0.3289, -1.3586, -0.6049, -1.4887,  0.2227, -0.3636],
            [ 0.0656,  1.4215, -0.3790,  0.3658, -0.8919,  0.1534,  0.8641,  1.1541],
            [ 0.3059, -1.0294, -0.8351, -0.4504, -1.4299,  0.7297, -0.4411,  0.1352],
            [ 1.1808, -0.2273,  1.1466,  0.7270, -0.3043, -0.1528, -0.8753, -1.5346]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3630, -0.7891,  0.4895],
            [ 0.6325, -0.1292, -1.3396],
            [-0.5001, -0.8486,  0.2755]], requires_grad=True), Parameter containing:
    tensor([[1.3133]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.5855, -1.0318,  4.0270,  3.0110, -5.0685,  3.0075,  2.2794,  0.4301],
            [ 0.6421,  3.6523, -0.2003, -2.2431,  5.8048,  0.6785,  0.0448,  2.4981],
            [ 4.9029, -1.0939,  0.0919,  9.3914,  0.8850,  1.5225,  4.4073,  0.3942],
            [-0.2412,  1.1305,  4.6938,  2.4118,  2.3352,  3.9594,  1.0481,  3.7251],
            [ 3.3276,  4.3067, -0.9516,  1.2279,  7.3188, -0.2268,  3.4614,  2.3833],
            [ 0.2085,  3.1756,  4.0377,  3.6260, -0.5370,  7.2380,  4.4639, -3.6881],
            [ 3.6022, -1.4738,  2.0582,  5.4640,  3.8598,  0.1212,  0.5911,  2.9919],
            [ 0.8296,  4.1323,  1.4115, -1.1091,  4.0781,  2.6637,  0.0696,  0.9482]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.9978,  0.8036, -1.8784,  0.2605,  2.9187,  0.7450, -2.4839, -0.1962,
              0.9043, -0.2164],
            [ 0.0379,  0.8457, -0.9439, -2.7094, -0.8415, -1.2483,  1.3212, -0.1743,
             -1.6428,  0.7134],
            [ 1.5156,  2.1166, -0.8601, -2.1397,  0.3163,  2.5520, -1.3122, -3.2442,
             -0.2005, -0.1179],
            [-1.4133, -2.1715,  0.1827, -0.9589, -1.8261, -0.3783, -0.5577, -2.6352,
             -1.1882,  0.1854],
            [ 2.0873,  3.0398, -1.6691, -2.1880,  2.2128,  2.3764,  3.2368,  2.1872,
             -2.4356, -2.4005],
            [-3.1948, -3.2339,  2.8401,  2.2626,  0.7609,  1.8239,  0.9594,  3.0328,
              1.2916, -0.6360],
            [-0.0349,  1.2497, -2.6555,  0.1945,  4.2976,  0.8831,  2.1220,  0.2375,
             -0.2754,  2.0006],
            [ 1.1535, -2.5493, -0.1901,  4.7524, -1.7168, -0.2489,  0.2252,  1.9179,
              1.6576, -1.5268],
            [-1.1430,  0.1833,  1.6156, -2.5007,  2.2465,  2.1696, -1.3750, -1.2712,
             -1.2336,  0.9352],
            [ 0.4752,  0.4069, -0.7381,  1.1892,  0.5132, -1.4168, -0.5411,  0.0556,
              0.5991, -0.1524]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.592 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
