
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 3.7515, 11.2081,  7.1465,  9.6665,  7.7053],
            [ 6.6320,  4.8632, 10.3952, 16.0875, 12.1106],
            [ 9.0759, 10.1764, 13.1519,  5.3631,  6.4246],
            [10.1541,  5.7472, 13.2436,  6.3386, 12.0081],
            [ 7.4264,  3.3437,  5.9156,  8.6997, 15.5775],
            [10.1541,  9.9090,  2.0901, 15.2434, 12.0081],
            [ 9.0759,  4.9626,  2.8323, 13.2913,  6.4246],
            [ 6.6320, 10.2665, 10.4656,  8.5224, 12.1106]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7871, -0.7786, -0.6842, -1.4382,  0.5297,  1.2635, -0.5709,  1.7673],
            [-1.0902, -0.8364,  2.0353,  1.2770, -0.1521, -0.0075,  1.6492,  1.1744],
            [-0.4854,  0.6174,  1.1081, -1.7823, -2.4998,  0.7252,  0.6617,  0.8760],
            [ 0.4739,  0.8672, -0.0906,  0.1227, -1.0252, -0.3225, -0.2372,  1.5652],
            [-1.4057,  1.3206, -2.3906, -0.4082, -0.6583, -1.3062, -0.3516, -0.6746],
            [-0.7361,  1.2173, -1.9789, -0.3609,  1.2527, -1.6984,  0.1184,  1.5677],
            [ 0.3451,  1.0235,  0.3851,  1.5498, -1.2160, -0.4021, -0.5952,  0.6732],
            [ 0.9648, -0.5621, -1.2321, -0.9556,  0.2070, -1.1725,  2.7280, -2.9249]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6398,  0.1432, -0.1863],
            [ 0.2441,  0.0780, -0.4237],
            [ 0.1129, -1.2411, -0.9264]], requires_grad=True), Parameter containing:
    tensor([[-0.3350]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.0807,  1.0228, -1.6528, -1.1698, -2.3088, -0.8250,  0.3613, -2.1870],
            [-1.7470, -1.8913, -1.1071, -2.6308, -2.1853, -2.0313, -1.8984, -2.6000],
            [-2.6537, -0.7445, -1.5624, -1.9743, -3.5606, -0.3220, -3.3514, -3.0928],
            [-2.6697, -2.5503, -0.5530,  2.3260, -1.7084, -1.0149, -2.3705,  2.5045],
            [-3.0156, -3.7342, -2.4044, -3.5600, -4.9953, -5.0367, -0.8910,  1.1144],
            [ 0.0354,  2.4492,  0.1980, -0.4347, -0.8445,  0.2500,  0.0620, -1.9037],
            [ 2.2158,  0.2215, -0.8274, -2.1995, -3.9303, -2.1998, -1.9338, -1.7694],
            [ 1.0841, -2.7324,  2.2704,  1.9641, -1.4858,  0.9679, -0.8770,  1.9301]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.2536e-01, -2.9258e-03, -4.0091e-01,  5.4105e-01, -4.2540e-01,
             -1.0399e+00,  1.0134e+00, -4.6430e-01,  2.1723e-01,  2.1192e-02],
            [ 3.1096e-01, -6.5143e-01, -4.8680e-01, -5.4342e-01, -1.3513e-01,
              8.8397e-01,  7.1352e-01,  1.8083e-01,  5.2751e-01,  4.2161e-01],
            [-4.4346e-01, -5.4832e-01,  3.8433e-01, -1.4293e+00,  4.8782e-01,
              3.4469e-01, -3.2631e+00, -1.8697e-01,  1.6703e+00,  1.0662e+00],
            [ 3.7406e-02,  1.6619e-01, -1.1998e+00, -3.2830e+00, -2.3627e+00,
             -1.1703e+00,  6.1150e-01,  1.4631e+00,  3.8423e+00,  1.9741e+00],
            [ 5.3146e-01, -1.7341e+00, -4.1422e-01,  1.8044e-01, -3.0426e-01,
              9.6082e-01,  1.0439e+00, -3.6324e-01,  6.0808e-01,  2.2260e-01],
            [ 1.9484e-01,  2.7041e-01, -8.5981e-01, -3.1961e+00, -1.8084e+00,
             -1.7182e+00, -3.4353e+00, -1.3496e+00, -6.3954e-01, -8.3174e-01],
            [-1.1251e+00,  1.0239e+00, -1.6035e+00,  4.7154e-01,  3.4851e+00,
              4.8753e-02, -8.4069e-01,  2.2692e+00,  5.8787e-01, -1.5882e-01],
            [ 1.2426e+00,  8.3706e-01,  9.4151e-01, -5.1609e-01, -8.0086e-01,
             -3.5510e+00, -5.3218e-01,  2.9186e-01, -3.5253e-01, -1.7722e-01],
            [-2.0235e-01, -1.9319e+00, -1.4726e+00, -3.2671e-02,  2.5817e+00,
              2.6516e+00,  2.0053e+00,  7.2518e-01,  1.5770e+00,  7.1209e-01],
            [-1.6841e-01,  1.8175e+00,  1.5896e+00,  2.0489e+00,  9.8684e-01,
              9.7028e-01, -1.2075e-01, -7.6946e-01, -6.8876e-01, -4.3867e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.580 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
