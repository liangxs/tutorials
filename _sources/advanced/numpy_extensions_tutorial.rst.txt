
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 6.2604,  5.1526,  2.5480,  3.1820,  2.1891],
            [ 7.6491, 16.2015,  6.6322,  5.7235,  4.0847],
            [ 2.0271,  6.0437,  5.7095, 12.1415,  7.5475],
            [10.4898,  8.7597, 16.7837,  7.0602,  8.4793],
            [ 5.4298,  3.5055,  8.1554,  6.8099,  7.9596],
            [10.4898,  4.5881,  6.0734,  3.9544,  8.4793],
            [ 2.0271, 15.7273,  2.5324,  9.9221,  7.5475],
            [ 7.6491, 10.0545, 11.6105, 15.4747,  4.0847]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.7661,  1.9681, -0.7059, -0.7219, -1.0499, -0.4403, -0.0776, -0.1508],
            [-0.0911,  0.8276, -1.3509,  1.3817, -0.8066, -1.6246, -0.4739, -1.5774],
            [-0.2104,  0.3585, -0.2779, -1.1857, -1.7969, -0.7176,  1.7105, -0.8644],
            [ 0.5184, -0.0174, -0.5888, -1.2397,  1.9274, -1.1896,  0.1081,  2.3274],
            [-1.5871, -1.4365,  0.3506,  1.1269, -1.1647, -0.8490, -1.0702,  1.1807],
            [-0.6639, -0.9640,  0.8515, -0.0582,  2.1530,  1.3065,  1.3800, -0.8790],
            [ 0.5020, -1.4672, -0.4078,  0.7688,  0.7294,  0.5059, -0.0752,  0.4445],
            [ 1.0525,  0.6772,  1.0525, -1.8541, -0.7687, -0.2097, -1.9700,  0.3486]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9407, -0.6980, -0.5118],
            [ 0.1352,  1.2688,  0.9319],
            [-0.9704, -1.3616,  0.4069]], requires_grad=True), Parameter containing:
    tensor([[0.3300]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.7803, -0.7230,  0.8331,  3.3536,  1.6140, -0.5302,  1.8727,  0.8275],
            [-2.7217,  0.7936,  0.1015, -1.3559,  1.6504, -0.4757, -4.2733,  0.9684],
            [-2.2251, -0.3918,  0.4642, -0.2287,  1.3573,  4.7679,  1.2387, -5.3597],
            [-1.4110, -1.3710, -1.4216, -0.3843, -3.7336, -5.0263,  3.2272,  2.7821],
            [ 1.8983,  3.6387,  0.0606,  2.3316,  4.6595,  2.0249,  0.0687,  0.4152],
            [-0.2023, -4.0640,  0.4439, -1.4247, -1.9530,  3.8124, -2.2718,  0.4500],
            [ 6.2522,  5.4940,  1.6019,  5.7330, -0.1784,  2.0228,  5.8136,  1.4875],
            [-4.0052, -3.9358,  0.4105, -3.8479,  4.3976, -1.5851, -4.6513,  5.1116]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.6497e-02,  4.5426e-02, -4.4538e-01, -2.9958e-01, -4.5958e-01,
              3.2976e+00, -1.4048e+00, -9.6039e-01,  3.7410e-01,  8.7523e-02],
            [ 1.0207e+00,  1.3293e-01, -2.0195e+00, -7.6393e-01, -2.6597e+00,
             -1.4867e+00,  4.3888e+00,  4.0971e-01, -7.1435e-01,  2.4973e-01],
            [-2.6618e-03,  1.8084e+00,  4.0082e+00, -2.1217e-02,  2.6108e-01,
             -4.3641e+00, -6.4432e+00,  2.6396e+00,  1.1033e+00, -4.5619e-01],
            [-5.1100e-01, -4.0793e+00,  2.2018e-01,  4.6904e+00,  2.9843e+00,
              4.0683e+00, -2.7763e+00, -3.3049e+00,  5.4183e-01, -7.8155e-01],
            [ 1.5820e-01,  1.1173e+00, -3.4986e+00, -2.5443e+00, -3.0214e-01,
              1.9628e+00,  1.3898e+00,  7.6966e-01, -1.2909e-01, -4.7410e-01],
            [-9.2202e-01,  1.2084e+00,  2.1309e+00, -2.5925e+00, -7.8492e-01,
             -1.3643e-01,  1.1588e+00,  1.0832e+00, -8.3594e-01, -8.1448e-02],
            [-7.2738e-01,  1.3500e+00, -1.0919e+00,  2.3216e+00,  6.1500e-01,
             -3.0876e+00, -2.2400e+00,  3.5699e+00, -1.0652e+00, -1.1611e+00],
            [-7.7592e-01, -1.4716e+00,  7.7024e-01, -1.7512e+00,  3.1140e+00,
              6.6141e-01, -2.4879e+00, -2.4115e+00,  2.2264e+00,  1.0290e+00],
            [ 6.7482e-01, -1.5833e+00, -2.3708e+00,  3.2830e+00, -1.8075e+00,
              1.7094e+00,  5.0009e+00, -7.3248e-01, -3.6630e+00, -1.0535e+00],
            [ 1.0206e+00,  2.3381e+00,  6.5290e-02, -9.5585e-02,  2.7714e-02,
             -3.8130e+00,  1.4046e+00,  2.2900e+00,  1.6665e+00, -5.7583e-01]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.582 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
