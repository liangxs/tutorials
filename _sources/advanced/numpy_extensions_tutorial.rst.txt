
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "advanced/numpy_extensions_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using NumPy and SciPy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation

.. GENERATED FROM PYTHON SOURCE LINES 19-23

.. code-block:: default


    import torch
    from torch.autograd import Function








.. GENERATED FROM PYTHON SOURCE LINES 24-33

Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named ``BadFFTFunction``

**Layer Implementation**

.. GENERATED FROM PYTHON SOURCE LINES 33-57

.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an ``nn.Module`` class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

**Example usage of the created layer:**

.. GENERATED FROM PYTHON SOURCE LINES 59-66

.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[ 4.8470,  8.4213,  7.0158,  7.7085, 20.1184],
            [ 4.7263, 13.0776, 13.2490, 10.7751,  7.3089],
            [10.8746,  2.0131,  8.6778,  9.2821,  5.7714],
            [ 7.1436,  9.1204, 13.8658,  5.2326,  8.9667],
            [13.4687,  5.9950,  1.7202,  7.0209, 14.2333],
            [ 7.1436, 10.6692,  0.7373,  2.7729,  8.9667],
            [10.8746,  5.1045, 16.4076,  5.2875,  5.7714],
            [ 4.7263,  5.9163,  2.6018,  7.7936,  7.3089]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2631,  0.4829,  0.8406,  0.9552, -0.2273,  0.6270, -0.8119, -1.1312],
            [ 0.1902,  3.1401, -2.2276,  0.6122, -1.1420,  0.4349, -2.4705, -0.5339],
            [-0.7672,  0.9573,  0.5085, -0.4023, -0.6861, -0.3618,  0.1689, -0.7097],
            [-1.1060,  0.8713,  0.2531,  0.2356,  0.1479,  0.6784, -0.5459, -0.7107],
            [ 0.8912,  0.6599, -1.4962,  0.1915,  1.8638, -0.0469,  0.4221,  3.3155],
            [-1.6162, -0.3973, -1.4176,  1.3510, -0.6415, -1.1757,  0.2151, -1.7283],
            [-1.4844, -0.1054,  0.8505, -0.2306, -0.5973,  1.1331,  0.9459, -1.7079],
            [-0.4859, -0.1276,  0.3255,  1.0915, -2.1751,  0.2929, -0.4703, -0.0255]],
           requires_grad=True)




.. GENERATED FROM PYTHON SOURCE LINES 67-79

Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient ``wrt`` the input and the gradient ``wrt`` the filter.

.. GENERATED FROM PYTHON SOURCE LINES 79-120

.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)









.. GENERATED FROM PYTHON SOURCE LINES 121-122

**Example usage:**

.. GENERATED FROM PYTHON SOURCE LINES 122-131

.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.0041, -2.4183,  0.9289],
            [-1.2494, -0.2568,  0.1780],
            [-2.2053, -0.1776,  0.2643]], requires_grad=True), Parameter containing:
    tensor([[-0.3304]], requires_grad=True)]
    Output from the convolution:  tensor([[ -0.8335,  -9.1275,  -0.0280,   4.6773,  -3.5330,  -0.7400,   1.5154,
              -2.9329],
            [ -3.7364,  -1.7404,  -1.4799,   0.3545,   0.8384,  -2.4773,  -4.2045,
               0.8090],
            [ -1.8133,   1.1169,   2.8983,  -4.6438,   0.5110,  -3.0177,  -1.2454,
               4.0749],
            [ -4.1205,   9.6065,  -8.8543,   6.1249,  -2.4091,  -4.3584,   4.4792,
               5.8753],
            [  5.4561,  -3.7919,   1.8177,  -6.1809,  -0.3489,   3.3473,   0.5227,
               1.7662],
            [  3.2696,  -9.2318,  -6.5730,  11.7172, -12.1970,   6.4896,   1.5367,
              10.2094],
            [  1.2474,  -6.1851,   0.8272,   2.3360,   2.0728,   2.1930,   0.9810,
               2.1069],
            [ -3.6797,   2.0524,   8.6677,  -4.5848,   0.8558,  -3.7341,   5.3172,
              -1.8106]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.5088,  0.8392,  1.4668, -2.8019,  4.0194, -2.9087,  1.8872, -0.6833,
             -0.2063,  0.2881],
            [ 0.2903,  0.5011, -2.3243,  3.2116, -2.9302, -3.2322,  2.9712, -3.5546,
              2.0804, -0.7919],
            [ 0.0653,  6.1529,  0.2989, -0.1726, -2.3841,  2.6967, -0.7434, -0.5832,
              1.2106, -0.4368],
            [-1.9449,  6.5082, -4.9536,  4.9427, -6.1986,  7.9134,  2.0824,  1.4926,
             -1.4438,  0.6408],
            [ 7.5917, -6.4059, -0.9574, -1.0541,  1.4144,  0.6144, -0.2948,  1.1971,
             -2.6432,  1.0028],
            [ 2.7913,  2.7843, -2.3830,  2.4958, -3.0088,  5.1833,  1.5769, -9.5757,
              3.2803, -0.5169],
            [-4.9919, -2.0514,  7.4503, -8.3790,  1.6998,  5.0145, -0.8169, -2.8535,
              1.5164, -0.3946],
            [ 0.2782, -2.4178, -3.9690, -1.4199,  0.3443,  0.4915,  4.3116,  0.6676,
             -1.2948,  0.5256],
            [ 1.8822,  1.6352, -6.4149, -3.0685,  2.6541,  4.5185, -0.2292, -0.7495,
             -0.0608,  0.0362],
            [ 0.3432, -0.7291, -0.6833, -2.7200,  1.1058,  6.5560, -0.6272, -2.9256,
             -0.0541,  0.2533]])




.. GENERATED FROM PYTHON SOURCE LINES 132-133

**Check the gradients:**

.. GENERATED FROM PYTHON SOURCE LINES 133-141

.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Are the gradients correct:  True





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.568 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
