
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/optimization_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_optimization_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_optimization_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
`Build Model <buildmodel_tutorial.html>`_ ||
`Autograd <autogradqs_tutorial.html>`_ ||
**Optimization** ||
`Save & Load Model <saveloadrun_tutorial.html>`_

Optimizing Model Parameters
===========================

Now that we have a model and data it's time to train, validate and test our model by optimizing its parameters on
our data. Training a model is an iterative process; in each iteration the model makes a guess about the output, calculates
the error in its guess (*loss*), collects the derivatives of the error with respect to its parameters (as we saw in
the `previous section  <autograd_tutorial.html>`_), and **optimizes** these parameters using gradient descent. For a more
detailed walkthrough of this process, check out this video on `backpropagation from 3Blue1Brown <https://www.youtube.com/watch?v=tIeHLnjs5U8>`__.

Prerequisite Code
-----------------
We load the code from the previous sections on `Datasets & DataLoaders <data_tutorial.html>`_
and `Build Model  <buildmodel_tutorial.html>`_.

.. GENERATED FROM PYTHON SOURCE LINES 26-70

.. code-block:: default


    import torch
    from torch import nn
    from torch.utils.data import DataLoader
    from torchvision import datasets
    from torchvision.transforms import ToTensor

    training_data = datasets.FashionMNIST(
        root="data",
        train=True,
        download=True,
        transform=ToTensor()
    )

    test_data = datasets.FashionMNIST(
        root="data",
        train=False,
        download=True,
        transform=ToTensor()
    )

    train_dataloader = DataLoader(training_data, batch_size=64)
    test_dataloader = DataLoader(test_data, batch_size=64)

    class NeuralNetwork(nn.Module):
        def __init__(self):
            super().__init__()
            self.flatten = nn.Flatten()
            self.linear_relu_stack = nn.Sequential(
                nn.Linear(28*28, 512),
                nn.ReLU(),
                nn.Linear(512, 512),
                nn.ReLU(),
                nn.Linear(512, 10),
            )

        def forward(self, x):
            x = self.flatten(x)
            logits = self.linear_relu_stack(x)
            return logits

    model = NeuralNetwork()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0.00/26.4M [00:00<?, ?B/s]
      0%|          | 65.5k/26.4M [00:00<01:12, 364kB/s]
      1%|          | 229k/26.4M [00:00<00:38, 685kB/s] 
      3%|3         | 852k/26.4M [00:00<00:11, 2.31MB/s]
      7%|7         | 1.93M/26.4M [00:00<00:05, 4.19MB/s]
     24%|##4       | 6.39M/26.4M [00:00<00:01, 14.4MB/s]
     38%|###7      | 9.93M/26.4M [00:00<00:00, 17.6MB/s]
     55%|#####4    | 14.5M/26.4M [00:01<00:00, 24.5MB/s]
     65%|######5   | 17.2M/26.4M [00:01<00:00, 24.4MB/s]
     80%|#######9  | 21.1M/26.4M [00:01<00:00, 23.2MB/s]
    100%|##########| 26.4M/26.4M [00:01<00:00, 19.0MB/s]

      0%|          | 0.00/29.5k [00:00<?, ?B/s]
    100%|##########| 29.5k/29.5k [00:00<00:00, 327kB/s]

      0%|          | 0.00/4.42M [00:00<?, ?B/s]
      1%|1         | 65.5k/4.42M [00:00<00:12, 362kB/s]
      5%|5         | 229k/4.42M [00:00<00:06, 682kB/s] 
     21%|##        | 918k/4.42M [00:00<00:01, 2.61MB/s]
     44%|####3     | 1.93M/4.42M [00:00<00:00, 4.09MB/s]
    100%|##########| 4.42M/4.42M [00:00<00:00, 6.09MB/s]

      0%|          | 0.00/5.15k [00:00<?, ?B/s]
    100%|##########| 5.15k/5.15k [00:00<00:00, 50.3MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 71-83

Hyperparameters
-----------------

Hyperparameters are adjustable parameters that let you control the model optimization process.
Different hyperparameter values can impact model training and convergence rates
(`read more <https://pytorch.org/tutorials/beginner/hyperparameter_tuning_tutorial.html>`__ about hyperparameter tuning)

We define the following hyperparameters for training:
 - **Number of Epochs** - the number of times to iterate over the dataset
 - **Batch Size** - the number of data samples propagated through the network before the parameters are updated
 - **Learning Rate** - how much to update models parameters at each batch/epoch. Smaller values yield slow learning speed, while large values may result in unpredictable behavior during training.


.. GENERATED FROM PYTHON SOURCE LINES 83-90

.. code-block:: default


    learning_rate = 1e-3
    batch_size = 64
    epochs = 5










.. GENERATED FROM PYTHON SOURCE LINES 91-117

Optimization Loop
-----------------

Once we set our hyperparameters, we can then train and optimize our model with an optimization loop. Each
iteration of the optimization loop is called an **epoch**.

Each epoch consists of two main parts:
 - **The Train Loop** - iterate over the training dataset and try to converge to optimal parameters.
 - **The Validation/Test Loop** - iterate over the test dataset to check if model performance is improving.

Let's briefly familiarize ourselves with some of the concepts used in the training loop. Jump ahead to
see the :ref:`full-impl-label` of the optimization loop.

Loss Function
~~~~~~~~~~~~~~~~~

When presented with some training data, our untrained network is likely not to give the correct
answer. **Loss function** measures the degree of dissimilarity of obtained result to the target value,
and it is the loss function that we want to minimize during training. To calculate the loss we make a
prediction using the inputs of our given data sample and compare it against the true data label value.

Common loss functions include `nn.MSELoss <https://pytorch.org/docs/stable/generated/torch.nn.MSELoss.html#torch.nn.MSELoss>`_ (Mean Square Error) for regression tasks, and
`nn.NLLLoss <https://pytorch.org/docs/stable/generated/torch.nn.NLLLoss.html#torch.nn.NLLLoss>`_ (Negative Log Likelihood) for classification.
`nn.CrossEntropyLoss <https://pytorch.org/docs/stable/generated/torch.nn.CrossEntropyLoss.html#torch.nn.CrossEntropyLoss>`_ combines ``nn.LogSoftmax`` and ``nn.NLLLoss``.

We pass our model's output logits to ``nn.CrossEntropyLoss``, which will normalize the logits and compute the prediction error.

.. GENERATED FROM PYTHON SOURCE LINES 117-123

.. code-block:: default


    # Initialize the loss function
    loss_fn = nn.CrossEntropyLoss()










.. GENERATED FROM PYTHON SOURCE LINES 124-132

Optimizer
~~~~~~~~~~~~~~~~~

Optimization is the process of adjusting model parameters to reduce model error in each training step. **Optimization algorithms** define how this process is performed (in this example we use Stochastic Gradient Descent).
All optimization logic is encapsulated in  the ``optimizer`` object. Here, we use the SGD optimizer; additionally, there are many `different optimizers <https://pytorch.org/docs/stable/optim.html>`_
available in PyTorch such as ADAM and RMSProp, that work better for different kinds of models and data.

We initialize the optimizer by registering the model's parameters that need to be trained, and passing in the learning rate hyperparameter.

.. GENERATED FROM PYTHON SOURCE LINES 132-135

.. code-block:: default


    optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)








.. GENERATED FROM PYTHON SOURCE LINES 136-140

Inside the training loop, optimization happens in three steps:
 * Call ``optimizer.zero_grad()`` to reset the gradients of model parameters. Gradients by default add up; to prevent double-counting, we explicitly zero them at each iteration.
 * Backpropagate the prediction loss with a call to ``loss.backward()``. PyTorch deposits the gradients of the loss w.r.t. each parameter.
 * Once we have our gradients, we call ``optimizer.step()`` to adjust the parameters by the gradients collected in the backward pass.

.. GENERATED FROM PYTHON SOURCE LINES 143-149

.. _full-impl-label:

Full Implementation
-----------------------
We define ``train_loop`` that loops over our optimization code, and ``test_loop`` that
evaluates the model's performance against our test data.

.. GENERATED FROM PYTHON SOURCE LINES 149-191

.. code-block:: default


    def train_loop(dataloader, model, loss_fn, optimizer):
        size = len(dataloader.dataset)
        # Set the model to training mode - important for batch normalization and dropout layers
        # Unnecessary in this situation but added for best practices
        model.train()
        for batch, (X, y) in enumerate(dataloader):
            # Compute prediction and loss
            pred = model(X)
            loss = loss_fn(pred, y)

            # Backpropagation
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()

            if batch % 100 == 0:
                loss, current = loss.item(), batch * batch_size + len(X)
                print(f"loss: {loss:>7f}  [{current:>5d}/{size:>5d}]")


    def test_loop(dataloader, model, loss_fn):
        # Set the model to evaluation mode - important for batch normalization and dropout layers
        # Unnecessary in this situation but added for best practices
        model.eval()
        size = len(dataloader.dataset)
        num_batches = len(dataloader)
        test_loss, correct = 0, 0

        # Evaluating the model with torch.no_grad() ensures that no gradients are computed during test mode
        # also serves to reduce unnecessary gradient computations and memory usage for tensors with requires_grad=True
        with torch.no_grad():
            for X, y in dataloader:
                pred = model(X)
                test_loss += loss_fn(pred, y).item()
                correct += (pred.argmax(1) == y).type(torch.float).sum().item()

        test_loss /= num_batches
        correct /= size
        print(f"Test Error: \n Accuracy: {(100*correct):>0.1f}%, Avg loss: {test_loss:>8f} \n")









.. GENERATED FROM PYTHON SOURCE LINES 192-194

We initialize the loss function and optimizer, and pass it to ``train_loop`` and ``test_loop``.
Feel free to increase the number of epochs to track the model's improving performance.

.. GENERATED FROM PYTHON SOURCE LINES 194-207

.. code-block:: default


    loss_fn = nn.CrossEntropyLoss()
    optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

    epochs = 10
    for t in range(epochs):
        print(f"Epoch {t+1}\n-------------------------------")
        train_loop(train_dataloader, model, loss_fn, optimizer)
        test_loop(test_dataloader, model, loss_fn)
    print("Done!")







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Epoch 1
    -------------------------------
    loss: 2.309025  [   64/60000]
    loss: 2.286447  [ 6464/60000]
    loss: 2.274763  [12864/60000]
    loss: 2.269163  [19264/60000]
    loss: 2.248275  [25664/60000]
    loss: 2.223449  [32064/60000]
    loss: 2.234359  [38464/60000]
    loss: 2.197483  [44864/60000]
    loss: 2.195112  [51264/60000]
    loss: 2.154208  [57664/60000]
    Test Error: 
     Accuracy: 33.1%, Avg loss: 2.152855 

    Epoch 2
    -------------------------------
    loss: 2.168956  [   64/60000]
    loss: 2.152188  [ 6464/60000]
    loss: 2.101714  [12864/60000]
    loss: 2.120721  [19264/60000]
    loss: 2.059632  [25664/60000]
    loss: 2.005372  [32064/60000]
    loss: 2.035525  [38464/60000]
    loss: 1.950886  [44864/60000]
    loss: 1.962043  [51264/60000]
    loss: 1.878545  [57664/60000]
    Test Error: 
     Accuracy: 52.7%, Avg loss: 1.882614 

    Epoch 3
    -------------------------------
    loss: 1.922379  [   64/60000]
    loss: 1.885999  [ 6464/60000]
    loss: 1.776984  [12864/60000]
    loss: 1.819663  [19264/60000]
    loss: 1.697099  [25664/60000]
    loss: 1.654409  [32064/60000]
    loss: 1.676564  [38464/60000]
    loss: 1.570456  [44864/60000]
    loss: 1.599722  [51264/60000]
    loss: 1.490090  [57664/60000]
    Test Error: 
     Accuracy: 58.8%, Avg loss: 1.511585 

    Epoch 4
    -------------------------------
    loss: 1.587156  [   64/60000]
    loss: 1.545194  [ 6464/60000]
    loss: 1.399606  [12864/60000]
    loss: 1.470424  [19264/60000]
    loss: 1.348503  [25664/60000]
    loss: 1.349371  [32064/60000]
    loss: 1.360461  [38464/60000]
    loss: 1.280984  [44864/60000]
    loss: 1.316424  [51264/60000]
    loss: 1.223331  [57664/60000]
    Test Error: 
     Accuracy: 62.2%, Avg loss: 1.247244 

    Epoch 5
    -------------------------------
    loss: 1.332734  [   64/60000]
    loss: 1.309699  [ 6464/60000]
    loss: 1.145685  [12864/60000]
    loss: 1.249731  [19264/60000]
    loss: 1.127362  [25664/60000]
    loss: 1.155310  [32064/60000]
    loss: 1.172031  [38464/60000]
    loss: 1.105448  [44864/60000]
    loss: 1.143352  [51264/60000]
    loss: 1.073807  [57664/60000]
    Test Error: 
     Accuracy: 64.0%, Avg loss: 1.087448 

    Epoch 6
    -------------------------------
    loss: 1.165143  [   64/60000]
    loss: 1.164867  [ 6464/60000]
    loss: 0.984465  [12864/60000]
    loss: 1.115367  [19264/60000]
    loss: 0.995636  [25664/60000]
    loss: 1.026327  [32064/60000]
    loss: 1.057699  [38464/60000]
    loss: 0.993432  [44864/60000]
    loss: 1.031310  [51264/60000]
    loss: 0.981858  [57664/60000]
    Test Error: 
     Accuracy: 65.6%, Avg loss: 0.985327 

    Epoch 7
    -------------------------------
    loss: 1.048457  [   64/60000]
    loss: 1.071817  [ 6464/60000]
    loss: 0.874740  [12864/60000]
    loss: 1.026414  [19264/60000]
    loss: 0.913574  [25664/60000]
    loss: 0.934822  [32064/60000]
    loss: 0.982761  [38464/60000]
    loss: 0.919205  [44864/60000]
    loss: 0.953054  [51264/60000]
    loss: 0.919782  [57664/60000]
    Test Error: 
     Accuracy: 67.0%, Avg loss: 0.915328 

    Epoch 8
    -------------------------------
    loss: 0.962093  [   64/60000]
    loss: 1.006692  [ 6464/60000]
    loss: 0.795152  [12864/60000]
    loss: 0.963067  [19264/60000]
    loss: 0.858308  [25664/60000]
    loss: 0.867294  [32064/60000]
    loss: 0.929124  [38464/60000]
    loss: 0.868022  [44864/60000]
    loss: 0.895472  [51264/60000]
    loss: 0.874383  [57664/60000]
    Test Error: 
     Accuracy: 68.2%, Avg loss: 0.864158 

    Epoch 9
    -------------------------------
    loss: 0.894903  [   64/60000]
    loss: 0.956751  [ 6464/60000]
    loss: 0.734319  [12864/60000]
    loss: 0.915055  [19264/60000]
    loss: 0.818035  [25664/60000]
    loss: 0.815925  [32064/60000]
    loss: 0.887406  [38464/60000]
    loss: 0.830787  [44864/60000]
    loss: 0.851597  [51264/60000]
    loss: 0.838736  [57664/60000]
    Test Error: 
     Accuracy: 69.5%, Avg loss: 0.824630 

    Epoch 10
    -------------------------------
    loss: 0.840258  [   64/60000]
    loss: 0.915674  [ 6464/60000]
    loss: 0.685781  [12864/60000]
    loss: 0.877459  [19264/60000]
    loss: 0.786622  [25664/60000]
    loss: 0.776126  [32064/60000]
    loss: 0.852971  [38464/60000]
    loss: 0.802735  [44864/60000]
    loss: 0.817129  [51264/60000]
    loss: 0.809606  [57664/60000]
    Test Error: 
     Accuracy: 70.9%, Avg loss: 0.792753 

    Done!




.. GENERATED FROM PYTHON SOURCE LINES 208-214

Further Reading
-----------------------
- `Loss Functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`_
- `torch.optim <https://pytorch.org/docs/stable/optim.html>`_
- `Warmstart Training a Model <https://pytorch.org/tutorials/recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.html>`_



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  10.907 seconds)


.. _sphx_glr_download_beginner_basics_optimization_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: optimization_tutorial.py <optimization_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: optimization_tutorial.ipynb <optimization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
