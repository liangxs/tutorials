
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/basics/buildmodel_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_basics_buildmodel_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_basics_buildmodel_tutorial.py:


`Learn the Basics <intro.html>`_ ||
`Quickstart <quickstart_tutorial.html>`_ ||
`Tensors <tensorqs_tutorial.html>`_ ||
`Datasets & DataLoaders <data_tutorial.html>`_ ||
`Transforms <transforms_tutorial.html>`_ ||
**Build Model** ||
`Autograd <autogradqs_tutorial.html>`_ ||
`Optimization <optimization_tutorial.html>`_ ||
`Save & Load Model <saveloadrun_tutorial.html>`_

Build the Neural Network
========================

Neural networks comprise of layers/modules that perform operations on data.
The `torch.nn <https://pytorch.org/docs/stable/nn.html>`_ namespace provides all the building blocks you need to
build your own neural network. Every module in PyTorch subclasses the `nn.Module <https://pytorch.org/docs/stable/generated/torch.nn.Module.html>`_.
A neural network is a module itself that consists of other modules (layers). This nested structure allows for
building and managing complex architectures easily.

In the following sections, we'll build a neural network to classify images in the FashionMNIST dataset.

.. GENERATED FROM PYTHON SOURCE LINES 24-32

.. code-block:: default


    import os
    import torch
    from torch import nn
    from torch.utils.data import DataLoader
    from torchvision import datasets, transforms









.. GENERATED FROM PYTHON SOURCE LINES 33-37

Get Device for Training
-----------------------
We want to be able to train our model on an `accelerator <https://pytorch.org/docs/stable/torch.html#accelerators>`__
such as CUDA, MPS, MTIA, or XPU. If the current accelerator is available, we will use it. Otherwise, we use the CPU.

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default


    device = torch.accelerator.current_accelerator().type if torch.accelerator.is_available() else "cpu"
    print(f"Using {device} device")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Using cuda device




.. GENERATED FROM PYTHON SOURCE LINES 42-47

Define the Class
-------------------------
We define our neural network by subclassing ``nn.Module``, and
initialize the neural network layers in ``__init__``. Every ``nn.Module`` subclass implements
the operations on input data in the ``forward`` method.

.. GENERATED FROM PYTHON SOURCE LINES 47-65

.. code-block:: default


    class NeuralNetwork(nn.Module):
        def __init__(self):
            super().__init__()
            self.flatten = nn.Flatten()
            self.linear_relu_stack = nn.Sequential(
                nn.Linear(28*28, 512),
                nn.ReLU(),
                nn.Linear(512, 512),
                nn.ReLU(),
                nn.Linear(512, 10),
            )

        def forward(self, x):
            x = self.flatten(x)
            logits = self.linear_relu_stack(x)
            return logits








.. GENERATED FROM PYTHON SOURCE LINES 66-68

We create an instance of ``NeuralNetwork``, and move it to the ``device``, and print
its structure.

.. GENERATED FROM PYTHON SOURCE LINES 68-73

.. code-block:: default


    model = NeuralNetwork().to(device)
    print(model)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    NeuralNetwork(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    )




.. GENERATED FROM PYTHON SOURCE LINES 74-80

To use the model, we pass it the input data. This executes the model's ``forward``,
along with some `background operations <https://github.com/pytorch/pytorch/blob/270111b7b611d174967ed204776985cefca9c144/torch/nn/modules/module.py#L866>`_.
Do not call ``model.forward()`` directly!

Calling the model on the input returns a 2-dimensional tensor with dim=0 corresponding to each output of 10 raw predicted values for each class, and dim=1 corresponding to the individual values of each output.
We get the prediction probabilities by passing it through an instance of the ``nn.Softmax`` module.

.. GENERATED FROM PYTHON SOURCE LINES 80-88

.. code-block:: default


    X = torch.rand(1, 28, 28, device=device)
    logits = model(X)
    pred_probab = nn.Softmax(dim=1)(logits)
    y_pred = pred_probab.argmax(1)
    print(f"Predicted class: {y_pred}")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Predicted class: tensor([3], device='cuda:0')




.. GENERATED FROM PYTHON SOURCE LINES 89-91

--------------


.. GENERATED FROM PYTHON SOURCE LINES 94-100

Model Layers
-------------------------

Let's break down the layers in the FashionMNIST model. To illustrate it, we
will take a sample minibatch of 3 images of size 28x28 and see what happens to it as
we pass it through the network.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default


    input_image = torch.rand(3,28,28)
    print(input_image.size())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([3, 28, 28])




.. GENERATED FROM PYTHON SOURCE LINES 105-110

nn.Flatten
^^^^^^^^^^^^^^^^^^^^^^
We initialize the `nn.Flatten  <https://pytorch.org/docs/stable/generated/torch.nn.Flatten.html>`_
layer to convert each 2D 28x28 image into a contiguous array of 784 pixel values (
the minibatch dimension (at dim=0) is maintained).

.. GENERATED FROM PYTHON SOURCE LINES 110-115

.. code-block:: default


    flatten = nn.Flatten()
    flat_image = flatten(input_image)
    print(flat_image.size())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([3, 784])




.. GENERATED FROM PYTHON SOURCE LINES 116-121

nn.Linear
^^^^^^^^^^^^^^^^^^^^^^
The `linear layer <https://pytorch.org/docs/stable/generated/torch.nn.Linear.html>`_
is a module that applies a linear transformation on the input using its stored weights and biases.


.. GENERATED FROM PYTHON SOURCE LINES 121-126

.. code-block:: default

    layer1 = nn.Linear(in_features=28*28, out_features=20)
    hidden1 = layer1(flat_image)
    print(hidden1.size())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    torch.Size([3, 20])




.. GENERATED FROM PYTHON SOURCE LINES 127-135

nn.ReLU
^^^^^^^^^^^^^^^^^^^^^^
Non-linear activations are what create the complex mappings between the model's inputs and outputs.
They are applied after linear transformations to introduce *nonlinearity*, helping neural networks
learn a wide variety of phenomena.

In this model, we use `nn.ReLU <https://pytorch.org/docs/stable/generated/torch.nn.ReLU.html>`_ between our
linear layers, but there's other activations to introduce non-linearity in your model.

.. GENERATED FROM PYTHON SOURCE LINES 135-142

.. code-block:: default


    print(f"Before ReLU: {hidden1}\n\n")
    hidden1 = nn.ReLU()(hidden1)
    print(f"After ReLU: {hidden1}")







.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Before ReLU: tensor([[-1.3878e-01, -4.6463e-01,  2.3997e-01, -1.5613e-01,  1.8024e-01,
              1.5915e-01,  3.6696e-01, -5.1835e-01,  1.6716e-01, -7.6492e-01,
              2.8377e-01, -3.7513e-01,  6.1025e-02, -4.2812e-01, -3.7796e-02,
              2.9512e-01,  3.4453e-01,  1.8852e-01,  5.4219e-01, -5.5791e-01],
            [ 1.7635e-01, -1.6344e-01,  4.3609e-01,  7.5436e-04,  7.3950e-02,
              1.5119e-01,  6.0044e-02, -3.1580e-01,  5.6733e-02, -3.5879e-01,
              5.1649e-01, -4.2464e-01,  4.5389e-01, -1.3874e-01, -2.3227e-01,
              2.0129e-01,  1.5998e-01, -1.0503e-01,  2.1590e-01, -4.8642e-01],
            [ 2.6285e-01, -1.2734e-01, -1.6521e-02, -2.3272e-01,  1.4239e-01,
             -3.6075e-02,  2.3171e-01, -3.7406e-01,  1.4394e-01, -1.2204e-01,
              5.8239e-01,  2.0806e-02,  3.1318e-01, -1.7710e-01, -4.2648e-01,
              4.0698e-01,  2.3106e-01,  8.7805e-02,  7.4751e-03, -4.2050e-01]],
           grad_fn=<AddmmBackward0>)


    After ReLU: tensor([[0.0000, 0.0000, 0.2400, 0.0000, 0.1802, 0.1591, 0.3670, 0.0000, 0.1672,
             0.0000, 0.2838, 0.0000, 0.0610, 0.0000, 0.0000, 0.2951, 0.3445, 0.1885,
             0.5422, 0.0000],
            [0.1763, 0.0000, 0.4361, 0.0008, 0.0739, 0.1512, 0.0600, 0.0000, 0.0567,
             0.0000, 0.5165, 0.0000, 0.4539, 0.0000, 0.0000, 0.2013, 0.1600, 0.0000,
             0.2159, 0.0000],
            [0.2629, 0.0000, 0.0000, 0.0000, 0.1424, 0.0000, 0.2317, 0.0000, 0.1439,
             0.0000, 0.5824, 0.0208, 0.3132, 0.0000, 0.0000, 0.4070, 0.2311, 0.0878,
             0.0075, 0.0000]], grad_fn=<ReluBackward0>)




.. GENERATED FROM PYTHON SOURCE LINES 143-148

nn.Sequential
^^^^^^^^^^^^^^^^^^^^^^
`nn.Sequential <https://pytorch.org/docs/stable/generated/torch.nn.Sequential.html>`_ is an ordered
container of modules. The data is passed through all the modules in the same order as defined. You can use
sequential containers to put together a quick network like ``seq_modules``.

.. GENERATED FROM PYTHON SOURCE LINES 148-158

.. code-block:: default


    seq_modules = nn.Sequential(
        flatten,
        layer1,
        nn.ReLU(),
        nn.Linear(20, 10)
    )
    input_image = torch.rand(3,28,28)
    logits = seq_modules(input_image)








.. GENERATED FROM PYTHON SOURCE LINES 159-165

nn.Softmax
^^^^^^^^^^^^^^^^^^^^^^
The last linear layer of the neural network returns `logits` - raw values in [-\infty, \infty] - which are passed to the
`nn.Softmax <https://pytorch.org/docs/stable/generated/torch.nn.Softmax.html>`_ module. The logits are scaled to values
[0, 1] representing the model's predicted probabilities for each class. ``dim`` parameter indicates the dimension along
which the values must sum to 1.

.. GENERATED FROM PYTHON SOURCE LINES 165-170

.. code-block:: default


    softmax = nn.Softmax(dim=1)
    pred_probab = softmax(logits)









.. GENERATED FROM PYTHON SOURCE LINES 171-180

Model Parameters
-------------------------
Many layers inside a neural network are *parameterized*, i.e. have associated weights
and biases that are optimized during training. Subclassing ``nn.Module`` automatically
tracks all fields defined inside your model object, and makes all parameters
accessible using your model's ``parameters()`` or ``named_parameters()`` methods.

In this example, we iterate over each parameter, and print its size and a preview of its values.


.. GENERATED FROM PYTHON SOURCE LINES 180-187

.. code-block:: default



    print(f"Model structure: {model}\n\n")

    for name, param in model.named_parameters():
        print(f"Layer: {name} | Size: {param.size()} | Values : {param[:2]} \n")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Model structure: NeuralNetwork(
      (flatten): Flatten(start_dim=1, end_dim=-1)
      (linear_relu_stack): Sequential(
        (0): Linear(in_features=784, out_features=512, bias=True)
        (1): ReLU()
        (2): Linear(in_features=512, out_features=512, bias=True)
        (3): ReLU()
        (4): Linear(in_features=512, out_features=10, bias=True)
      )
    )


    Layer: linear_relu_stack.0.weight | Size: torch.Size([512, 784]) | Values : tensor([[ 0.0086, -0.0126, -0.0280,  ..., -0.0118,  0.0010, -0.0071],
            [ 0.0330, -0.0011, -0.0044,  ..., -0.0329, -0.0067, -0.0170]],
           device='cuda:0', grad_fn=<SliceBackward0>) 

    Layer: linear_relu_stack.0.bias | Size: torch.Size([512]) | Values : tensor([ 0.0305, -0.0217], device='cuda:0', grad_fn=<SliceBackward0>) 

    Layer: linear_relu_stack.2.weight | Size: torch.Size([512, 512]) | Values : tensor([[-0.0245, -0.0284, -0.0282,  ..., -0.0013,  0.0168,  0.0310],
            [-0.0269, -0.0136, -0.0192,  ..., -0.0150,  0.0091,  0.0111]],
           device='cuda:0', grad_fn=<SliceBackward0>) 

    Layer: linear_relu_stack.2.bias | Size: torch.Size([512]) | Values : tensor([0.0133, 0.0113], device='cuda:0', grad_fn=<SliceBackward0>) 

    Layer: linear_relu_stack.4.weight | Size: torch.Size([10, 512]) | Values : tensor([[ 0.0423, -0.0363,  0.0328,  ..., -0.0307,  0.0340, -0.0175],
            [ 0.0172, -0.0415, -0.0349,  ...,  0.0116,  0.0089, -0.0070]],
           device='cuda:0', grad_fn=<SliceBackward0>) 

    Layer: linear_relu_stack.4.bias | Size: torch.Size([10]) | Values : tensor([-0.0057, -0.0055], device='cuda:0', grad_fn=<SliceBackward0>) 





.. GENERATED FROM PYTHON SOURCE LINES 188-190

--------------


.. GENERATED FROM PYTHON SOURCE LINES 192-195

Further Reading
-----------------
- `torch.nn API <https://pytorch.org/docs/stable/nn.html>`_


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.522 seconds)


.. _sphx_glr_download_beginner_basics_buildmodel_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: buildmodel_tutorial.py <buildmodel_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: buildmodel_tutorial.ipynb <buildmodel_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
