
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: default


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0.00/26.4M [00:00<?, ?B/s]
      0%|          | 65.5k/26.4M [00:00<01:12, 363kB/s]
      1%|          | 229k/26.4M [00:00<00:38, 681kB/s] 
      3%|3         | 885k/26.4M [00:00<00:12, 2.02MB/s]
     10%|#         | 2.72M/26.4M [00:00<00:03, 6.35MB/s]
     25%|##5       | 6.62M/26.4M [00:00<00:01, 12.8MB/s]
     43%|####3     | 11.4M/26.4M [00:00<00:00, 21.4MB/s]
     60%|######    | 15.9M/26.4M [00:01<00:00, 23.2MB/s]
     75%|#######5  | 19.9M/26.4M [00:01<00:00, 27.2MB/s]
     96%|#########5| 25.3M/26.4M [00:01<00:00, 28.8MB/s]
    100%|##########| 26.4M/26.4M [00:01<00:00, 19.3MB/s]

      0%|          | 0.00/29.5k [00:00<?, ?B/s]
    100%|##########| 29.5k/29.5k [00:00<00:00, 325kB/s]

      0%|          | 0.00/4.42M [00:00<?, ?B/s]
      1%|1         | 65.5k/4.42M [00:00<00:12, 359kB/s]
      4%|4         | 197k/4.42M [00:00<00:05, 772kB/s] 
     10%|#         | 459k/4.42M [00:00<00:03, 1.16MB/s]
     38%|###7      | 1.67M/4.42M [00:00<00:00, 4.43MB/s]
     83%|########2 | 3.67M/4.42M [00:00<00:00, 7.47MB/s]
    100%|##########| 4.42M/4.42M [00:00<00:00, 6.04MB/s]

      0%|          | 0.00/5.15k [00:00<?, ?B/s]
    100%|##########| 5.15k/5.15k [00:00<00:00, 60.0MB/s]
    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    T-shirt/top  Bag  T-shirt/top  Shirt




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: default


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: default


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.2825, 0.0263, 0.8403, 0.7448, 0.6626, 0.9621, 0.0243, 0.0367, 0.4980,
             0.6045],
            [0.1725, 0.0149, 0.6927, 0.4244, 0.8446, 0.1571, 0.5118, 0.3463, 0.2089,
             0.5278],
            [0.5315, 0.3376, 0.8694, 0.8123, 0.4204, 0.1184, 0.8314, 0.1331, 0.9788,
             0.4679],
            [0.1150, 0.0039, 0.6070, 0.5842, 0.0913, 0.4588, 0.9387, 0.7155, 0.2195,
             0.2851]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.3703114986419678




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: default


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: default


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-326

.. code-block:: default


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    

        running_vloss = 0.0
        # Set the model to evaluation mode, disabling dropout and using population 
        # statistics for batch normalization.
        model.eval()

        # Disable gradient computation and reduce memory consumption.
        with torch.no_grad():
            for i, vdata in enumerate(validation_loader):
                vinputs, vlabels = vdata
                voutputs = model(vinputs)
                vloss = loss_fn(voutputs, vlabels)
                running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.8729447966516017
      batch 2000 loss: 0.7666278909184039
      batch 3000 loss: 0.6489693855755031
      batch 4000 loss: 0.6033813690580427
      batch 5000 loss: 0.5977679096171632
      batch 6000 loss: 0.5719961136244237
      batch 7000 loss: 0.5392291328383144
      batch 8000 loss: 0.5118862401628866
      batch 9000 loss: 0.45253639986482447
      batch 10000 loss: 0.47822852352656625
      batch 11000 loss: 0.4709241815026617
      batch 12000 loss: 0.4540744550917298
      batch 13000 loss: 0.4267454711168539
      batch 14000 loss: 0.4407714056133409
      batch 15000 loss: 0.40820238273777065
    LOSS train 0.40820238273777065 valid 0.45441147685050964
    EPOCH 2:
      batch 1000 loss: 0.3882810186948336
      batch 2000 loss: 0.3915301841283217
      batch 3000 loss: 0.3838385551808169
      batch 4000 loss: 0.38093994361232036
      batch 5000 loss: 0.40800760534964503
      batch 6000 loss: 0.365342950683611
      batch 7000 loss: 0.3888800216551754
      batch 8000 loss: 0.3789286100024474
      batch 9000 loss: 0.36320673052055646
      batch 10000 loss: 0.3695388248601303
      batch 11000 loss: 0.34233856490698233
      batch 12000 loss: 0.37552732346236006
      batch 13000 loss: 0.3494594571130583
      batch 14000 loss: 0.3522057088132715
      batch 15000 loss: 0.32738499506695373
    LOSS train 0.32738499506695373 valid 0.3640909194946289
    EPOCH 3:
      batch 1000 loss: 0.33662500127009115
      batch 2000 loss: 0.33747808300107135
      batch 3000 loss: 0.3190635644308641
      batch 4000 loss: 0.31735208143816634
      batch 5000 loss: 0.31248447762418075
      batch 6000 loss: 0.32152126209898413
      batch 7000 loss: 0.3252650414673262
      batch 8000 loss: 0.32582246831341766
      batch 9000 loss: 0.32554903094245674
      batch 10000 loss: 0.32624029414225514
      batch 11000 loss: 0.30393945358916247
      batch 12000 loss: 0.32550936761331106
      batch 13000 loss: 0.31619919893961923
      batch 14000 loss: 0.3216620732674055
      batch 15000 loss: 0.3243529097939754
    LOSS train 0.3243529097939754 valid 0.33645880222320557
    EPOCH 4:
      batch 1000 loss: 0.28457353985783995
      batch 2000 loss: 0.2913917649959258
      batch 3000 loss: 0.28019714869275775
      batch 4000 loss: 0.2858694436909427
      batch 5000 loss: 0.30307607325326535
      batch 6000 loss: 0.2818604155703652
      batch 7000 loss: 0.28693929170622867
      batch 8000 loss: 0.2898301866398251
      batch 9000 loss: 0.31158236801982275
      batch 10000 loss: 0.3025722604521186
      batch 11000 loss: 0.3003882272080882
      batch 12000 loss: 0.3186196068706504
      batch 13000 loss: 0.27244034632390685
      batch 14000 loss: 0.30283560126888914
      batch 15000 loss: 0.281861324310441
    LOSS train 0.281861324310441 valid 0.31611818075180054
    EPOCH 5:
      batch 1000 loss: 0.27044110100131363
      batch 2000 loss: 0.2619787240079604
      batch 3000 loss: 0.28618481912161225
      batch 4000 loss: 0.27491111303777144
      batch 5000 loss: 0.2630624808702414
      batch 6000 loss: 0.2696707628275362
      batch 7000 loss: 0.2758969063962286
      batch 8000 loss: 0.28153372546455285
      batch 9000 loss: 0.25679330345516793
      batch 10000 loss: 0.25526848320889983
      batch 11000 loss: 0.2985555631894313
      batch 12000 loss: 0.27224930930106167
      batch 13000 loss: 0.27742361315902236
      batch 14000 loss: 0.26745485632141935
      batch 15000 loss: 0.29460700888610153
    LOSS train 0.29460700888610153 valid 0.31274840235710144




.. GENERATED FROM PYTHON SOURCE LINES 327-369

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  57.283 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
