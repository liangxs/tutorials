
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/introyt/trainingyt.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_beginner_introyt_trainingyt.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_introyt_trainingyt.py:


`Introduction <introyt1_tutorial.html>`_ ||
`Tensors <tensors_deeper_tutorial.html>`_ ||
`Autograd <autogradyt_tutorial.html>`_ ||
`Building Models <modelsyt_tutorial.html>`_ ||
`TensorBoard Support <tensorboardyt_tutorial.html>`_ ||
**Training Models** ||
`Model Understanding <captumyt.html>`_

Training with PyTorch
=====================

Follow along with the video below or on `youtube <https://www.youtube.com/watch?v=jF43_wj_DCQ>`__.

.. raw:: html

   <div style="margin-top:10px; margin-bottom:10px;">
     <iframe width="560" height="315" src="https://www.youtube.com/embed/jF43_wj_DCQ" frameborder="0" allow="accelerometer; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
   </div>

Introduction
------------

In past videos, we’ve discussed and demonstrated:

- Building models with the neural network layers and functions of the torch.nn module
- The mechanics of automated gradient computation, which is central to
  gradient-based model training 
- Using TensorBoard to visualize training progress and other activities

In this video, we’ll be adding some new tools to your inventory:

- We’ll get familiar with the dataset and dataloader abstractions, and how
  they ease the process of feeding data to your model during a training loop 
- We’ll discuss specific loss functions and when to use them
- We’ll look at PyTorch optimizers, which implement algorithms to adjust
  model weights based on the outcome of a loss function

Finally, we’ll pull all of these together and see a full PyTorch
training loop in action.


Dataset and DataLoader
----------------------
 
The ``Dataset`` and ``DataLoader`` classes encapsulate the process of
pulling your data from storage and exposing it to your training loop in
batches.

The ``Dataset`` is responsible for accessing and processing single
instances of data.
 
The ``DataLoader`` pulls instances of data from the ``Dataset`` (either
automatically or with a sampler that you define), collects them in
batches, and returns them for consumption by your training loop. The
``DataLoader`` works with all kinds of datasets, regardless of the type
of data they contain.
 
For this tutorial, we’ll be using the Fashion-MNIST dataset provided by
TorchVision. We use ``torchvision.transforms.Normalize()`` to
zero-center and normalize the distribution of the image tile content,
and download both training and validation data splits.

.. GENERATED FROM PYTHON SOURCE LINES 65-96

.. code-block:: Python


    import torch
    import torchvision
    import torchvision.transforms as transforms

    # PyTorch TensorBoard support
    from torch.utils.tensorboard import SummaryWriter
    from datetime import datetime


    transform = transforms.Compose(
        [transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))])

    # Create datasets for training & validation, download if necessary
    training_set = torchvision.datasets.FashionMNIST('./data', train=True, transform=transform, download=True)
    validation_set = torchvision.datasets.FashionMNIST('./data', train=False, transform=transform, download=True)

    # Create data loaders for our datasets; shuffle for training, not for validation
    training_loader = torch.utils.data.DataLoader(training_set, batch_size=4, shuffle=True)
    validation_loader = torch.utils.data.DataLoader(validation_set, batch_size=4, shuffle=False)

    # Class labels
    classes = ('T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
            'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle Boot')

    # Report split sizes
    print('Training set has {} instances'.format(len(training_set)))
    print('Validation set has {} instances'.format(len(validation_set)))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0.00/26.4M [00:00<?, ?B/s]
      0%|          | 65.5k/26.4M [00:00<01:12, 362kB/s]
      1%|          | 229k/26.4M [00:00<00:38, 680kB/s] 
      4%|▎         | 950k/26.4M [00:00<00:11, 2.18MB/s]
     15%|█▍        | 3.83M/26.4M [00:00<00:02, 7.59MB/s]
     38%|███▊      | 10.1M/26.4M [00:00<00:00, 17.2MB/s]
     62%|██████▏   | 16.3M/26.4M [00:01<00:00, 23.0MB/s]
     82%|████████▏ | 21.6M/26.4M [00:01<00:00, 29.3MB/s]
     97%|█████████▋| 25.6M/26.4M [00:01<00:00, 26.9MB/s]
    100%|██████████| 26.4M/26.4M [00:01<00:00, 19.3MB/s]

      0%|          | 0.00/29.5k [00:00<?, ?B/s]
    100%|██████████| 29.5k/29.5k [00:00<00:00, 327kB/s]

      0%|          | 0.00/4.42M [00:00<?, ?B/s]
      1%|▏         | 65.5k/4.42M [00:00<00:12, 360kB/s]
      5%|▌         | 229k/4.42M [00:00<00:06, 678kB/s] 
     20%|██        | 885k/4.42M [00:00<00:01, 2.40MB/s]
     44%|████▎     | 1.93M/4.42M [00:00<00:00, 4.13MB/s]
    100%|██████████| 4.42M/4.42M [00:00<00:00, 6.05MB/s]

      0%|          | 0.00/5.15k [00:00<?, ?B/s]
    100%|██████████| 5.15k/5.15k [00:00<00:00, 57.4MB/s]
    Training set has 60000 instances
    Validation set has 10000 instances




.. GENERATED FROM PYTHON SOURCE LINES 97-99

As always, let’s visualize the data as a sanity check:


.. GENERATED FROM PYTHON SOURCE LINES 99-123

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    # Helper function for inline image display
    def matplotlib_imshow(img, one_channel=False):
        if one_channel:
            img = img.mean(dim=0)
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        if one_channel:
            plt.imshow(npimg, cmap="Greys")
        else:
            plt.imshow(np.transpose(npimg, (1, 2, 0)))

    dataiter = iter(training_loader)
    images, labels = next(dataiter)

    # Create a grid from the images and show them
    img_grid = torchvision.utils.make_grid(images)
    matplotlib_imshow(img_grid, one_channel=True)
    print('  '.join(classes[labels[j]] for j in range(4)))





.. image-sg:: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :alt: trainingyt
   :srcset: /beginner/introyt/images/sphx_glr_trainingyt_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Pullover  Pullover  Bag  Coat




.. GENERATED FROM PYTHON SOURCE LINES 124-130

The Model
---------

The model we’ll use in this example is a variant of LeNet-5 - it should
be familiar if you’ve watched the previous videos in this series.


.. GENERATED FROM PYTHON SOURCE LINES 130-158

.. code-block:: Python


    import torch.nn as nn
    import torch.nn.functional as F

    # PyTorch models inherit from torch.nn.Module
    class GarmentClassifier(nn.Module):
        def __init__(self):
            super(GarmentClassifier, self).__init__()
            self.conv1 = nn.Conv2d(1, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 4 * 4, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = x.view(-1, 16 * 4 * 4)
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x
    

    model = GarmentClassifier()









.. GENERATED FROM PYTHON SOURCE LINES 159-166

Loss Function
-------------

For this example, we’ll be using a cross-entropy loss. For demonstration
purposes, we’ll create batches of dummy output and label values, run
them through the loss function, and examine the result.


.. GENERATED FROM PYTHON SOURCE LINES 166-182

.. code-block:: Python


    loss_fn = torch.nn.CrossEntropyLoss()

    # NB: Loss functions expect data in batches, so we're creating batches of 4
    # Represents the model's confidence in each of the 10 classes for a given input
    dummy_outputs = torch.rand(4, 10)
    # Represents the correct class among the 10 being tested
    dummy_labels = torch.tensor([1, 5, 3, 7])
    
    print(dummy_outputs)
    print(dummy_labels)

    loss = loss_fn(dummy_outputs, dummy_labels)
    print('Total loss for this batch: {}'.format(loss.item()))






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    tensor([[0.9784, 0.5372, 0.5642, 0.4955, 0.4997, 0.3436, 0.3508, 0.5729, 0.5643,
             0.2759],
            [0.9510, 0.5630, 0.1774, 0.5488, 0.7912, 0.5412, 0.0684, 0.6198, 0.5065,
             0.9104],
            [0.1738, 0.5252, 0.1218, 0.0972, 0.4568, 0.1038, 0.4627, 0.3119, 0.1364,
             0.4868],
            [0.0960, 0.6172, 0.0588, 0.2491, 0.8669, 0.4029, 0.7377, 0.0800, 0.1072,
             0.0992]])
    tensor([1, 5, 3, 7])
    Total loss for this batch: 2.442993640899658




.. GENERATED FROM PYTHON SOURCE LINES 183-200

Optimizer
---------

For this example, we’ll be using simple `stochastic gradient
descent <https://pytorch.org/docs/stable/optim.html>`__ with momentum.

It can be instructive to try some variations on this optimization
scheme:

- Learning rate determines the size of the steps the optimizer
  takes. What does a different learning rate do to the your training
  results, in terms of accuracy and convergence time?
- Momentum nudges the optimizer in the direction of strongest gradient over
  multiple steps. What does changing this value do to your results? 
- Try some different optimization algorithms, such as averaged SGD, Adagrad, or
  Adam. How do your results differ?


.. GENERATED FROM PYTHON SOURCE LINES 200-205

.. code-block:: Python


    # Optimizers specified in the torch.optim package
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)









.. GENERATED FROM PYTHON SOURCE LINES 206-225

The Training Loop
-----------------

Below, we have a function that performs one training epoch. It
enumerates data from the DataLoader, and on each pass of the loop does
the following:

- Gets a batch of training data from the DataLoader
- Zeros the optimizer’s gradients 
- Performs an inference - that is, gets predictions from the model for an input batch
- Calculates the loss for that set of predictions vs. the labels on the dataset
- Calculates the backward gradients over the learning weights
- Tells the optimizer to perform one learning step - that is, adjust the model’s
  learning weights based on the observed gradients for this batch, according to the
  optimization algorithm we chose
- It reports on the loss for every 1000 batches.
- Finally, it reports the average per-batch loss for the last
  1000 batches, for comparison with a validation run


.. GENERATED FROM PYTHON SOURCE LINES 225-262

.. code-block:: Python


    def train_one_epoch(epoch_index, tb_writer):
        running_loss = 0.
        last_loss = 0.
    
        # Here, we use enumerate(training_loader) instead of
        # iter(training_loader) so that we can track the batch
        # index and do some intra-epoch reporting
        for i, data in enumerate(training_loader):
            # Every data instance is an input + label pair
            inputs, labels = data
        
            # Zero your gradients for every batch!
            optimizer.zero_grad()
        
            # Make predictions for this batch
            outputs = model(inputs)
        
            # Compute the loss and its gradients
            loss = loss_fn(outputs, labels)
            loss.backward()
        
            # Adjust learning weights
            optimizer.step()
        
            # Gather data and report
            running_loss += loss.item()
            if i % 1000 == 999:
                last_loss = running_loss / 1000 # loss per batch
                print('  batch {} loss: {}'.format(i + 1, last_loss))
                tb_x = epoch_index * len(training_loader) + i + 1
                tb_writer.add_scalar('Loss/train', last_loss, tb_x)
                running_loss = 0.
            
        return last_loss









.. GENERATED FROM PYTHON SOURCE LINES 263-276

Per-Epoch Activity
~~~~~~~~~~~~~~~~~~

There are a couple of things we’ll want to do once per epoch: 

- Perform validation by checking our relative loss on a set of data that was not
  used for training, and report this 
- Save a copy of the model

Here, we’ll do our reporting in TensorBoard. This will require going to
the command line to start TensorBoard, and opening it in another browser
tab.


.. GENERATED FROM PYTHON SOURCE LINES 276-326

.. code-block:: Python


    # Initializing in a separate cell so we can easily add more epochs to the same run
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    writer = SummaryWriter('runs/fashion_trainer_{}'.format(timestamp))
    epoch_number = 0

    EPOCHS = 5

    best_vloss = 1_000_000.

    for epoch in range(EPOCHS):
        print('EPOCH {}:'.format(epoch_number + 1))
    
        # Make sure gradient tracking is on, and do a pass over the data
        model.train(True)
        avg_loss = train_one_epoch(epoch_number, writer)
    

        running_vloss = 0.0
        # Set the model to evaluation mode, disabling dropout and using population 
        # statistics for batch normalization.
        model.eval()

        # Disable gradient computation and reduce memory consumption.
        with torch.no_grad():
            for i, vdata in enumerate(validation_loader):
                vinputs, vlabels = vdata
                voutputs = model(vinputs)
                vloss = loss_fn(voutputs, vlabels)
                running_vloss += vloss
    
        avg_vloss = running_vloss / (i + 1)
        print('LOSS train {} valid {}'.format(avg_loss, avg_vloss))
    
        # Log the running loss averaged per batch
        # for both training and validation
        writer.add_scalars('Training vs. Validation Loss',
                        { 'Training' : avg_loss, 'Validation' : avg_vloss },
                        epoch_number + 1)
        writer.flush()
    
        # Track best performance, and save the model's state
        if avg_vloss < best_vloss:
            best_vloss = avg_vloss
            model_path = 'model_{}_{}'.format(timestamp, epoch_number)
            torch.save(model.state_dict(), model_path)
    
        epoch_number += 1






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    EPOCH 1:
      batch 1000 loss: 1.5465862704142928
      batch 2000 loss: 0.7816536464821547
      batch 3000 loss: 0.6949412319157272
      batch 4000 loss: 0.6188527863037306
      batch 5000 loss: 0.6149637045310811
      batch 6000 loss: 0.5445058493413962
      batch 7000 loss: 0.5400289032962173
      batch 8000 loss: 0.49617504618573005
      batch 9000 loss: 0.48404683727357767
      batch 10000 loss: 0.46902876332681626
      batch 11000 loss: 0.45273765174817526
      batch 12000 loss: 0.4681467335682828
      batch 13000 loss: 0.4642433236206416
      batch 14000 loss: 0.43509715881885497
      batch 15000 loss: 0.40382815060006394
    LOSS train 0.40382815060006394 valid 0.4174927771091461
    EPOCH 2:
      batch 1000 loss: 0.413656951587589
      batch 2000 loss: 0.3923991975703393
      batch 3000 loss: 0.38675531832195703
      batch 4000 loss: 0.4149072079693433
      batch 5000 loss: 0.38910408475104485
      batch 6000 loss: 0.3635768090272322
      batch 7000 loss: 0.3726112794784858
      batch 8000 loss: 0.395769680368132
      batch 9000 loss: 0.3568254399724028
      batch 10000 loss: 0.34266129663336325
      batch 11000 loss: 0.35127895897428973
      batch 12000 loss: 0.36244563058024504
      batch 13000 loss: 0.3689560724585608
      batch 14000 loss: 0.37825060078222306
      batch 15000 loss: 0.36053125258094226
    LOSS train 0.36053125258094226 valid 0.36464112997055054
    EPOCH 3:
      batch 1000 loss: 0.32925197033089354
      batch 2000 loss: 0.3467301466212375
      batch 3000 loss: 0.3355301383532933
      batch 4000 loss: 0.33549493646001793
      batch 5000 loss: 0.30529037908315515
      batch 6000 loss: 0.3500031688055897
      batch 7000 loss: 0.3277317226228188
      batch 8000 loss: 0.3386077039990996
      batch 9000 loss: 0.33489446061424677
      batch 10000 loss: 0.3285486230636743
      batch 11000 loss: 0.31638697784113173
      batch 12000 loss: 0.32726298603748727
      batch 13000 loss: 0.30291344707260576
      batch 14000 loss: 0.32195918477652596
      batch 15000 loss: 0.3315067519256845
    LOSS train 0.3315067519256845 valid 0.35303187370300293
    EPOCH 4:
      batch 1000 loss: 0.31045146053493955
      batch 2000 loss: 0.2957956944460748
      batch 3000 loss: 0.3164307001241905
      batch 4000 loss: 0.29338190196342473
      batch 5000 loss: 0.31303683391823145
      batch 6000 loss: 0.2968236871267727
      batch 7000 loss: 0.2919162909808074
      batch 8000 loss: 0.2978329709204372
      batch 9000 loss: 0.2778021281195397
      batch 10000 loss: 0.3165533388627337
      batch 11000 loss: 0.30796486006550733
      batch 12000 loss: 0.28972076700521937
      batch 13000 loss: 0.31225833467396297
      batch 14000 loss: 0.3180376492794458
      batch 15000 loss: 0.3030596494405909
    LOSS train 0.3030596494405909 valid 0.3230288028717041
    EPOCH 5:
      batch 1000 loss: 0.2765711956117375
      batch 2000 loss: 0.2774883210253611
      batch 3000 loss: 0.2960118744335723
      batch 4000 loss: 0.2736752581652836
      batch 5000 loss: 0.27627955056290376
      batch 6000 loss: 0.2819293523753586
      batch 7000 loss: 0.2750543818987808
      batch 8000 loss: 0.28883820203221194
      batch 9000 loss: 0.3038584784550258
      batch 10000 loss: 0.2885213671730126
      batch 11000 loss: 0.2860916545231121
      batch 12000 loss: 0.28807079792823787
      batch 13000 loss: 0.26886792436085305
      batch 14000 loss: 0.2683611610983007
      batch 15000 loss: 0.2939607007283048
    LOSS train 0.2939607007283048 valid 0.3173980116844177




.. GENERATED FROM PYTHON SOURCE LINES 327-369

To load a saved version of the model:

.. code:: python

    saved_model = GarmentClassifier()
    saved_model.load_state_dict(torch.load(PATH))

Once you’ve loaded the model, it’s ready for whatever you need it for -
more training, inference, or analysis.

Note that if your model has constructor parameters that affect model
structure, you’ll need to provide them and configure the model
identically to the state in which it was saved.

Other Resources
---------------

-  Docs on the `data
   utilities <https://pytorch.org/docs/stable/data.html>`__, including
   Dataset and DataLoader, at pytorch.org
-  A `note on the use of pinned
   memory <https://pytorch.org/docs/stable/notes/cuda.html#cuda-memory-pinning>`__
   for GPU training
-  Documentation on the datasets available in
   `TorchVision <https://pytorch.org/vision/stable/datasets.html>`__,
   `TorchText <https://pytorch.org/text/stable/datasets.html>`__, and
   `TorchAudio <https://pytorch.org/audio/stable/datasets.html>`__
-  Documentation on the `loss
   functions <https://pytorch.org/docs/stable/nn.html#loss-functions>`__
   available in PyTorch
-  Documentation on the `torch.optim
   package <https://pytorch.org/docs/stable/optim.html>`__, which
   includes optimizers and related tools, such as learning rate
   scheduling
-  A detailed `tutorial on saving and loading
   models <https://pytorch.org/tutorials/beginner/saving_loading_models.html>`__
-  The `Tutorials section of
   pytorch.org <https://pytorch.org/tutorials/>`__ contains tutorials on
   a broad variety of training tasks, including classification in
   different domains, generative adversarial networks, reinforcement
   learning, and more 



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 59.643 seconds)


.. _sphx_glr_download_beginner_introyt_trainingyt.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: trainingyt.ipynb <trainingyt.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: trainingyt.py <trainingyt.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: trainingyt.zip <trainingyt.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
