
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "beginner/blitz/cifar10_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_beginner_blitz_cifar10_tutorial.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_beginner_blitz_cifar10_tutorial.py:


Training a Classifier
=====================

This is it. You have seen how to define neural networks, compute loss and make
updates to the weights of the network.

Now you might be thinking,

What about data?
----------------

Generally, when you have to deal with image, text, audio or video data,
you can use standard python packages that load data into a numpy array.
Then you can convert this array into a ``torch.*Tensor``.

-  For images, packages such as Pillow, OpenCV are useful
-  For audio, packages such as scipy and librosa
-  For text, either raw Python or Cython based loading, or NLTK and
   SpaCy are useful

Specifically for vision, we have created a package called
``torchvision``, that has data loaders for common datasets such as
ImageNet, CIFAR10, MNIST, etc. and data transformers for images, viz.,
``torchvision.datasets`` and ``torch.utils.data.DataLoader``.

This provides a huge convenience and avoids writing boilerplate code.

For this tutorial, we will use the CIFAR10 dataset.
It has the classes: ‘airplane’, ‘automobile’, ‘bird’, ‘cat’, ‘deer’,
‘dog’, ‘frog’, ‘horse’, ‘ship’, ‘truck’. The images in CIFAR-10 are of
size 3x32x32, i.e. 3-channel color images of 32x32 pixels in size.

.. figure:: /_static/img/cifar10.png
   :alt: cifar10

   cifar10


Training an image classifier
----------------------------

We will do the following steps in order:

1. Load and normalize the CIFAR10 training and test datasets using
   ``torchvision``
2. Define a Convolutional Neural Network
3. Define a loss function
4. Train the network on the training data
5. Test the network on the test data

1. Load and normalize CIFAR10
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Using ``torchvision``, it’s extremely easy to load CIFAR10.

.. GENERATED FROM PYTHON SOURCE LINES 58-62

.. code-block:: Python

    import torch
    import torchvision
    import torchvision.transforms as transforms








.. GENERATED FROM PYTHON SOURCE LINES 63-65

The output of torchvision datasets are PILImage images of range [0, 1].
We transform them to Tensors of normalized range [-1, 1].

.. GENERATED FROM PYTHON SOURCE LINES 67-70

.. note::
    If running on Windows and you get a BrokenPipeError, try setting
    the num_worker of torch.utils.data.DataLoader() to 0.

.. GENERATED FROM PYTHON SOURCE LINES 70-90

.. code-block:: Python


    transform = transforms.Compose(
        [transforms.ToTensor(),
         transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5))])

    batch_size = 4

    trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
                                              shuffle=True, num_workers=2)

    testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                           download=True, transform=transform)
    testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,
                                             shuffle=False, num_workers=2)

    classes = ('plane', 'car', 'bird', 'cat',
               'deer', 'dog', 'frog', 'horse', 'ship', 'truck')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


      0%|          | 0.00/170M [00:00<?, ?B/s]
      0%|          | 459k/170M [00:00<00:37, 4.48MB/s]
      2%|▏         | 3.44M/170M [00:00<00:08, 19.1MB/s]
      4%|▍         | 6.46M/170M [00:00<00:06, 23.9MB/s]
      5%|▌         | 9.31M/170M [00:00<00:06, 25.6MB/s]
      7%|▋         | 11.9M/170M [00:00<00:06, 25.7MB/s]
      8%|▊         | 14.5M/170M [00:00<00:06, 23.4MB/s]
     10%|▉         | 16.9M/170M [00:00<00:06, 22.4MB/s]
     11%|█         | 19.2M/170M [00:00<00:07, 20.2MB/s]
     12%|█▏        | 21.3M/170M [00:01<00:08, 18.3MB/s]
     14%|█▎        | 23.2M/170M [00:01<00:08, 17.4MB/s]
     15%|█▍        | 25.0M/170M [00:01<00:08, 16.6MB/s]
     16%|█▌        | 26.7M/170M [00:01<00:08, 16.3MB/s]
     17%|█▋        | 28.3M/170M [00:01<00:08, 16.0MB/s]
     18%|█▊        | 30.0M/170M [00:01<00:08, 16.0MB/s]
     19%|█▊        | 31.6M/170M [00:01<00:08, 15.9MB/s]
     19%|█▉        | 33.2M/170M [00:01<00:08, 15.8MB/s]
     20%|██        | 34.9M/170M [00:01<00:08, 16.2MB/s]
     22%|██▏       | 36.7M/170M [00:02<00:08, 16.5MB/s]
     22%|██▏       | 38.3M/170M [00:02<00:07, 16.6MB/s]
     23%|██▎       | 40.0M/170M [00:02<00:08, 15.4MB/s]
     24%|██▍       | 41.6M/170M [00:02<00:08, 14.6MB/s]
     25%|██▌       | 43.1M/170M [00:02<00:09, 14.1MB/s]
     26%|██▌       | 44.5M/170M [00:02<00:09, 13.9MB/s]
     27%|██▋       | 45.9M/170M [00:02<00:09, 13.6MB/s]
     28%|██▊       | 47.3M/170M [00:02<00:09, 13.7MB/s]
     29%|██▊       | 48.7M/170M [00:02<00:08, 13.7MB/s]
     29%|██▉       | 50.1M/170M [00:02<00:08, 13.7MB/s]
     30%|███       | 51.5M/170M [00:03<00:08, 13.7MB/s]
     31%|███       | 53.0M/170M [00:03<00:08, 13.9MB/s]
     32%|███▏      | 54.5M/170M [00:03<00:08, 14.1MB/s]
     33%|███▎      | 55.9M/170M [00:03<00:08, 14.1MB/s]
     34%|███▎      | 57.3M/170M [00:03<00:08, 13.9MB/s]
     34%|███▍      | 58.7M/170M [00:03<00:08, 13.8MB/s]
     35%|███▌      | 60.1M/170M [00:03<00:07, 13.8MB/s]
     36%|███▌      | 61.5M/170M [00:03<00:07, 13.8MB/s]
     37%|███▋      | 62.9M/170M [00:03<00:07, 13.5MB/s]
     38%|███▊      | 64.4M/170M [00:04<00:07, 13.6MB/s]
     39%|███▊      | 65.8M/170M [00:04<00:07, 13.8MB/s]
     39%|███▉      | 67.3M/170M [00:04<00:07, 14.0MB/s]
     40%|████      | 68.7M/170M [00:04<00:07, 14.1MB/s]
     41%|████      | 70.2M/170M [00:04<00:07, 14.3MB/s]
     42%|████▏     | 71.8M/170M [00:04<00:06, 14.5MB/s]
     43%|████▎     | 73.3M/170M [00:04<00:06, 14.7MB/s]
     44%|████▍     | 74.8M/170M [00:04<00:06, 14.0MB/s]
     45%|████▍     | 76.2M/170M [00:04<00:07, 13.0MB/s]
     45%|████▌     | 77.6M/170M [00:05<00:07, 12.4MB/s]
     46%|████▌     | 78.8M/170M [00:05<00:07, 12.1MB/s]
     47%|████▋     | 80.1M/170M [00:05<00:07, 12.0MB/s]
     48%|████▊     | 81.3M/170M [00:05<00:07, 12.0MB/s]
     48%|████▊     | 82.5M/170M [00:05<00:07, 12.0MB/s]
     49%|████▉     | 83.8M/170M [00:05<00:07, 12.2MB/s]
     50%|████▉     | 85.1M/170M [00:05<00:06, 12.3MB/s]
     51%|█████     | 86.4M/170M [00:05<00:06, 12.5MB/s]
     51%|█████▏    | 87.7M/170M [00:05<00:06, 12.5MB/s]
     52%|█████▏    | 89.0M/170M [00:05<00:06, 12.8MB/s]
     53%|█████▎    | 90.3M/170M [00:06<00:06, 12.9MB/s]
     54%|█████▍    | 91.7M/170M [00:06<00:06, 13.1MB/s]
     55%|█████▍    | 93.1M/170M [00:06<00:05, 13.1MB/s]
     55%|█████▌    | 94.5M/170M [00:06<00:05, 13.3MB/s]
     56%|█████▌    | 95.9M/170M [00:06<00:05, 13.5MB/s]
     57%|█████▋    | 97.3M/170M [00:06<00:05, 13.6MB/s]
     58%|█████▊    | 98.7M/170M [00:06<00:05, 13.8MB/s]
     59%|█████▉    | 100M/170M [00:06<00:05, 14.0MB/s] 
     60%|█████▉    | 102M/170M [00:06<00:04, 14.0MB/s]
     60%|██████    | 103M/170M [00:06<00:04, 14.2MB/s]
     61%|██████▏   | 104M/170M [00:07<00:04, 13.6MB/s]
     62%|██████▏   | 106M/170M [00:07<00:05, 12.5MB/s]
     63%|██████▎   | 107M/170M [00:07<00:05, 11.9MB/s]
     64%|██████▎   | 108M/170M [00:07<00:05, 11.6MB/s]
     64%|██████▍   | 110M/170M [00:07<00:05, 11.7MB/s]
     65%|██████▍   | 111M/170M [00:07<00:05, 11.4MB/s]
     66%|██████▌   | 112M/170M [00:07<00:05, 11.4MB/s]
     66%|██████▋   | 113M/170M [00:07<00:05, 11.4MB/s]
     67%|██████▋   | 114M/170M [00:07<00:04, 11.4MB/s]
     68%|██████▊   | 115M/170M [00:08<00:04, 11.5MB/s]
     68%|██████▊   | 117M/170M [00:08<00:04, 11.7MB/s]
     69%|██████▉   | 118M/170M [00:08<00:04, 11.8MB/s]
     70%|██████▉   | 119M/170M [00:08<00:04, 11.9MB/s]
     71%|███████   | 120M/170M [00:08<00:04, 12.0MB/s]
     71%|███████▏  | 122M/170M [00:08<00:04, 12.2MB/s]
     72%|███████▏  | 123M/170M [00:08<00:03, 12.3MB/s]
     73%|███████▎  | 124M/170M [00:08<00:03, 12.5MB/s]
     74%|███████▎  | 126M/170M [00:08<00:03, 12.8MB/s]
     74%|███████▍  | 127M/170M [00:08<00:03, 13.1MB/s]
     75%|███████▌  | 128M/170M [00:09<00:03, 13.6MB/s]
     76%|███████▌  | 130M/170M [00:09<00:02, 13.9MB/s]
     77%|███████▋  | 131M/170M [00:09<00:02, 14.2MB/s]
     78%|███████▊  | 133M/170M [00:09<00:02, 14.4MB/s]
     79%|███████▉  | 135M/170M [00:09<00:02, 14.6MB/s]
     80%|███████▉  | 136M/170M [00:09<00:02, 14.9MB/s]
     81%|████████  | 138M/170M [00:09<00:02, 14.9MB/s]
     82%|████████▏ | 139M/170M [00:09<00:02, 15.1MB/s]
     83%|████████▎ | 141M/170M [00:09<00:01, 15.4MB/s]
     84%|████████▎ | 142M/170M [00:09<00:01, 15.7MB/s]
     84%|████████▍ | 144M/170M [00:10<00:01, 15.8MB/s]
     85%|████████▌ | 146M/170M [00:10<00:01, 16.0MB/s]
     86%|████████▋ | 147M/170M [00:10<00:01, 16.1MB/s]
     87%|████████▋ | 149M/170M [00:10<00:01, 16.3MB/s]
     88%|████████▊ | 151M/170M [00:10<00:01, 16.5MB/s]
     89%|████████▉ | 153M/170M [00:10<00:01, 16.8MB/s]
     91%|█████████ | 154M/170M [00:10<00:00, 16.9MB/s]
     92%|█████████▏| 156M/170M [00:10<00:00, 17.1MB/s]
     93%|█████████▎| 158M/170M [00:10<00:00, 17.2MB/s]
     94%|█████████▎| 160M/170M [00:10<00:00, 17.4MB/s]
     95%|█████████▍| 161M/170M [00:11<00:00, 16.2MB/s]
     96%|█████████▌| 163M/170M [00:11<00:00, 15.4MB/s]
     97%|█████████▋| 165M/170M [00:11<00:00, 14.7MB/s]
     97%|█████████▋| 166M/170M [00:11<00:00, 14.4MB/s]
     98%|█████████▊| 168M/170M [00:11<00:00, 14.3MB/s]
     99%|█████████▉| 169M/170M [00:11<00:00, 14.2MB/s]
    100%|██████████| 170M/170M [00:11<00:00, 14.5MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 91-92

Let us show some of the training images, for fun.

.. GENERATED FROM PYTHON SOURCE LINES 92-116

.. code-block:: Python


    import matplotlib.pyplot as plt
    import numpy as np

    # functions to show an image


    def imshow(img):
        img = img / 2 + 0.5     # unnormalize
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)))
        plt.show()


    # get some random training images
    dataiter = iter(trainloader)
    images, labels = next(dataiter)

    # show images
    imshow(torchvision.utils.make_grid(images))
    # print labels
    print(' '.join(f'{classes[labels[j]]:5s}' for j in range(batch_size)))





.. image-sg:: /beginner/blitz/images/sphx_glr_cifar10_tutorial_001.png
   :alt: cifar10 tutorial
   :srcset: /beginner/blitz/images/sphx_glr_cifar10_tutorial_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    frog  horse car   bird 




.. GENERATED FROM PYTHON SOURCE LINES 117-121

2. Define a Convolutional Neural Network
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Copy the neural network from the Neural Networks section before and modify it to
take 3-channel images (instead of 1-channel images as it was defined).

.. GENERATED FROM PYTHON SOURCE LINES 121-148

.. code-block:: Python


    import torch.nn as nn
    import torch.nn.functional as F


    class Net(nn.Module):
        def __init__(self):
            super().__init__()
            self.conv1 = nn.Conv2d(3, 6, 5)
            self.pool = nn.MaxPool2d(2, 2)
            self.conv2 = nn.Conv2d(6, 16, 5)
            self.fc1 = nn.Linear(16 * 5 * 5, 120)
            self.fc2 = nn.Linear(120, 84)
            self.fc3 = nn.Linear(84, 10)

        def forward(self, x):
            x = self.pool(F.relu(self.conv1(x)))
            x = self.pool(F.relu(self.conv2(x)))
            x = torch.flatten(x, 1) # flatten all dimensions except batch
            x = F.relu(self.fc1(x))
            x = F.relu(self.fc2(x))
            x = self.fc3(x)
            return x


    net = Net()








.. GENERATED FROM PYTHON SOURCE LINES 149-152

3. Define a Loss function and optimizer
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Let's use a Classification Cross-Entropy loss and SGD with momentum.

.. GENERATED FROM PYTHON SOURCE LINES 152-158

.. code-block:: Python


    import torch.optim as optim

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(net.parameters(), lr=0.001, momentum=0.9)








.. GENERATED FROM PYTHON SOURCE LINES 159-165

4. Train the network
^^^^^^^^^^^^^^^^^^^^

This is when things start to get interesting.
We simply have to loop over our data iterator, and feed the inputs to the
network and optimize.

.. GENERATED FROM PYTHON SOURCE LINES 165-190

.. code-block:: Python


    for epoch in range(2):  # loop over the dataset multiple times

        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            # get the inputs; data is a list of [inputs, labels]
            inputs, labels = data

            # zero the parameter gradients
            optimizer.zero_grad()

            # forward + backward + optimize
            outputs = net(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            # print statistics
            running_loss += loss.item()
            if i % 2000 == 1999:    # print every 2000 mini-batches
                print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / 2000:.3f}')
                running_loss = 0.0

    print('Finished Training')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [1,  2000] loss: 2.200
    [1,  4000] loss: 1.891
    [1,  6000] loss: 1.676
    [1,  8000] loss: 1.561
    [1, 10000] loss: 1.487
    [1, 12000] loss: 1.465
    [2,  2000] loss: 1.395
    [2,  4000] loss: 1.360
    [2,  6000] loss: 1.342
    [2,  8000] loss: 1.315
    [2, 10000] loss: 1.285
    [2, 12000] loss: 1.261
    Finished Training




.. GENERATED FROM PYTHON SOURCE LINES 191-192

Let's quickly save our trained model:

.. GENERATED FROM PYTHON SOURCE LINES 192-196

.. code-block:: Python


    PATH = './cifar_net.pth'
    torch.save(net.state_dict(), PATH)








.. GENERATED FROM PYTHON SOURCE LINES 197-211

See `here <https://pytorch.org/docs/stable/notes/serialization.html>`_
for more details on saving PyTorch models.

5. Test the network on the test data
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We have trained the network for 2 passes over the training dataset.
But we need to check if the network has learnt anything at all.

We will check this by predicting the class label that the neural network
outputs, and checking it against the ground-truth. If the prediction is
correct, we add the sample to the list of correct predictions.

Okay, first step. Let us display an image from the test set to get familiar.

.. GENERATED FROM PYTHON SOURCE LINES 211-219

.. code-block:: Python


    dataiter = iter(testloader)
    images, labels = next(dataiter)

    # print images
    imshow(torchvision.utils.make_grid(images))
    print('GroundTruth: ', ' '.join(f'{classes[labels[j]]:5s}' for j in range(4)))




.. image-sg:: /beginner/blitz/images/sphx_glr_cifar10_tutorial_002.png
   :alt: cifar10 tutorial
   :srcset: /beginner/blitz/images/sphx_glr_cifar10_tutorial_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    GroundTruth:  cat   ship  ship  plane




.. GENERATED FROM PYTHON SOURCE LINES 220-222

Next, let's load back in our saved model (note: saving and re-loading the model
wasn't necessary here, we only did it to illustrate how to do so):

.. GENERATED FROM PYTHON SOURCE LINES 222-226

.. code-block:: Python


    net = Net()
    net.load_state_dict(torch.load(PATH, weights_only=True))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none


    <All keys matched successfully>



.. GENERATED FROM PYTHON SOURCE LINES 227-228

Okay, now let us see what the neural network thinks these examples above are:

.. GENERATED FROM PYTHON SOURCE LINES 228-231

.. code-block:: Python


    outputs = net(images)








.. GENERATED FROM PYTHON SOURCE LINES 232-236

The outputs are energies for the 10 classes.
The higher the energy for a class, the more the network
thinks that the image is of the particular class.
So, let's get the index of the highest energy:

.. GENERATED FROM PYTHON SOURCE LINES 236-241

.. code-block:: Python

    _, predicted = torch.max(outputs, 1)

    print('Predicted: ', ' '.join(f'{classes[predicted[j]]:5s}'
                                  for j in range(4)))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Predicted:  cat   ship  car   ship 




.. GENERATED FROM PYTHON SOURCE LINES 242-245

The results seem pretty good.

Let us look at how the network performs on the whole dataset.

.. GENERATED FROM PYTHON SOURCE LINES 245-261

.. code-block:: Python


    correct = 0
    total = 0
    # since we're not training, we don't need to calculate the gradients for our outputs
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            # calculate outputs by running images through the network
            outputs = net(images)
            # the class with the highest energy is what we choose as prediction
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

    print(f'Accuracy of the network on the 10000 test images: {100 * correct // total} %')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy of the network on the 10000 test images: 56 %




.. GENERATED FROM PYTHON SOURCE LINES 262-268

That looks way better than chance, which is 10% accuracy (randomly picking
a class out of 10 classes).
Seems like the network learnt something.

Hmmm, what are the classes that performed well, and the classes that did
not perform well:

.. GENERATED FROM PYTHON SOURCE LINES 268-291

.. code-block:: Python


    # prepare to count predictions for each class
    correct_pred = {classname: 0 for classname in classes}
    total_pred = {classname: 0 for classname in classes}

    # again no gradients needed
    with torch.no_grad():
        for data in testloader:
            images, labels = data
            outputs = net(images)
            _, predictions = torch.max(outputs, 1)
            # collect the correct predictions for each class
            for label, prediction in zip(labels, predictions):
                if label == prediction:
                    correct_pred[classes[label]] += 1
                total_pred[classes[label]] += 1


    # print accuracy for each class
    for classname, correct_count in correct_pred.items():
        accuracy = 100 * float(correct_count) / total_pred[classname]
        print(f'Accuracy for class: {classname:5s} is {accuracy:.1f} %')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Accuracy for class: plane is 56.3 %
    Accuracy for class: car   is 79.4 %
    Accuracy for class: bird  is 33.4 %
    Accuracy for class: cat   is 46.0 %
    Accuracy for class: deer  is 44.3 %
    Accuracy for class: dog   is 49.6 %
    Accuracy for class: frog  is 66.9 %
    Accuracy for class: horse is 64.5 %
    Accuracy for class: ship  is 74.7 %
    Accuracy for class: truck is 53.8 %




.. GENERATED FROM PYTHON SOURCE LINES 292-303

Okay, so what next?

How do we run these neural networks on the GPU?

Training on GPU
----------------
Just like how you transfer a Tensor onto the GPU, you transfer the neural
net onto the GPU.

Let's first define our device as the first visible cuda device if we have
CUDA available:

.. GENERATED FROM PYTHON SOURCE LINES 303-310

.. code-block:: Python


    device = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')

    # Assuming that we are on a CUDA machine, this should print a CUDA device:

    print(device)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    cuda:0




.. GENERATED FROM PYTHON SOURCE LINES 311-364

The rest of this section assumes that ``device`` is a CUDA device.

Then these methods will recursively go over all modules and convert their
parameters and buffers to CUDA tensors:

.. code:: python

    net.to(device)


Remember that you will have to send the inputs and targets at every step
to the GPU too:

.. code:: python

        inputs, labels = data[0].to(device), data[1].to(device)

Why don't I notice MASSIVE speedup compared to CPU? Because your network
is really small.

**Exercise:** Try increasing the width of your network (argument 2 of
the first ``nn.Conv2d``, and argument 1 of the second ``nn.Conv2d`` –
they need to be the same number), see what kind of speedup you get.

**Goals achieved**:

- Understanding PyTorch's Tensor library and neural networks at a high level.
- Train a small neural network to classify images

Training on multiple GPUs
-------------------------
If you want to see even more MASSIVE speedup using all of your GPUs,
please check out :doc:`data_parallel_tutorial`.

Where do I go next?
-------------------

-  :doc:`Train neural nets to play video games </intermediate/reinforcement_q_learning>`
-  `Train a state-of-the-art ResNet network on imagenet`_
-  `Train a face generator using Generative Adversarial Networks`_
-  `Train a word-level language model using Recurrent LSTM networks`_
-  `More examples`_
-  `More tutorials`_
-  `Discuss PyTorch on the Forums`_
-  `Chat with other users on Slack`_

.. _Train a state-of-the-art ResNet network on imagenet: https://github.com/pytorch/examples/tree/master/imagenet
.. _Train a face generator using Generative Adversarial Networks: https://github.com/pytorch/examples/tree/master/dcgan
.. _Train a word-level language model using Recurrent LSTM networks: https://github.com/pytorch/examples/tree/master/word_language_model
.. _More examples: https://github.com/pytorch/examples
.. _More tutorials: https://github.com/pytorch/tutorials
.. _Discuss PyTorch on the Forums: https://discuss.pytorch.org/
.. _Chat with other users on Slack: https://pytorch.slack.com/messages/beginner/

.. GENERATED FROM PYTHON SOURCE LINES 366-367

.. code-block:: Python

    del dataiter








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 32.987 seconds)


.. _sphx_glr_download_beginner_blitz_cifar10_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: cifar10_tutorial.ipynb <cifar10_tutorial.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: cifar10_tutorial.py <cifar10_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: cifar10_tutorial.zip <cifar10_tutorial.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
