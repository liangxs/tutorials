
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "prototype/nestedtensor.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_prototype_nestedtensor.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_prototype_nestedtensor.py:


Getting Started with Nested Tensors
===============================================================

Nested tensors generalize the shape of regular dense tensors, allowing for representation
of ragged-sized data.

* for a regular tensor, each dimension is regular and has a size

* for a nested tensor, not all dimensions have regular sizes; some of them are ragged

Nested tensors are a natural solution for representing sequential data within various domains:

* in NLP, sentences can have variable lengths, so a batch of sentences forms a nested tensor

* in CV, images can have variable shapes, so a batch of images forms a nested tensor

In this tutorial, we will demonstrate basic usage of nested tensors and motivate their usefulness
for operating on sequential data of varying lengths with a real-world example. In particular,
they are invaluable for building transformers that can efficiently operate on ragged sequential
inputs. Below, we present an implementation of multi-head attention using nested tensors that,
combined usage of ``torch.compile``, out-performs operating naively on tensors with padding.

Nested tensors are currently a prototype feature and are subject to change.

.. GENERATED FROM PYTHON SOURCE LINES 41-46

Nested tensor initialization
----------------------------

From the Python frontend, a nested tensor can be created from a list of tensors.
We denote nt[i] as the ith tensor component of a nestedtensor.

.. GENERATED FROM PYTHON SOURCE LINES 51-53

By padding every underlying tensor to the same shape,
a nestedtensor can be converted to a regular tensor.

.. GENERATED FROM PYTHON SOURCE LINES 57-58

All tensors posses an attribute for determining if they are nested;

.. GENERATED FROM PYTHON SOURCE LINES 62-65

It is common to construct nestedtensors from batches of irregularly shaped tensors.
i.e. dimension 0 is assumed to be the batch dimension.
Indexing dimension 0 gives back the first underlying tensor component.

.. GENERATED FROM PYTHON SOURCE LINES 65-71

.. code-block:: Python




    # When indexing a nestedtensor's 0th dimension, the result is a regular tensor.



.. GENERATED FROM PYTHON SOURCE LINES 72-75

An important note is that slicing in dimension 0 has not been supported yet.
Which means it not currently possible to construct a view that combines the underlying
tensor components.

.. GENERATED FROM PYTHON SOURCE LINES 77-99

Nested Tensor Operations
------------------------

As each operation must be explicitly implemented for nestedtensors,
operation coverage for nestedtensors is currently narrower than that of regular tensors.
For now, only basic operations such as index, dropout, softmax, transpose, reshape, linear, bmm are covered.
However, coverage is being expanded.
If you need certain operations, please file an `issue <https://github.com/pytorch/pytorch>`__
to help us prioritize coverage.

**reshape**

The reshape op is for changing the shape of a tensor.
Its full semantics for regular tensors can be found
`here <https://pytorch.org/docs/stable/generated/torch.reshape.html>`__.
For regular tensors, when specifying the new shape,
a single dimension may be -1, in which case it is inferred
from the remaining dimensions and the number of elements.

The semantics for nestedtensors are similar, except that -1 no longer infers.
Instead, it inherits the old size (here 2 for ``nt[0]`` and 3 for ``nt[1]``).
-1 is the only legal size to specify for a jagged dimension.

.. GENERATED FROM PYTHON SOURCE LINES 103-111

**transpose**

The transpose op is for swapping two dimensions of a tensor.
Its full semantics can be found
`here <https://pytorch.org/docs/stable/generated/torch.transpose.html>`__.
Note that for nestedtensors dimension 0 is special;
it is assumed to be the batch dimension,
so transposes involving nestedtensor dimension 0 are not supported.

.. GENERATED FROM PYTHON SOURCE LINES 115-121

**others**

Other operations have the same semantics as for regular tensors.
Applying the operation on a nestedtensor is equivalent to
applying the operation to the underlying tensor components,
with the result being a nestedtensor as well.

.. GENERATED FROM PYTHON SOURCE LINES 132-135

Why Nested Tensor
-----------------


.. GENERATED FROM PYTHON SOURCE LINES 137-143

When data is sequential, it is often the case that each sample has a different length.
For example, in a batch of sentences, each sentence has a different number of words.
A common technique for handling varying sequences is to manually pad each data tensor
to the same shape in order to form a batch.
For example, we have 2 sentences with different lengths and a vocabulary
In order to represent his as single tensor we pad with 0 to the max length in the batch.

.. GENERATED FROM PYTHON SOURCE LINES 155-164

This technique of padding a batch of data to its max length is not optimal.
The padded data is not needed for computation and wastes memory by allocating
larger tensors than necessary.
Further, not all operations have the same semnatics when applied to padded data.
For matrix multiplications in order to ignore the padded entries, one needs to pad
with 0 while for softmax one has to pad with -inf to ignore specific entries.
The primary objective of nested tensor is to facilitate operations on ragged
data using the standard PyTorch tensor UX, thereby eliminating the need
for inefficient and complex padding and masking.

.. GENERATED FROM PYTHON SOURCE LINES 170-174

Let us take a look at a practical example: the multi-head attention component
utilized in `Transformers <https://arxiv.org/pdf/1706.03762.pdf>`__.
We can implement this in such a way that it can operate on either padded
or nested tensors.

.. GENERATED FROM PYTHON SOURCE LINES 245-246

set hyperparameters following `the Transformer paper <https://arxiv.org/pdf/1706.03762.pdf>`__

.. GENERATED FROM PYTHON SOURCE LINES 252-253

except for dropout probability: set to 0 for correctness check

.. GENERATED FROM PYTHON SOURCE LINES 256-257

Let us generate some realistic fake data from Zipf's law.

.. GENERATED FROM PYTHON SOURCE LINES 270-271

Create nested tensor batch inputs

.. GENERATED FROM PYTHON SOURCE LINES 298-299

Generate padded forms of query, key, value for comparison

.. GENERATED FROM PYTHON SOURCE LINES 310-311

Construct the model

.. GENERATED FROM PYTHON SOURCE LINES 314-315

Check correctness and performance

.. GENERATED FROM PYTHON SOURCE LINES 315-357

.. code-block:: Python












    # padding-specific step: remove output projection bias from padded entries for fair comparison








    # warm up compile first...


    # ...now benchmark



    # warm up compile first...

    # ...now benchmark



    # padding-specific step: remove output projection bias from padded entries for fair comparison









.. GENERATED FROM PYTHON SOURCE LINES 358-363

Note that without ``torch.compile``, the overhead of the python subclass nested tensor
can make it slower than the equivalent computation on padded tensors. However, once
``torch.compile`` is enabled, operating on nested tensors gives a multiple x speedup.
Avoiding wasted computation on padding becomes only more valuable as the percentage
of padding in the batch increases.

.. GENERATED FROM PYTHON SOURCE LINES 366-377

Conclusion
----------
In this tutorial, we have learned how to perform basic operations with nested tensors and
how implement multi-head attention for transformers in a way that avoids computation on padding.
For more information, check out the docs for the
`torch.nested <https://pytorch.org/docs/stable/nested.html>`__ namespace.

See Also
--------

* `Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile <https://docs.pytorch.org/tutorials/intermediate/transformer_building_blocks.html>`__

.. GENERATED FROM PYTHON SOURCE LINES 377-378

.. code-block:: Python


    # %%%%%%RUNNABLE_CODE_REMOVED%%%%%%

.. _sphx_glr_download_prototype_nestedtensor.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: nestedtensor.ipynb <nestedtensor.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: nestedtensor.py <nestedtensor.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: nestedtensor.zip <nestedtensor.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
