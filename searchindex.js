Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "compilers_index", "deep-dive", "distributed", "domains", "ecosystem", "extension", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "intro", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/python_extension_autoload", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "sg_execution_times"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "compilers_index.rst", "deep-dive.rst", "distributed.rst", "domains.rst", "ecosystem.rst", "extension.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "intro.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/python_extension_autoload.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "sg_execution_times.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "&lt;no title&gt;", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Compilers", "Deep Dive", "Distributed", "Domains", "Ecosystem", "Extension", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "Intro", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "Unstable", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Computation times"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286], "ha": [0, 1, 2, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 45, 46, 47, 50, 53, 54, 66, 72, 79, 80, 87, 89, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 116, 119, 120, 123, 125, 126, 129, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 160, 162, 164, 165, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 201, 202, 204, 205, 208, 211, 212, 213, 214, 215, 217, 219, 221, 222, 224, 225, 231, 232, 235, 238, 241, 242, 250, 252, 253, 257, 264, 266, 267, 272, 273, 278, 279, 281, 282, 285, 286], "been": [0, 1, 3, 7, 10, 16, 17, 20, 28, 29, 30, 31, 32, 33, 45, 54, 73, 79, 80, 87, 89, 92, 93, 94, 95, 97, 102, 108, 112, 123, 125, 126, 129, 137, 140, 145, 147, 148, 149, 152, 153, 154, 156, 159, 160, 164, 165, 167, 168, 169, 172, 175, 176, 177, 178, 182, 186, 187, 188, 189, 190, 193, 194, 195, 198, 201, 202, 208, 211, 212, 215, 217, 221, 222, 225, 231, 238, 241, 242, 248, 252, 264, 265, 273, 281, 282, 285], "deprec": [0, 5, 6, 10, 11, 24, 25, 26, 45, 114, 123, 125, 126, 128, 129, 137, 139, 140, 152, 164, 167, 172, 187, 194, 202, 237, 238, 243, 259, 260, 261, 262, 273, 284], "redirect": [0, 10, 28, 29, 30, 31, 32, 33, 45, 62, 63, 80, 81, 82, 83, 84, 85, 93, 123, 125, 126, 129, 152, 156, 164, 167, 172, 186, 189, 193, 196, 202, 208, 209, 210, 218, 225, 229, 238, 244, 245, 246, 247, 249, 259, 260, 261, 262, 273], "3": [0, 2, 3, 4, 6, 7, 8, 10, 16, 19, 20, 22, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 45, 46, 56, 62, 63, 66, 67, 72, 73, 76, 79, 80, 81, 82, 83, 84, 85, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 123, 124, 125, 126, 129, 137, 138, 139, 141, 146, 147, 148, 152, 153, 154, 156, 159, 161, 162, 164, 165, 166, 167, 168, 170, 172, 175, 176, 177, 179, 180, 181, 182, 186, 189, 190, 192, 193, 194, 195, 197, 198, 201, 203, 205, 207, 208, 209, 210, 217, 218, 222, 224, 225, 227, 228, 229, 231, 235, 236, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 251, 256, 258, 259, 260, 261, 262, 264, 267, 273, 275, 279, 281, 282], "second": [0, 1, 4, 6, 7, 10, 11, 14, 15, 16, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 62, 63, 72, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 123, 124, 125, 126, 127, 129, 136, 137, 140, 142, 143, 144, 145, 146, 147, 148, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 182, 183, 185, 186, 187, 188, 189, 192, 193, 194, 195, 197, 198, 203, 205, 208, 209, 210, 212, 213, 214, 215, 217, 218, 225, 226, 229, 231, 232, 235, 239, 242, 244, 245, 246, 247, 249, 252, 253, 256, 258, 259, 260, 261, 262, 264, 266, 267, 272, 273, 278, 279, 280, 281, 283, 285], "go": [1, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 66, 67, 69, 71, 72, 73, 76, 77, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 136, 138, 142, 143, 144, 145, 147, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 191, 192, 194, 195, 197, 200, 204, 205, 212, 213, 214, 215, 217, 226, 231, 234, 239, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 283], "end": [1, 4, 6, 7, 8, 11, 14, 15, 16, 18, 20, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 58, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 136, 138, 140, 141, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 181, 182, 183, 185, 187, 188, 191, 192, 194, 195, 197, 198, 201, 204, 205, 212, 213, 214, 215, 217, 221, 222, 226, 231, 239, 241, 242, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 281, 283, 286], "download": [1, 7, 14, 15, 16, 18, 20, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 191, 192, 194, 195, 197, 198, 204, 205, 207, 212, 213, 214, 215, 217, 226, 227, 231, 239, 241, 242, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 275, 277, 278, 279, 280, 281, 283], "full": [1, 3, 4, 6, 7, 11, 13, 14, 15, 16, 18, 20, 23, 27, 34, 35, 36, 38, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 174, 175, 177, 178, 179, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 201, 203, 204, 205, 212, 213, 214, 215, 217, 219, 226, 231, 239, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 281, 283, 285], "exampl": [1, 2, 3, 4, 7, 8, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 86, 87, 88, 90, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 116, 117, 118, 119, 122, 124, 127, 130, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 200, 201, 204, 205, 207, 212, 213, 214, 215, 217, 219, 222, 223, 224, 226, 227, 228, 230, 231, 233, 234, 235, 236, 239, 240, 242, 248, 250, 251, 252, 253, 254, 256, 257, 258, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 281, 282, 283, 286, 287], "author": [1, 4, 6, 13, 14, 15, 16, 19, 20, 23, 27, 38, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 79, 86, 87, 89, 91, 98, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 137, 138, 139, 140, 141, 143, 144, 145, 146, 149, 150, 151, 153, 154, 158, 159, 161, 162, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 192, 194, 198, 200, 201, 203, 205, 206, 207, 216, 219, 221, 222, 226, 227, 230, 231, 233, 234, 235, 236, 239, 240, 251, 256, 257, 264, 267, 272, 276, 277, 278, 279, 280, 281, 282, 283], "vincent": [1, 16, 154, 171, 177], "moen": [1, 16, 154, 171, 177], "separ": [1, 4, 6, 7, 11, 18, 36, 53, 56, 89, 94, 101, 102, 103, 104, 112, 119, 141, 155, 159, 161, 169, 171, 180, 183, 190, 197, 200, 212, 217, 252, 267, 277, 280, 283], "rl": [1, 133, 136, 177, 178, 179, 184, 287], "algorithm": [1, 6, 7, 12, 13, 14, 34, 39, 44, 53, 56, 60, 73, 86, 92, 95, 97, 103, 105, 106, 107, 108, 112, 120, 133, 136, 138, 141, 143, 147, 153, 154, 161, 171, 174, 177, 180, 185, 201, 219, 230, 231, 250, 254, 267], "variou": [1, 4, 11, 17, 43, 50, 52, 53, 54, 87, 89, 92, 97, 101, 109, 112, 119, 121, 143, 153, 158, 160, 175, 177, 180, 181, 190, 195, 198, 203, 205, 214, 217, 228, 235, 239, 266, 270, 276, 279, 282], "piec": [1, 6, 11, 16, 89, 97, 112, 176, 177, 181, 190, 197, 200], "assembl": [1, 11, 53, 97], "script": [1, 6, 7, 8, 12, 14, 15, 16, 18, 23, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 59, 64, 72, 76, 77, 79, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 127, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 185, 190, 192, 194, 195, 197, 198, 203, 205, 212, 213, 214, 215, 227, 231, 239, 240, 241, 248, 251, 252, 253, 256, 257, 258, 264, 267, 271, 272, 278, 279, 280, 281, 283], "collect": [1, 7, 13, 16, 17, 22, 23, 39, 46, 48, 53, 59, 64, 97, 102, 103, 106, 111, 136, 137, 138, 141, 151, 154, 158, 174, 178, 181, 194, 195, 199, 201, 203, 222, 234, 235, 236, 248, 266, 267, 271], "final": [1, 7, 12, 13, 14, 16, 17, 19, 20, 23, 27, 44, 46, 50, 53, 56, 79, 89, 92, 94, 97, 99, 102, 103, 104, 109, 112, 114, 117, 119, 121, 127, 136, 137, 138, 139, 141, 143, 144, 145, 147, 148, 153, 158, 159, 160, 161, 165, 168, 170, 173, 175, 177, 178, 179, 180, 181, 183, 187, 188, 194, 195, 200, 201, 203, 205, 212, 215, 219, 222, 242], "function": [1, 3, 4, 6, 7, 9, 11, 12, 15, 16, 18, 19, 20, 22, 27, 36, 40, 41, 43, 44, 46, 52, 53, 55, 57, 59, 64, 65, 68, 69, 71, 72, 73, 86, 87, 94, 95, 97, 101, 102, 108, 111, 113, 116, 117, 119, 121, 127, 130, 131, 132, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 153, 154, 155, 158, 159, 161, 168, 169, 171, 173, 174, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 206, 212, 213, 214, 215, 217, 219, 222, 224, 226, 227, 230, 231, 240, 241, 242, 248, 251, 253, 254, 258, 264, 266, 268, 271, 274, 276, 279, 280, 281, 283, 286, 287], "ar": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 59, 60, 64, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 200, 201, 203, 204, 205, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 248, 250, 251, 252, 254, 256, 257, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 281, 282, 283, 285, 286], "state": [1, 4, 6, 8, 11, 12, 13, 16, 20, 40, 41, 47, 53, 56, 57, 59, 92, 95, 97, 99, 103, 104, 105, 109, 112, 120, 121, 137, 138, 144, 145, 147, 149, 151, 154, 155, 157, 161, 168, 170, 175, 177, 178, 179, 180, 181, 183, 187, 194, 203, 204, 215, 221, 222, 233, 234, 239, 250, 251, 256, 269, 271], "contain": [1, 2, 7, 11, 12, 14, 16, 17, 20, 35, 36, 40, 44, 50, 53, 54, 59, 71, 72, 73, 86, 89, 94, 95, 99, 102, 103, 108, 109, 112, 113, 120, 121, 127, 133, 136, 137, 138, 142, 143, 144, 149, 151, 154, 169, 173, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 194, 195, 197, 198, 200, 203, 204, 215, 222, 224, 227, 232, 242, 248, 251, 254, 256, 264, 266, 267, 269, 281, 282, 285], "trainabl": [1, 7, 72, 104, 106], "paramet": [1, 6, 12, 13, 14, 16, 17, 19, 20, 23, 27, 34, 36, 37, 38, 41, 43, 44, 46, 47, 50, 52, 53, 55, 56, 71, 72, 79, 89, 92, 94, 97, 101, 103, 104, 106, 108, 111, 112, 117, 119, 120, 127, 131, 132, 135, 136, 137, 138, 139, 141, 143, 144, 149, 151, 153, 154, 155, 157, 159, 160, 161, 165, 168, 169, 170, 181, 182, 185, 187, 188, 190, 194, 195, 205, 212, 219, 220, 222, 230, 232, 233, 234, 240, 241, 242, 248, 251, 255, 256, 257, 258, 263, 264, 269, 270, 271, 275, 279, 285, 286, 287], "tutori": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 46, 47, 48, 49, 55, 57, 59, 60, 64, 79, 80, 81, 82, 83, 84, 85, 86, 88, 92, 95, 96, 99, 101, 103, 105, 107, 108, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 126, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 195, 196, 199, 201, 202, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 238, 239, 240, 250, 251, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 271, 273, 274, 282, 283, 285, 286, 287], "guid": [1, 6, 8, 11, 20, 64, 86, 89, 117, 133, 134, 136, 137, 153, 162, 176, 184, 187, 194, 195, 205, 219, 222, 239, 248, 250, 252, 255, 263, 271, 285, 287], "you": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 27, 33, 34, 35, 36, 38, 39, 41, 43, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 72, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 124, 127, 130, 132, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 199, 201, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 226, 227, 228, 230, 232, 233, 234, 235, 236, 240, 241, 248, 251, 252, 253, 254, 256, 257, 265, 267, 268, 269, 270, 271, 272, 276, 277, 279, 280, 282, 283, 286], "through": [1, 3, 6, 7, 11, 12, 15, 16, 17, 19, 23, 27, 34, 35, 39, 40, 46, 50, 53, 56, 58, 59, 88, 90, 92, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 112, 113, 114, 116, 117, 120, 124, 131, 132, 136, 138, 139, 140, 141, 142, 144, 146, 147, 148, 153, 155, 158, 159, 160, 161, 162, 165, 168, 170, 171, 173, 174, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 199, 204, 205, 206, 207, 212, 214, 219, 222, 226, 232, 233, 234, 240, 241, 242, 251, 252, 257, 265, 270, 282, 285, 287], "from": [1, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 27, 34, 36, 39, 40, 41, 42, 43, 47, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 86, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 127, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 191, 192, 194, 198, 199, 200, 201, 203, 205, 207, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 227, 232, 233, 234, 236, 239, 240, 241, 242, 248, 251, 252, 254, 255, 257, 263, 264, 266, 267, 269, 271, 274, 277, 278, 279, 281, 282, 283, 285, 286, 287], "ground": [1, 16, 47, 79, 197], "up": [1, 3, 6, 7, 11, 12, 16, 18, 20, 22, 23, 34, 36, 39, 53, 56, 59, 64, 75, 78, 86, 89, 94, 95, 97, 98, 99, 102, 104, 105, 106, 108, 109, 111, 112, 114, 119, 130, 136, 137, 138, 139, 140, 141, 144, 145, 149, 150, 151, 153, 154, 155, 158, 159, 165, 168, 170, 171, 173, 176, 177, 178, 179, 180, 183, 187, 188, 192, 194, 195, 198, 206, 217, 219, 220, 222, 228, 232, 233, 235, 236, 241, 252, 257, 267, 270, 271, 281, 282, 283, 285, 286, 287], "us": [1, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 50, 52, 53, 55, 56, 58, 59, 60, 61, 64, 66, 67, 69, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 116, 120, 124, 127, 130, 131, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 148, 150, 153, 158, 159, 160, 161, 162, 165, 166, 168, 169, 171, 173, 175, 176, 177, 178, 183, 184, 185, 191, 192, 194, 195, 197, 198, 200, 201, 203, 205, 206, 212, 213, 215, 217, 219, 220, 221, 222, 224, 226, 228, 230, 231, 233, 237, 239, 240, 241, 251, 252, 253, 254, 255, 258, 263, 264, 266, 269, 270, 271, 272, 274, 276, 277, 278, 280, 282, 284, 287], "To": [1, 4, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 23, 34, 35, 39, 40, 41, 44, 50, 53, 54, 55, 61, 69, 77, 86, 87, 89, 92, 95, 101, 103, 104, 105, 106, 108, 109, 111, 112, 113, 116, 120, 121, 124, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 157, 159, 168, 169, 171, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 194, 195, 198, 201, 203, 205, 206, 207, 212, 214, 215, 216, 220, 222, 224, 227, 235, 236, 240, 241, 242, 248, 251, 252, 254, 256, 257, 264, 265, 266, 267, 268, 269, 270, 275, 279, 281, 282, 283, 285], "aim": [1, 7, 104, 107, 140, 168, 178, 181, 215, 242], "we": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 59, 66, 67, 69, 72, 73, 79, 86, 87, 89, 92, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 248, 250, 252, 254, 256, 257, 258, 264, 265, 266, 268, 269, 270, 272, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286], "focus": [1, 3, 95, 104, 107, 131, 133, 174, 183, 195, 242], "which": [1, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 34, 35, 38, 39, 40, 41, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 59, 60, 64, 66, 67, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 195, 197, 198, 200, 201, 204, 205, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 228, 231, 232, 233, 234, 235, 236, 239, 242, 248, 250, 251, 252, 253, 254, 256, 257, 264, 266, 267, 268, 269, 270, 272, 276, 277, 279, 280, 281, 282, 283, 285, 286], "i": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 66, 67, 69, 72, 76, 77, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 119, 120, 122, 124, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 157, 158, 159, 160, 161, 162, 165, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 196, 197, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 212, 213, 215, 216, 217, 218, 219, 221, 222, 224, 227, 229, 230, 231, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 285, 287], "rel": [1, 6, 7, 95, 103, 127, 142, 160, 165, 181, 183, 198, 206, 242], "straightforward": [1, 6, 7, 19, 20, 53, 94, 97, 102, 104, 105, 159, 171, 194, 198], "deep": [1, 7, 14, 15, 38, 50, 53, 56, 73, 76, 77, 97, 98, 99, 102, 104, 108, 110, 111, 120, 130, 132, 133, 136, 144, 145, 146, 147, 151, 159, 160, 161, 169, 175, 178, 183, 190, 195, 199, 228, 230, 231, 242, 248, 254, 266, 267, 272, 285, 287], "determinist": [1, 13, 16, 139, 154, 177, 178, 266, 267], "gradient": [1, 4, 7, 12, 13, 15, 16, 18, 19, 39, 46, 47, 50, 53, 56, 60, 64, 66, 67, 69, 72, 76, 77, 94, 97, 99, 102, 103, 104, 105, 106, 108, 112, 120, 127, 131, 136, 137, 138, 141, 142, 144, 146, 148, 149, 151, 153, 157, 160, 161, 168, 175, 177, 179, 180, 181, 184, 188, 190, 195, 212, 226, 234, 250, 255, 263, 271, 286, 287], "simpl": [1, 3, 4, 6, 7, 11, 14, 17, 19, 20, 23, 27, 50, 53, 55, 58, 60, 71, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 113, 116, 120, 121, 130, 132, 136, 137, 142, 143, 146, 148, 153, 155, 159, 160, 165, 170, 171, 173, 175, 177, 179, 180, 181, 182, 184, 185, 187, 192, 194, 195, 201, 216, 219, 222, 228, 230, 231, 234, 236, 239, 241, 242, 252, 256, 265, 266, 267, 269, 279, 282, 283, 286, 287], "continu": [1, 6, 53, 57, 89, 92, 97, 102, 104, 109, 112, 139, 140, 141, 145, 149, 153, 177, 181, 183, 187, 192, 203, 204, 212, 214, 215, 222, 235, 252, 254, 257, 267, 268, 269, 270, 272], "control": [1, 11, 12, 16, 34, 36, 39, 46, 70, 74, 87, 89, 94, 104, 114, 115, 116, 117, 124, 130, 136, 138, 139, 140, 142, 143, 153, 157, 169, 177, 178, 179, 192, 221, 235, 248, 252, 271, 272, 274, 287], "It": [1, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 34, 44, 46, 47, 48, 50, 53, 55, 56, 79, 80, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 116, 121, 127, 135, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 165, 168, 169, 170, 171, 175, 178, 179, 181, 183, 185, 186, 187, 189, 190, 193, 194, 195, 197, 198, 200, 201, 203, 217, 222, 224, 226, 232, 233, 234, 236, 252, 253, 265, 267, 270, 275, 277, 279, 281, 282, 285], "consist": [1, 3, 4, 7, 16, 17, 27, 34, 35, 36, 39, 46, 104, 106, 112, 139, 141, 149, 158, 161, 165, 168, 177, 178, 182, 183, 187, 191, 195, 198, 200, 201, 203, 214, 215, 231, 252, 257, 267], "learn": [1, 4, 7, 15, 16, 18, 20, 21, 34, 35, 36, 39, 40, 41, 43, 44, 46, 48, 50, 53, 55, 56, 57, 58, 59, 60, 64, 73, 76, 77, 79, 86, 88, 90, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 121, 122, 124, 130, 131, 133, 134, 135, 136, 137, 138, 140, 143, 144, 145, 146, 149, 150, 151, 153, 154, 159, 160, 162, 166, 168, 169, 170, 173, 175, 176, 180, 183, 184, 185, 188, 190, 191, 194, 195, 197, 198, 199, 201, 204, 205, 212, 213, 214, 215, 216, 217, 220, 221, 222, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 242, 248, 250, 256, 264, 267, 271, 272, 275, 276, 277, 280, 282, 286, 287], "parametr": [1, 2, 20, 131, 136, 177, 184, 222, 287], "an": [1, 2, 3, 6, 7, 8, 9, 11, 13, 14, 15, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 69, 71, 73, 79, 86, 87, 89, 91, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 119, 120, 127, 130, 131, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 197, 198, 200, 201, 204, 205, 206, 207, 212, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 228, 230, 232, 233, 234, 236, 239, 240, 241, 242, 248, 250, 251, 252, 253, 254, 255, 257, 258, 263, 264, 266, 267, 269, 271, 272, 274, 276, 279, 280, 281, 282, 283, 287], "action": [1, 23, 99, 103, 108, 112, 137, 138, 161, 175, 177, 178, 179, 180, 181, 187, 201, 257, 266, 271, 282], "pair": [1, 7, 50, 53, 56, 95, 144, 145, 147, 170, 177, 178, 183, 187, 197, 200, 231, 248, 266], "output": [1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 16, 18, 19, 20, 23, 34, 35, 39, 43, 46, 47, 48, 50, 52, 53, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 124, 127, 137, 138, 139, 141, 142, 144, 145, 146, 151, 153, 154, 155, 157, 159, 160, 162, 165, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 188, 190, 192, 194, 197, 198, 200, 201, 203, 205, 207, 216, 217, 219, 222, 227, 228, 230, 232, 235, 239, 240, 241, 250, 252, 254, 257, 258, 265, 267, 275, 283, 286], "maxim": [1, 16, 56, 79, 86, 104, 106, 143, 161, 178, 192, 267, 285], "given": [1, 4, 7, 11, 12, 14, 16, 18, 20, 34, 36, 39, 43, 44, 46, 52, 53, 56, 59, 79, 86, 89, 95, 99, 103, 104, 107, 108, 111, 112, 121, 138, 144, 145, 153, 155, 157, 160, 161, 162, 170, 175, 177, 178, 180, 181, 183, 192, 194, 195, 197, 204, 215, 222, 240, 252, 258, 267, 278, 282, 286], "certain": [1, 6, 7, 12, 13, 17, 53, 59, 95, 108, 132, 138, 141, 142, 147, 157, 160, 162, 177, 182, 192, 194, 195, 203, 212, 215, 217, 250, 254, 278, 279, 282, 285], "what": [1, 2, 3, 4, 6, 11, 16, 18, 22, 23, 34, 35, 36, 46, 48, 49, 57, 58, 59, 64, 79, 91, 92, 95, 97, 99, 102, 103, 105, 106, 108, 109, 111, 113, 117, 122, 124, 135, 136, 138, 140, 141, 142, 143, 145, 146, 149, 150, 153, 154, 161, 162, 168, 173, 175, 177, 178, 179, 182, 188, 190, 191, 194, 195, 197, 198, 201, 204, 214, 221, 230, 233, 251, 252, 253, 254, 255, 256, 263, 266, 267, 271, 282, 287], "how": [1, 2, 4, 6, 7, 8, 11, 12, 14, 16, 18, 19, 20, 22, 23, 34, 36, 39, 40, 41, 46, 47, 48, 50, 53, 54, 55, 56, 59, 60, 61, 79, 86, 89, 91, 92, 94, 95, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 127, 130, 131, 132, 133, 134, 135, 136, 140, 142, 143, 144, 145, 146, 148, 149, 151, 153, 154, 155, 157, 158, 159, 161, 162, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 212, 213, 214, 215, 216, 217, 219, 220, 222, 228, 231, 233, 235, 239, 240, 242, 250, 251, 252, 255, 256, 257, 263, 264, 266, 267, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287], "write": [1, 4, 8, 9, 11, 12, 18, 21, 47, 53, 64, 67, 101, 105, 106, 107, 108, 112, 120, 122, 127, 133, 135, 136, 140, 142, 143, 148, 149, 151, 154, 157, 159, 165, 169, 171, 174, 177, 180, 181, 183, 187, 190, 192, 194, 198, 203, 204, 215, 219, 223, 226, 227, 234, 251, 252, 253, 254, 258, 267, 282, 287], "custom": [1, 7, 11, 13, 20, 21, 53, 56, 67, 70, 74, 95, 112, 119, 122, 131, 133, 135, 136, 139, 143, 154, 161, 171, 177, 180, 184, 190, 191, 192, 195, 198, 200, 219, 222, 224, 239, 241, 242, 248, 251, 255, 264, 267, 275, 278, 279, 287], "its": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 34, 35, 39, 44, 46, 50, 53, 55, 56, 57, 59, 72, 86, 94, 95, 97, 99, 102, 104, 106, 108, 109, 111, 112, 114, 119, 120, 121, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 151, 153, 154, 155, 157, 158, 159, 161, 162, 168, 169, 173, 175, 177, 178, 179, 180, 181, 183, 187, 188, 192, 194, 195, 205, 214, 215, 217, 221, 222, 224, 227, 228, 234, 236, 241, 248, 251, 252, 254, 256, 257, 264, 267, 268, 269, 270, 286], "includ": [1, 2, 3, 4, 6, 7, 8, 11, 16, 17, 18, 27, 39, 40, 43, 52, 53, 57, 59, 64, 73, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 112, 114, 116, 117, 119, 131, 141, 143, 144, 145, 146, 148, 149, 151, 153, 154, 159, 161, 171, 173, 174, 175, 177, 180, 183, 187, 188, 191, 192, 194, 195, 197, 198, 203, 205, 212, 214, 216, 219, 221, 227, 232, 234, 235, 240, 241, 242, 248, 250, 251, 252, 254, 257, 264, 267, 277, 279, 280, 285], "design": [1, 6, 7, 16, 20, 27, 56, 60, 79, 89, 95, 111, 112, 145, 151, 154, 171, 177, 178, 179, 181, 182, 187, 188, 194, 200, 201, 212, 213, 214, 219, 222, 226, 228, 240, 252, 254, 267, 275, 279, 282, 285], "effici": [1, 6, 12, 14, 17, 20, 34, 53, 55, 79, 86, 102, 104, 108, 111, 130, 131, 137, 138, 141, 143, 151, 153, 154, 160, 165, 175, 177, 181, 182, 187, 190, 195, 203, 206, 215, 216, 217, 222, 223, 233, 252, 256, 275, 279, 285, 287], "store": [1, 6, 7, 19, 20, 23, 34, 35, 36, 40, 41, 43, 46, 52, 55, 57, 72, 92, 94, 101, 102, 105, 106, 108, 111, 112, 114, 120, 140, 142, 143, 145, 153, 154, 159, 161, 162, 169, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 194, 195, 201, 205, 215, 216, 222, 257, 266, 267, 276, 277, 283], "them": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 16, 20, 22, 23, 34, 36, 39, 46, 47, 50, 52, 53, 55, 57, 59, 64, 72, 92, 94, 95, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 116, 117, 120, 121, 130, 131, 136, 138, 139, 141, 143, 144, 145, 147, 148, 153, 154, 155, 158, 159, 160, 165, 168, 169, 170, 171, 175, 176, 178, 179, 180, 181, 190, 191, 192, 194, 197, 198, 201, 205, 214, 216, 217, 221, 222, 224, 231, 240, 241, 242, 251, 252, 256, 264, 266, 267, 271, 276, 277, 285], "trajectori": [1, 16, 154, 177, 178], "transit": [1, 16, 89, 91, 105, 154, 171, 178], "assum": [1, 2, 7, 8, 11, 12, 16, 17, 23, 38, 46, 47, 55, 58, 79, 94, 97, 98, 104, 105, 107, 109, 112, 117, 141, 142, 144, 145, 153, 154, 169, 175, 177, 180, 182, 183, 197, 214, 215, 217, 234, 256, 257, 264, 266, 282], "have": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 61, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 226, 227, 228, 231, 233, 234, 235, 236, 239, 240, 241, 248, 251, 252, 253, 254, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 279, 280, 281, 282, 285, 286], "complet": [1, 6, 7, 17, 38, 89, 92, 94, 97, 105, 106, 108, 117, 136, 138, 140, 141, 143, 144, 146, 148, 153, 171, 173, 175, 176, 177, 180, 190, 192, 197, 203, 205, 214, 215, 219, 250, 267, 281, 282], "ppo": [1, 133, 136, 184, 287], "give": [1, 2, 6, 7, 13, 16, 20, 39, 48, 50, 53, 54, 56, 79, 94, 95, 97, 99, 104, 106, 108, 109, 111, 112, 121, 145, 149, 155, 158, 159, 160, 161, 170, 176, 180, 183, 187, 190, 192, 194, 195, 198, 213, 217, 222, 240, 252], "compon": [1, 6, 7, 11, 12, 16, 56, 89, 99, 104, 108, 121, 131, 135, 136, 143, 144, 146, 154, 161, 177, 181, 185, 187, 191, 192, 194, 198, 217, 228, 277], "depend": [1, 6, 7, 11, 13, 50, 54, 56, 79, 86, 89, 94, 95, 101, 102, 104, 105, 109, 112, 141, 143, 144, 147, 148, 153, 154, 157, 158, 160, 161, 171, 174, 176, 177, 180, 187, 192, 198, 205, 214, 220, 227, 228, 230, 240, 252, 253, 258, 264, 267, 272, 285], "tensordict": [1, 16, 154, 161, 171, 177], "nn": [1, 2, 6, 7, 8, 13, 14, 15, 16, 17, 19, 20, 22, 23, 39, 40, 41, 46, 47, 48, 50, 53, 59, 70, 73, 74, 92, 94, 97, 101, 103, 106, 111, 116, 119, 122, 127, 131, 136, 137, 138, 139, 141, 142, 144, 145, 146, 147, 151, 154, 157, 160, 165, 169, 170, 173, 177, 178, 179, 180, 181, 182, 184, 188, 190, 192, 194, 195, 200, 201, 213, 216, 217, 222, 224, 230, 232, 233, 234, 236, 240, 241, 242, 248, 251, 254, 255, 257, 258, 263, 267, 268, 269, 271, 272, 275, 283, 286, 287], "tensordictmodul": [1, 154, 177], "although": [1, 14, 19, 46, 53, 105, 106, 111, 112, 114, 117, 140, 142, 161, 169, 171, 180, 192, 194, 240], "should": [1, 2, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 19, 22, 23, 34, 46, 47, 53, 54, 55, 56, 57, 59, 73, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 127, 135, 136, 138, 139, 140, 142, 143, 146, 148, 151, 153, 154, 155, 158, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 188, 190, 191, 192, 194, 195, 197, 203, 204, 205, 207, 212, 213, 214, 219, 221, 226, 227, 233, 234, 240, 248, 251, 252, 257, 265, 266, 267, 270, 271, 278, 282, 285], "suffici": [1, 7, 53, 56, 104, 105, 127, 149, 151, 168, 171, 194], "transpar": [1, 14, 95, 106, 154, 180, 227, 235, 241, 276], "understood": [1, 4, 18, 279], "without": [1, 6, 7, 11, 12, 16, 18, 20, 34, 53, 57, 59, 99, 102, 104, 105, 116, 136, 137, 139, 141, 142, 145, 146, 153, 157, 158, 160, 161, 162, 168, 171, 174, 175, 176, 177, 178, 179, 182, 187, 190, 194, 204, 212, 214, 215, 217, 221, 222, 231, 233, 236, 241, 251, 256, 258, 264, 267, 277, 278, 280, 286], "understand": [1, 2, 4, 7, 9, 17, 46, 47, 56, 61, 86, 89, 94, 96, 97, 98, 99, 101, 102, 103, 105, 108, 112, 113, 117, 127, 131, 136, 139, 142, 143, 144, 145, 148, 153, 157, 159, 171, 183, 190, 194, 195, 199, 204, 213, 216, 233, 236, 248, 250, 265, 269, 272, 276, 277, 279, 281, 282, 285], "class": [1, 2, 6, 7, 11, 12, 15, 17, 23, 27, 34, 36, 38, 40, 41, 47, 50, 53, 56, 57, 69, 71, 79, 87, 89, 95, 97, 99, 101, 102, 103, 106, 107, 111, 112, 117, 120, 121, 127, 136, 137, 138, 139, 143, 144, 146, 148, 149, 151, 153, 154, 158, 159, 161, 162, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 190, 194, 197, 200, 203, 212, 213, 214, 216, 217, 224, 232, 233, 234, 236, 240, 242, 248, 250, 252, 254, 258, 266, 270, 272, 282, 283], "do": [1, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 34, 35, 41, 50, 53, 54, 55, 56, 58, 66, 67, 73, 89, 92, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 120, 121, 124, 131, 136, 137, 141, 142, 143, 144, 150, 151, 153, 154, 155, 158, 159, 160, 161, 165, 168, 169, 171, 174, 175, 176, 177, 178, 181, 183, 188, 190, 194, 195, 197, 198, 201, 203, 205, 213, 214, 215, 217, 221, 222, 224, 226, 234, 242, 248, 251, 252, 253, 256, 264, 265, 266, 267, 268, 270, 271, 279, 280, 281], "sota": 1, "implement": [1, 2, 3, 6, 7, 8, 12, 13, 14, 15, 16, 17, 20, 27, 35, 36, 38, 46, 48, 50, 53, 55, 59, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 89, 94, 97, 103, 111, 112, 113, 120, 131, 132, 133, 136, 139, 141, 142, 144, 146, 148, 153, 154, 155, 157, 159, 160, 161, 162, 165, 170, 171, 173, 175, 177, 178, 181, 184, 187, 191, 194, 195, 197, 198, 200, 201, 203, 206, 213, 215, 216, 217, 219, 221, 222, 227, 228, 233, 240, 241, 242, 252, 256, 264, 267, 275, 276, 278, 279, 282, 285, 287], "rather": [1, 15, 53, 56, 73, 79, 89, 99, 102, 104, 111, 112, 121, 136, 145, 147, 159, 169, 170, 171, 177, 190, 194, 198, 203, 205, 212, 228, 252, 267, 276, 280], "provid": [1, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 27, 35, 36, 47, 53, 55, 56, 59, 60, 79, 86, 87, 89, 92, 94, 95, 97, 102, 103, 104, 105, 106, 112, 113, 116, 117, 120, 121, 132, 135, 136, 138, 140, 141, 142, 143, 149, 150, 151, 153, 154, 158, 159, 160, 161, 171, 175, 176, 177, 179, 180, 182, 187, 190, 191, 192, 194, 195, 197, 198, 203, 214, 215, 220, 222, 224, 226, 228, 234, 235, 239, 240, 241, 242, 248, 250, 251, 252, 254, 256, 257, 265, 266, 267, 272, 277, 280, 281, 282, 285], "high": [1, 2, 6, 7, 17, 23, 47, 53, 56, 57, 59, 61, 64, 86, 89, 99, 106, 111, 114, 119, 131, 136, 137, 138, 141, 143, 146, 147, 153, 177, 184, 187, 188, 190, 194, 195, 206, 215, 219, 220, 232, 266, 267, 279, 285, 286, 287], "level": [1, 2, 4, 6, 7, 18, 20, 23, 47, 53, 57, 59, 61, 64, 72, 99, 107, 114, 120, 136, 137, 138, 141, 146, 149, 151, 153, 157, 159, 162, 166, 182, 183, 184, 187, 190, 192, 194, 195, 198, 219, 220, 222, 232, 235, 236, 242, 276, 286, 287], "illustr": [1, 23, 35, 47, 50, 60, 127, 141, 142, 143, 155, 171, 178, 188, 190, 197, 214, 215, 236, 248, 250, 257, 264], "": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 61, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 153, 154, 155, 157, 158, 159, 160, 162, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 205, 206, 207, 212, 214, 215, 217, 220, 221, 222, 224, 226, 228, 230, 232, 233, 234, 235, 236, 240, 250, 251, 252, 254, 256, 257, 264, 265, 266, 267, 269, 270, 271, 272, 276, 277, 279, 285, 286], "librari": [1, 3, 4, 6, 7, 8, 9, 11, 14, 16, 18, 22, 36, 40, 47, 54, 55, 61, 64, 92, 95, 112, 116, 117, 133, 136, 140, 143, 147, 148, 158, 171, 173, 174, 176, 177, 181, 187, 195, 198, 203, 207, 216, 225, 227, 228, 236, 240, 241, 248, 272, 279, 281], "featur": [1, 7, 8, 12, 13, 14, 16, 23, 36, 40, 44, 53, 54, 55, 56, 86, 87, 89, 94, 97, 99, 101, 102, 104, 105, 111, 112, 116, 120, 136, 137, 142, 146, 154, 159, 160, 161, 168, 171, 174, 176, 177, 181, 182, 188, 192, 194, 197, 198, 206, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 232, 239, 240, 248, 250, 254, 256, 264, 266, 267, 270, 271, 272, 276, 279, 282], "context": [1, 2, 6, 11, 16, 19, 20, 46, 53, 79, 94, 99, 111, 112, 119, 132, 136, 141, 146, 157, 169, 171, 177, 180, 181, 182, 183, 187, 192, 198, 204, 206, 216, 220, 222, 227, 232, 235, 251, 253, 256, 257, 258, 267, 280, 282, 283, 285], "bash": [1, 22, 161, 178, 248], "pip3": [1, 22, 54, 138, 154, 171, 177, 178, 187, 195, 205], "instal": [1, 4, 6, 7, 11, 20, 27, 38, 54, 55, 57, 59, 61, 92, 98, 101, 112, 116, 137, 138, 141, 144, 145, 149, 150, 153, 154, 157, 158, 161, 166, 171, 174, 177, 178, 179, 183, 187, 190, 192, 197, 203, 204, 205, 221, 227, 240, 248, 250, 252, 254, 257, 266, 268, 269, 270, 272, 279, 285], "mujoco": [1, 154, 177], "glfw": 1, "cuda": [1, 7, 11, 12, 13, 14, 17, 20, 22, 23, 27, 35, 40, 43, 46, 47, 48, 57, 58, 59, 66, 67, 77, 79, 87, 92, 102, 106, 112, 119, 120, 121, 127, 130, 135, 136, 137, 138, 139, 140, 141, 144, 147, 149, 150, 151, 153, 162, 168, 169, 173, 174, 177, 178, 179, 180, 181, 182, 187, 190, 192, 195, 201, 203, 204, 205, 206, 216, 217, 222, 230, 231, 233, 234, 236, 239, 251, 252, 253, 257, 271, 277, 280, 281, 282, 283, 286], "avail": [1, 2, 3, 4, 6, 7, 12, 14, 17, 20, 22, 23, 34, 35, 36, 39, 40, 41, 43, 46, 47, 52, 53, 54, 55, 56, 57, 66, 79, 92, 95, 97, 99, 102, 103, 104, 108, 112, 114, 120, 127, 138, 142, 144, 153, 154, 157, 161, 162, 171, 175, 176, 177, 178, 181, 182, 183, 187, 190, 191, 194, 195, 197, 203, 219, 220, 222, 226, 232, 234, 241, 248, 250, 252, 253, 254, 267, 268, 269, 270, 272, 281, 283], "seri": [1, 7, 17, 56, 57, 58, 59, 60, 86, 96, 99, 102, 103, 132, 136, 140, 144, 145, 149, 150, 158, 166, 175, 177, 183, 198, 199, 214, 240, 285], "easili": [1, 6, 14, 23, 27, 35, 48, 64, 79, 95, 102, 103, 104, 112, 119, 120, 121, 138, 141, 143, 144, 151, 153, 158, 159, 165, 175, 177, 178, 181, 190, 192, 194, 197, 201, 205, 219, 220, 224, 233, 234, 236, 242, 252, 269], "reusabl": [1, 7], "swappabl": 1, "signatur": [1, 6, 11, 12, 16, 17, 117, 153, 169, 180, 191, 194, 283], "main": [1, 3, 6, 7, 13, 19, 23, 39, 56, 57, 59, 92, 104, 112, 117, 120, 137, 138, 144, 149, 153, 159, 171, 178, 179, 180, 181, 185, 194, 195, 197, 198, 205, 206, 220, 226, 227, 233, 241, 242, 248, 267, 283, 286], "characterist": [1, 16, 46, 146, 158, 160, 161, 176, 182, 194, 282], "thei": [1, 3, 6, 7, 11, 12, 14, 16, 18, 19, 23, 35, 36, 43, 47, 52, 53, 56, 59, 79, 86, 89, 94, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 138, 142, 143, 144, 145, 148, 151, 153, 154, 159, 160, 162, 168, 169, 177, 178, 179, 181, 183, 190, 194, 195, 198, 200, 207, 212, 213, 214, 215, 217, 224, 228, 234, 236, 241, 252, 256, 257, 265, 266, 269, 270], "copi": [1, 6, 7, 14, 22, 38, 43, 47, 48, 54, 59, 79, 86, 94, 98, 103, 104, 119, 121, 124, 136, 137, 142, 147, 151, 153, 154, 158, 161, 169, 180, 187, 190, 191, 194, 201, 203, 219, 227, 232, 233, 239, 240, 256, 267], "loss_modul": [1, 177], "whatev": [1, 11, 97, 102, 103, 106, 108, 112, 121, 248], "need": [1, 3, 4, 6, 7, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 64, 66, 67, 71, 86, 87, 92, 95, 97, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 121, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 194, 195, 197, 200, 203, 204, 205, 212, 216, 217, 221, 222, 224, 227, 232, 233, 234, 236, 240, 241, 242, 248, 251, 252, 254, 257, 264, 265, 266, 267, 268, 269, 270, 272, 276, 280, 281, 282], "follow": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 34, 35, 36, 38, 39, 43, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 79, 86, 87, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 121, 124, 127, 136, 137, 138, 139, 141, 142, 143, 146, 149, 150, 151, 153, 154, 158, 159, 160, 161, 162, 166, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 206, 213, 215, 216, 217, 219, 221, 222, 224, 226, 227, 234, 236, 240, 241, 248, 251, 254, 256, 257, 258, 264, 265, 272, 275, 276, 277, 279, 281, 282, 285], "convent": [1, 16, 56, 112, 121, 154, 190, 198, 252], "torch": [1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 35, 36, 37, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 64, 66, 67, 71, 77, 79, 89, 92, 94, 95, 97, 101, 102, 103, 104, 106, 109, 111, 114, 116, 117, 119, 120, 122, 127, 130, 131, 135, 136, 137, 138, 139, 140, 141, 145, 148, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 190, 195, 197, 200, 201, 203, 205, 206, 212, 213, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 231, 232, 233, 234, 236, 237, 240, 241, 242, 248, 253, 254, 255, 257, 258, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 284, 286, 287], "receiv": [1, 7, 16, 19, 59, 92, 102, 108, 120, 153, 171, 173, 177, 179, 180, 181, 192, 195, 203, 251, 254, 267], "input": [1, 2, 4, 6, 7, 8, 11, 12, 14, 15, 16, 18, 19, 34, 35, 38, 39, 43, 46, 47, 48, 50, 52, 53, 60, 64, 66, 67, 69, 71, 72, 73, 76, 77, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 132, 137, 138, 141, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 157, 159, 160, 161, 162, 165, 168, 170, 173, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 197, 200, 201, 205, 215, 217, 219, 222, 226, 227, 228, 230, 232, 234, 240, 241, 242, 250, 251, 254, 257, 258, 270, 276, 280, 282, 283, 285], "all": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 34, 35, 36, 39, 40, 43, 44, 46, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 64, 79, 86, 89, 94, 95, 97, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 162, 165, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 197, 200, 201, 203, 204, 205, 212, 213, 215, 217, 219, 220, 221, 222, 224, 226, 227, 232, 235, 239, 241, 242, 248, 250, 252, 254, 256, 258, 264, 265, 266, 268, 269, 270, 271, 272, 276, 277, 279, 280, 282, 283, 285, 286, 287], "necessari": [1, 4, 6, 7, 11, 12, 14, 17, 22, 23, 27, 41, 47, 56, 57, 59, 89, 92, 102, 103, 105, 112, 121, 137, 138, 141, 147, 151, 161, 173, 177, 179, 180, 181, 187, 194, 200, 201, 214, 217, 219, 221, 251, 267, 272, 280], "inform": [1, 2, 4, 6, 9, 11, 12, 16, 18, 34, 48, 53, 57, 79, 86, 92, 94, 99, 101, 102, 104, 108, 109, 111, 121, 137, 142, 143, 144, 145, 151, 153, 154, 157, 158, 161, 176, 177, 178, 180, 182, 183, 187, 188, 190, 192, 194, 195, 197, 200, 203, 204, 205, 215, 217, 219, 224, 226, 227, 228, 234, 235, 236, 248, 251, 252, 266, 267, 269, 270, 280, 283, 285], "return": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 22, 23, 35, 36, 40, 43, 48, 50, 53, 55, 56, 79, 86, 94, 95, 101, 102, 103, 104, 106, 108, 109, 112, 114, 117, 119, 121, 137, 138, 139, 141, 145, 146, 148, 151, 153, 154, 157, 159, 160, 161, 162, 165, 169, 173, 174, 176, 177, 178, 179, 180, 181, 182, 187, 188, 190, 192, 194, 195, 197, 200, 206, 207, 212, 214, 216, 217, 219, 221, 222, 226, 227, 230, 232, 233, 234, 236, 240, 241, 242, 248, 250, 252, 254, 257, 258, 266, 277, 280, 282, 283], "replay_buff": [1, 177], "sampl": [1, 4, 7, 11, 35, 36, 39, 40, 43, 47, 50, 52, 53, 55, 56, 59, 64, 92, 97, 99, 101, 102, 104, 121, 127, 131, 136, 137, 144, 147, 153, 160, 161, 168, 169, 177, 178, 179, 181, 184, 190, 194, 197, 198, 217, 226, 230, 250, 257, 266, 267, 280, 287], "loss_dict": 1, "instanc": [1, 6, 7, 13, 14, 16, 35, 41, 48, 57, 58, 59, 64, 86, 92, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 113, 120, 137, 138, 142, 143, 146, 149, 150, 151, 154, 159, 161, 171, 173, 177, 179, 180, 181, 192, 221, 224, 239, 240, 241, 248, 251, 257, 265, 266, 267, 272, 282, 285, 286], "written": [1, 4, 6, 7, 8, 11, 12, 16, 18, 89, 101, 107, 112, 113, 148, 154, 158, 165, 169, 170, 173, 182, 187, 190, 203, 204, 205, 212, 241, 265, 277, 279, 283], "under": [1, 6, 11, 22, 23, 34, 50, 53, 54, 56, 58, 60, 64, 101, 104, 106, 119, 120, 139, 141, 142, 146, 153, 160, 161, 169, 171, 175, 181, 187, 188, 197, 200, 204, 213, 215, 232, 234, 235, 242, 248, 251, 276, 279], "loss_": 1, "smth": 1, "where": [1, 3, 4, 7, 11, 13, 14, 15, 16, 19, 20, 22, 27, 34, 36, 50, 53, 55, 64, 67, 72, 87, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 120, 136, 138, 141, 143, 144, 145, 148, 150, 151, 153, 155, 159, 162, 165, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 182, 183, 188, 192, 194, 195, 197, 198, 200, 201, 203, 205, 212, 215, 216, 217, 222, 233, 236, 248, 251, 252, 254, 264, 265, 266, 270, 282, 285], "string": [1, 4, 8, 11, 17, 53, 102, 114, 143, 144, 145, 154, 175, 177, 183, 190, 195, 203, 248, 252, 266], "describ": [1, 6, 7, 11, 12, 16, 17, 19, 23, 41, 43, 52, 53, 56, 64, 79, 97, 104, 114, 117, 124, 132, 153, 165, 173, 177, 178, 181, 187, 190, 194, 195, 220, 224, 236, 239, 252, 285], "addit": [1, 2, 4, 6, 8, 11, 13, 17, 20, 23, 54, 59, 79, 95, 102, 104, 109, 112, 114, 119, 138, 141, 142, 144, 151, 153, 155, 159, 162, 175, 179, 180, 183, 188, 191, 192, 194, 198, 212, 213, 214, 215, 219, 220, 221, 222, 227, 233, 240, 241, 252, 257, 267, 278, 279, 281, 282, 285], "kei": [1, 4, 7, 8, 11, 13, 16, 17, 53, 86, 107, 111, 114, 119, 121, 124, 138, 139, 140, 143, 154, 161, 171, 176, 177, 179, 182, 183, 187, 188, 190, 194, 195, 198, 201, 217, 221, 222, 230, 231, 239, 241, 256, 265, 267, 268, 278, 279, 283], "mai": [1, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 39, 53, 54, 56, 72, 79, 89, 94, 95, 97, 99, 102, 106, 113, 117, 120, 121, 137, 140, 141, 142, 143, 146, 147, 148, 153, 154, 155, 157, 159, 160, 165, 168, 169, 171, 176, 177, 180, 183, 187, 190, 192, 194, 198, 200, 203, 214, 217, 222, 224, 228, 230, 234, 236, 252, 257, 267, 270, 277, 279, 280, 282], "metric": [1, 20, 92, 101, 102, 104, 119, 138, 187, 190, 197, 222, 242, 248, 252, 265], "log": [1, 22, 39, 53, 54, 56, 57, 101, 105, 106, 109, 111, 112, 137, 140, 143, 150, 176, 177, 179, 181, 187, 188, 190, 194, 195, 216, 231, 235, 242, 271, 277, 283, 285], "dure": [1, 3, 11, 14, 16, 22, 23, 34, 35, 39, 40, 41, 53, 56, 66, 67, 89, 94, 97, 99, 102, 103, 104, 106, 111, 112, 113, 120, 121, 130, 136, 137, 138, 139, 141, 142, 145, 146, 147, 148, 149, 151, 154, 158, 159, 165, 169, 176, 177, 178, 179, 181, 187, 191, 192, 194, 197, 203, 204, 207, 216, 219, 220, 224, 227, 234, 241, 248, 257, 264, 265, 272], "reason": [1, 6, 7, 11, 16, 17, 18, 20, 34, 56, 86, 94, 97, 104, 106, 109, 112, 121, 127, 142, 147, 153, 159, 177, 182, 183, 194, 195, 203, 205, 214, 222, 234, 252, 255, 256, 263, 271, 281, 283, 287], "independ": [1, 53, 111, 112, 160, 161, 165, 180, 212, 221, 239], "let": [1, 2, 4, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 27, 35, 39, 46, 47, 48, 50, 53, 55, 56, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 127, 130, 139, 141, 143, 148, 151, 153, 154, 155, 158, 159, 160, 162, 165, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 201, 205, 207, 212, 213, 217, 222, 230, 234, 236, 240, 250, 252, 254, 256, 257, 264, 265, 266, 267, 270, 272, 281, 282], "user": [1, 3, 6, 8, 16, 20, 22, 23, 27, 44, 47, 53, 54, 86, 87, 89, 95, 104, 108, 117, 124, 130, 138, 139, 140, 141, 144, 145, 151, 159, 162, 171, 179, 181, 182, 183, 187, 190, 194, 195, 197, 198, 200, 201, 212, 213, 214, 215, 221, 222, 228, 232, 233, 234, 235, 236, 241, 242, 248, 257, 271, 272, 274, 276, 277, 278, 283, 285, 287], "differ": [1, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 27, 34, 39, 43, 50, 52, 53, 55, 56, 64, 77, 79, 86, 87, 89, 92, 95, 97, 99, 102, 103, 104, 105, 106, 111, 112, 114, 136, 137, 138, 139, 141, 143, 144, 145, 147, 150, 151, 153, 155, 158, 159, 160, 162, 165, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 192, 194, 195, 198, 200, 203, 205, 206, 212, 213, 214, 215, 216, 217, 222, 224, 227, 233, 234, 235, 236, 239, 240, 248, 252, 255, 257, 263, 265, 266, 267, 271, 272, 277, 280, 282, 285, 286, 287], "set": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 27, 34, 39, 41, 46, 47, 50, 52, 53, 54, 56, 57, 59, 64, 66, 67, 72, 79, 86, 87, 91, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 116, 120, 121, 127, 134, 136, 137, 138, 139, 141, 144, 145, 146, 149, 150, 151, 153, 154, 159, 161, 168, 169, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 192, 194, 195, 197, 198, 212, 214, 216, 217, 219, 221, 222, 227, 228, 233, 234, 236, 240, 241, 242, 248, 252, 253, 256, 264, 266, 268, 270, 277, 283, 285], "sum": [1, 2, 4, 6, 9, 13, 16, 18, 22, 23, 35, 46, 53, 56, 76, 86, 94, 95, 105, 106, 108, 112, 120, 137, 138, 139, 145, 146, 148, 153, 160, 177, 178, 179, 180, 181, 187, 192, 194, 195, 213, 230, 232, 233, 234, 242, 252, 270, 286], "can": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 72, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 207, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 224, 226, 227, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 248, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286], "simpli": [1, 3, 6, 7, 11, 15, 23, 46, 47, 53, 57, 89, 97, 108, 111, 120, 121, 140, 141, 143, 145, 148, 153, 159, 160, 168, 174, 175, 177, 178, 179, 180, 183, 185, 187, 188, 192, 194, 195, 198, 200, 201, 203, 213, 221, 224, 226, 234, 241, 252, 266, 268, 269, 270], "done": [1, 4, 6, 7, 11, 12, 16, 19, 20, 23, 53, 58, 86, 89, 99, 102, 104, 105, 106, 112, 137, 138, 141, 142, 145, 147, 154, 155, 158, 159, 161, 162, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 188, 190, 194, 195, 203, 205, 222, 224, 241, 256, 267, 281, 283], "via": [1, 3, 4, 6, 7, 9, 19, 20, 22, 41, 58, 59, 79, 89, 104, 136, 137, 138, 141, 143, 153, 154, 160, 169, 176, 177, 182, 188, 190, 192, 194, 195, 197, 198, 204, 207, 216, 219, 222, 232, 236, 240, 241, 242, 248, 256, 264, 265, 267, 276, 279], "loss_val": [1, 177], "item": [1, 2, 7, 12, 13, 17, 36, 43, 53, 72, 101, 112, 120, 121, 124, 137, 138, 139, 144, 145, 153, 154, 176, 177, 179, 180, 181, 188, 190, 194, 200, 217, 242, 251, 267], "startswith": [1, 87], "parent": [1, 4, 16, 112, 236], "As": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 19, 23, 41, 46, 53, 54, 56, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 114, 120, 121, 137, 138, 139, 140, 141, 142, 143, 151, 153, 154, 157, 158, 159, 160, 161, 168, 169, 171, 173, 175, 177, 178, 179, 180, 181, 182, 187, 190, 191, 194, 195, 197, 198, 200, 205, 215, 217, 221, 228, 232, 235, 240, 242, 248, 252, 256, 267, 272, 279, 285, 286], "mani": [1, 2, 6, 7, 12, 16, 17, 18, 20, 22, 34, 35, 39, 40, 53, 55, 56, 69, 73, 79, 86, 94, 95, 97, 99, 102, 104, 106, 107, 108, 112, 114, 116, 120, 138, 141, 143, 147, 153, 155, 160, 162, 165, 170, 171, 177, 179, 180, 183, 191, 192, 194, 195, 198, 214, 222, 226, 241, 242, 250, 251, 252, 254, 267, 272, 279, 285], "other": [1, 6, 7, 8, 11, 12, 13, 16, 20, 23, 34, 35, 38, 43, 47, 50, 52, 53, 56, 57, 59, 60, 61, 72, 73, 79, 86, 87, 92, 94, 95, 97, 102, 104, 106, 108, 109, 111, 112, 120, 121, 124, 131, 133, 137, 139, 140, 141, 144, 145, 147, 149, 150, 151, 153, 154, 157, 158, 159, 160, 161, 165, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 191, 192, 194, 195, 197, 198, 200, 203, 205, 212, 213, 214, 215, 217, 222, 224, 234, 236, 251, 252, 254, 256, 257, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 278, 279, 280, 286], "expect": [1, 4, 6, 7, 12, 13, 16, 48, 50, 53, 55, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 113, 121, 127, 140, 143, 147, 151, 154, 160, 161, 168, 169, 175, 176, 177, 178, 179, 180, 182, 190, 194, 195, 197, 200, 203, 219, 235, 241, 248, 250, 251, 252, 257, 264, 267, 280, 282, 286], "ani": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 34, 44, 46, 48, 50, 53, 55, 57, 59, 94, 97, 99, 102, 104, 105, 107, 108, 111, 112, 114, 116, 121, 132, 137, 139, 141, 142, 144, 146, 148, 149, 153, 155, 157, 158, 161, 162, 168, 169, 170, 171, 173, 176, 177, 178, 180, 181, 185, 187, 190, 191, 194, 195, 204, 206, 212, 213, 214, 215, 216, 219, 222, 224, 228, 230, 231, 233, 234, 236, 239, 248, 251, 254, 256, 258, 264, 266, 270, 276, 277, 279, 280, 281, 283, 285], "similar": [1, 3, 4, 6, 11, 12, 13, 16, 17, 23, 43, 52, 53, 86, 87, 95, 97, 99, 102, 104, 105, 111, 112, 117, 120, 141, 144, 148, 153, 154, 169, 177, 179, 180, 181, 182, 183, 187, 188, 190, 194, 197, 200, 204, 212, 213, 214, 215, 216, 217, 240, 251, 252, 266, 267, 276, 282, 286], "structur": [1, 6, 7, 11, 16, 21, 22, 23, 35, 40, 41, 43, 52, 53, 56, 57, 89, 94, 97, 99, 103, 104, 105, 109, 114, 121, 136, 146, 149, 155, 158, 161, 162, 169, 170, 175, 177, 181, 188, 190, 192, 197, 215, 220, 226, 265, 279, 281, 287], "format": [1, 6, 14, 20, 23, 44, 101, 112, 116, 121, 131, 136, 137, 138, 140, 153, 158, 159, 176, 179, 181, 184, 187, 188, 190, 195, 197, 212, 214, 215, 222, 228, 241, 242, 250, 252, 287], "make": [1, 4, 6, 7, 11, 12, 14, 16, 22, 23, 35, 39, 40, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 61, 72, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 116, 117, 121, 124, 127, 131, 136, 137, 138, 139, 141, 143, 144, 145, 146, 147, 151, 153, 154, 158, 159, 160, 161, 168, 169, 171, 174, 175, 177, 178, 179, 180, 181, 183, 188, 190, 191, 192, 194, 195, 197, 198, 201, 203, 205, 212, 213, 214, 215, 217, 226, 232, 234, 235, 236, 240, 241, 250, 251, 252, 256, 258, 265, 266, 267, 276, 277, 279, 282, 283, 287], "possibl": [1, 2, 4, 6, 7, 9, 11, 12, 16, 17, 20, 94, 95, 99, 102, 105, 108, 116, 139, 142, 146, 147, 148, 154, 155, 157, 158, 160, 161, 171, 176, 177, 179, 180, 183, 191, 192, 194, 195, 197, 198, 203, 217, 222, 224, 228, 239, 241, 242, 251, 256, 267, 279, 285], "re": [1, 4, 6, 7, 8, 9, 12, 16, 19, 23, 27, 38, 40, 43, 47, 52, 53, 54, 95, 97, 99, 101, 102, 103, 104, 105, 112, 120, 127, 142, 144, 145, 154, 155, 157, 160, 165, 168, 170, 171, 176, 177, 178, 179, 180, 183, 194, 195, 197, 204, 205, 212, 224, 226, 234, 236, 251, 252, 256, 266, 267], "across": [1, 4, 6, 11, 13, 16, 19, 22, 27, 43, 53, 56, 58, 59, 60, 86, 95, 102, 104, 114, 132, 137, 138, 139, 141, 149, 150, 151, 153, 155, 161, 171, 173, 175, 178, 180, 181, 191, 194, 195, 201, 231, 234, 236, 239, 250, 265, 267, 268, 270, 276, 280, 282, 285, 286], "modal": [1, 171, 250], "complex": [1, 7, 35, 36, 54, 71, 72, 94, 95, 99, 104, 114, 120, 121, 132, 137, 151, 165, 169, 171, 179, 181, 188, 191, 192, 194, 195, 203, 217, 235, 236, 258, 268, 279], "read": [1, 2, 6, 7, 8, 9, 16, 23, 40, 50, 53, 55, 79, 97, 108, 109, 112, 121, 127, 132, 138, 139, 140, 142, 143, 144, 145, 146, 153, 159, 168, 171, 176, 177, 178, 180, 183, 185, 188, 191, 192, 198, 204, 251, 252, 282, 285], "multipl": [1, 4, 6, 11, 12, 13, 16, 18, 19, 20, 22, 23, 43, 48, 52, 53, 57, 58, 59, 60, 64, 69, 86, 92, 94, 95, 99, 101, 102, 103, 104, 108, 112, 120, 132, 137, 139, 141, 142, 143, 144, 145, 151, 153, 155, 159, 161, 171, 173, 176, 177, 179, 180, 181, 183, 187, 188, 190, 192, 194, 195, 198, 201, 203, 205, 216, 217, 222, 228, 234, 240, 251, 252, 257, 266, 267, 268, 281, 285], "entri": [1, 13, 16, 57, 108, 111, 119, 121, 149, 154, 159, 175, 177, 179, 187, 194, 203, 214, 215, 217, 221, 232, 269, 276], "In": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 40, 41, 43, 46, 48, 52, 53, 54, 55, 56, 57, 59, 60, 61, 67, 72, 79, 86, 87, 89, 91, 92, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 131, 132, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 158, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 248, 250, 251, 252, 254, 256, 257, 264, 265, 266, 267, 268, 269, 270, 272, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286], "word": [1, 7, 12, 13, 16, 47, 53, 79, 86, 95, 99, 104, 105, 107, 109, 110, 121, 136, 144, 145, 153, 166, 168, 169, 175, 181, 183, 195, 213, 215, 217, 282, 287], "allow": [1, 2, 6, 7, 8, 11, 12, 13, 14, 16, 23, 27, 34, 35, 36, 46, 53, 54, 55, 56, 57, 86, 87, 89, 92, 94, 95, 99, 102, 104, 106, 108, 109, 111, 112, 113, 114, 120, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 151, 153, 154, 161, 162, 165, 168, 169, 171, 174, 175, 177, 178, 179, 181, 182, 183, 185, 190, 191, 192, 194, 195, 197, 198, 201, 203, 206, 212, 213, 217, 219, 227, 232, 236, 239, 248, 251, 252, 257, 264, 265, 266, 276, 285], "u": [1, 4, 6, 7, 8, 11, 12, 13, 16, 18, 20, 23, 34, 36, 47, 50, 53, 55, 56, 73, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 111, 112, 117, 120, 138, 141, 144, 147, 149, 153, 154, 155, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 176, 177, 178, 180, 183, 188, 190, 191, 192, 194, 195, 198, 205, 212, 213, 215, 217, 219, 222, 226, 230, 250, 252, 254, 256, 264, 266, 280, 283], "oblivi": [1, 177], "type": [1, 4, 6, 7, 11, 12, 16, 22, 23, 43, 52, 53, 54, 79, 86, 89, 95, 97, 98, 101, 103, 108, 112, 114, 117, 132, 137, 138, 141, 143, 155, 159, 170, 171, 174, 175, 177, 179, 180, 181, 182, 187, 190, 192, 194, 198, 200, 212, 216, 219, 224, 228, 232, 233, 234, 241, 242, 248, 250, 264, 265, 267, 268, 275, 278, 283, 285], "being": [1, 3, 4, 6, 7, 12, 14, 16, 20, 50, 53, 56, 86, 95, 103, 104, 105, 106, 108, 112, 114, 127, 138, 141, 143, 147, 153, 154, 169, 171, 173, 175, 177, 178, 180, 192, 194, 195, 213, 214, 217, 222, 224, 233, 241, 252, 256, 267, 281, 285], "run": [1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 50, 52, 55, 56, 60, 61, 64, 67, 72, 76, 77, 86, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 192, 195, 197, 198, 203, 205, 206, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 226, 227, 228, 233, 234, 235, 236, 240, 241, 248, 251, 252, 253, 256, 258, 264, 266, 267, 271, 272, 274, 276, 278, 279, 280, 281, 282, 283, 285, 287], "elementari": [1, 2], "onli": [1, 4, 6, 7, 9, 11, 12, 13, 15, 16, 17, 22, 23, 34, 41, 46, 47, 48, 50, 53, 57, 59, 60, 79, 86, 92, 94, 97, 99, 102, 104, 105, 106, 111, 112, 119, 121, 124, 127, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 204, 205, 212, 213, 214, 215, 216, 217, 219, 220, 221, 224, 226, 227, 230, 231, 232, 236, 239, 248, 251, 252, 257, 264, 267, 268, 269, 272, 276, 279, 280, 282, 285, 286], "those": [1, 4, 6, 7, 9, 12, 13, 16, 20, 34, 41, 46, 92, 94, 102, 105, 111, 112, 117, 140, 141, 142, 144, 155, 158, 168, 173, 174, 175, 181, 183, 188, 190, 194, 195, 199, 205, 213, 222, 224, 226, 227, 228, 234, 242, 248, 251, 252, 266, 276, 279, 281, 285], "keep": [1, 4, 7, 12, 13, 16, 34, 43, 46, 53, 56, 79, 86, 89, 97, 99, 102, 104, 106, 108, 109, 112, 120, 121, 135, 136, 137, 138, 139, 140, 141, 142, 145, 150, 151, 154, 159, 165, 171, 177, 181, 183, 194, 195, 198, 252, 267, 286], "didact": [1, 153], "ll": [1, 4, 6, 7, 11, 12, 18, 20, 23, 35, 36, 38, 43, 52, 53, 54, 81, 82, 83, 84, 92, 94, 95, 97, 99, 101, 102, 103, 105, 112, 114, 139, 144, 145, 151, 153, 154, 155, 157, 160, 165, 168, 170, 176, 177, 178, 180, 183, 188, 194, 195, 198, 205, 212, 214, 216, 222, 230, 231, 239, 252, 278, 283], "displai": [1, 2, 6, 7, 14, 36, 47, 95, 101, 103, 119, 127, 147, 183, 187, 232, 235, 251, 252, 265], "each": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 43, 46, 47, 48, 52, 53, 55, 56, 57, 59, 60, 64, 69, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 116, 119, 120, 121, 127, 132, 136, 137, 138, 139, 141, 143, 144, 145, 146, 148, 149, 150, 151, 153, 154, 155, 157, 158, 160, 161, 162, 165, 168, 169, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 194, 195, 197, 198, 201, 203, 204, 206, 212, 215, 217, 222, 231, 232, 235, 236, 241, 242, 248, 250, 251, 252, 254, 256, 257, 258, 264, 265, 266, 267, 269, 270, 282, 283, 285, 286], "popul": [1, 34, 46, 53, 92, 102, 138, 154, 161, 177, 179, 203, 231, 239, 266, 277], "later": [1, 3, 4, 6, 7, 13, 18, 34, 43, 50, 53, 79, 92, 95, 99, 104, 108, 109, 112, 121, 137, 138, 140, 141, 145, 146, 148, 153, 155, 157, 158, 159, 160, 161, 165, 170, 173, 177, 178, 181, 182, 183, 188, 190, 191, 194, 195, 198, 201, 203, 204, 207, 212, 221, 230, 231, 233, 235, 239, 248, 251, 252, 253, 256, 264, 267, 272, 276, 277, 278, 279, 281, 282, 283], "stage": [1, 16, 19, 99, 112, 173, 206, 216, 227, 232, 233, 239], "start": [1, 6, 7, 13, 19, 20, 22, 23, 27, 34, 38, 46, 47, 53, 54, 56, 57, 58, 59, 64, 79, 92, 94, 95, 98, 99, 102, 103, 104, 107, 108, 112, 113, 114, 117, 130, 132, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 153, 159, 160, 161, 168, 169, 171, 176, 178, 179, 180, 183, 187, 188, 190, 192, 194, 195, 197, 199, 201, 203, 205, 207, 214, 219, 222, 223, 232, 233, 240, 248, 252, 255, 257, 258, 263, 265, 270, 271, 274, 276, 277, 279, 283, 286, 287], "solv": [1, 7, 16, 53, 55, 104, 111, 127, 169, 177, 179, 181, 214, 252, 256, 267], "task": [1, 7, 15, 16, 20, 27, 39, 40, 53, 103, 104, 105, 111, 119, 127, 132, 133, 136, 137, 144, 154, 169, 171, 177, 178, 183, 185, 190, 197, 222, 252, 257, 266, 267, 276, 282, 285], "strategi": [1, 6, 20, 22, 27, 56, 86, 136, 145, 153, 159, 160, 170, 171, 179, 180, 222, 228, 233, 235, 236, 242, 267], "predict": [1, 23, 35, 38, 39, 40, 41, 46, 47, 53, 56, 66, 67, 71, 72, 73, 76, 77, 94, 95, 97, 99, 103, 104, 105, 109, 111, 112, 120, 141, 143, 144, 145, 155, 160, 161, 171, 178, 183, 188, 195, 197, 222, 240, 250, 254, 271, 282], "henc": [1, 16, 20, 43, 46, 52, 86, 137, 142, 151, 162, 165, 171, 174, 177, 179, 181, 195, 222, 240, 241, 252, 282], "our": [1, 2, 3, 4, 6, 7, 9, 11, 12, 14, 19, 20, 23, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 64, 66, 67, 69, 71, 72, 73, 79, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 117, 119, 120, 127, 136, 137, 138, 140, 143, 144, 145, 146, 148, 149, 150, 154, 157, 158, 159, 160, 161, 162, 165, 169, 170, 171, 173, 175, 177, 178, 179, 180, 182, 183, 185, 188, 190, 192, 194, 195, 197, 198, 199, 200, 201, 205, 207, 212, 213, 214, 215, 221, 222, 226, 231, 233, 234, 239, 240, 250, 252, 266, 271, 272, 277, 278, 286], "two": [1, 4, 6, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 34, 36, 39, 40, 43, 44, 46, 52, 53, 54, 56, 61, 79, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 119, 120, 127, 137, 138, 143, 144, 146, 147, 148, 150, 151, 153, 154, 157, 158, 159, 160, 161, 162, 165, 169, 170, 171, 173, 174, 175, 177, 178, 179, 181, 182, 183, 190, 195, 197, 198, 200, 201, 203, 205, 206, 213, 215, 217, 219, 222, 224, 228, 232, 236, 239, 240, 242, 248, 252, 254, 256, 257, 264, 266, 267, 268, 277, 279, 281, 285, 286], "constructor": [1, 7, 12, 13, 14, 71, 73, 89, 99, 103, 120, 137, 138, 151, 171, 174, 175, 177, 179, 181, 215, 224, 251, 252], "both": [1, 2, 6, 7, 11, 12, 13, 14, 16, 19, 23, 27, 36, 53, 55, 56, 64, 79, 86, 89, 95, 102, 103, 104, 111, 112, 119, 120, 138, 139, 141, 143, 147, 150, 151, 153, 157, 159, 160, 162, 165, 171, 175, 177, 179, 180, 181, 182, 183, 191, 194, 195, 197, 198, 200, 205, 206, 212, 215, 216, 232, 233, 234, 236, 240, 241, 242, 248, 250, 251, 252, 264, 266, 276, 277, 282, 285], "compat": [1, 6, 7, 8, 11, 13, 20, 54, 101, 102, 108, 113, 140, 146, 154, 182, 192, 194, 221, 224, 281, 282], "comput": [1, 3, 4, 6, 7, 11, 13, 14, 15, 18, 19, 20, 23, 27, 39, 43, 47, 50, 52, 53, 55, 56, 57, 61, 64, 66, 67, 69, 72, 76, 77, 79, 87, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 112, 114, 116, 120, 131, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 157, 159, 161, 168, 169, 170, 171, 173, 175, 176, 177, 178, 180, 182, 183, 187, 190, 191, 192, 194, 195, 197, 198, 201, 203, 205, 216, 217, 220, 222, 224, 226, 227, 228, 230, 231, 239, 240, 248, 251, 252, 254, 256, 258, 266, 279, 282, 285], "fit": [1, 7, 12, 13, 64, 92, 111, 120, 137, 138, 139, 141, 151, 171, 181, 195, 251, 285], "gener": [1, 6, 11, 12, 13, 16, 19, 20, 22, 27, 41, 46, 47, 53, 55, 57, 76, 77, 86, 89, 94, 95, 97, 101, 102, 103, 104, 106, 108, 111, 112, 113, 120, 122, 124, 127, 131, 133, 136, 141, 142, 144, 146, 151, 153, 155, 159, 160, 161, 162, 165, 166, 168, 169, 170, 171, 175, 177, 179, 181, 182, 183, 184, 185, 187, 188, 190, 192, 194, 195, 197, 198, 203, 204, 205, 206, 207, 212, 213, 214, 216, 217, 219, 222, 228, 233, 234, 239, 240, 241, 242, 248, 257, 266, 269, 277, 281, 282, 283, 285, 287], "crucial": [1, 2, 14, 16, 86, 108, 154, 171, 177, 195, 267], "convert_to_funct": 1, "extract": [1, 6, 53, 56, 79, 101, 104, 127, 136, 144, 145, 157, 159, 170, 177, 183, 192, 194, 197, 232, 239, 254], "convert": [1, 6, 12, 14, 23, 35, 36, 43, 44, 47, 53, 55, 56, 59, 97, 99, 102, 104, 112, 114, 116, 121, 130, 136, 139, 144, 145, 176, 177, 179, 180, 188, 195, 205, 212, 213, 215, 216, 217, 219, 234, 241, 250, 264, 267], "strictli": [1, 102, 177], "speak": [1, 11, 46, 102, 142, 153, 267], "one": [1, 4, 6, 7, 8, 9, 11, 13, 14, 16, 17, 20, 22, 23, 34, 36, 38, 43, 44, 48, 50, 52, 53, 55, 56, 59, 60, 64, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 108, 109, 111, 112, 117, 120, 121, 124, 127, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 194, 195, 197, 200, 203, 204, 205, 212, 213, 214, 216, 217, 222, 226, 233, 234, 235, 236, 252, 254, 256, 257, 267, 268, 270, 279, 280, 281, 282, 285, 286], "perfectli": [1, 16], "howev": [1, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 34, 41, 48, 50, 53, 55, 56, 79, 89, 92, 104, 105, 120, 127, 141, 142, 146, 147, 148, 153, 154, 155, 158, 162, 168, 171, 174, 175, 178, 179, 180, 181, 182, 183, 188, 190, 191, 192, 194, 195, 200, 206, 207, 213, 214, 217, 222, 226, 228, 234, 235, 239, 240, 252, 256, 264, 266, 267, 272, 279, 282, 285], "encourag": [1, 7, 23, 99, 178, 183, 190], "usag": [1, 3, 4, 13, 15, 17, 86, 94, 119, 130, 131, 135, 136, 137, 139, 142, 153, 154, 159, 160, 173, 177, 179, 181, 182, 184, 187, 198, 201, 205, 207, 216, 217, 228, 233, 241, 248, 251, 265, 267, 271, 280, 285, 287], "doe": [1, 2, 4, 6, 7, 11, 15, 16, 17, 18, 23, 34, 44, 46, 50, 76, 77, 79, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 111, 112, 114, 117, 120, 121, 127, 137, 138, 139, 140, 146, 148, 151, 153, 154, 160, 161, 162, 168, 169, 171, 173, 176, 177, 178, 180, 181, 182, 183, 187, 188, 191, 192, 194, 195, 197, 198, 203, 204, 205, 213, 214, 215, 224, 226, 233, 248, 251, 252, 256, 264, 266, 267, 279, 281, 285], "often": [1, 6, 7, 12, 16, 20, 43, 53, 79, 92, 94, 95, 97, 102, 104, 106, 108, 111, 112, 120, 121, 141, 142, 143, 145, 161, 169, 194, 195, 203, 217, 222, 230, 233, 251, 266, 267], "same": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 17, 20, 23, 34, 35, 41, 43, 46, 47, 50, 53, 55, 56, 57, 59, 69, 77, 79, 89, 92, 94, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 137, 138, 139, 140, 141, 142, 144, 146, 147, 150, 151, 153, 155, 157, 159, 160, 161, 162, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 195, 198, 200, 201, 204, 206, 212, 213, 214, 215, 217, 222, 233, 234, 248, 251, 252, 257, 259, 260, 261, 262, 264, 267, 270, 276, 277, 280, 281, 285, 286], "usual": [1, 6, 7, 11, 18, 23, 46, 95, 97, 99, 101, 102, 106, 107, 109, 111, 112, 127, 141, 142, 145, 147, 148, 151, 153, 154, 159, 162, 168, 171, 175, 177, 194, 198, 226, 251, 256, 257, 267, 285], "former": [1, 6, 144, 145, 183], "some": [1, 3, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 34, 35, 36, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 66, 72, 79, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 117, 119, 120, 121, 136, 137, 138, 140, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 157, 158, 159, 160, 165, 168, 170, 171, 173, 175, 177, 178, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 201, 203, 205, 212, 213, 214, 215, 217, 219, 221, 222, 224, 226, 234, 241, 242, 251, 252, 254, 256, 257, 258, 266, 267, 268, 272, 279, 280, 282, 285], "lag": [1, 177], "absolut": [1, 7, 12, 86, 106, 175, 178, 266], "dilut": 1, "move": [1, 6, 9, 14, 28, 29, 30, 31, 32, 33, 35, 40, 43, 46, 50, 52, 80, 93, 94, 106, 112, 137, 138, 139, 141, 150, 151, 154, 156, 168, 169, 171, 174, 178, 180, 181, 186, 187, 189, 193, 197, 208, 211, 213, 227, 232, 233, 234, 240, 252, 266, 267], "averag": [1, 3, 23, 53, 56, 64, 86, 92, 95, 97, 101, 103, 104, 112, 137, 140, 145, 153, 170, 177, 178, 181, 183, 187, 252, 267], "These": [1, 6, 11, 13, 14, 16, 20, 23, 41, 46, 53, 56, 59, 64, 86, 92, 99, 107, 109, 111, 112, 119, 127, 133, 134, 153, 161, 177, 180, 182, 183, 190, 191, 194, 195, 198, 199, 205, 219, 222, 240, 252, 266, 267, 276, 277, 279], "associ": [1, 4, 6, 7, 11, 12, 35, 36, 54, 86, 95, 148, 157, 171, 175, 182, 190, 195, 204, 213, 222, 224, 254, 264, 267, 281], "One": [1, 2, 4, 6, 7, 12, 13, 17, 53, 55, 79, 86, 94, 99, 102, 104, 105, 106, 108, 137, 138, 139, 140, 141, 142, 145, 151, 153, 155, 168, 169, 171, 185, 188, 191, 192, 194, 195, 197, 198, 203, 214, 226, 233, 234, 242, 252, 258, 264, 266, 267, 282], "advantag": [1, 3, 7, 16, 20, 53, 89, 102, 105, 112, 132, 138, 139, 142, 153, 154, 169, 171, 177, 192, 198, 215, 222, 233, 234, 241, 248, 267, 277, 281], "match": [1, 6, 12, 16, 20, 23, 72, 97, 102, 104, 112, 114, 117, 120, 121, 155, 159, 162, 168, 170, 177, 180, 192, 194, 213, 215, 222, 240, 241, 251, 254, 258, 268, 285], "exactli": [1, 6, 11, 12, 14, 20, 34, 46, 55, 56, 97, 108, 111, 112, 114, 120, 154, 159, 169, 194, 195, 222], "current": [1, 4, 6, 7, 11, 12, 13, 14, 16, 17, 23, 35, 40, 43, 53, 56, 66, 79, 86, 95, 104, 112, 120, 127, 137, 138, 140, 142, 143, 144, 145, 153, 154, 157, 161, 162, 170, 171, 173, 175, 177, 178, 179, 180, 181, 182, 183, 187, 194, 195, 198, 200, 203, 212, 214, 215, 217, 234, 240, 257, 267, 276, 279], "configur": [1, 6, 7, 16, 22, 23, 27, 53, 54, 86, 95, 103, 130, 138, 141, 149, 151, 159, 168, 177, 180, 187, 190, 195, 205, 207, 216, 232, 240, 241, 242, 267, 271, 272, 277, 279, 282, 285], "pessimist": [1, 177], "bound": [1, 53, 121, 139, 143, 159, 177, 178, 187, 194, 195, 197, 198, 205, 251, 252, 257, 267, 285], "pai": [1, 12, 48, 53, 140, 267, 280], "attent": [1, 12, 48, 53, 99, 131, 133, 136, 140, 141, 144, 145, 166, 184, 185, 201, 205, 217, 220, 279, 287], "create_target_param": 1, "keyword": [1, 6, 175, 177, 190, 256, 264], "argument": [1, 2, 4, 6, 7, 11, 16, 18, 34, 40, 43, 46, 47, 52, 55, 59, 73, 86, 94, 95, 99, 101, 102, 104, 106, 109, 111, 113, 119, 120, 121, 137, 138, 145, 150, 151, 153, 154, 155, 159, 160, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 187, 190, 192, 194, 195, 200, 201, 203, 214, 216, 226, 227, 232, 235, 239, 251, 252, 256, 257, 264, 265, 267, 268, 279, 285], "below": [1, 2, 4, 7, 12, 13, 14, 16, 19, 22, 23, 27, 36, 41, 43, 46, 48, 52, 55, 56, 57, 58, 59, 60, 61, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 139, 140, 141, 143, 146, 147, 149, 150, 151, 153, 154, 157, 159, 162, 168, 174, 177, 178, 179, 180, 181, 182, 187, 188, 190, 192, 194, 195, 197, 198, 203, 205, 206, 207, 213, 214, 215, 216, 217, 219, 221, 224, 231, 232, 233, 234, 235, 239, 240, 242, 248, 251, 252, 256, 257, 272, 275, 276, 279, 280, 281, 282, 285, 286], "tell": [1, 8, 18, 22, 73, 92, 94, 97, 99, 103, 111, 112, 120, 143, 144, 154, 155, 157, 168, 178, 179, 181, 183, 194, 252, 257], "creat": [1, 2, 6, 7, 8, 12, 14, 16, 18, 19, 21, 22, 23, 27, 34, 35, 38, 41, 43, 44, 46, 47, 50, 52, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 94, 95, 97, 99, 101, 103, 104, 105, 107, 109, 111, 113, 114, 117, 120, 121, 124, 135, 136, 138, 139, 140, 141, 146, 148, 151, 153, 154, 157, 161, 162, 166, 169, 170, 171, 173, 174, 176, 177, 178, 180, 181, 183, 187, 188, 190, 191, 192, 194, 195, 197, 198, 201, 204, 205, 207, 212, 215, 217, 219, 224, 227, 230, 231, 233, 234, 236, 239, 240, 248, 251, 252, 254, 257, 258, 264, 265, 268, 269, 270, 271, 272, 279, 281, 282, 286, 287], "If": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 27, 34, 35, 38, 40, 43, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 64, 66, 79, 86, 92, 94, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 124, 127, 137, 138, 139, 140, 141, 142, 145, 147, 151, 153, 154, 155, 157, 159, 160, 162, 168, 169, 170, 171, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 200, 203, 204, 205, 206, 212, 213, 215, 216, 217, 221, 222, 224, 226, 227, 228, 233, 234, 241, 242, 248, 250, 251, 253, 256, 257, 264, 265, 266, 267, 268, 270, 272, 279, 280, 285], "fals": [1, 2, 4, 7, 8, 12, 13, 16, 23, 36, 41, 46, 59, 66, 67, 86, 87, 94, 101, 108, 120, 121, 127, 137, 138, 139, 141, 147, 157, 159, 162, 168, 169, 171, 176, 177, 179, 180, 188, 190, 192, 194, 200, 203, 206, 213, 214, 216, 219, 221, 222, 227, 230, 240, 241, 242, 251, 258, 264, 267, 268, 275, 282, 283, 285, 286], "see": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 16, 18, 20, 22, 23, 27, 35, 39, 40, 43, 47, 48, 50, 52, 53, 54, 55, 56, 59, 64, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 119, 121, 137, 138, 139, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 205, 212, 214, 215, 216, 219, 220, 221, 222, 224, 226, 227, 228, 231, 234, 235, 236, 239, 240, 243, 248, 250, 251, 252, 257, 264, 265, 266, 267, 268, 269, 270, 276, 277, 278, 280, 281, 283, 285], "target_actor_network_param": 1, "attribut": [1, 7, 13, 16, 34, 46, 50, 57, 86, 89, 99, 111, 112, 117, 142, 154, 157, 162, 169, 173, 175, 194, 217, 228, 251, 270, 271, 282], "still": [1, 6, 7, 11, 12, 13, 14, 16, 17, 20, 22, 23, 50, 56, 79, 92, 94, 102, 104, 108, 112, 119, 121, 138, 144, 145, 146, 151, 153, 154, 157, 158, 162, 168, 171, 181, 192, 194, 195, 200, 201, 205, 206, 212, 214, 216, 222, 233, 234, 236, 240, 266, 267, 280, 286], "access": [1, 6, 7, 12, 16, 20, 23, 35, 36, 54, 72, 79, 92, 94, 97, 99, 102, 103, 104, 109, 112, 120, 121, 136, 138, 142, 149, 153, 169, 171, 176, 178, 180, 190, 191, 194, 204, 212, 213, 215, 216, 219, 222, 233, 236, 248, 266, 270, 276], "just": [1, 2, 3, 4, 6, 7, 11, 12, 16, 18, 19, 20, 23, 34, 47, 48, 50, 53, 54, 55, 56, 57, 60, 76, 77, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 121, 127, 137, 138, 141, 143, 144, 145, 151, 154, 159, 160, 165, 168, 169, 171, 174, 175, 176, 177, 178, 179, 180, 181, 188, 190, 191, 192, 194, 195, 197, 199, 205, 206, 214, 222, 234, 236, 241, 252, 253, 254, 266, 267, 270, 272, 285], "detach": [1, 2, 7, 13, 34, 94, 102, 108, 140, 165, 170, 201], "version": [1, 3, 4, 6, 7, 11, 12, 14, 16, 95, 97, 99, 102, 103, 112, 113, 114, 116, 117, 137, 138, 142, 153, 154, 155, 157, 160, 162, 169, 171, 173, 174, 175, 176, 177, 185, 187, 188, 190, 195, 197, 198, 203, 204, 205, 207, 212, 221, 227, 239, 240, 241, 242, 251, 252, 256, 266, 272, 277, 281], "q": [1, 46, 53, 133, 136, 141, 161, 182, 190, 222], "base": [1, 6, 7, 12, 13, 16, 19, 20, 22, 27, 36, 47, 53, 61, 79, 89, 92, 94, 95, 99, 103, 104, 106, 114, 119, 121, 132, 133, 136, 137, 138, 139, 140, 143, 144, 146, 154, 161, 171, 173, 174, 175, 178, 180, 183, 187, 188, 190, 191, 194, 195, 197, 201, 206, 214, 216, 219, 220, 221, 222, 232, 240, 251, 264, 266, 267, 277, 281, 282], "empir": [1, 165, 177], "bootstrap": [1, 154], "td": 1, "0": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 67, 68, 72, 74, 76, 77, 78, 79, 86, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 127, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 195, 197, 198, 200, 201, 203, 204, 205, 206, 212, 213, 215, 216, 217, 221, 222, 223, 227, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 248, 252, 253, 254, 256, 257, 258, 263, 264, 266, 267, 272, 274, 275, 278, 279, 280, 281, 282, 283, 285, 286, 287], "low": [1, 4, 6, 7, 16, 18, 27, 53, 56, 72, 86, 99, 106, 120, 131, 136, 144, 177, 187, 194, 198, 219, 241, 242, 266], "varianc": [1, 7, 23, 101, 177], "bia": [1, 2, 6, 7, 23, 46, 50, 72, 106, 112, 120, 121, 137, 146, 147, 154, 160, 175, 177, 181, 182, 198, 200, 216, 217, 222, 258, 264], "mean": [1, 2, 4, 6, 7, 12, 14, 16, 23, 39, 50, 53, 55, 56, 72, 79, 86, 89, 94, 97, 99, 101, 102, 104, 105, 106, 108, 111, 112, 119, 120, 121, 138, 141, 143, 144, 147, 151, 153, 162, 169, 171, 176, 177, 178, 180, 181, 183, 187, 188, 190, 194, 195, 204, 212, 214, 217, 221, 226, 227, 228, 230, 234, 252, 256, 257, 266, 267, 272, 282, 285], "obtain": [1, 27, 34, 39, 53, 72, 92, 112, 120, 143, 144, 147, 153, 160, 170, 177, 178, 180, 187, 190, 197, 204, 257, 281], "reward": [1, 16, 154, 161, 177, 178, 179, 181], "noth": [1, 79, 97, 112, 148, 171, 177, 181, 187, 200], "els": [1, 6, 8, 11, 13, 22, 23, 50, 53, 92, 94, 101, 111, 112, 113, 138, 139, 153, 173, 174, 177, 179, 180, 181, 188, 190, 192, 194, 201, 206, 216, 217, 222, 232, 236, 251, 282, 283, 286], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 27, 34, 35, 36, 38, 44, 46, 50, 53, 56, 57, 59, 67, 72, 79, 90, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 137, 138, 139, 141, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 157, 158, 159, 160, 161, 162, 166, 168, 169, 170, 175, 176, 177, 178, 179, 180, 181, 182, 190, 192, 195, 198, 201, 203, 205, 206, 207, 212, 213, 214, 215, 216, 217, 220, 221, 222, 224, 227, 228, 232, 233, 234, 235, 236, 240, 241, 242, 248, 251, 256, 258, 265, 267, 275, 276, 281, 282, 283, 285, 286], "case": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 19, 20, 34, 41, 46, 53, 55, 64, 72, 79, 86, 89, 94, 95, 101, 102, 104, 105, 106, 108, 109, 111, 112, 117, 120, 121, 132, 137, 138, 139, 141, 142, 143, 146, 147, 148, 153, 154, 155, 157, 159, 160, 162, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 200, 201, 205, 212, 214, 215, 216, 217, 219, 221, 222, 224, 226, 227, 234, 241, 250, 251, 252, 257, 258, 264, 266, 270, 272, 277, 279, 280, 282, 285], "whole": [1, 3, 47, 50, 99, 112, 121, 136, 140, 153, 175, 177, 183, 195, 213, 226, 272], "sequenc": [1, 6, 7, 14, 43, 52, 53, 71, 72, 99, 105, 107, 110, 111, 120, 121, 136, 144, 145, 154, 166, 169, 177, 182, 184, 191, 198, 201, 205, 217, 220, 226, 230, 231, 236, 239, 251, 257, 267, 287], "upcom": 1, "intermedi": [1, 80, 94, 99, 102, 132, 149, 157, 159, 160, 161, 166, 168, 171, 184, 193, 198, 222, 252, 258], "lambda": [1, 6, 112, 146, 176, 179, 194, 222, 251, 252, 283], "also": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 34, 40, 43, 46, 50, 52, 53, 55, 56, 57, 58, 64, 72, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 119, 120, 121, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 154, 157, 159, 160, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 200, 201, 203, 207, 212, 213, 214, 215, 221, 222, 224, 226, 227, 228, 231, 233, 234, 235, 236, 239, 240, 241, 242, 248, 251, 252, 253, 256, 257, 264, 265, 266, 267, 269, 270, 272, 276, 277, 278, 280, 281, 283, 285, 286], "compromis": 1, "easi": [1, 2, 6, 7, 27, 36, 47, 48, 55, 72, 94, 95, 102, 104, 106, 138, 139, 141, 143, 153, 160, 165, 169, 173, 177, 187, 191, 194, 195, 206, 222, 226, 241, 252, 266, 282], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 9, 180], "defin": [1, 2, 6, 8, 14, 16, 17, 18, 19, 20, 22, 34, 39, 40, 41, 44, 46, 48, 56, 65, 68, 69, 71, 72, 73, 79, 89, 92, 94, 99, 101, 103, 105, 106, 111, 112, 114, 117, 121, 130, 137, 138, 142, 144, 146, 149, 153, 154, 155, 158, 161, 165, 168, 170, 171, 178, 179, 180, 182, 185, 187, 188, 191, 192, 194, 198, 203, 212, 219, 221, 222, 230, 233, 234, 240, 241, 242, 255, 256, 257, 263, 264, 271, 272, 274, 278, 280, 281, 282, 286, 287], "default": [1, 3, 4, 6, 7, 11, 12, 13, 17, 20, 23, 27, 34, 39, 43, 46, 48, 53, 55, 56, 59, 66, 67, 86, 97, 99, 101, 102, 106, 108, 113, 117, 120, 127, 136, 137, 138, 139, 140, 141, 144, 153, 154, 155, 157, 159, 162, 168, 171, 174, 176, 177, 179, 180, 181, 187, 188, 190, 192, 194, 195, 198, 200, 201, 203, 206, 215, 216, 217, 219, 221, 224, 227, 228, 233, 234, 240, 241, 248, 252, 255, 256, 257, 263, 265, 267, 270, 272, 275, 276, 277, 280, 282, 285, 286, 287], "here": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 36, 39, 40, 43, 44, 47, 50, 52, 54, 55, 56, 57, 59, 73, 79, 85, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 119, 120, 121, 124, 127, 137, 138, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 177, 178, 180, 181, 182, 183, 187, 188, 191, 192, 194, 195, 197, 198, 200, 207, 212, 214, 215, 216, 217, 219, 222, 231, 234, 235, 240, 241, 242, 251, 252, 253, 256, 257, 267, 272, 277, 279, 282, 285], "take": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 23, 35, 36, 43, 46, 47, 50, 52, 53, 54, 55, 56, 72, 79, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 117, 120, 121, 127, 140, 141, 142, 143, 144, 145, 146, 148, 151, 153, 158, 160, 161, 168, 171, 176, 177, 178, 179, 180, 181, 183, 187, 188, 190, 192, 194, 195, 197, 198, 201, 205, 207, 212, 215, 217, 219, 222, 226, 233, 234, 240, 241, 242, 252, 253, 254, 257, 264, 266, 267, 268, 269, 270, 272, 277, 282, 285], "simplest": [1, 7, 34, 50, 94, 102, 106, 154, 177, 183, 267], "show": [1, 6, 12, 13, 18, 20, 22, 23, 27, 36, 47, 55, 56, 64, 79, 86, 87, 89, 92, 94, 95, 97, 99, 102, 103, 112, 117, 119, 137, 140, 143, 144, 145, 147, 148, 151, 154, 159, 160, 162, 171, 174, 176, 177, 178, 179, 181, 187, 188, 190, 192, 194, 195, 198, 200, 212, 222, 231, 232, 233, 234, 236, 241, 248, 251, 252, 257, 265, 266, 267, 272, 281, 282, 285, 286], "chang": [1, 2, 6, 7, 8, 12, 13, 14, 16, 23, 27, 34, 43, 46, 52, 54, 55, 56, 57, 59, 86, 87, 89, 92, 94, 95, 97, 98, 103, 104, 105, 107, 108, 109, 114, 121, 130, 136, 137, 140, 141, 143, 144, 146, 149, 150, 153, 154, 157, 159, 160, 161, 168, 169, 171, 174, 175, 179, 187, 190, 192, 194, 195, 198, 205, 206, 214, 216, 217, 219, 221, 227, 228, 231, 232, 233, 234, 239, 241, 242, 251, 252, 255, 263, 264, 265, 267, 268, 275, 280, 281, 282, 283, 285, 287], "instruct": [1, 7, 23, 27, 38, 95, 98, 101, 103, 144, 145, 154, 157, 173, 175, 177, 179, 181, 183, 227, 228, 240, 241, 248, 250, 267, 271, 285], "queri": [1, 16, 53, 97, 102, 121, 140, 180, 182, 197, 198, 201, 217], "correspond": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 35, 36, 40, 46, 53, 59, 86, 94, 95, 99, 101, 106, 109, 119, 121, 137, 142, 143, 146, 159, 168, 173, 175, 177, 180, 183, 185, 187, 188, 190, 192, 194, 195, 197, 198, 204, 215, 221, 234, 242, 250, 256, 257, 267, 271, 285], "make_value_estim": 1, "central": [1, 11, 79, 94, 102, 103, 109, 111, 149, 270], "quit": [1, 7, 20, 53, 79, 142, 153, 168, 177, 181, 194, 195, 212, 222, 233, 236, 239, 252, 266], "weight": [1, 2, 3, 6, 7, 14, 15, 16, 20, 23, 27, 34, 35, 46, 47, 53, 66, 67, 70, 72, 73, 74, 76, 77, 79, 94, 97, 99, 102, 103, 104, 106, 107, 109, 112, 121, 127, 135, 136, 137, 144, 146, 147, 149, 154, 155, 159, 160, 162, 168, 169, 170, 175, 177, 178, 181, 183, 187, 190, 191, 195, 198, 200, 205, 216, 219, 222, 224, 233, 240, 242, 254, 264, 269, 270, 275, 282, 287], "when": [1, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 20, 22, 34, 36, 39, 41, 43, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 64, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 108, 111, 112, 113, 116, 117, 119, 120, 121, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 150, 151, 153, 154, 157, 158, 159, 161, 162, 165, 168, 169, 171, 174, 175, 177, 178, 179, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 203, 205, 212, 215, 216, 217, 219, 221, 222, 224, 227, 228, 231, 232, 234, 235, 236, 240, 248, 251, 252, 254, 256, 257, 258, 264, 266, 267, 268, 270, 271, 276, 277, 279, 280, 282, 285, 286], "must": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 35, 36, 53, 56, 79, 89, 94, 95, 102, 105, 111, 116, 117, 121, 138, 151, 153, 154, 155, 157, 171, 177, 180, 187, 190, 192, 194, 195, 200, 203, 204, 212, 213, 215, 217, 224, 226, 232, 235, 256, 258, 264, 267, 279], "sure": [1, 6, 7, 11, 12, 13, 16, 23, 41, 55, 61, 92, 97, 101, 104, 105, 111, 117, 121, 137, 141, 146, 151, 153, 154, 158, 171, 177, 179, 190, 195, 213, 215, 226, 232, 241, 250, 251, 256, 265, 267, 276, 277, 279], "out": [1, 2, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 20, 27, 34, 38, 39, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 62, 63, 64, 79, 81, 82, 83, 84, 85, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 107, 109, 112, 116, 119, 135, 136, 137, 139, 140, 141, 142, 143, 144, 148, 149, 151, 153, 154, 155, 158, 159, 160, 168, 171, 174, 175, 176, 177, 179, 180, 181, 183, 187, 188, 190, 194, 195, 198, 199, 201, 203, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 222, 226, 227, 228, 229, 236, 241, 242, 244, 245, 246, 247, 249, 250, 255, 257, 258, 263, 264, 267, 271, 277, 280, 281, 282, 285, 287], "graph": [1, 6, 12, 16, 18, 50, 53, 66, 69, 72, 76, 77, 86, 89, 91, 94, 105, 107, 113, 116, 117, 120, 130, 136, 142, 144, 148, 158, 159, 160, 162, 180, 181, 187, 188, 190, 191, 198, 200, 206, 207, 227, 228, 241, 242, 254, 265, 272, 276, 277, 281, 283], "otherwis": [1, 4, 11, 12, 23, 35, 40, 53, 59, 66, 79, 86, 89, 102, 112, 120, 121, 127, 137, 142, 148, 151, 154, 159, 160, 162, 168, 177, 178, 180, 192, 195, 222, 226, 227, 232, 266, 280, 285], "mix": [1, 11, 17, 64, 119, 162, 219, 241, 242, 255, 263, 271, 287], "For": [1, 2, 4, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 34, 39, 40, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 66, 67, 72, 79, 86, 87, 92, 95, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 121, 124, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 155, 158, 159, 161, 162, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 212, 213, 214, 215, 217, 219, 221, 222, 224, 227, 228, 230, 231, 233, 234, 235, 236, 239, 240, 241, 242, 248, 250, 251, 252, 254, 256, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 283, 285, 286], "hold_out_param": 1, "now": [1, 2, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 22, 27, 39, 40, 46, 47, 48, 50, 53, 54, 55, 56, 59, 79, 89, 92, 93, 94, 95, 101, 102, 104, 106, 108, 111, 112, 114, 117, 120, 127, 136, 138, 141, 142, 143, 144, 146, 147, 148, 151, 153, 154, 158, 159, 160, 161, 165, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 205, 207, 212, 213, 217, 219, 221, 222, 224, 226, 231, 233, 234, 253, 254, 264, 265, 266, 269, 277], "reli": [1, 3, 4, 7, 11, 16, 41, 53, 94, 111, 114, 142, 161, 168, 171, 175, 177, 194, 207, 214, 216, 228, 232, 267], "miss": [1, 55, 121, 146, 151, 154, 187, 192, 201, 213, 251, 266, 268, 285], "glue": [1, 181], "cost": [1, 6, 16, 53, 104, 106, 119, 137, 138, 141, 142, 146, 165, 187, 194, 233, 253, 267, 280, 281], "deliv": [1, 228, 241, 279], "most": [1, 2, 6, 13, 16, 20, 34, 38, 46, 53, 55, 56, 79, 92, 94, 95, 97, 99, 102, 106, 108, 109, 112, 119, 120, 121, 127, 132, 137, 141, 142, 143, 145, 147, 148, 153, 158, 159, 161, 162, 168, 171, 176, 177, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 198, 214, 215, 216, 222, 233, 241, 242, 250, 257, 264, 266, 267, 272, 276, 280, 282, 285], "first": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 38, 41, 44, 47, 48, 53, 54, 55, 56, 57, 59, 64, 72, 73, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 106, 108, 109, 111, 112, 117, 119, 120, 121, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 154, 155, 157, 158, 159, 160, 165, 168, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 187, 190, 191, 192, 194, 195, 197, 198, 200, 201, 203, 205, 207, 212, 214, 215, 217, 222, 226, 232, 233, 234, 236, 240, 242, 251, 252, 254, 256, 257, 264, 267, 272, 277, 279, 280, 281, 282, 285], "taken": [1, 7, 11, 16, 23, 86, 87, 99, 154, 168, 177, 190, 194, 205, 219, 258, 281], "care": [1, 4, 6, 16, 79, 92, 94, 104, 148, 153, 171, 177, 181, 198, 212, 233, 252, 253, 266], "condit": [1, 16, 53, 59, 102, 109, 113, 137, 153, 169, 171, 192, 194, 221, 224], "remaind": [1, 97, 157], "cheetah": 1, "goal": [1, 7, 16, 17, 47, 53, 56, 64, 79, 89, 104, 142, 143, 153, 154, 158, 177, 179, 181, 203, 212, 242], "half": [1, 11, 20, 127, 173, 222, 251, 286], "fast": [1, 6, 7, 20, 22, 53, 94, 112, 137, 141, 151, 165, 171, 177, 182, 190, 195, 198, 203, 205, 220, 222, 266], "dm_control": 1, "gym": [1, 16, 133, 136, 154, 161, 177, 178, 179, 181, 198], "env": [1, 22, 140, 150, 153, 154, 177, 178, 179, 181, 201, 203, 227, 252, 266, 282], "gymenv": [1, 177], "halfcheetah": 1, "v4": [1, 177], "dmcontrolenv": 1, "By": [1, 11, 20, 23, 34, 43, 46, 66, 67, 86, 92, 94, 102, 108, 111, 112, 113, 120, 138, 141, 143, 153, 155, 157, 158, 159, 168, 175, 178, 187, 191, 194, 203, 206, 213, 215, 217, 222, 227, 233, 234, 239, 248, 254, 257, 267, 272, 276, 277, 279, 282, 285], "disabl": [1, 8, 13, 17, 137, 138, 146, 161, 165, 176, 180, 182, 187, 192, 205, 212, 213, 214, 215, 221, 227, 234, 251, 276, 285], "render": [1, 7, 86, 95, 101, 161, 171, 177], "easier": [1, 20, 22, 27, 54, 55, 105, 112, 137, 143, 159, 168, 179, 183, 188, 205, 212, 215, 222, 226, 234, 252, 266, 279], "than": [1, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 20, 23, 47, 52, 53, 54, 56, 57, 64, 71, 73, 79, 86, 89, 94, 97, 99, 102, 104, 105, 106, 108, 111, 112, 114, 120, 121, 127, 136, 137, 138, 140, 143, 145, 147, 150, 151, 153, 155, 159, 160, 161, 165, 168, 169, 170, 171, 176, 177, 178, 179, 187, 188, 190, 191, 192, 195, 197, 198, 203, 205, 212, 217, 222, 227, 228, 252, 256, 267, 268, 271, 276, 282, 285], "imag": [1, 23, 35, 36, 38, 44, 46, 50, 53, 55, 56, 61, 79, 86, 92, 95, 97, 99, 102, 103, 104, 112, 130, 131, 133, 134, 136, 141, 146, 155, 161, 162, 168, 170, 178, 185, 187, 188, 195, 197, 217, 219, 227, 228, 236, 250, 254, 265, 268, 269, 271], "focu": [1, 4, 7, 12, 22, 95, 104, 106, 138, 141, 142, 177, 179, 181, 183, 194, 205, 213, 242], "pass": [1, 2, 3, 4, 7, 9, 11, 12, 14, 15, 16, 17, 18, 19, 23, 34, 35, 36, 39, 40, 41, 46, 47, 53, 55, 56, 57, 60, 66, 67, 69, 76, 77, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 112, 113, 120, 121, 130, 136, 137, 138, 141, 142, 143, 144, 147, 148, 149, 151, 153, 154, 155, 157, 158, 161, 162, 165, 169, 170, 173, 175, 177, 178, 179, 180, 181, 183, 184, 187, 190, 192, 194, 195, 198, 200, 201, 205, 212, 215, 217, 224, 231, 232, 234, 235, 239, 240, 251, 252, 256, 257, 258, 264, 267, 270, 286, 287], "pixel": [1, 35, 44, 47, 79, 99, 102, 104, 154, 162, 185, 190, 282], "from_pixel": 1, "true": [1, 2, 4, 6, 7, 8, 12, 13, 14, 17, 18, 23, 27, 34, 36, 39, 41, 46, 50, 53, 55, 66, 67, 86, 92, 94, 97, 101, 102, 108, 112, 113, 114, 116, 119, 120, 121, 127, 137, 138, 139, 140, 143, 146, 147, 148, 151, 153, 154, 157, 159, 160, 162, 169, 176, 177, 179, 180, 181, 182, 187, 188, 190, 192, 194, 197, 198, 200, 201, 203, 206, 213, 214, 215, 216, 217, 219, 221, 222, 227, 232, 233, 234, 241, 242, 257, 258, 264, 270, 272, 275, 279, 283, 285, 286], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 11, 19, 20, 50, 55, 59, 95, 101, 103, 104, 105, 113, 137, 138, 143, 144, 145, 153, 154, 178, 179, 180, 181, 183, 185, 188, 190, 197, 222, 230, 231, 257, 282], "either": [1, 2, 4, 6, 7, 11, 18, 23, 47, 53, 77, 92, 103, 104, 112, 114, 121, 127, 138, 141, 151, 154, 162, 175, 178, 179, 180, 187, 192, 194, 198, 215, 217, 221, 222, 241, 242, 248, 251, 257, 264, 267, 279], "backend": [1, 6, 7, 8, 13, 16, 22, 27, 57, 59, 130, 131, 132, 135, 136, 143, 146, 150, 151, 154, 162, 176, 177, 184, 187, 192, 194, 195, 201, 207, 216, 221, 228, 232, 240, 248, 251, 271, 278, 282, 287], "consid": [1, 4, 7, 12, 13, 16, 34, 41, 53, 72, 79, 86, 120, 137, 139, 148, 151, 153, 162, 165, 168, 169, 171, 174, 179, 183, 187, 192, 194, 195, 197, 203, 212, 213, 214, 216, 226, 233, 256, 257, 258, 277], "abov": [1, 3, 4, 6, 7, 9, 11, 12, 13, 16, 17, 19, 23, 46, 47, 53, 55, 56, 69, 71, 72, 79, 86, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 120, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 157, 159, 160, 161, 162, 165, 168, 169, 170, 171, 173, 175, 177, 179, 180, 181, 182, 187, 190, 192, 194, 195, 197, 200, 201, 203, 205, 207, 212, 213, 214, 215, 216, 221, 233, 234, 235, 236, 240, 241, 242, 248, 250, 252, 256, 257, 264, 265, 276, 282, 285], "dm": 1, "want": [1, 2, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 19, 23, 27, 34, 35, 36, 39, 41, 46, 47, 50, 53, 55, 56, 64, 66, 67, 71, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 127, 140, 141, 142, 143, 153, 154, 155, 157, 158, 160, 162, 165, 169, 171, 173, 175, 176, 177, 180, 182, 183, 185, 190, 191, 192, 194, 195, 197, 198, 212, 214, 219, 220, 226, 234, 235, 242, 248, 251, 252, 256, 264, 266, 268, 279, 281], "modifi": [1, 3, 7, 12, 13, 16, 23, 40, 44, 46, 47, 56, 79, 104, 105, 141, 144, 153, 158, 159, 174, 177, 179, 183, 194, 198, 200, 201, 264, 280, 282], "represent": [1, 12, 16, 46, 56, 89, 95, 99, 101, 104, 106, 109, 111, 113, 114, 116, 130, 143, 158, 161, 183, 187, 188, 191, 194, 195, 198, 217, 252, 264, 266, 281], "more": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 16, 17, 18, 20, 23, 36, 38, 39, 40, 43, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 64, 71, 79, 89, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 119, 120, 121, 127, 131, 132, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 157, 158, 161, 165, 168, 169, 171, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 191, 192, 194, 195, 197, 198, 200, 203, 205, 212, 213, 214, 215, 217, 219, 220, 222, 226, 227, 228, 232, 234, 235, 236, 240, 241, 242, 248, 250, 256, 264, 266, 267, 272, 277, 279, 280, 281, 282, 283, 285, 286, 287], "friendli": [1, 17, 199, 251], "append": [1, 8, 11, 16, 19, 22, 23, 53, 102, 119, 121, 138, 153, 175, 177, 179, 180, 181, 183, 188, 222, 283, 285], "special": [1, 12, 22, 43, 52, 97, 99, 106, 108, 111, 112, 117, 133, 142, 154, 162, 174, 175, 187, 190, 217, 219, 224, 234, 264, 267, 282], "torchr": 1, "transformedenv": [1, 16, 177], "common": [1, 7, 11, 12, 16, 18, 20, 23, 39, 40, 47, 53, 55, 64, 86, 97, 102, 104, 106, 108, 111, 113, 121, 127, 130, 136, 141, 151, 158, 160, 161, 169, 171, 175, 176, 177, 182, 190, 194, 195, 197, 214, 217, 222, 242, 252, 253, 266, 267, 268, 271, 272, 278], "rescal": [1, 55, 197, 205], "heurist": [1, 86, 203, 240, 279], "multipli": [1, 4, 6, 14, 23, 52, 53, 94, 95, 97, 102, 112, 183, 191, 266, 278], "5": [1, 2, 3, 6, 7, 13, 20, 36, 38, 48, 50, 51, 53, 56, 69, 86, 89, 92, 97, 99, 101, 103, 106, 109, 110, 111, 112, 116, 119, 120, 121, 137, 138, 147, 151, 153, 159, 162, 176, 179, 180, 181, 190, 194, 195, 197, 198, 203, 207, 217, 221, 222, 224, 226, 228, 230, 236, 240, 241, 242, 248, 258, 272, 275, 283], "interfac": [1, 4, 6, 7, 16, 17, 53, 102, 112, 143, 150, 153, 177, 190, 195, 206, 241, 248, 282], "between": [1, 6, 7, 11, 13, 14, 16, 19, 20, 23, 35, 43, 50, 52, 53, 69, 77, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 105, 106, 109, 111, 112, 120, 134, 136, 137, 139, 141, 143, 153, 154, 158, 162, 165, 171, 173, 175, 178, 180, 181, 182, 183, 188, 190, 192, 194, 195, 197, 198, 201, 203, 204, 205, 206, 212, 213, 215, 219, 220, 222, 233, 235, 251, 252, 253, 257, 267, 272, 282, 283, 286], "simul": [1, 20, 22, 23, 99, 146, 177, 222, 236], "work": [1, 2, 4, 6, 7, 9, 14, 16, 18, 20, 22, 38, 39, 46, 53, 54, 55, 56, 59, 60, 64, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 111, 112, 113, 116, 136, 142, 144, 145, 147, 148, 149, 151, 153, 154, 155, 157, 158, 160, 168, 169, 170, 171, 174, 175, 176, 177, 179, 181, 182, 183, 187, 190, 191, 194, 195, 197, 198, 203, 205, 212, 213, 214, 215, 217, 222, 224, 226, 227, 228, 233, 236, 240, 241, 251, 252, 257, 264, 266, 267, 272, 275, 276, 279, 282], "doubl": [1, 2, 4, 6, 7, 39, 94, 101, 112, 119, 133, 135, 136, 147, 154, 161, 170, 177, 188, 240, 251], "precis": [1, 11, 12, 17, 64, 142, 147, 148, 162, 171, 177, 188, 219, 240, 241, 242, 255, 263, 271, 272, 287], "number": [1, 4, 6, 7, 13, 14, 17, 22, 23, 36, 39, 44, 47, 55, 56, 57, 59, 69, 86, 89, 92, 94, 97, 99, 104, 106, 108, 111, 112, 119, 120, 121, 137, 138, 140, 141, 142, 143, 144, 150, 151, 153, 154, 155, 157, 159, 160, 165, 169, 171, 173, 175, 176, 177, 178, 179, 180, 181, 187, 190, 192, 195, 197, 203, 205, 215, 216, 217, 226, 227, 230, 234, 240, 252, 254, 257, 266, 267, 277, 283, 285], "presum": 1, "singl": [1, 2, 4, 6, 7, 11, 12, 13, 17, 20, 22, 40, 43, 46, 50, 55, 57, 58, 59, 60, 64, 89, 92, 94, 95, 99, 101, 102, 103, 104, 106, 112, 136, 137, 138, 139, 141, 144, 146, 147, 148, 149, 150, 151, 153, 154, 160, 161, 165, 170, 171, 173, 177, 178, 179, 180, 181, 183, 187, 190, 192, 194, 195, 198, 200, 201, 203, 205, 217, 222, 226, 234, 240, 252, 266, 267, 282, 285], "ones": [1, 2, 4, 7, 8, 13, 16, 18, 23, 99, 102, 104, 153, 155, 158, 169, 170, 171, 173, 174, 177, 178, 187, 194, 198, 200, 213, 224, 241, 266, 282, 283], "goe": [1, 6, 55, 102, 105, 106, 136, 140, 148, 160, 174, 177, 180, 195], "wai": [1, 2, 4, 6, 7, 11, 12, 13, 14, 16, 34, 38, 40, 43, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 71, 76, 79, 86, 92, 94, 95, 97, 98, 102, 105, 106, 108, 111, 112, 114, 116, 117, 121, 132, 137, 141, 142, 143, 144, 148, 150, 151, 157, 158, 159, 160, 161, 162, 165, 168, 169, 173, 175, 177, 179, 180, 182, 185, 188, 191, 194, 195, 197, 198, 200, 201, 205, 213, 214, 215, 217, 220, 224, 234, 250, 253, 257, 258, 264, 267, 279], "repres": [1, 4, 6, 12, 14, 15, 22, 35, 46, 53, 55, 56, 64, 66, 79, 86, 89, 94, 95, 97, 99, 103, 104, 111, 113, 114, 116, 119, 120, 137, 138, 139, 141, 143, 144, 146, 154, 157, 158, 161, 162, 177, 178, 181, 183, 190, 194, 195, 197, 198, 203, 212, 217, 252, 254, 264, 266], "doubletofloat": [1, 177], "in_kei": [1, 16, 154, 177], "list": [1, 4, 6, 7, 8, 11, 13, 14, 16, 17, 19, 23, 27, 36, 40, 43, 47, 50, 52, 53, 54, 56, 72, 79, 92, 95, 99, 102, 108, 109, 111, 113, 114, 116, 117, 120, 142, 145, 153, 162, 169, 171, 176, 177, 179, 180, 181, 183, 187, 188, 190, 192, 194, 195, 206, 214, 217, 219, 222, 227, 232, 236, 239, 250, 252, 256, 257, 276, 282, 285], "refer": [1, 4, 6, 7, 9, 11, 15, 17, 20, 27, 34, 40, 64, 79, 86, 89, 94, 95, 102, 104, 106, 108, 109, 111, 113, 114, 116, 117, 119, 121, 137, 138, 139, 141, 142, 145, 146, 150, 151, 153, 159, 168, 171, 175, 177, 179, 180, 181, 187, 190, 194, 195, 197, 198, 203, 207, 212, 215, 219, 221, 222, 240, 242, 250, 251, 252, 254, 256, 257, 264, 267, 277, 279, 282, 285], "float": [1, 4, 6, 7, 11, 13, 23, 97, 102, 108, 111, 112, 119, 137, 138, 141, 143, 153, 162, 174, 175, 179, 181, 194, 195, 197, 200, 203, 205, 206, 214, 215, 216, 217, 227, 240, 242, 251, 257, 264], "while": [1, 2, 3, 6, 7, 8, 13, 14, 15, 16, 20, 23, 36, 39, 53, 56, 59, 86, 95, 102, 113, 114, 119, 130, 132, 136, 138, 139, 140, 142, 143, 146, 149, 151, 153, 154, 159, 160, 162, 168, 171, 175, 176, 177, 180, 181, 182, 183, 185, 192, 194, 195, 198, 200, 203, 205, 212, 213, 214, 215, 216, 217, 219, 222, 233, 251, 252, 256, 257, 264, 272, 276, 279, 282], "in_keys_inv": [1, 16], "befor": [1, 3, 4, 6, 7, 11, 12, 13, 14, 16, 19, 23, 34, 39, 41, 46, 47, 48, 50, 53, 55, 56, 59, 64, 79, 89, 94, 95, 99, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 119, 120, 121, 127, 130, 136, 138, 139, 141, 143, 144, 146, 151, 153, 154, 157, 159, 161, 166, 168, 169, 171, 173, 175, 176, 177, 179, 180, 181, 183, 187, 188, 191, 192, 194, 195, 197, 200, 203, 212, 213, 215, 221, 233, 236, 251, 252, 254, 256, 265, 267, 268, 269, 270, 272, 276, 277, 279, 280, 283, 285, 286], "concaten": [1, 16, 43, 52, 53, 108, 109, 141, 145, 178], "cattensor": 1, "leav": [1, 11, 18, 20, 34, 46, 53, 55, 57, 89, 94, 143, 168, 169, 176, 222, 240, 264], "constant": [1, 2, 7, 43, 52, 86, 92, 94, 102, 106, 140, 154, 169, 177, 178, 188, 192, 194, 216, 222, 267, 283], "significantli": [1, 23, 109, 132, 141, 147, 171, 192, 205, 219, 258, 277, 285], "speed": [1, 6, 7, 12, 16, 23, 34, 36, 39, 52, 53, 89, 94, 97, 98, 104, 112, 130, 131, 132, 136, 138, 139, 141, 144, 149, 154, 155, 159, 162, 171, 176, 177, 179, 182, 192, 198, 205, 206, 219, 220, 228, 232, 233, 252, 265, 267, 271, 281, 282, 285], "throughput": [1, 138, 171, 267, 285], "choos": [1, 11, 12, 14, 17, 53, 56, 59, 64, 69, 92, 95, 106, 120, 121, 140, 141, 145, 151, 153, 161, 169, 176, 177, 178, 183, 187, 190, 195, 197, 201, 205, 207, 232, 248, 251, 257, 272], "whether": [1, 7, 11, 12, 13, 16, 53, 56, 94, 95, 97, 101, 102, 104, 112, 114, 121, 148, 153, 158, 161, 168, 171, 177, 179, 187, 188, 190, 194, 200, 215, 252, 257, 267, 268], "individu": [1, 6, 7, 14, 35, 53, 89, 94, 95, 99, 120, 139, 141, 143, 147, 170, 171, 175, 180, 183, 188, 192, 194, 195, 198, 200, 248, 251, 252, 267, 277], "approach": [1, 4, 6, 7, 9, 41, 60, 95, 112, 114, 116, 121, 140, 144, 149, 169, 170, 171, 177, 178, 180, 183, 192, 194, 197, 203, 212, 215, 216, 219, 226, 242, 252, 264, 272], "parallelenv": [1, 177], "num_work": [1, 47, 55, 92, 101, 137, 138, 187, 188, 267], "4": [1, 2, 3, 4, 6, 7, 11, 14, 18, 19, 21, 27, 36, 38, 48, 55, 57, 58, 59, 66, 67, 69, 74, 79, 92, 95, 97, 99, 101, 102, 103, 105, 106, 108, 111, 112, 118, 120, 134, 136, 137, 138, 140, 146, 147, 149, 150, 153, 154, 159, 161, 162, 168, 173, 175, 177, 178, 179, 180, 181, 190, 192, 194, 197, 198, 201, 203, 205, 207, 215, 217, 220, 228, 233, 236, 240, 265, 272, 276, 277, 282, 283, 285, 287], "leverag": [1, 7, 53, 79, 104, 114, 117, 121, 134, 136, 138, 141, 151, 153, 160, 197, 206, 216, 220, 221, 235, 236, 239, 267, 268, 271, 281, 285], "vector": [1, 2, 6, 7, 8, 14, 16, 34, 53, 56, 86, 94, 95, 99, 101, 102, 104, 106, 108, 109, 111, 112, 144, 145, 146, 154, 157, 170, 174, 183, 195, 206, 216, 226, 228, 240, 241, 267, 279], "capabl": [1, 3, 13, 17, 20, 53, 79, 135, 141, 162, 171, 182, 187, 191, 222, 228, 230, 231, 239, 251, 267], "pytorch": [1, 2, 4, 8, 11, 13, 16, 18, 20, 21, 22, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 52, 53, 55, 56, 57, 59, 60, 62, 63, 65, 68, 70, 74, 75, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 94, 95, 104, 105, 110, 112, 113, 115, 116, 121, 122, 124, 127, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 156, 157, 158, 159, 160, 161, 165, 166, 168, 170, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 194, 199, 201, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 225, 226, 230, 231, 232, 233, 234, 235, 236, 239, 244, 246, 247, 250, 251, 252, 253, 256, 259, 260, 261, 262, 263, 264, 266, 271, 272, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287], "adopt": [1, 27, 64, 168, 174, 180, 221, 242], "frame_skip": [1, 177], "frame": [1, 7, 154, 161, 176, 177, 187, 203, 282, 283], "count": [1, 7, 13, 23, 39, 47, 53, 86, 106, 153, 154, 177, 181, 183, 187, 190, 235], "frames_per_batch": [1, 177], "total_fram": [1, 177], "adjust": [1, 16, 23, 34, 39, 40, 46, 56, 79, 94, 97, 103, 141, 143, 144, 165, 179, 267], "total": [1, 6, 13, 14, 15, 16, 18, 19, 20, 21, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 68, 72, 74, 76, 77, 78, 79, 87, 89, 90, 92, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 122, 124, 127, 138, 140, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 180, 182, 183, 184, 185, 187, 190, 192, 194, 195, 197, 198, 205, 212, 213, 214, 215, 217, 223, 231, 232, 239, 240, 242, 252, 253, 256, 257, 258, 263, 264, 266, 272, 274, 278, 279, 280, 281, 283, 285, 287], "rais": [1, 11, 13, 18, 23, 79, 113, 140, 141, 142, 159, 162, 176, 177, 192, 194, 233, 267, 280, 282], "skip": [1, 6, 12, 16, 20, 23, 46, 105, 121, 148, 157, 161, 179, 181, 187, 192, 194, 198, 220, 221, 222, 232, 252, 257, 270, 283, 285], "unchang": [1, 11, 87, 94], "seem": [1, 47, 56, 142, 144, 154, 171, 173, 195, 252], "like": [1, 3, 4, 6, 7, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 35, 36, 39, 40, 43, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 64, 72, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 124, 127, 130, 132, 133, 135, 136, 137, 141, 142, 143, 145, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 162, 165, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 191, 194, 195, 197, 198, 200, 206, 213, 214, 215, 219, 220, 221, 222, 226, 227, 228, 234, 235, 236, 240, 241, 242, 248, 250, 251, 252, 253, 254, 257, 266, 267, 276, 277, 278, 279, 280, 282, 285], "cheat": [1, 102, 136, 183], "compar": [1, 6, 12, 17, 20, 23, 39, 47, 87, 95, 102, 104, 109, 112, 117, 127, 137, 139, 140, 141, 143, 153, 158, 159, 160, 162, 165, 168, 170, 171, 175, 177, 178, 179, 181, 183, 187, 190, 192, 194, 198, 201, 204, 205, 206, 212, 220, 222, 228, 232, 233, 239, 240, 241, 256, 265, 266, 267, 271, 280, 281, 285], "dataset": [1, 7, 20, 27, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 50, 53, 56, 57, 59, 61, 79, 95, 99, 104, 106, 122, 127, 136, 137, 138, 143, 144, 145, 149, 153, 155, 170, 171, 176, 180, 182, 183, 185, 187, 188, 190, 195, 219, 222, 241, 242, 243, 254, 267, 271, 275, 282, 287], "10m": 1, "element": [1, 6, 7, 8, 14, 20, 23, 40, 43, 52, 53, 94, 95, 99, 102, 106, 108, 109, 111, 136, 142, 153, 159, 165, 169, 177, 190, 194, 197, 213, 214, 215, 217, 222, 252, 254, 267], "2": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 21, 22, 27, 35, 36, 38, 46, 50, 53, 55, 56, 57, 59, 66, 67, 68, 72, 73, 76, 78, 79, 92, 94, 95, 97, 101, 102, 104, 105, 106, 108, 111, 112, 113, 116, 117, 120, 121, 124, 127, 136, 137, 138, 139, 141, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 159, 160, 162, 166, 168, 170, 175, 176, 177, 178, 179, 180, 181, 182, 190, 192, 194, 195, 198, 201, 203, 204, 205, 206, 207, 212, 217, 220, 221, 224, 227, 228, 230, 231, 232, 235, 236, 240, 241, 242, 251, 253, 256, 258, 264, 267, 272, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287], "anoth": [1, 4, 6, 11, 13, 16, 34, 43, 46, 52, 53, 56, 66, 79, 89, 97, 99, 102, 103, 105, 109, 112, 119, 120, 121, 136, 145, 146, 147, 148, 150, 153, 154, 157, 169, 171, 175, 177, 179, 180, 181, 182, 183, 191, 192, 194, 195, 197, 200, 205, 227, 250, 252, 257, 267, 268, 285], "actual": [1, 3, 6, 7, 11, 13, 15, 16, 17, 23, 34, 41, 53, 55, 56, 79, 89, 97, 104, 105, 108, 111, 117, 135, 136, 139, 142, 143, 144, 147, 151, 153, 158, 168, 171, 177, 183, 187, 188, 192, 194, 195, 204, 205, 212, 214, 226, 252, 278], "ratio": [1, 86, 104, 159, 171, 177, 187, 197], "interact": [1, 6, 7, 16, 53, 95, 101, 102, 143, 146, 148, 161, 177, 180, 188, 192, 194, 195, 199, 235, 279], "nutshel": [1, 214], "cautiou": 1, "about": [1, 4, 6, 7, 11, 12, 16, 17, 20, 23, 38, 39, 40, 43, 46, 53, 56, 57, 58, 59, 61, 76, 77, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 132, 136, 138, 140, 143, 144, 145, 148, 150, 151, 153, 155, 158, 159, 160, 168, 170, 171, 176, 177, 178, 179, 181, 182, 183, 185, 187, 190, 192, 194, 195, 197, 198, 203, 204, 205, 213, 214, 215, 220, 221, 222, 233, 235, 236, 255, 256, 263, 264, 266, 269, 271, 277, 281, 282, 287], "deal": [1, 6, 47, 53, 55, 56, 97, 104, 112, 120, 121, 138, 160, 171, 177, 194, 195, 235, 242, 269], "lead": [1, 4, 6, 7, 16, 18, 53, 56, 79, 86, 92, 104, 112, 144, 146, 148, 154, 171, 194, 214, 226, 233, 264, 267, 272, 285], "bias": [1, 35, 46, 99, 104, 121, 182, 198, 264, 269, 270], "comparison": [1, 20, 87, 95, 102, 103, 104, 105, 137, 159, 160, 201, 205, 212, 214, 217, 219, 222, 266], "scale": [1, 7, 23, 35, 44, 55, 60, 79, 99, 101, 104, 114, 131, 132, 136, 137, 138, 140, 151, 153, 154, 161, 173, 177, 178, 184, 185, 195, 200, 201, 205, 235, 236, 242, 251, 267, 272, 279, 287], "help": [1, 4, 6, 11, 12, 17, 20, 22, 23, 34, 35, 46, 53, 56, 72, 86, 92, 95, 104, 105, 108, 109, 111, 112, 121, 131, 132, 134, 136, 137, 138, 143, 150, 151, 154, 155, 159, 160, 165, 168, 174, 177, 178, 179, 180, 181, 182, 183, 190, 192, 194, 195, 199, 203, 205, 213, 214, 215, 217, 219, 221, 222, 226, 230, 232, 233, 234, 236, 242, 248, 250, 251, 252, 254, 265, 267, 268, 271, 277, 279, 280, 283, 285], "signal": [1, 46, 95, 97, 177, 179, 257, 266], "magnitud": [1, 20, 94, 175, 195, 222, 251], "truncat": [1, 102, 119, 159, 177, 222], "A": [1, 6, 7, 8, 11, 13, 14, 16, 20, 34, 35, 36, 40, 43, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 71, 72, 73, 76, 77, 79, 86, 87, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 113, 120, 121, 132, 136, 138, 142, 143, 144, 145, 148, 149, 153, 155, 158, 162, 168, 169, 170, 177, 178, 179, 180, 182, 183, 184, 185, 188, 190, 192, 194, 195, 198, 199, 203, 204, 216, 217, 221, 222, 234, 240, 241, 252, 256, 264, 267, 269, 277, 279, 282, 285, 287], "thousand": [1, 111, 132, 141, 144, 154, 183, 190], "500": [1, 7, 27, 160, 162, 173, 178, 181, 252], "good": [1, 2, 6, 7, 47, 54, 56, 97, 101, 102, 104, 111, 114, 136, 137, 143, 153, 154, 159, 165, 176, 177, 178, 182, 184, 188, 190, 194, 195, 197, 198, 216, 248, 252, 267, 272, 285, 287], "statist": [1, 56, 97, 130, 136, 147, 158, 175, 177, 183, 187, 188, 190, 242, 252], "arbitrari": [1, 6, 11, 16, 18, 34, 77, 95, 104, 109, 138, 155, 161, 170, 188, 192, 198, 257, 258], "random": [1, 7, 16, 19, 23, 43, 46, 47, 48, 50, 52, 55, 56, 66, 67, 69, 76, 77, 79, 95, 97, 101, 108, 109, 112, 113, 114, 119, 120, 127, 137, 138, 143, 145, 146, 151, 153, 155, 161, 165, 168, 169, 175, 177, 178, 179, 181, 183, 188, 192, 217, 232, 252, 254, 258, 267, 283], "standard": [1, 6, 11, 43, 47, 52, 56, 86, 92, 95, 97, 104, 105, 106, 112, 114, 116, 117, 130, 153, 176, 185, 192, 194, 195, 197, 205, 217, 254, 267], "deviat": [1, 86, 97, 104], "observationnorm": [1, 177], "init_stat": [1, 177], "purpos": [1, 6, 61, 79, 89, 94, 99, 103, 120, 137, 142, 143, 145, 153, 154, 158, 159, 168, 173, 176, 177, 180, 181, 187, 191, 192, 195, 203, 205, 213, 216, 234, 242, 264, 267, 272, 276], "get": [1, 2, 6, 7, 9, 11, 13, 16, 17, 18, 19, 20, 23, 27, 36, 38, 46, 47, 48, 53, 54, 55, 56, 59, 60, 64, 79, 87, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 119, 120, 121, 127, 131, 132, 135, 136, 138, 140, 141, 143, 144, 145, 146, 153, 155, 158, 160, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 183, 187, 188, 190, 191, 194, 195, 197, 199, 203, 204, 205, 207, 212, 219, 221, 222, 223, 227, 228, 232, 233, 240, 248, 252, 257, 267, 270, 271, 272, 282, 285, 286, 287], "summari": [1, 86, 111, 143, 154, 171, 177, 187, 194, 265, 266], "dummi": [1, 4, 11, 18, 50, 89, 97, 103, 151, 155, 160, 170, 173, 174, 195, 219, 234, 242, 282], "over": [1, 4, 6, 7, 12, 13, 16, 18, 20, 22, 23, 35, 36, 39, 40, 43, 47, 50, 52, 53, 54, 55, 56, 57, 59, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 112, 119, 120, 134, 136, 137, 138, 139, 140, 141, 144, 146, 150, 151, 153, 155, 158, 159, 160, 161, 162, 165, 170, 175, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 192, 194, 195, 197, 198, 201, 205, 216, 222, 226, 240, 251, 267, 270, 280, 281], "earlier": [1, 6, 7, 79, 97, 99, 102, 105, 106, 109, 112, 137, 139, 141, 154, 168, 171, 177, 183, 194, 251, 252], "turn": [1, 6, 7, 11, 16, 17, 23, 44, 53, 95, 99, 101, 102, 119, 145, 154, 160, 168, 169, 171, 175, 179, 183, 195, 206, 213, 214, 216], "seen": [1, 12, 13, 22, 23, 47, 50, 53, 55, 99, 102, 104, 109, 111, 112, 119, 154, 170, 180, 192, 194, 195, 216, 252, 279], "requir": [1, 2, 4, 6, 7, 8, 11, 12, 14, 16, 17, 18, 22, 23, 27, 38, 44, 46, 53, 54, 55, 56, 59, 64, 87, 89, 92, 94, 98, 103, 111, 112, 116, 117, 137, 141, 143, 145, 147, 148, 150, 151, 153, 154, 155, 157, 160, 165, 168, 169, 170, 171, 173, 176, 177, 179, 180, 181, 182, 183, 190, 191, 192, 194, 195, 197, 198, 203, 204, 205, 206, 207, 213, 214, 215, 219, 224, 226, 228, 230, 231, 233, 234, 236, 240, 241, 242, 251, 253, 254, 256, 257, 264, 266, 267, 272, 276, 277, 278, 279, 280, 283], "select": [1, 4, 6, 12, 54, 86, 92, 101, 104, 112, 114, 162, 175, 178, 179, 181, 187, 188, 192, 194, 203, 207, 214, 216, 222, 227, 240, 257, 267, 277, 279], "recal": [1, 7, 56, 94, 102, 105, 111, 151, 177, 188, 213, 214, 215, 264, 266], "wrap": [1, 4, 6, 7, 12, 19, 36, 40, 48, 92, 97, 106, 108, 109, 114, 119, 137, 139, 142, 147, 151, 154, 161, 171, 177, 180, 181, 190, 191, 194, 195, 204, 230, 231, 234, 235, 248, 251, 257, 286], "flow": [1, 6, 16, 34, 46, 56, 70, 74, 89, 101, 104, 114, 115, 116, 117, 130, 136, 139, 177, 178, 187, 192, 204, 219, 267, 271, 287], "handl": [1, 6, 11, 12, 18, 53, 56, 57, 89, 99, 102, 112, 113, 117, 130, 136, 137, 141, 144, 155, 166, 170, 171, 173, 175, 176, 177, 180, 181, 182, 190, 191, 192, 194, 195, 212, 214, 217, 226, 228, 233, 234, 241, 250, 256, 257, 266, 282, 285], "specifi": [1, 4, 6, 7, 11, 13, 18, 20, 23, 27, 36, 40, 55, 56, 86, 92, 94, 95, 97, 99, 102, 103, 108, 113, 120, 137, 138, 139, 140, 141, 143, 144, 148, 154, 155, 157, 174, 175, 177, 180, 181, 187, 190, 194, 200, 201, 212, 213, 214, 215, 217, 219, 220, 222, 226, 227, 232, 242, 256, 257, 265, 267, 268, 276, 279, 281, 282, 285], "scenario": [1, 7, 16, 113, 114, 116, 117, 121, 127, 142, 171, 178, 181, 194, 203, 216, 240, 264, 268, 285], "tensordictsequenti": [1, 154], "valueoper": [1, 177], "automat": [1, 2, 4, 6, 7, 11, 12, 17, 35, 37, 38, 40, 43, 46, 48, 49, 50, 52, 57, 61, 64, 101, 103, 105, 112, 120, 124, 131, 136, 137, 138, 139, 141, 142, 143, 148, 159, 162, 171, 173, 177, 178, 181, 184, 185, 187, 190, 191, 194, 195, 201, 203, 221, 228, 232, 233, 234, 240, 241, 242, 248, 253, 255, 256, 257, 263, 266, 267, 271, 279, 287], "out_kei": [1, 16, 154, 177], "state_action_valu": 1, "state_valu": [1, 177], "built": [1, 4, 6, 7, 9, 11, 21, 34, 50, 94, 95, 97, 99, 106, 136, 144, 153, 154, 177, 182, 188, 192, 194, 197, 242, 250, 252, 254, 270, 277, 287], "present": [1, 7, 11, 22, 39, 86, 87, 104, 113, 169, 174, 175, 178, 179, 181, 190, 192, 194, 197, 217, 267, 286], "origin": [1, 6, 7, 8, 11, 14, 16, 20, 23, 34, 53, 56, 79, 92, 95, 102, 104, 109, 113, 114, 139, 141, 142, 144, 145, 165, 166, 169, 170, 171, 175, 178, 190, 191, 192, 194, 200, 205, 206, 215, 219, 222, 241, 242, 248, 282, 283], "paper": [1, 6, 14, 19, 20, 56, 79, 124, 138, 141, 177, 178, 180, 182, 183, 185, 195, 198, 217, 222], "found": [1, 4, 6, 7, 12, 19, 53, 54, 95, 104, 143, 151, 153, 154, 158, 162, 171, 180, 181, 182, 190, 194, 217, 227, 241, 248, 267, 282], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 6, 8, 11, 12, 13, 15, 16, 19, 23, 47, 53, 55, 56, 57, 79, 89, 94, 95, 97, 104, 105, 106, 108, 109, 111, 112, 127, 139, 140, 141, 143, 144, 145, 146, 148, 149, 153, 154, 158, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 190, 192, 194, 195, 197, 198, 200, 205, 212, 213, 214, 228, 230, 232, 233, 234, 248, 252, 256, 257, 258, 270, 272, 280, 282, 286], "lazi": 1, "materi": [1, 137, 141, 160, 195, 198, 204, 212, 224, 258, 264], "abl": [1, 3, 4, 6, 7, 16, 17, 20, 34, 35, 53, 66, 79, 89, 97, 104, 105, 107, 111, 112, 120, 127, 143, 147, 148, 149, 150, 153, 154, 155, 159, 161, 162, 168, 170, 177, 180, 188, 192, 194, 195, 197, 198, 203, 214, 222, 228, 239, 254, 264, 270, 279, 282], "devic": [1, 3, 4, 7, 11, 12, 13, 16, 18, 19, 20, 22, 23, 43, 46, 47, 48, 52, 53, 54, 56, 57, 59, 60, 64, 67, 77, 92, 102, 104, 106, 112, 114, 120, 132, 135, 136, 137, 139, 141, 143, 144, 150, 151, 153, 154, 159, 162, 168, 171, 173, 175, 176, 177, 180, 181, 187, 195, 197, 200, 201, 203, 204, 206, 207, 217, 219, 221, 222, 224, 230, 231, 233, 234, 236, 239, 240, 241, 252, 255, 257, 258, 263, 264, 268, 270, 271, 277, 278, 279, 281, 282, 283, 286, 287], "achiev": [1, 3, 4, 7, 16, 20, 23, 27, 34, 47, 53, 60, 86, 92, 104, 136, 139, 142, 147, 153, 154, 159, 168, 169, 171, 175, 177, 178, 187, 195, 198, 200, 204, 205, 222, 232, 240, 267, 271, 279, 281, 285], "oper": [1, 7, 8, 15, 16, 17, 20, 21, 22, 23, 34, 35, 40, 46, 48, 50, 53, 55, 64, 66, 67, 77, 86, 87, 89, 97, 98, 101, 102, 104, 105, 106, 111, 112, 113, 114, 115, 116, 119, 120, 130, 135, 136, 137, 139, 140, 141, 142, 144, 146, 148, 153, 154, 155, 157, 159, 160, 162, 165, 170, 173, 174, 176, 177, 179, 183, 187, 188, 190, 191, 192, 194, 195, 198, 199, 205, 212, 213, 216, 219, 220, 222, 226, 227, 234, 235, 239, 240, 241, 248, 250, 251, 252, 254, 257, 258, 266, 270, 271, 277, 278, 279, 282, 285, 286, 287], "practic": [1, 6, 7, 13, 41, 50, 53, 55, 56, 94, 95, 97, 102, 104, 106, 112, 113, 120, 124, 127, 131, 134, 136, 141, 142, 149, 154, 159, 162, 169, 175, 177, 178, 194, 198, 212, 213, 217, 252, 253, 256, 267, 272, 281, 282, 285], "small": [1, 3, 6, 7, 20, 22, 27, 46, 47, 50, 61, 79, 94, 97, 99, 101, 102, 104, 106, 107, 109, 114, 120, 127, 137, 138, 140, 143, 144, 145, 147, 158, 168, 169, 171, 176, 177, 178, 181, 183, 185, 190, 195, 197, 203, 205, 212, 222, 240, 251, 252, 254, 267, 282, 283], "fake": [1, 7, 20, 23, 50, 56, 168, 194, 217, 222], "spec": [1, 117, 154, 177, 181, 194, 200, 252], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 14, 56, 91, 104, 139, 145, 159, 160, 161, 162, 165, 187, 190, 203], "ou": 1, "nois": [1, 7, 14, 56, 79, 235, 266], "reach": [1, 8, 12, 20, 56, 64, 104, 144, 151, 153, 161, 162, 177, 181, 194, 222, 242, 252], "minimum": [1, 4, 86, 139, 177, 181, 214], "iter": [1, 3, 7, 13, 14, 16, 27, 34, 35, 39, 40, 46, 47, 50, 56, 57, 59, 89, 92, 94, 95, 97, 99, 101, 105, 112, 114, 121, 143, 146, 149, 151, 154, 159, 177, 178, 179, 180, 181, 187, 188, 192, 195, 197, 231, 248, 251, 267, 270, 280, 282, 283, 286], "reset": [1, 23, 39, 97, 102, 112, 127, 154, 177, 178, 179, 181, 187, 192, 206, 242, 283], "develop": [1, 3, 4, 6, 11, 12, 14, 17, 27, 86, 89, 95, 108, 112, 114, 116, 130, 133, 146, 153, 162, 174, 181, 187, 192, 198, 200, 205, 206, 207, 212, 215, 216, 234, 235, 239, 241, 242, 255, 267], "tight": [1, 113, 114, 116, 117], "per": [1, 4, 6, 7, 11, 13, 23, 101, 104, 111, 131, 136, 138, 144, 145, 147, 151, 153, 154, 160, 162, 168, 173, 175, 177, 181, 182, 183, 184, 187, 188, 190, 194, 195, 197, 201, 203, 204, 212, 226, 228, 232, 233, 234, 242, 252, 256, 266, 276, 285, 286, 287], "sync": [1, 12, 13, 19, 59, 135, 136, 137, 138, 139, 140, 161, 195], "natur": [1, 6, 7, 20, 22, 27, 48, 79, 99, 104, 112, 143, 144, 154, 171, 180, 190, 214, 217, 222, 228], "resourc": [1, 57, 79, 92, 114, 116, 137, 151, 153, 168, 177, 187, 190, 199, 203, 239, 252, 267, 272, 275, 285], "alloc": [1, 7, 22, 43, 52, 59, 102, 147, 153, 168, 171, 187, 194, 195, 217, 224, 234, 256, 257, 286], "gpu": [1, 3, 14, 20, 22, 23, 43, 46, 50, 52, 53, 54, 56, 57, 58, 60, 61, 64, 67, 77, 86, 87, 97, 98, 102, 103, 104, 106, 114, 120, 124, 127, 132, 136, 137, 138, 139, 141, 142, 144, 149, 150, 151, 153, 154, 155, 159, 162, 165, 168, 170, 173, 177, 178, 180, 181, 182, 190, 192, 197, 201, 203, 204, 206, 207, 219, 222, 223, 227, 228, 230, 233, 234, 248, 251, 252, 257, 270, 271, 277, 279, 287], "worker": [1, 7, 13, 19, 55, 56, 97, 132, 137, 138, 140, 153, 162, 177, 180, 181, 187, 232, 267], "so": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 27, 34, 47, 50, 53, 55, 56, 57, 69, 72, 79, 87, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 119, 120, 127, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 159, 160, 161, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 192, 194, 195, 197, 198, 200, 203, 204, 205, 212, 214, 215, 216, 217, 222, 224, 227, 240, 241, 248, 251, 252, 256, 266, 267, 270, 271, 280, 281, 282, 285, 286], "syncdatacollector": [1, 177], "process": [1, 4, 6, 7, 13, 14, 16, 17, 19, 20, 22, 27, 36, 39, 40, 44, 50, 53, 54, 55, 56, 60, 64, 79, 86, 89, 94, 95, 97, 99, 103, 104, 112, 113, 114, 121, 124, 130, 132, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 149, 150, 153, 154, 158, 159, 161, 162, 170, 171, 176, 178, 180, 181, 182, 183, 187, 190, 194, 195, 203, 204, 205, 216, 217, 219, 221, 222, 228, 232, 233, 234, 236, 242, 252, 254, 256, 257, 266, 267, 268, 270, 271, 276, 281, 282, 283, 285, 286], "offer": [1, 4, 9, 13, 16, 18, 22, 40, 44, 46, 57, 64, 94, 95, 106, 138, 139, 141, 155, 157, 159, 160, 171, 195, 198, 234, 250, 252, 257, 266, 267, 272, 285], "multiasyncdatacollector": [1, 177], "rollout": [1, 177], "asynchron": [1, 132, 136, 140, 143, 174, 177, 181, 257, 271], "manner": [1, 6, 11, 16, 23, 34, 94, 112, 177, 190, 195], "therebi": [1, 206, 212, 217, 282], "decoupl": [1, 36, 169], "factori": [1, 7, 102, 108, 213, 214, 253, 256], "empti": [1, 4, 6, 7, 8, 11, 16, 23, 102, 145, 159, 176, 183, 187, 190, 194, 198, 204, 217, 224, 227, 257, 266], "maximum": [1, 13, 53, 86, 99, 109, 143, 145, 154, 159, 177, 182, 183, 216, 267], "non": [1, 2, 3, 6, 11, 13, 16, 23, 35, 53, 55, 57, 58, 60, 86, 89, 99, 102, 104, 105, 107, 111, 112, 121, 138, 139, 143, 147, 148, 153, 154, 157, 160, 162, 165, 175, 179, 182, 183, 187, 192, 195, 198, 205, 212, 219, 224, 234, 252, 264, 268, 281, 285], "termin": [1, 16, 57, 92, 177, 178, 180, 181, 190, 227], "max_frames_per_traj": [1, 177], "effect": [1, 6, 7, 8, 11, 13, 18, 59, 79, 86, 95, 99, 102, 104, 112, 117, 141, 144, 145, 151, 155, 168, 170, 171, 175, 178, 182, 183, 190, 195, 214, 226, 233, 235, 251, 267, 272, 281], "regist": [1, 8, 9, 18, 39, 46, 50, 99, 117, 119, 121, 135, 136, 138, 139, 141, 151, 157, 168, 169, 177, 191, 194, 203, 204, 228, 241, 248, 251, 258, 269], "new": [1, 2, 4, 6, 7, 9, 11, 14, 16, 18, 27, 33, 34, 38, 43, 46, 48, 52, 53, 54, 56, 59, 65, 68, 79, 81, 82, 83, 84, 86, 89, 101, 102, 103, 104, 106, 109, 111, 116, 117, 119, 121, 127, 131, 133, 135, 136, 137, 138, 139, 140, 142, 146, 154, 157, 159, 161, 168, 169, 170, 171, 174, 175, 177, 178, 179, 182, 183, 187, 190, 191, 194, 195, 197, 200, 203, 204, 206, 207, 212, 217, 220, 226, 227, 228, 248, 257, 264, 267, 268, 271, 273, 287], "stepcount": [1, 154, 177], "infer": [1, 3, 7, 9, 11, 12, 23, 41, 43, 52, 53, 95, 97, 99, 103, 104, 108, 111, 112, 114, 130, 134, 136, 139, 142, 143, 146, 147, 159, 177, 179, 190, 191, 192, 194, 195, 197, 216, 217, 219, 220, 222, 227, 228, 234, 242, 248, 254, 255, 269, 271, 272, 279, 282, 285], "manual": [1, 4, 6, 11, 14, 18, 36, 50, 53, 57, 73, 76, 77, 102, 104, 112, 120, 121, 139, 148, 154, 155, 169, 170, 171, 173, 194, 195, 217, 228, 232, 236, 248, 251, 267, 285], "around": [1, 6, 7, 13, 27, 36, 40, 53, 59, 95, 97, 99, 102, 104, 127, 136, 145, 155, 159, 160, 165, 170, 183, 187, 188, 194, 195, 204, 212, 213, 240, 258], "1m": [1, 36, 154, 177, 201], "outer": [1, 7, 138, 160], "loop": [1, 3, 6, 11, 13, 19, 23, 38, 40, 47, 50, 53, 55, 56, 79, 89, 94, 97, 101, 104, 112, 120, 137, 139, 143, 144, 146, 155, 159, 160, 161, 168, 170, 171, 180, 181, 188, 195, 222, 240, 252, 257, 267, 270], "equal": [1, 12, 94, 102, 104, 142, 162, 175, 177, 178, 190, 194, 203, 215, 282, 285], "length": [1, 14, 16, 53, 56, 94, 95, 99, 111, 112, 141, 145, 177, 182, 183, 195, 198, 201, 214, 217, 220, 222, 226, 271, 281], "sub": [1, 7, 94, 119, 141, 146, 173, 177, 181, 187, 192, 195, 236, 276, 285], "shape": [1, 4, 8, 18, 20, 34, 36, 43, 46, 50, 52, 53, 56, 72, 89, 94, 97, 104, 105, 108, 111, 112, 119, 120, 138, 141, 144, 145, 146, 155, 157, 160, 170, 177, 187, 190, 191, 195, 197, 198, 205, 215, 217, 222, 224, 240, 248, 252, 255, 257, 263, 271, 276, 277, 279, 280, 282, 287], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 34, 35, 39, 40, 44, 46, 47, 48, 53, 60, 67, 76, 79, 86, 89, 92, 94, 97, 99, 102, 103, 104, 105, 106, 111, 112, 121, 130, 131, 132, 134, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 153, 154, 157, 160, 161, 165, 171, 173, 174, 177, 178, 179, 181, 184, 185, 188, 190, 191, 192, 194, 195, 197, 198, 201, 204, 205, 206, 212, 213, 217, 219, 220, 222, 224, 228, 230, 232, 236, 239, 241, 248, 251, 252, 253, 255, 256, 257, 263, 266, 270, 271, 272, 275, 279, 281, 282, 283, 287], "assess": [1, 171, 195], "mode": [1, 14, 41, 46, 53, 56, 59, 79, 86, 89, 91, 95, 101, 121, 131, 136, 138, 146, 147, 148, 154, 159, 161, 162, 165, 173, 179, 182, 183, 184, 188, 190, 191, 192, 194, 195, 198, 200, 203, 219, 220, 234, 240, 242, 252, 267, 271, 274, 281, 282, 285, 287], "dedic": [1, 12, 59, 102, 180, 181, 250, 251, 286], "frequenc": [1, 87, 143], "everi": [1, 2, 7, 11, 12, 16, 17, 20, 22, 23, 27, 34, 35, 36, 40, 46, 47, 50, 53, 55, 56, 59, 64, 94, 97, 99, 101, 102, 103, 127, 141, 142, 144, 145, 147, 153, 154, 157, 162, 168, 169, 170, 171, 175, 177, 178, 179, 181, 183, 187, 188, 192, 194, 195, 217, 222, 230, 253, 265, 267, 278, 286], "10": [1, 3, 7, 8, 11, 13, 20, 23, 35, 36, 44, 46, 47, 48, 50, 53, 57, 76, 79, 87, 92, 97, 101, 103, 112, 119, 121, 137, 138, 140, 146, 151, 153, 155, 160, 162, 176, 177, 179, 180, 181, 182, 183, 184, 187, 188, 190, 194, 195, 198, 200, 203, 205, 207, 220, 222, 224, 227, 230, 232, 233, 236, 240, 242, 248, 252, 254, 257, 258, 266, 282, 283, 287], "come": [1, 6, 7, 12, 20, 23, 44, 55, 56, 79, 89, 92, 94, 99, 102, 104, 105, 117, 121, 137, 141, 143, 153, 154, 159, 168, 169, 171, 174, 177, 182, 192, 194, 195, 198, 205, 222, 242, 252, 277, 286], "flavor": [1, 4, 6], "priorit": [1, 217, 267], "error": [1, 4, 6, 7, 11, 12, 13, 14, 18, 39, 40, 46, 50, 53, 54, 57, 72, 94, 97, 99, 102, 104, 108, 112, 116, 117, 120, 138, 140, 142, 148, 168, 174, 177, 178, 192, 195, 198, 203, 205, 212, 221, 236, 241, 252, 264, 267, 270, 280], "higher": [1, 23, 47, 52, 57, 86, 94, 95, 99, 104, 106, 120, 137, 138, 144, 145, 148, 157, 160, 176, 177, 178, 187, 188, 190, 194, 195, 219, 226, 228, 231, 236, 239], "likelihood": [1, 39, 53, 99, 106, 112], "regular": [1, 6, 7, 11, 12, 23, 27, 104, 112, 124, 141, 144, 145, 160, 169, 170, 171, 185, 195, 198, 212, 214, 217, 219, 241, 267, 279], "circular": [1, 203, 221], "compos": [1, 4, 6, 7, 9, 12, 18, 20, 23, 64, 97, 99, 101, 106, 136, 137, 153, 157, 165, 170, 176, 177, 180, 182, 184, 188, 190, 198, 236, 241, 242, 254, 257, 272, 275, 277, 287], "pick": [1, 7, 23, 47, 105, 144, 178, 183, 248, 266, 277], "tensor": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 53, 61, 64, 65, 67, 68, 69, 71, 72, 73, 75, 78, 79, 89, 94, 95, 96, 98, 99, 101, 103, 104, 106, 109, 112, 113, 114, 117, 119, 121, 131, 136, 137, 138, 139, 145, 146, 147, 148, 151, 153, 154, 155, 157, 159, 160, 162, 165, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 190, 191, 192, 194, 195, 197, 201, 203, 204, 205, 206, 207, 212, 213, 214, 220, 222, 223, 224, 226, 227, 232, 235, 236, 239, 240, 241, 250, 251, 252, 254, 255, 256, 257, 258, 263, 266, 269, 270, 271, 276, 279, 283, 287], "physic": [1, 16, 111, 171, 256, 267, 285], "memori": [1, 6, 7, 11, 12, 19, 20, 22, 23, 43, 52, 53, 55, 59, 92, 99, 102, 103, 104, 107, 110, 112, 114, 121, 131, 135, 136, 137, 138, 139, 141, 149, 153, 154, 159, 160, 161, 165, 175, 180, 182, 184, 187, 190, 194, 195, 197, 198, 201, 203, 204, 205, 212, 215, 217, 222, 228, 232, 241, 251, 252, 256, 258, 271, 276, 286, 287], "map": [1, 7, 14, 35, 53, 56, 95, 97, 99, 104, 109, 111, 112, 121, 139, 144, 154, 155, 160, 168, 169, 170, 177, 178, 181, 190, 194, 197, 222, 226, 232, 234, 256, 266, 267, 269, 283], "arrai": [1, 7, 34, 35, 46, 47, 50, 55, 64, 76, 77, 89, 94, 95, 102, 111, 112, 119, 120, 144, 145, 161, 176, 183, 190, 215, 250], "desir": [1, 4, 6, 11, 14, 16, 19, 53, 56, 79, 86, 104, 121, 139, 153, 175, 187, 190, 194, 201, 203, 205, 213, 224, 248, 251, 254, 282, 285], "hyperparamet": [1, 7, 16, 20, 56, 112, 121, 122, 131, 134, 136, 143, 144, 212, 217, 269, 287], "temporari": [1, 6, 143], "directori": [1, 6, 7, 14, 36, 53, 55, 56, 92, 101, 104, 121, 124, 127, 143, 144, 145, 159, 183, 187, 190, 203, 205, 234, 242, 248, 265, 276, 285], "disk": [1, 8, 36, 97, 101, 114, 121, 154, 171, 203, 204, 252, 256, 257, 265, 276, 277], "along": [1, 6, 7, 11, 16, 20, 34, 35, 43, 46, 52, 53, 57, 58, 59, 60, 87, 94, 95, 97, 98, 99, 101, 102, 103, 104, 108, 109, 112, 113, 127, 137, 138, 144, 145, 149, 150, 154, 168, 175, 178, 180, 188, 190, 194, 195, 201, 214, 219, 220, 222, 224, 281], "dimens": [1, 6, 7, 14, 16, 22, 35, 43, 50, 52, 53, 95, 97, 99, 101, 108, 109, 111, 112, 131, 136, 141, 144, 154, 155, 162, 170, 176, 177, 179, 191, 194, 195, 201, 213, 217, 220, 226, 251, 258, 267, 282], "feed": [1, 7, 14, 23, 47, 50, 53, 97, 99, 103, 104, 107, 109, 114, 121, 141, 144, 145, 151, 161, 178, 183, 188, 234, 254, 270], "adapt": [1, 2, 16, 20, 27, 92, 97, 114, 143, 201, 222, 252], "divid": [1, 11, 12, 13, 14, 16, 17, 23, 89, 104, 106, 140, 153, 169, 171, 181, 282, 285], "yield": [1, 7, 13, 14, 20, 23, 39, 41, 102, 112, 121, 141, 142, 179, 181, 198, 205, 215, 222, 240, 242, 267], "regard": [1, 7, 8, 13, 16, 121, 159, 160, 177, 187, 195, 281], "200": [1, 7, 154, 162, 181, 205, 240], "random_crop_len": 1, "25": [1, 36, 79, 94, 101, 104, 112, 119, 122, 127, 137, 177, 180, 184, 190, 205, 240, 252, 257, 287], "balanc": [1, 7, 22, 151, 187, 195, 248], "choic": [1, 4, 7, 11, 18, 92, 143, 145, 153, 171, 195, 230, 267], "heterogen": [1, 220], "figur": [1, 11, 14, 16, 36, 53, 79, 86, 97, 104, 135, 136, 140, 141, 143, 154, 159, 171, 177, 179, 187, 188, 190, 194], "dataflow": 1, "8": [1, 3, 6, 7, 8, 20, 23, 36, 92, 99, 100, 101, 109, 112, 119, 120, 138, 141, 147, 151, 159, 160, 162, 173, 176, 177, 187, 190, 194, 195, 201, 203, 205, 207, 217, 222, 223, 227, 228, 232, 233, 234, 235, 236, 240, 242, 251, 257, 267, 274, 283, 285, 286], "1000": [1, 2, 23, 46, 101, 103, 127, 137, 138, 142, 159, 177, 188, 222, 232, 248, 252, 266], "known": [1, 4, 6, 14, 20, 94, 141, 153, 157, 158, 175, 178, 183, 194, 195, 203, 222, 228, 252, 266, 277], "utd": 1, "64": [1, 6, 7, 17, 20, 22, 23, 36, 40, 46, 92, 102, 109, 112, 137, 138, 141, 154, 155, 160, 170, 176, 177, 179, 180, 195, 201, 216, 222, 226, 228, 240, 242, 252, 257, 272], "reproduc": [1, 14, 56, 79, 97, 102, 104, 159, 177, 178, 181, 192, 240, 252, 267], "realiz": [1, 20, 222], "sever": [1, 2, 3, 4, 8, 12, 13, 17, 19, 23, 34, 40, 44, 48, 50, 56, 57, 58, 79, 104, 106, 138, 141, 144, 150, 153, 161, 168, 169, 171, 174, 177, 179, 180, 187, 188, 192, 194, 198, 214, 219, 240, 241, 252, 266, 276, 277, 285], "qnet": 1, "ve": [1, 6, 7, 11, 20, 48, 50, 54, 94, 95, 97, 99, 102, 103, 112, 142, 154, 158, 160, 168, 170, 171, 180, 188, 194, 195, 205, 212, 214, 215, 216, 222, 233, 234, 252], "becaus": [1, 2, 4, 6, 7, 11, 14, 16, 17, 18, 19, 20, 23, 34, 36, 41, 43, 46, 47, 50, 52, 53, 55, 56, 59, 60, 79, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 112, 113, 114, 117, 121, 127, 138, 139, 142, 144, 147, 148, 151, 154, 157, 160, 161, 162, 165, 170, 171, 175, 179, 181, 183, 185, 187, 192, 194, 197, 198, 205, 212, 214, 222, 226, 230, 240, 252, 264, 267, 269, 270, 282, 283], "_must_": 1, "off": [1, 11, 19, 23, 27, 34, 36, 46, 53, 99, 101, 102, 121, 137, 143, 144, 159, 168, 177, 179, 180, 181, 190, 212, 233], "dictat": [1, 16], "introduc": [1, 8, 13, 17, 19, 20, 27, 35, 38, 58, 92, 95, 104, 106, 119, 120, 136, 138, 140, 146, 151, 159, 162, 168, 179, 181, 182, 183, 190, 192, 194, 195, 204, 206, 207, 212, 214, 215, 216, 219, 222, 226, 228, 232, 233, 241, 264, 267, 282, 283, 285], "outdat": 1, "trick": [1, 4, 7, 12, 53, 102, 148, 153, 160], "multi": [1, 6, 7, 16, 22, 50, 53, 56, 57, 58, 60, 64, 94, 95, 99, 102, 106, 134, 136, 138, 139, 141, 149, 150, 151, 154, 177, 179, 182, 184, 187, 197, 217, 234, 236, 267, 285, 287], "altern": [1, 7, 12, 52, 53, 109, 127, 137, 155, 158, 162, 174, 177, 183, 187, 190, 192, 198, 205, 215, 216, 234, 264, 267, 283], "hack": [1, 212, 264], "find": [1, 2, 4, 6, 7, 11, 12, 20, 34, 36, 43, 52, 79, 86, 87, 89, 92, 97, 99, 102, 105, 108, 112, 134, 136, 137, 140, 144, 153, 157, 159, 169, 178, 181, 183, 187, 194, 195, 212, 213, 214, 215, 216, 222, 242, 248, 250, 252, 265], "well": [1, 3, 4, 6, 7, 11, 12, 13, 23, 36, 43, 47, 52, 53, 57, 86, 89, 92, 95, 97, 104, 106, 108, 112, 114, 121, 127, 130, 137, 138, 139, 142, 143, 144, 147, 148, 153, 154, 157, 168, 169, 171, 173, 176, 179, 180, 181, 182, 183, 187, 188, 190, 192, 195, 197, 212, 213, 214, 217, 224, 233, 234, 236, 241, 248, 252, 256, 264, 266, 269, 277, 278, 279, 282, 283, 285], "despit": [1, 79, 146, 151], "fact": [1, 3, 4, 6, 7, 11, 14, 16, 23, 34, 43, 79, 94, 95, 97, 99, 102, 104, 106, 111, 142, 169, 177, 178, 188, 194, 195, 198], "part": [1, 3, 6, 7, 11, 12, 15, 16, 17, 19, 39, 46, 48, 53, 56, 79, 92, 94, 95, 99, 105, 107, 111, 112, 113, 136, 138, 141, 142, 144, 145, 148, 149, 153, 154, 158, 159, 166, 168, 169, 177, 183, 194, 195, 201, 203, 205, 206, 212, 214, 216, 220, 242, 248, 250, 251, 264, 266, 272, 276, 279, 282], "made": [1, 7, 12, 17, 23, 56, 92, 95, 102, 104, 138, 140, 142, 153, 154, 171, 183, 188, 190, 194, 215, 220, 250, 267], "thank": [1, 23, 53, 112, 143, 144, 145, 153, 183, 198], "hardupd": 1, "softupd": [1, 154], "appropri": [1, 7, 11, 53, 95, 112, 143, 151, 169, 180, 188, 195, 198, 204, 219, 240, 241, 251], "locat": [1, 4, 7, 33, 36, 43, 52, 86, 95, 97, 111, 119, 153, 171, 177, 187, 197, 203, 234, 248, 257, 267, 276], "adam": [1, 7, 13, 15, 39, 50, 56, 73, 103, 106, 120, 139, 153, 168, 177, 178, 179, 181, 230, 231, 233, 234, 239, 286], "pretti": [1, 19, 47, 102, 119, 120, 160, 181, 226], "plot": [1, 7, 56, 79, 86, 94, 143, 154, 171, 177, 178, 179, 188, 190], "alreadi": [1, 2, 4, 6, 7, 12, 13, 17, 94, 97, 102, 104, 105, 112, 141, 143, 151, 162, 168, 171, 173, 176, 177, 182, 188, 195, 214, 216, 221, 232, 236, 240, 241, 252, 254, 267, 268, 269, 270, 272, 286], "mention": [1, 4, 6, 7, 12, 13, 17, 19, 56, 79, 89, 102, 104, 105, 121, 137, 141, 153, 154, 171, 178, 180, 187, 190, 194, 198, 234, 248, 256, 264, 276, 285], "greater": [1, 13, 53, 56, 95, 120, 142, 227, 285], "concret": [1, 6, 7, 8, 11, 13, 94, 171, 177, 194, 212], "takeawai": [1, 124, 198, 267], "further": [1, 6, 7, 11, 23, 50, 79, 92, 99, 104, 112, 141, 153, 159, 171, 175, 177, 190, 191, 192, 194, 205, 217, 219, 220, 221, 233, 241, 256, 275], "might": [1, 4, 6, 8, 11, 12, 17, 18, 19, 34, 41, 47, 54, 55, 56, 57, 94, 97, 102, 104, 105, 109, 111, 114, 117, 119, 139, 148, 149, 150, 151, 153, 158, 160, 169, 171, 178, 181, 182, 183, 187, 192, 194, 195, 197, 198, 203, 205, 212, 221, 227, 236, 252, 253, 257, 264, 267, 272, 282, 285], "dispatch": [1, 4, 6, 17, 135, 136, 139, 174, 198, 228, 240, 248, 251, 278], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 27, 53, 89, 94, 112, 114, 121, 131, 136, 138, 139, 149, 198, 219, 234, 252], "runnable_code_remov": [1, 14, 15, 16, 18, 20, 27, 34, 35, 38, 39, 40, 41, 43, 44, 46, 47, 48, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 77, 79, 89, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 119, 120, 121, 124, 127, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 161, 162, 163, 165, 168, 169, 170, 171, 175, 178, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 204, 205, 212, 213, 214, 215, 226, 231, 239, 250, 251, 252, 253, 254, 256, 257, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281], "minut": [1, 14, 15, 16, 18, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 72, 76, 77, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 124, 127, 140, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 182, 183, 185, 188, 192, 194, 195, 197, 198, 205, 212, 213, 214, 215, 231, 239, 253, 256, 258, 264, 272, 278, 279, 280, 281, 283], "002": [1, 15, 16, 18, 21, 34, 35, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 55, 72, 74, 77, 78, 92, 94, 99, 100, 102, 105, 110, 111, 114, 117, 118, 122, 124, 138, 142, 143, 144, 147, 154, 155, 158, 161, 165, 168, 169, 170, 175, 178, 183, 184, 185, 212, 213, 215, 223, 231, 239, 253, 256, 263, 264, 272, 274, 278, 279, 280, 281, 287], "jupyt": [1, 14, 15, 16, 18, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 204, 205, 212, 213, 214, 215, 217, 226, 231, 239, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 283], "notebook": [1, 14, 15, 16, 18, 20, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 204, 205, 212, 213, 214, 215, 217, 226, 231, 239, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 283], "coding_ddpg": [1, 21, 287], "ipynb": [1, 14, 15, 16, 18, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 204, 205, 212, 213, 214, 215, 217, 226, 231, 239, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 283], "python": [1, 3, 7, 8, 12, 14, 15, 16, 17, 20, 21, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 60, 61, 66, 67, 69, 71, 72, 73, 76, 77, 79, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 176, 177, 178, 180, 182, 183, 185, 187, 191, 192, 194, 195, 197, 198, 201, 203, 204, 205, 206, 212, 213, 214, 215, 217, 219, 220, 221, 226, 231, 234, 235, 236, 239, 241, 242, 248, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 278, 279, 280, 282, 285, 287], "sourc": [1, 3, 6, 7, 12, 13, 14, 15, 16, 18, 19, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 59, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 138, 141, 142, 143, 144, 145, 147, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 174, 175, 177, 178, 179, 181, 182, 183, 185, 187, 190, 191, 192, 194, 195, 197, 198, 203, 204, 205, 206, 212, 213, 214, 215, 217, 220, 226, 227, 231, 239, 241, 242, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 283], "py": [1, 4, 6, 7, 11, 12, 14, 15, 16, 18, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 127, 137, 138, 139, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 173, 174, 175, 177, 178, 180, 182, 183, 184, 185, 187, 191, 192, 194, 195, 197, 198, 201, 203, 204, 205, 212, 213, 214, 215, 217, 221, 223, 226, 227, 231, 235, 236, 239, 242, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 263, 264, 265, 266, 267, 268, 269, 270, 272, 274, 278, 279, 280, 281, 282, 283, 285, 287], "zip": [1, 7, 14, 15, 16, 18, 20, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 142, 143, 144, 145, 147, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 168, 169, 170, 171, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 204, 205, 212, 213, 214, 215, 217, 222, 226, 231, 239, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 272, 278, 279, 280, 281, 283], "The": [2, 3, 4, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 40, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 71, 72, 73, 77, 79, 86, 87, 89, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 128, 131, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 190, 191, 192, 194, 195, 197, 200, 201, 203, 204, 205, 206, 212, 213, 214, 215, 216, 217, 219, 221, 222, 224, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 251, 252, 254, 256, 257, 264, 265, 266, 267, 270, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286], "packag": [2, 4, 6, 7, 20, 22, 27, 47, 50, 55, 61, 64, 72, 73, 92, 103, 104, 106, 112, 116, 120, 127, 131, 132, 136, 137, 138, 151, 153, 158, 174, 176, 178, 181, 187, 190, 192, 221, 222, 236, 241, 250, 254, 257, 266, 270, 271, 282, 283], "build": [2, 7, 8, 16, 23, 34, 36, 37, 38, 39, 40, 41, 43, 44, 50, 53, 64, 72, 73, 92, 94, 95, 96, 97, 98, 101, 102, 103, 105, 111, 112, 119, 120, 124, 130, 131, 132, 136, 144, 145, 153, 154, 157, 166, 168, 170, 171, 177, 178, 179, 180, 181, 184, 194, 195, 199, 203, 207, 217, 220, 226, 241, 252, 254, 266, 267, 279, 282, 283, 287], "highli": [2, 6, 7, 12, 22, 53, 92, 183, 195, 226, 267], "dynam": [2, 6, 7, 8, 11, 14, 16, 17, 23, 34, 46, 57, 69, 94, 104, 107, 110, 113, 120, 121, 130, 131, 136, 146, 162, 175, 177, 200, 205, 241, 242, 251, 255, 267, 271, 274, 277, 279, 282, 283, 287], "neural": [2, 6, 15, 16, 20, 21, 34, 37, 38, 40, 46, 49, 51, 53, 55, 61, 72, 79, 94, 95, 97, 99, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 120, 127, 131, 133, 134, 135, 136, 143, 144, 145, 146, 147, 154, 166, 175, 177, 178, 180, 183, 184, 185, 188, 190, 216, 219, 222, 228, 240, 241, 248, 255, 263, 267, 271, 272, 287], "network": [2, 3, 6, 8, 11, 14, 15, 16, 20, 23, 34, 37, 38, 39, 40, 41, 46, 49, 51, 53, 55, 61, 72, 73, 79, 94, 95, 97, 99, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 120, 127, 131, 133, 135, 136, 142, 143, 146, 147, 150, 151, 165, 166, 169, 171, 175, 180, 184, 187, 188, 190, 203, 216, 219, 222, 228, 240, 241, 242, 248, 255, 258, 263, 267, 271, 272, 287], "api": [2, 4, 6, 9, 10, 11, 12, 13, 16, 17, 18, 22, 27, 35, 36, 38, 40, 43, 44, 52, 60, 86, 95, 116, 119, 121, 130, 131, 135, 136, 137, 138, 140, 141, 142, 143, 146, 151, 153, 158, 159, 160, 164, 170, 172, 173, 179, 180, 181, 187, 192, 194, 195, 197, 200, 201, 204, 205, 216, 219, 220, 226, 232, 233, 234, 235, 236, 241, 242, 250, 252, 253, 257, 266, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 285, 287], "explor": [2, 7, 11, 16, 48, 53, 79, 117, 130, 131, 134, 136, 143, 148, 154, 159, 161, 168, 171, 173, 177, 178, 182, 183, 195, 198, 203, 216, 235, 250, 276, 279, 282, 285], "note": [2, 4, 6, 7, 11, 14, 17, 18, 19, 20, 22, 23, 27, 34, 46, 47, 48, 50, 53, 54, 56, 79, 89, 94, 95, 97, 99, 102, 103, 106, 107, 108, 109, 111, 112, 117, 119, 121, 127, 137, 138, 139, 141, 142, 147, 148, 150, 151, 153, 155, 157, 159, 160, 162, 168, 170, 171, 174, 175, 179, 180, 181, 182, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 203, 204, 212, 213, 214, 215, 217, 222, 224, 226, 228, 232, 233, 234, 236, 257, 266, 269, 272, 276, 277, 278, 279, 285, 286], "pleas": [2, 4, 5, 6, 7, 8, 9, 11, 12, 18, 23, 24, 25, 26, 47, 48, 50, 55, 62, 63, 85, 92, 137, 138, 141, 151, 153, 155, 157, 158, 159, 162, 168, 170, 174, 179, 180, 181, 187, 190, 192, 194, 195, 197, 198, 200, 203, 204, 206, 207, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 226, 227, 229, 234, 236, 237, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 253, 282, 284, 285], "differenti": [2, 6, 7, 16, 22, 37, 38, 43, 49, 50, 61, 94, 120, 131, 136, 154, 170, 178, 184, 185, 214, 287], "requires_grad": [2, 4, 7, 11, 34, 46, 50, 66, 67, 94, 102, 108, 112, 120, 127, 146, 148, 201, 222, 256, 270, 283], "track": [2, 6, 11, 16, 35, 39, 46, 56, 86, 94, 99, 101, 102, 106, 108, 112, 120, 138, 140, 145, 146, 150, 154, 181, 183, 187, 221, 235, 257, 265, 270, 281, 282], "auto": [2, 3, 6, 7, 8, 11, 12, 14, 59, 137, 138, 159, 174, 194, 195, 206, 216, 227, 241, 242, 252, 266, 285], "x": [2, 4, 6, 7, 8, 14, 22, 23, 34, 43, 46, 50, 52, 53, 56, 66, 67, 71, 72, 73, 76, 77, 79, 89, 94, 97, 99, 101, 102, 104, 105, 106, 108, 112, 120, 121, 137, 139, 141, 142, 144, 145, 146, 148, 151, 153, 160, 169, 171, 173, 174, 176, 179, 180, 181, 188, 190, 191, 192, 194, 197, 200, 205, 206, 207, 216, 217, 219, 222, 232, 233, 234, 236, 240, 241, 242, 248, 252, 258, 266, 277, 279, 282, 283], "std": [2, 6, 7, 8, 14, 17, 23, 55, 97, 104, 174, 176, 181, 190, 206, 212, 241, 252], "cout": [2, 7], "endl": [2, 7], "cpufloattyp": [2, 7], "y": [2, 6, 22, 34, 43, 44, 46, 50, 52, 56, 66, 67, 71, 72, 73, 76, 77, 79, 86, 89, 94, 99, 102, 104, 105, 108, 109, 112, 120, 138, 142, 173, 174, 187, 190, 192, 194, 206, 207, 214, 216, 232, 266, 277, 279, 283], "wa": [2, 3, 4, 6, 13, 18, 20, 47, 55, 56, 79, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 112, 117, 121, 137, 141, 143, 146, 151, 153, 161, 165, 168, 169, 170, 171, 173, 175, 176, 177, 178, 181, 182, 183, 188, 194, 195, 198, 205, 214, 215, 222, 234, 248, 251, 252, 257, 259, 260, 261, 262, 282, 285], "result": [2, 4, 6, 7, 8, 11, 12, 14, 16, 20, 23, 27, 34, 39, 41, 43, 46, 47, 55, 67, 76, 86, 87, 92, 94, 95, 97, 102, 103, 104, 108, 112, 113, 117, 120, 121, 124, 138, 139, 140, 141, 142, 145, 151, 153, 154, 157, 159, 160, 161, 165, 170, 171, 174, 175, 176, 178, 179, 180, 181, 182, 188, 190, 191, 192, 194, 197, 198, 200, 201, 203, 205, 213, 214, 215, 216, 217, 224, 227, 230, 232, 233, 239, 240, 242, 254, 256, 257, 264, 266, 267, 271, 272, 276, 277, 279, 280, 281, 283, 285, 286], "grad_fn": [2, 34, 46, 50, 94, 108, 112, 142, 148, 258], "name": [2, 4, 6, 7, 11, 12, 14, 15, 16, 18, 20, 22, 23, 34, 54, 55, 56, 86, 105, 111, 112, 114, 117, 119, 121, 136, 138, 141, 143, 146, 151, 154, 159, 166, 169, 173, 174, 175, 177, 178, 179, 180, 182, 183, 184, 187, 190, 192, 195, 197, 203, 219, 221, 222, 227, 234, 236, 240, 241, 242, 252, 256, 257, 258, 266, 268, 281, 283, 285, 287], "addbackward1": 2, "z": [2, 6, 56, 89, 102, 108, 194, 214, 283], "27": [2, 55, 76, 101, 159, 177, 181, 205, 240, 252, 281], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 34, 108, 112, 160], "exist": [2, 7, 11, 12, 13, 18, 20, 50, 56, 57, 64, 71, 87, 89, 102, 108, 112, 120, 136, 146, 153, 175, 176, 181, 182, 183, 185, 187, 190, 192, 194, 198, 212, 213, 215, 221, 222, 232, 233, 235, 251, 252, 264, 267], "flag": [2, 4, 6, 16, 46, 94, 108, 169, 183, 194, 220, 256, 266, 272, 285], "place": [2, 6, 7, 13, 16, 22, 43, 46, 48, 52, 56, 89, 95, 99, 101, 106, 108, 112, 138, 143, 151, 153, 155, 168, 170, 171, 177, 183, 190, 192, 194, 195, 198, 201, 212, 219, 226, 232, 234, 256, 264, 266, 267], "randn": [2, 4, 6, 7, 8, 14, 50, 76, 108, 112, 120, 121, 146, 151, 160, 179, 181, 206, 207, 216, 217, 219, 226, 232, 252, 258, 282, 286], "b": [2, 4, 6, 7, 20, 22, 34, 36, 46, 50, 66, 67, 76, 87, 94, 101, 102, 106, 109, 111, 112, 119, 120, 142, 144, 145, 159, 160, 162, 176, 178, 192, 194, 195, 198, 203, 207, 216, 217, 222, 252, 257, 277], "sumbackward0": 2, "backprop": [2, 46, 76, 108, 112, 120, 144, 161], "scalar": [2, 6, 16, 17, 34, 46, 53, 56, 66, 94, 97, 102, 108, 120, 188, 194, 227, 239], "backward": [2, 3, 4, 7, 8, 11, 13, 14, 15, 17, 18, 19, 23, 34, 39, 46, 48, 50, 56, 66, 67, 76, 77, 94, 95, 97, 101, 103, 108, 109, 112, 120, 127, 130, 135, 136, 137, 141, 142, 145, 149, 151, 153, 157, 160, 165, 170, 173, 177, 179, 180, 181, 184, 187, 188, 194, 195, 198, 230, 231, 232, 233, 234, 239, 241, 242, 251, 257, 267, 270, 275, 279, 281, 286, 287], "equival": [2, 6, 13, 34, 46, 94, 106, 120, 139, 157, 170, 173, 178, 180, 190, 194, 195, 198, 206, 212, 214, 217, 222, 267, 283], "print": [2, 6, 7, 13, 16, 22, 23, 35, 36, 40, 47, 48, 50, 53, 55, 56, 57, 76, 79, 89, 92, 94, 97, 99, 101, 102, 104, 106, 111, 112, 113, 116, 120, 121, 137, 138, 139, 140, 145, 146, 147, 150, 151, 153, 154, 159, 160, 169, 173, 174, 176, 177, 179, 180, 181, 183, 188, 191, 192, 194, 195, 198, 200, 203, 207, 212, 214, 217, 221, 222, 227, 230, 232, 233, 234, 235, 236, 240, 241, 242, 251, 252, 257, 258, 267, 269, 283, 286], "d": [2, 4, 6, 7, 11, 23, 40, 56, 64, 66, 67, 76, 94, 95, 97, 99, 102, 106, 111, 112, 120, 138, 141, 143, 145, 147, 151, 153, 160, 161, 168, 173, 187, 190, 194, 198, 215, 217, 236, 241, 280], "dx": [2, 67, 106, 120, 148], "grad": [2, 4, 7, 14, 18, 34, 46, 50, 66, 94, 108, 112, 120, 137, 142, 146, 148, 151, 153, 157, 160, 165, 168, 177, 179, 180, 181, 198, 212, 226, 231, 239, 251, 270], "5000": [2, 101, 177, 252], "got": [2, 17, 23, 59, 95, 102, 105, 106, 108, 112, 151, 174, 180, 194, 282], "matrix": [2, 6, 7, 14, 20, 34, 43, 46, 52, 86, 94, 97, 99, 102, 105, 106, 108, 111, 112, 119, 141, 144, 145, 160, 165, 169, 182, 183, 190, 194, 195, 198, 215, 217, 222, 226, 240, 241, 242, 248, 254, 267, 271, 281], "explan": [2, 56, 188, 256], "arriv": [2, 7, 17, 138, 151, 179, 267], "valu": [2, 4, 6, 7, 8, 14, 16, 22, 23, 34, 35, 39, 43, 44, 46, 50, 52, 53, 54, 59, 66, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 141, 142, 143, 146, 150, 151, 153, 158, 161, 173, 174, 178, 179, 180, 181, 182, 183, 187, 190, 192, 195, 198, 201, 203, 212, 213, 214, 215, 217, 219, 220, 231, 251, 252, 257, 264, 265, 276, 285, 286], "section": [2, 4, 6, 7, 11, 13, 17, 22, 23, 35, 36, 38, 39, 40, 41, 43, 46, 47, 50, 54, 55, 56, 79, 95, 98, 102, 103, 104, 105, 106, 109, 111, 112, 117, 131, 133, 135, 139, 142, 146, 147, 153, 159, 161, 165, 171, 178, 179, 181, 187, 190, 194, 195, 197, 198, 200, 213, 214, 224, 228, 231, 239, 241, 248, 251, 252, 256, 267, 277, 281], "look": [2, 4, 6, 7, 11, 12, 13, 14, 16, 19, 22, 36, 41, 43, 46, 47, 50, 52, 53, 54, 55, 56, 59, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 121, 127, 133, 137, 139, 141, 142, 143, 148, 153, 154, 155, 162, 165, 168, 171, 175, 176, 177, 180, 181, 182, 183, 187, 188, 190, 194, 195, 197, 198, 199, 206, 212, 215, 217, 219, 235, 239, 240, 241, 252, 254, 257, 265, 266, 268, 269, 270, 272, 277, 281], "jacobian": [2, 46, 94, 131, 136, 157, 184, 226, 287], "product": [2, 3, 7, 43, 46, 52, 89, 94, 106, 114, 130, 131, 134, 136, 138, 153, 157, 173, 183, 184, 195, 201, 226, 279, 287], "norm": [2, 16, 20, 23, 56, 99, 104, 130, 135, 136, 141, 169, 173, 175, 177, 184, 190, 198, 222, 287], "1021": 2, "4020": 2, "314": [2, 283], "6695": 2, "613": [2, 240], "4944": 2, "v": [2, 20, 22, 23, 34, 46, 56, 57, 59, 94, 101, 103, 108, 109, 111, 138, 141, 157, 178, 180, 187, 188, 198, 204, 205, 214, 220, 222, 240, 280], "0001": [2, 23, 92, 159, 177, 242], "kfloat": [2, 3, 4, 206, 227], "102": 2, "4000": [2, 97, 101, 177, 266], "1024": [2, 6, 22, 86, 104, 140, 230, 252, 258], "0000": [2, 177, 222], "stop": [2, 6, 34, 92, 94, 108, 145, 162, 168, 177, 179, 183, 187, 203, 257], "histori": [2, 34, 43, 50, 52, 94, 102, 108, 146, 175], "put": [2, 6, 7, 11, 14, 16, 19, 35, 48, 53, 55, 89, 97, 99, 102, 131, 136, 137, 138, 153, 154, 169, 177, 178, 180, 181, 190], "nogradguard": 2, "block": [2, 4, 6, 7, 11, 12, 14, 20, 23, 34, 35, 50, 53, 86, 94, 108, 113, 137, 140, 141, 153, 154, 159, 171, 173, 179, 180, 181, 182, 187, 190, 201, 205, 216, 222, 228, 232, 267, 272], "pow": [2, 6, 212], "no_grad": [2, 23, 34, 46, 94, 106, 108, 109, 112, 120, 137, 138, 161, 176, 177, 180, 188, 194, 216, 219, 224, 241, 267, 275], "Or": [2, 146, 168, 181, 200, 227], "content": [2, 4, 6, 16, 54, 60, 101, 102, 103, 112, 121, 128, 142, 151, 153, 171, 176, 177, 181, 183, 192, 194, 203, 243, 252, 266, 281, 282], "eq": [2, 23, 53, 137, 180, 194, 242, 257], "bool": [2, 13, 16, 17, 174, 177, 190, 200, 216, 222, 285], "is_leaf": 2, "detach_": [2, 181], "register_hook": [2, 146], "retain_grad": 2, "doc": [2, 4, 7, 9, 53, 66, 79, 94, 102, 103, 104, 119, 120, 127, 139, 150, 153, 158, 171, 179, 181, 190, 194, 195, 217, 226, 248, 251, 265, 280, 281], "applic": [2, 3, 13, 14, 16, 17, 36, 53, 64, 95, 99, 104, 114, 127, 131, 132, 133, 136, 137, 142, 143, 147, 151, 158, 168, 171, 175, 179, 181, 190, 194, 205, 214, 221, 227, 232, 233, 234, 239, 240, 242, 248, 267, 281, 283, 285], "calcul": [2, 14, 20, 34, 39, 46, 47, 53, 56, 60, 79, 86, 89, 92, 94, 95, 97, 103, 104, 112, 144, 145, 161, 178, 179, 181, 182, 183, 190, 195, 198, 201, 214, 217, 222, 236, 242, 270], "penalti": [2, 169, 176, 251], "h": [2, 4, 6, 7, 8, 11, 12, 53, 141, 159, 162, 173, 174, 197, 241, 266, 285], "model": [2, 3, 6, 11, 13, 16, 19, 27, 34, 36, 37, 38, 43, 44, 46, 47, 50, 52, 56, 57, 58, 60, 66, 69, 71, 72, 73, 91, 92, 94, 96, 98, 102, 105, 106, 107, 108, 110, 112, 115, 116, 117, 119, 120, 122, 130, 131, 132, 133, 134, 136, 137, 143, 144, 145, 146, 147, 150, 153, 157, 159, 160, 166, 168, 169, 170, 177, 178, 179, 180, 181, 182, 184, 191, 192, 194, 195, 198, 201, 203, 205, 206, 216, 217, 220, 221, 222, 226, 228, 232, 233, 234, 235, 236, 240, 251, 255, 256, 258, 263, 264, 265, 270, 271, 272, 275, 277, 279, 280, 285, 286, 287], "linear": [2, 6, 7, 13, 19, 20, 23, 43, 46, 48, 50, 52, 72, 79, 97, 101, 102, 107, 119, 120, 121, 127, 137, 139, 141, 144, 145, 146, 151, 159, 160, 169, 173, 179, 180, 181, 183, 188, 194, 198, 200, 205, 212, 216, 217, 219, 222, 224, 228, 230, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 248, 251, 256, 258, 264, 265, 269, 272, 286], "loss": [2, 3, 6, 7, 13, 16, 19, 20, 21, 23, 34, 40, 43, 46, 52, 69, 71, 72, 73, 76, 77, 79, 92, 94, 97, 101, 106, 111, 112, 120, 121, 133, 136, 137, 138, 139, 144, 146, 153, 161, 162, 170, 173, 178, 180, 181, 183, 187, 188, 195, 222, 241, 242, 265, 275, 286, 287], "target": [2, 3, 7, 16, 19, 22, 23, 39, 47, 50, 53, 59, 79, 95, 101, 102, 104, 106, 109, 111, 112, 117, 137, 145, 153, 154, 159, 168, 170, 171, 173, 174, 176, 178, 179, 180, 181, 183, 188, 190, 192, 194, 197, 200, 219, 227, 241, 242, 248, 252, 254, 275, 283], "mseloss": [2, 14, 39, 50, 151, 179, 233, 234, 286], "grad_output": [2, 11, 12], "ones_lik": [2, 102], "create_graph": [2, 148], "gradient_penalti": 2, "dim": [2, 6, 13, 35, 97, 101, 102, 112, 137, 139, 173, 175, 176, 177, 179, 180, 181, 188, 190, 201, 213, 214, 217, 227, 240, 242, 282], "add": [2, 4, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 23, 39, 47, 50, 54, 79, 89, 92, 99, 102, 103, 106, 109, 117, 124, 135, 136, 137, 138, 141, 145, 146, 147, 153, 154, 158, 159, 160, 168, 170, 171, 174, 176, 177, 179, 180, 181, 183, 187, 191, 194, 198, 201, 205, 206, 212, 214, 221, 222, 227, 234, 252, 254, 257, 279, 283], "combined_loss": 2, "1042": [2, 177], "0638": 2, "0103": 2, "0723": 2, "2543": [2, 177], "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 6, 7, 18, 34, 50, 56, 64, 86, 89, 92, 94, 95, 99, 101, 102, 103, 108, 121, 127, 136, 151, 153, 154, 157, 158, 159, 180, 181, 182, 187, 190, 192, 194, 197, 200, 204, 214, 219, 226, 227, 234, 241, 242, 267, 276, 277, 279, 280, 283], "link": [2, 6, 7, 12, 14, 38, 40, 56, 86, 98, 112, 114, 124, 153, 157, 214, 216, 227, 241, 282], "ad": [2, 6, 7, 8, 12, 17, 22, 27, 34, 53, 54, 57, 79, 87, 89, 94, 97, 99, 101, 102, 103, 106, 108, 121, 137, 138, 144, 145, 146, 151, 154, 157, 160, 165, 168, 174, 178, 182, 183, 194, 197, 221, 241, 242, 264, 266, 269, 280], "subclass": [2, 6, 7, 16, 20, 35, 36, 71, 94, 97, 99, 112, 120, 139, 143, 154, 175, 180, 188, 197, 214, 217, 222, 240, 250, 251, 255, 263, 271, 279, 287], "encod": [2, 16, 43, 44, 50, 52, 99, 107, 110, 112, 138, 143, 154, 169, 177, 181, 190, 198, 205, 222, 251, 282, 287], "method": [2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 19, 20, 23, 34, 35, 41, 43, 47, 50, 53, 55, 59, 79, 87, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 112, 113, 121, 132, 136, 140, 143, 144, 148, 151, 154, 157, 158, 159, 160, 161, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 188, 190, 192, 194, 195, 198, 212, 216, 219, 222, 233, 234, 242, 250, 251, 254, 265, 266, 267, 272, 282, 285], "forward": [2, 3, 8, 11, 12, 13, 14, 16, 17, 19, 23, 34, 35, 40, 46, 48, 50, 53, 56, 60, 66, 67, 69, 76, 77, 89, 94, 97, 99, 101, 102, 104, 105, 106, 107, 109, 112, 113, 120, 121, 127, 131, 136, 137, 138, 141, 142, 144, 147, 148, 149, 151, 153, 165, 168, 169, 170, 173, 175, 178, 179, 180, 181, 183, 184, 187, 188, 190, 192, 194, 195, 200, 216, 217, 227, 231, 232, 233, 234, 235, 236, 239, 240, 241, 242, 248, 251, 254, 257, 258, 267, 282, 283, 286, 287], "detail": [2, 4, 6, 7, 11, 12, 14, 17, 18, 19, 36, 39, 46, 47, 48, 56, 57, 79, 86, 87, 89, 99, 102, 103, 113, 117, 137, 139, 141, 143, 145, 147, 149, 151, 159, 165, 168, 181, 182, 187, 188, 191, 192, 194, 195, 200, 201, 203, 212, 213, 214, 215, 219, 221, 226, 228, 231, 235, 239, 240, 241, 248, 250, 251, 252, 256, 266, 267, 277, 282], "namespac": [2, 4, 7, 8, 11, 12, 35, 112, 117, 174, 192, 200, 217], "inherit": [2, 13, 17, 40, 55, 89, 97, 102, 103, 106, 158, 161, 177, 190, 197, 203, 214, 217, 282], "linearfunct": 2, "public": [2, 11, 12, 17, 139, 174], "static": [2, 4, 11, 12, 16, 94, 157, 174, 194, 195, 205, 242, 267, 283], "option": [2, 4, 6, 7, 11, 12, 13, 38, 47, 49, 51, 55, 57, 86, 92, 94, 95, 98, 99, 102, 104, 114, 117, 119, 130, 132, 139, 140, 143, 149, 154, 155, 159, 162, 171, 173, 175, 176, 190, 192, 194, 195, 203, 205, 217, 232, 239, 251, 252, 257, 267, 275, 276, 277, 280, 281, 283, 287], "autogradcontext": [2, 11, 12], "ctx": [2, 4, 6, 11, 12, 22, 148, 232], "save_for_backward": [2, 4, 6, 148], "mm": [2, 6, 206, 227, 228], "t": [2, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 23, 34, 36, 38, 39, 43, 46, 47, 50, 54, 56, 57, 59, 64, 76, 79, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 114, 117, 120, 121, 127, 137, 138, 142, 148, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 170, 171, 175, 176, 177, 178, 179, 181, 182, 183, 188, 190, 191, 192, 194, 195, 198, 200, 201, 203, 205, 212, 213, 214, 216, 217, 222, 226, 227, 230, 231, 239, 240, 248, 251, 252, 254, 258, 266, 267, 268, 269, 270, 278, 279, 280, 282, 283, 285], "unsqueez": [2, 16, 50, 72, 101, 102, 112, 120, 170, 176, 179, 181, 188, 227], "expand_a": [2, 23], "tensor_list": [2, 11, 12, 153], "save": [2, 4, 7, 13, 14, 23, 34, 35, 36, 37, 38, 39, 43, 44, 47, 52, 53, 54, 56, 79, 92, 101, 103, 104, 122, 127, 136, 137, 139, 141, 143, 147, 159, 160, 173, 175, 179, 180, 181, 183, 184, 187, 190, 195, 203, 223, 227, 241, 242, 254, 255, 256, 257, 265, 266, 267, 269, 270, 271, 272, 277, 281, 287], "get_saved_vari": 2, "grad_input": [2, 148], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 14, 17, 20, 27, 47, 48, 56, 79, 89, 105, 106, 109, 111, 112, 117, 124, 135, 136, 137, 151, 168, 173, 174, 175, 177, 178, 179, 181, 183, 187, 201, 221, 222, 232, 236, 264], "appli": [2, 3, 6, 7, 11, 12, 16, 17, 20, 23, 34, 35, 44, 55, 56, 72, 86, 89, 94, 97, 99, 102, 104, 106, 120, 133, 136, 137, 139, 144, 146, 147, 148, 151, 153, 155, 160, 161, 162, 165, 168, 169, 170, 173, 175, 177, 179, 180, 181, 183, 185, 190, 191, 194, 195, 197, 198, 201, 203, 205, 212, 213, 217, 222, 224, 226, 228, 230, 234, 235, 236, 241, 250, 264, 267, 272, 275, 276, 279, 281, 283], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 6, 7, 8, 12, 13, 16, 21, 23, 34, 35, 36, 39, 40, 46, 50, 53, 56, 94, 95, 97, 99, 102, 104, 108, 112, 120, 121, 127, 133, 134, 136, 142, 144, 147, 153, 157, 158, 160, 171, 174, 177, 179, 180, 181, 182, 184, 187, 188, 190, 194, 201, 217, 233, 234, 241, 242, 252, 264, 266, 267, 269, 271, 272, 282, 287], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 14, 20, 22, 34, 56, 87, 89, 94, 99, 102, 104, 106, 108, 112, 124, 143, 146, 150, 151, 155, 162, 169, 177, 178, 180, 182, 183, 191, 194, 195, 198, 204, 212, 222, 226, 239, 248, 252, 256, 257, 264, 282, 285], "todoubl": 2, "On": [2, 6, 7, 11, 23, 98, 102, 112, 127, 138, 151, 153, 162, 169, 175, 179, 180, 192, 195, 197, 198, 220, 222, 240, 248, 251, 267, 285], "easiest": [2, 6, 38, 98, 112, 160, 177, 194, 267], "your": [2, 4, 7, 9, 11, 13, 14, 17, 18, 20, 21, 22, 23, 34, 35, 38, 40, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 71, 79, 86, 92, 94, 95, 98, 99, 102, 103, 106, 108, 109, 111, 113, 114, 116, 117, 120, 121, 122, 124, 130, 131, 133, 134, 136, 137, 138, 139, 142, 144, 147, 148, 149, 150, 151, 153, 154, 157, 158, 160, 161, 162, 166, 168, 169, 171, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 190, 192, 194, 195, 198, 199, 203, 206, 207, 216, 220, 221, 222, 224, 226, 227, 230, 235, 250, 251, 252, 257, 265, 266, 268, 269, 270, 271, 272, 279, 280, 281, 282, 287], "tabl": [2, 19, 111, 119, 136, 138, 153, 159, 180, 181, 187, 194, 195, 240, 252, 257], "set_data": 2, "data": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 20, 22, 27, 34, 35, 38, 39, 43, 44, 46, 49, 50, 51, 52, 55, 64, 76, 77, 79, 86, 89, 94, 95, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 114, 120, 121, 132, 133, 136, 142, 143, 149, 153, 154, 155, 158, 159, 160, 161, 162, 165, 166, 168, 170, 171, 173, 176, 178, 179, 180, 181, 192, 197, 198, 204, 205, 213, 215, 216, 217, 219, 220, 222, 226, 227, 228, 234, 235, 236, 240, 241, 242, 248, 250, 251, 252, 256, 257, 258, 264, 265, 271, 272, 275, 281, 282, 286, 287], "output_nr": 2, "after": [2, 3, 6, 7, 8, 12, 14, 16, 17, 18, 20, 22, 23, 27, 34, 35, 36, 43, 46, 48, 50, 53, 56, 57, 92, 94, 95, 99, 104, 105, 106, 109, 111, 112, 114, 121, 136, 138, 139, 140, 141, 144, 145, 146, 147, 150, 151, 153, 154, 155, 159, 161, 162, 168, 169, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 185, 187, 188, 194, 195, 197, 200, 219, 221, 222, 224, 227, 234, 251, 252, 256, 257, 264, 265, 267, 277, 279, 281, 286], "file": [2, 4, 6, 7, 11, 12, 17, 21, 23, 42, 51, 54, 55, 56, 59, 68, 74, 78, 86, 87, 90, 92, 94, 95, 100, 108, 110, 112, 118, 119, 122, 124, 138, 142, 144, 145, 151, 153, 159, 168, 171, 174, 176, 184, 187, 190, 194, 197, 201, 204, 206, 207, 215, 216, 217, 221, 223, 227, 228, 234, 235, 236, 241, 242, 251, 252, 256, 257, 263, 265, 266, 268, 274, 276, 277, 281, 282, 283, 285, 287], "bug": [2, 6, 12, 101, 159, 198, 203, 206, 216, 282], "report": [2, 12, 20, 56, 79, 92, 94, 97, 99, 103, 130, 136, 140, 159, 171, 179, 181, 182, 203, 206, 216, 222, 257, 279], "github": [2, 3, 7, 8, 12, 13, 19, 23, 53, 57, 58, 59, 64, 112, 117, 136, 137, 138, 140, 141, 149, 150, 151, 153, 155, 161, 170, 173, 174, 179, 180, 181, 187, 197, 201, 204, 205, 206, 216, 227, 228, 234, 236, 241, 242, 250, 282], "issu": [2, 6, 7, 8, 11, 23, 55, 138, 139, 150, 155, 158, 159, 162, 170, 171, 176, 187, 192, 194, 195, 198, 203, 204, 205, 206, 212, 214, 216, 217, 221, 228, 234, 235, 248, 251, 253, 264, 282], "fix": [2, 16, 20, 27, 34, 53, 54, 55, 56, 104, 142, 178, 179, 205, 222, 248, 266, 267, 280], "soon": [2, 6, 56, 162, 168, 233, 241], "overview": [2, 6, 7, 13, 57, 59, 97, 131, 132, 136, 144, 145, 151, 153, 174, 177, 179, 180, 181, 183, 187, 198, 212, 213, 215, 220, 223, 228, 230, 287], "alwai": [2, 3, 4, 7, 16, 19, 22, 23, 44, 56, 97, 99, 103, 109, 111, 112, 139, 140, 141, 142, 147, 153, 154, 171, 176, 177, 178, 179, 181, 194, 195, 197, 212, 216, 228, 280], "problem": [2, 7, 13, 16, 17, 22, 53, 55, 56, 105, 107, 111, 112, 120, 127, 143, 154, 159, 160, 169, 177, 179, 181, 187, 191, 192, 195, 212, 214, 228, 252, 253, 256, 267, 282, 285], "question": [2, 6, 7, 11, 12, 20, 53, 95, 138, 153, 158, 183, 195, 213, 222, 228, 252], "forum": [2, 6, 7, 47, 158, 228], "touch": [2, 7, 16, 228], "view": [3, 12, 13, 16, 17, 19, 23, 50, 54, 57, 59, 60, 64, 86, 95, 101, 102, 108, 111, 112, 114, 120, 121, 137, 140, 141, 143, 149, 150, 151, 153, 159, 173, 174, 179, 180, 181, 182, 183, 188, 201, 203, 217, 227, 231, 234, 235, 236, 239, 248, 250, 258, 265, 283], "edit": [3, 7, 13, 14, 19, 23, 52, 54, 64, 140, 141, 151, 153, 158, 159, 173, 174, 176, 179, 180, 181, 201, 205, 234, 236], "code": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 34, 35, 36, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 213, 214, 215, 216, 217, 221, 222, 226, 228, 231, 232, 234, 235, 236, 239, 241, 242, 250, 251, 252, 253, 254, 256, 257, 258, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 278, 279, 280, 281, 282, 283, 286, 287], "prerequisit": [3, 4, 18, 57, 59, 60, 107, 124, 138, 140, 141, 146, 149, 150, 151, 153, 154, 162, 173, 174, 179, 180, 181, 190, 191, 195, 198, 201, 204, 221, 233, 234, 236, 267], "frontend": [3, 4, 12, 88, 90, 131, 135, 136, 206, 217, 220, 241, 242, 275, 287], "semant": [3, 4, 7, 53, 72, 102, 107, 109, 110, 120, 139, 153, 194, 195, 214, 215, 217, 220, 223, 226, 287], "11": [3, 6, 7, 13, 20, 22, 76, 119, 122, 137, 138, 157, 176, 177, 181, 190, 192, 195, 235, 236, 240, 252, 257], "nvidia": [3, 6, 20, 54, 147, 153, 162, 192, 222, 236, 251, 267, 271], "toolkit": [3, 107, 161, 171, 194, 265], "releas": [3, 4, 7, 12, 20, 54, 119, 121, 137, 138, 142, 168, 180, 182, 187, 222, 232, 233, 240, 241, 242, 257, 267, 272, 282], "greatli": [3, 7, 53, 94, 112, 178], "reduc": [3, 7, 13, 20, 23, 36, 39, 46, 60, 97, 99, 104, 119, 130, 137, 138, 139, 141, 143, 144, 147, 149, 151, 153, 160, 161, 162, 168, 171, 175, 176, 179, 181, 187, 190, 192, 195, 201, 206, 222, 235, 251, 252, 255, 256, 271, 274, 276, 277, 285, 286, 287], "cpu": [3, 4, 6, 7, 8, 11, 12, 13, 16, 17, 22, 23, 35, 40, 43, 46, 47, 52, 53, 56, 66, 77, 79, 86, 87, 92, 102, 104, 106, 112, 114, 119, 120, 127, 130, 131, 136, 137, 139, 140, 141, 144, 151, 153, 162, 169, 173, 174, 176, 177, 179, 180, 181, 182, 183, 184, 187, 190, 195, 197, 203, 204, 206, 217, 219, 220, 224, 227, 232, 233, 240, 251, 252, 253, 256, 257, 264, 271, 282, 287], "overhead": [3, 6, 7, 12, 20, 60, 86, 119, 137, 138, 141, 146, 151, 160, 162, 171, 176, 179, 181, 182, 187, 192, 198, 203, 205, 206, 217, 222, 233, 252, 257, 267, 278, 285], "increas": [3, 6, 7, 22, 23, 27, 39, 40, 47, 79, 86, 87, 92, 95, 104, 112, 137, 138, 139, 141, 143, 144, 145, 149, 168, 171, 176, 187, 195, 205, 217, 235, 240, 250, 251, 252, 266, 267, 270, 271, 272, 285], "mostli": [3, 12, 23, 89, 94, 104, 144, 181, 183, 200], "util": [3, 4, 6, 12, 17, 23, 27, 36, 40, 47, 53, 55, 57, 59, 86, 97, 101, 103, 112, 119, 120, 121, 127, 131, 136, 137, 138, 139, 141, 144, 146, 153, 157, 159, 160, 162, 169, 171, 173, 174, 176, 177, 180, 182, 183, 187, 188, 190, 192, 197, 204, 217, 219, 222, 224, 227, 230, 233, 234, 241, 242, 248, 250, 251, 265, 266, 271, 274, 275, 277, 279, 281, 283, 285, 287], "deploy": [3, 104, 130, 134, 143, 206, 219, 241, 281], "import": [3, 4, 6, 7, 8, 11, 12, 13, 16, 20, 22, 23, 27, 34, 36, 46, 50, 53, 54, 55, 56, 57, 76, 79, 86, 89, 94, 95, 97, 99, 101, 102, 104, 106, 109, 112, 116, 120, 121, 124, 137, 138, 139, 140, 141, 146, 147, 148, 151, 153, 154, 157, 158, 160, 168, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 191, 192, 194, 195, 200, 201, 203, 206, 207, 212, 214, 215, 216, 217, 219, 221, 222, 224, 227, 228, 230, 231, 232, 233, 234, 236, 240, 241, 242, 248, 252, 258, 264, 265, 266, 267, 272, 275, 277, 282, 283, 285, 286], "appear": [3, 13, 16, 111, 194, 248], "won": [3, 6, 12, 46, 112, 120, 137, 148, 157, 165, 170, 177, 194, 195, 216, 251], "heart": [3, 53, 240], "veri": [3, 4, 6, 7, 11, 16, 17, 22, 23, 27, 43, 48, 50, 52, 53, 69, 79, 89, 95, 99, 106, 108, 112, 120, 127, 137, 141, 142, 144, 168, 169, 178, 179, 181, 182, 183, 185, 187, 188, 195, 197, 212, 214, 248, 257, 266, 280], "time": [3, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 20, 23, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 64, 69, 72, 76, 77, 79, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 120, 121, 124, 127, 130, 134, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 168, 169, 170, 171, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 192, 194, 195, 197, 198, 203, 205, 212, 213, 214, 215, 216, 219, 220, 222, 227, 231, 232, 233, 234, 239, 240, 248, 251, 252, 253, 255, 256, 258, 264, 267, 271, 278, 279, 280, 281, 283], "tool": [3, 7, 11, 16, 55, 86, 92, 94, 95, 99, 103, 105, 120, 134, 137, 151, 153, 154, 159, 171, 179, 182, 187, 188, 190, 198, 203, 235, 248, 256, 279, 285], "compil": [3, 7, 9, 11, 12, 18, 20, 89, 105, 131, 135, 136, 153, 158, 184, 194, 205, 206, 217, 220, 228, 241, 252, 255, 257, 266, 267, 271, 274, 275, 282, 287], "boost": [3, 104, 106, 159, 160, 205, 216, 220, 228, 241, 242], "would": [3, 4, 6, 7, 11, 16, 18, 19, 22, 23, 34, 46, 53, 57, 59, 79, 92, 94, 97, 99, 102, 104, 108, 111, 112, 117, 121, 127, 137, 140, 141, 142, 143, 144, 145, 147, 148, 151, 154, 158, 159, 160, 162, 168, 169, 170, 174, 176, 177, 178, 179, 180, 181, 183, 190, 192, 194, 195, 197, 198, 203, 204, 214, 215, 220, 226, 228, 234, 236, 248, 276, 277, 281, 285], "demonstr": [3, 4, 16, 18, 19, 20, 41, 46, 54, 61, 86, 89, 95, 97, 103, 113, 117, 130, 132, 133, 136, 137, 138, 140, 141, 142, 147, 148, 151, 155, 157, 158, 159, 162, 165, 171, 173, 174, 177, 179, 180, 181, 182, 187, 190, 191, 194, 195, 198, 200, 201, 203, 204, 205, 206, 214, 216, 217, 219, 221, 222, 224, 231, 233, 234, 236, 239, 240, 242, 251, 252, 256, 257, 270, 271, 276, 278, 279, 280, 281, 283, 285, 286], "mnist": [3, 7, 36, 47, 50, 79, 97, 101, 103, 131, 136, 137, 143, 153, 155, 170, 180, 185, 188, 242, 254, 271], "libtorch": [3, 4, 7, 227, 241], "counterpart": [3, 20, 159, 194, 222, 236, 241], "syntax": [3, 52, 88, 90, 91, 121, 252, 287], "step": [3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 34, 38, 39, 46, 47, 50, 53, 56, 64, 79, 86, 89, 94, 97, 101, 103, 104, 105, 106, 112, 114, 117, 132, 136, 137, 138, 139, 144, 145, 146, 147, 149, 151, 153, 154, 159, 161, 165, 169, 171, 178, 179, 180, 181, 182, 183, 184, 188, 190, 192, 194, 195, 199, 200, 203, 204, 205, 207, 216, 217, 219, 222, 224, 227, 230, 231, 233, 234, 241, 242, 248, 251, 264, 265, 267, 275, 281, 283, 286, 287], "depict": [3, 101, 195], "chunk": [3, 6, 59, 153, 168, 171, 173, 201], "batch": [3, 6, 7, 19, 20, 23, 36, 39, 40, 41, 48, 50, 53, 55, 56, 57, 59, 60, 79, 86, 92, 94, 95, 97, 101, 102, 103, 104, 109, 112, 121, 127, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 149, 153, 154, 155, 161, 162, 165, 168, 170, 171, 173, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 190, 192, 195, 197, 198, 201, 205, 214, 217, 220, 222, 226, 242, 251, 252, 258, 287], "data_load": [3, 7, 23], "optim": [3, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 34, 35, 36, 37, 38, 41, 43, 44, 46, 50, 53, 57, 59, 64, 69, 70, 71, 74, 86, 89, 92, 94, 97, 101, 104, 105, 113, 117, 121, 127, 130, 131, 133, 134, 136, 137, 138, 141, 146, 147, 149, 151, 153, 154, 155, 159, 161, 162, 169, 170, 171, 175, 176, 177, 178, 179, 180, 183, 184, 187, 188, 190, 191, 192, 194, 197, 198, 205, 207, 212, 217, 219, 220, 222, 227, 228, 233, 234, 239, 241, 242, 251, 252, 256, 264, 268, 271, 272, 274, 275, 276, 279, 281, 282, 287], "zero_grad": [3, 7, 23, 39, 50, 94, 101, 112, 137, 138, 139, 151, 153, 168, 177, 179, 181, 188, 195, 233, 234, 241, 242, 270, 275], "nll_loss": [3, 137, 153, 180, 242], "updat": [3, 7, 12, 13, 14, 15, 16, 19, 20, 23, 39, 46, 47, 53, 56, 73, 76, 86, 94, 104, 106, 111, 112, 113, 120, 121, 136, 137, 138, 139, 143, 147, 151, 154, 162, 168, 177, 178, 180, 181, 187, 195, 198, 212, 221, 222, 228, 230, 234, 239, 242, 251, 264, 269, 286], "captur": [3, 7, 56, 94, 113, 114, 116, 130, 136, 137, 157, 190, 191, 192, 194, 195, 198, 203, 206, 252, 282], "But": [3, 7, 11, 12, 47, 48, 56, 79, 95, 102, 108, 111, 142, 151, 162, 168, 169, 170, 178, 194, 197, 212, 215, 226, 242, 252], "slightli": [3, 6, 16, 138, 153, 154, 171, 176, 183, 215, 252, 267], "prealloc": 3, "reus": [3, 12, 69, 112, 120, 148, 157, 169, 178, 195, 267, 272, 285], "tensoropt": [3, 206], "floatcuda": 3, "dtype": [3, 4, 11, 12, 16, 17, 18, 102, 108, 139, 148, 173, 177, 194, 200, 201, 204, 206, 215, 217, 227, 241, 251, 264, 275, 277, 283], "longcuda": 3, "klong": 3, "zero": [3, 7, 8, 13, 20, 23, 34, 39, 44, 50, 53, 94, 95, 97, 99, 102, 103, 111, 112, 137, 138, 145, 153, 154, 165, 169, 171, 174, 175, 179, 181, 183, 188, 212, 214, 215, 221, 222, 242, 251, 255, 257, 263, 266, 267, 271, 282, 283, 286, 287], "ktrainbatchs": 3, "28": [3, 7, 20, 36, 50, 99, 101, 112, 155, 170, 177, 188, 222, 240, 242, 252, 258, 266], "copy_": [3, 43, 52, 119, 139, 159, 179, 256, 264], "training_step": 3, "call": [3, 4, 6, 7, 9, 11, 12, 13, 15, 16, 17, 19, 20, 27, 34, 35, 36, 39, 41, 43, 44, 46, 47, 48, 50, 53, 55, 56, 57, 59, 71, 79, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 111, 112, 117, 119, 120, 121, 130, 132, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 151, 153, 154, 157, 158, 159, 161, 162, 165, 168, 169, 170, 171, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 190, 194, 195, 203, 206, 221, 222, 226, 227, 228, 231, 233, 234, 235, 240, 251, 252, 253, 254, 256, 257, 265, 266, 267, 270, 277, 278, 279, 280, 282, 283, 285], "void": [3, 4, 6, 7, 8, 17, 159, 174, 206, 216, 252, 257, 266], "net": [3, 7, 23, 47, 48, 50, 53, 56, 79, 89, 92, 97, 101, 102, 104, 137, 153, 165, 176, 180, 187, 188, 242, 254, 258], "stream": [3, 17, 86, 102, 105, 139, 171, 176, 206, 241, 283], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 75, 78, 119, 187, 192, 217, 239, 240, 252, 257, 287], "side": [3, 8, 55, 56, 86, 111, 155, 162, 168, 170, 171, 174, 178, 179, 187, 248], "prepar": [3, 13, 20, 23, 47, 55, 56, 72, 73, 101, 109, 120, 121, 155, 168, 173, 174, 177, 179, 217, 219, 222, 232, 257], "cach": [3, 130, 146, 159, 187, 198, 205, 216, 267, 271, 280, 283, 285], "cubla": [3, 252], "cudnn": [3, 6, 144, 147, 154, 162, 251], "warmupstream": 3, "int": [3, 4, 6, 7, 13, 22, 23, 55, 57, 59, 137, 138, 140, 151, 153, 159, 173, 174, 179, 180, 181, 187, 192, 194, 197, 201, 203, 216, 217, 227, 236, 241, 283, 285], "num_warmup_it": 3, "success": [3, 7, 16, 79, 108, 143, 159, 183, 227, 248], "replac": [3, 4, 7, 23, 27, 46, 59, 61, 95, 106, 112, 113, 117, 119, 127, 136, 137, 139, 153, 157, 175, 181, 183, 184, 187, 191, 194, 197, 201, 205, 214, 217, 225, 241, 252, 282, 287], "replai": [3, 16, 161], "spin": [3, 97], "ordinari": 3, "epoch": [3, 7, 19, 23, 36, 39, 40, 56, 57, 59, 92, 97, 101, 104, 106, 112, 121, 127, 137, 138, 139, 143, 144, 153, 162, 168, 177, 181, 188, 197, 242, 265], "59584": 3, "60000": [3, 153], "3921": 3, "test": [3, 11, 23, 27, 36, 39, 40, 53, 87, 89, 95, 97, 103, 104, 106, 107, 113, 124, 136, 137, 138, 144, 153, 155, 157, 159, 162, 171, 176, 177, 180, 183, 185, 188, 192, 194, 203, 205, 220, 226, 239, 240, 241, 242, 252, 283], "2051": 3, "accuraci": [3, 20, 23, 27, 40, 47, 97, 103, 104, 112, 131, 132, 134, 136, 137, 138, 139, 143, 165, 175, 176, 180, 185, 188, 190, 219, 222, 240, 251, 265, 270, 271], "938": [3, 7, 162], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 162], "968": 3, "1603": [3, 283], "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 7, 13, 23, 36, 38, 50, 53, 76, 89, 95, 97, 99, 101, 102, 111, 113, 117, 119, 120, 121, 147, 148, 153, 159, 160, 162, 174, 175, 176, 177, 179, 181, 190, 192, 194, 198, 205, 207, 217, 222, 236, 240, 242, 251, 258, 279, 280, 281, 285], "0511": 3, "0704": 3, "977": [3, 162, 240], "7": [3, 6, 7, 20, 21, 22, 23, 36, 38, 55, 89, 119, 127, 137, 138, 153, 161, 162, 176, 190, 191, 192, 195, 201, 204, 205, 207, 216, 224, 227, 228, 230, 231, 236, 239, 240, 242, 251, 278, 282, 283], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 6, 7, 20, 22, 23, 36, 42, 46, 53, 76, 92, 97, 101, 111, 112, 119, 121, 159, 169, 176, 177, 179, 188, 190, 195, 207, 222, 227, 240, 241, 242, 252, 254, 257, 258, 275], "0669": 3, "0544": 3, "984": [3, 240], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 8, 16, 34, 40, 56, 58, 94, 104, 105, 106, 107, 111, 134, 137, 144, 145, 153, 154, 168, 174, 178, 183, 192, 194, 195, 203, 214, 217, 240, 252], "0m44": 3, "287": 3, "018": 3, "sy": [3, 22, 23, 57, 59, 151, 153, 174, 230, 283], "0m1": 3, "116": [3, 203], "produc": [3, 6, 7, 13, 72, 104, 113, 120, 143, 146, 154, 155, 157, 158, 160, 162, 171, 177, 178, 183, 190, 194, 195, 200, 219, 227, 234, 251, 267, 272], "4092": 3, "2037": 3, "2039": 3, "1274": [3, 50], "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 222], "0520": 3, "0710": 3, "0935": 3, "0666": 3, "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 159], "0m7": 3, "048": [3, 228], "0m0": 3, "619": 3, "gain": [3, 6, 20, 86, 160, 187, 201, 220, 222], "six": [3, 177], "kind": [3, 6, 7, 23, 39, 47, 50, 53, 79, 95, 103, 105, 109, 121, 131, 136, 285], "larg": [3, 4, 6, 7, 9, 14, 18, 19, 20, 22, 39, 43, 53, 64, 92, 95, 99, 101, 104, 109, 111, 112, 114, 120, 127, 132, 136, 137, 138, 140, 143, 147, 151, 153, 155, 165, 171, 173, 177, 178, 180, 181, 182, 190, 192, 195, 197, 201, 203, 214, 222, 224, 230, 236, 240, 251, 257, 258, 267, 272], "improv": [3, 6, 7, 11, 12, 20, 23, 27, 39, 53, 60, 97, 102, 104, 112, 117, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 147, 160, 162, 169, 178, 182, 183, 190, 191, 192, 198, 203, 204, 205, 216, 220, 222, 228, 230, 232, 239, 241, 251, 252, 265, 267, 275, 279], "due": [3, 6, 7, 20, 22, 56, 86, 89, 102, 113, 117, 137, 141, 146, 151, 168, 169, 180, 192, 198, 203, 205, 214, 219, 222, 224, 231, 235, 242, 282, 283, 285], "size": [3, 4, 6, 7, 8, 11, 13, 14, 16, 20, 22, 23, 34, 35, 36, 39, 40, 44, 46, 47, 48, 50, 53, 55, 56, 59, 86, 92, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 121, 127, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 153, 154, 155, 159, 160, 161, 162, 165, 168, 170, 171, 174, 176, 177, 178, 179, 180, 183, 187, 190, 191, 192, 194, 195, 197, 198, 199, 201, 203, 204, 205, 212, 215, 217, 222, 233, 234, 235, 241, 251, 252, 256, 258, 266, 267, 271, 283, 286], "larger": [3, 11, 14, 79, 86, 94, 104, 112, 116, 121, 130, 136, 137, 138, 141, 143, 149, 171, 178, 181, 183, 187, 190, 191, 192, 205, 217, 233, 234, 240, 252, 272], "heavi": [3, 7, 53, 104, 108], "less": [3, 6, 7, 9, 11, 18, 23, 60, 86, 99, 104, 105, 112, 116, 127, 138, 143, 154, 157, 168, 171, 177, 178, 179, 187, 188, 192, 194, 195, 198, 203, 205, 236, 252, 256], "impact": [3, 14, 20, 39, 92, 104, 154, 171, 179, 182, 205, 222, 250, 285, 286], "smaller": [3, 39, 99, 104, 111, 112, 137, 141, 177, 179, 190, 252, 256, 272], "nevertheless": [3, 6, 23, 162, 177], "richard": 4, "zou": 4, "integr": [4, 7, 12, 16, 18, 38, 92, 113, 117, 119, 135, 136, 143, 146, 173, 187, 188, 192, 198, 200, 216, 220, 221, 227, 233, 240, 248, 250, 264, 269, 279, 285], "opcheck": [4, 18], "basic": [4, 11, 13, 17, 18, 19, 27, 34, 35, 36, 39, 40, 41, 42, 43, 44, 53, 58, 60, 61, 77, 81, 84, 91, 94, 97, 98, 99, 101, 102, 104, 107, 111, 112, 113, 114, 116, 117, 120, 130, 136, 141, 144, 147, 159, 166, 173, 177, 182, 195, 198, 199, 213, 217, 233, 234, 252, 265, 271, 276, 277, 281, 282, 287], "program": [4, 6, 22, 64, 99, 105, 107, 108, 111, 136, 141, 144, 158, 171, 173, 180, 192, 201, 203, 207, 221, 234, 252, 267, 281, 282, 285], "amd": [4, 6], "rocm": [4, 6, 187], "modif": [4, 16, 17, 23, 92, 105, 112, 147, 153, 175, 177, 180, 185, 188, 194, 198, 266, 272, 282], "e": [4, 6, 7, 8, 9, 11, 12, 13, 18, 22, 34, 35, 40, 46, 47, 53, 55, 56, 64, 79, 89, 92, 94, 97, 99, 102, 104, 107, 111, 112, 121, 127, 131, 136, 137, 139, 140, 141, 143, 144, 145, 148, 150, 151, 153, 155, 162, 169, 170, 174, 175, 177, 179, 181, 183, 187, 191, 192, 194, 198, 200, 214, 215, 217, 219, 220, 224, 226, 227, 232, 236, 239, 241, 252, 254, 257, 266, 267, 269, 270], "g": [4, 6, 7, 8, 9, 11, 12, 13, 16, 18, 22, 46, 53, 55, 56, 64, 92, 94, 97, 99, 102, 104, 106, 107, 111, 127, 131, 136, 137, 139, 143, 144, 145, 151, 153, 155, 159, 168, 170, 174, 177, 179, 181, 183, 187, 192, 194, 198, 200, 206, 215, 219, 220, 226, 227, 236, 239, 252, 257, 266, 267], "etc": [4, 9, 12, 18, 47, 48, 50, 53, 55, 73, 97, 99, 102, 105, 106, 107, 108, 112, 121, 141, 171, 175, 177, 178, 183, 194, 195, 198, 214, 219, 232, 240, 241, 252, 254, 267, 269], "wish": [4, 6, 7, 9, 18, 56, 79, 95, 102, 121, 140, 165, 170, 180, 190, 195, 200, 213, 234, 251, 280], "bring": [4, 9, 95, 140, 171, 177, 187, 190, 195, 205, 215, 226, 257, 267, 285], "bless": 4, "path": [4, 6, 7, 22, 23, 36, 53, 54, 56, 57, 79, 86, 92, 94, 97, 102, 103, 104, 105, 112, 121, 137, 138, 159, 174, 190, 192, 198, 203, 204, 205, 212, 219, 227, 228, 233, 234, 248, 252, 264, 266, 267, 268, 283, 285], "fuse": [4, 6, 20, 23, 130, 134, 135, 136, 159, 176, 184, 198, 200, 205, 216, 222, 227, 239, 271, 287], "subsystem": [4, 9, 18, 194, 279], "def": [4, 6, 7, 8, 11, 13, 16, 22, 23, 36, 50, 57, 59, 89, 101, 112, 121, 137, 138, 139, 140, 141, 146, 148, 151, 153, 159, 160, 169, 173, 174, 179, 180, 181, 188, 190, 200, 201, 206, 207, 212, 216, 217, 219, 221, 222, 224, 230, 232, 233, 234, 236, 240, 242, 248, 252, 258, 277, 282, 283, 286], "mymuladd": 4, "bind": [4, 7, 8, 9, 12, 140, 204, 267, 285], "precompil": 4, "instead": [4, 5, 6, 7, 9, 11, 12, 18, 20, 23, 24, 25, 26, 34, 47, 48, 53, 55, 56, 57, 67, 94, 97, 102, 105, 106, 111, 112, 119, 120, 127, 137, 138, 139, 142, 143, 145, 148, 149, 153, 158, 160, 161, 162, 165, 168, 174, 175, 176, 179, 180, 181, 183, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 200, 205, 212, 214, 215, 216, 217, 222, 226, 227, 234, 237, 240, 243, 248, 258, 272, 278, 280, 284, 286], "cpp_extens": [4, 6, 12, 174, 252], "extens": [4, 7, 9, 17, 21, 56, 95, 121, 134, 136, 139, 146, 148, 153, 190, 206, 212, 214, 220, 240, 242, 252, 255, 263, 271, 278, 287], "ahead": [4, 6, 39, 97, 146, 168, 188, 194, 200, 234, 267, 281], "setuptool": [4, 12, 174, 187], "load_inlin": [4, 252], "setup": [4, 6, 7, 12, 19, 23, 38, 56, 57, 59, 137, 138, 143, 151, 168, 174, 181, 203, 205, 214, 215, 221, 226, 227, 233, 234, 236, 252, 266], "extension_cpp": 4, "ext_modul": [4, 6, 12, 174], "cppextens": [4, 6, 12, 174], "muladd": 4, "cpp": [4, 6, 7, 11, 132, 136, 159, 216, 220, 241, 266, 281], "py_limited_api": 4, "min": [4, 23, 56, 86, 99, 104, 112, 127, 153, 174, 177, 179, 181, 190, 194, 282], "expos": [4, 6, 7, 11, 103, 139, 181, 195, 221, 227, 267], "stabl": [4, 28, 29, 30, 31, 32, 53, 66, 79, 104, 105, 120, 127, 140, 156, 176, 186, 187, 189, 225, 242, 251], "limit": [4, 7, 12, 13, 17, 20, 23, 41, 53, 64, 79, 113, 137, 141, 144, 154, 155, 161, 162, 170, 171, 183, 191, 192, 194, 195, 205, 222, 233, 252, 264], "subset": [4, 16, 89, 92, 97, 101, 104, 116, 127, 153, 174, 190, 214, 215, 240, 252], "extra_compile_arg": [4, 12], "cxx": [4, 7, 207, 227, 241], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 53, 104, 177, 187, 220], "cmdclass": [4, 6, 12, 174], "build_ext": [4, 6, 12, 174], "buildextens": [4, 6, 12, 174], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 174], "cpython": [4, 6, 266], "agnost": [4, 6, 191, 253], "pure": [4, 6, 7, 12, 50, 144, 148, 155, 170, 194, 197, 206, 216], "agnostic": 4, "minim": [4, 7, 12, 14, 20, 39, 56, 66, 67, 71, 72, 73, 76, 77, 79, 86, 94, 106, 111, 112, 120, 130, 136, 138, 143, 150, 159, 173, 178, 192, 212, 219, 222, 267, 270, 272], "oldest": 4, "hexcod": 4, "throughout": [4, 14, 56, 109, 153, 168, 171, 177, 188, 214, 264], "environ": [4, 6, 7, 8, 9, 13, 18, 21, 22, 38, 59, 86, 89, 95, 98, 101, 114, 124, 133, 136, 137, 138, 141, 146, 150, 151, 153, 159, 171, 173, 174, 178, 179, 180, 181, 192, 194, 195, 198, 201, 203, 216, 221, 227, 228, 232, 233, 234, 235, 236, 240, 248, 250, 252, 266, 267, 276, 281, 283, 285, 286, 287], "unknown": 4, "behavior": [4, 8, 11, 12, 13, 14, 16, 39, 53, 55, 99, 109, 112, 113, 154, 158, 159, 162, 168, 171, 192, 194, 213, 214, 224, 256, 267, 278, 280, 285], "runnabl": [4, 143, 159, 270], "three": [4, 7, 12, 14, 16, 17, 36, 39, 55, 56, 67, 79, 86, 89, 94, 95, 101, 102, 105, 112, 117, 120, 121, 136, 140, 141, 144, 145, 162, 166, 169, 171, 174, 177, 181, 182, 183, 185, 187, 188, 195, 203, 205, 215, 216, 248, 257], "line": [4, 6, 7, 11, 14, 18, 53, 54, 55, 59, 60, 86, 97, 101, 102, 103, 104, 106, 112, 119, 143, 144, 145, 151, 153, 159, 176, 178, 180, 181, 183, 187, 188, 192, 194, 203, 206, 207, 212, 214, 233, 234, 236, 241, 242, 256, 265, 267, 282, 283, 285], "specif": [4, 6, 7, 11, 12, 13, 20, 22, 23, 36, 40, 47, 59, 79, 86, 92, 94, 95, 97, 99, 101, 103, 106, 107, 108, 112, 113, 114, 116, 117, 121, 124, 133, 137, 138, 141, 144, 145, 147, 153, 154, 159, 171, 173, 175, 177, 179, 180, 181, 182, 183, 187, 188, 191, 194, 195, 197, 198, 200, 213, 216, 217, 219, 221, 222, 227, 228, 232, 233, 234, 240, 241, 248, 250, 257, 264, 266, 271, 276, 279, 281, 285, 286], "verifi": [4, 7, 89, 94, 102, 117, 124, 148, 155, 157, 160, 162, 175, 176, 191, 195, 197, 204, 227, 240, 241, 248], "met": [4, 16, 137, 171], "crash": [4, 7, 203], "wors": [4, 23], "silent": [4, 18, 159, 192, 264], "incorrect": [4, 18, 56, 94, 97, 142, 148, 171, 192], "avoid": [4, 6, 19, 47, 92, 101, 104, 137, 138, 139, 141, 147, 151, 153, 162, 165, 168, 177, 179, 192, 194, 204, 205, 212, 213, 217, 220, 221, 222, 224, 233, 251, 252, 256, 257, 264, 276, 285], "unstabl": 4, "libtorch_python": 4, "particular": [4, 6, 7, 11, 13, 36, 47, 55, 86, 87, 92, 94, 95, 97, 99, 111, 133, 143, 144, 146, 153, 155, 165, 170, 173, 180, 190, 194, 197, 198, 200, 212, 213, 215, 217, 256, 267, 276], "aten": [4, 6, 11, 12, 17, 117, 119, 159, 187, 194, 206, 216, 219, 240, 241, 248, 257, 266, 283], "strongli": [4, 17, 154, 169, 198], "recommend": [4, 7, 9, 11, 12, 17, 22, 23, 64, 86, 95, 101, 112, 114, 116, 136, 139, 145, 151, 166, 176, 183, 187, 194, 195, 197, 198, 201, 203, 214, 219, 220, 228, 233, 240, 241, 248, 256, 265, 266, 267], "ascertain": [4, 204], "compliant": [4, 197, 233, 234], "safe": [4, 8, 23, 104, 171], "guarante": [4, 12, 104, 150, 153, 162, 171, 175, 180, 181, 194, 213, 282], "better": [4, 6, 7, 16, 20, 23, 36, 39, 40, 47, 56, 60, 94, 97, 99, 101, 104, 111, 112, 116, 119, 131, 136, 139, 140, 143, 144, 145, 146, 159, 160, 161, 168, 170, 171, 177, 178, 183, 187, 188, 190, 194, 201, 205, 212, 213, 222, 228, 252, 267, 275, 285], "wild": 4, "west": 4, "There": [4, 7, 11, 12, 16, 17, 20, 34, 50, 79, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 127, 132, 145, 146, 150, 154, 155, 158, 160, 162, 165, 168, 170, 173, 176, 177, 180, 181, 183, 194, 195, 196, 197, 198, 200, 203, 214, 222, 252, 254, 259, 260, 261, 262, 266, 267, 270, 273, 276, 281, 283, 285], "caveat": [4, 8, 151, 179, 203, 252, 256], "yourself": [4, 6, 7, 11, 38, 97, 108, 136, 161, 195], "truli": [4, 7, 53, 161], "relev": [4, 7, 16, 57, 105, 107, 111, 124, 138, 141, 175, 190, 194, 204, 267, 269, 276, 282], "third": [4, 7, 8, 11, 14, 18, 56, 66, 67, 69, 71, 72, 73, 76, 77, 99, 102, 109, 120, 130, 136, 140, 148, 174, 183, 212, 226], "intend": [4, 6, 7, 11, 14, 94, 104, 137, 141, 159, 162, 182, 192, 194, 198, 212, 232, 254, 267, 277], "influenc": [4, 7, 56, 99, 171, 285], "accordingli": [4, 12, 22, 154, 168, 179, 190, 228], "command": [4, 6, 7, 16, 54, 95, 101, 103, 116, 124, 136, 139, 150, 151, 171, 174, 177, 179, 180, 181, 183, 187, 188, 190, 197, 201, 203, 207, 234, 236, 240, 241, 257, 265, 267, 281, 282, 283], "consequ": [4, 141, 171, 178, 194], "properli": [4, 11, 12, 16, 54, 59, 104, 148, 151, 153, 162, 168, 169, 177, 179, 180, 181, 183, 198, 212, 214, 224, 264], "could": [4, 6, 7, 8, 11, 12, 13, 56, 92, 94, 99, 104, 105, 106, 108, 109, 111, 114, 119, 137, 138, 141, 142, 145, 153, 162, 168, 171, 177, 178, 179, 180, 181, 183, 187, 188, 190, 194, 197, 200, 212, 214, 216, 219, 226, 234, 235, 236, 241, 242, 248, 256, 257, 285], "outsid": [4, 8, 12, 16, 17, 48, 135, 136, 139, 141, 147, 187, 190, 194, 212, 264, 272, 280], "cannot": [4, 6, 7, 8, 13, 16, 22, 53, 64, 86, 102, 113, 117, 120, 121, 139, 140, 148, 151, 153, 154, 162, 171, 177, 192, 194, 205, 226, 279], "mymuladd_cpu": 4, "const": [4, 6, 7, 8, 11, 12, 17, 159, 174, 206, 216, 241, 252, 266], "torch_check": [4, 6, 11], "torch_internal_assert": [4, 11], "devicetyp": [4, 11, 17], "a_contig": 4, "contigu": [4, 6, 11, 35, 162, 177, 216, 267], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 11, 206], "b_ptr": 4, "result_ptr": [4, 11], "int64_t": [4, 7, 8, 11, 216], "numel": [4, 11, 177, 179, 212, 266], "order": [4, 7, 9, 13, 14, 17, 18, 20, 34, 35, 36, 47, 48, 53, 54, 59, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 92, 94, 95, 97, 102, 112, 113, 114, 116, 117, 119, 120, 131, 136, 137, 139, 142, 143, 145, 148, 151, 153, 158, 159, 160, 162, 174, 175, 180, 183, 185, 190, 192, 194, 195, 197, 198, 200, 201, 214, 217, 222, 226, 256, 266, 276, 277, 285], "torch_librari": [4, 7, 8, 9, 11, 18, 241], "ensur": [4, 6, 11, 12, 13, 14, 16, 17, 23, 40, 53, 57, 60, 67, 104, 112, 113, 119, 120, 121, 137, 141, 150, 151, 153, 157, 171, 173, 177, 178, 180, 182, 190, 191, 192, 195, 204, 206, 216, 221, 224, 233, 252, 254, 264, 270, 279, 285], "awar": [4, 79, 94, 102, 141, 143, 153, 154, 182, 194, 212, 279], "top": [4, 6, 7, 11, 20, 23, 38, 54, 56, 86, 87, 95, 98, 101, 104, 112, 141, 153, 176, 181, 182, 187, 188, 192, 197, 219, 222, 240, 248, 250], "project": [4, 6, 7, 56, 94, 101, 121, 141, 174, 178, 183, 188, 217, 241, 242, 248, 286], "schema": [4, 8, 12], "mutat": [4, 8, 11, 12, 18, 120, 155, 170, 171, 194, 226, 231], "m": [4, 6, 7, 8, 11, 12, 16, 17, 23, 34, 46, 53, 94, 99, 108, 112, 137, 138, 159, 160, 174, 176, 179, 181, 216, 222, 224, 234, 240, 248, 267, 285], "torch_library_impl": [4, 8, 11, 12, 17], "impl": [4, 8, 11, 12, 17, 266], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 23, 36, 176, 188, 222], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 14, 104, 190, 200, 257], "256": [4, 7, 20, 23, 55, 92, 141, 142, 161, 177, 183, 194, 222, 228, 240, 257, 283], "faketensor": [4, 18, 194, 204, 283], "kernel": [4, 6, 7, 9, 11, 15, 18, 20, 22, 50, 87, 99, 102, 112, 117, 130, 131, 136, 139, 144, 155, 159, 162, 169, 170, 171, 182, 183, 184, 187, 191, 192, 194, 195, 198, 205, 206, 207, 216, 219, 222, 225, 228, 248, 252, 254, 256, 257, 267, 271, 274, 277, 282, 283, 287], "meta": [4, 18, 22, 139, 141, 143, 155, 170, 177, 194, 224, 258, 264, 271], "abstract": [4, 6, 13, 16, 36, 55, 64, 92, 102, 103, 107, 112, 120, 141, 143, 153, 171, 174, 177, 195, 235, 236], "metadata": [4, 12, 18, 20, 101, 146, 177, 188, 194, 204, 222, 256], "correct": [4, 6, 7, 11, 12, 13, 14, 15, 18, 23, 39, 46, 47, 50, 53, 67, 79, 89, 92, 94, 95, 97, 99, 102, 103, 105, 106, 112, 120, 137, 138, 142, 147, 154, 159, 162, 169, 177, 179, 180, 183, 185, 187, 188, 195, 201, 204, 217, 236, 242, 251, 264, 282], "stride": [4, 6, 7, 18, 23, 50, 56, 95, 99, 112, 137, 147, 159, 162, 190, 194, 200, 204, 215, 256, 258, 283], "register_fak": [4, 8, 18], "though": [4, 7, 12, 50, 79, 94, 102, 104, 105, 127, 147, 148, 155, 158, 170, 177, 188, 194, 195, 205, 212, 241, 252, 266], "definit": [4, 6, 7, 11, 12, 41, 50, 72, 79, 89, 106, 120, 131, 136, 158, 169, 178, 182, 213, 242, 266, 267], "load": [4, 6, 8, 20, 22, 23, 27, 34, 35, 37, 38, 39, 43, 44, 46, 50, 55, 56, 59, 79, 92, 97, 102, 103, 105, 112, 114, 122, 136, 137, 139, 144, 159, 162, 168, 171, 173, 177, 187, 188, 190, 194, 197, 203, 205, 206, 221, 222, 223, 227, 233, 241, 242, 251, 255, 263, 264, 266, 271, 272, 281, 282, 283, 287], "strive": 4, "load_librari": [4, 8], "next": [4, 6, 7, 11, 13, 14, 16, 17, 19, 20, 23, 36, 46, 53, 55, 57, 59, 60, 86, 89, 94, 97, 99, 101, 102, 104, 105, 109, 112, 114, 121, 137, 138, 139, 141, 142, 144, 145, 146, 147, 148, 150, 154, 155, 158, 159, 161, 165, 168, 170, 171, 178, 179, 180, 181, 183, 187, 188, 194, 195, 201, 205, 207, 214, 215, 222, 240, 241, 248, 256, 257, 272, 277], "_c": [4, 140, 203, 283], "_": [4, 6, 13, 14, 16, 17, 23, 43, 52, 53, 56, 102, 105, 112, 139, 140, 144, 153, 160, 165, 177, 179, 181, 188, 201, 219, 230, 232, 240, 251, 256, 282, 283, 286], "_check": 4, "empty_lik": [4, 102, 162, 212], "formula": [4, 12, 18, 104, 157, 177], "matter": [4, 6, 190, 212, 214, 230, 251], "wrong": [4, 56, 79, 106, 144, 159, 192], "hold": [4, 6, 16, 19, 22, 50, 66, 67, 69, 71, 72, 73, 92, 112, 120, 137, 138, 139, 144, 150, 168, 178, 179, 181, 256, 264, 267], "happen": [4, 11, 34, 35, 36, 39, 46, 56, 94, 97, 99, 102, 104, 106, 112, 114, 138, 139, 141, 148, 151, 153, 171, 175, 179, 187, 188, 194, 195, 205, 235, 252, 256, 267, 270, 280, 282], "modul": [4, 6, 8, 14, 15, 16, 19, 22, 23, 27, 35, 40, 41, 44, 47, 48, 50, 53, 57, 59, 64, 70, 72, 74, 94, 95, 97, 101, 102, 103, 106, 111, 116, 121, 122, 127, 130, 136, 137, 138, 139, 141, 142, 146, 147, 151, 153, 158, 159, 162, 165, 168, 170, 173, 174, 176, 177, 179, 180, 181, 182, 185, 188, 190, 191, 192, 194, 198, 200, 203, 205, 206, 216, 217, 219, 220, 221, 222, 227, 232, 233, 234, 235, 236, 240, 241, 242, 248, 252, 254, 255, 257, 258, 263, 267, 269, 271, 272, 283, 285, 287], "initi": [4, 7, 11, 13, 16, 19, 22, 23, 35, 36, 39, 46, 53, 59, 67, 76, 77, 79, 95, 97, 102, 103, 104, 106, 109, 111, 112, 119, 120, 121, 127, 137, 138, 141, 144, 145, 154, 155, 159, 162, 168, 171, 173, 175, 176, 178, 179, 180, 181, 183, 187, 191, 192, 195, 198, 201, 203, 215, 220, 227, 233, 234, 236, 240, 248, 250, 252, 256, 264, 267, 272, 283], "pybind11_modul": [4, 6, 174], "notic": [4, 6, 11, 16, 34, 46, 47, 56, 79, 89, 94, 97, 102, 104, 106, 121, 148, 153, 159, 161, 169, 170, 177, 187, 192, 194, 198, 212, 214, 270, 282], "pybind11": [4, 6, 11, 174, 252], "promis": [4, 112, 216], "With": [4, 11, 12, 17, 19, 20, 22, 23, 43, 52, 56, 79, 89, 94, 95, 101, 108, 139, 141, 148, 151, 153, 159, 165, 168, 173, 179, 180, 181, 182, 183, 184, 201, 205, 206, 222, 228, 231, 232, 233, 236, 248, 250, 256, 264, 267, 281, 285, 286, 287], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 106, 168, 171, 195, 198], "sai": [4, 6, 7, 18, 27, 46, 55, 102, 106, 108, 111, 139, 142, 155, 160, 168, 175, 187, 205], "not_agnost": 4, "csrc": [4, 6, 174], "extension_bad": 4, "__init__": [4, 6, 7, 8, 13, 16, 23, 35, 40, 50, 55, 57, 97, 99, 101, 106, 112, 121, 137, 144, 146, 151, 153, 173, 175, 179, 180, 181, 188, 190, 200, 216, 217, 221, 224, 232, 233, 234, 236, 240, 242, 248, 254, 256, 258, 282, 283], "successfulli": [4, 7, 54, 114, 140, 143, 153, 159, 173, 180, 194, 195, 214, 227, 239, 240, 254, 268, 269, 270], "extern": [4, 55, 104, 121, 143, 158, 159, 206, 216, 267], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 8, 17], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 203, 248], "interpret": [4, 6, 7, 60, 86, 89, 95, 111, 130, 136, 145, 146, 183, 192, 194, 206, 252, 255, 263, 266, 271, 282, 285, 287], "global": [4, 6, 7, 53, 60, 92, 141, 160, 168, 173, 180, 185, 194, 221, 222, 230, 232, 235, 253, 264, 266, 267, 283], "variabl": [4, 6, 7, 11, 34, 53, 86, 92, 94, 102, 105, 106, 108, 112, 124, 146, 150, 153, 159, 173, 179, 182, 194, 195, 198, 203, 205, 207, 214, 216, 217, 221, 226, 227, 228, 240, 248, 276, 283, 285], "pymodule_cr": 4, "entir": [4, 6, 7, 16, 19, 22, 23, 50, 53, 57, 104, 106, 109, 112, 127, 136, 137, 138, 144, 146, 147, 168, 170, 173, 175, 177, 181, 183, 191, 194, 195, 212, 213, 214, 234, 251, 256, 258, 267, 272, 282], "statement": [4, 11, 34, 46, 48, 113, 183, 194, 221, 251, 253], "trigger": [4, 139, 151, 159, 171, 179, 181, 191, 267, 283], "challeng": [4, 16, 108, 109, 113, 130, 137, 140, 141, 153, 169, 178, 190, 191, 234, 235, 236, 252, 271], "shift": [4, 177], "toward": [4, 23, 53, 104, 145, 178], "trivial": [4, 16, 55, 60, 102, 142, 195, 224, 235], "pathlib": [4, 112, 138, 190], "so_fil": 4, "__file__": [4, 6, 174, 252, 283], "glob": 4, "assert": [4, 6, 8, 13, 22, 23, 101, 139, 146, 151, 159, 160, 180, 182, 188, 194, 201, 203, 217, 222, 230, 277], "len": [4, 8, 23, 36, 50, 55, 59, 101, 112, 127, 137, 138, 139, 153, 179, 180, 188, 190, 222, 236, 242], "f": [4, 6, 11, 13, 14, 18, 22, 23, 34, 36, 46, 50, 57, 59, 76, 94, 101, 106, 112, 120, 121, 137, 138, 140, 141, 142, 151, 153, 159, 160, 173, 174, 176, 177, 179, 180, 181, 188, 190, 201, 203, 206, 217, 222, 226, 230, 232, 233, 234, 236, 240, 242, 248, 252, 258, 283, 286], "register_autograd": [4, 18, 279], "prefer": [4, 7, 11, 18, 57, 160, 165, 174, 177, 192, 195, 199, 203, 216, 251, 279], "directli": [4, 6, 7, 11, 13, 14, 16, 18, 35, 43, 52, 56, 89, 92, 94, 95, 102, 113, 114, 116, 117, 139, 140, 141, 146, 148, 149, 160, 171, 176, 177, 181, 183, 195, 203, 205, 214, 215, 217, 224, 227, 232, 234, 242, 285], "_backward": 4, "saved_tensor": [4, 6, 148], "grad_a": [4, 76, 120], "grad_b": [4, 76, 120], "none": [4, 8, 13, 16, 17, 22, 23, 36, 50, 53, 92, 94, 104, 112, 137, 138, 139, 153, 155, 159, 160, 162, 170, 173, 180, 190, 194, 200, 219, 222, 224, 228, 233, 234, 236, 265, 277, 283], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 9, 13, 18, 106, 107, 160, 173, 177, 236, 279], "had": [4, 7, 50, 55, 94, 97, 102, 109, 112, 114, 120, 168, 169, 178, 188, 241, 248, 264], "own": [4, 6, 7, 11, 12, 13, 16, 19, 20, 22, 35, 36, 53, 56, 67, 79, 92, 94, 95, 97, 112, 117, 119, 120, 131, 136, 137, 138, 139, 145, 146, 147, 151, 159, 168, 169, 175, 176, 177, 180, 181, 183, 190, 192, 194, 195, 197, 198, 200, 203, 205, 222, 233, 235, 252, 264], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 14, 18, 53, 56, 79, 94, 95, 97, 124, 136, 139, 157, 162, 168, 171, 173, 175, 176, 190, 192, 195, 198, 214, 236, 270], "mathemat": [4, 12, 15, 18, 46, 52, 67, 94, 97, 99, 108, 153, 177, 194], "plan": [4, 7, 9, 12, 22, 121, 138, 141, 190, 195, 215, 227], "gradcheck": [4, 18, 147, 148, 157, 267], "sample_input": [4, 121], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 7, 23, 36, 86, 89, 92, 101, 102, 119, 137, 143, 144, 151, 153, 154, 162, 168, 175, 177, 179, 181, 187, 222, 242, 252, 257, 266, 282, 283, 286], "14": [4, 7, 27, 50, 76, 97, 137, 159, 177, 190, 198, 240, 241, 242, 252, 257, 258, 285], "123": [4, 55, 181, 240], "reference_muladd": 4, "extend": [4, 6, 7, 8, 11, 23, 27, 56, 92, 113, 114, 115, 116, 130, 131, 135, 136, 137, 145, 154, 176, 177, 180, 181, 190, 191, 195, 200, 203, 206, 220, 241, 242, 267, 272, 276, 278], "arg": [4, 22, 23, 57, 59, 108, 121, 137, 138, 151, 153, 158, 178, 179, 180, 181, 190, 192, 194, 206, 217, 230, 232, 233, 234, 241, 282, 283, 286], "assert_clos": 4, "check": [4, 6, 7, 11, 15, 16, 17, 23, 38, 39, 40, 43, 46, 47, 48, 53, 54, 56, 59, 62, 63, 79, 85, 89, 94, 97, 99, 101, 102, 103, 104, 105, 108, 112, 114, 119, 136, 137, 138, 139, 140, 143, 144, 151, 153, 154, 157, 159, 162, 170, 171, 175, 176, 177, 180, 190, 191, 192, 194, 195, 197, 198, 207, 209, 210, 215, 216, 217, 218, 219, 221, 227, 229, 234, 240, 241, 244, 245, 246, 247, 248, 249, 251, 257, 275, 277, 281, 282], "undefin": [4, 8, 153, 198, 212, 213, 214], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 162, 266], "caus": [4, 14, 17, 79, 86, 94, 102, 112, 142, 159, 171, 176, 179, 183, 187, 190, 194, 195, 203, 212, 221, 248, 253, 267, 280, 285], "incompat": [4, 140, 194, 282], "went": [4, 56, 99, 102, 146, 159], "fairli": [4, 6, 104, 112, 153, 168, 178, 198], "torchscript": [5, 8, 24, 25, 26, 114, 130, 237, 257, 284], "export": [5, 9, 11, 24, 25, 26, 50, 89, 94, 115, 116, 130, 136, 150, 151, 159, 182, 184, 192, 216, 221, 228, 237, 240, 251, 267, 271, 274, 284, 287], "peter": 6, "goldsborough": 6, "newest": [6, 11], "date": [6, 7, 11, 12, 79, 81, 82, 83, 84, 85, 138, 180, 241, 264, 281], "plethora": 6, "relat": [6, 13, 16, 56, 94, 95, 102, 103, 108, 111, 135, 136, 141, 159, 169, 194, 198, 216, 252, 267], "algebra": [6, 16, 43, 52, 97, 102, 106, 240], "wrangl": 6, "novel": [6, 95, 201], "activ": [6, 7, 12, 14, 16, 17, 20, 23, 35, 50, 56, 62, 63, 86, 94, 95, 97, 104, 106, 112, 130, 138, 141, 146, 149, 153, 160, 168, 175, 176, 187, 198, 200, 201, 206, 207, 209, 210, 218, 219, 222, 228, 229, 240, 241, 242, 244, 245, 246, 247, 248, 249, 250, 257, 267], "research": [6, 7, 20, 23, 53, 56, 79, 89, 95, 102, 106, 124, 153, 165, 170, 175, 190, 222, 282], "outlin": [6, 7, 171, 195], "power": [6, 7, 46, 53, 61, 69, 79, 92, 94, 97, 104, 106, 112, 120, 131, 136, 137, 143, 151, 153, 159, 161, 165, 174, 175, 176, 183, 190, 191, 205, 215, 239, 252, 279, 285], "spare": [6, 7], "deriv": [6, 7, 12, 18, 20, 34, 39, 43, 46, 52, 94, 102, 106, 108, 109, 111, 120, 142, 144, 148, 157, 160, 222, 267], "express": [6, 9, 18, 94, 97, 99, 102, 105, 116, 124, 141, 194, 198, 214, 219, 239], "realli": [6, 11, 47, 94, 99, 102, 105, 106, 111, 120, 122, 136, 142, 188, 212, 214, 226, 252, 287], "frequent": [6, 34, 86, 111, 120, 137, 214, 241, 280], "expens": [6, 20, 43, 104, 119, 181, 194, 205, 222, 257, 266, 280], "even": [6, 7, 11, 12, 16, 19, 46, 47, 55, 79, 94, 97, 99, 102, 111, 112, 121, 137, 138, 141, 146, 148, 151, 158, 160, 169, 171, 177, 179, 182, 190, 194, 195, 198, 205, 212, 214, 215, 240, 252, 267, 268], "few": [6, 7, 8, 11, 12, 17, 23, 50, 55, 60, 89, 94, 95, 97, 102, 104, 106, 107, 108, 109, 111, 121, 132, 138, 139, 142, 144, 145, 146, 151, 153, 154, 169, 171, 176, 177, 180, 183, 192, 198, 200, 205, 213, 214, 215, 231, 234, 241, 242, 251, 266, 267, 268, 276], "plausibl": 6, "address": [6, 14, 22, 27, 86, 99, 130, 136, 140, 153, 171, 179, 180, 194, 195, 198, 221, 235, 242, 264, 271, 285], "mechan": [6, 7, 13, 16, 17, 27, 34, 53, 60, 103, 133, 136, 148, 158, 169, 183, 185, 187, 194, 219, 220, 241, 242, 248, 276, 277], "nativ": [6, 7, 11, 17, 18, 59, 92, 116, 117, 135, 136, 138, 141, 154, 173, 181, 198, 200, 201, 205, 212, 215, 240, 241, 257, 266, 267], "much": [6, 7, 11, 12, 14, 16, 20, 23, 39, 56, 60, 94, 95, 104, 105, 106, 111, 112, 121, 138, 142, 143, 160, 161, 168, 171, 176, 177, 180, 181, 183, 187, 188, 191, 192, 194, 195, 203, 205, 212, 215, 222, 248, 251, 252, 256, 265, 267, 268, 271, 272, 285], "boilerpl": [6, 7, 23, 47, 106, 188, 212], "degre": [6, 39, 67, 99, 120, 143, 183, 187, 201, 215], "onc": [6, 7, 11, 12, 13, 16, 19, 20, 34, 36, 39, 55, 56, 60, 86, 95, 97, 101, 102, 103, 104, 105, 109, 114, 149, 154, 162, 168, 169, 175, 176, 177, 178, 180, 183, 187, 188, 194, 195, 204, 205, 217, 222, 235, 241, 248, 251, 252, 267, 281, 282], "organ": [6, 11, 16, 55, 97, 121, 144, 201, 252, 285], "tackl": [6, 119], "decid": [6, 7, 11, 12, 20, 22, 56, 64, 92, 94, 178, 194, 195, 215, 220, 222, 270], "contribut": [6, 56, 64, 86, 95, 102, 162, 187], "upstream": [6, 241, 267], "rest": [6, 7, 16, 47, 127, 139, 154, 158, 177, 179, 180, 195, 198, 214, 264], "walk": [6, 7, 12, 17, 19, 27, 46, 58, 94, 107, 112, 124, 131, 132, 136, 142, 159, 161, 180, 200, 205, 206, 207, 219, 251, 265], "chase": 6, "someon": [6, 183], "fire": [6, 151], "don": [6, 7, 8, 11, 12, 18, 46, 47, 56, 57, 59, 92, 99, 102, 105, 106, 109, 112, 117, 121, 127, 142, 148, 158, 160, 161, 168, 171, 177, 178, 181, 182, 191, 194, 195, 212, 213, 214, 231, 248, 251, 279, 280], "dai": [6, 141, 195, 264], "head": [6, 9, 20, 38, 87, 99, 119, 151, 182, 197, 217, 222], "straight": [6, 7, 183], "recurr": [6, 47, 53, 105, 109, 133, 136, 144, 145, 166, 169, 183, 184, 287], "unit": [6, 7, 53, 99, 102, 137, 138, 160, 171, 175, 177, 178, 183, 190, 194, 198, 254, 267], "superior": [6, 140, 216], "properti": [6, 7, 13, 16, 34, 43, 52, 94, 97, 102, 108, 111, 143, 169, 183, 194, 213, 241, 251, 252, 264, 269], "art": [6, 47, 56, 95, 97, 99, 175, 250], "lstm": [6, 47, 53, 99, 107, 110, 144, 145, 181, 287], "lack": [6, 17, 86, 95, 212, 235], "forget": [6, 7, 112, 121, 192], "gate": [6, 53, 99, 198, 264], "exponenti": [6, 53, 94, 102, 106, 108, 169, 178, 205], "elu": [6, 219], "intern": [6, 11, 12, 13, 17, 40, 41, 53, 60, 72, 99, 104, 120, 135, 136, 137, 139, 143, 153, 187, 203, 212, 228, 233, 266], "never": [6, 94, 105, 106, 107, 111, 142, 175, 185], "lltm": 6, "long": [6, 7, 12, 53, 54, 86, 92, 99, 102, 106, 107, 108, 110, 112, 138, 140, 142, 145, 154, 158, 159, 169, 173, 178, 181, 187, 195, 198, 201, 203, 206, 252, 266, 267, 270, 280, 287], "term": [6, 7, 17, 43, 56, 64, 79, 94, 95, 99, 103, 106, 107, 108, 110, 119, 138, 140, 141, 165, 175, 177, 194, 195, 198, 205, 215, 224, 258, 285, 287], "vanilla": [6, 7, 53, 69, 106, 120, 190, 198, 212, 286], "signific": [6, 7, 23, 56, 86, 95, 138, 140, 144, 147, 159, 160, 162, 168, 171, 177, 182, 187, 192, 195, 203, 234, 235, 236, 240, 242, 251, 252, 267, 279], "enough": [6, 7, 20, 53, 86, 97, 108, 112, 120, 142, 147, 176, 194, 203, 222, 233, 240, 251], "lstmcell": 6, "cell": [6, 54, 94, 95, 97, 99, 102, 103, 119, 171, 177, 178, 182, 190, 195, 205, 267], "plain": [6, 7, 53, 112, 139, 144, 145, 183, 197, 264, 266], "someth": [6, 7, 13, 16, 23, 47, 92, 97, 102, 106, 108, 153, 159, 176, 177, 183, 194, 198, 226, 252, 266], "self": [6, 7, 8, 11, 12, 13, 16, 17, 23, 27, 36, 50, 53, 57, 59, 101, 106, 112, 119, 120, 121, 136, 137, 141, 146, 151, 153, 159, 161, 169, 173, 179, 180, 181, 187, 188, 190, 194, 198, 200, 216, 217, 224, 232, 233, 234, 236, 240, 242, 248, 257, 258, 264, 272, 282, 283], "input_featur": [6, 282], "state_s": 6, "super": [6, 7, 13, 22, 23, 50, 101, 112, 121, 137, 140, 146, 151, 161, 173, 179, 180, 181, 188, 190, 200, 216, 217, 224, 232, 233, 234, 236, 240, 242, 248, 258, 282], "candid": [6, 159], "reset_paramet": [6, 139], "stdv": 6, "math": [6, 12, 76, 89, 94, 108, 112, 120, 165, 176, 267, 283], "sqrt": [6, 89, 112, 198, 212, 224], "uniform_": [6, 7, 181, 224], "old_h": 6, "old_cel": 6, "cat": [6, 43, 47, 52, 95, 97, 105, 108, 159, 181, 183, 188, 197, 250], "gate_weight": 6, "split": [6, 11, 22, 23, 48, 53, 56, 89, 92, 97, 101, 103, 136, 144, 145, 151, 173, 177, 180, 181, 183, 195, 197, 217, 232, 248], "combin": [6, 12, 39, 59, 64, 92, 94, 97, 99, 104, 105, 108, 111, 112, 132, 136, 137, 142, 144, 145, 147, 155, 165, 171, 175, 178, 181, 183, 194, 195, 198, 206, 217, 235, 236, 242, 252, 267], "input_g": 6, "sigmoid": [6, 7, 56, 99, 200, 267], "output_g": 6, "tanh": [6, 7, 56, 99, 106, 160, 177, 267], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 53, 95, 99, 104, 105, 109, 112, 141, 143, 144, 145, 154, 181, 182, 183, 191, 250], "new_h": 6, "batch_siz": [6, 7, 16, 23, 36, 53, 55, 56, 59, 92, 101, 112, 137, 138, 139, 141, 153, 160, 177, 178, 179, 180, 187, 188, 190, 191, 195, 216, 217, 222, 241, 242, 251, 275, 282], "rnn": [6, 48, 53, 99, 136, 154, 166, 169, 180, 183, 184, 267, 287], "new_c": 6, "intel": [6, 153, 159, 162, 219, 221, 227, 271], "mkl": [6, 159, 216, 257, 285], "nnpack": 6, "why": [6, 7, 11, 13, 16, 18, 47, 56, 89, 95, 104, 106, 111, 121, 124, 148, 151, 159, 168, 183, 192, 194, 195, 213, 215, 252, 281, 282], "circumst": [6, 171, 251], "room": [6, 104, 171, 240], "obviou": [6, 194, 252], "knowledg": [6, 53, 56, 79, 106, 107, 122, 124, 131, 136, 159, 161, 287], "know": [6, 7, 11, 13, 22, 23, 34, 46, 53, 76, 77, 79, 97, 99, 102, 106, 108, 111, 112, 120, 142, 144, 145, 148, 153, 154, 155, 159, 161, 162, 165, 170, 171, 173, 177, 178, 179, 183, 188, 194, 195, 197, 200, 213, 242, 252, 278], "execut": [6, 7, 11, 13, 17, 19, 21, 34, 35, 41, 42, 46, 48, 51, 54, 68, 74, 78, 86, 90, 94, 97, 100, 102, 105, 110, 113, 117, 118, 122, 132, 136, 139, 140, 142, 143, 146, 153, 154, 158, 159, 162, 171, 174, 177, 178, 180, 181, 182, 184, 192, 194, 198, 201, 203, 206, 216, 223, 227, 228, 232, 240, 248, 251, 263, 266, 274, 277, 281, 282, 285, 287], "involv": [6, 11, 17, 20, 23, 38, 41, 54, 89, 94, 95, 102, 105, 108, 114, 121, 132, 142, 144, 150, 161, 168, 181, 183, 194, 203, 204, 205, 217, 222, 258, 267, 272, 279, 282], "launch": [6, 7, 57, 64, 140, 143, 150, 151, 179, 180, 181, 182, 187, 201, 227, 240, 242, 252, 257, 267, 285], "amount": [6, 23, 79, 86, 121, 141, 151, 171, 175, 192, 195, 205, 257, 267], "becom": [6, 7, 13, 27, 56, 79, 89, 95, 104, 141, 148, 160, 162, 171, 187, 188, 195, 203, 206, 217, 230, 240, 251, 285], "furthermor": [6, 23, 104, 155, 160, 188, 206, 235, 252], "itself": [6, 13, 34, 35, 46, 86, 89, 99, 102, 104, 108, 109, 112, 117, 121, 141, 142, 144, 148, 153, 161, 177, 180, 181, 183, 195, 251, 257, 281], "slow": [6, 7, 11, 39, 137, 139, 171, 195, 198, 257, 267], "down": [6, 11, 12, 13, 23, 35, 36, 54, 86, 92, 94, 99, 101, 106, 112, 137, 154, 159, 160, 161, 180, 185, 188, 194, 203, 212, 266, 267], "thing": [6, 7, 11, 17, 18, 34, 46, 47, 50, 53, 89, 92, 94, 97, 102, 103, 104, 105, 106, 108, 109, 111, 112, 135, 136, 139, 141, 142, 143, 148, 149, 150, 153, 154, 158, 159, 162, 169, 176, 177, 185, 194, 205, 221, 233, 252, 270], "therefor": [6, 7, 8, 17, 23, 53, 55, 104, 121, 132, 144, 151, 162, 165, 171, 174, 175, 180, 181, 194, 207, 214, 215, 227, 251, 285], "rewrit": [6, 48, 146, 169, 194, 226, 227], "group": [6, 13, 22, 23, 27, 53, 64, 87, 99, 102, 119, 132, 136, 137, 138, 139, 140, 145, 147, 149, 151, 153, 159, 173, 187, 195, 197, 198, 203, 233, 234, 236, 252, 282, 285, 286], "profit": 6, "fewer": [6, 13, 147, 160], "visibl": [6, 47, 92, 101, 190], "begin": [6, 7, 8, 13, 14, 20, 23, 34, 46, 53, 54, 56, 59, 79, 89, 94, 97, 109, 111, 138, 141, 166, 168, 178, 180, 187, 188, 195, 214, 217, 222, 239, 251, 252, 254, 257, 268, 269, 270, 272], "translat": [6, 53, 114, 116, 117, 136, 144, 145, 165, 166, 184, 214, 267, 282, 287], "benefit": [6, 7, 20, 22, 46, 89, 92, 138, 140, 157, 162, 168, 171, 182, 198, 205, 222, 240, 241, 251, 267, 278, 285], "massiv": [6, 47, 108, 111, 195, 241], "parallel": [6, 7, 13, 19, 22, 47, 49, 51, 53, 55, 59, 79, 92, 97, 121, 136, 143, 149, 153, 165, 177, 180, 181, 195, 203, 216, 220, 233, 234, 235, 239, 251, 257, 283, 285, 286, 287], "discuss": [6, 7, 11, 12, 17, 19, 47, 79, 94, 97, 99, 103, 108, 109, 137, 138, 146, 153, 158, 159, 165, 171, 173, 192, 198, 203, 212, 213, 214, 215, 256, 277, 279], "latter": [6, 7, 143, 179], "lltm_cpp": 6, "conveni": [6, 11, 16, 47, 50, 53, 95, 108, 112, 142, 145, 155, 160, 174, 177, 203, 213, 215, 234, 241, 251, 252, 266], "wrapper": [6, 7, 11, 59, 112, 121, 137, 138, 148, 154, 161, 177, 190, 195, 204, 220, 233, 234, 279, 283], "languag": [6, 7, 27, 47, 53, 99, 105, 107, 109, 136, 141, 143, 144, 145, 166, 181, 183, 201, 206, 228, 240, 267, 272, 277, 279, 282, 283], "include_dir": [6, 12, 174], "include_path": 6, "manag": [6, 35, 46, 53, 64, 94, 112, 119, 132, 139, 141, 146, 149, 150, 151, 169, 182, 187, 192, 195, 204, 233, 234, 235, 236, 251, 252, 253, 256, 257, 258, 267, 280, 285], "And": [6, 7, 12, 18, 27, 56, 95, 108, 114, 144, 148, 159, 160, 162, 165, 176, 187, 188, 192, 194, 252, 266], "overal": [6, 23, 53, 99, 137, 138, 153, 171, 178, 190, 194, 195, 240, 252, 267], "iostream": [6, 7, 8, 241], "d_sigmoid": 6, "header": [6, 7, 11, 174, 252], "bit": [6, 17, 72, 97, 102, 119, 120, 154, 176, 177, 183, 195, 205, 212, 228, 242, 252], "primari": [6, 7, 17, 171, 191, 206, 216, 217, 227, 235, 266, 267, 285], "datatyp": [6, 43, 52, 77, 97, 102, 119, 241, 251], "Its": [6, 104, 106, 217], "inspect": [6, 8, 94, 104, 117, 138, 139, 143, 158, 182, 185, 192, 194, 195, 252, 281], "dispos": 6, "nvcc": 6, "hit": [6, 23, 79, 141, 187], "pars": [6, 53, 55, 111, 137, 138, 143, 203, 252], "window": [6, 7, 47, 55, 99, 111, 114, 136, 151, 180, 187, 197, 220, 227, 248, 267], "workaround": [6, 89, 148, 157, 282], "logic": [6, 7, 13, 20, 39, 44, 89, 105, 113, 130, 136, 137, 143, 150, 173, 175, 180, 181, 190, 191, 222, 224, 234, 285], "sigmoidalphablendforwardcuda": 6, "open": [6, 38, 40, 54, 92, 95, 97, 98, 101, 103, 111, 112, 114, 116, 136, 138, 153, 155, 158, 168, 170, 183, 187, 190, 198, 207, 227, 241, 242, 248], "port": [6, 19, 140, 153, 180, 195, 203, 248, 276], "lltm_forward": 6, "addmm": [6, 7, 119, 159, 227, 228, 240, 257], "transpos": [6, 7, 14, 43, 52, 53, 56, 101, 159, 188, 217, 227, 282], "alpha": [6, 7, 17, 161, 190, 212, 217], "respect": [6, 9, 18, 19, 34, 36, 38, 39, 40, 46, 53, 56, 66, 67, 76, 94, 95, 106, 108, 120, 124, 141, 142, 154, 157, 159, 160, 170, 171, 177, 181, 183, 187, 195, 201, 232, 264, 269, 279, 285], "ultim": [6, 23, 53, 56, 89, 212, 228], "plop": 6, "autograd": [6, 9, 14, 17, 18, 19, 35, 36, 38, 39, 40, 41, 43, 44, 49, 50, 51, 61, 65, 68, 72, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108, 112, 130, 131, 135, 136, 144, 145, 148, 151, 159, 160, 165, 170, 178, 179, 180, 183, 184, 194, 226, 232, 248, 251, 267, 279, 287], "nice": [6, 53, 112, 168, 170, 177, 194, 195, 198], "dig": [6, 95, 106, 182, 194], "deeper": [6, 13, 14, 40, 95, 102, 104, 106, 158, 159, 182, 194, 231, 239], "interest": [6, 7, 12, 16, 20, 47, 53, 55, 92, 94, 95, 104, 106, 113, 114, 116, 117, 127, 138, 143, 160, 168, 169, 177, 185, 194, 195, 197, 198, 222, 226, 252, 266, 269, 270], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 14, 23, 50, 56, 99, 101, 106, 112, 121, 137, 151, 159, 176, 179, 180, 181, 188, 216, 219, 233, 234, 235, 236, 240, 241, 242, 251, 258, 267], "exp": [6, 105, 106, 112, 148, 214], "d_elu": 6, "mask": [6, 20, 95, 99, 119, 133, 136, 154, 169, 175, 182, 190, 197, 205, 212, 213, 215, 217, 220, 222, 241, 282], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 23, 137, 180, 242], "d_x": 6, "d_old_h": 6, "slice": [6, 43, 52, 109, 112, 175, 198, 217, 227, 236, 266], "d_input": 6, "span": [6, 20, 105, 151, 187, 222, 248], "four": [6, 16, 22, 89, 97, 99, 101, 102, 120, 138, 153, 173, 188, 198, 219, 282], "torch_extension_nam": [6, 174], "macro": [6, 7, 11, 17], "maintain": [6, 12, 16, 34, 35, 36, 46, 53, 79, 99, 104, 109, 135, 136, 140, 149, 153, 161, 178, 181, 194, 221, 227, 233, 251, 286], "mismatch": [6, 104, 194, 203], "nasti": [6, 264], "hard": [6, 7, 11, 17, 36, 106, 143, 171, 175, 194, 252, 276], "At": [6, 7, 11, 16, 17, 20, 46, 50, 53, 54, 89, 92, 109, 112, 120, 137, 138, 141, 154, 157, 161, 177, 178, 179, 182, 183, 187, 212, 215, 222, 227, 257, 264, 267, 281], "point": [6, 7, 11, 12, 13, 16, 20, 22, 23, 46, 50, 53, 54, 55, 56, 57, 86, 89, 94, 97, 99, 102, 104, 105, 107, 108, 109, 111, 112, 120, 137, 139, 141, 142, 143, 148, 149, 151, 158, 161, 165, 171, 177, 179, 183, 188, 190, 194, 195, 203, 205, 212, 214, 215, 221, 222, 242, 255, 263, 265, 267, 271, 278, 282, 287], "bdist_egg": 6, "egg_info": 6, "egg": 6, "info": [6, 7, 86, 140, 150, 153, 161, 177, 190, 194, 228, 241, 242], "pkg": 6, "dependency_link": 6, "txt": [6, 7, 53, 144, 145, 159, 176, 183, 235, 241], "top_level": 6, "manifest": [6, 214], "bdist": 6, "linux": [6, 7, 22, 114, 141, 151, 153, 176, 187, 197, 227, 241, 267, 285], "x86_64": [6, 22], "install_lib": 6, "temp": [6, 23, 146, 276], "gcc": [6, 159, 216], "pthread": [6, 7, 241], "local": [6, 7, 11, 19, 22, 23, 38, 53, 54, 64, 94, 98, 105, 113, 121, 124, 138, 139, 141, 143, 151, 153, 168, 175, 179, 180, 181, 183, 185, 195, 201, 203, 204, 232, 251, 254, 267, 276, 277, 283, 285, 286], "miniconda": [6, 22], "compiler_compat": 6, "wl": 6, "sysroot": 6, "wsign": 6, "dndebug": 6, "fwrapv": 6, "o3": [6, 252], "wall": [6, 105, 158, 252], "wstrict": 6, "prototyp": [6, 8, 12, 13, 17, 36, 194, 195, 206, 208, 216, 217, 220, 223, 226, 227, 232, 239, 287], "fpic": 6, "lib": [6, 7, 12, 22, 159, 177, 203, 241, 266, 282, 283, 285], "python3": [6, 22, 187, 203, 240, 266, 282, 283], "site": [6, 9, 22, 54, 56, 158, 183, 257, 266, 282], "th": [6, 16, 55, 106, 111, 153, 161], "thc": 6, "7m": [6, 36, 101], "o": [6, 7, 13, 22, 23, 36, 53, 54, 57, 59, 104, 137, 138, 140, 151, 153, 165, 168, 171, 173, 174, 176, 179, 180, 181, 190, 201, 203, 204, 221, 222, 232, 233, 234, 236, 252, 256, 283, 286], "dtorch_api_include_extension_h": 6, "dtorch_extension_nam": 6, "d_glibcxx_use_cxx11_abi": 6, "cc1plu": 6, "warn": [6, 23, 55, 159, 177, 190, 212, 213, 214, 215, 252, 257, 266], "valid": [6, 27, 39, 53, 92, 99, 101, 103, 104, 116, 119, 121, 127, 137, 138, 143, 144, 147, 148, 171, 174, 190, 191, 194, 197, 213, 214, 222, 252, 277, 280], "objc": 6, "share": [6, 7, 12, 13, 22, 43, 52, 59, 70, 74, 92, 104, 108, 138, 142, 151, 153, 154, 161, 171, 177, 180, 181, 194, 203, 234, 241, 252, 256, 266, 276, 281, 285, 287], "l": [6, 14, 16, 46, 55, 56, 94, 106, 177, 178, 194, 203, 217, 252, 281, 283], "rpath": 6, "37m": 6, "gnu": [6, 7, 241, 267, 285], "stub": 6, "loader": [6, 7, 27, 40, 47, 103, 112, 177, 180, 197, 252], "byte": [6, 194, 204, 282], "37": [6, 20, 76, 119, 176, 177, 181, 222, 240, 257], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 23, 86, 134, 136, 168, 177, 192, 194, 266, 282], "archiv": [6, 7, 139, 162, 194, 281], "__pycache__": 6, "dist": [6, 13, 22, 137, 138, 140, 151, 153, 173, 174, 180, 201, 203, 233, 234, 236, 283, 286], "py3": 6, "remov": [6, 20, 23, 53, 56, 57, 87, 112, 117, 119, 124, 139, 142, 151, 159, 168, 176, 182, 183, 190, 191, 192, 194, 195, 198, 205, 212, 213, 217, 222, 252, 266], "everyth": [6, 18, 46, 92, 102, 104, 106, 134, 143, 144, 148, 154, 176, 177, 178, 179, 183, 188, 195, 204, 232], "pth": [6, 23, 121, 190, 205, 234, 241, 242, 282], "finish": [6, 7, 19, 48, 97, 101, 151, 179, 181, 188, 219, 232, 233, 248, 254, 267], "abi": [6, 7, 227, 241], "ubuntu": [6, 7, 187, 285], "16": [6, 20, 23, 50, 92, 97, 99, 101, 104, 112, 121, 151, 154, 160, 162, 176, 177, 181, 188, 190, 194, 197, 205, 216, 222, 233, 234, 240, 252, 257, 258, 281, 282, 283], "04": [6, 42, 177, 187, 207, 240, 252, 287], "recent": [6, 53, 109, 119, 140, 141, 153, 159, 165, 169, 178, 187, 282, 285], "distribut": [6, 7, 16, 17, 23, 56, 79, 92, 97, 102, 103, 104, 106, 111, 136, 137, 138, 139, 140, 141, 143, 149, 150, 162, 168, 174, 177, 179, 187, 198, 201, 203, 217, 219, 220, 224, 232, 235, 236, 252, 271, 285, 286], "maco": [6, 7, 114, 153, 190, 267], "clang": [6, 207, 227], "worst": 6, "resolv": [6, 104, 162, 191, 194, 214, 235, 282], "symbol": [6, 252, 266, 282], "linker": 6, "pycapsul": 6, "builtin": [6, 174, 252, 266], "arg0": 6, "arg1": [6, 180], "arg2": [6, 180], "arg3": 6, "arg4": 6, "citizen": [6, 212, 214], "lltmfunction": 6, "staticmethod": [6, 148, 179, 190], "benchmark": [6, 17, 20, 27, 36, 119, 136, 143, 159, 160, 171, 176, 182, 192, 198, 205, 216, 217, 219, 222, 239, 241, 242, 257, 263, 266, 267, 271, 277, 282, 285, 287], "measur": [6, 14, 39, 86, 94, 95, 97, 99, 104, 111, 137, 140, 158, 160, 171, 177, 178, 182, 185, 192, 205, 216, 232, 240, 251, 252, 257, 266, 271, 272, 281], "durat": [6, 87, 174, 178, 187, 203], "32": [6, 22, 23, 36, 50, 59, 92, 97, 99, 101, 102, 104, 109, 119, 137, 160, 165, 170, 173, 176, 177, 180, 181, 184, 187, 190, 194, 201, 216, 240, 242, 252, 258, 283], "128": [6, 7, 55, 56, 59, 92, 104, 137, 141, 144, 153, 155, 176, 179, 180, 181, 195, 198, 228, 232, 241, 252, 266, 275], "rang": [6, 7, 8, 13, 14, 16, 22, 23, 36, 44, 47, 55, 56, 57, 76, 79, 86, 92, 95, 101, 104, 112, 113, 114, 116, 117, 120, 137, 138, 139, 140, 143, 153, 173, 176, 177, 179, 181, 183, 187, 188, 194, 197, 200, 201, 203, 205, 206, 217, 222, 230, 232, 233, 236, 240, 242, 248, 250, 251, 257, 267, 279, 282, 285, 286], "100000": [6, 252], "3f": [6, 23, 217, 222], "wrote": [6, 192, 197], "post": [6, 7, 13, 53, 104, 137, 138, 139, 143, 162, 185, 195, 201, 217, 242, 250], "my": [6, 54, 105, 111, 198], "machin": [6, 7, 22, 38, 40, 44, 47, 53, 54, 55, 57, 58, 59, 60, 64, 79, 92, 94, 95, 98, 114, 116, 136, 137, 138, 143, 149, 150, 151, 153, 158, 170, 171, 176, 180, 181, 182, 183, 195, 197, 203, 230, 239, 240, 248, 265, 267, 276, 277, 282, 285], "506": 6, "480": [6, 257], "444": 6, "694": 6, "349": [6, 97, 177], "335": [6, 162, 181, 286], "443": [6, 181, 257], "523": 6, "speedup": [6, 20, 47, 120, 136, 155, 159, 170, 198, 205, 216, 217, 222, 240, 267, 272, 281], "30": [6, 7, 23, 36, 48, 86, 106, 134, 138, 140, 162, 175, 177, 179, 181, 222, 252, 257], "albeit": [6, 16], "major": [6, 8, 12, 13, 23, 99, 102, 111, 127, 140, 159, 168, 182, 192, 195, 215, 240, 272, 279, 283, 286], "particularli": [6, 15, 20, 57, 112, 169, 183, 216, 222, 267], "engin": [6, 7, 16, 34, 46, 92, 94, 137, 146, 171, 176, 181, 190, 194, 195, 197, 203, 226, 228, 241, 282], "correspondingli": 6, "big": [6, 56, 99, 105, 111, 120, 139, 145, 155, 168, 177, 183, 190], "win": [6, 168], "No": [6, 7, 57, 117, 139, 159, 200, 231, 279], "cuda_devic": 6, "creation": [6, 7, 12, 102, 215, 224, 256], "is_avail": [6, 7, 14, 92, 102, 112, 173, 174, 177, 178, 180, 201, 217, 221, 282], "synchron": [6, 13, 19, 59, 60, 86, 137, 139, 151, 153, 177, 179, 180, 187, 192, 203, 204, 217, 232, 233, 248, 251, 252, 280, 286], "1e6": [6, 23, 230, 286], "1e5": 6, "again": [6, 7, 47, 54, 94, 95, 99, 101, 102, 104, 105, 112, 113, 142, 147, 153, 154, 168, 179, 181, 183, 187, 190, 192, 195, 204, 205, 221, 252], "187": [6, 252], "719": 6, "410": [6, 162], "815": 6, "149": [6, 51, 177], "802": [6, 159], "393": 6, "458": [6, 159], "That": [6, 7, 8, 20, 46, 47, 48, 53, 94, 95, 97, 102, 106, 108, 109, 111, 112, 114, 141, 144, 151, 157, 158, 160, 162, 165, 168, 177, 178, 182, 187, 194, 195, 197, 212, 213, 215, 222, 266], "great": [6, 53, 114, 120, 121, 214, 252, 269], "pull": [6, 95, 102, 103, 158, 221], "dive": [6, 7, 13, 40, 130, 146, 151, 159, 216, 266], "previous": [6, 11, 34, 89, 108, 112, 146, 157, 173, 175, 177, 178, 179, 187, 194, 212, 226, 264, 281], "cover": [6, 9, 16, 17, 19, 22, 36, 50, 102, 107, 117, 124, 134, 135, 136, 138, 143, 153, 173, 174, 177, 180, 181, 188, 192, 194, 199, 214, 216, 217, 232, 240, 241, 251, 259, 260, 261, 262, 265, 266, 267, 278, 285], "elabor": [6, 7, 141, 159, 179], "fly": [6, 16, 55, 105, 177, 198], "background": [6, 7, 35, 79, 101, 176, 188, 190, 197, 277, 278], "tmp": [6, 159, 190, 203, 206, 276, 277, 283], "torch_extens": 6, "emit": [6, 7, 105, 194, 283], "ninja": 6, "verbos": [6, 150, 190, 194, 228, 235], "root": [6, 7, 16, 34, 36, 46, 55, 56, 97, 105, 139, 147, 154, 159, 180, 181, 203, 241, 248, 265, 275], "complic": [6, 8, 16, 105, 106, 111, 112, 120, 143, 194, 226, 236, 251, 252], "techniqu": [6, 19, 20, 23, 53, 64, 104, 105, 111, 113, 131, 136, 141, 147, 148, 149, 158, 166, 169, 171, 173, 175, 181, 190, 195, 198, 205, 212, 217, 222, 267, 282, 285], "fine": [6, 7, 20, 23, 53, 55, 94, 105, 142, 153, 159, 176, 187, 192, 195, 212, 222, 251, 252, 266, 267, 285], "system": [6, 7, 11, 12, 14, 16, 17, 59, 104, 136, 139, 143, 153, 169, 171, 176, 177, 179, 191, 192, 194, 195, 203, 227, 228, 233, 254, 267, 276, 285], "increment": [6, 13, 89, 108, 112, 153, 178], "thu": [6, 7, 11, 12, 23, 34, 41, 53, 89, 92, 104, 112, 138, 155, 168, 171, 183, 216, 224, 248, 252, 257, 267, 285], "didn": [6, 11, 95, 114, 158, 179, 226], "hand": [6, 7, 11, 16, 20, 22, 79, 102, 105, 111, 112, 145, 153, 170, 171, 192, 194, 195, 213, 222, 233, 234, 272], "prospect": 6, "pointwis": [6, 11, 162, 191, 239, 267, 271, 283], "declar": [6, 7, 15, 79], "best": [6, 7, 11, 41, 46, 56, 64, 79, 92, 114, 117, 119, 121, 127, 131, 134, 136, 149, 153, 155, 159, 170, 171, 176, 179, 181, 185, 194, 198, 205, 216, 222, 240, 241, 242, 257, 266, 267, 270, 271, 277, 279, 285], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": 6, "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 231], "cuda_runtim": 6, "templat": [6, 11, 122, 153, 159, 191, 216, 242, 287], "typenam": 6, "scalar_t": [6, 159], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 22, 39, 43, 46, 52, 56, 57, 92, 94, 108, 139, 140, 141, 150, 154, 162, 181, 182, 185, 194, 215, 217, 221, 248, 267], "zeros_lik": [6, 102, 179], "thread": [6, 7, 8, 11, 56, 119, 139, 140, 151, 160, 171, 176, 179, 180, 181, 241, 248, 252, 257, 266, 267, 285], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 12, 13, 16, 35, 53, 66, 67, 86, 94, 95, 97, 99, 101, 105, 106, 111, 117, 119, 120, 143, 144, 154, 159, 175, 177, 178, 180, 187, 188, 190, 195, 203, 212, 214, 215, 228, 250, 252, 282], "awai": [6, 7, 50, 99, 101, 105, 106, 108, 177, 178, 179, 195, 215, 235], "runtim": [6, 11, 16, 22, 43, 54, 86, 89, 94, 97, 98, 102, 116, 117, 119, 130, 136, 140, 141, 146, 147, 158, 168, 171, 173, 187, 192, 194, 195, 205, 207, 216, 227, 228, 230, 240, 251, 252, 257, 270, 271, 274, 278, 283, 287], "back": [6, 7, 11, 12, 16, 17, 23, 34, 47, 50, 55, 79, 92, 94, 101, 102, 104, 108, 112, 114, 119, 139, 142, 162, 168, 171, 177, 179, 180, 181, 183, 190, 192, 194, 195, 198, 212, 217, 234, 264, 267, 279, 280], "determin": [6, 7, 8, 11, 13, 20, 23, 43, 52, 95, 97, 102, 103, 104, 105, 108, 111, 114, 140, 141, 143, 155, 168, 169, 170, 175, 192, 194, 195, 203, 217, 221, 222, 252, 257, 258, 267], "conceptu": [6, 7, 34, 46, 53, 120, 266], "switch": [6, 11, 17, 23, 101, 102, 121, 168, 195, 227, 240, 251, 253, 257, 270], "scalartyp": 6, "messag": [6, 18, 53, 94, 117, 146, 153, 190, 194, 228, 285], "insid": [6, 7, 12, 19, 22, 35, 39, 48, 139, 141, 187, 192, 197, 216, 222, 226, 228], "alia": [6, 12, 102], "instanti": [6, 7, 12, 16, 36, 41, 55, 56, 69, 71, 89, 97, 104, 112, 114, 120, 143, 174, 175, 178, 190, 224, 239, 256], "retriev": [6, 7, 16, 19, 34, 36, 53, 142, 143, 173, 177, 179, 180, 195, 248, 285], "at_dispatch_all_typ": 6, "sens": [6, 11, 14, 16, 104, 111, 112, 155, 171, 188], "routin": [6, 7, 195], "convolut": [6, 7, 11, 14, 15, 50, 56, 95, 97, 102, 104, 112, 121, 127, 130, 131, 133, 135, 136, 162, 165, 175, 184, 185, 194, 227, 228, 240, 241, 248, 251, 254, 257, 258, 269, 270, 281, 287], "harder": [6, 104, 205], "ourselv": [6, 7, 39, 53, 147, 177], "grid": [6, 50, 101, 103, 112, 127, 185, 188, 206], "fill": [6, 7, 16, 97, 111, 112, 144, 154, 213, 214], "matric": [6, 14, 20, 43, 52, 94, 108, 160, 169, 222, 228], "2048": [6, 22, 104, 160], "heard": 6, "introductori": 6, "ever": [6, 7, 142, 151, 194, 256], "__restrict__": [6, 216], "size_t": 6, "column": [6, 22, 94, 102, 106, 108, 119, 141, 144, 159, 160, 165, 187, 190, 195, 213, 214, 215, 217, 257], "index": [6, 7, 8, 17, 36, 43, 44, 47, 52, 53, 55, 87, 102, 105, 106, 108, 109, 111, 112, 119, 137, 142, 143, 144, 153, 169, 173, 179, 183, 187, 190, 192, 194, 195, 205, 217, 226, 283, 285], "gates_row": 6, "primarili": [6, 86, 180, 192, 235, 251, 267], "imagin": [6, 94, 102, 105, 111, 148, 153, 168, 169, 183, 195, 252, 264], "giant": [6, 183], "million": [6, 127, 138, 154], "serial": [6, 7, 12, 40, 41, 112, 121, 194, 204, 248, 252, 281], "faster": [6, 7, 11, 14, 23, 53, 60, 79, 99, 102, 104, 112, 121, 136, 138, 140, 150, 151, 154, 155, 160, 162, 170, 171, 179, 183, 192, 197, 203, 216, 251, 252, 266, 267, 268, 271, 285], "right": [6, 7, 11, 12, 14, 16, 34, 38, 43, 46, 52, 53, 56, 67, 86, 94, 99, 101, 104, 106, 108, 111, 120, 144, 153, 161, 165, 168, 177, 178, 179, 182, 183, 187, 190, 197, 198, 226, 240, 248], "inde": [6, 16, 18, 104, 147, 160, 171, 177, 182, 192, 195, 214, 215, 252], "ineffici": [6, 86, 217], "eas": [6, 89, 102, 103, 138, 198, 241, 256, 271], "readabl": [6, 36, 55, 95, 102, 105, 145, 187, 203, 252, 266], "especi": [6, 9, 20, 23, 53, 56, 79, 95, 102, 138, 140, 151, 158, 165, 168, 171, 194, 198, 205, 213, 222, 242], "dimension": [6, 35, 43, 50, 52, 53, 56, 64, 76, 77, 94, 99, 101, 102, 104, 107, 108, 109, 111, 120, 141, 146, 162, 175, 182, 183, 188, 190, 195, 215, 228, 236], "row": [6, 22, 36, 55, 79, 94, 99, 102, 106, 108, 109, 111, 112, 139, 141, 143, 144, 160, 179, 195, 213, 215, 226, 248], "n": [6, 7, 8, 14, 20, 23, 34, 46, 50, 64, 76, 77, 86, 89, 94, 99, 101, 102, 104, 112, 120, 137, 138, 139, 151, 153, 160, 161, 165, 173, 175, 179, 180, 181, 183, 188, 194, 195, 197, 203, 205, 216, 217, 222, 226, 241, 267], "arithmet": [6, 23, 43, 97, 102, 171], "within": [6, 8, 16, 22, 64, 89, 94, 95, 101, 112, 113, 114, 119, 141, 146, 148, 159, 169, 175, 178, 180, 190, 191, 192, 195, 198, 204, 206, 215, 216, 217, 221, 227, 236, 240, 252, 258, 267, 276, 278, 281, 285], "accept": [6, 44, 92, 94, 104, 109, 141, 143, 157, 160, 165, 170, 171, 177, 180, 187, 190, 200, 224, 226, 232, 240, 257, 267], "fortun": [6, 7, 12, 17, 92, 153, 154, 252], "foo": [6, 8, 180, 207, 221, 224, 266], "rand": [6, 7, 17, 89, 102, 148, 200, 201, 222, 227, 230, 233, 234, 240, 241, 248, 258, 267, 275, 277], "12": [6, 36, 76, 97, 101, 119, 137, 138, 159, 177, 179, 188, 200, 205, 217, 222, 240, 242, 252], "foo_a": 6, "trace": [6, 8, 11, 12, 18, 34, 46, 94, 101, 119, 136, 146, 159, 165, 171, 182, 187, 191, 194, 203, 216, 235, 241, 271, 278, 279, 283], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 53, 159, 177, 179, 181, 216, 217, 232], "integ": [6, 7, 11, 44, 97, 102, 106, 108, 111, 143, 175, 194, 197, 205, 215, 228, 257], "fundament": [6, 53, 96, 99, 108, 111, 120, 136, 161, 171, 194, 195, 199, 213, 234, 266], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 12, 20, 137, 194, 222], "packedaccessor32": 6, "variant": [6, 53, 97, 99, 101, 103, 141, 147, 176, 182, 195, 198, 201, 239], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 20, 60, 151, 160, 171, 176, 178, 192, 197, 205, 206, 217, 222], "host": [6, 22, 38, 58, 86, 98, 105, 137, 138, 141, 151, 153, 171, 173, 180, 181, 187, 236, 257, 267, 276], "reshap": [6, 7, 14, 23, 99, 102, 111, 112, 173, 177, 217, 227, 242], "pattern": [6, 20, 99, 101, 136, 141, 153, 159, 169, 180, 212, 214, 219, 222, 224, 236, 241], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "enabl": [6, 7, 11, 13, 16, 17, 19, 22, 23, 27, 36, 50, 59, 60, 86, 94, 102, 104, 116, 121, 137, 138, 140, 141, 143, 146, 147, 148, 151, 153, 159, 162, 171, 173, 175, 176, 177, 187, 188, 190, 191, 194, 195, 200, 204, 205, 212, 214, 216, 217, 220, 221, 228, 233, 234, 235, 240, 241, 248, 251, 257, 264, 272, 276, 277, 278, 280, 281, 285, 286], "hassl": [6, 7], "entail": [6, 194], "simpler": [6, 112, 139, 141, 147, 157, 169, 226, 252], "hope": [6, 53, 161, 168, 192, 198, 240], "fastest": [6, 182, 277], "129": [6, 119], "431": 6, "304": [6, 53], "641": [6, 162], "equip": [6, 148, 154, 212, 285], "faq": 6, "blog": [6, 137, 138, 144, 149, 198, 240, 250], "framework": [7, 12, 27, 38, 56, 94, 106, 107, 120, 132, 134, 136, 171, 173, 179, 182, 190, 198, 203, 219, 228, 232, 242, 282], "sit": [7, 113, 114, 116, 117, 169], "atop": 7, "substanti": [7, 143, 171], "codebas": [7, 12, 16], "foundat": [7, 144, 177, 190, 195, 199], "underli": [7, 11, 16, 43, 52, 64, 79, 102, 104, 121, 143, 155, 159, 170, 180, 194, 203, 214, 215, 217, 236, 267], "popular": [7, 72, 79, 104, 120, 130, 143, 153, 154, 195, 198, 205, 216, 241, 242, 271, 282], "stochast": [7, 39, 50, 56, 69, 94, 97, 103, 112, 120, 153, 177, 178], "descent": [7, 39, 46, 50, 69, 94, 97, 103, 112, 120, 153, 195, 205, 270], "digit": [7, 50, 97, 112, 131, 136, 137, 138, 190, 282], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 103, 149, 153], "lightn": [7, 143], "talk": [7, 11, 53, 56, 59, 97, 108, 171, 177, 180, 194, 195], "cppcon": 7, "2018": 7, "quick": [7, 20, 35, 52, 94, 104, 106, 109, 111, 136, 138, 151, 155, 160, 170, 195, 205, 222, 252, 255, 263, 271, 287], "humor": 7, "sweep": [7, 182], "philosophi": 7, "ecosystem": [7, 117, 146], "http": [7, 22, 23, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 85, 88, 96, 101, 104, 107, 112, 114, 115, 117, 120, 127, 132, 137, 144, 145, 147, 156, 157, 158, 166, 168, 176, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 199, 205, 208, 211, 213, 215, 225, 227, 242, 250, 251, 252, 255, 256, 259, 260, 261, 262, 265, 282], "org": [7, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 85, 88, 96, 99, 101, 103, 104, 107, 115, 120, 127, 132, 144, 145, 156, 157, 158, 166, 168, 176, 183, 186, 187, 189, 192, 193, 194, 195, 199, 205, 208, 211, 213, 215, 220, 225, 226, 227, 242, 248, 251, 255, 256, 259, 260, 261, 262], "cppdoc": 7, "descript": [7, 54, 137, 138, 159, 177, 179, 180, 181, 182, 190, 194, 219, 252, 267, 282, 283], "embark": 7, "excit": [7, 158, 168], "journei": [7, 56, 199], "team": [7, 117, 143, 178, 190, 198], "job": [7, 48, 56, 57, 58, 64, 86, 104, 140, 143, 149, 150, 151, 153, 173, 220], "latenc": [7, 20, 134, 136, 141, 143, 150, 159, 171, 176, 192, 222, 240, 276, 277, 283, 285], "reinforc": [7, 16, 103, 133, 136, 161, 179, 180, 184, 287], "game": [7, 47, 56, 161, 282], "tractabl": [7, 105], "multithread": [7, 46, 60, 119, 171, 248, 252, 285], "lock": [7, 8, 16, 60, 153, 171, 179, 180, 233], "gil": [7, 60, 151], "multiprocess": [7, 13, 16, 36, 40, 55, 57, 59, 60, 137, 138, 151, 153, 177, 180, 181, 203, 232, 233, 234, 283, 285, 286], "scalabl": [7, 136, 140, 143, 195, 212, 228, 240, 241, 267, 285], "shortcom": [7, 214], "constraint": [7, 14, 20, 22, 89, 106, 131, 136, 141, 143, 169, 177, 190, 195, 201, 203, 222, 233, 251, 252, 264, 282], "neuroevolut": 7, "owner": [7, 179, 180, 181], "anyth": [7, 15, 18, 47, 76, 77, 97, 99, 102, 105, 108, 109, 111, 112, 120, 176, 198, 205, 248, 264, 265, 282], "serv": [7, 61, 64, 89, 97, 104, 109, 120, 136, 151, 158, 161, 174, 180, 181, 195, 204, 214, 232, 235, 239, 251, 252, 266, 276], "web": [7, 114, 248], "page": [7, 9, 12, 18, 54, 58, 64, 93, 112, 119, 120, 135, 136, 144, 146, 171, 181, 187, 194, 195, 228, 233, 238, 241, 267, 280], "server": [7, 19, 132, 136, 140, 151, 174, 181, 200, 234, 241, 248, 276, 282, 285], "3d": [7, 64, 99, 101, 108, 109, 173, 190, 267], "graphic": [7, 182, 227], "photo": [7, 95], "softwar": [7, 174, 187, 203, 227], "remain": [7, 92, 94, 104, 139, 140, 153, 168, 171, 175, 183, 200, 201, 203, 205, 214, 217, 267], "forth": [7, 112], "retain": [7, 43, 52, 102, 121], "intuit": [7, 56, 79, 97, 102, 106, 121, 159, 183, 190, 194, 213, 248, 264], "tradit": [7, 56, 104, 106, 160, 180, 194, 195, 198, 203, 216], "experi": [7, 12, 104, 105, 138, 140, 153, 161, 171, 174, 177, 178, 182, 183, 185, 190, 192, 194, 195, 198, 205, 212, 220, 221, 226, 232, 235, 251, 266, 268, 276, 282, 283, 285], "compet": [7, 143, 171], "meant": [7, 9, 13, 89, 94, 99, 138, 195, 203, 214, 267], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 79, 138, 147, 171, 177, 178, 216, 236, 252], "core": [7, 11, 12, 13, 48, 105, 106, 107, 112, 120, 121, 136, 141, 153, 154, 159, 162, 171, 176, 187, 194, 199, 203, 248, 251, 266, 285], "principl": [7, 11, 109, 111, 143], "curiou": [7, 155, 168, 170, 231], "paragraph": 7, "tri": [7, 22, 56, 94, 105, 111, 178, 194, 227, 251, 282], "close": [7, 16, 20, 23, 56, 94, 99, 101, 102, 104, 105, 138, 143, 168, 188, 222, 265, 267], "experienc": [7, 89], "ask": [7, 20, 95, 97, 99, 145, 154, 171, 177, 194, 195, 221, 222, 252], "rememb": [7, 47, 56, 79, 109, 112, 119, 121, 160, 161, 168, 171, 183, 195, 198, 252], "dot": [7, 16, 34, 56, 109, 111, 131, 136, 160, 183, 184, 201, 226, 252, 279, 287], "colon": [7, 190], "grab": [7, 9, 56, 101, 176, 181], "readi": [7, 12, 19, 53, 95, 97, 103, 105, 106, 111, 112, 136, 138, 153, 165, 173, 174, 177, 179, 180, 181, 195, 197, 257, 282], "cmake": [7, 227, 241], "websit": [7, 95, 178, 248, 250], "free": [7, 12, 23, 39, 46, 53, 79, 89, 104, 113, 114, 116, 117, 121, 138, 139, 143, 153, 158, 161, 162, 168, 171, 177, 179, 183, 187, 194, 266], "too": [7, 12, 16, 23, 47, 67, 72, 86, 92, 97, 99, 104, 105, 111, 112, 119, 120, 139, 141, 151, 168, 171, 175, 178, 179, 181, 183, 194, 212, 266, 280], "debug": [7, 11, 23, 64, 105, 130, 131, 136, 142, 178, 184, 194, 206, 220, 235, 252, 266, 276, 283, 287], "try": [7, 14, 16, 17, 20, 23, 39, 43, 47, 50, 52, 53, 56, 57, 64, 79, 94, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 119, 140, 143, 144, 145, 146, 154, 159, 161, 165, 168, 171, 173, 174, 175, 177, 178, 183, 187, 191, 192, 194, 198, 201, 205, 213, 222, 240, 241, 251, 252, 264, 265, 282, 285], "support": [7, 13, 16, 17, 19, 20, 22, 23, 27, 34, 40, 50, 55, 60, 62, 63, 79, 87, 89, 94, 95, 96, 97, 98, 99, 102, 103, 104, 113, 114, 115, 116, 119, 130, 135, 136, 137, 138, 139, 140, 143, 148, 150, 151, 153, 154, 157, 159, 162, 169, 171, 173, 174, 175, 176, 177, 179, 180, 181, 187, 190, 192, 194, 197, 200, 203, 204, 207, 209, 210, 212, 213, 214, 216, 217, 218, 219, 221, 222, 227, 228, 229, 230, 231, 232, 234, 239, 240, 241, 242, 244, 245, 246, 247, 249, 250, 252, 257, 267, 271, 276, 278, 281, 282, 283, 285], "cu90": 7, "url": [7, 23, 112, 187, 192, 195, 205, 265], "wget": [7, 22, 197, 205], "nightli": [7, 22, 157, 192, 197, 203, 205, 220, 226, 242, 282], "dep": 7, "latest": [7, 10, 12, 16, 92, 95, 120, 121, 130, 136, 138, 146, 153, 164, 172, 176, 177, 180, 183, 185, 190, 192], "unzip": [7, 23, 54, 190, 197, 281], "tini": [7, 137, 168, 282], "ident": [7, 20, 59, 89, 94, 102, 103, 112, 120, 141, 150, 165, 188, 191, 194, 215, 222, 252], "ey": [7, 160, 171], "fledg": 7, "cmakelist": [7, 241], "cmake_minimum_requir": [7, 241], "fatal_error": [7, 241], "find_packag": [7, 241], "add_execut": [7, 241], "target_link_librari": [7, 241], "set_properti": [7, 241], "cxx_standard": [7, 241], "visual": [7, 16, 46, 56, 79, 86, 87, 97, 103, 133, 136, 138, 142, 143, 148, 158, 177, 187, 190, 206, 207, 214, 235, 257, 265, 271], "studio": [7, 207], "qmake": 7, "makefil": 7, "feel": [7, 12, 23, 39, 46, 53, 104, 113, 114, 116, 117, 121, 138, 158, 159, 161, 162, 168, 187, 194], "comfort": 7, "box": [7, 11, 12, 13, 18, 20, 44, 79, 135, 136, 139, 143, 146, 148, 153, 176, 179, 187, 194, 197, 198, 222, 226, 228, 241, 248, 250, 282], "cmake_prefix_path": 7, "invok": [7, 11, 104, 151, 153, 157, 158, 159, 171, 174, 180, 181, 206, 214, 228, 248, 264, 275, 279, 285], "agre": [7, 286], "break": [7, 8, 11, 12, 13, 18, 23, 35, 36, 86, 94, 99, 113, 121, 139, 140, 146, 168, 179, 181, 192, 201, 212, 281], "unexpect": [7, 55, 214, 267], "pwd": [7, 248], "fa350df05ecf": 7, "home": [7, 43, 52, 212, 227, 238], "mkdir": [7, 112, 187, 190], "cd": [7, 187, 197, 227, 248], "dcmake_prefix_path": [7, 241], "identif": [7, 241], "usr": [7, 22, 153, 241, 283], "bin": [7, 97, 153, 206, 241, 248, 281, 283], "cc": [7, 46, 227, 241, 283], "detect": [7, 13, 14, 22, 56, 99, 133, 136, 176, 184, 187, 192, 194, 241, 254, 267, 280, 285, 287], "pthread_creat": [7, 241], "config": [7, 12, 20, 92, 137, 139, 143, 146, 176, 191, 200, 204, 205, 206, 216, 222, 241, 242, 264, 272, 276, 279, 282, 283], "scan": [7, 97, 99, 190, 194], "50": [7, 20, 23, 56, 57, 97, 112, 154, 162, 175, 177, 178, 181, 197, 219, 222, 240, 242, 267], "cmakefil": 7, "dir": [7, 86, 101, 143, 203, 266, 276], "100": [7, 23, 36, 52, 76, 101, 106, 120, 137, 140, 146, 151, 159, 160, 162, 176, 177, 178, 181, 188, 190, 216, 222, 236, 240, 242, 252, 266, 277], "folder": [7, 23, 54, 56, 86, 87, 95, 97, 138, 188, 197, 203, 227], "enter": [7, 53, 138, 151, 153], "ran": [7, 111, 140, 177, 180, 182, 252], "binari": [7, 53, 56, 102, 114, 153, 162, 192, 213, 220, 232, 241, 281], "me": [7, 20, 53, 168, 183, 222], "besid": [7, 97, 111, 169, 179, 242, 250, 267], "encapsul": [7, 39, 50, 99, 103, 146, 168, 179], "buffer": [7, 16, 47, 50, 121, 138, 139, 147, 151, 155, 157, 161, 165, 168, 169, 170, 171, 175, 178, 194, 201, 203, 204, 224, 227, 233, 256, 269, 270], "form": [7, 14, 17, 20, 44, 50, 53, 56, 64, 105, 112, 114, 142, 145, 159, 183, 190, 198, 205, 217, 222, 224, 233, 234, 248, 267, 277, 285], "record": [7, 11, 23, 34, 46, 53, 112, 121, 130, 136, 137, 138, 146, 147, 148, 168, 177, 178, 180, 181, 194, 220, 242, 257, 282], "normal": [7, 11, 13, 14, 23, 39, 41, 44, 53, 55, 56, 89, 95, 97, 99, 101, 103, 104, 106, 111, 120, 121, 127, 137, 147, 153, 154, 169, 171, 176, 179, 180, 182, 183, 188, 190, 192, 195, 198, 205, 213, 241, 242, 267, 275, 280], "nest": [7, 16, 35, 46, 97, 102, 136, 139, 177, 179, 181, 182, 184, 191, 220, 223, 287], "similarli": [7, 14, 55, 87, 95, 102, 139, 142, 143, 144, 159, 160, 168, 171, 173, 200, 204, 215, 234], "kcuda": [7, 206], "w": [7, 34, 39, 46, 50, 79, 109, 111, 138, 162, 181, 187, 194, 197, 205, 216], "register_paramet": [7, 224], "reflect": [7, 11, 43, 52, 97, 102, 177, 194], "magic": [7, 106, 145, 153, 160], "assign": [7, 44, 48, 50, 57, 95, 99, 102, 104, 105, 106, 109, 111, 113, 139, 153, 169, 177, 195, 236, 248, 264, 267, 285], "behind": [7, 11, 20, 48, 86, 104, 106, 112, 120, 147, 178, 200, 213, 215, 220, 222, 224], "scene": [7, 112, 120, 224, 282], "another_bia": 7, "recurs": [7, 19, 47, 139, 146, 192, 224, 265], "0808": 7, "8613": 7, "2017": [7, 79], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": 7, "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 190], "1230": 7, "0516": 7, "aptli": [7, 15], "register_modul": 7, "dropout": [7, 23, 41, 53, 79, 99, 101, 112, 121, 137, 141, 143, 145, 154, 179, 181, 183, 217, 222, 242], "conv2d": [7, 14, 23, 47, 50, 56, 97, 101, 112, 121, 137, 147, 176, 180, 188, 191, 194, 200, 219, 228, 241, 242, 248, 257, 258, 267], "subtleti": [7, 215], "bodi": [7, 159], "upon": [7, 21, 53, 60, 127, 153, 157, 183, 188, 192, 198, 203, 250, 267, 287], "tree": [7, 12, 17, 105, 111, 220, 235], "p": [7, 22, 23, 53, 72, 99, 105, 111, 112, 120, 137, 138, 147, 153, 162, 165, 168, 179, 180, 181, 191, 197, 222, 227, 228, 232, 283], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": 7, "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 177, 281], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": [7, 101], "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 13, 23, 36, 46, 50, 100, 101, 119, 153, 177, 181, 198, 207, 230, 240, 242, 281, 286, 287], "6861": 7, "1166": 7, "45": [7, 36, 143, 159, 177, 181, 240], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 35, 195], "ordereddict": [7, 197], "13": [7, 36, 97, 119, 160, 181, 190, 198, 240, 248], "48": [7, 20, 100, 101, 159, 162, 177, 188, 222, 240, 257, 287], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": 7, "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": 7, "8060": 7, "topic": [7, 53, 64, 79, 95, 102, 113, 114, 116, 117, 124, 130, 132, 135, 196, 225, 259, 260, 261, 262, 273], "devour": 7, "menu": [7, 54], "concept": [7, 13, 38, 39, 59, 98, 107, 108, 112, 120, 124, 136, 143, 161, 171, 179, 182, 183, 195, 199, 203, 206, 216, 257, 266, 285], "pipelin": [7, 19, 64, 112, 136, 177, 190, 197, 203], "briefli": [7, 39, 64, 136, 141, 177, 192, 198, 228], "who": [7, 53, 79, 104, 107, 140, 153, 168, 194, 199, 234, 248, 252, 277, 281], "heap": 7, "live": [7, 12, 17, 102, 135, 136, 142, 171, 180, 181, 215], "referenc": [7, 181], "lower": [7, 16, 20, 54, 79, 86, 99, 101, 136, 138, 139, 140, 143, 151, 157, 159, 168, 169, 177, 178, 182, 188, 190, 194, 195, 198, 200, 215, 222, 266, 267, 282], "realm": 7, "heavili": [7, 171, 183, 205], "ergonom": 7, "shown": [7, 11, 20, 23, 56, 94, 102, 112, 139, 141, 143, 159, 161, 178, 179, 181, 182, 187, 190, 192, 195, 203, 213, 214, 215, 221, 222, 234, 240, 241, 248, 281, 282, 283, 285, 286], "far": [7, 16, 50, 53, 67, 94, 97, 99, 102, 104, 105, 106, 120, 142, 153, 168, 175, 178, 183, 194, 195, 198, 212, 252], "stack": [7, 11, 16, 17, 43, 52, 97, 119, 136, 141, 155, 160, 161, 165, 171, 174, 179, 183, 187, 188, 190, 195, 198, 203, 283], "shared_ptr": 7, "cognit": 7, "think": [7, 47, 56, 72, 95, 97, 105, 106, 108, 109, 111, 120, 160, 177, 180, 182, 195, 198, 215, 226], "everywher": [7, 102, 111], "make_shar": 7, "stai": [7, 86, 140, 141, 146, 177, 178, 179], "shorten": 7, "wait": [7, 19, 86, 140, 145, 151, 153, 154, 171, 174, 179, 180, 181, 187, 190, 195, 203, 233, 256, 257, 267, 283], "mymodul": [7, 224, 232], "hell": 7, "lot": [7, 11, 12, 17, 23, 55, 94, 105, 112, 137, 139, 153, 165, 180, 183, 187, 192, 195, 205, 212, 251, 252, 266], "came": [7, 56, 213], "scheme": [7, 22, 103, 104, 136, 195, 212, 219, 224, 256, 264], "hide": [7, 147, 177, 226], "reserv": [7, 12, 17, 187, 204], "simplifi": [7, 12, 16, 27, 112, 144, 151, 173, 183, 190, 197, 203, 212, 215, 219, 220, 236], "linearimpl": 7, "torch_modul": 7, "brief": [7, 27, 86, 94, 105, 177, 195, 198], "typedef": 7, "among": [7, 11, 57, 86, 92, 103, 141, 175, 187, 250, 285], "holder": 7, "arrow": [7, 46, 141], "resembl": [7, 14, 105, 149, 178], "extra": [7, 11, 60, 97, 102, 104, 108, 109, 112, 116, 139, 144, 145, 147, 154, 157, 169, 177, 183, 190, 192, 197, 241, 257, 266, 267], "netimpl": 7, "subtl": [7, 102, 251], "deserv": 7, "construct": [7, 16, 34, 50, 56, 69, 71, 89, 104, 120, 127, 131, 136, 139, 145, 148, 154, 155, 160, 166, 170, 177, 178, 180, 183, 195, 197, 198, 217, 220, 224, 226, 240, 242, 251, 254, 269, 286], "tricki": [7, 20, 148, 191, 194, 195, 222], "nullptr": [7, 206], "familiar": [7, 11, 12, 38, 39, 43, 47, 52, 57, 58, 60, 89, 97, 98, 102, 103, 105, 107, 112, 121, 136, 138, 142, 149, 150, 153, 161, 173, 180, 194, 221, 248, 252, 266], "pythonista": 7, "disadvantag": [7, 121], "said": [7, 161, 168, 177, 178, 212, 213], "introduct": [7, 13, 18, 20, 49, 51, 57, 58, 59, 60, 61, 88, 89, 94, 99, 106, 107, 110, 113, 114, 115, 117, 136, 146, 149, 150, 159, 184, 198, 199, 214, 222, 241, 252, 267, 271, 279, 282, 287], "sooner": [7, 138], "technic": [7, 153, 154, 168, 195, 212, 230, 231, 239], "henceforth": 7, "recap": [7, 50, 178, 215, 256], "adversari": [7, 47, 103, 122, 133, 136, 287], "architectur": [7, 20, 35, 56, 60, 79, 89, 99, 104, 105, 134, 136, 138, 141, 143, 149, 155, 165, 171, 173, 175, 182, 188, 190, 192, 198, 216, 219, 222, 241, 248, 251, 267], "repositori": [7, 12, 58, 87, 124, 138, 141, 153, 173, 174, 181, 182, 183, 197, 203, 227], "distinct": [7, 20, 56, 86, 102, 111, 138, 181, 188, 194, 195, 222, 282], "transform": [7, 14, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 53, 56, 92, 94, 95, 97, 101, 102, 103, 119, 122, 131, 132, 133, 136, 137, 139, 153, 154, 155, 157, 159, 161, 165, 168, 169, 176, 180, 183, 184, 187, 188, 190, 191, 197, 201, 205, 217, 219, 222, 240, 241, 242, 252, 254, 264, 266, 267, 272, 275, 279, 282, 287], "probabl": [7, 11, 35, 53, 56, 95, 99, 102, 104, 105, 108, 111, 137, 142, 143, 145, 176, 178, 188, 190, 217, 240], "judg": 7, "closer": [7, 94, 104, 178], "feedback": [7, 23, 138, 158, 161, 162, 204, 220, 239], "authent": 7, "theori": [7, 53, 56, 94, 104, 142, 171], "delic": 7, "tandem": [7, 278], "indistinguish": 7, "fool": [7, 53, 79], "excel": [7, 55, 188, 233], "realist": [7, 198, 217], "2d": [7, 35, 56, 99, 112, 139, 144, 179, 190, 191, 195, 236], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 50, 99, 101, 112, 121, 137, 170, 175, 180, 188, 242, 258], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 50, 99, 101, 112, 121, 137, 180, 188, 242, 258], "pad": [7, 23, 53, 99, 112, 147, 182, 198, 214, 217, 222, 258, 267], "batch_norm2": 7, "conv3": [7, 112], "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 23, 56, 112, 147, 200, 267], "dcgangener": 7, "chosen": [7, 95, 99, 140, 178, 192, 251, 252, 282], "cours": [7, 16, 20, 23, 57, 94, 95, 102, 104, 107, 108, 111, 112, 142, 153, 188, 222, 248], "student": [7, 104], "harm": [7, 104], "discoveri": [7, 194], "fed": [7, 14, 40, 53, 56, 190, 195], "soylent": 7, "regularli": [7, 57], "channel": [7, 12, 14, 23, 46, 47, 50, 56, 95, 97, 99, 102, 104, 112, 131, 136, 141, 175, 184, 188, 191, 197, 232, 241, 254, 267, 287], "moduleopt": 7, "linearopt": 7, "leaki": [7, 56], "squash": [7, 154, 161], "sequenti": [7, 14, 23, 53, 72, 99, 111, 120, 154, 169, 177, 191, 217, 224, 226, 230, 240, 267, 285, 286], "orient": [7, 185], "layer": [7, 11, 12, 13, 14, 15, 17, 19, 20, 23, 34, 40, 41, 46, 50, 53, 56, 59, 64, 72, 79, 92, 94, 97, 101, 102, 103, 104, 106, 112, 120, 121, 127, 135, 136, 137, 138, 139, 143, 144, 145, 146, 154, 162, 169, 173, 175, 176, 177, 180, 181, 183, 185, 194, 195, 197, 201, 205, 216, 219, 222, 230, 231, 232, 235, 239, 240, 250, 251, 254, 256, 258, 264, 268, 269, 272], "conv2dopt": 7, "leakyrelu": [7, 56], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 69, 120, 148], "knob": [7, 285], "sampler": [7, 23, 36, 59, 103, 137, 138, 177, 185], "collat": [7, 55], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 13, 22, 53, 56, 57, 59, 64, 137, 151, 153, 179, 180, 181, 203, 232, 233, 234, 286], "concurr": [7, 119, 141, 143, 171, 201, 233, 267, 285], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 188, 190], "label": [7, 36, 39, 40, 44, 46, 47, 55, 56, 79, 92, 94, 95, 97, 101, 102, 103, 106, 111, 119, 127, 138, 141, 144, 151, 171, 176, 179, 183, 188, 195, 197, 222, 242, 248, 252, 254, 257, 271, 282, 286], "field": [7, 12, 13, 16, 17, 35, 53, 99, 109, 111, 133, 153, 168, 177, 179, 187, 194, 197, 203, 214], "rebuild": [7, 252], "danc": [7, 14], "generator_optim": 7, "adamopt": 7, "2e": [7, 94], "beta": [7, 21, 130, 131, 136, 184, 215, 271, 274, 287], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 103, 120, 215, 220, 223, 287], "lbfg": [7, 14], "rmsprop": [7, 39, 50, 73, 106, 120], "sgd": [7, 23, 39, 46, 47, 50, 71, 73, 92, 101, 103, 106, 112, 120, 121, 151, 153, 179, 180, 181, 185, 188, 241, 242, 269, 270, 275], "exhaust": [7, 13, 194], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 251], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 8, 187], "g_loss": 7, "printf": 7, "r": [7, 13, 16, 23, 39, 46, 50, 79, 89, 105, 133, 136, 159, 160, 161, 162, 165, 178, 179, 181, 190, 197, 226, 241, 252, 267, 285], "2ld": 7, "3ld": 7, "4f": [7, 137, 138, 160, 177], "batches_per_epoch": 7, "evalu": [7, 14, 20, 23, 27, 39, 41, 79, 94, 95, 101, 104, 114, 121, 146, 160, 165, 173, 177, 178, 180, 188, 192, 194, 197, 222, 242, 282], "uniformli": [7, 92, 178, 267], "robust": [7, 53, 57, 58, 79, 102, 140, 178, 240], "smooth": [7, 104, 113, 190], "propag": [7, 12, 19, 34, 39, 46, 48, 50, 56, 104, 108, 109, 112, 148, 157, 162, 177, 267], "repeat": [7, 16, 22, 23, 94, 144, 145, 177, 187, 194, 201, 212, 232, 257, 266, 272, 283], "spiel": 7, "ideal": [7, 16, 36, 94, 97, 102, 104, 171, 183, 194, 228, 277], "progress": [7, 11, 17, 27, 56, 57, 101, 103, 154, 183, 188, 203, 216, 234], "yet": [7, 12, 13, 22, 54, 79, 94, 97, 102, 116, 117, 146, 153, 171, 180, 183, 195, 200, 217, 234, 241, 282], "moment": [7, 13, 200, 215, 227], "observ": [7, 16, 23, 50, 55, 86, 103, 127, 137, 138, 143, 146, 154, 161, 162, 168, 171, 177, 178, 179, 181, 182, 183, 192, 198, 200, 215, 219, 230, 240, 251, 252, 258, 264, 271, 272, 283, 286], "meaning": [7, 53, 104, 162, 203], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 138, 181, 240, 252, 266], "3652": 7, "6626": 7, "400": [7, 50, 121, 252, 258, 266, 282], "8057": 7, "2795": [7, 252], "3531": 7, "4452": 7, "600": [7, 162, 178], "3501": 7, "0811": [7, 112], "700": 7, "3581": 7, "5623": 7, "800": [7, 122], "6423": 7, "7385": 7, "900": [7, 177], "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 38, 47, 86, 104, 105, 106, 111, 112, 120, 141, 168, 178, 183, 199, 203, 242], "onto": [7, 11, 16, 19, 22, 47, 99, 101, 102, 136, 154, 168, 180, 181, 195, 203, 224, 267], "somewher": [7, 99, 105, 106, 121], "kcpu": [7, 206, 227], "last": [7, 13, 16, 23, 35, 46, 53, 56, 57, 79, 87, 89, 92, 97, 99, 102, 103, 106, 109, 114, 127, 131, 136, 141, 142, 145, 153, 154, 159, 168, 177, 178, 179, 181, 182, 183, 184, 188, 194, 197, 212, 215, 217, 219, 241, 251, 267, 282, 287], "whose": [7, 86, 89, 94, 95, 104, 111, 138, 142, 162, 171, 190, 250, 252], "insert": [7, 14, 20, 23, 99, 181, 194, 200, 219, 222], "explicit": [7, 8, 136, 139, 162, 171, 181, 194, 198, 213, 221, 248, 251, 271, 274, 279, 287], "suppli": [7, 108, 162, 176], "op": [7, 8, 12, 13, 17, 52, 86, 117, 130, 136, 137, 138, 139, 141, 146, 147, 151, 153, 159, 162, 176, 187, 198, 200, 205, 206, 213, 214, 216, 217, 224, 228, 232, 239, 242, 251, 256, 271, 283], "previou": [7, 13, 16, 17, 19, 20, 39, 53, 57, 59, 102, 103, 104, 112, 117, 127, 138, 139, 140, 144, 145, 148, 149, 150, 154, 161, 168, 171, 173, 175, 177, 178, 179, 181, 182, 183, 187, 188, 190, 192, 194, 195, 222, 228, 252, 258, 267, 282], "resid": [7, 104, 171], "downstream": [7, 190], "portabl": [7, 277], "augment": [7, 27, 55, 112, 127, 133, 136, 185, 194, 197], "period": [7, 53, 56, 140, 143, 161, 187, 203], "middl": 7, "procedur": [7, 50, 132, 178, 185], "restor": [7, 79, 121, 151, 162, 269], "session": [7, 104, 114], "essenti": [7, 12, 16, 18, 34, 53, 105, 106, 108, 136, 146, 153, 166, 171, 178, 194, 199, 219, 224, 242, 285], "deseri": [7, 121], "filenam": [7, 112, 119, 190, 203, 251, 283], "interv": [7, 16, 94, 143, 181], "kcheckpointeveri": 7, "pt": [7, 57, 121, 137, 138, 139, 227, 241, 242, 277], "str": [7, 8, 22, 23, 87, 138, 173, 177, 180, 190, 194, 285], "checkpoint_count": 7, "counter": [7, 13, 53, 56, 146, 153, 191, 279], "bump": 7, "beta1": [7, 56], "krestorefromcheckpoint": 7, "intermediari": [7, 142], "xxx": [7, 17, 55], "matplotlib": [7, 14, 36, 56, 61, 94, 95, 97, 101, 112, 177, 178, 183, 188, 190], "argpars": [7, 137, 138, 179, 180, 181], "pyplot": [7, 14, 36, 101, 112, 177, 188, 190], "plt": [7, 14, 36, 101, 177, 183, 188, 190], "parser": [7, 105, 137, 138, 179, 180, 181], "argumentpars": [7, 137, 138, 179, 180, 181], "add_argu": [7, 137, 138, 179, 180, 181], "png": [7, 55, 136, 197], "parse_arg": [7, 137, 138, 179, 180, 181], "jit": [7, 8, 11, 17, 23, 89, 192, 227, 228, 241, 252, 257, 272, 279, 281, 282, 283], "sample_fil": 7, "mul": [7, 146, 159, 194, 227, 252, 266], "uint8": [7, 197], "numpi": [7, 14, 18, 21, 23, 44, 47, 55, 61, 75, 77, 78, 94, 101, 112, 114, 119, 135, 136, 148, 176, 181, 188, 190, 192, 212, 217, 220, 222, 250, 266, 282, 287], "axi": [7, 36, 86, 108, 109, 144, 171, 175, 190], "subplot": [7, 177], "imshow": [7, 14, 36, 101, 112, 188, 190], "cmap": [7, 36, 101, 112, 188], "grai": [7, 36, 112, 161], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "17": [7, 36, 76, 97, 101, 119, 159, 177, 194, 240, 252, 283], "57": [7, 20, 36, 119, 159, 177, 257], "4953": 7, "0195": 7, "3610": [7, 112], "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 50, 101, 121, 127, 181, 188, 257, 258], "8084": 7, "hoorai": 7, "ball": 7, "court": 7, "hopefulli": [7, 54, 55, 79, 89, 106, 121, 268], "digest": [7, 266], "necess": [7, 53, 101], "broad": [7, 61, 95, 103], "did": [7, 11, 18, 23, 47, 56, 94, 97, 99, 102, 114, 140, 153, 157, 169, 177, 180, 183, 195, 203, 252], "space": [7, 16, 53, 56, 79, 94, 95, 99, 104, 105, 109, 111, 143, 154, 161, 168, 171, 177, 178, 181, 183, 187, 188, 190, 195, 198, 204], "consult": [7, 168, 250], "stuck": [7, 220], "whenev": [7, 57, 71, 102, 105, 106, 228, 270], "rate": [7, 39, 46, 56, 92, 97, 99, 103, 104, 106, 112, 127, 137, 138, 143, 144, 161, 177, 178, 180, 195, 197, 203, 265, 267], "statu": [8, 27, 140, 143, 146, 181, 194, 281], "subject": [8, 13, 16, 137, 157, 183, 194, 216, 217, 219, 226, 227, 228, 232, 239, 252, 281], "snapshot": [8, 136, 149, 194], "__obj_flatten__": 8, "guard": [8, 11, 151, 231, 283], "tupl": [8, 36, 43, 52, 86, 97, 99, 102, 104, 109, 111, 114, 178, 194, 197, 201, 215, 266], "attribute_nam": 8, "_librari": 8, "register_fake_class": 8, "addition": [8, 13, 14, 39, 86, 142, 143, 151, 171, 194, 197, 203, 221, 233, 234, 276, 285], "__obj_unflatten__": 8, "classmethod": 8, "flatten": [8, 50, 72, 104, 112, 120, 137, 141, 180, 194, 217, 240, 258], "breakdown": [8, 187], "diff": [8, 57, 59, 86, 136, 252, 266], "queue": [8, 248, 267], "custom_class": 8, "tensorqueu": 8, "customclasshold": 8, "init_tensor_": 8, "c10": [8, 11, 12, 17, 174, 206, 216, 240, 241, 252, 266], "dict": [8, 22, 53, 55, 168, 177, 194, 197, 233, 234, 239, 251, 256], "init_tensor": 8, "size_tensor": 8, "size_tensor_acc": 8, "const_data_ptr": 8, "queue_siz": 8, "irang": 8, "val": [8, 20, 23, 138, 176, 222], "queue_": 8, "to_str": 8, "push_back": [8, 241], "push": [8, 56, 79, 99, 104, 160, 205, 226], "rear": 8, "lock_guard": 8, "mutex": 8, "mutex_": 8, "pop": [8, 99, 222], "front": [8, 155, 175, 194], "pop_front": 8, "get_raw_queu": 8, "raw_queu": 8, "privat": [8, 16, 17, 140, 174, 175, 212], "dequ": 8, "mycustomclass": 8, "class_": 8, "init": [8, 23, 140, 177, 221, 224, 283], "clone": [8, 13, 58, 102, 144, 148, 149, 153, 159, 160, 162, 173, 201, 282], "2a": 8, "class_nam": [8, 127, 190], "faketensorqueu": 8, "2b": [8, 46], "cl": [8, 14, 207], "flattened_tq": 8, "libcustom_class": 8, "tq": 8, "mod": [8, 192, 194, 282], "sin": [8, 16, 18, 66, 67, 71, 72, 73, 76, 77, 94, 102, 120, 160, 207, 267, 277], "co": [8, 94, 111, 207, 257, 267], "poped_t": 8, "allclos": [8, 159, 160, 201, 222], "eager": [8, 12, 89, 91, 146, 159, 162, 182, 192, 194, 198, 219, 230, 239, 242, 267, 280, 282], "fullgraph": [8, 18, 146, 192, 230, 279], "exported_program": [8, 121, 282], "strict": [8, 121, 190, 213, 241, 268], "for_each_add_": 8, "inc": 8, "add_": [8, 102, 194, 212, 227], "torch_library_frag": 8, "__torch__": 8, "intrusive_ptr": [8, 174, 252, 266], "fake_for_each_add_": 8, "foreachadd": 8, "scriptobject": 8, "empty_tensor_queu": 8, "qlen": 8, "ep": [8, 147, 181, 194, 200, 212, 222, 282], "downsid": [8, 157, 171], "consum": [8, 116, 119, 142, 159, 171, 177, 179, 181, 182, 257, 267], "difficult": [8, 105, 160, 169, 183, 195, 214, 226, 239], "parti": [8, 11, 18, 130, 139, 140, 174], "fakif": 8, "tracing_mod": 8, "alias": [8, 11, 12, 194], "torchbind": 8, "vmap": [9, 11, 131, 136, 157, 160, 165, 170, 220, 223, 287], "oppos": [9, 53, 56, 127, 153, 160, 165, 180, 252], "treat": [9, 18, 94, 111, 170, 179, 192, 194, 195], "opaqu": [9, 18, 266, 279], "callabl": [9, 18, 44, 55, 112, 187, 192, 194, 250, 279], "aotinductor": [9, 130, 194, 271, 274, 279, 282, 287], "toe": 9, "registr": [9, 11, 12, 17, 18, 241, 242, 248], "doesn": [9, 11, 12, 15, 18, 20, 64, 106, 108, 111, 112, 142, 160, 162, 171, 175, 190, 192, 194, 200, 205, 212, 222, 226, 230, 231, 239, 266, 267, 278, 282, 283, 285], "pybind": 9, "ed": [9, 281], "respons": [11, 13, 19, 22, 53, 94, 95, 103, 112, 135, 136, 141, 147, 151, 153, 179, 180, 183, 192, 194, 230, 232, 250], "nontrivi": 11, "cross": [11, 15, 47, 56, 97, 99, 103, 141, 143, 267, 270, 285], "cut": [11, 173, 194], "concern": [11, 106, 195, 212, 242], "rule": [11, 34, 46, 50, 94, 102, 109, 142, 155, 160, 169, 170, 177, 178, 194, 251], "convers": [11, 53, 94, 102, 162, 183, 212, 239, 264], "highest": [11, 23, 47, 53, 101, 140, 145, 178, 190, 192, 267], "prioriti": [11, 140], "transfer": [11, 21, 47, 55, 104, 112, 121, 122, 133, 136, 153, 171, 176, 180, 187, 197, 204, 227, 253, 268, 287], "redispatch": 11, "unlik": [11, 14, 20, 95, 102, 104, 120, 141, 142, 157, 162, 183, 191, 194, 221, 222, 279, 285], "style": [11, 141, 173, 194, 197, 234], "abid": [11, 56], "myop": 11, "myadd": [11, 12], "myadd_cpu": 11, "self_": 11, "other_": 11, "self_ptr": 11, "other_ptr": 11, "catch": [11, 13, 192, 194, 241, 280], "myadd_cuda": 11, "boundari": [11, 139, 177, 276], "myops_cpu": 11, "myops_cuda": 11, "subdivid": 11, "xla": [11, 12, 17, 264], "torch_xla": [11, 12], "useabl": 11, "behav": [11, 18, 102, 112, 162, 169, 179, 248], "autogradnotimplementedfallback": 11, "notimpl": 11, "node": [11, 22, 34, 46, 50, 57, 58, 59, 60, 64, 66, 94, 101, 105, 117, 120, 132, 138, 139, 140, 144, 146, 149, 150, 151, 158, 159, 180, 183, 194, 201, 206, 219, 236, 267, 283, 285], "preserv": [11, 20, 102, 131, 136, 139, 162, 175, 213, 219, 222, 264, 269], "require_grad": 11, "ness": 11, "pin": [11, 103, 142, 171, 267], "lost": [11, 20, 222], "adinplaceorview": [11, 283], "bookkeep": [11, 252], "autogradnotimplementedinplaceorviewfallback": 11, "logi": 11, "annot": [11, 12, 22, 36, 55, 106, 117, 190, 192, 194, 252], "guess": [11, 39, 46, 53, 56, 144, 183], "twist": 11, "constitut": [11, 16], "hood": [11, 23, 53, 56, 58, 60, 64, 120, 141, 142, 160, 161, 171, 181, 215, 232, 235], "singleton": [11, 180], "findschemaorthrow": 11, "decltyp": 11, "qualifi": [11, 234], "overload": 11, "typic": [11, 13, 16, 23, 36, 46, 50, 52, 58, 59, 86, 97, 105, 106, 111, 139, 141, 143, 147, 149, 159, 168, 171, 177, 180, 190, 192, 194, 195, 239, 240, 241, 242, 251, 253, 267, 272, 282, 285], "cast": [11, 20, 22, 77, 119, 138, 139, 171, 194, 222, 251], "lookup": [11, 19, 111, 146, 181], "typo": 11, "myaddfunct": [11, 12], "autononvariabletypemod": [11, 12], "myadd_autograd": [11, 12], "except": [11, 13, 20, 43, 46, 52, 53, 56, 95, 99, 102, 106, 109, 112, 113, 127, 139, 140, 144, 155, 157, 160, 162, 170, 174, 183, 194, 204, 217, 220, 222, 224, 226, 227, 241, 258, 276, 282], "raii": 11, "infinit": 11, "overflow": [11, 53, 205, 251], "send": [11, 12, 13, 14, 47, 48, 64, 92, 153, 161, 171, 173, 174, 179, 180, 181, 195, 232, 257], "exclud": [11, 46, 139, 192, 219, 257], "consider": [11, 12, 137, 194, 195, 282], "handler": [11, 190, 264, 283], "autogradcpu": 11, "autogradcuda": [11, 283], "pythondispatch": 11, "_python_dispatch": 11, "isn": [11, 94, 105, 157, 171, 176, 188, 194, 195, 214, 252, 254, 268, 269], "glorifi": 11, "add_cpu": 11, "add_cuda": 11, "unsupport": [11, 113, 117, 130, 136, 192, 194, 282], "decentr": 11, "importantli": [11, 23, 148, 168, 171, 212, 252], "aspect": [11, 17, 79, 153, 197, 252], "patch": [11, 12, 178], "dispatchkei": [11, 12], "varieti": [11, 27, 35, 53, 94, 95, 99, 103, 112, 121, 145, 171, 198, 215, 285], "fallback": [11, 12, 17, 113, 198], "opt": [11, 112, 143, 162, 174, 180, 181, 187, 205, 224, 230, 283], "amp": [11, 17, 64, 139, 162, 216, 228, 241, 271, 275], "incom": [11, 97, 187], "float16": [11, 17, 138, 162, 228, 251], "float32": [11, 16, 138, 139, 176, 177, 181, 201, 206, 216, 251, 264, 283], "matmul": [11, 141, 159, 194, 205, 217, 222, 226, 228, 240, 251], "impair": 11, "converg": [11, 39, 53, 56, 67, 103, 104, 120, 121, 141, 153, 169, 178, 183, 231, 251, 268, 271], "hypothet": 11, "autocast_mod": 11, "mymatmul_autocast": 11, "excludedispatchkeyguard": 11, "no_autocast": 11, "mymatmul": 11, "cached_cast": 11, "khalf": 11, "elig": [11, 267], "polici": [11, 17, 133, 136, 137, 139, 161, 178, 179, 181, 184, 285, 287], "mixtur": [11, 239], "meanwhil": [11, 142, 159, 213, 241], "float64": 11, "unaffect": [11, 104], "forc": [11, 16, 20, 53, 99, 136, 183, 192, 198, 212, 214, 222, 251, 267, 276], "fallthrough": 11, "occur": [11, 13, 18, 23, 57, 86, 104, 159, 162, 171, 179, 180, 187, 190, 194, 195, 203, 205, 235, 257, 278], "fall": [11, 17, 95, 169, 178, 280], "unfortun": [11, 120, 153, 194], "aren": [11, 148, 154, 194, 195, 214, 267, 270], "dri": [11, 187], "guidanc": [11, 140, 199, 251, 285], "reduct": [11, 102, 137, 138, 139, 142, 147, 168, 174, 187, 190, 198, 212, 214, 220, 251, 267], "gemm": [11, 159, 216, 240], "unless": [11, 43, 52, 102, 106, 113, 177, 194, 205, 226, 256], "categori": [11, 12, 23, 79, 86, 95, 102, 127, 144, 145, 187, 194], "promote_typ": 11, "widest": 11, "safest": 11, "my_multiple_input_op_autocast": 11, "t0": [11, 138, 230, 252], "t1": [11, 252], "optimist": 11, "exec_typ": 11, "my_multiple_input_op": 11, "myadd_autocast": 11, "gymnast": 11, "suitabl": [11, 44, 149, 153, 190, 266], "invoc": [11, 158, 179, 248, 272, 278], "stabil": [11, 104, 178], "41478": 11, "repo": [12, 17, 22, 23, 58, 86, 135, 136, 149, 153, 171, 179, 180, 195, 204, 205, 242], "mainten": [12, 190], "solut": [12, 20, 56, 113, 121, 130, 136, 159, 170, 171, 190, 192, 195, 214, 217, 222, 235, 252, 267, 271, 277], "pr": [12, 188, 198, 241, 266], "propos": [12, 27, 141, 154, 169, 212, 214, 235], "request": [12, 34, 46, 92, 102, 112, 138, 169, 176, 179, 180, 206, 214, 215, 216, 221, 232, 233], "hardwar": [12, 17, 20, 43, 52, 54, 102, 104, 114, 144, 153, 155, 160, 162, 170, 171, 174, 175, 195, 198, 205, 222, 228, 240, 241, 242, 253, 267, 275, 279, 282], "googl": [12, 20, 27, 38, 53, 56, 101, 112, 136, 153, 154, 177, 178, 187, 195, 285], "tpu": [12, 174, 270], "chip": 12, "layout": [12, 20, 141, 198, 212, 215, 217, 220, 222, 236, 267], "spars": [12, 19, 99, 106, 111, 136, 154, 175, 195, 198, 214, 220, 223, 264, 287], "quantiz": [12, 104, 127, 131, 134, 168, 223, 228, 255, 264, 271, 287], "enforc": [12, 16, 143, 169, 212, 213], "mainli": [12, 16, 17, 22, 159, 187, 192, 219, 242, 281], "haven": [12, 92, 94, 97, 102, 105, 109, 111, 155, 158, 170], "identifi": [12, 20, 36, 57, 59, 79, 86, 87, 95, 112, 119, 150, 161, 162, 166, 175, 180, 194, 197, 203, 215, 222, 235, 282], "carri": [12, 16, 53, 56, 94, 102, 104, 108, 149, 154, 162, 183, 256], "privateuse1": [12, 135, 136, 221], "autogradprivateuse1": [12, 17], "privateuse2": [12, 17], "autogradprivateuse2": [12, 17], "privateuse3": [12, 17], "autogradprivateuse3": [12, 17], "tensorimpl": [12, 17, 252, 266], "storag": [12, 17, 18, 103, 108, 121, 142, 154, 155, 162, 171, 177, 187, 203, 212, 214, 215, 220, 223, 224, 233, 234, 251, 256, 264, 287], "dispatchkeyset": [12, 17, 283], "k": [12, 14, 23, 86, 95, 105, 141, 179, 180, 182, 203, 216, 222], "caffe2": [12, 89], "typemeta": 12, "data_typ": [12, 108], "opaquetensorimpl": 12, "tweak": [12, 53, 270], "overrid": [12, 17, 55, 97, 106, 140, 158, 162, 174, 190, 271, 278], "vulkan": 12, "submit": [12, 241], "src": [12, 13, 117, 153, 174, 227, 266], "registrationdeclar": 12, "snippet": [12, 137, 138, 140, 146, 153, 159, 174, 182, 201, 204, 212, 216, 221, 236, 251, 256, 267, 271], "ab": [12, 192, 217, 228, 257], "abs_": 12, "abs_out": 12, "absolute_": 12, "absolute_out": 12, "angl": [12, 16, 111], "angle_out": 12, "sgn": 12, "uniqu": [12, 20, 53, 57, 59, 105, 106, 107, 109, 111, 138, 150, 180, 183, 195, 197, 212, 222, 282], "boolean": [12, 154, 194], "impli": [12, 104, 109, 194, 233, 256, 266, 279], "schema_my_op1": 12, "my_op1": 12, "schema_my_op2": 12, "my_op2": 12, "schema_my_op2_backward": 12, "my_op2_backward": 12, "zoom": [12, 86, 101, 143, 187, 190], "1600": [12, 252, 266], "grow": [12, 53, 106, 140, 142, 149, 233], "unrealist": 12, "classifi": [12, 14, 23, 27, 35, 46, 49, 50, 51, 56, 61, 79, 86, 92, 97, 99, 104, 121, 127, 130, 136, 139, 145, 161, 166, 183, 184, 197, 198, 250, 271, 282, 287], "accompani": 12, "comment": [12, 153, 168, 183, 212, 226, 241, 242, 253], "sacrif": [12, 175], "max_pool2d": [12, 50, 137, 180, 227, 242, 257], "worri": [12, 56, 106, 148, 151, 168, 181, 236], "my_op": 12, "squeez": [12, 16, 36, 102, 188, 205], "max": [12, 13, 23, 53, 56, 86, 99, 112, 137, 143, 153, 177, 188, 190, 194, 198, 205, 217, 220, 222, 267, 282, 285, 286], "op_backward": 12, "proper": [12, 34, 138, 141, 151, 162, 177, 181, 190, 195, 212, 267], "rare": [12, 17, 53, 127, 171, 183, 267], "assumpt": [12, 16, 79, 104, 111, 112, 165, 171], "myadd_schema": 12, "train": [12, 14, 19, 20, 22, 34, 38, 39, 40, 44, 46, 49, 50, 51, 55, 58, 60, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 95, 96, 98, 99, 102, 104, 105, 107, 109, 111, 112, 114, 120, 130, 131, 132, 133, 136, 137, 139, 140, 143, 146, 147, 151, 162, 163, 165, 166, 169, 170, 173, 174, 176, 179, 180, 181, 182, 184, 187, 190, 191, 192, 194, 197, 201, 203, 204, 214, 222, 228, 230, 231, 233, 234, 235, 236, 251, 254, 257, 265, 268, 269, 271, 272, 282, 286, 287], "my_add": 12, "_xlac": 12, "torch_xla_sourc": 12, "library_dir": 12, "extra_link_arg": 12, "make_relative_rpath": 12, "seamlessli": [12, 16, 57, 141, 195, 198, 252, 277], "nm": [12, 241], "torchvsion": 12, "torchvis": [12, 14, 23, 36, 38, 40, 44, 46, 47, 54, 61, 92, 95, 97, 98, 101, 103, 104, 127, 133, 136, 137, 138, 158, 168, 176, 179, 180, 184, 187, 188, 190, 192, 205, 219, 227, 241, 242, 257, 265, 267, 270, 275, 281, 282, 287], "adhoc": 12, "unbox": 12, "potenti": [12, 16, 79, 94, 105, 138, 140, 146, 171, 180, 192, 194, 197, 203, 219, 220, 277, 279], "wiki": [12, 157], "suit": [12, 95, 119, 177, 216, 240], "ship": [12, 47, 97], "delet": [12, 87, 142, 151, 168, 173, 181, 190, 205], "old": [12, 23, 121, 140, 175, 187, 217], "until": [12, 53, 86, 94, 138, 140, 144, 145, 153, 154, 159, 168, 171, 177, 179, 180, 181, 187, 201, 212, 232, 252], "interrupt": [12, 57, 92, 183], "quarterli": 12, "cadenc": 12, "join": [12, 22, 36, 43, 52, 53, 54, 57, 132, 137, 144, 151, 153, 177, 179, 180, 181, 203, 232, 233, 234, 252, 286], "announc": 12, "slack": [12, 47], "com": [12, 22, 23, 53, 112, 117, 137, 144, 145, 147, 183, 191, 197, 205, 227, 250, 252, 282], "Not": [12, 151, 176, 286], "search": [12, 22, 53, 134, 136, 143, 159, 175, 194, 205, 285], "instantiate_device_type_test": 12, "testtorchdevicetyp": 12, "testviewop": 12, "testtensordeviceop": 12, "testtypepromot": 12, "__reduce_ex__": 12, "monkei": 12, "direct": [12, 34, 46, 50, 56, 79, 94, 95, 97, 103, 111, 143, 153, 157, 161, 165, 169, 183, 204, 205, 215, 233, 271, 280], "suppos": [12, 104, 105, 106, 111, 137, 192, 197, 200, 221, 241], "vice": [12, 43, 52], "versa": [12, 43, 52], "Such": [12, 13, 94], "seamless": [12, 195, 220, 235], "coverag": [12, 157, 160, 162, 217, 219, 251], "comprehens": [12, 27, 43, 52, 95, 117, 159, 194, 239, 266, 267], "refactor": [12, 121, 149], "codegen": [12, 159, 283], "dev": [12, 106, 146, 176, 187, 190, 192, 220, 248, 251], "andrew": [13, 200], "gu": 13, "shard": [13, 132, 136, 149, 201, 232, 234, 235, 236, 271], "saw": [13, 16, 39, 53, 97, 99, 102, 106, 108, 157, 160, 161], "skeleton": [13, 16, 264], "implicitli": [13, 46, 53, 94, 137, 148, 182, 194, 248], "schedul": [13, 86, 92, 103, 127, 130, 137, 138, 139, 151, 173, 177, 178, 187, 197, 257, 267, 271, 274, 285, 287], "rank": [13, 19, 22, 48, 57, 59, 86, 131, 136, 137, 138, 139, 140, 151, 153, 173, 174, 179, 180, 181, 195, 201, 203, 217, 232, 233, 234, 236, 285, 286], "commun": [13, 17, 22, 59, 136, 137, 138, 139, 141, 143, 149, 150, 151, 173, 174, 177, 179, 180, 181, 187, 190, 194, 195, 201, 203, 207, 220, 235, 236, 267, 271], "particip": [13, 99, 150, 180, 251, 267], "hang": [13, 59, 145], "persist": [13, 41, 233, 251], "facilit": [13, 16, 53, 95, 102, 104, 121, 135, 136, 139, 141, 154, 217, 221, 267], "earli": [13, 56, 92, 151, 153, 171, 200, 214, 239], "shadow": 13, "hook": [13, 139, 141, 146, 151, 175, 184, 258, 283, 287], "mp": [13, 17, 35, 40, 43, 57, 59, 66, 79, 102, 120, 127, 136, 137, 138, 151, 153, 179, 180, 181, 232, 233, 234, 286], "ddp": [13, 19, 57, 58, 64, 136, 137, 138, 139, 141, 150, 187, 236, 286], "nccl": [13, 22, 57, 59, 86, 137, 138, 140, 141, 151, 153, 187, 195, 201, 203, 234, 236], "world_siz": [13, 19, 22, 57, 59, 137, 138, 140, 151, 153, 173, 174, 179, 180, 181, 201, 203, 232, 233, 234, 236, 286], "num_input": 13, "master_addr": [13, 22, 57, 59, 137, 140, 151, 153, 174, 179, 180, 181, 203, 232, 233, 234, 286], "localhost": [13, 22, 57, 59, 101, 137, 140, 151, 174, 179, 180, 181, 187, 188, 195, 232, 233, 234, 236, 265, 276, 286], "master_port": [13, 22, 57, 59, 137, 140, 151, 153, 174, 179, 180, 181, 203, 232, 233, 234, 286], "29500": [13, 22, 153, 174, 179, 180, 181, 232, 286], "init_process_group": [13, 19, 22, 57, 59, 137, 138, 140, 151, 153, 173, 174, 201, 203, 233, 234, 236, 286], "device_id": [13, 59, 121, 138, 139, 151, 286], "nproc": [13, 57, 59, 137, 151, 179, 181, 201, 232, 233, 234, 286], "__name__": [13, 55, 57, 59, 137, 138, 140, 151, 153, 173, 179, 180, 181, 201, 232, 233, 234, 248, 283, 286], "__main__": [13, 55, 57, 59, 137, 138, 151, 153, 173, 179, 180, 181, 201, 232, 233, 234, 248, 252, 283, 286], "arbitrarili": [13, 53, 104, 258], "prior": [13, 17, 23, 54, 56, 94, 99, 104, 151, 161, 175, 188, 198, 232, 234], "togeth": [13, 20, 35, 41, 53, 55, 64, 89, 97, 99, 102, 103, 104, 108, 112, 137, 139, 147, 151, 154, 155, 171, 179, 181, 183, 190, 198, 222, 266, 279], "examin": [13, 86, 94, 95, 101, 103, 104, 153, 158, 171, 195], "lr": [13, 23, 50, 56, 92, 97, 101, 112, 121, 127, 130, 137, 138, 139, 151, 153, 159, 161, 177, 178, 179, 180, 181, 188, 230, 233, 234, 241, 242, 271, 274, 275, 286, 287], "notabl": [13, 23, 92, 264], "divide_by_initial_world_s": 13, "world": [13, 16, 22, 40, 58, 94, 102, 106, 141, 153, 158, 161, 174, 178, 179, 180, 194, 195, 203, 217, 233, 234, 236, 240], "nonetheless": [13, 104], "mind": [13, 43, 53, 56, 89, 104, 150, 165], "preliminari": [13, 153], "delv": [13, 159, 279], "insight": [13, 79, 86, 135, 153, 182, 252, 266], "join_hook": 13, "kwarg": [13, 121, 139, 158, 162, 177, 180, 194, 195, 216, 217, 224, 230, 282, 283], "join_devic": 13, "join_process_group": 13, "processgroup": [13, 19, 22, 64, 132, 136, 141, 181, 195, 203, 236, 267], "throw_on_early_termin": 13, "explain": [13, 14, 20, 46, 50, 56, 79, 95, 106, 112, 140, 141, 159, 192, 194, 206, 216, 219, 222, 257, 277, 282], "joinconfig": 13, "_join_config": 13, "main_hook": 13, "repeatedli": [13, 99, 177, 181, 204], "post_hook": 13, "is_last_join": 13, "broadcast": [13, 72, 112, 120, 139, 151, 153, 174, 194, 266, 286], "vacuou": 13, "contextlib": [13, 190], "nullcontext": 13, "conform": [13, 190], "interleav": [13, 201], "syncbatchnorm": [13, 59], "proce": [13, 104, 106, 159, 194, 203, 267], "__exit__": 13, "heartbeat": 13, "notify_join_context": 13, "serializ": 13, "fulli": [13, 14, 16, 17, 38, 50, 64, 86, 92, 97, 98, 99, 112, 127, 132, 136, 143, 146, 149, 162, 165, 178, 180, 182, 187, 214, 222, 228, 234, 239, 241, 254], "proceed": [13, 50, 104, 117, 171], "overlap": [13, 60, 137, 138, 139, 144, 149, 151, 171, 187, 190, 201, 267], "moreov": [13, 171, 212, 241, 252], "permit": [13, 251], "customiz": [13, 154], "idea": [13, 27, 79, 89, 104, 106, 107, 108, 111, 120, 141, 147, 154, 159, 169, 178, 181, 183, 212, 226, 232, 248, 252, 267, 285, 286], "counterjoinhook": 13, "sync_max_count": 13, "all_reduc": [13, 64, 137, 138, 153, 174, 203, 235], "get_rank": [13, 139, 151, 153], "process_group": [13, 203, 236], "common_rank": 13, "find_common_rank": 13, "max_count": 13, "__call__": [13, 55, 175, 283], "meth": [13, 16], "to_consid": 13, "reduceop": [13, 137, 138, 153], "device_count": [13, 57, 59, 92, 102, 137, 151, 233, 234, 236], "highlight": [13, 53, 89, 113, 124, 132, 138, 139, 182, 187, 192, 194, 195, 232, 241, 242, 279], "alexi": 14, "jacq": 14, "winston": 14, "her": [14, 174], "leon": 14, "gati": 14, "alexand": [14, 219], "ecker": 14, "matthia": 14, "bethg": 14, "artist": 14, "distanc": [14, 66, 67, 71, 72, 73, 76, 77, 94, 104, 120], "d_c": 14, "d_": 14, "indispens": [14, 177], "pil": [14, 44, 55, 176, 190, 197], "pretrain": [14, 27, 46, 79, 95, 111, 127, 136, 176, 183, 190, 219, 227, 241, 242, 281, 282], "longer": [14, 56, 62, 63, 94, 106, 112, 114, 120, 130, 139, 142, 146, 159, 168, 175, 178, 179, 192, 194, 209, 210, 216, 217, 218, 227, 229, 231, 244, 245, 246, 247, 249, 252, 267], "resiz": [14, 23, 50, 56, 154, 241, 275], "unabl": [14, 18, 155, 170, 194, 214], "caff": 14, "picasso": 14, "jpg": [14, 36, 55, 56, 95], "reconvert": 14, "f_": [14, 177], "xl": [14, 240], "w_": [14, 111], "c": [14, 17, 18, 22, 23, 46, 66, 67, 76, 89, 94, 95, 101, 102, 104, 111, 112, 120, 131, 135, 136, 138, 145, 146, 148, 153, 159, 162, 171, 176, 181, 182, 190, 192, 194, 195, 203, 207, 216, 242, 248, 251, 252, 264, 265, 281], "squar": [14, 39, 50, 55, 66, 67, 71, 72, 73, 76, 77, 94, 99, 102, 104, 120, 147, 148, 161, 169, 178, 182, 200], "contentloss": 14, "recomput": [14, 104, 147, 149, 169, 267], "act": [14, 46, 53, 94, 99, 102, 143, 154, 175, 178, 180, 194, 195], "gram": 14, "g_": 14, "hat": [14, 109], "counteract": 14, "pool": [14, 22, 56, 99, 101, 104, 112, 121, 188, 195, 258], "tend": [14, 20, 94, 99, 104, 205, 222], "almost": [14, 23, 109, 111, 137, 141, 154, 176, 194, 205], "sl": 14, "19": [14, 20, 36, 101, 159, 178, 194, 205, 206, 222, 240, 257, 283], "vgg": 14, "child": [14, 119, 187, 236], "connect": [14, 50, 92, 97, 99, 111, 127, 136, 140, 141, 153, 157, 158, 165, 175, 176, 178, 198, 203, 236, 254], "eval": [14, 20, 23, 41, 53, 112, 121, 137, 138, 147, 177, 180, 183, 190, 191, 219, 222, 227, 241, 242, 275, 282, 283], "485": [14, 23, 55, 104, 176], "456": [14, 23, 55, 104, 176], "406": [14, 23, 55, 104, 176], "229": [14, 23, 55, 104, 176], "224": [14, 23, 55, 104, 176, 190, 219, 227, 241, 275, 282, 283, 285], "225": [14, 23, 55, 104, 119, 176], "vgg19": [14, 162], "maxpool2d": [14, 50, 101, 121, 158, 188, 258], "align": [14, 136, 182, 183, 204, 213, 248, 283], "depth": [14, 46, 56, 60, 94, 97, 102, 108, 142, 159, 194, 230, 267], "immedi": [14, 22, 43, 52, 56, 99, 102, 109, 153, 168, 179, 180, 187, 205], "white": [14, 18, 20, 79, 99, 112, 188, 190, 222], "input_img": 14, "content_img": 14, "bfg": 14, "closur": [14, 194], "reevalu": 14, "exce": [14, 79, 147, 195], "sphinx_gallery_thumbnail_numb": 14, "003": [14, 21, 47, 51, 53, 56, 79, 89, 90, 97, 100, 103, 104, 106, 108, 109, 110, 122, 127, 145, 157, 159, 162, 171, 182, 184, 192, 194, 195, 197, 198, 205, 214, 223, 287], "neural_style_tutori": [14, 21, 287], "paszk": [15, 153, 178], "dziedzic": 15, "shall": [15, 50, 56], "learnabl": [15, 50, 71, 120, 121, 135, 136, 224, 269], "badfftfunct": 15, "literatur": [15, 178], "confusingli": 15, "correl": [15, 86, 99, 112, 159], "filter": [15, 27, 53, 87, 95, 104, 142, 183, 195, 203, 266], "flip": [15, 160], "wrt": [15, 148], "numpy_extensions_tutori": [15, 21, 287], "freeli": 16, "inspir": [16, 153, 160, 165, 182, 226], "v1": [16, 20, 162, 178, 179, 181, 222, 232, 252], "openai": [16, 133, 136, 161, 177, 178, 179, 181, 282], "farama": [16, 177], "gymnasium": [16, 177, 178], "stateless": [16, 155, 157], "encount": [16, 53, 138, 146, 159, 192, 194, 195, 198, 221, 267, 276, 282], "undertaken": 16, "broader": 16, "wider": [16, 160], "acquaint": 16, "set_se": 16, "avenu": [16, 89], "backpropag": [16, 39, 40, 46, 50, 53, 79, 94, 105, 106, 107, 109, 111, 112, 120, 142, 161, 195], "_set_se": 16, "torqu": 16, "upward": 16, "posit": [16, 95, 99, 106, 131, 136, 169, 177, 178, 182, 183, 190, 194, 198, 203, 222, 250, 285], "angular": 16, "stand": [16, 89, 94, 112, 161, 198, 215], "equat": [16, 56, 177, 178, 254, 258], "motion": 16, "veloc": [16, 178], "theta": [16, 79, 106, 177], "_t": [16, 161], "theta_t": 16, "dt": 16, "rad": 16, "sec": [16, 137], "gravit": 16, "mass": 16, "accord": [16, 17, 27, 34, 102, 103, 121, 159, 161, 173, 175, 178, 182, 190, 215, 224, 228, 276], "theta_": [16, 161], "001": [16, 101, 121, 151, 179, 188, 241, 275], "deleg": [16, 136, 227], "merg": [16, 48, 95, 99, 176, 190, 241], "is_shar": [16, 177], "new_th": 16, "plu": [16, 106], "new_thdot": 16, "neg": [16, 39, 53, 95, 99, 105, 106, 112, 113, 159, 171, 175, 177, 250], "discourag": [16, 43, 52, 177], "possibli": [16, 56, 139, 177, 194, 203, 277], "omit": [16, 94, 101, 119, 139, 159, 177, 198, 257, 264, 266], "agent": [16, 133, 136, 178, 179, 181, 184, 287], "param": [16, 23, 50, 55, 121, 137, 138, 139, 148, 151, 153, 155, 157, 170, 180, 181, 200, 212, 264, 286], "mandatori": [16, 157, 177], "domain": [16, 27, 36, 40, 53, 54, 79, 103, 117, 136, 177, 191, 217, 267], "accur": [16, 23, 79, 92, 97, 119, 143, 158, 171, 181, 192, 214, 219, 280], "lazili": [16, 168], "costli": [16, 142, 267], "observation_spec": [16, 177], "compositespec": 16, "dictionari": [16, 40, 41, 53, 86, 111, 114, 121, 145, 168, 170, 177, 179, 180, 183, 190, 195, 204, 256, 269, 271], "action_spec": [16, 177], "reward_spec": [16, 177], "done_spec": 16, "input_spec": [16, 177], "state_spec": 16, "output_spec": 16, "neither": [16, 102, 200, 285], "shortcut": 16, "tensorspec": 16, "irrelev": [16, 174], "incorpor": [16, 104, 113, 136, 154, 182], "pseudo": [16, 27], "_make_spec": 16, "pendulumenv": 16, "gen_param": 16, "batch_lock": 16, "homonym": [16, 171], "check_env_spec": [16, 177], "coupl": [16, 38, 53, 98, 102, 103, 111, 138, 148, 154, 155, 168, 171, 188, 194, 267], "rand_step": 16, "randomli": [16, 47, 55, 56, 76, 77, 92, 97, 99, 120, 145, 161, 178, 183, 195], "invers": [16, 102, 204, 213, 232], "showcas": [16, 69, 138, 139, 165, 168, 195, 206, 220], "thdot": 16, "effort": [16, 53, 55, 56, 117, 266], "summar": [16, 53, 55, 112, 124, 138, 143, 187, 194], "_apply_transform": 16, "_call": 16, "inv": 16, "_inv_apply_transform": 16, "eventu": [16, 140, 147, 154], "out_keys_inv": 16, "unitari": 16, "sine": [16, 120], "cosin": [16, 240], "raw": [16, 35, 47, 53, 72, 86, 112, 120, 203, 280], "del_kei": 16, "mdp": 16, "gather": [16, 59, 95, 101, 137, 139, 141, 151, 153, 154, 158, 177, 201, 220, 226, 251], "unexplor": 16, "abil": [16, 102, 112, 121, 141, 142, 153, 185, 188, 192, 198, 214, 227], "recreat": [16, 34, 46], "Of": [16, 104, 108, 112, 142, 153, 188, 213, 215, 248, 281], "clip": [16, 53, 79, 177], "scratch": [16, 34, 46, 53, 57, 104, 105, 121, 124, 127, 136, 184, 203, 268, 271, 287], "advanc": [17, 20, 21, 23, 46, 92, 107, 110, 113, 114, 116, 117, 130, 131, 132, 135, 136, 139, 151, 171, 190, 195, 198, 212, 215, 216, 219, 220, 222, 223, 226, 235, 241, 242, 267, 271, 285, 287], "verif": [17, 180], "rapid": [17, 94, 215], "manufactur": 17, "imposs": [17, 97, 105, 168, 226], "simultan": [17, 34, 46, 60, 143, 153, 171, 176, 267], "began": 17, "enhanc": [17, 95, 130, 131, 140, 144, 171, 185, 207, 216, 221, 228, 267, 282, 285], "rapidli": 17, "situat": [17, 94, 102, 139, 147, 148, 151, 153, 197, 205], "wrapper_custom_tensor_add": 17, "torch_fn": 17, "custom_cpu_fallback": 17, "operatorhandl": 17, "hint": [17, 22, 94, 104, 105, 109, 117, 142, 153, 179, 187, 194, 283], "cpu_fallback": 17, "cppfunction": 17, "makefromboxedfunct": 17, "cumtomselufunct": 17, "selu": 17, "wrapper_autogradcumstom__selu": 17, "wrapper_autogradcustom__selu": 17, "autocastprivateuse1": 17, "autocast": [17, 216, 222, 228, 241, 275], "kernel_privateuseon": 17, "makefallthrough": 17, "backendmodul": 17, "_register_device_modul": 17, "backend_nam": 17, "get_amp_supported_dtyp": 17, "is_autocast_en": 17, "get_autocast_dtyp": 17, "set_autocast_dtyp": 17, "set_autocast_en": 17, "generatorimpl": 17, "builder": [17, 194, 283], "register_generator_privateuse1": 17, "customgeneratorimpl": 17, "make_custom_gener": 17, "deviceindex": 17, "device_index": 17, "make_gener": 17, "make_cumstom_gener": 17, "event": [17, 86, 119, 137, 138, 179, 192, 203, 257, 265, 280, 283], "deviceguard": 17, "deviceguardimplinterfac": 17, "c10_register_guard_impl": 17, "customguardimpl": 17, "backend_meta_": 17, "extrameta": 17, "backendmeta": 17, "custombackendmetadata": 17, "unordered_map": 17, "tensorbackendmetaregistri": 17, "for_seri": 17, "for_deseri": 17, "expand": [17, 94, 108, 114, 159, 166, 188, 217, 233, 282], "timer": [17, 56, 160, 183, 222, 230, 255, 263, 287], "ascend": [17, 56, 87, 221], "npu": [17, 219, 221], "meet": [17, 54, 56, 224, 242, 252], "usabl": [17, 121, 154, 203, 268], "compli": 17, "habit": 17, "torch_npu": [17, 221], "exclus": [17, 175], "rename_privateuse1_backend": 17, "register_privateuse1_backend": 17, "unsupported_dtyp": 17, "quint8": [17, 200], "generate_methods_for_privateuse1_backend": 17, "for_tensor": 17, "for_modul": 17, "for_storag": 17, "is_npu": 17, "perhap": [18, 79, 144, 175, 234], "prevent": [18, 39, 53, 59, 112, 119, 142, 145, 151, 159, 161, 171, 194, 195, 221, 251, 252, 267, 272, 285], "custom_op": [18, 117, 279], "land": [18, 135, 136, 146, 161, 198, 214, 241, 286], "induc": [18, 175, 203], "bad": [18, 92, 142, 205, 267], "uncom": [18, 53, 55, 67, 77, 97, 101, 108, 112, 120, 173, 178], "cropped_img": 18, "img": [18, 36, 95, 101, 136, 188, 190], "black": [18, 79, 86, 99, 112, 135, 136, 141, 143, 179, 183], "aka": [18, 160, 162, 171, 198, 241, 281], "mutates_arg": 18, "led": 18, "past": [18, 53, 54, 103, 108, 194, 198], "exercis": [18, 23, 47, 153, 251], "reader": [18, 109, 153, 198, 266], "region": [18, 95, 102, 130, 143, 158, 185, 190, 197, 248, 251, 255, 267, 271, 274, 278, 280, 287], "unus": [18, 159, 174], "against": [18, 39, 40, 47, 99, 101, 114, 140, 153, 162, 177, 198, 232, 241, 252], "forgot": [18, 203], "python_custom_op": [18, 21, 287], "pritam": 19, "damania": 19, "yi": [19, 194, 281], "wang": [19, 27, 114, 116, 117, 159, 161, 203], "distributeddataparallel": [19, 59, 60, 64, 132, 137, 138, 139, 153, 174, 181, 251, 286], "paradigm": [19, 20, 64, 104, 120, 132, 180, 181, 222], "embed": [19, 53, 99, 105, 107, 109, 110, 121, 136, 138, 139, 141, 173, 180, 181, 183, 188, 198, 201, 217, 235, 287], "dens": [19, 20, 195, 198, 212, 217, 222], "fc": [19, 46, 161, 224], "replic": [19, 22, 60, 64, 136, 137, 141, 149, 151, 153, 180, 181, 195, 236], "trainer": [19, 27, 59, 143, 149, 179, 180, 181, 222, 234], "hybrid": [19, 88, 90, 236, 287], "pipedream": 19, "master": [19, 23, 137, 153, 158, 162, 180, 181, 197, 203, 227, 232, 241], "embeddingbag": [19, 22], "drive": [19, 56, 94, 97, 99, 136, 161, 171, 212, 232], "respond": [19, 95, 161, 180], "amongst": [19, 195, 213], "themselv": [19, 99, 195, 214], "remotemodul": 19, "kick": [19, 34, 46, 168, 179, 180, 181], "remot": [19, 64, 132, 143, 179, 180, 181, 187, 232, 248, 276, 285], "hybridmodel": 19, "allreduc": [19, 86, 137, 141, 151, 174, 203, 267], "firstli": [19, 117, 159, 178], "tcp": [19, 59, 140, 149, 150, 153, 232], "init_method": [19, 151, 153, 201], "_run_train": [19, 181], "rpc_async": [19, 179, 181], "exit": [19, 157, 179, 180, 181, 203, 230, 231, 239, 278, 283, 285], "conflict": [19, 159, 194], "remote_emb_modul": 19, "rref": [19, 179, 180, 232], "distributedoptim": [19, 180, 181, 232], "remote_paramet": 19, "cannnot": 19, "crossentropyloss": [19, 23, 39, 101, 106, 141, 173, 181, 188, 241, 275], "get_next_batch": [19, 179, 181], "jess": [20, 222], "cai": [20, 222], "seek": [20, 89, 95, 222, 235], "grain": [20, 36, 94, 138, 153, 187, 192, 222, 251, 252, 266], "2n": [20, 222], "degrad": [20, 79, 222], "sparsifi": [20, 131, 136, 175, 222], "answer": [20, 39, 95, 99, 106, 153, 158, 168, 183, 194, 195, 222], "tune": [20, 23, 39, 86, 104, 112, 122, 131, 134, 136, 137, 143, 146, 176, 205, 216, 219, 222, 242, 255, 263, 266, 271, 285, 287], "recov": [20, 137, 138, 151, 162, 222], "nearli": [20, 112, 188, 222, 252], "f1": [20, 192, 222], "86": [20, 159, 176, 177, 181, 198, 222, 240, 252, 283], "92": [20, 177, 222, 240, 252], "3x": [20, 67, 120, 222, 228, 251, 267], "beginn": [20, 37, 42, 48, 49, 51, 68, 74, 78, 81, 82, 83, 84, 88, 90, 96, 98, 100, 107, 110, 115, 118, 120, 122, 132, 136, 199, 222, 259, 260, 261, 262], "to_sparse_semi_structur": [20, 222], "motiv": [20, 79, 140, 159, 180, 200, 206, 213, 214, 217, 222], "affect": [20, 95, 99, 103, 104, 148, 171, 173, 222, 267], "swap": [20, 55, 106, 141, 171, 177, 198, 205, 217, 222, 264], "compress": [20, 95, 175, 212, 215, 219, 222, 242], "arrang": [20, 120, 222], "drawback": [20, 111, 194, 222, 233, 234], "2020": [20, 222], "amper": [20, 138, 165, 170, 222, 251], "cutlass": [20, 216, 222], "cusparselt": [20, 222], "milder": [20, 222], "account": [20, 54, 112, 154, 168, 171, 183, 188, 198, 219, 222, 281], "retrain": [20, 222], "sweet": [20, 222], "spot": [20, 97, 101, 102, 144, 222], "2x": [20, 89, 136, 148, 168, 222, 240], "theoret": [20, 56, 171, 212, 222, 272], "granular": [20, 138, 159, 195, 222, 257, 267, 285], "fp16": [20, 138, 162, 205, 216, 222], "resnet": [20, 46, 47, 95, 142, 187, 222, 267], "imagenet": [20, 47, 55, 95, 127, 176, 222], "76": [20, 162, 177, 181, 198, 222, 252], "resnext": [20, 222], "101_32x8d": [20, 222], "79": [20, 159, 222, 252, 257], "xception": [20, 222], "ssd": [20, 222, 267], "rn50": [20, 222], "coco2017": [20, 222], "bbap": [20, 222], "24": [20, 23, 36, 159, 176, 177, 198, 222, 240, 252], "maskrcnn": [20, 222], "fairseq": [20, 222], "en": [20, 157, 183, 190, 222], "de": [20, 22, 183, 222], "wmt14": [20, 222], "bleu": [20, 222], "squad": [20, 222], "91": [20, 177, 181, 222, 240, 252], "workflow": [20, 23, 38, 86, 91, 92, 113, 136, 137, 195, 199, 215, 222], "perspect": [20, 108, 177, 222, 285], "subproblem": [20, 222], "bmatrix": [20, 109, 222], "handoff": [20, 222], "anticip": [20, 222], "area": [20, 95, 99, 133, 188, 197, 205, 215, 222, 250], "littl": [20, 56, 97, 104, 106, 112, 154, 177, 179, 181, 182, 185, 187, 222], "colab": [20, 22, 27, 38, 43, 52, 98, 101, 112, 136, 153, 154, 160, 177, 178, 190, 195], "pip": [20, 27, 54, 86, 95, 101, 114, 116, 161, 176, 178, 187, 190, 192, 197, 203, 205, 219, 227, 240, 242, 250, 252, 254, 257, 265, 268, 269, 270, 272, 279, 285], "panda": [20, 36, 55, 79, 190], "hug": [20, 159], "face": [20, 47, 55, 56, 79, 159, 282], "token": [20, 53, 111, 138, 141, 145, 173, 182, 183, 198, 222, 267, 282], "segment": [20, 136, 198, 205, 222], "text": [20, 36, 47, 56, 79, 89, 95, 105, 106, 108, 109, 111, 136, 138, 144, 145, 153, 166, 171, 177, 178, 183, 187, 190, 198, 222, 248, 250, 282], "wikipedia": [20, 157, 222], "articl": [20, 36, 222], "score": [20, 53, 95, 105, 109, 111, 119, 182, 183, 197, 198, 201, 222, 250, 282], "fair": [20, 104, 217, 222], "lowest": [20, 137, 175, 222], "l1": [20, 92, 175, 222], "ao": [20, 23, 200, 205, 219, 222], "satisfi": [20, 143, 222, 224, 267], "anytim": [20, 222], "pruner": [20, 222], "update_mask": [20, 222], "shot": [20, 179, 222, 282], "wouldn": [20, 111, 137, 154, 222], "squash_mask": [20, 222], "left": [20, 34, 46, 50, 53, 56, 67, 89, 94, 101, 102, 106, 111, 120, 121, 153, 161, 165, 177, 178, 180, 182, 187, 188, 222, 248], "quickstart": [20, 34, 35, 36, 37, 38, 39, 41, 43, 44, 136, 222], "28x": [20, 222], "amen": [20, 222], "spent": [20, 86, 182, 187, 222, 252, 257, 272], "delta": [20, 159, 160, 178, 222, 252, 266], "exact": [20, 104, 121, 147, 182, 194, 198, 203, 222, 230], "78": [20, 36, 177, 222, 252], "53": [20, 162, 222, 240, 257, 283], "44": [20, 101, 159, 177, 181, 222], "09": [20, 53, 159, 177, 181, 222, 240], "93": [20, 119, 177, 181, 222, 240, 252, 257], "49": [20, 162, 177, 181, 222, 252], "15": [20, 27, 48, 79, 97, 99, 127, 177, 188, 190, 197, 222, 240, 252, 257, 263], "54": [20, 101, 162, 177, 252], "71x": 20, "35": [20, 141, 162, 177, 240, 242], "74": [20, 177, 181, 240, 252, 257], "23x": 20, "72": [20, 76, 160, 176, 177, 252, 257], "71": [20, 23, 55, 159, 160, 177, 181, 283], "59": [20, 176, 177, 190, 252, 257, 283, 287], "41": [20, 137, 176, 177, 252, 257, 283], "22x": 20, "286": [20, 162, 190, 222], "65": [20, 36, 55, 101, 181, 197, 198, 252], "247": [20, 181], "63": [20, 257], "14x": 20, "46": [20, 159, 162, 176, 177], "02x": 20, "ye": [20, 54, 168, 279], "47": [20, 92, 101, 162, 177, 240, 252, 257], "68": [20, 55, 159, 177, 252], "18x": [20, 222], "36": [20, 176, 177, 184, 240], "13x": 20, "159": 20, "22": [20, 159, 162, 177, 181, 240, 252], "142": [20, 177, 240], "23": [20, 159, 177, 181, 240, 252, 257, 266], "12x": [20, 198], "sparsesemistructuredtensor": [20, 222], "semi_structured_spars": [20, 21, 287], "00": [21, 36, 42, 51, 68, 74, 78, 90, 97, 100, 101, 110, 118, 119, 122, 159, 177, 181, 184, 190, 205, 207, 223, 240, 257, 263, 274, 287], "012": [21, 223], "mem": [21, 42, 51, 68, 74, 78, 86, 90, 100, 110, 118, 119, 122, 184, 223, 257, 263, 274, 287], "mb": [21, 23, 42, 51, 68, 74, 78, 90, 100, 110, 118, 119, 122, 137, 184, 223, 257, 263, 274, 286, 287], "torchrl": [21, 133, 136, 154, 161, 184, 287], "ddpg": [21, 133, 136, 287], "pendulum": [21, 133, 136, 177, 287], "scipi": [21, 47, 135, 136, 148, 192, 287], "acceler": [21, 35, 40, 43, 52, 53, 54, 61, 64, 66, 79, 104, 116, 120, 127, 136, 144, 162, 171, 184, 217, 220, 223, 228, 231, 240, 241, 267, 287], "bert": [21, 99, 136, 137, 219, 220, 287], "semi": [21, 133, 136, 198, 217, 220, 287], "sparsiti": [21, 111, 136, 175, 198, 212, 214, 220, 223, 287], "000": [21, 23, 36, 42, 68, 74, 100, 113, 118, 122, 143, 161, 162, 184, 188, 190, 223, 263, 287], "supervis": [21, 106, 133, 136, 185, 190, 287], "usb": [21, 133, 136, 176, 287], "usb_semisup_learn": [21, 27, 287], "embeddingplann": [22, 136], "conda": [22, 86, 95, 101, 153, 159, 203, 205, 220, 242, 250, 265, 266, 285], "cudatoolkit": 22, "sudo": [22, 187, 227], "rm": [22, 232], "miniconda3": [22, 266], "py37_4": 22, "sh": [22, 151, 227, 248], "anaconda": [22, 86, 95, 153, 265], "chmod": 22, "fbgemm": [22, 23, 195, 200], "ipython": [22, 112, 119], "cp": [22, 201, 227], "restart": [22, 95, 101, 150, 178], "newli": [22, 127, 153], "python37": 22, "dynload": 22, "enviro": 22, "spmd": [22, 141, 234], "mimic": [22, 23, 104, 205, 212], "launcher": 22, "embeddingbagcollect": 22, "bag": [22, 36, 38, 101, 188, 195], "ebc": [22, 195], "4096": [22, 195, 240], "parameterconstraint": 22, "placement": [22, 139, 219, 285], "evenli": [22, 94], "intra": [22, 138, 141, 236], "interconnect": [22, 254], "nvlink": [22, 141, 232], "data_parallel": 22, "planner": 22, "embedding_typ": 22, "embeddingcomputekernel": 22, "shardingtyp": 22, "large_table_cnt": 22, "small_table_cnt": 22, "large_t": 22, "embeddingbagconfig": 22, "large_table_": 22, "embedding_dim": [22, 99], "num_embed": 22, "feature_nam": 22, "large_table_feature_": 22, "poolingtyp": 22, "small_tabl": 22, "small_table_": 22, "small_table_feature_": 22, "gen_constraint": 22, "sharding_typ": 22, "table_wis": 22, "large_table_constraint": 22, "small_table_constraint": 22, "mimick": 22, "single_rank_execut": 22, "embeddingbagcollectionshard": [22, 195], "model_parallel": 22, "embeddingshardingplann": 22, "topologi": [22, 195, 234, 236, 241, 248], "moduleshard": 22, "shardingenv": 22, "init_distributed_single_host": 22, "pyre": 22, "fixm": 22, "set_devic": [22, 57, 59, 137, 138, 151, 201, 206, 233, 234, 236, 283], "compute_devic": 22, "pg": [22, 203], "sharder": [22, 195], "shardingplan": 22, "collective_plan": 22, "sharded_model": 22, "from_process_group": 22, "spmd_sharing_simul": 22, "get_context": [22, 153, 283], "exitcod": 22, "factor": [22, 99, 127, 171, 178, 179, 192, 195, 205, 233], "medium": [22, 140, 197, 267], "large_table_0": 22, "parametershard": 22, "compute_kernel": 22, "batched_fus": 22, "sharding_spec": 22, "enumerableshardingspec": 22, "shardmetadata": 22, "shard_offset": 22, "shard_siz": 22, "large_table_1": 22, "small_table_0": 22, "small_table_1": 22, "finer": [22, 36, 257], "halv": [22, 119], "row_wis": 22, "512": [22, 138, 160, 173, 194, 217, 222, 228, 241, 252, 257], "imbal": [22, 267], "vertic": 22, "column_wis": 22, "unfortu": 22, "futur": [22, 53, 112, 117, 119, 137, 157, 161, 168, 174, 178, 179, 180, 181, 200, 215, 233, 240, 269, 280], "batched_dens": 22, "raghuraman": 23, "krishnamoorthi": 23, "seth": [23, 38], "weidman": 23, "jerri": 23, "zhang": [23, 233, 234, 236], "decreas": [23, 40, 53, 79, 87, 104, 112, 141, 144, 195, 215], "mobilenetv2": 23, "np": [23, 55, 76, 101, 105, 112, 120, 176, 181, 188, 190, 213, 217, 222, 266, 282], "dataload": [23, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 56, 59, 79, 92, 101, 104, 122, 137, 138, 144, 153, 171, 173, 180, 187, 188, 190, 219, 241, 242, 243, 255, 267, 275, 287], "filterwarn": [23, 177, 190], "ignor": [23, 55, 104, 109, 111, 121, 174, 177, 190, 194, 197, 200, 213, 214, 217, 251, 257, 268, 280], "deprecationwarn": 23, "seed": [23, 56, 79, 97, 104, 137, 138, 153, 178, 179, 181, 217], "manual_se": [23, 102, 137, 138, 153, 160, 178, 179, 201, 217, 222, 286], "191009": 23, "floatfunct": 23, "quantstub": 23, "dequantstub": 23, "relu6": 23, "_make_divis": 23, "divisor": 23, "min_valu": 23, "tf": [23, 101], "divis": [23, 102, 194, 217, 283], "tensorflow": [23, 101, 105, 107, 120], "blob": [23, 117, 137, 187], "slim": [23, 120], "mobilenet": [23, 136, 176], "new_v": 23, "round": [23, 117, 138, 179, 252, 266], "convbnrelu": 23, "in_plan": 23, "out_plan": 23, "kernel_s": [23, 50, 112, 137, 200, 242, 258], "momentum": [23, 46, 47, 69, 73, 92, 97, 101, 103, 112, 120, 121, 147, 153, 179, 188, 195, 200, 241, 242, 269, 270, 275], "inplac": [23, 137, 222], "invertedresidu": 23, "inp": [23, 180, 194, 216, 235, 258], "oup": 23, "expand_ratio": 23, "hidden_dim": [23, 99], "use_res_connect": 23, "pw": 23, "dw": 23, "conv": [23, 56, 99, 147, 162, 180, 191, 248, 257, 258], "skip_add": 23, "num_class": [23, 179, 188, 190, 197], "width_mult": 23, "inverted_residual_set": 23, "round_nearest": 23, "v2": [23, 104, 124, 154, 176, 191, 195, 221, 228, 233, 239], "width": [23, 46, 47, 50, 99, 102, 143, 165, 190, 191, 197, 282], "input_channel": 23, "last_channel": 23, "1280": [23, 197], "96": [23, 159, 160, 177, 181, 240], "160": [23, 181, 190, 252, 257], "320": [23, 242], "valueerror": [23, 282], "invert": [23, 133, 136, 177, 213], "residu": [23, 141], "output_channel": 23, "quant": [23, 200], "dequant": [23, 200, 205, 242], "isinst": [23, 139, 206, 222], "kaiming_normal_": 23, "fan_out": 23, "zeros_": 23, "elif": [23, 173], "ones_": 23, "normal_": 23, "bn": [23, 147, 191, 200], "numer": [23, 43, 53, 76, 77, 102, 104, 105, 114, 120, 139, 143, 177, 201, 222, 251, 267], "fuse_model": 23, "is_qat": [23, 200], "fuse_modul": 23, "fuse_modules_qat": 23, "averagemet": 23, "fmt": 23, "avg": [23, 240, 257], "__str__": [23, 195], "fmtstr": 23, "__dict__": [23, 219, 264, 283], "topk": [23, 242], "maxk": 23, "pred": [23, 112, 137, 141, 180, 188, 242], "correct_k": 23, "mul_": 23, "criterion": [23, 50, 101, 181, 183, 188, 241, 275], "neval_batch": 23, "top1": [23, 242], "acc": [23, 190], "2f": [23, 137, 176, 179, 181], "top5": 23, "cnt": 23, "acc1": 23, "acc5": 23, "load_model": 23, "model_fil": 23, "state_dict": [23, 41, 53, 57, 59, 92, 137, 138, 139, 151, 175, 192, 233, 234, 241, 251, 254, 255, 263, 264, 268, 271, 287], "weights_onli": [23, 41, 121, 139, 151, 190, 242], "load_state_dict": [23, 41, 57, 92, 103, 121, 139, 151, 190, 233, 234, 242, 251, 255, 263, 268, 287], "print_size_of_model": 23, "getsiz": 23, "data_path": [23, 92, 112], "prepare_data_load": 23, "randomresizedcrop": [23, 55], "randomhorizontalflip": [23, 55], "totensor": [23, 36, 55, 97, 101, 137, 153, 176, 180, 188, 190, 227, 241, 242, 275], "dataset_test": 23, "centercrop": 23, "train_sampl": 23, "randomsampl": 23, "test_sampl": 23, "sequentialsampl": 23, "train_batch_s": 23, "data_loader_test": 23, "eval_batch_s": 23, "pre": [23, 36, 105, 133, 136, 138, 141, 153, 176, 190, 195, 197, 198, 205, 216, 234, 277, 285], "saved_model_dir": 23, "float_model_fil": 23, "mobilenet_pretrained_float": 23, "scripted_float_model_fil": 23, "mobilenet_quantization_script": 23, "scripted_quantized_model_fil": 23, "mobilenet_quantization_scripted_quant": 23, "float_model": [23, 219], "fusion": [23, 86, 136, 159, 195, 205, 216, 241, 267, 271, 274, 283, 287], "baselin": [23, 27, 95, 104, 190, 205, 222, 252, 266], "un": [23, 102, 183], "num_eval_batch": 23, "sophist": [23, 120, 177], "num_calibration_batch": 23, "mymodel": [23, 200], "estim": [23, 50, 55, 56, 99, 143, 177, 178, 183, 195, 205, 252, 272], "qconfig": [23, 200], "default_qconfig": 23, "calibr": [23, 171, 200, 219, 242], "56": [23, 162, 176, 177, 222, 252, 257, 285], "4x": [23, 138], "x86": [23, 200, 216, 228], "basi": [23, 138], "histogram": [23, 265], "per_channel_quantized_model": 23, "get_default_qconfig": 23, "67": [23, 119, 159, 200, 240], "qat": [23, 200], "int8": [23, 176, 205, 216, 228, 242], "train_one_epoch": 23, "ntrain_batch": 23, "avgloss": 23, "5f": 23, "start_tim": 23, "global_avg": 23, "qat_model": 23, "get_default_qat_qconfig": 23, "prepare_qat": 23, "freez": [23, 46, 127, 241], "num_train_batch": 23, "nepoch": 23, "disable_observ": 23, "intrins": [23, 200], "freeze_bn_stat": 23, "quantized_model": [23, 219], "confirm": [23, 92, 95, 112, 113, 138, 160, 179], "allud": [23, 79], "run_benchmark": 23, "img_load": 23, "elaps": [23, 137, 183], "num_batch": [23, 153], "enumer": [23, 92, 101, 103, 137, 139, 141, 176, 177, 180, 187, 188, 217, 222, 241, 242, 275], "num_imag": 23, "0f": [23, 242], "macbook": [23, 183], "pro": [23, 98], "61": [23, 119, 162, 222, 240], "welcom": 23, "hao": 27, "chen": [27, 194], "unifi": [27, 136, 147, 235, 250, 282], "ssl": 27, "modular": [27, 36, 121, 192, 269], "fixmatch": 27, "defixmatch": 27, "vision": [27, 40, 47, 55, 95, 99, 122, 133, 136, 162, 168, 250, 282, 287], "speech": [27, 79, 99, 105, 107, 111, 136, 145, 267], "light": [27, 56, 97, 101, 102, 147, 250], "vit": [27, 282], "famou": [27, 79], "strong": [27, 105, 194, 215, 282], "unlabel": [27, 102], "confid": [27, 56, 95, 97, 103, 106, 143, 177, 178, 188, 251], "threshold": [27, 53, 86, 143, 177, 181, 190, 240, 267], "absorb": 27, "gaussian": [27, 50, 56, 143, 177], "overcom": [27, 113], "quantiti": [27, 104, 131, 136, 141, 160, 165, 170], "qualiti": [27, 161, 183], "trade": [27, 143, 168, 216], "afford": 27, "cv": [27, 217], "nlp": [27, 97, 99, 106, 109, 110, 111, 124, 136, 184, 217, 251, 267, 287], "audio": [27, 36, 47, 136, 156, 186, 189], "semilearn": 27, "get_dataset": 27, "get_data_load": 27, "weak": 27, "get_net_build": 27, "get_algorithm": 27, "get_config": 27, "hyper": [27, 182, 285], "87": [27, 36, 119, 181, 216, 240, 252], "lb_imb_ratio": 27, "ulb_imb_ratio": 27, "microsoft": [27, 38, 116, 117, 187, 207], "kihyuk": 27, "sohn": 27, "et": [27, 53, 56, 79, 153, 175, 183], "al": [27, 53, 56, 79, 175, 183], "yidong": 27, "audio_data_augmentation_tutori": [28, 30], "html": [28, 29, 30, 31, 32, 37, 48, 49, 53, 61, 66, 79, 80, 81, 82, 83, 84, 88, 96, 104, 107, 115, 120, 124, 127, 132, 156, 158, 166, 186, 189, 190, 193, 194, 195, 199, 208, 211, 213, 215, 225, 251, 255, 256, 259, 260, 261, 262], "audio_datasets_tutori": 29, "audio_feature_extractions_tutori": 31, "audio_io_tutori": 32, "frac": [34, 46, 67, 89, 94, 105, 106, 108, 111, 120, 142, 148, 153, 177, 178, 198], "partial": [34, 46, 92, 94, 108, 121, 137, 138, 139, 141, 142, 146, 154, 160, 201, 241, 268, 271], "leaf": [34, 46, 94, 192], "retain_graph": [34, 146], "surround": [34, 171], "mark": [34, 53, 141, 146, 162, 178, 179, 194, 214, 248], "frozen": [34, 46, 139, 161, 216], "acycl": [34, 46], "dag": 34, "chain": [34, 46, 94, 102, 106, 107, 139, 147, 159, 179, 214], "accumul": [34, 46, 50, 53, 56, 94, 97, 108, 148, 161, 168, 178, 179, 180, 181, 251, 270], "vec": [34, 46, 94, 160, 216], "langl": 34, "x_1": [34, 108, 165], "x_n": [34, 56], "rangl": 34, "y_1": [34, 108], "y_m": 34, "j": [34, 46, 79, 94, 101, 104, 105, 109, 139, 183, 203], "ccc": [34, 46, 94], "y_": [34, 46, 94, 105], "x_": [34, 46, 94], "cdot": [34, 46, 56, 94, 111, 142], "vdot": [34, 46, 94], "ddot": [34, 46, 94], "v_1": 34, "v_m": 34, "life": [34, 104, 144, 145, 233], "autogradqs_tutori": [34, 37, 42, 81, 287], "compris": [35, 36, 56, 121], "fashionmnist": [35, 36, 38, 40, 44, 101, 188], "mtia": [35, 40, 43, 66, 79, 102, 120, 127], "xpu": [35, 40, 43, 66, 79, 102, 120, 127, 241, 257], "neuralnetwork": 35, "minibatch": [35, 36, 101, 112, 144, 155, 170, 173], "28x28": [35, 112, 188, 254], "784": [35, 101, 112, 155, 188], "nonlinear": 35, "wide": [35, 64, 94, 99, 112, 140, 141, 144, 145, 153, 174, 183, 205, 250, 267], "phenomena": 35, "seq_modul": 35, "logit": [35, 39, 104, 240], "infti": [35, 178], "parameter": [35, 222], "preview": 35, "buildmodel_tutori": [35, 37, 42, 287], "messi": 36, "primit": [36, 40, 120, 136, 141, 160, 171, 195, 198, 203, 228], "fashion": [36, 53, 101, 103, 116, 138, 141, 143, 180, 185, 188, 190, 192, 195, 241], "zalando": 36, "60": [36, 114, 138, 144, 145, 162, 176, 177, 181, 183, 188, 194, 240, 257], "grayscal": [36, 154, 161], "internet": [36, 176], "target_transform": [36, 40, 44], "training_data": [36, 109], "test_data": 36, "26": [36, 101, 159, 161, 162, 176, 177, 181, 240], "4m": [36, 101], "5k": [36, 101], "364kb": 36, "197k": 36, "578kb": 36, "852k": 36, "97mb": 36, "38m": 36, "03": [36, 97, 101, 177, 180, 181, 190, 201, 240, 266], "70mb": 36, "45m": [36, 101], "1mb": [36, 101], "0m": 36, "18": [36, 101, 117, 119, 144, 159, 176, 177, 181, 205, 217, 240, 252, 281], "4mb": 36, "9mb": 36, "2mb": 36, "98": [36, 55, 159, 177, 181, 240], "9m": 36, "7mb": 36, "3mb": [36, 101], "29": [36, 101, 176, 177, 181, 252], "327kb": 36, "42m": [36, 101], "362kb": [36, 101], "229k": [36, 101], "06": [36, 101, 177, 240], "682kb": 36, "21": [36, 76, 101, 119, 176, 177, 240, 252, 257, 266], "950k": 36, "19mb": 36, "83m": 36, "61mb": 36, "10mb": 36, "15k": [36, 101], "labels_map": 36, "shirt": [36, 38, 101, 188], "trouser": [36, 38, 101, 188], "pullov": [36, 38, 101, 188], "dress": [36, 38, 101, 188], "coat": [36, 38, 101, 188], "sandal": [36, 38, 101, 188], "sneaker": [36, 38, 101, 188], "ankl": [36, 38, 101, 188], "boot": [36, 38, 101, 176, 188], "figsiz": [36, 177, 188], "col": 36, "sample_idx": [36, 222], "randint": [36, 55, 56, 139, 173, 241], "add_subplot": [36, 188], "titl": [36, 79, 144, 171, 177, 183, 190], "img_dir": 36, "csv": [36, 53, 55, 138], "annotations_fil": 36, "pd": [36, 190], "io": [36, 53, 55, 101, 136, 179, 182, 190], "decode_imag": 36, "customimagedataset": 36, "img_label": 36, "read_csv": 36, "img_path": 36, "iloc": 36, "tshirt1": 36, "tshirt2": 36, "ankleboot999": 36, "read_imag": 36, "reshuffl": 36, "overfit": [36, 97, 112, 121, 145], "train_dataload": 36, "shuffl": [36, 40, 55, 59, 97, 101, 103, 112, 137, 138, 153, 176, 180, 187, 188, 201, 242], "test_dataload": 36, "train_featur": 36, "train_label": 36, "928": [36, 42, 287], "data_tutori": [36, 37, 42, 287], "intro": [37, 38, 42, 59, 106, 107, 132, 154, 177, 188, 231, 239, 287], "quickstart_tutori": [37, 40, 42, 287], "tensorqs_tutori": [37, 42, 43, 84, 287], "tensor_tutori": [37, 49, 51, 52, 61, 287], "transforms_tutori": [37, 42, 44, 287], "autograd_tutori": [37, 46, 49, 51, 61, 287], "optimization_tutori": [37, 39, 42, 287], "saveloadrun_tutori": [37, 41, 42, 287], "sphx_glr_beginner_basics_autogradqs_tutori": [37, 42, 287], "sphx_glr_beginner_basics_buildmodel_tutori": [37, 42, 287], "sphx_glr_beginner_basics_intro": [37, 42, 287], "sphx_glr_beginner_basics_saveloadrun_tutori": [37, 42, 287], "sphx_glr_beginner_basics_transforms_tutori": [37, 42, 287], "sphx_glr_beginner_basics_optimization_tutori": [37, 42, 287], "sphx_glr_beginner_basics_quickstart_tutori": [37, 42, 287], "sphx_glr_beginner_basics_tensorqs_tutori": [37, 42, 287], "sphx_glr_beginner_basics_data_tutori": [37, 42, 287], "suraj": [38, 57, 58, 59, 60, 119, 149, 150, 161], "subramanian": [38, 57, 58, 59, 60, 119, 149, 150, 161], "juarez": 38, "cassi": 38, "breviu": 38, "dmitri": 38, "soshnikov": 38, "ari": 38, "bornstein": 38, "ml": [38, 79, 102, 104, 132, 136, 143, 195, 239, 240], "belong": [38, 144, 195], "cloud": [38, 58, 98, 112, 114, 285], "favorit": [38, 98, 153, 158], "id": [38, 86, 98, 146, 151, 179, 180, 181, 190, 194, 195, 222, 233, 234, 283, 285], "walkthrough": [39, 46, 52, 86, 119], "video": [39, 46, 47, 57, 59, 60, 94, 95, 97, 99, 101, 102, 103, 124, 131, 132, 133, 134, 136, 149, 150, 187, 199], "3blue1brown": [39, 46], "unpredict": [39, 94, 151], "jump": [39, 79, 109, 113, 114, 116, 117, 161, 277], "untrain": 39, "dissimilar": [39, 102, 111], "regress": [39, 112, 185, 252, 265], "nllloss": [39, 106], "classif": [39, 47, 56, 79, 92, 95, 97, 102, 103, 104, 106, 127, 133, 136, 137, 145, 176, 185, 197, 198, 227, 270], "logsoftmax": 39, "deposit": [39, 46], "train_loop": 39, "test_loop": 39, "warmstart": [39, 255, 263, 271, 287], "torchtext": [40, 54, 97, 103, 136], "torchaudio": [40, 54, 97, 103, 133, 136, 138, 176, 187, 205], "cifar": [40, 47, 97, 188], "coco": [40, 197], "conduct": [40, 95, 159, 174, 205], "unpickl": [41, 121, 203], "inferenc": 41, "fail": [41, 94, 102, 113, 121, 159, 171, 176, 178, 182, 192, 194, 203, 220, 221, 241, 251, 282], "inconsist": [41, 121, 159], "legaci": [41, 114, 140], "pickl": [41, 92, 112, 121, 168, 203, 252], "checkpoint": [41, 53, 92, 139, 149, 168, 173, 204, 205, 241, 251, 255, 263, 269, 271, 287], "tip": [41, 56, 98, 111, 188, 255, 263, 271, 287], "943": [42, 240], "ndarrai": [43, 44, 52, 102, 190], "elimin": [43, 119, 147, 155, 159, 160, 176, 194, 198, 217, 221], "overridden": [43, 52, 154, 256], "1200": [43, 252], "manipul": [43, 44, 97, 101, 120, 139, 158, 168], "breez": [43, 52], "subtli": [43, 52], "y1": [43, 197], "y2": 43, "y3": 43, "wise": [43, 52, 79, 102, 106, 141, 153, 159, 162, 165, 194, 195, 267, 281], "z1": [43, 159], "z2": 43, "z3": 43, "aggreg": [43, 46, 97, 119, 161, 190, 213, 257], "operand": [43, 94, 194], "denot": [43, 106, 109, 195, 212, 213, 217], "suffix": [43, 52, 86, 159], "t_": [43, 52], "problemat": [43, 52, 159, 169, 267], "commonli": [44, 53, 73, 92, 99, 104, 120, 173, 176, 183, 187, 200, 241, 258, 267, 272], "hot": [44, 53, 79, 99, 111, 144, 145, 154, 183], "floattensor": [44, 102], "intens": [44, 89, 159, 171, 228, 285], "scatter_": [44, 179], "prop": 46, "proportion": [46, 168], "travers": [46, 181, 242], "resnet18": [46, 162, 176, 187, 190, 219, 281], "height": [46, 50, 99, 102, 190, 191, 197, 248, 282], "3a": [46, 176], "9a": 46, "dq": 46, "bf": 46, "external_grad": 46, "blue": [46, 138, 141, 248], "finetun": [46, 133, 136, 142, 168, 184, 287], "unfrozen": 46, "exclusionari": 46, "revers": [46, 53, 94, 139, 157, 165, 169, 176, 183, 195], "autodiff": [46, 131, 136, 160], "pillow": [47, 97], "opencv": 47, "librosa": 47, "cython": 47, "nltk": 47, "spaci": 47, "viz": [47, 95], "huge": [47, 106, 111, 120, 141, 151, 154], "airplan": [47, 97, 104], "automobil": [47, 97, 104], "bird": [47, 97], "deer": [47, 97], "dog": [47, 97, 104, 197, 250], "frog": [47, 97], "hors": [47, 97], "truck": [47, 97, 104], "3x32x32": 47, "color": [47, 56, 95, 97, 99, 101, 102, 143, 161, 162, 176, 188, 190, 197], "32x32": [47, 50, 97, 104, 114, 188], "extrem": [47, 111, 162, 195], "pilimag": 47, "brokenpipeerror": 47, "fun": [47, 53, 113, 114, 116, 117, 177], "entropi": [47, 56, 97, 99, 103, 141, 270], "learnt": 47, "truth": [47, 79, 114, 197, 220], "okai": 47, "wasn": [47, 105, 108, 194], "energi": [47, 53], "chanc": [47, 53, 104, 161], "hmmm": 47, "plai": [47, 53, 56, 104, 106, 133, 136, 177, 184, 285, 287], "chat": [47, 53, 183], "cifar10_tutori": [47, 49, 51, 61, 287], "sung": 48, "kim": 48, "jenni": 48, "kang": 48, "mytensor": 48, "my_tensor": [48, 121], "parallelli": 48, "getitem": 48, "demo": [48, 136, 174, 187, 240], "cnn": [48, 104, 133, 136, 165, 169, 170, 185, 190, 197, 241], "capsul": 48, "monitor": [48, 112, 153], "output_s": [48, 203], "former_torchi": 48, "parallelism_tutori": 48, "data_parallel_tutori": [48, 49, 51, 83, 287], "neural_networks_tutori": [49, 50, 51, 61, 287], "gentl": [49, 51, 60, 61, 132, 287], "glimps": 50, "convnet": [50, 95, 154, 161, 180], "learning_r": [50, 76, 104, 120], "5x5": [50, 99], "affin": [50, 109, 147, 185, 200, 267, 285], "wx": 50, "fc1": [50, 101, 121, 137, 155, 180, 188, 242, 258], "fc2": [50, 101, 121, 137, 180, 188, 242, 258], "84": [50, 55, 101, 119, 121, 161, 177, 188, 258], "fc3": [50, 101, 121, 188, 258], "c1": [50, 97, 159], "subsampl": 50, "s2": [50, 97, 194], "2x2": [50, 99], "c3": [50, 97], "s4": [50, 97, 194], "f5": [50, 97], "f6": [50, 97], "in_featur": [50, 137, 200, 216, 222, 224, 258], "out_featur": [50, 137, 200, 216, 222, 258], "lenet": [50, 79, 97, 101, 103, 175, 242], "0381": 50, "0495": 50, "0410": 50, "0473": 50, "0440": 50, "2354": 50, "0474": 50, "0454": 50, "1040": 50, "addmmbackward0": 50, "mini": [50, 53, 56, 101, 109, 112, 170, 176, 188, 242], "4d": [50, 162], "nsampl": 50, "nchannel": 50, "least": [50, 79, 102, 121, 143, 145, 151, 161, 171, 176, 183, 194, 234, 252, 286], "2117": 50, "mselossbackward0": 50, "next_funct": [50, 94], "0x7f28fad45360": 50, "0x7f28fad45330": 50, "accumulategrad": 50, "0x7f28fadf1840": 50, "clear": [50, 55, 79, 94, 105, 106, 111, 142, 146, 159, 171, 181, 190, 191, 206, 214, 252, 283], "0039": 50, "0018": 50, "0115": 50, "0059": 50, "0096": 50, "0143": 50, "sub_": 50, "nesterov": [50, 121], "139": [50, 51, 287], "blitz": [51, 83, 114, 144, 145, 183, 188, 287], "matthew": [53, 91, 121], "inkawhich": [53, 56, 79, 89, 91, 121], "movi": [53, 54, 95], "cornel": [53, 54], "dialog": [53, 54], "corpu": [53, 54, 217], "artifici": [53, 104, 254], "intellig": 53, "servic": [53, 176, 241, 272, 285], "onlin": [53, 154, 161, 177, 180], "helpdesk": 53, "bot": 53, "predefin": [53, 104, 112, 154, 242, 267], "restrict": [53, 89, 153, 187, 192, 194, 200, 226], "compani": 53, "IT": 53, "teach": [53, 56, 104, 183], "human": [53, 79, 95, 145, 161, 183, 190, 203], "boom": 53, "hello": [53, 106, 168], "am": [53, 108, 145, 183], "hospit": 53, "lawyer": 53, "friend": [53, 168], "arrest": 53, "kid": 53, "sorri": 53, "san": 53, "francisco": [53, 112], "goodby": [53, 217], "luong": [53, 183], "jointli": [53, 183], "acknowledg": [53, 153], "borrow": [53, 181], "yuan": 53, "kuei": 53, "wu": [53, 140, 201, 206, 216], "ywk991112": 53, "sean": [53, 144, 145, 183], "robertson": [53, 144, 145, 183], "spro": 53, "floydhub": 53, "textutil": 53, "__": [53, 66, 79, 104, 120, 127, 190, 195], "reformat": 53, "rich": [53, 248], "charact": [53, 111, 136, 149, 166, 177, 183, 184, 287], "220": [53, 181], "579": [53, 162], "exchang": [53, 114, 116, 138, 153, 183, 187], "292": [53, 92], "035": 53, "617": 53, "713": [53, 97], "utter": [53, 54], "divers": 53, "variat": [53, 103, 112, 148, 198, 212, 252, 266], "formal": [53, 212, 234], "sentiment": 53, "datafil": 53, "tab": [53, 101, 103, 183, 188, 248], "sentenc": [53, 99, 105, 106, 109, 111, 145, 153, 183, 198, 217], "jsonl": [53, 54], "loadlinesandconvers": 53, "lineid": 53, "characterid": 53, "conversationid": 53, "movieid": 53, "extractsentencepair": 53, "formatted_movie_lin": 53, "unescap": 53, "delimit": 53, "busi": [53, 145, 285], "vocabulari": [53, 97, 99, 111, 141, 144, 217, 267], "implicit": [53, 94, 139, 194, 248, 267], "discret": [53, 177, 241], "voc": 53, "addword": 53, "addsent": 53, "infrequ": 53, "unicod": [53, 144, 145, 183], "ascii": [53, 111, 144, 145, 183], "unicodetoascii": 53, "letter": [53, 144, 145, 183], "lowercas": [53, 112, 183], "punctuat": [53, 183], "normalizestr": 53, "aid": [53, 121, 195, 256], "max_length": [53, 222], "filterpair": 53, "stackoverflow": [53, 144, 145, 183, 252], "518232": [53, 144, 145, 183], "2809427": [53, 144, 145, 183], "tactic": 53, "benefici": [53, 99, 132, 178, 216, 221, 267, 270, 285], "soften": 53, "difficulti": [53, 177], "approxim": [53, 95, 138, 147, 158, 161, 165, 175, 178, 240, 254, 267], "min_count": 53, "massag": 53, "accommod": 53, "shorter": [53, 55, 112, 183, 187, 212], "eos_token": 53, "english": [53, 106, 109, 144, 166, 183], "indexesfromsent": 53, "zeropad": 53, "inputvar": 53, "outputvar": 53, "pad_token": 53, "batch2traindata": 53, "bunch": [53, 144, 145, 248, 281], "aforement": [53, 86, 104, 198, 242, 277], "brain": 53, "sutskev": 53, "discov": [53, 117, 153, 180, 198, 221], "accomplish": [53, 56, 144, 153, 165, 224, 236, 252, 266], "jeddy92": 53, "ts_seq2seq_intro": 53, "invent": [53, 56, 177], "cho": 53, "2014": [53, 56], "bidirect": [53, 154], "gru": [53, 99, 144, 145, 183], "colah": 53, "2015": [53, 104], "fp": [53, 92, 134, 165], "hidden_s": 53, "unpack": [53, 227], "pack_padded_sequ": 53, "pad_packed_sequ": 53, "input_seq": 53, "input_length": [53, 138], "n_layer": [53, 173], "num_direct": 53, "sole": [53, 187], "combat": [53, 111], "bahdanau": [53, 183], "groundwork": 53, "h_t": [53, 109], "bar": [53, 86, 180, 190, 192, 224, 248], "attn": [53, 183], "softmax": [53, 99, 104, 109, 111, 112, 144, 176, 179, 181, 188, 198, 217, 240], "submodul": [53, 89, 99, 113, 139, 169, 182, 221, 224], "unidirect": 53, "input_step": 53, "last_hidden": 53, "encoder_output": 53, "num_word": 53, "masknllloss": 53, "clever": [53, 106], "teacher": [53, 104, 131, 136, 183], "teacher_forcing_ratio": [53, 183], "instabl": [53, 183], "craft": [53, 79, 111, 145], "explod": [53, 99], "essenc": [53, 108], "nan": [53, 213, 283], "overshoot": 53, "steep": 53, "cliff": 53, "goodfellow": [53, 56, 79], "2016": 53, "www": [53, 183, 197], "deeplearningbook": 53, "sos_token": 53, "realiti": [53, 56, 79, 108, 112, 182, 266], "tie": 53, "trainit": [53, 183], "n_iter": 53, "explanatori": 53, "lift": [53, 226], "tarbal": 53, "NOT": [53, 89, 121, 146, 148, 149, 151, 168], "decoder_output": 53, "greedysearchdecod": 53, "searcher": 53, "evaluateinput": 53, "press": [53, 56], "gracefulli": [53, 57, 180, 234], "prompt": [53, 54, 205, 282], "regardless": [53, 102, 103, 160, 171, 180, 191], "attn_model": 53, "concat": [53, 108], "loadfilenam": 53, "save_dir": [53, 190], "model_nam": [53, 138, 219, 222, 241], "corpus_nam": [53, 54], "encoder_n_lay": 53, "decoder_n_lay": 53, "_checkpoint": [53, 138], "tar": [53, 121], "checkpoint_it": 53, "folk": 53, "congratul": [53, 117, 142, 144, 195, 254, 268, 269, 270], "tailor": [53, 153, 171, 195, 285], "cool": [53, 56, 168, 170, 226], "chatbot_tutori": [53, 122, 287], "wen": [54, 192, 194, 280], "uninstal": 54, "reinstal": 54, "torchdata": 54, "chatbot": [54, 122, 287], "browser": [54, 101, 103, 114, 187, 235], "click": [54, 101, 112, 114, 187, 188, 195, 248], "subfold": 54, "visit": [54, 205, 242], "in_": 54, "_colab": 54, "_name": 54, "mount": [54, 203], "gdrive": 54, "upload": [54, 235], "button": [54, 56, 114, 187, 248], "rerun": [54, 146, 168], "evolv": [54, 159, 165], "drop": [54, 99, 101, 114, 149, 168, 181, 205, 240], "t4": 54, "sasank": [55, 127], "chilamkurthi": [55, 127], "preprocess": [55, 104, 112, 136, 144, 183, 190], "scikit": 55, "facial": 55, "pose": [55, 235, 236], "landmark": 55, "dlib": 55, "tag": [55, 99, 107, 111, 194, 204, 256, 265], "image_nam": 55, "part_0_x": 55, "part_0_i": 55, "part_1_x": 55, "part_1_i": 55, "part_2_x": 55, "part_67_x": 55, "part_67_i": 55, "0805personali01": 55, "83": [55, 240, 266], "134": 55, "1084239450_e76e00b7e7": 55, "70": [55, 162, 177, 181, 222, 252], "236": [55, 78], "257": [55, 252], "312": [55, 162, 282], "person": [55, 195, 197], "img_nam": 55, "__len__": [55, 112, 144, 153, 197], "__getitem__": [55, 112, 144, 153, 197], "randomcrop": 55, "crop": [55, 97, 143, 185, 197], "ax": [55, 106, 109, 134, 136, 183, 184, 188, 287], "tsfm": 55, "transformed_sampl": 55, "safer": [55, 252], "stick": [55, 153, 162], "lose": [55, 57, 102, 104, 161], "collate_fn": 55, "indent": [55, 252], "imagefold": [55, 56, 97], "ant": [55, 127], "xxy": 55, "jpeg": 55, "xxz": 55, "bee": [55, 127], "nsdf3": 55, "asd932_": 55, "data_transform": 55, "hymenoptera_dataset": 55, "hymenoptera_data": 55, "dataset_load": 55, "data_loading_tutori": [55, 122, 287], "nathan": [56, 79, 89, 91], "celebr": [56, 133, 136], "pictur": [56, 79, 139, 141, 183], "thorough": 56, "shed": [56, 250], "spend": [56, 86, 168, 252, 257], "sake": [56, 154, 175, 178, 268, 269], "ian": 56, "constantli": [56, 79, 178], "outsmart": 56, "equilibrium": 56, "perfect": [56, 94, 151, 199, 214], "notat": [56, 79], "chw": [56, 176], "3x64x64": 56, "thought": [56, 87, 213, 266], "latent": [56, 111], "p_": 56, "p_g": 56, "minimax": 56, "logd": 56, "underset": 56, "mathbb": [56, 89, 165, 178], "sim": 56, "radford": 56, "unsupervis": 56, "drawn": [56, 112, 177], "rgb": [56, 97, 104, 161, 176, 190], "volum": [56, 137], "inlin": [56, 94, 97, 101, 103, 146, 159, 191, 212, 216, 272], "manualse": 56, "10000": [56, 97, 101, 173, 177, 181, 252, 266], "dataroot": 56, "image_s": [56, 282], "spatial": [56, 95, 97, 99, 133, 136, 184, 191, 197, 287], "64x64": 56, "nc": [56, 216], "nz": 56, "ngf": 56, "ndf": 56, "num_epoch": [56, 177], "0002": [56, 177], "ngpu": 56, "celeb": 56, "img_align_celeba": 56, "celeba": 56, "188242": 56, "173822": 56, "284702": 56, "537394": 56, "subdirectori": [56, 197], "stdev": 56, "02": [56, 159, 177, 181, 184, 207, 240, 274, 287], "weights_init": 56, "reiniti": 56, "criteria": 56, "netg": 56, "netd": 56, "worth": [56, 168, 171, 180], "critic": [56, 89, 139, 150, 171, 201, 233, 266], "batchnorm": [56, 59, 121, 162, 191, 219, 267, 269], "downsampl": [56, 97, 161], "promot": 56, "healthi": 56, "bceloss": 56, "ell": [56, 183], "l_1": 56, "l_n": 56, "quad": [56, 178], "y_n": 56, "bce": 56, "gt": [56, 119], "fixed_nois": 56, "establish": 56, "Be": [56, 94], "somewhat": [56, 171], "collaps": 56, "ganhack": 56, "secondli": 56, "loss_d": 56, "loss_g": 56, "versu": [56, 79, 136, 144, 228], "anim": [56, 97], "music": 56, "dcgan_faces_tutori": [56, 122, 287], "mingpt": [57, 58, 59, 60, 149, 150], "aw": [57, 59, 137, 149, 150, 271], "p3": [57, 58, 59, 67, 120, 149, 150], "8xlarg": [57, 59], "youtub": [57, 58, 59, 60, 94, 95, 97, 99, 101, 102, 103, 136, 149, 150, 199], "failur": [57, 113, 150, 151, 159, 194, 203, 231, 282], "disrupt": [57, 203, 280], "suscept": [57, 236], "elast": [57, 138, 151, 236], "attempt": [57, 94, 102, 106, 138, 171, 194, 203, 228, 256, 280], "minutia": 57, "multinod": [57, 149, 195], "load_snapshot": 57, "snapshot_path": 57, "train_step": 57, "should_checkpoint": 57, "save_snapshot": 57, "membership": [57, 150], "intervent": [57, 104, 277], "multigpu": [57, 59, 150], "multigpu_torchrun": 57, "envvari": 57, "ddp_setup": [57, 59], "12355": [57, 59, 137, 151, 233, 234], "local_rank": [57, 138, 150, 151, 173, 203], "gpu_id": [57, 59, 150], "_save_snapshot": 57, "model_st": 57, "epochs_run": 57, "_load_snapshot": 57, "max_epoch": 57, "_run_epoch": [57, 59], "total_epoch": [57, 59], "argv": [57, 59, 241, 283], "save_everi": [57, 59], "standalon": [57, 201, 251, 279], "nproc_per_nod": [57, 138, 139, 151, 173, 203, 236], "migrat": [57, 59, 267], "fault": [58, 59, 60, 92, 149, 150, 171], "toler": [58, 59, 60, 92, 94, 149, 150], "deploi": [58, 114, 130, 136, 143, 150, 175, 176], "cluster": [58, 101, 138, 143, 149, 150, 151, 153, 234, 236, 276], "torchrun": [58, 64, 138, 139, 149, 150, 173, 201, 203, 236], "amazon": 58, "ec2": [58, 137], "gentli": 58, "gpt": [58, 137, 149, 150, 173], "stat": [59, 138, 146, 177, 187, 195, 257, 266], "replica": [59, 60, 64, 137, 139, 151, 153, 286], "convert_sync_batchnorm": 59, "single_gpu": 59, "mytraindataset": 59, "distributedsampl": [59, 60, 137, 138], "destroy_process_group": [59, 137, 138, 140, 151, 173, 201, 233, 234], "excess": [59, 86, 141, 192, 241, 251], "train_data": 59, "train_dataset": [59, 104, 138, 222, 241, 275], "set_epoch": [59, 137, 138], "b_sz": 59, "_run_batch": 59, "ckp": 59, "_save_checkpoint": 59, "load_train_obj": 59, "prepare_dataload": 59, "shorthand": 59, "ring": [60, 141, 201], "older": [60, 119, 120, 155, 170, 171, 178, 205], "destroi": [60, 94, 157], "soumith": [61, 153], "chintala": [61, 153], "scientif": [61, 99, 102, 120], "cifar10": [61, 92, 97, 187, 241, 270, 275], "mobil": [62, 63, 104, 200, 207, 209, 210, 218, 227, 229, 246, 247, 255], "executorch": [62, 63, 136, 209, 210, 218, 225, 227, 229, 244, 245, 246, 247, 249, 282], "Will": [64, 139, 191], "constabl": [64, 139], "wei": [64, 139], "feng": [64, 139, 161, 174, 191], "categor": [64, 86, 101, 154, 179, 181, 195], "navig": [64, 187, 188, 248], "technologi": [64, 104, 136, 153, 198, 271], "infrastructur": 64, "fsdp2": [64, 136, 137], "tp": [64, 203, 236], "pp": 64, "dtensor": [64, 141, 235, 271], "devicemesh": [64, 141, 271], "reshard": [64, 139, 234], "mesh": [64, 132, 139, 141, 236], "recip": [64, 119, 132, 136, 199, 211, 227, 230, 232, 235, 239, 248, 250, 251, 252, 253, 254, 256, 257, 263, 264, 268, 269, 270, 272, 274, 276, 277, 278, 279, 280, 281, 282, 286, 287], "c10d": [64, 151, 174, 203, 267], "all_gath": [64, 137, 138, 153, 174], "p2p": 64, "isend": [64, 153], "guidelin": [64, 267], "fullyshardeddataparallel": [64, 137, 138, 139, 233, 234], "torchtitan": [64, 173, 201], "polynomi": [66, 67, 69, 71, 72, 73, 76, 77, 120], "pi": [66, 67, 71, 72, 73, 76, 77, 94, 120, 134, 178], "euclidean": [66, 67, 71, 72, 73, 76, 77, 94, 104, 120], "polynomial_autograd": [66, 68, 287], "bx": [67, 120], "cx": [67, 106, 120], "p_3": [67, 120], "5x": [67, 120], "legendr": [67, 120], "polynomial_custom_funct": [67, 68, 287], "examples_autograd": [68, 287], "strang": [69, 89, 120], "fifth": [69, 120], "tough": [69, 120], "dynamic_net": [69, 74, 287], "member": [71, 120, 220, 221], "polynomial_modul": [71, 74, 287], "2000": [72, 76, 97, 101, 104, 120, 177, 188, 190, 194, 203, 252, 286], "flaten": [72, 120], "1d": [72, 99, 120, 226, 267], "mse": [72, 99, 104, 120], "polynomial_nn": [72, 74, 287], "polynomial_optim": [73, 74, 287], "examples_nn": [74, 287], "99": [76, 120, 177, 181], "2489": 76, "316255054544": 76, "199": 76, "1657": 76, "4393744631789": 76, "299": [76, 190], "1104": 76, "9075728937432": 76, "399": 76, "737": 76, "8096497696661": 76, "499": 76, "493": [76, 252], "8374821337443": 76, "599": 76, "331": 76, "64142374874194": 76, "699": 76, "223": [76, 285], "77400664837796": 76, "799": 76, "152": [76, 142], "01127971470316": 76, "899": [76, 159], "104": [76, 181], "25006804282617": 76, "999": [76, 101, 188], "44993406563637": 76, "1099": 76, "51": [76, 162, 177, 181, 240], "26780466278963": 76, "1199": 76, "15193770211541": 76, "1299": 76, "74055665753391": 76, "1399": 76, "462605012969483": 76, "1499": 76, "27261801852536": 76, "1599": 76, "47460905591382": 76, "1699": 76, "605050090346946": 76, "1799": 76, "355093093101797": 76, "1899": 76, "518856321795079": 76, "1999": 76, "959028616778365": 76, "016850889652954296": 76, "8277664062595561": 76, "002907058865148767": 76, "08920902771539052": 76, "linspac": [76, 94, 120], "1e": [76, 92, 99, 120, 139, 147, 177, 179, 181, 200, 201, 222], "y_pred": [76, 120, 240], "grad_y_pr": [76, 120], "grad_c": [76, 120], "grad_d": [76, 120], "234": [76, 78, 287], "polynomial_numpi": [76, 78, 287], "biggest": [77, 203], "polynomial_tensor": [77, 78, 287], "examples_tensor": [78, 287], "appreci": [79, 105], "overlook": [79, 252], "secur": [79, 187], "vulner": 79, "surpris": [79, 169], "impercept": 79, "perturb": [79, 95], "drastic": [79, 194, 281], "overarch": 79, "misclassif": 79, "alter": [79, 121, 205, 258, 269], "har": 79, "remark": [79, 192], "mathbf": 79, "nabla_": [79, 106], "007": 79, "misclassifi": 79, "gibbon": 79, "clearli": [79, 143, 203, 212, 213], "pretrained_model": [79, 190], "fgsm_attack": 79, "clean": [79, 137, 138, 144, 151, 168, 173, 195, 201, 212], "data_grad": 79, "_imag": 79, "_grad": 79, "strength": [79, 188], "_data": 79, "trend": [79, 87, 187], "curv": [79, 187, 188], "linearli": 79, "05": [79, 138, 177, 181, 200, 240], "lunch": 79, "BUT": [79, 108], "percept": 79, "tradeoff": [79, 134, 136, 142, 143, 153, 177, 272], "evid": [79, 140], "subsequ": [79, 95, 104, 121, 137, 144, 154, 179, 181, 183, 192, 203, 205, 267, 270, 276, 285], "defend": 79, "nip": 79, "defens": 79, "competit": [79, 155, 170, 285], "defenc": 79, "dirti": 79, "fgsm_tutori": [79, 122, 287], "torchvision_tutori": [80, 184, 197, 287], "nn_tutori": [82, 112, 122, 287], "anupam": [86, 87], "bhatnagar": [86, 87], "offici": [86, 117, 140, 153, 178, 192, 194, 241], "holistictraceanalysi": 86, "env_nam": [86, 177], "deactiv": 86, "trace_dir": 86, "trace_analysi": 86, "traceanalysi": 86, "engag": [86, 220], "datafram": [86, 143, 190], "time_spent_df": 86, "get_temporal_breakdown": 86, "enqueu": 86, "slowdown": [86, 138, 142], "consecut": [86, 145, 154, 161, 171, 176, 190, 285], "insuffici": [86, 178], "delai": [86, 151, 179, 195], "stall": [86, 203, 285], "gap": [86, 89], "nanosecond": 86, "consecutive_kernel_delai": 86, "get_idle_time_breakdown": 86, "idle_time_df": 86, "show_idle_interval_stat": 86, "percentag": [86, 175, 217], "visualize_pctg": 86, "comm": 86, "comp": 86, "proport": [86, 168], "pie": [86, 168], "chart": [86, 101, 279], "kernel_type_metrics_df": 86, "kernel_metrics_df": 86, "get_gpu_kernel_breakdown": 86, "bottleneck": [86, 119, 138, 141, 150, 168, 171, 179, 187, 192, 230, 248], "plotli": [86, 95, 143], "hover": [86, 143, 176], "pan": 86, "num_kernel": 86, "duration_ratio": 86, "preced": [86, 94, 102, 147, 154, 191, 219], "lab": [86, 188], "image_render": 86, "jupyterlab": 86, "gpu_kernel_breakdown": 86, "tflop": 86, "oversubscrib": 86, "unresolv": [86, 214], "extent": [86, 102], "overlap_df": 86, "get_comm_comp_overlap": 86, "h2d": [86, 232], "d2h": [86, 232], "d2d": 86, "memcpi": 86, "memset": 86, "outstand": 86, "generate_trace_with_count": 86, "_with_count": 86, "screenshot": [86, 248], "profil": [86, 122, 130, 131, 134, 136, 137, 171, 182, 184, 216, 240, 252, 255, 263, 267, 271, 287], "portion": [86, 168, 171, 173, 175, 203, 240, 248, 266], "get_memory_bw_summari": 86, "get_queue_length_summari": 86, "get_memory_bw_time_seri": 86, "get_queue_length_time_seri": 86, "mem_bw_summari": 86, "queue_len_summari": 86, "mem_bw_seri": 86, "queue_len_seri": 86, "get_queue_length_seri": 86, "25th": 86, "50th": 86, "75th": 86, "percentil": 86, "cudalaunchkernel": 86, "cudamemcpyasync": 86, "cudamemsetasync": 86, "kernel_info_df": 86, "get_cuda_kernel_launch_stat": 86, "short": [86, 99, 102, 105, 107, 110, 132, 145, 153, 169, 171, 177, 183, 185, 194, 267, 270, 287], "outlier": [86, 178], "microsecond": [86, 160, 182, 252], "cutoff": 86, "runtime_cutoff": 86, "launch_delay_cutoff": 86, "occasion": [87, 180, 183], "hta": [87, 187], "tracediff": 87, "cumul": [87, 177, 178], "compare_trac": 87, "ops_diff": 87, "absent": 87, "visualize_counts_diff": 87, "visualize_duration_diff": 87, "ten": [87, 97, 101, 104], "df": 87, "compare_traces_output": 87, "sort_valu": 87, "diff_count": 87, "largest": [87, 112, 190], "diff_dur": 87, "differer": 87, "overshadow": 87, "profilerstep": [87, 159], "loc": [87, 177, 251], "trace_diff_demo": 87, "learning_hybrid_frontend_through_example_tutori": [88, 89, 90, 287], "hybrid_frontend": [88, 90, 287], "introduction_to_hybrid_frontend_tutori": 88, "shini": 89, "enjoi": [89, 161], "aquaint": 89, "opportun": [89, 114, 154, 195], "bridg": [89, 235], "refin": [89, 194], "gradual": [89, 168], "proven": [89, 215], "resouc": 89, "consumpt": [89, 97, 99, 101, 103, 119, 138, 141, 143, 159, 171, 175, 187, 267, 271, 286], "discrep": [89, 219], "interwork": 89, "intrus": [89, 168], "decor": [89, 94, 117, 132, 146, 161, 179, 192, 267, 280], "broken": [89, 108], "epsilon": [89, 147, 154, 177, 178], "biggl": 89, "lfloor": 89, "prod_": 89, "biggr": 89, "rfloor": 89, "hline": 89, "190": [89, 181, 190, 252], "4377": 89, "59051": 89, "accomod": [89, 149], "scriptmodul": 89, "script_method": 89, "tracedmodul": 89, "onnx": [89, 118, 130, 136, 287], "dramat": [92, 112], "industri": [92, 95], "analysi": [92, 94, 103, 136, 137, 158, 159, 182, 187, 190, 194, 201, 205, 248, 266, 282], "slight": [92, 140, 148, 240, 253], "trial": [92, 143, 251], "train_cifar": 92, "data_dir": [92, 138], "l2": [92, 99, 175], "get_checkpoint": 92, "as_directori": 92, "checkpoint_dir": [92, 233, 234], "pkl": [92, 112], "rb": [92, 112], "checkpoint_st": 92, "start_epoch": 92, "net_state_dict": 92, "optimizer_state_dict": [92, 121, 233, 234, 241], "80": [92, 143, 144, 162, 177, 181, 282, 283], "luckili": [92, 159, 194, 195, 214, 252], "trainload": [92, 188], "fraction": [92, 252], "checkpoint_data": 92, "tempfil": [92, 151, 283], "temporarydirectori": 92, "wb": [92, 112], "dump": [92, 159, 228, 235], "from_directori": 92, "val_loss": [92, 112, 138], "val_step": 92, "wast": [92, 187, 217, 220, 224, 252, 256, 258, 272], "lastli": [92, 168, 194], "loguniform": [92, 252], "ashaschedul": 92, "functool": [92, 137, 138, 160], "gpus_per_tri": 92, "resources_per_tri": 92, "num_sampl": [92, 138], "checkpoint_at_end": 92, "000668163": 92, "31479": 92, "0977": 92, "0331514": 92, "31605": 92, "0983": 92, "000150295": 92, "30755": 92, "1023": 92, "0128248": 92, "66912": 92, "4391": 92, "00464561": 92, "7316": 92, "3463": 92, "00031556": 92, "19409": 92, "1736": 92, "00574329": 92, "85679": 92, "3368": 92, "00325652": 92, "30272": 92, "0984": 92, "000342987": 92, "76044": 92, "003734": 92, "53101": 92, "4761": 92, "0037339984519545164": 92, "5310075663924216": 92, "4737": 92, "hyperparameter_tuning_tutori": [92, 122, 287], "tensorboard": [94, 95, 96, 97, 98, 99, 102, 103, 134, 136, 143, 184, 255, 257, 263, 271, 287], "decis": [94, 107, 110, 154, 171, 194, 212, 213, 215, 228, 267, 277, 283, 287], "branch": [94, 113, 194, 197, 227, 241], "rigidli": 94, "sign": [94, 169], "contextu": 94, "nudg": [94, 97, 103], "calculu": 94, "drill": [94, 266], "machineri": [94, 252], "took": [94, 153, 158, 168, 182, 192, 203, 280], "ins": [94, 192], "ideal_output": 94, "layer2": 94, "blow": 94, "b1": 94, "b2": 94, "temporarili": 94, "enable_grad": 94, "throw": [94, 102, 140, 179], "sin_": 94, "handi": [94, 97, 112, 153, 161, 188], "bake": [94, 191], "chrome": [94, 171, 182, 187, 257], "hessian": [94, 131, 136, 184, 226, 287], "twice": [94, 112, 148, 171, 205, 240, 252, 257, 286], "jvp": [94, 157, 160], "vjp": [94, 160, 165, 226], "vhp": [94, 131, 136, 184, 287], "hvp": [94, 131, 136, 184, 287], "autogradyt_tutori": [94, 96, 100, 287], "latin": [95, 112], "increasingli": [95, 198], "ai": [95, 106, 107, 112, 137, 143, 161, 183, 203, 216, 228, 234, 241, 250, 267], "review": [95, 149, 166, 194, 212, 213, 215, 221, 227, 241, 272], "neuron": [95, 104, 250], "analag": 95, "ablat": 95, "permut": [95, 104, 162, 176, 190, 239], "valuabl": [95, 104, 183, 217, 239], "certainli": [95, 158, 213, 215], "attr": [95, 174, 228], "widget": 95, "toolset": 95, "flask": 95, "renam": [95, 200], "virtual": [95, 171, 174, 207, 256], "recogn": [95, 99, 174, 191, 254], "224x224": [95, 176], "visualize_image_attr": 95, "integrated_gradi": 95, "strongest": [95, 97, 99, 103], "visualize_image_attr_multipl": 95, "heat": [95, 176], "upsampl": 95, "interpol": 95, "layerattribut": 95, "teapot": 95, "trilobit": 95, "fossil": 95, "attributionvisu": 95, "imagefeatur": 95, "heatmap": 95, "captumyt": [95, 100, 287], "introyt": [96, 100, 199, 287], "introyt1_tutori": [96, 97, 100, 287], "tensors_deeper_tutori": [96, 100, 102, 287], "modelsyt_tutori": [96, 99, 100, 287], "tensorboardyt_tutori": [96, 100, 101, 287], "trainingyt_tutori": 96, "captumyt_tutori": 96, "captum": [96, 255, 263, 271, 287], "sphx_glr_beginner_introyt_introyt_index": [96, 100, 287], "sphx_glr_beginner_introyt_modelsyt_tutori": [96, 100, 287], "sphx_glr_beginner_introyt_autogradyt_tutori": [96, 100, 287], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [96, 100, 287], "sphx_glr_beginner_introyt_captumyt": [96, 100, 287], "sphx_glr_beginner_introyt_introyt1_tutori": [96, 100, 287], "sphx_glr_beginner_introyt_trainingyt": [96, 100, 287], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [96, 100, 287], "5x3": 97, "helpfulli": 97, "prng": 97, "r3": 97, "r1": 97, "r2": 97, "trigonometr": [97, 102], "singular": [97, 169, 182, 281], "decomposit": [97, 117, 139, 159], "diagram": [97, 178], "earliest": 97, "driver": [97, 187], "explos": 97, "handwritten": [97, 137], "abridg": 97, "artifact": [97, 149, 194, 276, 277, 281], "gist": 97, "tile": [97, 101, 103, 190, 222, 228], "hasn": 97, "shouldn": [97, 175], "center": [97, 99, 103, 178, 187, 267], "concatdataset": 97, "trainset": [97, 188], "50000": [97, 112, 177], "4914": 97, "4822": 97, "4465": 97, "2470": 97, "2435": 97, "2616": 97, "rotat": [97, 101, 185, 188], "vehicl": [97, 181], "filesystem": [97, 153, 204], "told": [97, 177], "strip": [97, 222, 266], "ingredi": 97, "inner": [97, 171, 177], "235": [97, 119], "940": 97, "6000": [97, 101, 177], "8000": [97, 101, 112, 177, 266], "573": 97, "507": 97, "12000": [97, 101, 177], "442": 97, "378": 97, "364": 97, "319": [97, 240, 257], "284": [97, 181], "267": 97, "monoton": 97, "descend": 97, "memor": 97, "roughli": [97, 105, 120, 138, 151, 159, 267], "brad": 98, "heintz": 98, "introyt_index": [98, 100, 199, 287], "lin": [99, 112], "nearbi": 99, "lenet5": 99, "1x32x32": 99, "liken": 99, "3x5": 99, "presenc": [99, 192, 194, 250], "6x28x28": 99, "resolut": [99, 190], "6x14x14": 99, "sought": 99, "3x3": 99, "16x12x12": 99, "16x6x6": 99, "576": 99, "edg": [99, 114, 120, 136, 158, 187, 200, 254, 282], "instrument": [99, 158, 271], "dna": 99, "nucleotid": 99, "sort": [99, 105, 109, 119, 176, 198, 257, 267, 283], "moder": 99, "beyond": [99, 102, 108, 174, 175, 267], "scope": [99, 102, 108, 119, 142, 146, 194, 248, 272], "tagger": [99, 105], "noun": 99, "verb": 99, "vocab_s": [99, 139, 173, 241], "tagset_s": 99, "log_softmax": [99, 112, 137, 180, 242], "decod": [99, 105, 138, 173, 181, 182, 198, 205, 251, 282], "transformerencod": [99, 198], "transformerdecod": [99, 198], "subcompon": [99, 192], "transformerencoderlay": [99, 182, 198], "transformerdecoderlay": [99, 173, 198], "twin": 99, "maxpool": 99, "quadrant": 99, "6x6": 99, "vanish": [99, 106], "offset": [99, 195, 204, 222, 233], "neighborhood": 99, "sometim": [99, 102, 120, 142, 148, 150, 151, 154, 160, 178, 181, 183, 194, 205, 214, 215, 267], "suffer": [99, 187], "steepest": 99, "feasibl": [99, 137, 139], "hardtanh": 99, "886": 100, "874": [100, 101, 287], "trainingyt": [100, 103, 287], "garment": 101, "summarywrit": [101, 188, 265], "tb": [101, 282], "gfile": 101, "tensorflow_stub": 101, "training_set": 101, "validation_set": 101, "training_load": 101, "validation_load": 101, "matplotlib_imshow": [101, 188], "one_channel": [101, 188], "unnorm": [101, 188], "npimg": [101, 188], "grei": [101, 188], "datait": [101, 188], "img_grid": [101, 188], "make_grid": [101, 188], "164k": 101, "43": [101, 177, 240, 252], "600kb": 101, "393k": 101, "01mb": 101, "41m": 101, "63mb": 101, "15m": 101, "53mb": 101, "5mb": 101, "66": [101, 137, 177, 240, 252], "0mb": [101, 286], "82": [101, 176, 177, 240, 257], "8mb": 101, "325kb": 101, "361kb": 101, "680kb": 101, "918k": 101, "62mb": 101, "93m": 101, "07mb": 101, "add_imag": [101, 188], "flush": [101, 251, 265], "log_dir": [101, 143, 188], "writer": [101, 144, 176, 177, 188, 203, 233, 265], "fashion_mnist_experiment_1": [101, 188], "logdir": [101, 187, 188, 265], "6006": [101, 187, 188, 265], "efficaci": 101, "running_loss": [101, 188], "running_vloss": 101, "eg": [101, 139], "regularis": 101, "vdata": 101, "vinput": 101, "vlabel": 101, "voutput": 101, "vloss": 101, "avg_loss": 101, "avg_vloss": 101, "add_scalar": [101, 188, 265], "3000": [101, 177, 188, 194, 282], "7000": [101, 177], "9000": [101, 177], "11000": [101, 177], "13000": [101, 177], "14000": [101, 177], "15000": [101, 177], "add_graph": [101, 188], "add_embed": [101, 188], "select_n_random": [101, 188], "perm": [101, 188], "randperm": [101, 188], "class_label": [101, 188, 190], "label_img": [101, 188], "projector": 101, "toggl": [101, 204, 286], "night": [101, 188], "icon": 101, "dark": [101, 190], "upack": 102, "attach": [102, 178, 285], "terminologi": [102, 108], "likewis": [102, 168], "fctori": 102, "assur": [102, 171], "random1": 102, "random3": 102, "random2": 102, "random4": 102, "rng": [102, 153], "_like": [102, 162], "rand_lik": 102, "int16": 102, "cue": 102, "intent": [102, 213, 234], "subtract": [102, 104, 267], "2x4": 102, "1x4": 102, "honor": 102, "3rd": [102, 139, 146, 228, 241], "2nd": [102, 109, 139, 146, 180, 217], "hundr": [102, 132, 141, 190, 195], "bitwis": [102, 251], "inventori": [102, 103], "occupi": [102, 248], "discard": [102, 137, 138, 187, 257, 266], "underscor": 102, "deepli": 102, "nor": [102, 153, 200, 212, 285], "mid": 102, "someplac": 102, "ram": [102, 138, 171, 195, 256], "colloqui": 102, "fragil": 102, "robustli": [102, 116], "whichev": 102, "acquir": [102, 121, 175, 177, 181], "thrown": [102, 215, 227], "226": 102, "zeroth": 102, "bracket": [102, 200], "rescu": 102, "squeeze_": 102, "unsqueeze_": 102, "radic": 102, "parenthes": 102, "comma": 102, "convinc": [102, 168], "kinship": 102, "autom": [103, 120, 143, 158, 162, 190], "outcom": [103, 143, 203], "saniti": [103, 143, 177, 190], "nb": [103, 226], "chose": [103, 176], "saved_model": 103, "garmentclassifi": 103, "alexandro": 104, "chariton": 104, "computation": [104, 190], "lightweight": [104, 131, 136, 175, 251], "drone": 104, "phone": [104, 114], "4gb": [104, 168, 176], "3072": [104, 222], "satur": [104, 251], "held": [104, 144, 180], "greedi": [104, 154, 178], "num_images_to_keep": 104, "50_000": [104, 177], "test_dataset": 104, "10_000": 104, "extractor": [104, 190], "emploi": [104, 183, 187, 198, 233], "train_load": [104, 137, 138, 180, 187, 241, 242, 275], "detriment": 104, "workload": [104, 119, 132, 139, 150, 151, 187, 195, 207, 216, 233, 236, 240, 241, 285], "test_load": [104, 137, 180, 242], "sensit": [104, 149, 157], "conclud": [104, 148, 153, 194], "interven": [104, 194], "soft": [104, 178], "mistaken": 104, "alon": [104, 121, 141, 183, 188], "exploit": [104, 161, 183], "meaningfulli": 104, "temperatur": 104, "smoother": 104, "soft_target_loss_weight": 104, "ce_loss_weight": 104, "train_knowledge_distil": 104, "75": [104, 127, 137], "ce": [104, 183], "coeffici": 104, "convei": 104, "naiv": [104, 142, 160, 170, 182, 217], "rational": 104, "capac": [104, 149, 177, 190, 267], "cosineembeddingloss": 104, "obvious": [104, 108, 181], "somehow": [104, 111, 195], "hidden_represent": 104, "hidden_representation_s": 104, "avg_pool1d": 104, "modifiedlightnnregressor": 104, "cosineloss": 104, "wiggl": 104, "hinton": 104, "vinyal": 104, "dean": 104, "workshop": 104, "romero": 104, "balla": 104, "kahou": 104, "chassang": 104, "gatta": 104, "bengio": 104, "fitnet": 104, "thin": [104, 204], "confer": 104, "knowledge_distillation_tutori": [104, 122, 287], "kit": 105, "dynet": [105, 107], "opposit": [105, 171, 213], "theano": [105, 107], "kera": [105, 107, 120], "constitu": 105, "bottom": [105, 187, 190, 194, 248], "green": [105, 138, 141, 188], "fat": 105, "exception": 105, "entiti": [105, 111, 195, 269, 270], "recognit": [105, 136, 228, 267], "ner": 105, "sound": [105, 108, 120], "scari": 105, "viterbi": [105, 109], "sum_": [105, 111, 178], "psi_i": 105, "sum_i": 105, "partit": [105, 136, 141, 146, 153, 234, 267], "emiss": 105, "timestep": [105, 109, 144, 145, 178], "textbf": 105, "psi_": 105, "y_i": [105, 109], "rightarrow": [105, 153, 178], "x_i": [105, 106], "tran": [105, 190], "h_i": [105, 109], "michael": [105, 230, 231, 239, 251, 278, 283], "collin": 105, "robert": [105, 106, 108, 109, 111], "guthri": [105, 106, 108, 109, 111], "prepare_sequ": 105, "anywai": [105, 108, 171], "gold": [105, 183], "perceptron": 105, "score_sent": 105, "advanced_tutori": [105, 107, 110, 287], "workhors": 106, "2x5": 106, "acx": 106, "ac": [106, 190], "sigma": [106, 177], "plenti": 106, "peopl": [106, 107, 127], "shy": 106, "linearit": 106, "sum_j": 106, "x_j": 106, "unseen": [106, 111], "eta": 106, "vari": [106, 139, 147, 161, 171, 183, 192, 194, 198, 214, 217, 230, 251], "spanish": [106, 144, 145], "bow": 106, "vocab": [106, 109, 141], "word_to_ix": [106, 109, 111], "bowclassifi": 106, "creo": 106, "bigger": [106, 144, 145, 176, 190], "deep_learning_tutori": [106, 107, 110, 287], "russel": 107, "norvig": 107, "book": 107, "rip": 107, "pytorch_tutori": [107, 108, 110, 287], "word_embeddings_tutori": [107, 110, 111, 287], "lexic": [107, 110, 287], "sequence_models_tutori": [107, 109, 110, 287], "bi": [107, 110, 287], "crf": [107, 110, 287], "2x2x2": 108, "complain": [108, 194], "x_2": [108, 165], "vagu": 108, "programm": [108, 111], "mayb": [108, 111, 155, 194, 220], "x_0": 108, "overbrac": [108, 109, 111], "y_0": 108, "z_0": 108, "z_1": 108, "y_2": 108, "z_2": 108, "gloss": 108, "new_z": 108, "NO": 108, "forgotten": 108, "classic": [109, 112, 162, 169, 185, 264], "markov": 109, "myriad": 109, "cow": 109, "q_": [109, 111, 161], "1st": [109, 137, 139, 146], "unfamiliar": 109, "w_1": 109, "w_m": 109, "w_i": [109, 111], "_i": 109, "_1": 109, "_m": 109, "argmax": [109, 112, 137, 180, 240, 242], "_j": 109, "ah_i": 109, "affix": [109, 111], "bear": 109, "ly": 109, "adverb": 109, "c_w": 109, "x_w": 109, "po": [109, 190], "emb": [109, 111, 181], "013": 110, "capit": 111, "enorm": [111, 190], "notion": 111, "mathematician": 111, "physicist": 111, "ok": [111, 140, 179], "role": [111, 175, 181, 195, 285], "orthograph": 111, "linguist": 111, "hypothesi": 111, "coffe": 111, "phi": 111, "gave": 111, "pain": 111, "earth": 111, "herself": 111, "longtensor": [111, 145, 179, 181], "ith": [111, 217], "shakespear": [111, 182], "sonnet": 111, "word_i": 111, "context_s": 111, "beauti": 111, "cbow": 111, "probabilist": [111, 177], "percent": [111, 160], "q_w": 111, "raw_text": 111, "dedupl": 111, "jeremi": 112, "howard": [112, 161, 173, 174], "rachel": 112, "thoma": 112, "ingham": 112, "elegantli": [112, 254], "concis": 112, "exist_ok": 112, "_static": [112, 136], "gz": 112, "gzip": 112, "as_posix": 112, "x_train": 112, "y_train": 112, "x_valid": 112, "y_valid": 112, "importerror": 112, "trail": 112, "signifi": 112, "xavier": [112, 113], "initialis": 112, "prewritten": 112, "xb": 112, "7700": 112, "6873": 112, "2332": 112, "6785": 112, "1309": 112, "5510": 112, "2155": 112, "selectbackward0": 112, "nll": 112, "loss_func": 112, "yb": 112, "3063": 112, "negbackward0": 112, "1250": 112, "talli": 112, "debugg": 112, "set_trac": 112, "start_i": 112, "end_i": 112, "zero_": [112, 174, 181], "logist": 112, "0819": 112, "wherea": [112, 146, 188, 190, 205, 213, 214], "cross_entropi": [112, 141], "nlllossbackward0": 112, "clearer": [112, 188], "uppercas": 112, "confus": [112, 144, 157, 190, 195, 205, 213, 214, 215], "mnist_logist": 112, "3172": 112, "prone": [112, 146, 198, 236], "gone": [112, 142], "0796": 112, "4787": 112, "0820": 112, "get_model": [112, 179], "3265": 112, "0812": 112, "faciallandmarkdataset": 112, "tensordataset": 112, "train_d": 112, "0803": 112, "train_dl": 112, "cleaner": [112, 212, 214, 220], "0822": 112, "valid_d": 112, "valid_dl": 112, "phase": [112, 153, 181, 257, 283], "valid_loss": 112, "2919": 112, "2908": 112, "loss_batch": 112, "num": [112, 179], "4551186239719391": 112, "2756766409158707": 112, "mnist_cnn": [112, 137], "avg_pool2d": [112, 227], "36946376355886457": 112, "2335054819047451": 112, "func": [112, 131, 136, 155, 157, 160, 165, 170, 217, 226, 278, 282, 283], "avgpool2d": 112, "36906593008041383": 112, "23243607923388482": 112, "rid": [112, 113, 139, 160, 282], "wrappeddataload": 112, "dl": [112, 205, 228, 242], "__iter__": 112, "adaptiveavgpool2d": [112, 154], "3304585443496704": 112, "23716921972036362": 112, "lucki": [112, 175], "rent": 112, "hour": [112, 282], "current_acceler": 112, "21005284138917923": 112, "1743200022161007": 112, "mnist_sampl": 112, "fastai": 112, "practition": [112, 153, 215], "778": [112, 122, 287], "dupr\u00e9": 113, "circumv": 113, "forwardwithcontrolflowtest": 113, "modelwithcontrolflowtest": 113, "mlp": [113, 141, 155, 195], "unexpectedli": [113, 248], "succe": [113, 116, 194], "assertionerror": [113, 159], "dynamo": [113, 114, 116, 146, 159, 206, 282, 283], "faithfulli": [113, 212], "identity2": 113, "fx": [113, 114, 130, 136, 159, 184, 194, 200, 207, 242, 276, 283, 287], "imperfect": 113, "faith": 113, "pitfal": [113, 194], "necessarili": [113, 114, 116, 117, 146, 148, 171, 194], "export_control_flow_model_to_onnx_tutori": [113, 115, 118, 287], "ti": [114, 116, 117], "tai": [114, 116, 117], "justin": [114, 117, 120], "chu": [114, 117], "thiago": [114, 116], "crepaldi": [114, 116], "gamut": 114, "platform": [114, 151, 153, 187, 228, 240, 248, 267, 275, 285], "supercomput": 114, "constrain": [114, 143, 169], "onnxscript": [114, 116, 117], "upgrad": [114, 116, 169, 176, 187, 220], "onnxprogram": [114, 117], "protobuf": 114, "app": [114, 136, 233, 234, 241, 283], "drag": [114, 168, 187, 188, 235], "image_classifier_model": 114, "onnxruntim": [114, 116], "export_simple_model_to_onnx_tutori": [114, 115, 118, 287], "intro_onnx": [115, 116, 118, 287], "onnx_registry_tutori": [115, 117, 118, 287], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [115, 118, 287], "sphx_glr_beginner_onnx_intro_onnx": [115, 118, 287], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [115, 118, 287], "sphx_glr_beginner_onnx_onnx_registry_tutori": [115, 118, 287], "exportedprogram": [116, 117, 121, 194, 281, 282], "newer": [116, 152, 162, 168, 170, 196, 225, 259, 260, 261, 262, 267], "__version__": [116, 176, 227], "registri": 117, "_op": 117, "opoverload": 117, "opset": 117, "native_funct": 117, "yaml": [117, 149, 242], "custom_translation_t": 117, "redund": [117, 154], "node_add_0": 117, "input_i": 117, "input_x": 117, "gelu": [117, 219], "op_typ": 117, "mylibrari": 117, "add_and_round_op": 117, "005": 118, "json": [119, 171, 182, 187, 235, 257, 281], "quicker": 119, "record_funct": [119, 159, 240, 257], "incur": [119, 141, 203, 232, 233, 267], "investig": [119, 162, 175, 190, 192, 194, 266], "with_stack": [119, 187], "key_averag": [119, 240], "group_by_stack_n": 119, "traceback": [119, 159, 282], "sort_bi": [119, 240, 257], "193a910735e8": 119, "stacktrac": 119, "88": [119, 177, 181], "212": 119, "953": 119, "mnt": [119, 153], "xarfus": 119, "au": 119, "07": [119, 138, 177, 240, 257, 266], "715": 119, "848m": 119, "350": [119, 177], "151u": 119, "293": [119, 162, 283], "342u": 119, "095u": 119, "931": 119, "footprint": [119, 137, 138, 139, 149, 168, 240, 251, 286], "006": 119, "476": 119, "34": [119, 160, 176, 177, 240, 252, 257, 266], "338": [119, 177], "759m": 119, "as_strid": [119, 159], "281": [119, 162, 283], "808u": 119, "275": 119, "721u": 119, "_local": 119, "268": 119, "650u": [119, 257], "_scalar_dens": 119, "347": [119, 177], "argwher": 119, "nonzero": [119, 267], "089m": 119, "38": [119, 160, 177, 181, 240, 266], "402m": 119, "491m": 119, "119": [119, 177], "441": 119, "587u": 119, "_numpi": 119, "395": [119, 181], "602u": 119, "801m": 119, "rpc": [119, 136, 271], "johnson": 120, "brows": 120, "utf": 120, "modern": [120, 171, 192, 195], "50x": 120, "hairi": 120, "thankfulli": 120, "wave": 120, "tflearn": 120, "burden": [120, 183, 267], "facil": 121, "running_mean": [121, 269], "themodelclass": 121, "param_tensor": 121, "var_nam": 121, "param_group": [121, 177, 231], "dampen": 121, "weight_decai": 121, "4675713712": 121, "4675713784": 121, "4675714000": 121, "4675714072": 121, "4675714216": 121, "4675714288": 121, "4675714432": 121, "4675714504": 121, "4675714648": 121, "4675714720": 121, "_use_new_zipfile_seri": 121, "best_model_st": 121, "deepcopi": 121, "pt2": [121, 194, 230, 231, 236, 239, 281], "simplemodel": 121, "saved_exported_program": 121, "model_state_dict": [121, 139, 233, 234, 241], "theoptimizerclass": 121, "modela_state_dict": 121, "modela": 121, "modelb_state_dict": 121, "modelb": 121, "optimizera_state_dict": 121, "optimizera": 121, "optimizerb_state_dict": 121, "optimizerb": 121, "themodelaclass": 121, "themodelbclass": 121, "theoptimizeraclass": 121, "theoptimizerbclass": 121, "gan": [121, 133, 136, 169], "ensembl": [121, 131, 136, 184, 287], "map_loc": [121, 139, 151, 190, 251, 256], "remap": 121, "overwrit": 121, "saving_loading_model": [121, 122, 259, 260, 261, 262, 287], "distil": [122, 131, 136, 242, 287], "dcgan": [122, 131, 133, 136, 287], "transfer_learning_tutori": [122, 127, 287], "rai": [122, 134, 136, 287], "template_tutori": [122, 124, 287], "firstnam": 124, "lastnam": 124, "gallery_pattern": 124, "neural_style_transfer_tutori": 124, "sphinx": [124, 283], "_build": 124, "beginner_sourc": [124, 287], "link1": [124, 138], "link2": [124, 138], "cs231n": 127, "quot": 127, "licens": [127, 185], "bsd": [127, 185], "todai": [127, 195, 214], "lr_schedul": [127, 137, 138, 177], "num_ftr": 127, "decai": [127, 154, 178], "checkout": [127, 227], "streamlin": 130, "inductor": [130, 131, 136, 146, 184, 194, 205, 207, 216, 219, 220, 277, 279, 283, 287], "set_stanc": [130, 271, 274, 287], "usecas": [130, 271], "lrschedul": [130, 168, 271], "triton": [130, 159, 192, 207, 216, 271, 274, 276, 281, 283, 287], "cold": [130, 183, 255, 271, 274, 276, 287], "torchdynamo": [130, 136, 146, 194, 207, 219, 283], "fuser": [130, 136, 184, 287], "orthogon": [131, 136, 169], "symmetr": [131, 136, 169, 219], "prune": [131, 136, 169, 184, 220, 242, 287], "scaled_dot_product_attent": [131, 136, 182, 198, 201, 217], "nchw": [131, 136, 162, 241], "tangent": [131, 136, 157, 160, 184, 287], "nerur": [131, 136], "netork": [131, 136], "exploresever": [131, 136], "spread": [132, 190], "demand": [132, 203], "ddp_series_intro": 132, "utm_sourc": 132, "distr_land": 132, "utm_medium": 132, "distributeddata": 132, "ddp_tutori": 132, "intermediate_ddp_tutori": 132, "uneven": 132, "generic_join": 132, "fsdp_tutori": 132, "fsdp_getting_start": 132, "tp_tutori": 132, "distributed_device_mesh": 132, "rpc_tutori": 132, "rpc_getting_start": 132, "rpc_param_server_tutori": 132, "async_execut": [132, 136, 179], "rpc_async_execut": 132, "dataparallel": [132, 136, 142, 251, 267], "rpc_ddp_tutori": 132, "rpc_plus_ddp": 132, "plug": [132, 174, 185], "process_group_cpp_extension_tutori": 132, "custom_extensions_cpp": 132, "dqn": [133, 136, 184, 287], "cartpol": [133, 136, 154, 178, 181], "v0": [133, 136, 161, 178, 197], "proxim": [133, 136, 177], "mario": [133, 136, 169, 184, 287], "experiment": [134, 137, 143, 181, 200, 201, 203, 206, 219, 242, 265, 267, 283], "torchx": [134, 136], "plugin": [134, 136, 187], "raspberri": 134, "horizont": [136, 271, 274, 287], "foreach_map": [136, 271, 274, 287], "bite": [136, 199, 271], "non_block": [136, 184, 287], "pin_memori": [136, 137, 138, 184, 267, 287], "slide": [136, 267], "tiatoolbox": 136, "resampl": 136, "waveform": 136, "wav2vec2": 136, "holist": 136, "thumbnail": [136, 190], "matcher": [136, 191], "paral": 136, "fully_shard": [136, 139, 141, 233, 234, 236], "libuv": 136, "tcpstore": [136, 151], "sdk": 136, "v3": 136, "camera": [136, 176], "xnnpack": [136, 200], "metal": 136, "shader": 136, "android": 136, "deeplab": 136, "fp32": [136, 138, 149, 162, 182, 200, 205, 216, 228, 242, 283], "torchrec": [136, 184, 287], "distributedmodelparallel": 136, "sheet": 136, "hamid": [137, 138], "shojanazeri": [137, 138], "yanli": [137, 138], "zhao": [137, 138], "shen": [137, 151, 174, 179, 181], "li": [137, 151, 153, 171, 174, 179, 181, 192], "fsdp1": 137, "huggingfac": [137, 138, 198, 222, 282], "1t": [137, 149], "courtesi": 137, "patrick": 137, "hu": 137, "reduce_scatt": [137, 138, 141], "scatter": [137, 139, 151, 153, 190], "possess": [137, 205, 256], "toi": [137, 151, 181, 191, 194, 195, 234, 264], "fsdp_mnist": 137, "size_based_auto_wrap_polici": 137, "default_auto_wrap_polici": 137, "fsdp_auto_wrap_polici": 137, "auto_wrap_polici": [137, 138, 139], "steplr": [137, 138], "fully_sharded_data_parallel": 137, "cpuoffload": [137, 139], "backwardprefetch": [137, 138], "enable_wrap": [137, 138], "cleanup": [137, 138, 151, 233, 234], "dropout1": [137, 180], "dropout2": [137, 180], "9216": [137, 180], "ddp_loss": 137, "batch_idx": [137, 241, 242, 275], "tloss": [137, 242], "6f": [137, 242], "view_a": [137, 180, 242], "test_loss": 137, "fsdp_main": [137, 138], "1307": [137, 153, 180, 242], "3081": [137, 153, 180, 242], "dataset1": 137, "dataset2": 137, "sampler1": [137, 138], "num_replica": [137, 138], "sampler2": [137, 138], "train_kwarg": [137, 138], "test_kwarg": [137, 138], "test_batch_s": [137, 138], "cuda_kwarg": [137, 138], "my_auto_wrap_polici": 137, "min_num_param": 137, "init_start_ev": [137, 138], "enable_tim": [137, 138], "init_end_ev": [137, 138], "adadelta": 137, "step_siz": [137, 138], "gamma": [137, 138, 161, 177, 178, 179, 181], "elapsed_tim": 137, "save_model": [137, 138], "barrier": [137, 138, 140, 151, 153, 201], "metavar": [137, 138, 179, 181], "store_tru": [137, 138], "110": [137, 181, 252], "85": [137, 177, 240, 252, 257, 283], "40": [137, 161, 162, 177, 181, 183, 198, 206, 216, 222, 240, 252, 281], "67462890625sec": 137, "_fsdp_wrapped_modul": 137, "flattenparamswrapp": 137, "_fpw_modul": 137, "peak": [137, 139, 147, 168, 176, 198, 201, 205, 233, 279, 285, 286], "g4dn": 137, "xlarg": 137, "allgath": [137, 138, 141, 174, 267], "seal": 137, "20000": [137, 177], "89130859375sec": 137, "auto_wrap": 137, "offload": [137, 138, 139, 240, 248], "cpu_offload": [137, 139], "offload_param": [137, 139], "dpp": 137, "ddp_mnist": 137, "39": [137, 177, 181, 198, 240, 252, 283], "77766015625sec": 137, "wright": 138, "rohan": [138, 180], "varma": [138, 180], "wikihow": 138, "p4dn": 138, "a100": [138, 142, 170, 192, 198, 205, 222], "pressur": [138, 233], "fdsp": 138, "xxl": 138, "billion": [138, 141], "3b": [138, 176], "wikihowal": 138, "wikihowsep": 138, "summarization_dataset": 138, "t5_train": 138, "autotoken": [138, 222], "gpt2tokenizerfast": 138, "t5token": 138, "t5forconditionalgener": 138, "modeling_t5": 138, "t5block": 138, "checkpoint_wrapp": 138, "checkpointimpl": 138, "apply_activation_checkpointing_wrapp": 138, "mixedprecis": 138, "shardingstrategi": 138, "fullstatedictconfig": 138, "statedicttyp": 138, "transformer_auto_wrap_polici": 138, "tqdm": [138, 154, 177, 222], "datetim": [138, 140, 203], "setup_model": 138, "from_pretrain": [138, 222, 241, 282], "get_date_of_run": 138, "2022": [138, 207], "08": [138, 159, 177, 181, 201, 240, 242, 252, 281], "31": [138, 159, 160, 177, 240, 252, 257, 266], "12_pm": 138, "date_of_run": 138, "strftime": 138, "s_": [138, 178], "format_metrics_to_gb": 138, "gigabyt": 138, "metric_num": 138, "g_gigabyt": 138, "ndigit": 138, "fsdp_loss": 138, "inner_pbar": 138, "colour": 138, "desc": [138, 203], "r0": 138, "input_id": [138, 141, 222, 282], "source_id": 138, "attention_mask": [138, 282], "source_mask": 138, "target_id": 138, "train_accuraci": 138, "val_load": 138, "load_dataset": [138, 222, 282], "type_path": 138, "output_length": 138, "print_text": 138, "1500": [138, 252], "150": [138, 181], "val_dataset": 138, "t5_auto_wrap_polici": 138, "transformer_layer_cl": 138, "sharding_strategi": [138, 139], "shard_grad_op": [138, 139], "zero2": 138, "full_shard": [138, 139], "zero3": 138, "bf16_readi": 138, "is_bf16_support": 138, "loosevers": 138, "is_nccl_avail": [138, 201], "mp_polici": [138, 139], "bfsixteen": 138, "mixed_precis": [138, 139], "current_devic": [138, 251, 283], "adamw": [138, 178], "best_val_loss": 138, "inf": [138, 194, 214, 217, 283], "curr_val_loss": 138, "file_save_nam": 138, "time_of_run": 138, "dur": 138, "train_acc_track": 138, "val_acc_track": 138, "training_start_tim": 138, "track_memori": 138, "mem_alloc_track": 138, "mem_reserved_track": 138, "run_valid": 138, "zone": 138, "memory_alloc": 138, "memory_reserv": 138, "save_polici": 138, "offload_to_cpu": 138, "rank0_onli": 138, "state_dict_typ": 138, "full_state_dict": [138, 139], "cpu_stat": 138, "currepoch": 138, "prefix": [138, 142, 146, 154, 187, 192, 194, 203, 205, 252, 266, 285, 286], "save_nam": 138, "store_fals": 138, "nnode": [138, 151, 173, 201, 203], "transfom": 138, "mhsa": 138, "ffn": [138, 198], "bfloat16": [138, 139, 201, 205, 216, 228, 251, 264, 275], "v100": [138, 192], "fpsixteen": 138, "param_dtyp": [138, 139], "reduce_dtyp": [138, 139], "buffer_dtyp": [138, 139], "fp32_polici": 138, "grad_bf16": 138, "oom": [138, 168, 251], "freed": [138, 168], "backward_pr": [138, 139], "backward_prefetch": [138, 139], "backward_post": [138, 139], "contact": [138, 226], "yifan": 139, "mao": 139, "fsdp": [139, 141, 149, 233, 234, 236], "unshard": [139, 195, 201], "recordstream": 139, "float8": 139, "nf4": 139, "qlora": 139, "fsdpmodul": 139, "fsdptransform": 139, "tok_embed": [139, 141, 173], "fsdptransformerblock": 139, "joint": [139, 277], "to_loc": 139, "clip_grad_norm_": [139, 177], "seq_len": 139, "queu": [139, 233], "set_modules_to_forward_prefetch": 139, "set_modules_to_backward_prefetch": 139, "perf": [139, 222], "layers_to_prefetch": 139, "num_to_forward_prefetch": 139, "num_to_backward_prefetch": 139, "upcast": 139, "model_arg": [139, 173], "fsdp_kwarg": 139, "mixedprecisionpolici": 139, "max_norm": 139, "resum": [139, 192, 234, 282], "distributed_tensor": 139, "distribute_tensor": 139, "mmap": 139, "full_sd": 139, "meta_sharded_sd": 139, "sharded_sd": 139, "param_nam": [139, 264], "full_tensor": 139, "sharded_meta_param": 139, "sharded_tensor": 139, "device_mesh": [139, 141, 201, 236], "full_param": 139, "cpu_state_dict": 139, "sharded_param": 139, "del": [139, 173, 177, 206, 283], "set_model_state_dict": 139, "broadcast_from_rank0": 139, "statedictopt": 139, "get_model_state_dict": 139, "set_optimizer_state_dict": 139, "get_optimizer_state_dict": 139, "modulewrappolici": 139, "transformerblock": [139, 141], "param_init_fn": 139, "itertool": [139, 181], "to_empti": [139, 224, 264], "sublay": 139, "reshard_after_forward": 139, "hybrid_shard": 139, "_hybrid_shard_zero2": 139, "offload_polici": 139, "cpuoffloadpolici": 139, "cast_forward_input": 139, "cast_root_forward_input": 139, "output_dtyp": [139, 200, 203], "sync_module_st": 139, "rank0": [139, 179, 181, 203], "forward_prefetch": 139, "fsdp_modul": 139, "limit_all_gath": 139, "use_orig_param": 139, "flat": 139, "no_sync": [139, 267], "set_requires_gradient_sync": 139, "ignored_param": 139, "ignored_st": 139, "xilun": [140, 201], "roll": 140, "1k": [140, 141], "98304": 140, "96k": 140, "perf_count": 140, "logger": [140, 190], "getlogg": [140, 190], "var": [140, 283], "preset": [140, 219], "env_rank": 140, "env_world_s": 140, "env_master_addr": 140, "env_master_port": 140, "23456": [140, 153], "tcp_store": 140, "is_mast": 140, "time_elaps": [140, 283], "client": 140, "timeout": [140, 151, 174, 203], "store_based_barri": 140, "timedelta": [140, 203], "diststoreerror": 140, "_diststoreerror": 140, "_store_based_barri": 140, "group_nam": 140, "rendezvous_count": 140, "default_pg_timeout": 140, "logging_interv": 140, "store_kei": 140, "store_based_barrier_kei": 140, "worker_count": 140, "last_worker_kei": 140, "last_work": 140, "runtimeerror": [140, 174, 176, 282], "num_workers_join": 140, "tcpstore_test": 140, "number_run": 140, "spectrum": 140, "listen_fd": 140, "socket": [140, 153, 159, 267, 285], "listen_sock": 140, "af_inet": 140, "sock_stream": 140, "addr": [140, 203], "getsocknam": 140, "master_listen_fd": 140, "notimplementederror": 140, "gloo": [140, 151, 153, 174, 187, 195, 233, 286], "vairabl": 140, "plane": 140, "notifi": [140, 179], "wanchao": [141, 236], "liang": [141, 236], "tianyu": 141, "liu": 141, "megatron": 141, "lm": [141, 232], "sp": 141, "parallelstyl": 141, "parallelize_modul": 141, "foward": 141, "aris": [141, 194, 198, 205, 214, 282], "exceed": [141, 177], "domin": [141, 162, 190], "inter": [141, 150, 165, 198, 236, 267], "ballpark": 141, "flop": [141, 195, 279], "llm": [141, 173, 216], "trillion": [141, 149], "month": 141, "llama": [141, 198, 219], "70b": 141, "2k": 141, "llama2": 141, "colwiseparallel": 141, "rowwiseparallel": 141, "sequenceparallel": 141, "rmsnormpython": 141, "preparemoduleinput": 141, "preparemoduleoutput": 141, "init_device_mesh": [141, 201, 236], "tp_mesh": [141, 236], "feedforward": 141, "swiglu": 141, "w2": 141, "silu": 141, "w1": 141, "w3": 141, "colwis": 141, "rowwis": 141, "parallelize_plan": 141, "layer_tp_plan": 141, "feed_foward": 141, "feed_forward": 141, "wq": 141, "wk": 141, "wv": 141, "wo": 141, "tp_plan": 141, "draft": [141, 153], "use_local_output": 141, "num_head": 141, "layer_id": [141, 173], "transformer_block": 141, "input_layout": 141, "output_layout": 141, "attention_norm": 141, "ffn_norm": 141, "desired_input_layout": 141, "yellow": 141, "red": [141, 146, 188, 248], "loss_parallel": 141, "seq": 141, "dp": [141, 203], "mesh_2d": [141, 236], "submesh": 141, "dp_mesh": 141, "model_tp": 141, "model_2d": 141, "broadli": 142, "torchviz": [142, 148], "orang": [142, 176], "_save": 142, "kept": [142, 203], "_saved_self": 142, "_saved_oth": 142, "cycl": [142, 187, 228, 252, 257], "thumb": [142, 160, 177, 251], "pack_hook": 142, "unpack_hook": 142, "silli": 142, "harmless": 142, "debat": 142, "__repr__": [142, 252], "48gb": 142, "5gb": 142, "6x": 142, "leak": 142, "autograd_saved_tensors_hooks_tutori": [142, 184, 287], "david": 143, "eriksson": 143, "balandat": 143, "methodologi": [143, 241], "laptop": 143, "sustain": [143, 233], "studi": [143, 175, 190], "botorch": 143, "bayesian": 143, "mnist_train_na": [143, 163, 184, 287], "appdef": 143, "kubernet": 143, "local_cwd": 143, "fetch": [143, 145, 179, 180, 181, 195, 277], "proxi": [143, 212, 215, 252, 272], "tensorboardcurvemetr": 143, "curve_nam": 143, "lower_is_bett": 143, "favor": [143, 165, 177, 194], "multiobjectiveoptimizationconfig": 143, "94": [143, 177, 240, 257], "generationstrategi": 143, "scheduleropt": 143, "max_pending_tri": 143, "pareto": 143, "frontier": 143, "surrog": 143, "uncertainti": 143, "95": [143, 177, 181, 200, 240], "num_param": 143, "val_acc": 143, "contour": 143, "hidden_size_1": 143, "kiuk": 143, "chung": 143, "tristan": [143, 176], "rice": [143, 176], "ax_multiobjective_nas_tutori": [143, 163, 184, 287], "surnam": 144, "spell": 144, "lua": [144, 145, 183], "unreason": [144, 145], "roman": 144, "alphabet": 144, "n_letter": 144, "line_length": 144, "all_lett": 144, "linetotensor": 144, "namesdataset": 144, "20074": 144, "charrnn": 144, "58": [144, 162, 177, 222, 242], "label_from_output": 144, "histor": [144, 145], "all_loss": [144, 145], "minu": [144, 187], "bright": 144, "incorrectli": 144, "chines": [144, 145], "korean": 144, "italian": 144, "greek": 144, "poorli": 144, "gender": 144, "subreddit": 144, "char_rnn_classification_tutori": [144, 166, 184, 287], "russian": 145, "ru": 145, "rovakov": 145, "uantov": 145, "shavakov": 145, "german": 145, "ger": 145, "gerren": 145, "ereng": 145, "rosher": 145, "spa": 145, "salla": 145, "parer": 145, "allan": 145, "chi": 145, "chan": 145, "iun": 145, "category_lin": 145, "o2o": 145, "muscl": [145, 190], "fuzz": 145, "chao": 145, "abcd": 145, "eo": [145, 183], "n_categori": 145, "randomtrainingexampl": 145, "contrast": [145, 151, 170, 171, 194, 212], "timesinc": 145, "timestamp": [145, 158, 248], "print_everi": 145, "plot_everi": 145, "output_nam": 145, "fiction": 145, "countri": 145, "citi": 145, "char_rnn_generation_tutori": [145, 166, 184, 287], "simon": 146, "fan": [146, 176], "torch_log": [146, 194, 216, 271, 272, 274, 282, 287], "_dynamo": [146, 159, 192, 194, 272, 282, 283], "compiled_autograd": 146, "intercept": 146, "bytecod": [146, 192], "aotdispatch": 146, "rout": [146, 159, 194], "rewritten": 146, "compiled_autograd_verbos": 146, "stderr": 146, "aot0_": 146, "aot0_view_2": 146, "view_2": 146, "aot": [146, 159, 279, 283], "unoptim": [146, 192], "aot_eag": [146, 159], "fn": [146, 153, 157, 159, 192, 206, 230, 277, 280, 283], "graph_break": [146, 282, 283], "unique_graph": 146, "call_hook": 146, "div": [146, 159, 212], "adjac": 147, "hardcod": [147, 194], "dilat": [147, 258], "track_running_statist": 147, "denomin": 147, "nenadmarku": [147, 191], "bulk": 147, "fusedconvbn": 147, "geforc": 147, "rtx": 147, "3070": 147, "56gb": 147, "unfus": 147, "68gb": 147, "shallow": [147, 154], "custom_function_conv_bn_tutori": [147, 184, 287], "grad_out": 148, "finit": [148, 165], "differenc": 148, "magnifi": 148, "gradgradcheck": [148, 267], "grad_x": 148, "make_dot": 148, "dout": [148, 160], "ouptut": 148, "sinh": 148, "cosh": 148, "expx": 148, "expnegx": 148, "_grad_out_exp": 148, "_grad_out_negexp": 148, "sinhbad": 148, "cube_backward": 148, "cubebackward": 148, "cube_forward": 148, "cube_backward_backward": 148, "sav_grad_out": 148, "cube_backward_backward_grad_out": 148, "cube": 148, "dgrad_out": 148, "reachabl": [149, 150, 153], "2xlarg": [149, 150], "hydra": 149, "slurm": [149, 150, 151, 153], "char_dataset": 149, "gpt2_train_cfg": 149, "bucket": [149, 267], "aggress": 149, "rendezv": [150, 174], "nccl_debug": 150, "diagnos": 150, "nccl_socket_ifnam": 150, "eth0": 150, "joe": 151, "zhu": [151, 159], "chirag": [151, 203], "pandya": [151, 203], "clarifi": 151, "filestor": 151, "libtmp": 151, "some_fil": 151, "toymodel": [151, 233, 234, 236], "net1": [151, 233, 234, 235, 236], "net2": [151, 233, 234, 235, 236], "demo_bas": 151, "ddp_model": [151, 286], "loss_fn": [151, 173, 179, 233, 234, 286], "run_demo": 151, "demo_fn": 151, "caution": 151, "straggler": [151, 187], "inevit": 151, "spike": [151, 176], "AND": 151, "recoveri": 151, "torchelast": 151, "demo_checkpoint": 151, "checkpoint_path": 151, "gettempdir": 151, "toympmodel": 151, "dev0": 151, "dev1": 151, "output_devic": 151, "demo_model_parallel": 151, "mp_model": 151, "ddp_mp_model": 151, "n_gpu": 151, "elastic_ddp": 151, "rdzv_id": [151, 236], "rdzv_backend": 151, "rdzv_endpoint": [151, 236], "29400": [151, 236], "scontrol": 151, "hostnam": 151, "slurm_nodelist": 151, "srun": 151, "torchrun_script": 151, "s\u00e9b": 153, "arnold": 153, "sysadmin": 153, "coordin": [153, 185, 197, 205, 215, 285], "pdsh": 153, "clustershel": 153, "init_process": 153, "127": [153, 200], "set_start_method": 153, "ip": 153, "recv": [153, 173, 181], "irecv": 153, "dst": 153, "req": 153, "sent": [153, 171, 179, 194, 232], "behaviour": 153, "fanci": 153, "baidu": 153, "deepspeech": 153, "facebook": 153, "communc": 153, "new_group": [153, 173, 236], "commut": 153, "band": 153, "bor": 153, "bxor": 153, "premul_sum": 153, "scatter_list": 153, "gather_list": 153, "all_to_al": 153, "output_tensor_list": 153, "input_tensor_list": 153, "random_split": 153, "data_idx": 153, "datapartition": 153, "1234": 153, "data_len": 153, "part_len": 153, "partition_dataset": 153, "get_world_s": 153, "bsz": 153, "partition_s": 153, "train_set": [153, 187], "30000": [153, 177], "ceil": 153, "epoch_loss": 153, "average_gradi": 153, "voil\u00e0": 153, "send_buff": 153, "recv_buff": 153, "accum": [153, 216], "send_req": 153, "bandwidth": [153, 187, 195, 220, 240], "subsect": 153, "mpi": 153, "eleg": 153, "smi": [153, 251], "mvapich2": 153, "ipc": [153, 187], "recompil": [153, 192, 231, 272, 276, 277], "requisit": 153, "forg": [153, 242, 285], "openmpi": 153, "mpirun": 153, "myscript": 153, "handshak": 153, "superflu": 153, "everybodi": 153, "readili": 153, "race": 153, "fcntl": 153, "nf": [153, 203], "sharedfil": 153, "everyon": 153, "unclear": [153, 194], "natalia": 153, "gimelshein": 153, "actor": 154, "carrier": [154, 177], "step_mdp": 154, "brought": [154, 171, 177, 194], "84x84": 154, "accessori": [154, 176], "inittrack": 154, "stamp": 154, "is_init": 154, "tensordictprim": 154, "primer": [154, 215], "disappear": 154, "lstmmodul": 154, "backbon": [154, 190], "flank": 154, "assist": [154, 236], "tensordictmodulebas": 154, "batch_first": 154, "make_tensordict_prim": 154, "qvaluemodul": 154, "action_valu": 154, "qvalueactor": 154, "set_recurrent_mod": 154, "uniniti": [154, 224], "dqnloss": 154, "delay_valu": 154, "lazymemmapstorag": 154, "dqn_with_rnn_tutori": [154, 184, 287], "tradition": [155, 224], "pretend": [155, 170], "stack_module_st": 155, "functional_cal": [155, 165, 170], "num_model": 155, "in_dim": [155, 160, 170, 226], "weren": [155, 170], "forced_alignment_tutori": 156, "incomplet": [157, 171], "eagerli": [157, 168, 194, 280], "alongsid": [157, 188, 190, 195, 251], "primal": [157, 160], "dual": 157, "dual_level": 157, "fresh": [157, 251], "check_forward_ad": 157, "check_backward_ad": 157, "check_undefined_grad": 157, "check_batched_grad": 157, "functorch": 157, "reformul": [157, 165], "ft": 157, "make_functional_with_buff": 157, "analog": [157, 194, 195, 214, 215], "consolid": [157, 179, 195], "dual_numb": 157, "forward_ad_usag": [157, 184, 287], "jame": 158, "reed": 158, "longest": 158, "nicer": 158, "tabul": [158, 192, 203, 279], "ca": 158, "graphmodul": [158, 200, 283], "symbolic_trac": 158, "profilinginterpret": 158, "clock": [158, 252], "51393": 158, "happi": 158, "hear": 158, "tracker": 158, "fx_profiling_tutori": [158, 184, 287], "xuan": 159, "liao": 159, "haozh": 159, "jiong": [159, 206, 216], "gong": [159, 206, 216], "weihan": 159, "intricaci": 159, "troubleshoot": 159, "pinpoint": [159, 194, 235], "narrow": [159, 194, 203, 217], "torch_compile_debug": 159, "xx": 159, "ir": [159, 277], "_inductor": [159, 194, 206, 216, 281, 283], "model___20": 159, "torchinductor_root": 159, "rx": 159, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 159, "fx_graph_runn": 159, "fx_graph_transform": 159, "ir_pre_fus": 159, "ir_post_fus": 159, "output_cod": [159, 216, 283], "gv": 159, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 159, "tmp2": [159, 216, 283], "tmp1": [159, 216, 283], "exc": [159, 282], "backendcompilerfail": 159, "cppcompileerror": 159, "xg": 159, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 159, "unsign": [159, 252], "char": [159, 241], "max_propagate_nan": 159, "tmp3": [159, 216, 283], "tmp0": [159, 216, 283], "deduct": 159, "substitut": [159, 160, 168], "deduc": 159, "in_ptr0": [159, 283], "in_ptr1": [159, 283], "out_ptr0": [159, 283], "pragma": [159, 216], "ivdep": [159, 216], "i0": 159, "static_cast": [159, 216], "0l": [159, 216], "8390l": 159, "1l": [159, 206, 216], "i1": 159, "8l": 159, "buf0": [159, 206, 283], "schedulernod": 159, "computedbuff": 159, "memorydep": 159, "c0": 159, "67120": 159, "unmet_depend": 159, "met_depend": 159, "arg0_1": [159, 206, 283], "8390": 159, "arg1_1": [159, 283], "nodeus": 159, "can_inplac": 159, "buf0_loop_bodi": 159, "var_rang": 159, "z0": 159, "index0": 159, "index1": 159, "get_index": 159, "get_index_1": 159, "load_1": 159, "get_index_2": 159, "minifi": 159, "dead": 159, "minif": 159, "tol": 159, "test_script": 159, "expected_result": 159, "actual_result": 159, "torchdynamo_repro_aft": 159, "torchdynamo_repro_level": 159, "mobilebertforquestionansw": 159, "xeon": [159, 162, 228, 241, 271], "platinum": 159, "8358": 159, "60ghz": 159, "kmp_blocktim": [159, 267, 285], "kmp_set": 159, "kmp_affin": [159, 267, 285], "compact": [159, 267, 285], "ld_preload": [159, 267, 285], "conda_prefix": [159, 252], "dirnam": [159, 174, 248], "libiomp5": [159, 267, 285], "libjemalloc": [159, 285], "malloc_conf": [159, 285], "oversize_threshold": [159, 285], "background_thread": [159, 285], "metadata_thp": [159, 285], "dirty_decay_m": 159, "muzzy_decay_m": 159, "numactl": [159, 267, 285], "bench": 159, "eager_t": 159, "num_it": [159, 177], "inductor_t": 159, "1023553796113": 159, "339": [159, 177, 283], "95180135127157": 159, "359459053287382": 159, "355x": 159, "enable_kernel_profil": 159, "73": [159, 181, 222, 252, 283], "370": 159, "814m": 159, "362": 159, "89": [159, 181, 257], "161": 159, "276m": 159, "363": 159, "97": [159, 177, 181, 240, 283], "121": [159, 257, 283, 287], "416m": 159, "488": [159, 252], "154m": 159, "194": 159, "clamp_min": [159, 240], "81": [159, 240], "444m": 159, "bmm": [159, 217, 228, 252], "258m": [159, 240], "810": 159, "920m": 159, "447m": 159, "_softmax": 159, "087m": 159, "376": 159, "888m": 159, "77": [159, 177], "430m": 159, "502m": 159, "161m": 159, "850": 159, "377m": 159, "386": [159, 181, 217, 257], "index_select": 159, "000u": [159, 257], "986": 159, "420m": 159, "703": 159, "656": [159, 286], "963": 159, "864m": 159, "_mkl_linear": [159, 216], "231": [159, 252, 257], "573m": [159, 257], "992m": 159, "336": [159, 257], "642m": 159, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 159, "915": 159, "911": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 159, "901": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 159, "898": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 159, "895": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 159, "893": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 159, "892": [159, 176, 252], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 159, "891": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 159, "890": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 159, "889": 159, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 159, "graph_0_cpp_fused_": 159, "63x": 159, "cblas_sgemm_comput": 159, "339m": 159, "94x": 159, "impress": [159, 194], "cpp_fused__mkl_linear_add_mul_relu_151": 159, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 159, "bottl": [159, 233], "neck": [159, 233], "780875144992024": 159, "9588955780491233": 159, "0286805751604735": 159, "smallest": [159, 175], "solid": [159, 199], "analyt": 159, "hotspot": [159, 248], "phenomenon": 159, "inductor_debug_cpu": [159, 184, 287], "annoi": 160, "jax": [160, 165, 226], "compute_jac": 160, "xp": 160, "jacobian_row": 160, "unit_vector": 160, "5956": 160, "6096": 160, "1326": 160, "2295": 160, "4490": 160, "3661": 160, "1672": 160, "1190": 160, "1705": 160, "6683": 160, "1851": 160, "1630": 160, "0634": 160, "6547": 160, "5908": 160, "1308": 160, "vjp_fn": 160, "ft_jacobian": 160, "argnum": 160, "millisecond": [160, 174, 267], "get_perf": 160, "first_descriptor": 160, "second_descriptor": 160, "final_gain": 160, "without_vmap": 160, "stmt": [160, 222, 230, 252], "with_vmap": 160, "no_vmap_tim": 160, "timeit": [160, 217, 258, 266], "with_vmap_tim": 160, "0x7f28fadf16c0": 160, "0x7f292aed2f80": 160, "377": 160, "8875": 160, "ft_jac_weight": 160, "ft_jac_bia": 160, "rigor": 160, "taller": 160, "din": 160, "using_fwd": 160, "using_bwd": 160, "jacfwd_tim": 160, "jacrev_tim": 160, "0x7f292adab940": 160, "709": 160, "0x7f292870a710": 160, "1081": 160, "8797": 160, "0x7f29287a7df0": 160, "0x7f29287f2320": 160, "465": 160, "55": [160, 162, 177, 252, 285], "1344": 160, "5296": 160, "hessiani": 160, "overwhelm": 160, "hess_api": 160, "hess_fwdfwd": 160, "hess_revrev": 160, "33": [160, 176, 177, 181, 240, 252], "compute_batch_jacobian": 160, "batch_jacobian0": 160, "predict_with_output_sum": 160, "batch_jacobian1": 160, "movedim": 160, "compute_batch_hessian": 160, "batch_hess": 160, "hvp_revrev": 160, "result_hvp_revrev": 160, "639": [160, 184, 287], "jacobians_hessian": [160, 184, 287], "yuansong": 161, "steven": 161, "guo": 161, "cheatsheet": 161, "companion": 161, "bro": 161, "ne": [161, 183, 257], "emul": 161, "tube": 161, "mushroom": 161, "screen": [161, 178, 248], "next_stat": [161, 178], "240": [161, 181, 257], "pipe": 161, "sky": 161, "grayscaleobserv": 161, "resizeobserv": 161, "skipfram": 161, "framestack": 161, "hi": [161, 217], "movement": 161, "exploration_r": 161, "he": [161, 183, 191], "marionet": 161, "ddqn": 161, "_e": 161, "argmax_": 161, "td_target": 161, "td_t": 161, "td_e": 161, "leftarrow": 161, "nabla": 161, "episod": [161, 178, 179, 181], "mario_rl_tutori": [161, 184, 287], "vitali": 162, "fedyunin": 162, "densest": 162, "4x4": 162, "10x3x16x16": 162, "768": [162, 222], "minor": [162, 181, 188, 241, 242], "ambigu": [162, 213, 214], "n1hw": 162, "contrari": [162, 171, 175], "restrid": 162, "unintend": 162, "apex": 162, "main_amp": 162, "resnet50": [162, 176, 179, 241, 275], "o2": 162, "opt_level": 162, "keep_batchnorm_fp32": 162, "nonetyp": 162, "loss_scal": 162, "7603": 162, "cast_model_typ": 162, "patch_torch_funct": 162, "master_weight": 162, "125": [162, 257], "866": 162, "230": [162, 181, 190], "949": 162, "6735125184": 162, "6735": 162, "prec": 162, "259": 162, "562": 162, "773": 162, "481": 162, "355": 162, "693": 162, "6968704462": 162, "6852": 162, "258": 162, "461": 162, "775": 162, "089": 162, "433": 162, "965": 162, "7877287269": 162, "7194": 162, "833": 162, "771": 162, "710": 162, "487": [162, 184], "8285319805": 162, "7467": 162, "260": [162, 181], "380": 162, "770": 162, "090": 162, "525": 162, "908": 162, "7370464802": 162, "7447": 162, "360": 162, "623": 162, "555": 162, "728": 162, "7592862844": 162, "7472": 162, "917": 162, "345": [162, 177, 197], "774": 162, "746": [162, 252], "115": [162, 177, 240], "9698858261": 162, "9218": 162, "324": [162, 177], "597": 162, "659": 162, "2505953312": 162, "0879": 162, "52": [162, 177, 240], "767": 162, "785": 162, "7579724789": 162, "7580": 162, "198": 162, "482": 162, "135": [162, 176, 252], "414": 162, "716": [162, 240, 252], "7007197738": 162, "7293": 162, "250": [162, 177, 181, 257], "387": 162, "1010": 162, "516": 162, "7113101482": 162, "7233": 162, "667": 162, "197": 162, "340": 162, "1013": 162, "023": 162, "588": 162, "333": [162, 177], "8943189979": 162, "7661": 162, "541": 162, "7113249302": 162, "9551": 162, "1011": 162, "163": [162, 177], "683": 162, "574": 162, "8537774086": 162, "7716": 162, "279": 162, "453": 162, "7595844269": 162, "3413": 162, "429": 162, "269": 162, "827": 162, "743": 162, "883": 162, "8196096420": 162, "4011": 162, "volta": [162, 251, 267], "alexnet": 162, "mnasnet0_5": 162, "mnasnet0_75": 162, "mnasnet1_0": 162, "mnasnet1_3": 162, "mobilenet_v2": [162, 176, 197, 227], "resnet101": 162, "resnet152": 162, "resnet34": 162, "resnext50_32x4d": 162, "shufflenet_v2_x0_5": [162, 176], "shufflenet_v2_x1_0": [162, 176], "shufflenet_v2_x1_5": [162, 176], "shufflenet_v2_x2_0": [162, 176], "squeezenet1_0": 162, "squeezenet1_1": 162, "vgg11": 162, "vgg11_bn": 162, "vgg13": 162, "vgg13_bn": 162, "vgg16": 162, "vgg16_bn": 162, "vgg19_bn": 162, "wide_resnet101_2": 162, "wide_resnet50_2": 162, "ic": 162, "lake": [162, 241], "densenet121": 162, "densenet161": 162, "densenet169": 162, "googlenet": [162, 176], "inception_v3": [162, 176], "resnext101_32x8d": [162, 176], "spite": 162, "nc11": 162, "memory_format_tutori": [162, 184, 287], "year": [165, 169, 198], "j_": 165, "diagon": 165, "beforehand": 165, "asymptot": 165, "i_o": 165, "i_": 165, "e_o": 165, "textrm": 165, "_o": 165, "tensorfloat": 165, "sacrific": 165, "empirical_ntk_ntk_vp": 165, "luck": [165, 168, 195], "altogeth": [165, 214], "neural_tangent_kernel": [165, 184, 287], "french": [166, 183], "seq2seq_translation_tutori": [166, 183, 184, 287], "homepag": [167, 202], "ooz": 168, "_might_": 168, "2p": 168, "ephemer": 168, "timelin": [168, 187, 248], "memory_viz": 168, "devot": 168, "bat": [168, 207], "2gb": [168, 176], "6gb": 168, "foreach": [168, 239], "reveal": [168, 182, 192, 250, 252], "silver": 168, "bullet": 168, "sizabl": [168, 171], "tantamount": 168, "eat": 168, "lora": 168, "unlock": [168, 219], "vit_l_16": 168, "neat": 168, "slate": 168, "woohoo": 168, "apart": 168, "shrunk": 168, "0gb": 168, "optimizer_step_in_backward_tutori": [168, 184, 287], "lezcano": 169, "surprisingli": 169, "ill": 169, "frobeniu": 169, "spectral": 169, "lipschitz": 169, "x\u1d40": 169, "upper": [169, 182, 194, 257], "triangular": 169, "reimplement": [169, 175, 194], "skew": [169, 187, 257], "unparametr": 169, "linearsymmetr": 169, "moduledict": [169, 173, 222], "parametrizationlist": [169, 222], "modulelist": 169, "inbuilt": 169, "caylei": 169, "spd": 169, "right_invers": 169, "succinctli": 169, "relax": [169, 282], "remove_parametr": 169, "parametri": 169, "leave_parametr": 169, "privaci": [170, 175], "sample_grad": 170, "compute_loss": 170, "ft_compute_grad": 170, "0th": [170, 175, 182, 217], "25x": [170, 190, 222], "opacu": 170, "per_sample_grad": [170, 184, 287], "cpu_tensor": 171, "cuda_tensor": [171, 267], "erron": 171, "carefulli": [171, 267], "distinguish": [171, 181, 188], "isol": [171, 192], "illus": 171, "anywher": 171, "cudastreamsynchron": 171, "dma": 171, "volterra": 171, "tesla": 171, "h100": [171, 192], "t3_cuda": 171, "belief": [171, 194], "brand": 171, "cudahostalloc": 171, "cudamemcpi": 171, "doubt": 171, "interestingli": 171, "pronounc": 171, "tick": 171, "__whenev": 171, "memory__": 171, "corrupt": 171, "garbag": 171, "reliabl": [171, 252], "annihil": 171, "legitim": 171, "notori": 171, "inher": [171, 194, 195, 234], "blockag": 171, "afterward": [171, 194, 204], "non_blocking_pin": 171, "ration": 171, "outweigh": [171, 240], "perman": [171, 175], "shuttl": 171, "expedit": 171, "advers": 171, "bu": 171, "monopol": 171, "pinmem_nonblock": [171, 184, 287], "huang": [173, 174, 201, 233, 234], "microbatch": 173, "micro": 173, "educ": [173, 198], "dataclass": 173, "modelarg": 173, "n_head": 173, "witout": 173, "layernorm": [173, 198, 222], "splitpoint": 173, "pipelinestag": 173, "schedulegpip": 173, "pp_group": 173, "stage_index": 173, "num_stag": 173, "init_distribut": 173, "peer": [173, 286], "manual_model_split": 173, "tracer": 173, "split_spec": 173, "4th": [173, 228], "mirror": 173, "build_stag": 173, "gpipe": 173, "1f1b": 173, "interleaved1f1b": 173, "loopedbf": 173, "num_microbatch": 173, "example_input_microbatch": 173, "tracer_model_split": 173, "tokenwise_loss_fn": 173, "n_microbatch": 173, "pipelining_tutori": 173, "tian": 174, "si": 174, "zeroredundancyoptim": [174, 271], "processgroupnccl": 174, "processgroupgloo": 174, "processgroupmpi": 174, "ucc": 174, "oneccl": [174, 267], "trainum": 174, "emerg": 174, "backenddummi": 174, "hpp": 174, "chrono": 174, "outputtensor": [174, 227], "inputtensor": [174, 227], "allgatheropt": 174, "allreduceopt": 174, "workdummi": 174, "optyp": 174, "ivalu": [174, 227, 241], "recvanysourc": 174, "future_": 174, "iscomplet": 174, "issuccess": 174, "kunsettimeout": 174, "getfutur": 174, "outputtensorvec": 174, "make_intrus": 174, "listtyp": 174, "tensortyp": 174, "markcomplet": 174, "createbackenddummi": 174, "backenddummyconstructor": 174, "__attribute__": 174, "register_backend": 174, "cpp_function": [174, 252], "libraries_dir": 174, "abspath": 174, "dummy_collect": 174, "michela": 175, "paganini": 175, "biolog": 175, "batteri": 175, "subnetwork": 175, "lotteri": 175, "ticket": 175, "destruct": [175, 285], "0a0": [175, 227], "8e8a5e0": 175, "lecun": 175, "1998": 175, "unprun": 175, "basepruningmethod": 175, "adequ": [175, 177], "weight_orig": 175, "_orig": 175, "intact": [175, 179, 264], "weight_mask": 175, "_mask": 175, "forward_pre_hook": 175, "l1_unstructur": 175, "bias_orig": 175, "bias_mask": 175, "pruningcontain": 175, "compute_mask": 175, "ln_structur": 175, "undo": 175, "reassign": 175, "global_unstructur": 175, "apply_mask": 175, "unstructur": 175, "preprun": 175, "pruning_typ": 175, "pruning_tutori": [175, 184, 287], "sink": 176, "5v": 176, "sd": 176, "card": [176, 182], "8gb": 176, "arm": [176, 240], "64bit": 176, "aarch64": 176, "arm64": [176, 227], "raspberrypi": 176, "raspios_arm64": 176, "rpi": 176, "sdcard": 176, "start_x": 176, "128m": 176, "gpu_mem": 176, "commment": 176, "camera_auto_detect": 176, "v4l2": 176, "reboot": 176, "video4linux2": 176, "video0": 176, "picamera": 176, "36fp": 176, "30fp": 176, "framer": 176, "cv2": 176, "cap": [176, 177, 187], "videocaptur": 176, "cap_prop_frame_width": 176, "cap_prop_frame_height": 176, "cap_prop_fp": 176, "bgr": 176, "ret": [176, 179], "input_tensor": 176, "input_batch": 176, "qnnpack": [176, 200], "mobilenet_v3_larg": 176, "109": 176, "233": [176, 181], "885": [176, 240], "204": [176, 240, 252], "195": [176, 181], "132": [176, 177], "prequant": 176, "20fp": 176, "cap_v4l2": 176, "last_log": 176, "frame_count": 176, "ui": [176, 187, 248, 265, 271], "htop": 176, "mug": 176, "allevi": 176, "set_num_thread": 176, "repetit": [177, 252], "maximis": 177, "clipppoloss": 177, "theta_k": 177, "pi_": 177, "lingua": 177, "franca": 177, "defaultdict": [177, 222], "normalparamextractor": 177, "replaybuff": 177, "samplerwithoutreplac": 177, "lazytensorstorag": 177, "explorationtyp": 177, "set_exploration_typ": 177, "probabilisticactor": 177, "tanhnorm": 177, "gae": 177, "is_fork": 177, "get_start_method": 177, "fork": [177, 178, 285], "num_cel": 177, "3e": 177, "max_grad_norm": 177, "sub_batch_s": 177, "cardin": [177, 195], "clip_epsilon": 177, "lmbda": 177, "entropy_ep": 177, "deepmind": [177, 185], "interchang": 177, "panel": [177, 187], "base_env": 177, "inverteddoublependulum": 177, "transmit": 177, "gymwrapp": 177, "loos": 177, "supplementari": 177, "reduce_dim": 177, "cat_dim": 177, "stringent": 177, "unboundedcontinu": 177, "continuousbox": 177, "step_count": 177, "boundeddiscret": 177, "int64": [177, 215], "full_state_spec": 177, "full_action_spec": 177, "boundedcontinu": 177, "succeed": 177, "n_step": [177, 179, 181], "mu_": 177, "d_ob": 177, "d_action": 177, "mu": [177, 190], "actor_net": 177, "lazylinear": 177, "policy_modul": 177, "distribution_class": 177, "distribution_kwarg": 177, "return_log_prob": 177, "prob": [177, 179, 181, 188], "discount": [177, 178, 179], "amort": [177, 179], "value_net": 177, "value_modul": 177, "sample_log_prob": 177, "datacollector": 177, "multisyncdatacollector": 177, "split_traj": 177, "refil": 177, "max_siz": 177, "value_target": 177, "advantage_modul": 177, "value_network": 177, "average_ga": 177, "actor_network": 177, "critic_network": 177, "entropy_bonu": 177, "entropy_coef": 177, "critic_coef": 177, "loss_critic_typ": 177, "smooth_l1": 177, "cosineannealinglr": 177, "pbar": 177, "eval_str": 177, "tensordict_data": 177, "data_view": 177, "subdata": 177, "loss_valu": 177, "loss_object": 177, "loss_crit": 177, "loss_entropi": 177, "cum_reward_str": 177, "stepcount_str": 177, "lr_str": 177, "horizon": 177, "eval_rollout": 177, "set_descript": 177, "322": [177, 181, 240], "18it": 177, "3082": 177, "0878": 177, "0003": 177, "59it": 177, "1257": 177, "90it": 177, "1540": 177, "34it": 177, "1882": 177, "342": 177, "17it": 177, "2072": 177, "343": [177, 283], "65it": 177, "2308": 177, "344": 177, "06it": 177, "2393": 177, "99it": 177, "2380": 177, "44it": 177, "2496": 177, "346": 177, "98it": 177, "64it": 177, "3006": 177, "2541": 177, "82it": 177, "2571": 177, "351": 177, "57it": 177, "2558": 177, "89it": 177, "2668": 177, "348": 177, "2678": 177, "16000": [177, 252], "14it": 177, "2739": 177, "17000": 177, "96it": 177, "2843": 177, "18000": [177, 266], "352": 177, "93it": 177, "2911": 177, "19000": 177, "353": 177, "62it": 177, "2771": 177, "23it": 177, "2964": 177, "42": [177, 178, 181, 252, 283], "21000": 177, "07it": 177, "381": 177, "6019": 177, "2920": 177, "22000": 177, "3008": 177, "23000": 177, "2953": 177, "24000": [177, 252, 266], "77it": 177, "2922": 177, "25000": 177, "32it": 177, "3056": 177, "90": [177, 181, 240], "26000": 177, "37it": 177, "3055": 177, "27000": 177, "33it": 177, "3130": 177, "176": [177, 190], "28000": 177, "58it": 177, "3015": 177, "29000": 177, "46it": 177, "3020": 177, "143": [177, 240, 285], "62": [177, 181, 222], "31000": 177, "36it": 177, "1083": 177, "0009": 177, "3145": 177, "32000": 177, "3074": 177, "33000": 177, "12it": 177, "3097": 177, "140": [177, 181], "34000": 177, "97it": 177, "3117": 177, "126": [177, 181], "35000": 177, "3054": 177, "111": [177, 181, 252, 285], "36000": [177, 252], "3174": 177, "37000": 177, "13it": 177, "3105": 177, "131": [177, 181], "38000": 177, "30it": 177, "3161": 177, "39000": 177, "354": 177, "19it": 177, "3115": 177, "40000": [177, 252], "75it": 177, "3052": 177, "106": [177, 240], "41000": [177, 252], "671": 177, "2997": 177, "42000": 177, "3035": 177, "166": [177, 182], "43000": 177, "40it": 177, "3186": 177, "183": 177, "44000": 177, "117": 177, "45000": 177, "47it": 177, "3197": 177, "46000": 177, "35it": 177, "3217": 177, "155": [177, 190], "47000": 177, "31it": 177, "3205": 177, "180": [177, 181, 194, 240, 252], "48000": 177, "20it": 177, "3100": 177, "49000": 177, "27it": 177, "3199": 177, "52it": 177, "3086": 177, "133": 177, "videorecord": 177, "781": [177, 184, 240, 287], "reinforcement_ppo": [177, 184, 287], "tower": 178, "cart": 178, "pole": 178, "upright": 178, "classic_control": 178, "action_spac": 178, "observation_spac": 178, "decorrel": 178, "replaymemori": 178, "cyclic": 178, "formul": 178, "r_": 178, "t_0": 178, "r_t": 178, "uncertain": 178, "tempor": 178, "max_a": 178, "univers": [178, 190], "obei": 178, "bellman": 178, "huber": 178, "noisi": [178, 252, 266], "mathcal": 178, "le": [178, 183], "mathrm": 178, "select_act": [178, 179, 181], "eps_start": 178, "eps_end": 178, "eps_decai": 178, "plot_dur": 178, "underneath": [178, 194], "tau": 178, "optimize_model": 178, "s_t": 178, "a_t": 178, "num_episod": [178, 179], "target_net": 178, "reinforcement_q_learn": [178, 184, 287], "calle": [179, 180, 232], "unblock": 179, "idl": [179, 187, 257], "callback": 179, "paus": 179, "update_and_fetch_model": 179, "future_model": 179, "batch_update_s": 179, "batchupdateparameterserv": 179, "curr_update_s": 179, "ps_rref": 179, "local_valu": [179, 180], "fut": [179, 181], "setti": 179, "set_result": 179, "rpc_sync": [179, 180, 181, 232], "image_w": 179, "image_h": 179, "one_hot_indic": 179, "random_": 179, "get_worker_info": [179, 181], "543": 179, "affine1": [179, 181], "affine2": [179, 181], "action_scor": [179, 181], "govern": 179, "select_action_batch": 179, "shortli": 179, "run_episod": [179, 181], "agent_rref": [179, 181], "ep_reward": [179, 181], "num_step": 179, "start_step": 179, "from_numpi": [179, 181], "curr_reward": 179, "saved_log_prob": [179, 181], "rob": 179, "ob_rref": [179, 181], "running_reward": [179, 181], "ob_rank": [179, 181], "ob_info": [179, 181], "observer_nam": [179, 181], "future_act": 179, "pending_st": 179, "select_acion": 179, "ob_id": [179, 181], "log_prob": [179, 181], "stitch": [179, 180], "async": [179, 181, 195, 233, 267], "oberv": [179, 181], "wait_al": 179, "policy_loss": [179, 181], "passiv": [179, 181], "run_work": [179, 180, 181, 232], "n_episod": 179, "print_log": 179, "init_rpc": [179, 180, 181, 232], "agent_nam": [179, 181], "i_episod": [179, 181], "last_reward": [179, 181], "tlast": [179, 181], "taverag": [179, 181], "shutdown": [179, 180, 181, 232], "tik": [179, 232], "tok": [179, 232], "dist_autograd": [180, 181], "num_gpu": 180, "dropout2d": [180, 242], "next_devic": 180, "caller": [180, 232], "call_method": 180, "remote_method": 180, "foo_inst": 180, "parameterserv": 180, "input_devic": 180, "intention": [180, 181, 232], "miscellan": 180, "get_dist_gradi": 180, "get_gradi": 180, "get_param_rref": 180, "cid": 180, "cpu_grad": 180, "k_cpu": 180, "v_cpu": 180, "paramt": 180, "param_rref": [180, 181], "run_parameter_serv": 180, "param_serv": 180, "global_lock": 180, "get_parameter_serv": 180, "parameter_serv": 180, "shut": 180, "offlin": 180, "trainernet": 180, "param_server_rref": 180, "get_global_param_rref": 180, "paramat": 180, "remote_param": [180, 181], "model_output": 180, "run_training_loop": 180, "nueral": 180, "context_id": [180, 181], "get_accuraci": 180, "correct_sum": 180, "trainer_": 180, "traffic": 180, "listen": [180, 283], "subprocess": [180, 252, 267], "rpc_parameter_serv": 180, "solver": 181, "formatter_class": 181, "argumentdefaultshelpformatt": 181, "log_interv": 181, "report_reward": 181, "_max_episode_step": 181, "lifetim": 181, "finfo": 181, "reward_threshold": 181, "finish_episod": 181, "min_reward": 181, "surpass": 181, "ob": 181, "ctrl": 181, "475": 181, "130": [181, 240], "137": 181, "170": [181, 197], "213": [181, 283], "165": 181, "272": [181, 240, 283], "210": 181, "168": [181, 285], "184": 181, "208": [181, 190, 250], "270": [181, 190], "405": 181, "280": 181, "290": 181, "464": 181, "3163778435275": 181, "embeddingt": 181, "destin": [181, 232], "rnnmodel": 181, "ntoken": 181, "ninp": 181, "nhid": 181, "nlayer": 181, "emb_table_rref": 181, "decoder_rref": 181, "_remote_method": 181, "rremot": 181, "_parameter_rref": 181, "parameter_rref": [181, 232], "run_train": 181, "nindic": 181, "driss": 182, "guessou": 182, "multiheadattent": [182, 217], "flashattent": 182, "flash": [182, 205], "andrej": 182, "karpathi": 182, "nanogpt": 182, "causalselfattent": 182, "mine": 182, "616": 182, "726": 182, "amaz": 182, "prof": [182, 240, 257], "export_chrome_trac": 182, "compiled_causal_attention_trac": 182, "concentr": 182, "6090": 182, "49m": 182, "3273": 182, "17m": 182, "commit": [182, 220, 228], "ae3a8d5": 182, "causal_upper_left": 182, "causal_lower_right": 182, "is_caus": [182, 198, 201, 217], "causalbia": 182, "corner": 182, "attn_scor": 182, "sdpa_kernel": [182, 201], "scaled_dot_product_attention_tutori": [182, 184, 287], "il": 183, "est": [183, 187], "peindr": 183, "tableau": 183, "paint": 183, "pourquoi": 183, "pa": 183, "essay": 183, "vin": 183, "delicieux": 183, "delici": 183, "wine": 183, "poet": 183, "romancier": 183, "she": 183, "novelist": 183, "vou": 183, "trop": 183, "maigr": 183, "skinni": 183, "condens": [183, 266], "unfold": 183, "phrase": 183, "tatoeba": 183, "eng": 183, "manyth": 183, "anki": 183, "fra": 183, "froid": 183, "dozen": 183, "trim": [183, 266], "lang": 183, "word2index": 183, "index2word": 183, "word2count": 183, "apostroph": 183, "je": 183, "sui": 183, "noir": 183, "attn_appli": 183, "exhibit": 183, "coher": 183, "grammar": 183, "wander": 183, "freedom": 183, "plot_loss": 183, "judgement": 183, "matshow": 183, "iot": 183, "word2vec": 183, "glove": 183, "autoencod": 183, "torchrec_intro_tutori": [184, 195, 287], "torch_compile_tutori": [184, 192, 287], "torch_export_tutori": [184, 193, 194, 287], "sdpa": [184, 198, 201, 217, 287], "transformer_building_block": [184, 198, 287], "spatial_transformer_tutori": [184, 185, 287], "na": [184, 287], "sphx_glr_intermediate_mnist_train_na": [184, 287], "tensorboard_profiler_tutori": [184, 187, 287], "torch_compile_conv_bn_fus": [184, 191, 287], "ghassen": 185, "hamrouni": 185, "geometr": 185, "invari": [185, 213], "boil": 185, "affine_grid": 185, "grid_sampl": 185, "speech_recognition_pipeline_tutori": 186, "perfetto": 187, "warmup": [187, 198, 230, 231, 239, 240, 257, 280, 281], "on_trace_readi": [187, 257], "tensorboard_trace_handl": 187, "record_shap": [187, 257], "profile_memori": [187, 257], "dealloc": [187, 267], "torch_tb_profil": 187, "safari": 187, "pytorch_profil": 187, "dropdown": 187, "callstack": 187, "sm": 187, "multiprocessor": 187, "occup": 187, "tooltip": 187, "toolbar": 187, "keyboard": 187, "mous": 187, "resnet18_4work": 187, "76m": 187, "132m": 187, "azur": 187, "torchtbprofil": 187, "memory_demo_1_10": 187, "gpu0": 187, "children": [187, 257], "distributed_bert": 187, "docker": 187, "profiler_tutori": 187, "test_cifar10": 187, "vi": 187, "hub": 187, "kfd": 187, "sys_ptrac": 187, "seccomp": 187, "unconfin": 187, "shm": [187, 232], "8g": 187, "apt": [187, 190, 285], "libjpeg": 187, "whl": [187, 192, 195, 205], "rocm5": 187, "scp": 187, "testset": 188, "testload": 188, "plot_classes_pr": 188, "four_fashion_mnist_imag": 188, "refresh": [188, 195], "datapoint": 188, "thoroughli": 188, "images_to_prob": 188, "preds_tensor": 188, "el": 188, "fig": 188, "arang": [188, 217, 283], "xtick": 188, "ytick": 188, "set_titl": 188, "1f": 188, "add_figur": 188, "global_step": [188, 265], "scroll": 188, "test_siz": 188, "class_prob": 188, "class_probs_batch": 188, "test_prob": 188, "test_label": 188, "add_pr_curve_tensorboard": 188, "class_index": 188, "tensorboard_truth": 188, "tensorboard_prob": 188, "add_pr_curv": 188, "poke": 188, "tacotron2_pipeline_tutori": 189, "wsi": 190, "tissu": 190, "surgeri": 190, "biopsi": 190, "scanner": 190, "pathologist": 190, "diseas": 190, "cancer": 190, "microscop": 190, "tumor": 190, "growth": [190, 215], "treatment": [190, 214, 215], "patient": 190, "000x100": 190, "25x0": 190, "micron": 190, "pyramid": 190, "magnif": 190, "sketch": 190, "histoencod": 190, "jopo666": 190, "openjpeg": 190, "openslid": 190, "pixman": 190, "qq": 190, "libopenjp2": 190, "libpixman": 190, "echo": 190, "brew": 190, "__future__": [190, 256, 264], "hashandl": 190, "nopython": 190, "shutil": 190, "zipfil": 190, "mpl": 190, "cm": 190, "sklearn": 190, "accuracy_scor": 190, "confusion_matrix": 190, "patch_predictor": 190, "iopatchpredictorconfig": 190, "misc": 190, "download_data": 190, "grab_files_from_dir": 190, "overlay_prediction_mask": 190, "wsicor": 190, "wsiread": 190, "rcparam": 190, "dpi": 190, "facecolor": 190, "on_gpu": 190, "suppress": 190, "overli": 190, "suppress_console_output": 190, "redirect_stderr": 190, "stringio": 190, "abnorm": [190, 248], "global_save_dir": 190, "rmdir": 190, "dir_path": 190, "is_dir": 190, "rmtree": 190, "kather": 190, "100k": 190, "wsi_path": 190, "sample_wsi": 190, "sv": 190, "patches_path": 190, "kather100k": 190, "weights_path": 190, "dc": 190, "warwick": 190, "uk": 190, "tcga": 190, "3l": 190, "aa1b": 190, "01z": 190, "dx1": 190, "8923a151": 190, "a690": 190, "40b7": 190, "9e5a": 190, "fcbedfc2394f": 190, "extractal": 190, "pc": 190, "label_list": 190, "patch_list": 190, "dataset_path": 190, "image_ext": 190, "tif": 190, "label_dict": 190, "glass": 190, "mucosa": 190, "deb": 190, "debri": 190, "tum": 190, "colorect": 190, "adenocarcinoma": 190, "epithelium": 190, "adi": 190, "adipos": 190, "muc": 190, "mucu": 190, "stroma": 190, "lym": 190, "lymphocyt": 190, "dataset_class_path": 190, "patch_list_single_class": 190, "file_typ": 190, "xlabel": 190, "ylabel": 190, "211": [190, 240, 257], "178": 190, "209": 190, "232": [190, 252], "abc": 190, "modelabc": 190, "tia": 190, "toolbox": 190, "readthedoc": 190, "_autosummari": 190, "models_abc": 190, "preproc_func": 190, "predictor": [190, 282], "pretrained_weight": 190, "cnnmodel": 190, "fromarrai": 190, "conf": [190, 242, 283], "df_cm": 190, "215": 190, "993000": 190, "000000": 190, "00000": 190, "988636": 190, "011364": 190, "991304": 190, "008696": 190, "996503": 190, "003497": 190, "004808": 190, "990385": 190, "988764": 190, "011236": 190, "996296": 190, "003704": 190, "004785": 190, "985646": 190, "004310": 190, "99569": 190, "input_resolut": 190, "patch_input_shap": 190, "stride_shap": 190, "wsi_ioconfig": 190, "mpp": 190, "return_prob": 190, "ioconfig": 190, "greatest": [190, 251], "unnecessari": [190, 194, 198, 232, 270, 285], "merge_predict": 190, "wsi_output": 190, "wsi_predict": 190, "overlai": 190, "overlay_patch_predict": 190, "overview_resolut": 190, "overview_unit": 190, "wsi_overview": 190, "slide_thumbnail": 190, "label_color_dict": 190, "get_cmap": 190, "set1": 190, "pred_map": 190, "label_info": 190, "return_ax": 190, "histologi": 190, "pohjonen": 190, "joona": 190, "helsinki": 190, "umap": 190, "semantic_segmentor": 190, "deepfeatureextractor": 190, "iosegmentorconfig": 190, "histoencwrapp": 190, "histoenc": 190, "feat_extract": 190, "extract_featur": 190, "num_block": 190, "avg_pool": 190, "infer_batch": 190, "batch_data": 190, "img_patches_devic": 190, "inference_mod": [190, 222], "create_encod": 190, "prostate_medium": 190, "662": 190, "446": 190, "605": 190, "169": [190, 240, 283], "output_resolut": 190, "patch_output_shap": 190, "auto_generate_mask": 190, "otsu": 190, "num_loader_work": 190, "num_postproc_work": 190, "wsi_featur": 190, "umap_reduc": 190, "n_neighbor": 190, "n_compon": 190, "manhattan": 190, "random_st": 190, "fit_transform": 190, "npy": 190, "feat": 190, "5mpp": 190, "4mpp": 190, "histolog": 190, "horac": 191, "clariti": 191, "batch_norm": [191, 257], "conv_bn_pattern": 191, "conv_bn_replac": 191, "conv_weight": 191, "out_channel": 191, "in_channel": 191, "kernel_h": 191, "kernel_w": 191, "conv_bia": 191, "bn_mean": 191, "bn_var": 191, "bn_weight": 191, "bn_bia": 191, "num_featur": 191, "simplif": 191, "example_input": [191, 200, 219], "conclus": 191, "william": [192, 194, 280], "devel": 192, "elsewher": 192, "torchinductor": [192, 206, 207, 216, 267, 276], "torchtriton": 192, "cu117": 192, "opt_mod": 192, "complex_funct": 192, "complex_conjug": 192, "outer_funct": 192, "_orig_": 192, "dashboard": [192, 265], "struggl": 192, "fn1": 192, "fn2": 192, "f2": 192, "disallow": 192, "zhengxu": 194, "angela": [194, 281], "pian": 194, "pawakapan": 194, "synonym": 194, "dynamic_shap": [194, 282], "graph_signatur": 194, "range_constraint": 194, "stronger": [194, 282], "safeti": [194, 282], "cond": 194, "predic": 194, "true_fn": 194, "false_fn": 194, "while_loop": 194, "associative_scan": 194, "adher": [194, 224], "x0": [194, 197, 216, 283], "x1": [194, 197, 216], "s0": 194, "s1": 194, "x2": 194, "x3": 194, "s3": 194, "s5": 194, "proof": 194, "_log": [194, 283], "set_log": [194, 283], "spit": 194, "create_symbol": 194, "int_oo": 194, "2841": 194, "runtime_assert": 194, "ncreate_symbol": 194, "nruntime_assert": 194, "dynamic_shapes_tutori": 194, "_subclass": [194, 282], "fake_impl": 194, "845": 194, "infer_s": [194, 266], "torchdynamo_extended_debug_guard_ad": 194, "_meta_registr": 194, "2127": 194, "meta_mm": 194, "marker": 194, "aliv": 194, "attract": 194, "friction": 194, "believ": [194, 213], "stanc": [194, 280], "constraintviol": 194, "unrel": [194, 280], "univari": 194, "diverg": [194, 212, 214, 252], "tolist": [194, 222], "unbind": [194, 217], "unback": 194, "nomenclatur": 194, "absenc": [194, 235, 250], "u0": 194, "unhint": 194, "is_compil": 194, "invas": 194, "smart": 194, "bypass": [194, 216], "offend": 194, "smarter": 194, "prevail": 194, "prohibit": 194, "_check_is_s": 194, "guard_size_oblivi": 194, "starter": 194, "guardondatadependentsymnod": 194, "_schema": 194, "is_mut": 194, "export_for_train": 194, "run_decomposit": 194, "mutabl": 194, "conv1d": [194, 228, 267], "cond_pred": 194, "tensorrt": [194, 200], "pt2_path": 194, "aoti_compile_and_packag": [194, 281], "compiler_aot_inductor": 194, "aoti_compil": 194, "aoti_load_packag": [194, 281], "cu121": [195, 205], "fbgemm_gpu": 195, "torchmetr": 195, "relationship": 195, "hash": 195, "conjunct": [195, 203, 204, 267], "ctr": 195, "dlrm": [195, 267], "embedding_collect": 195, "embedding_bag_collect": 195, "vast": [195, 215], "collis": [195, 266], "80g": 195, "embeddingcollect": 195, "jaggedtensor": 195, "keyedjaggedtensor": 195, "keyedtensor": 195, "product_t": 195, "user_t": 195, "id_list_featur": 195, "id_score_list_featur": 195, "id_list_feature_offset": 195, "q1": 195, "product_jt": 195, "user_jt": 195, "q2": 195, "reread": 195, "to_dict": 195, "congrat": 195, "pat": 195, "grasp": [195, 199], "scarc": [195, 233], "hbm": 195, "gb": [195, 198], "shardedembeddingbagcollect": 195, "incredibli": 195, "ton": 195, "everytim": 195, "await": 195, "input_dist": 195, "tbe": 195, "output_dist": 195, "twpooledembeddingshard": 195, "kjt": 195, "canon": 195, "dmp": 195, "hyperoptim": 195, "combinedoptim": 195, "keyedoptim": 195, "in_backward_optimizer_filt": 195, "fused_optim": 195, "fused_param": 195, "apply_optimizer_in_backward": 195, "criteo": 195, "1tb": 195, "penn": 197, "fudan": 197, "databas": [197, 276, 277], "pedestrian": 197, "keypoint": 197, "tv_tensor": 197, "boundingbox": 197, "y0": 197, "image_id": 197, "iscrowd": 197, "pycocotool": 197, "gautamchitni": 197, "git": [197, 205], "cocoapi": 197, "cocodataset": 197, "pythonapi": 197, "get_height_and_width": 197, "ci": 197, "upenn": 197, "edu": 197, "jshi": 197, "ped_html": 197, "pennfudanp": 197, "pedmask": 197, "fudanped00001_mask": 197, "fudanped00002_mask": 197, "fudanped00003_mask": 197, "fudanped00004_mask": 197, "pngimag": 197, "fudanped00001": 197, "fudanped00002": 197, "fudanped00003": 197, "fudanped00004": 197, "tvtensor": 197, "zoo": 197, "fasterrcnn": 197, "rpn": 197, "anchor": 197, "featmap_nam": 197, "rcnn": 197, "train2017": 197, "mikayla": [198, 256, 264], "gawarecki": [198, 256, 264], "jag": [198, 217], "famili": [198, 240, 285], "xformer": 198, "torchtun": 198, "rag": [198, 217], "ux": [198, 217, 219], "key_padding_mask": 198, "qk": 198, "premis": 198, "rmsnorm": 198, "sinusoid": 198, "rotari": [198, 201], "alibi": 198, "threefold": 198, "query_padding_mask": 198, "mha": [198, 213, 217], "nestedtensor": [198, 217, 220, 223, 287], "cleanli": [198, 230, 231, 239, 278, 283], "zipf": [198, 217], "pariti": 198, "attn_mask": 198, "padded_tim": 198, "03454": 198, "padded_peak_memori": 198, "nested_tim": 198, "00612": 198, "nested_peak_memori": 198, "padded_bw_tim": 198, "09337": 198, "padded_bw_peak_mem": 198, "nested_bw_tim": 198, "01452": 198, "nested_bw_peak_mem": 198, "144": [198, 240], "out_proj": [198, 217], "000244140625": 198, "packed_proj": 198, "001556396484375": 198, "001953125": 198, "causal": 198, "breviti": [198, 212, 264], "trust": 198, "ragged": 198, "alibi_mod": 198, "block_mask": 198, "create_nested_block_mask": 198, "e_q": [198, 217], "e_tot": [198, 217], "05x": 198, "swish": 198, "08x": [198, 240], "kv": [198, 201], "lucidrain": 198, "navit": 198, "visiontransform": 198, "newcom": 199, "deep_learning_60min_blitz": 199, "readm": 200, "prepare_fx": 200, "convert_fx": 200, "default_weight_observ": 200, "get_default_qconfig_map": 200, "minmaxobserv": 200, "backend_config": 200, "backendpatternconfig": 200, "dtypewithconstraint": 200, "observationtyp": 200, "quantize_fx": 200, "fp32_linear": 200, "quant1": 200, "dequant1": 200, "quant2": 200, "dequant2": 200, "fp32_conv_relu": 200, "quint8_with_constraint": 200, "quant_min_lower_bound": 200, "quant_max_upper_bound": 200, "scale_min_lower_bound": 200, "weighted_int8_dtype_config": 200, "input_dtyp": [200, 203], "weight_dtyp": 200, "qint8": 200, "bias_dtyp": 200, "fuse_conv2d_relu": 200, "convrelu2d": 200, "linear_config": 200, "set_pattern": 200, "set_observation_typ": 200, "output_use_different_observer_as_input": 200, "add_dtype_config": 200, "set_root_modul": 200, "set_qat_modul": 200, "set_reference_quantized_modul": 200, "conv_relu_config": 200, "set_fused_modul": 200, "set_fuser_method": 200, "fused_conv_relu_config": 200, "my_backend": 200, "set_backend_pattern_config": 200, "quant_max": 200, "activation_observ": 200, "with_arg": 200, "quant_min": 200, "qconfig_map": 200, "set_object_typ": 200, "use_bn": 200, "quantizedlinear": 200, "012136868201196194": 200, "zero_point": 200, "qscheme": 200, "per_tensor_affin": 200, "quantizedconvrelu2d": 200, "0029353597201406956": 200, "linear_input_scale_0": 200, "linear_input_zero_point_0": 200, "quantize_per_tensor": [200, 242], "dequantize_2": 200, "015307803638279438": 200, "track_running_stat": 200, "dequantize_1": 200, "get_fbgemm_backend_config": 200, "get_qnnpack_backend_config": 200, "get_native_backend_config": 200, "union": 200, "rfc": [200, 213, 216, 221], "chien": [201, 233, 234], "chin": [201, 233, 234], "llama3": 201, "freq_ci": 201, "context_parallel": 201, "buffer_seq_dim": 201, "miscalcul": 201, "set_rotate_method": 201, "sdpbackend": 201, "sdpa_exampl": 201, "nhead": [201, 217], "qkv_len": 201, "8192": [201, 252], "flash_attent": 201, "cudnn_attent": 201, "qkv": 201, "cp_sdpa_exampl": 201, "_attent": 201, "context_parallel_unshard": 201, "context_parallel_sdpa_exampl": 201, "device_typ": [201, 275], "mesh_shap": 201, "mesh_dim_nam": [201, 236], "cp_qkv": 201, "cp_out": 201, "atol": [201, 222], "alltoal": [201, 267], "junji": 203, "impedi": 203, "starvat": 203, "deadlock": 203, "indefinit": 203, "diagnost": 203, "flight_record": 203, "torch_nccl_trace_buffer_s": 203, "torch_nccl_dump_on_timeout": 203, "torch_nccl_debug_info_temp_fil": 203, "nccl_trace_rank_": 203, "torch_nccl_trace_cpp_stack": 203, "torch_symbolize_mod": 203, "torch_nccl_enable_tim": 203, "dladdr": 203, "addr2lin": 203, "debuginfowrit": 203, "registerwrit": 203, "_distributed_c10d": [203, 283], "_dump_nccl_trac": 203, "includecollect": 203, "includestacktrac": 203, "onlyact": 203, "pg_config": 203, "default_pg": 203, "pg_statu": 203, "last_enqueued_collect": 203, "last_started_collect": 203, "last_completed_collect": 203, "test_short_pickl": 203, "test_c10d_nccl": 203, "3647": 203, "spawn_main": 203, "record_id": 203, "pg_id": 203, "collective_seq_id": 203, "p2p_seq_id": 203, "op_id": 203, "profiling_nam": 203, "time_created_n": 203, "1724779239936775119": 203, "input_s": 203, "time_discovered_started_n": 203, "time_discovered_completed_n": 203, "1724779239975811724": 203, "retir": 203, "timeout_m": 203, "600000": 203, "is_p2p": 203, "fr_trace": 203, "use_distribut": 203, "torchfrtrac": 203, "culprit": 203, "recod": 203, "trace_": 203, "trace_0": 203, "trace_1": 203, "bounc": 204, "gd": 204, "cufil": 204, "4kb": 204, "storage_align": 204, "gdsfile": 204, "skip_data": 204, "faketensormod": 204, "gds_register_buff": 204, "cufilebufregist": 204, "save_storag": 204, "cufilewrit": 204, "load_storag": 204, "cufileread": 204, "gpu_direct_storag": [204, 223, 287], "hdcharl": 205, "pg509": 205, "330": 205, "myenv": 205, "facebookresearch": 205, "vit_h": 205, "fbaipublicfil": 205, "segment_anyth": 205, "sam_vit_h_4b8939": 205, "sam_checkpoint_base_path": 205, "image_encod": 205, "instant": 205, "protect": 205, "bf16": [205, 216, 228, 240], "43m": 205, "17gb": 205, "7x": 205, "186": [205, 240], "16m": 205, "95m": 205, "24gb": 205, "autotun": [205, 220, 267, 276, 277, 279], "int4": 205, "int8dynamicactivationint8weightconfig": 205, "int8weightonlyconfig": 205, "int4weightonlyconfig": 205, "apply_dynamic_qu": 205, "apply_weight_only_int8_qu": 205, "04m": 205, "58gb": 205, "int32": 205, "force_fuse_int_mm_with_mul": 205, "78m": 205, "37gb": 205, "unquant": 205, "epilogu": [205, 216], "enlarg": 205, "39gb": 205, "10x": [205, 228], "appl": 205, "677": 205, "28m": 205, "729": 205, "65m": 205, "gpu_quantization_torchao_tutori": [205, 223, 287], "chunyuan": [206, 216], "bao": [206, 281], "cpp_wrapper": 206, "opt_fn": 206, "assert_size_strid": [206, 283], "empty_strid": [206, 227, 257, 283], "cpp_fused_add_lift_fresh_0": 206, "c_void_p": [206, 283], "constant0": 206, "inductor_entry_cpp": 206, "19l": 206, "cppwrappercodecach": 206, "cpp_wrapper_src": 206, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 206, "_wrap_func": 206, "args_tensor": 206, "constants_tensor": 206, "_deviceguard": [206, 283], "lift_fresh": 206, "stream0": [206, 283], "get_cuda_stream": 206, "triton_poi_fused_add_lift_fresh_0": 206, "run_intermediate_hook": [206, 283], "cudaguard": 206, "device_guard": 206, "loadkernel": 206, "torchinductor_us": 206, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 206, "cubin": [206, 277, 281], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 206, "cudeviceptr": 206, "var_0": 206, "reinterpret_cast": 206, "var_1": 206, "var_2": 206, "var_3": 206, "kernel_args_var_0": 206, "cudastream_t": 206, "getcurrentcudastream": 206, "launchkernel": 206, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 206, "zhaoqiong": 207, "zheng": 207, "xu": 207, "han": 207, "msvc": 207, "desktop": 207, "checkmark": 207, "cmd": [207, 283], "ex": [207, 222, 248], "vc": 207, "auxiliari": [207, 228], "vcvars64": 207, "opt_foo1": 207, "9074e": 207, "3994e": 207, "3894e": 207, "2630e": 207, "3060e": 207, "1833e": 207, "4016e": 207, "1905e": 207, "0637e": 207, "3648e": 207, "3728e": 207, "2863e": 207, "6888e": 207, "5442e": 207, "6790e": 207, "2025e": 207, "2647e": 207, "2684e": 207, "2483e": 207, "2845e": 207, "7747e": 207, "2028e": 207, "1431e": 207, "7196e": 207, "5304e": 207, "1945e": 207, "6654e": 207, "7376e": 207, "3644e": 207, "3600e": 207, "0157e": 207, "7200e": 207, "0146e": 207, "8175e": 207, "4057e": 207, "8119e": 207, "2853e": 207, "2773e": 207, "5082e": 207, "4615e": 207, "4140e": 207, "2130e": 207, "0762e": 207, "3914e": 207, "1122e": 207, "6895e": 207, "8852e": 207, "3310e": 207, "4101e": 207, "8318e": 207, "2355e": 207, "9290e": 207, "3707e": 207, "3754e": 207, "3768e": 207, "8970e": 207, "1171e": 207, "9944e": 207, "2553e": 207, "3394e": 207, "3428e": 207, "8400e": 207, "1756e": 207, "0654e": 207, "7973e": 207, "4019e": 207, "1886e": 207, "9194e": 207, "3632e": 207, "1811e": 207, "1615e": 207, "6622e": 207, "2089e": 207, "2011e": 207, "0659e": 207, "0892e": 207, "1932e": 207, "3888e": 207, "3898e": 207, "3218e": 207, "4139e": 207, "4000e": 207, "1192e": 207, "0175e": 207, "6432e": 207, "0498e": 207, "4115e": 207, "3212e": 207, "0964e": 207, "0127e": 207, "7244e": 207, "2799e": 207, "3595e": 207, "0907e": 207, "7191e": 207, "4062e": 207, "3672e": 207, "8502e": 207, "5216e": 207, "6046e": 207, "icx": 207, "win64": 207, "inductor_window": 208, "mobile_interpret": 211, "1369": 212, "weed": 212, "state_sum": 212, "addcmul_": 212, "addcdiv_": 212, "clr": 212, "_make_spars": 212, "grad_indic": 212, "sparse_coo_tensor": [212, 215], "coalesc": [212, 251], "_indic": 212, "grad_valu": 212, "_valu": 212, "sparse_mask": [212, 215], "std_valu": 212, "sqrt_": 212, "state_sum2": 212, "masked_grad": 212, "get_data": [212, 214], "std2": 212, "masked_tensor": [212, 214, 215], "to_spars": [212, 215], "param2": [212, 224], "glanc": [212, 264], "dodg": 212, "make_spars": 212, "brittl": 212, "argu": 212, "densif": 212, "csc": [212, 215], "bsr": [212, 215], "bsc": 212, "inconveni": 212, "conflat": 212, "disentangl": 212, "purposefulli": 212, "relianc": 212, "unreli": [212, 214], "maskedarrai": [212, 220], "maskedtensor_adagrad": [212, 223, 287], "maskedtensor_overview": [213, 214, 215, 223, 287], "Their": [213, 215], "unspecifi": [213, 214, 215, 220], "invalid": [213, 214, 215, 252, 267], "intersect": 213, "logical_or": 213, "to_tensor": [213, 214], "mt0": 213, "get_mask": [213, 214], "mt1": 213, "revisit": 213, "ma": 213, "masked_arrai": 213, "mask0": 213, "mask1": 213, "necessit": 213, "maskedtensor_advanced_semant": [213, 223, 287], "as_masked_tensor": 214, "as_tensor": 214, "afterthought": 214, "born": 214, "recur": 214, "inabl": 214, "10729": 214, "troubl": 214, "52248": 214, "frustrat": 214, "4132": 214, "67180": 214, "longstand": 214, "unsaf": 214, "61474": 214, "nanmax": 214, "nanmin": 214, "lend": 214, "substructur": 215, "sparse_coo": 215, "sparse_csr": 215, "ndim": 215, "nse": 215, "sparse_tensor_data": 215, "sparse_tensor_mask": 215, "dense_masked_tensor": 215, "to_sparse_coo": 215, "to_sparse_csr": 215, "nuanc": 215, "crow_indic": 215, "col_indic": 215, "nnz": 215, "to_dens": 215, "is_spars": 215, "is_sparse_coo": 215, "is_sparse_csr": 215, "mt": 215, "mt2": 215, "surfac": 215, "synergi": 215, "invest": 215, "maskedtensor_spars": [215, 223, 287], "lesli": 216, "fang": 216, "onednn": [216, 228, 240, 241, 248], "torchinductor_max_autotune_gemm_backend": 216, "upfront": [216, 256], "torchinductor_freez": 216, "log_autotuning_result": 216, "amp_en": 216, "outperform": 216, "linear_unari": 216, "64x16": 216, "32x16": 216, "cpp_packed_gemm_0": 216, "2142": 216, "_linear_pointwis": 216, "2441": 216, "mkldnn": [216, 228, 240], "anymor": [216, 265], "cpp_fused__to_copy_relu_1": 216, "async_compil": [216, 283], "cpp_pybind": 216, "kernel_micro_gemm_amx_kernel_32_2": 216, "amxstat": 216, "amx_stat": 216, "lda": 216, "ldb": 216, "ldc": 216, "uint8_t": 216, "tilecfg_row": 216, "kernel_micro_gemm": 216, "constexpr": [216, 283], "num_thread": [216, 252], "64l": 216, "omp": [216, 285], "tid": 216, "omp_get_thread_num": 216, "mc_block_id": 216, "num_mc_blocks_per_thread": 216, "n_block_start": 216, "n_block_end": 216, "nc_block": 216, "kc": 216, "k_block_start": 216, "k_block_end": 216, "kc_block": 216, "nci": 216, "nc_block_end": 216, "m_end": 216, "m_start": 216, "16l": 216, "div_floor_integ": 216, "n_end": 216, "n_start": 216, "loadu": 216, "local_acc_buf": 216, "nr": 216, "tmp4": [216, 283], "tmp5": 216, "tmp6": 216, "tmp7": 216, "tmp8": 216, "32l": 216, "invalu": 217, "nt": 217, "nested_tensor": 217, "padded_out_tensor": 217, "to_padded_tensor": 217, "poss": 217, "is_nest": 217, "irregularli": 217, "sep": 217, "legal": 217, "nt_reshap": 217, "nt_transpos": 217, "nt_mm": 217, "nt3": 217, "nt4": 217, "nt5": 217, "embrac": 217, "padded_sent": 217, "nested_sent": 217, "semnat": 217, "padded_sentences_for_softmax": 217, "e_k": 217, "e_v": 217, "dropout_p": 217, "query_proj": 217, "key_proj": 217, "value_proj": 217, "e_out": 217, "e_head": 217, "l_t": 217, "l_": 217, "attn_output": 217, "todo": 217, "unflatten": 217, "law": 217, "zipf_sentence_length": 217, "unigram": 217, "wikitext": 217, "858": 217, "sentence_length": 217, "ibatch": 217, "gen_batch": 217, "jagged_to_pad": 217, "jt": 217, "padding_v": 217, "padded_queri": 217, "padded_kei": 217, "padded_valu": 217, "default_tim": [217, 258], "output_nest": 217, "time_nest": 217, "output_pad": 217, "time_pad": 217, "entry_length": 217, "compiled_mha": 217, "compiled_output_nest": 217, "compiled_time_nest": 217, "compiled_output_pad": 217, "compiled_time_pad": 217, "daniil": 219, "lyakhov": 219, "aamir": 219, "nazir": 219, "suslov": 219, "yamini": 219, "nimmagadda": 219, "kozlov": 219, "openvinoquant": 219, "quantize_pt2": 219, "prepare_pt2": 219, "convert_pt2": 219, "traced_b": 219, "disable_patch": 219, "exported_model": 219, "asymmetr": 219, "prelu": 219, "quantizationpreset": 219, "model_typ": 219, "modeltyp": 219, "ignored_scop": 219, "layer_1": 219, "layer_2": 219, "layer_3": 219, "ignoredscop": 219, "regex": 219, "layer_": 219, "subgraph": 219, "target_devic": 219, "cpu_spr": 219, "targetdevic": 219, "fold": 219, "prepared_model": 219, "fold_quant": 219, "optimized_model": 219, "smoothquant": 219, "biascorrect": 219, "calibration_load": 219, "transform_fn": 219, "data_item": 219, "calibration_dataset": 219, "smooth_quant": 219, "fast_bias_correct": 219, "pypi": [220, 242], "optimizi": 220, "autovector": [220, 226], "maskedtensor": [220, 223, 287], "coo": 220, "csr": 220, "flight": 220, "flightrecord": 220, "autoload": 220, "gpudirect": [220, 223, 287], "yuanhao": 221, "ji": 221, "effortless": 221, "gaudi": 221, "hpu": 221, "huawei": 221, "torch_device_backend_autoload": 221, "torch_foo": 221, "_autoload": 221, "entry_point": 221, "habana_framework": 221, "__autoload": 221, "device_backend": 221, "is_load": 221, "entrypoint": 221, "_force_cutlass": 222, "2560": 222, "10240": 222, "dense_output": 222, "dense_t": 222, "blocked_autorang": [222, 230, 252], "median": [222, 252, 266], "1e3": 222, "sparse_output": 222, "sparse_t": 222, "80gb": 222, "870m": 222, "630m": 222, "382x": 222, "weightnormsparsifi": 222, "preprocess_validation_funct": 222, "384": [222, 282], "only_second": 222, "return_overflowing_token": 222, "return_offsets_map": 222, "sample_map": 222, "overflow_to_sample_map": 222, "example_id": 222, "sequence_id": 222, "offset_map": 222, "preprocess_train_funct": 222, "start_posit": 222, "end_posit": 222, "start_char": 222, "answer_start": 222, "end_char": 222, "context_start": 222, "context_end": 222, "compute_metr": 222, "start_logit": 222, "end_logit": 222, "n_best": 222, "max_answer_length": 222, "example_to_featur": 222, "predicted_answ": 222, "feature_index": 222, "start_index": 222, "argsort": 222, "end_index": 222, "logit_scor": 222, "best_answ": 222, "prediction_text": 222, "theoretical_answ": 222, "measure_execution_tim": 222, "dataset_for_model": 222, "remove_column": 222, "set_format": 222, "batch_size_to_time_sec": 222, "column_nam": 222, "p50": 222, "automodelforquestionansw": 222, "squad_dataset": 222, "tokenized_squad_dataset": 222, "data_col": 222, "datacollatorwithpad": 222, "hyperparam": 222, "training_arg": 222, "trainingargu": 222, "num_train_epoch": 222, "lr_scheduler_typ": 222, "per_device_train_batch_s": 222, "per_device_eval_batch_s": 222, "eval_dataset": 222, "fp16_baselin": 222, "fp16_time": 222, "cuda_fp16": 222, "exact_match": 222, "53358561967833": 222, "9280493093186": 222, "927572380751371": 222, "607915310189128": 222, "18846387788653": 222, "91255673766136": 222, "sparsity_level": 222, "elemen": 222, "sparse_block_shap": 222, "zeros_per_block": 222, "sparse_config": 222, "tensor_fqn": 222, "fqn": [222, 233, 234], "named_modul": [222, 258], "paramter": 222, "bertoutput": 222, "parametrizedlinear": 222, "fakespars": 222, "elementwise_affin": 222, "59602649006622": 222, "51610004515979": 222, "set_printopt": [222, 252], "edgeitem": 222, "0237": 222, "0130": 222, "0462": 222, "0272": 222, "0436": 222, "0492": 222, "0844": 222, "0340": 222, "0302": 222, "0350": 222, "0303": 222, "0175": 222, "0529": 222, "0327": 222, "0213": 222, "0258": 222, "0239": 222, "0380": 222, "0562": 222, "0432": 222, "0598": 222, "0262": 222, "0227": 222, "0244": 222, "0921": 222, "0784": 222, "0761": 222, "0225": 222, "0395": 222, "0684": 222, "0344": 222, "metrics_spars": 222, "sparse_perf": 222, "43897824030275": 222, "48718950090766": 222, "621004460379481": 222, "368514601141214": 222, "702805917710066": 222, "244": [222, 248], "19364519417286": 222, "87x": 222, "torchao": [223, 287], "vmap_recip": [223, 226, 287], "uniform": [224, 285], "orthogonal_": 224, "skip_init": 224, "param1": 224, "kaiming_uniform_": 224, "register_buff": 224, "some_buff": 224, "intial": 224, "42368": 226, "unsuccessfulli": 226, "rummag": 226, "shenanigin": 226, "8304": 226, "23475": 226, "performantli": 226, "7786": 226, "batch_of_sampl": 226, "grad_sampl": 226, "ivan": 227, "kobzarev": 227, "mac": 227, "use_vulkan": 227, "vulkan_wrapp": 227, "use_vulkan_wrapp": 227, "libvulkan": 227, "vulkansdk": 227, "lunarg": 227, "vulkan_sdk": 227, "vulkan_sdk_root": 227, "install_vulkan": 227, "pytorch_root": 227, "use_vulkan_shaderc_runtim": 227, "macosx_deployment_target": 227, "41237a4": 227, "android_abi": 227, "v8a": 227, "build_android": 227, "pytorch_android": 227, "aar": 227, "build_pytorch_android": 227, "script_model": 227, "mobilenet2": 227, "32bit": 227, "mobile_optim": 227, "optimize_for_mobil": 227, "script_model_vulkan": 227, "optimization_blocklist": 227, "mobileoptimizertyp": 227, "vulkan_automatic_gpu_transf": 227, "is_vulkan_avail": 227, "tensor_vulkan": 227, "tensor_output_vulkan": 227, "tensor_output": 227, "_adaptive_avg_pool2d": 227, "_cat": 227, "clamp": 227, "memory_format": [227, 228, 241], "hardtanh_": 227, "relu_": 227, "transpose_": 227, "upsample_nearest2d": 227, "floatbuff": 227, "allocatefloatbuff": 227, "fromblob": 227, "mmodul": 227, "apploc": 227, "asset": 227, "test_app": 227, "gradl": 227, "installmbvulkanlocalbasedebug": 227, "mbq": 227, "swiftshad": 227, "googlesourc": 227, "tmul": 228, "gen": 228, "processor": [228, 241, 267, 271, 285], "avx": [228, 241], "vnni": [228, 241], "024": 228, "channels_last": [228, 241], "conv3d": [228, 267], "conv_transpose1d": 228, "conv_transpose2d": 228, "conv_transpose3d": 228, "baddbmm": 228, "addbmm": 228, "onednn_verbos": 228, "verbose_on": 228, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 228, "openmp": [228, 248], "nthr": 228, "isa": 228, "prim_templ": 228, "prop_kind": 228, "memory_descriptor": 228, "problem_desc": 228, "exec_tim": 228, "exec": [228, 283], "reorder": [228, 240, 248, 267], "undef": 228, "src_f32": 228, "f0": 228, "dst_f32": 228, "scratchpad": 228, "2561": 228, "avx512_core_amx_bf16": 228, "forward_train": 228, "src_bf16": 228, "acdb": 228, "wei_bf16": 228, "abcd16b16a2b": 228, "bia_f32": 228, "dst_bf16": 228, "alg": 228, "convolution_direct": 228, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 228, "628906": 228, "brg": 228, "avx512_core_amx_int8": 228, "src_s8": 228, "wei_s8": 228, "ba16a64b4a": 228, "dst_s8": 228, "1x30522": 228, "30522x768": 228, "1x768": 228, "66382": 228, "lazo": [230, 231, 239, 278, 283], "get_device_cap": [230, 283], "benchmark_torch_function_in_microsecond": 230, "eager_runtim": 230, "compiled_runtim": 230, "747": 230, "2437149845064u": 230, "392": 230, "07384741178u": 230, "linearlr": 231, "compiling_optimizer_lr_schedul": [231, 274, 287], "set_device_map": 232, "worker0": 232, "worker1": 232, "payload": [232, 264], "infiniband": 232, "cma": 232, "comm_mod": [232, 235], "pend": [232, 265], "current_stream": 232, "tensorpiperpcbackendopt": 232, "num_worker_thread": 232, "rpc_backend_opt": 232, "34x": 232, "3145179748535156": 232, "06867480278015137": 232, "luca": [233, 234], "pasqualin": [233, 234], "iri": [233, 234, 236], "rodrigo": [233, 234], "kumpera": [233, 234], "async_sav": 233, "checkpoint_size_per_rank": 233, "number_of_rank": 233, "pageabl": 233, "get_state_dict": [233, 234], "set_state_dict": [233, 234], "appstat": [233, 234], "protocol": [233, 234], "load_stat_dict": [233, 234], "sharded_state_dict": [233, 234], "optim_state_dict": [233, 234], "run_fsdp_checkpoint_save_exampl": [233, 234], "checkpoint_futur": 233, "checkpoint_id": [233, 234], "_step": 233, "attack": 233, "filesystemwrit": 233, "storagewrit": 233, "cached_state_dict": 233, "cache_staged_state_dict": 233, "storage_writ": 233, "adddition": 234, "run_fsdp_checkpoint_load_exampl": 234, "run_checkpoint_load_exampl": 234, "format_util": 234, "torch_to_dcp": 234, "dcp_to_torch": 234, "dcp_to_torch_sav": 234, "torch_save_to_dcp": 234, "torch_save_checkpoint_dir": 234, "torch_save_checkpoint": 234, "_new": 234, "anshul": 235, "sinha": 235, "distributedtensor": 235, "interoper": 235, "mlpmodul": 235, "generate_comm_debug_tracing_t": 235, "noise_level": 235, "log_comm_debug_tracing_table_to_fil": 235, "file_nam": [235, 282], "transformer_operation_log": 235, "generate_json_dump": 235, "c10d_function": 235, "comm_mode_features_exampl": 235, "effortlessli": 236, "homogen": 236, "num_node_devic": 236, "shard_rank_list": 236, "shard_group": 236, "current_shard_group": 236, "current_replicate_group": 236, "shard_factor": 236, "replicate_group_rank": 236, "replicate_group": 236, "2d_setup": 236, "thru": 236, "get_group": 236, "mesh_dim": 236, "2d_setup_with_device_mesh": 236, "meshshap": 236, "dp_replic": 236, "dp_shard": 236, "mesh_3d": 236, "hsdp_mesh": 236, "tp_group": 236, "_foreach": 239, "horizton": 239, "sunita": 240, "nadamp": 240, "graviton3": 240, "sve": 240, "simd": 240, "graviton2": 240, "bla": 240, "acl": 240, "c7g": 240, "bfloa16": 240, "r7g": 240, "m7g": 240, "4vcpu": 240, "profileract": [240, 257], "myneuralnetwork": 240, "linear_relu_stack": 240, "11008": 240, "pred_probab": 240, "set_grad_en": 240, "mymodel_infer": 240, "self_cpu_time_tot": [240, 257], "813": 240, "255m": 240, "177": 240, "032m": 240, "160u": 240, "162": [240, 252], "054m": 240, "540": 240, "180u": 240, "738m": 240, "201": 240, "955m": 240, "985": 240, "282m": 240, "421m": 240, "043m": 240, "810u": 240, "356m": 240, "179": 240, "388m": 240, "896": 240, "940u": 240, "mmla": 240, "torchbench": 240, "dnnl_default_fpmath_mod": 240, "052": 240, "507m": 240, "167": [240, 285], "653m": 240, "838": 240, "265u": 240, "107": 240, "593m": 240, "358": 240, "643u": 240, "167m": 240, "262": 240, "911m": 240, "060": 240, "533m": 240, "414m": 240, "892m": 240, "307u": 240, "281m": 240, "934m": 240, "849": [240, 252], "670u": 240, "fastmath": 240, "821": 240, "914": 240, "713m": 240, "244m": 240, "711": 240, "220u": 240, "322m": 240, "307": 240, "740u": 240, "094": 240, "495m": 240, "921": 240, "736m": 240, "131m": 240, "441m": 240, "803u": 240, "942m": 240, "186m": 240, "720": 240, "930u": 240, "848": 240, "944": 240, "148m": 240, "141": [240, 252], "309m": 240, "706": 240, "545u": 240, "916m": 240, "720u": 240, "431m": 240, "471m": 240, "951": 240, "170m": 240, "027m": 240, "243m": 240, "143u": 240, "928m": 240, "237m": 240, "185u": 240, "47x": 240, "noteworthi": 240, "till": 240, "torch_mkldnn_matmul_min_dim": 240, "958": 240, "612m": 240, "124m": 240, "620u": 240, "951m": 240, "170u": 240, "423m": 240, "034": 240, "691m": 240, "988": 240, "628m": 240, "520m": 240, "945m": 240, "817u": 240, "382m": 240, "136": 240, "910u": 240, "604m": 240, "295": 240, "437m": 240, "477m": 240, "516m": 240, "558": 240, "387u": 240, "708m": 240, "499m": 240, "788": 240, "627m": 240, "982m": 240, "385m": 240, "617u": 240, "932m": 240, "297": 240, "369m": 240, "487m": 240, "038m": 240, "060m": 240, "300u": 240, "013m": 240, "710u": 240, "521m": 240, "750m": 240, "216": 240, "475m": 240, "033m": 240, "110u": 240, "285m": 240, "345m": 240, "725u": 240, "margin": 240, "thp_mem_alloc_en": 240, "321": 240, "069m": 240, "568m": 240, "613m": 240, "602m": 240, "682": 240, "007u": 240, "777m": 240, "697": 240, "082m": 240, "329": 240, "097m": 240, "547m": 240, "325": 240, "115m": 240, "626m": 240, "avx512": 241, "amx": [241, 242], "xmx": 241, "claus": [241, 242, 286], "nhwc": 241, "cooper": 241, "roialign": 241, "intel_extension_for_pytorch": [241, 275], "ipex": [241, 271, 275], "bertmodel": 241, "seq_length": 241, "check_trac": 241, "cache_en": 241, "argc": 241, "cerr": 241, "memoryformat": 241, "channelslast": 241, "intel_ext_pt_cpu": 241, "libpytorch_path": 241, "ldd": 241, "workspac": [241, 283], "cmake_have_libc_pthread": 241, "0x00007f3cf98e0000": 241, "libc10": 241, "0x00007f3cf985a000": 241, "libintel": 241, "ext": 241, "0x00007f3cf70fc000": 241, "libtorch_cpu": [241, 266], "0x00007f3ce16ac000": 241, "libdnnl_graph": 241, "0x00007f3cde954000": 241, "mitig": [242, 267], "conv2_drop": 242, "fc1_drop": 242, "lenet_mnist_model": 242, "pytorch_fx": 242, "accuracy_criterion": 242, "neural_compressor": 242, "calib_dataload": 242, "eval_dataload": 242, "q_model": 242, "top1metr": 242, "quant_aware_train": 242, "training_func": 242, "q_func": 242, "dummy_dataset": 242, "dummydataset": 242, "2021": 242, "linearrelu": 242, "best_configur": 242, "best_model_weight": 242, "int8_model": 242, "gui": [248, 271], "emit_itt": 248, "8080": 248, "path_of_launch": 248, "iteration_n": 248, "range_push": 248, "range_pop": 248, "oneapi": 248, "brown": 248, "percerntag": 248, "jitter": [248, 252], "enrich": 248, "ittsampl": 248, "292820": 248, "unmark": 248, "iteration_": 248, "basefold": 248, "bash_sourc": 248, "gradcam": 250, "283": 250, "occlus": 250, "deconvolut": 250, "guidedbackprop": 250, "deeplift": 250, "gradientshap": 250, "forward_func": 250, "pictori": 250, "textual": 250, "distractor": 250, "visualize_text": 250, "imdb_torchtext_interpret": 250, "gilbert": 250, "tanner": 250, "gilberttann": 250, "captum_recip": [250, 255, 263, 287], "carilli": 251, "ordinarili": 251, "ture": 251, "kepler": 251, "maxwel": 251, "pascal": 251, "modest": 251, "in_siz": 251, "out_siz": 251, "num_lay": 251, "underflow": 251, "scaler": 251, "unscal": 251, "unscale_": 251, "rough": 251, "binary_cross_entropy_with_logit": 251, "suspect": 251, "docstr": 251, "subregion": 251, "backtrac": 251, "torch_show_cpp_stacktrac": 251, "amp_recip": [251, 255, 263, 287], "tediou": 252, "mistak": 252, "mul_sum": 252, "0x7fb10400d0f0": 252, "batched_dot_mul_sum": 252, "379": 252, "0x7fb103d67048": 252, "batched_dot_bmm": 252, "sub_label": 252, "0x7fb103d54080": 252, "118": 252, "0x7fb16935d2e8": 252, "2775": 252, "0x7fb10400d080": 252, "181": [252, 283], "min_run_tim": [252, 266], "274": 252, "748": 252, "432": [252, 257], "22657": 252, "11899": 252, "609": 252, "23098": 252, "27246": 252, "267073": 252, "118823": 252, "189": 252, "2782": 252, "7471": 252, "11874": 252, "173": 252, "7264": 252, "27824": 252, "100060": 252, "121499": 252, "188": 252, "2773": 252, "6111": 252, "12833": 252, "6295": 252, "27062": 252, "71804": 252, "120365": 252, "103": 252, "2804": 252, "6764": 252, "11871": 252, "6640": 252, "27592": 252, "73003": 252, "120083": 252, "callgrindstat": [252, 266], "trip": [252, 266], "batched_dot": 252, "stark": 252, "fuzzer": 252, "10000000": 252, "k0": 252, "k1": 252, "discontigu": 252, "725": 252, "383": 252, "1468": 252, "5039": 252, "2140": 252, "1296": 252, "1598": 252, "310": 252, "519": 252, "763": 252, "1082": 252, "473": 252, "16384": 252, "12642115": 252, "4800": 252, "20400": 252, "110000": 252, "400000": 252, "1100": [252, 266], "2440": 252, "870": 252, "2030": 252, "495": 252, "23600": 252, "62374": 252, "90000": 252, "240372": 252, "69": 252, "40156": 252, "2670": 252, "opac": 252, "complementari": 252, "insensit": 252, "environment": 252, "cpp_lib": 252, "cpp_sourc": 252, "batched_dot_src": 252, "extra_cflag": 252, "extra_include_path": 252, "getenv": 252, "batched_dot_mul_sum_v0": 252, "batched_dot_mul_sum_v1": 252, "module_import_str": 252, "67631": 252, "importlib": 252, "spec_from_file_loc": 252, "repr": 252, "module_from_spec": 252, "exec_modul": 252, "textwrap": 252, "pretty_print": 252, "t_baselin": 252, "stats_v0": 252, "collect_callgrind": 252, "stats_v1": 252, "as_standard": [252, 266], "denois": 252, "cancel": [252, 267], "ing": 252, "wrap_pybind_function_impl_": 252, "linewidth": 252, "valgrind_wrapp": [252, 266], "timer_interfac": [252, 266], "0x7fb0f06e7630": 252, "2392671": 252, "4367": 252, "rel_with_deb_info": [252, 266], "0x7fb10400d208": 252, "2378978": 252, "functioncount": [252, 266], "0x7fb1000ab358": 252, "0x000000000020d9e0": 252, "0x000000000020db10": 252, "integer_sequ": 252, "0ul": 252, "1ul": 252, "5200": 252, "undefinedtensorimpl": 252, "reset_": 252, "5935": 252, "0x000000000022c0e0": 252, "13693": 252, "impos": [253, 264], "changing_default_devic": [253, 263, 287], "subsidiari": [254, 268, 269], "neighbor": 254, "sharp": 254, "blurri": 254, "defining_a_neural_network": [254, 255, 263, 287], "what_is_state_dict": [255, 263, 269, 287], "saving_and_loading_models_for_infer": 255, "custom_dataset_transforms_load": 255, "dynamic_quant": 255, "warmstarting_model_using_parameters_from_a_different_model": [255, 263, 268, 287], "zeroing_out_gradi": [255, 263, 270, 287], "mobile_perf": 255, "regional_compil": [255, 272, 274, 287], "syntaxerror": [255, 263, 287], "undesir": 256, "unload": 256, "somemodul": 256, "overwritten": [256, 270, 285], "param_in_model": 256, "param_in_state_dict": 256, "set_swap_module_params_on_convers": [256, 264], "swap_tensor": [256, 263, 287], "module_load_state_dict_tip": [256, 263, 287], "shivam": 257, "raikundalia": 257, "model_infer": 257, "_fork": 257, "509m": 257, "503m": 257, "931m": 257, "597m": 257, "700m": 257, "585m": 257, "_convolut": 257, "450m": 257, "mkldnn_convolut": 257, "838m": 257, "114m": 257, "556m": 257, "693m": 257, "734": 257, "_batch_norm_impl_index": 257, "482m": 257, "724": 257, "100u": 257, "native_batch_norm": 257, "229m": 257, "109m": 257, "705": 257, "450u": 257, "332": 257, "631m": 257, "286u": 257, "668m": 257, "292m": 257, "988u": 257, "549m": 257, "dnn": 257, "group_by_input_shap": 257, "008m": 257, "956m": 257, "909m": 257, "834m": 257, "332m": 257, "303m": 257, "273m": 257, "233m": 257, "751m": 257, "occurr": 257, "666m": 257, "484m": 257, "_convolution_nogroup": 257, "thnn_conv2d": 257, "thnn_conv2d_forward": 257, "im2col_kernel": 257, "844m": 257, "sgemm_32x32x32_nn": 257, "206m": 257, "sgemm_32x32x32_nn_vec": 257, "093m": 257, "015m": 257, "567m": 257, "871m": 257, "560u": 257, "convolution_overrid": 257, "gen_conv": 257, "216u": 257, "640u": 257, "632u": 257, "conv_reord": 257, "880u": 257, "448u": 257, "712": 257, "486m": 257, "max_pool2d_with_indic": 257, "kb": 257, "572": 257, "resize_": 257, "masked_select": 257, "112": [257, 282, 283, 285], "122": 257, "064m": 257, "viewer": 257, "439": 257, "_conv_forward": 257, "1051": 257, "_call_impl": 257, "016m": 257, "659m": 257, "skip_first": 257, "step_num": 257, "profiler_recip": [257, 263, 287], "convolutionbackward0": 258, "00045169200006967003": 258, "t_larg": 258, "65535": 258, "00010853300000235322": 258, "fw_hook": 258, "register_forward_hook": 258, "ceil_mod": 258, "015": [258, 263, 287], "reasoning_about_shap": [258, 263, 287], "021": 263, "tensorboard_with_pytorch": [263, 265, 287], "timer_quick_start": [263, 266, 287], "tuning_guid": [263, 267, 287], "hereaft": 264, "__class__": 264, "__slots__": 264, "pertin": 264, "__torch_dispatch__": [264, 282], "new_param": 264, "myquantizedlinearweight": 264, "elem": 264, "__setattr__": 264, "module_load": 264, "__torch_function__": 264, "param_kei": 264, "scalar_valu": 265, "walltim": 265, "tfevent": 265, "OR": 265, "0x7f1929a38ed0": 266, "iqr": 266, "424": 266, "0x7f192b019ed0": 266, "unsurprisingli": 266, "0x7f1929a35850": 266, "563600": 266, "tensormethod": 266, "ab_ref": 266, "0x7f192a6dfd90": 266, "47264": 266, "_int_fre": 266, "25963": 266, "_int_malloc": 266, "19900": 266, "tensorit": 266, "tensoriteratorconfig": 266, "__tls_get_addr": 266, "13500": 266, "malloc": [266, 267, 285], "11300": 266, "smallvector": 266, "10345": 266, "_int_memalign": 266, "9200": 266, "iteratorbas": 266, "get_strid": 266, "173472": 266, "0x7f192995d750": 266, "118200": 266, "tensoriter": 266, "65000": 266, "20900": 266, "15900": 266, "15100": 266, "cpualloc": 266, "12500": 266, "352327": 266, "a0": 266, "b0": 266, "a1": 266, "a127": 266, "pickleabl": 266, "broadcasting_stat": 266, "17600": 266, "tensoriteratorbas": 266, "compute_strid": 266, "12700": 266, "allocate_or_resize_output": 266, "10200": 266, "smallvectorimpl": 266, "7400": 266, "6200": 266, "invert_perm": 266, "6064": 266, "5100": 266, "reorder_dimens": 266, "4300": 266, "compatible_strid": 266, "check_tensor_options_and_extract_memory_format": 266, "__memcmp_avx2_movb": 266, "empty_cpu": 266, "1300": 266, "2400": 266, "6100": 266, "compute_fast_setup_typ": 266, "22600": 266, "fast_set_up": 266, "58091": 266, "580": 266, "0x7f19299544d0": 266, "compute_shap": 266, "2300": 266, "coalesce_dimens": 266, "promin": 266, "__add__": 266, "__sub__": 266, "dice": 266, "szymon": 267, "migacz": 267, "set_to_non": 267, "elementwis": [267, 283], "anomali": 267, "detect_anomali": 267, "set_detect_anomali": 267, "emit_nvtx": 267, "nth": 267, "cpunodebind": 267, "membind": 267, "pytorch_script": 267, "omp_num_thread": [267, 285], "thrash": 267, "gomp_cpu_affin": 267, "omp_proc_bind": 267, "omp_schedul": 267, "libgomp": [267, 285], "sleep": 267, "jemalloc": [267, 285], "tcmalloc": [267, 285], "emphas": 267, "fragment": [267, 283], "ccl": 267, "set_float32_matmul_precis": 267, "judgment": 270, "itt": 271, "vtune": 271, "torchcompil": 271, "run_cpu": 271, "graviton": 271, "compressor": 271, "tensorpip": 271, "dcp": 271, "commdebugmod": 271, "animesh": 272, "jain": 272, "startup": 272, "inline_inbuilt_nn_modul": 272, "graph_cod": 272, "strateg": 272, "830": 274, "814": [274, 283, 287], "torch_compiler_set_stance_tutori": [274, 280, 287], "torch_compile_torch_function_mod": [274, 278, 287], "torch_export_aoti_python": [274, 281, 287], "torch_compile_user_defined_triton_kernel_tutori": [274, 279, 287], "compile_model": 275, "resnet50_weight": 275, "weights_prepack": 275, "oguz": [276, 277, 279], "ulgen": [276, 277, 279], "sam": [276, 282], "larsen": 276, "fxgraphcach": [276, 277], "aotautogradcach": [276, 277], "redi": [276, 277], "usernam": 276, "aotautograd": [276, 277], "fxgraph": 276, "torchinductor_": 276, "torchinductor_myusernam": [276, 277], "triton_cache_dir": 276, "torchinductor_redis_host": 276, "torchinductor_redis_port": 276, "6379": 276, "cachebench": 277, "onward": 277, "save_cache_artifact": 277, "load_cache_artifact": 277, "artifact_byt": 277, "cache_info": 277, "pgo": [277, 283], "tritoncach": 277, "inductorcach": 277, "bundl": 277, "autotuningcach": 277, "torchinductor_cache_dir": 277, "basetorchfunctionmod": 278, "flopcountermod": 279, "wrap_triton": 279, "footgun": 279, "register_kernel": 279, "register_flop_formula": 279, "flop_count": 279, "mysin": 279, "reappli": 280, "force_eag": 280, "eager_on_recompil": 280, "fail_on_recompil": 280, "torch.export": 281, "torch._inductor.aoti_compile_and_packag": 281, "aot_compil": 281, "torch._export.aoti_load_packag": 281, "ankith": [281, 282], "gunap": [281, 282], "_export": 281, "aot_load": 281, "max_autotun": [281, 283], "runner": 281, "archive_format": 281, "10088": 281, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 281, "17160": 281, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 281, "16616": 281, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 281, "17776": 281, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 281, "10856": 281, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 281, "14608": 281, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 281, "11376": 281, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 281, "10984": 281, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 281, "14736": 281, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 281, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 281, "11624": 281, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 281, "15632": 281, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 281, "25472": 281, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 281, "139389": 281, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 281, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 281, "47195424": 281, "47523148": 281, "jordi": 282, "ramon": 282, "marco": 282, "carranza": 282, "mvit": 282, "whisper": 282, "blip": 282, "sam2": 282, "timm": 282, "multiscal": 282, "kinet": 282, "mvit_v1_b_weight": 282, "mvit_v1_b": 282, "224x224x3": 282, "input_fram": 282, "num_clip": 282, "print_exc": 282, "batch_dim": 282, "asr": 282, "transcrib": 282, "spoken": 282, "680k": 282, "whisperprocessor": 282, "whisperforconditionalgener": 282, "decoder_input_id": 282, "decoder_start_token_id": 282, "internaltorchdynamoerror": 282, "attributeerror": 282, "dynamiccach": 282, "key_cach": 282, "non_strict": 282, "proxytensor": 282, "gameplai": 282, "gamer": 282, "salesforc": 282, "blip_decod": 282, "caption_input": 282, "model_url": 282, "googleapi": 282, "sfr": 282, "model_base_capfilt_larg": 282, "exportdb": 282, "bos_token_id": 282, "anaconda3": 282, "functional_tensor": 282, "545": 282, "outs_unwrap": 282, "_op_dk": 282, "sam2imagepredictor": 282, "_predict": 282, "unnorm_coord": 282, "unnorm_box": 282, "mask_input": 282, "multimask_output": 282, "return_logit": 282, "image_predict": 282, "sam2_image_predictor": 282, "359": 282, "exporthelp": 282, "model_to_export": 282, "aoti": 282, "i0721": 283, "393000": 283, "22424": 283, "chromiumeventlogg": 283, "c19f6d01": 283, "591f": 283, "4396": 283, "9250": 283, "063a061466dc": 283, "v0721": 283, "394000": 283, "convert_fram": 283, "1003": 283, "recipes_sourc": [283, 287], "elid": 283, "make_main": 283, "make_mod": 283, "run_make_mod": 283, "run_generic_build": 283, "build_main": 283, "sourcedir": 283, "confdir": 283, "outputdir": 283, "_init_build": 283, "sphinx_galleri": 283, "gen_galleri": 283, "757": 283, "generate_gallery_rst": 283, "generate_dir_rst": 283, "gen_rst": 283, "606": 283, "607": 283, "genexpr": 283, "p_fun": 283, "fname": 283, "target_dir": 283, "src_dir": 283, "gallery_conf": 283, "_popen": 283, "_default_context": 283, "process_obj": 283, "popen": 283, "popen_fork": 283, "_launch": 283, "_bootstrap": 283, "parent_sentinel": 283, "child_r": 283, "108": 283, "_target": 283, "_arg": 283, "_kwarg": 283, "call_fn": 283, "1374": 283, "generate_file_rst": 283, "output_block": 283, "execute_script": 283, "1192": 283, "execute_code_block": 283, "1048": 283, "is_last_expr": 283, "mem_max": 283, "_exec_and_get_memori": 283, "876": 283, "call_memori": 283, "1725": 283, "_sg_call_memory_noop": 283, "794": 283, "fake_main": 283, "399000": 283, "symbolic_convert": 283, "3324": 283, "symbolic_shap": 283, "3334": 283, "create_env": 283, "402000": 283, "1216": 283, "__trace_sourc": 283, "starts_lin": 283, "404000": 283, "1239": 283, "__trace_bytecod": 283, "load_fast": 283, "lazyvariabletrack": 283, "binary_add": 283, "406000": 283, "3025": 283, "wrap_to_fak": 283, "statefulsymboliccontext": 283, "dynamic_s": 283, "dimdynam": 283, "dynamic_strid": 283, "infer_strid": 283, "constraint_s": 283, "constraint_strid": 283, "view_base_context": 283, "tensor_sourc": 283, "localsourc": 283, "local_nam": 283, "is_input": 283, "is_derefed_cell_cont": 283, "shape_env_to_source_to_symbol_cach": 283, "407000": 283, "output_graph": 283, "2271": 283, "create_graph_input": 283, "l_x_": 283, "debug_level": 283, "408000": 283, "409000": 283, "l_y_": 283, "412000": 283, "store_fast": 283, "tensorvari": 283, "load_const": 283, "413000": 283, "constantvari": 283, "414000": 283, "return_valu": 283, "3681": 283, "3685": 283, "415000": 283, "1008": 283, "graphcompilereason": 283, "user_stack": 283, "framesummari": 283, "416000": 283, "1408": 283, "__graph_cod": 283, "__compiled_fn_1": 283, "_lazy_graph_modul": 283, "f32": 283, "add_1": 283, "418000": 283, "1515": 283, "767000": 283, "4734": 283, "produce_guard": 283, "773000": 283, "1520": 283, "775000": 283, "4954": 283, "track_symint": 283, "776000": 283, "storage_offset": 283, "777000": 283, "778000": 283, "5156": 283, "779000": 283, "780000": 283, "781000": 283, "2557": 283, "__guard": 283, "2495": 283, "tree_guard_manag": 283, "rootguardmanag": 283, "default_devic": 283, "utils_devic": 283, "520": 283, "init_ambient_guard": 283, "global_st": 283, "___check_global_st": 283, "torch_function_mode_stack": 283, "___check_torch_function_mode_stack": 283, "guardmanag": 283, "accessed_bi": 283, "framelocalsguardaccessor": 283, "framelocals_idx": 283, "tensor_match": 283, "check_tensor": 283, "backendselect": 283, "no_hasattr": 283, "hasattr": 283, "_dynamo_dynamic_indic": 283, "no_tensor_alias": 283, "check_no_alias": 283, "783000": 283, "2524": 283, "660": 283, "put_code_st": 283, "784000": 283, "1121": 283, "run_gc_after_compil": 283, "gc": 283, "787000": 283, "1395": 283, "_fn": 283, "skipfil": 283, "eval_fram": 283, "788000": 283, "145": 283, "reset_code_cach": 283, "877000": 283, "codecach": 283, "1093": 283, "__output_cod": 283, "0_infer": 283, "ctype": 283, "c_long": 283, "c_int": 283, "cmath": 283, "nanj": 283, "maybe_profil": 283, "memory_plan": 283, "_align": 283, "asynccompil": 283, "select_algorithm": 283, "extern_kernel": 283, "multi_kernel": 283, "multikernelcal": 283, "tl": 283, "triton_heurist": 283, "start_graph": 283, "end_graph": 283, "_cuda_getcurrentrawstream": 283, "get_raw_stream": 283, "inductor_op": 283, "_quantiz": 283, "empty_strided_cpu": 283, "_empty_strided_cpu": 283, "empty_strided_cuda": 283, "_empty_strided_cuda": 283, "empty_strided_xpu": 283, "_empty_strided_xpu": 283, "reinterpret_tensor": 283, "_reinterpret_tensor": 283, "alloc_from_pool": 283, "_alloc_from_pool": 283, "empty_strided_p2p": 283, "_symmetricmemori": 283, "torchinductor_ci": 283, "ld": 283, "cld7tar7n7kytdxqq7n73fjc5nptwpbw7wqmdbp24zf62axk3q3a": 283, "topolog": 283, "num_us": 283, "call_funct": 283, "triton_poi_fused_add_0": 283, "triton_help": 283, "libdevic": 283, "tl_math": 283, "autotunehint": 283, "reductionhint": 283, "tilehint": 283, "deviceproperti": 283, "set_driver_to_gpu": 283, "size_hint": 283, "triton_meta": 283, "xnumel": 283, "i32": 283, "xblock": 283, "multi_processor_count": 283, "regs_per_multiprocessor": 283, "65536": 283, "max_threads_per_multi_processor": 283, "1536": 283, "warp_siz": 283, "tt": 283, "inductor_meta": 283, "grid_typ": 283, "grid1d": 283, "autotune_hint": 283, "kernel_nam": 283, "mutated_arg_nam": 283, "optimize_mem": 283, "no_x_dim": 283, "num_load": 283, "num_reduct": 283, "backend_hash": 283, "1e2c16421d4c3dba4ad92bfc4278a3cb24c43deda6ee7ff9e3fbb1dbb80802db": 283, "are_deterministic_algorithms_en": 283, "assert_indirect_index": 283, "autotune_local_cach": 283, "autotune_pointwis": 283, "autotune_remote_cach": 283, "force_disable_cach": 283, "dynamic_scale_rblock": 283, "max_autotune_pointwis": 283, "min_split_scan_rblock": 283, "spill_threshold": 283, "store_cubin": 283, "min_elem_per_thread": 283, "xoffset": 283, "program_id": 283, "xindex": 283, "xmask": 283, "device_str": 283, "benchmark_compiled_modul": 283, "rand_strid": 283, "print_perform": 283, "wrapper_benchmark": 283, "compiled_module_main": 283, "884000": 283, "1094": 283, "nk": 283, "cnk55csixpane7aredk4kvfxz3fx2bb7zgzf4vpzqkzufdznzojb": 283, "preload": 285, "tunabl": 285, "taskset": 285, "uma": 285, "lscpu": 285, "9480": 285, "vendor": 285, "genuineintel": 285, "node0": 285, "node1": 285, "cento": 285, "yum": 285, "libiomp": 285, "perftool": 285, "gperftool": 285, "libjemalloc2": 285, "ninstanc": 285, "ncore": 285, "program_arg": 285, "iomp": 285, "prepend": 285, "core_id": 285, "dafault": 285, "ncores_per_inst": 285, "libtcmalloc": 285, "preliminarili": 285, "deepspe": 286, "marian": 286, "oftentim": 286, "exp_avg": 286, "exp_avg_sq": 286, "print_peak_memori": 286, "max_memory_alloc": 286, "use_zero": 286, "optimizer_class": 286, "992": 286, "1361": 286, "3453": 286, "6123046875": 286, "1697": 286, "398": 287, "galleri": 287, "intermediate_sourc": 287, "prototype_sourc": 287, "advanced_sourc": 287}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 113, 114, 115, 116, 117], "live": 0, "tutori": [0, 38, 41, 53, 54, 56, 58, 61, 91, 98, 104, 124, 127, 136, 138, 169, 175, 177, 178, 185, 193, 194, 197, 198, 200, 206, 241, 242, 281], "torchrl": [1, 16, 177], "object": [1, 106, 143, 197], "code": [1, 2, 9, 16, 38, 39, 58, 98, 206, 212, 227, 248], "ddpg": 1, "loss": [1, 14, 39, 47, 50, 53, 56, 99, 103, 104, 105, 141, 145, 154, 177, 251, 270], "overview": [1, 20, 64, 113, 117, 124, 146, 154, 159, 182, 195, 203, 214, 233, 242, 267], "prerequisit": [1, 39, 104, 113, 117, 176, 203, 206, 216, 219, 235, 239, 257, 272, 276, 277, 279, 280, 281, 282], "import": [1, 14, 48, 59, 92, 190, 254, 257, 268, 269, 270], "setup": [1, 20, 22, 92, 112, 146, 153, 154, 165, 173, 176, 187, 188, 200, 201, 222, 230, 231, 239, 254, 257, 268, 269, 270, 272, 283], "lossmodul": 1, "The": [1, 7, 9, 92, 94, 103, 142, 173, 174, 183, 198, 248], "__init__": [1, 36], "method": [1, 17, 153, 165, 197, 215, 264], "valu": [1, 154, 169, 177, 194], "estim": [1, 161], "actor": 1, "put": [1, 161, 176, 197], "thing": [1, 16], "togeth": [1, 16, 141, 161, 168, 176, 197, 251], "forward": [1, 6, 7, 119, 139, 146, 157, 160, 197, 198], "call": [1, 192], "environ": [1, 16, 57, 140, 154, 161, 177, 190, 205, 207], "transform": [1, 10, 16, 44, 45, 55, 99, 128, 129, 138, 141, 160, 170, 172, 173, 177, 182, 185, 198], "parallel": [1, 10, 48, 58, 60, 64, 132, 137, 138, 139, 141, 151, 152, 164, 172, 173, 201, 236, 267], "execut": [1, 16, 22, 114, 173, 179, 187, 257, 267], "normal": [1, 47, 177, 270], "observ": 1, "stat": 1, "build": [1, 4, 6, 12, 35, 99, 106, 158, 174, 191, 198, 225, 227, 270], "model": [1, 7, 10, 14, 20, 22, 23, 35, 39, 40, 41, 48, 53, 59, 64, 79, 80, 89, 95, 97, 99, 101, 103, 104, 109, 111, 113, 114, 121, 123, 127, 128, 138, 139, 141, 142, 149, 151, 154, 155, 158, 161, 162, 164, 165, 172, 173, 175, 176, 183, 185, 187, 188, 190, 197, 200, 219, 227, 230, 231, 239, 241, 242, 246, 247, 248, 250, 254, 257, 261, 262, 267, 268, 269, 281, 282], "explor": [1, 22], "data": [1, 7, 10, 23, 28, 36, 40, 47, 48, 53, 54, 56, 58, 59, 60, 92, 99, 102, 112, 127, 137, 138, 139, 141, 144, 145, 151, 177, 183, 185, 187, 188, 190, 194, 195, 203, 214, 243, 254, 267, 268, 269, 270], "collector": [1, 154, 177], "evalu": [1, 53, 127, 142, 143, 144, 183, 251], "your": [1, 6, 12, 16, 36, 64, 97, 101, 112, 119, 167, 197, 205, 236, 254], "record": [1, 187, 203], "replai": [1, 154, 177, 178], "buffer": [1, 154, 177, 267], "storag": [1, 204, 282], "batch": [1, 11, 16, 147, 160, 179, 191, 240, 267, 282], "size": [1, 282], "modul": [1, 7, 17, 71, 89, 99, 112, 119, 120, 154, 157, 169, 175, 195, 224, 256, 264, 282], "construct": [1, 22, 59, 214, 215], "target": [1, 161, 267], "network": [1, 7, 35, 47, 50, 56, 92, 106, 109, 144, 145, 154, 161, 177, 178, 183, 185, 198, 251, 254, 268, 269, 270], "updat": [1, 50, 161, 179, 224], "optim": [1, 39, 40, 47, 56, 73, 103, 106, 112, 120, 139, 143, 168, 181, 195, 230, 231, 240, 267, 269, 270, 273, 285, 286], "time": [1, 21, 42, 51, 68, 74, 78, 86, 90, 100, 110, 118, 119, 122, 176, 184, 223, 257, 263, 266, 272, 274, 276, 277, 287], "train": [1, 3, 4, 7, 10, 13, 16, 18, 23, 27, 35, 36, 47, 53, 56, 57, 59, 92, 94, 97, 101, 103, 106, 121, 127, 138, 141, 142, 144, 145, 149, 150, 153, 154, 161, 168, 172, 177, 178, 183, 185, 188, 195, 219, 241, 242, 267, 270, 275, 279], "polici": [1, 16, 138, 154, 177], "experi": [1, 16, 17, 143, 200], "result": [1, 3, 48, 56, 79, 114, 119, 143, 144, 148, 177, 183, 185, 187, 195, 222, 248, 250, 252], "conclus": [1, 2, 3, 4, 6, 7, 16, 17, 18, 20, 23, 53, 86, 104, 113, 114, 117, 124, 140, 141, 146, 154, 158, 159, 161, 162, 168, 171, 173, 177, 182, 192, 194, 195, 198, 201, 203, 204, 205, 206, 207, 212, 213, 214, 215, 216, 217, 219, 221, 222, 228, 231, 233, 234, 235, 236, 239, 240, 256, 264, 267, 272, 276, 277, 278, 279, 280, 281, 282, 283, 285], "next": [1, 47, 56, 79, 176, 177], "step": [1, 124, 168, 173, 174, 176, 177, 187, 198, 252, 254, 257, 268, 269, 270, 272], "autograd": [2, 4, 11, 12, 34, 46, 66, 67, 81, 94, 120, 142, 146, 157, 181], "c": [2, 3, 4, 6, 7, 8, 9, 11, 12, 206, 227, 241, 266], "frontend": [2, 7, 89, 91], "basic": [2, 7, 37, 38, 146, 151, 157, 171, 174, 179, 192, 194, 240, 279], "oper": [2, 4, 6, 9, 11, 12, 18, 43, 52, 94, 108, 117, 171, 200, 214, 215, 217, 228, 267], "comput": [2, 16, 21, 34, 42, 46, 51, 68, 74, 78, 86, 90, 100, 108, 110, 111, 118, 122, 127, 160, 165, 184, 223, 250, 263, 267, 274, 287], "higher": 2, "order": [2, 267], "gradient": [2, 14, 34, 79, 95, 139, 170, 214, 251, 267, 270], "us": [2, 3, 6, 7, 10, 13, 14, 15, 27, 38, 46, 54, 57, 87, 112, 113, 114, 117, 119, 121, 126, 137, 139, 146, 147, 149, 151, 152, 154, 155, 157, 170, 172, 174, 179, 180, 181, 182, 187, 188, 190, 204, 207, 210, 214, 216, 227, 229, 232, 234, 235, 236, 242, 248, 250, 256, 257, 265, 267, 268, 279, 281, 283, 285, 286], "custom": [2, 4, 6, 8, 9, 12, 16, 17, 18, 36, 55, 71, 117, 120, 126, 127, 132, 147, 148, 157, 174, 175, 194, 197, 236], "function": [2, 14, 17, 23, 34, 39, 47, 50, 56, 67, 79, 89, 92, 99, 103, 104, 105, 106, 112, 120, 147, 148, 157, 160, 165, 170, 175, 177, 239, 252, 257, 267, 270, 278], "translat": [2, 123, 129, 183], "from": [2, 9, 23, 46, 54, 112, 114, 121, 144, 145, 149, 166, 183, 190, 195, 197, 256, 268], "python": [2, 4, 6, 9, 18, 89, 174, 227, 281, 283], "cuda": [3, 4, 6, 9, 54, 86, 171, 232, 267], "graph": [3, 34, 46, 101, 108, 114, 146, 192, 194, 219, 267, 282], "pytorch": [3, 6, 7, 9, 12, 14, 17, 23, 27, 46, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 73, 77, 85, 93, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 111, 114, 117, 119, 120, 136, 153, 162, 171, 176, 187, 190, 195, 198, 200, 202, 210, 219, 227, 228, 229, 238, 240, 241, 242, 243, 245, 248, 249, 254, 255, 257, 258, 265, 267, 268, 269, 270, 275], "api": [3, 7, 64, 94, 139, 157, 162, 168, 174, 203, 206, 227, 248, 267, 283], "get": [3, 12, 35, 86, 111, 137, 139, 151, 159, 167, 181, 217, 234, 235, 236, 241, 242], "start": [3, 86, 101, 137, 139, 151, 167, 181, 217, 234, 235, 236, 241, 242, 266, 272, 285], "set": [4, 92, 140, 143, 190, 200, 203, 205, 207, 230, 231, 239, 267, 276], "up": [4, 76, 120, 143, 190, 197, 200, 205, 207, 230, 231, 239, 240, 266], "system": 4, "defin": [4, 7, 11, 23, 35, 47, 50, 53, 67, 104, 113, 120, 143, 173, 177, 190, 197, 200, 252, 254, 266, 268, 269, 270, 279], "op": [4, 6, 11, 194, 278], "ad": [4, 11, 18, 92, 188, 195, 251, 279], "backend": [4, 11, 12, 17, 140, 153, 159, 174, 200, 219, 227, 267, 275, 285], "implement": [4, 11, 39, 56, 79, 105, 117, 147, 169, 174, 179, 180, 182, 212, 214, 224, 239], "an": [4, 12, 16, 47, 109, 111, 117, 121, 142, 154, 177, 195, 203, 231, 256, 285], "regist": [4, 7, 11, 12, 17], "torch": [4, 8, 34, 46, 85, 99, 108, 112, 113, 121, 144, 146, 151, 175, 182, 191, 192, 193, 194, 198, 204, 207, 214, 219, 226, 230, 239, 251, 252, 256, 264, 272, 277, 278, 279, 280, 281, 282, 283, 285], "compil": [4, 6, 8, 130, 146, 159, 182, 191, 192, 198, 207, 216, 219, 230, 231, 239, 272, 276, 277, 278, 279, 280, 281, 283], "support": [4, 8, 11, 12, 18, 92, 101, 117, 182, 215, 224, 279], "hybrid": [4, 89, 91], "registr": 4, "test": [4, 12, 16, 18, 47, 79, 92, 147, 191, 197, 227, 254, 266], "creat": [4, 9, 15, 36, 40, 48, 53, 102, 106, 108, 112, 143, 144, 145, 158, 165, 175, 267], "mutabl": [4, 18], "extens": [6, 12, 15, 132, 135, 174, 221, 228, 231, 241, 264, 275], "motiv": [6, 7, 89, 212], "exampl": [6, 15, 18, 79, 83, 89, 94, 95, 106, 109, 111, 120, 121, 142, 198, 203, 206, 216, 221, 241, 275, 280, 285], "write": [6, 7, 16, 55, 153, 188, 197, 212], "setuptool": 6, "pass": [6, 13, 119, 140, 146, 168, 191, 254], "backward": [6, 12, 138, 139, 146, 147, 148, 168], "bind": 6, "perform": [6, 119, 140, 155, 158, 159, 162, 170, 176, 182, 187, 207, 216, 233, 240, 242, 245, 267, 280, 285], "comparison": [6, 147, 151, 170, 192], "gpu": [6, 7, 47, 48, 59, 83, 92, 121, 171, 187, 195, 205, 210, 241, 267], "devic": [6, 14, 17, 35, 121, 138, 227, 232, 253, 256, 259, 267], "jit": [6, 12, 113, 176], "mix": [6, 138, 139, 149, 251, 267], "accessor": 6, "integr": [6, 9, 17, 95], "applic": [7, 153, 174, 229, 264], "neural": [7, 14, 35, 47, 50, 92, 112, 161, 165, 242, 254, 268, 269, 270], "paramet": [7, 15, 35, 39, 40, 48, 99, 121, 175, 177, 179, 180, 224, 252, 267, 268], "submodul": 7, "travers": 7, "hierarchi": [7, 248], "run": [7, 38, 48, 53, 54, 57, 58, 59, 79, 89, 98, 104, 143, 151, 187, 190, 194, 230, 231, 239, 257, 265], "mode": [7, 22, 23, 157, 160, 216, 241, 278], "ownership": 7, "dcgan": [7, 56], "what": [7, 12, 13, 17, 20, 47, 56, 60, 61, 94, 112, 121, 148, 155, 170, 171, 203, 222, 226, 231, 232, 235, 236, 248, 269, 281, 285, 286], "wa": 7, "gan": [7, 56], "agan": 7, "gener": [7, 17, 56, 79, 121, 143, 145, 252, 260, 267], "discrimin": [7, 56, 105], "load": [7, 14, 36, 40, 41, 47, 53, 57, 104, 121, 127, 149, 151, 183, 185, 204, 234, 243, 252, 254, 256, 259, 260, 261, 267, 268, 269, 270], "loop": [7, 16, 39, 103, 154, 177, 178], "move": [7, 102], "checkpoint": [7, 59, 121, 138, 151, 161, 233, 234, 256, 260, 267], "recov": 7, "state": [7, 139, 286], "inspect": [7, 146, 169, 175, 188, 251], "imag": [7, 14, 47, 62, 63, 101, 114, 127, 176, 190, 282], "class": [8, 13, 16, 35, 55, 104, 169, 195], "export": [8, 113, 114, 117, 121, 193, 194, 219, 281, 282], "why": [8, 9, 57, 60, 141, 142, 214, 217, 235, 236], "do": [8, 11, 47, 94, 148, 162], "we": [8, 94], "need": [8, 11, 94, 198], "make": [8, 13, 105, 229], "fake": 8, "author": [9, 114], "manual": 9, "when": [9, 141, 148, 149, 214, 281], "should": [9, 60, 141], "i": [9, 13, 17, 32, 47, 56, 60, 61, 112, 121, 148, 149, 155, 168, 170, 198, 214, 226, 228, 232, 235, 236, 248, 251, 269, 282, 286], "distribut": [10, 13, 19, 22, 57, 58, 59, 60, 64, 86, 132, 151, 152, 153, 173, 180, 181, 195, 233, 234, 267], "pipelin": [10, 152, 172, 173], "dispatch": [11, 12, 182], "schema": 11, "For": [11, 94, 261], "In": [11, 94, 102, 262], "place": [11, 94, 102], "view": [11, 187], "go": [11, 47, 56, 79, 190, 198], "beyond": 11, "autocast": [11, 251], "tracer": 11, "extend": [12, 117, 175, 198], "new": [12, 17, 67, 105, 120, 147], "": [12, 18, 108, 161, 213], "kei": [12, 282], "full": [12, 39, 92], "list": 12, "kernel": [12, 17, 86, 165, 239, 240, 279], "against": 12, "nativ": [12, 229], "compat": 12, "known": 12, "issu": 12, "addit": [12, 124, 136, 171, 173, 187, 203], "note": [12, 105, 250], "futur": [12, 17], "work": [12, 13, 17, 40, 137, 138, 139, 141, 162, 221, 234], "stai": 12, "touch": 12, "uneven": 13, "input": [13, 56, 59, 79, 148, 195, 198, 252, 267], "join": 13, "context": [13, 201], "manag": [13, 171], "requir": [13, 20, 114, 142, 175, 222, 232, 248, 282, 286], "distributeddataparallel": [13, 151, 267], "zeroredundancyoptim": [13, 286], "keyword": 13, "argument": 13, "how": [13, 17, 38, 137, 138, 139, 141, 168, 207, 221, 232, 234, 236, 248, 254, 265, 286], "doe": [13, 20, 142, 222], "joinabl": 13, "joinhook": 13, "toi": 13, "transfer": [14, 127], "introduct": [14, 27, 46, 56, 64, 86, 93, 95, 96, 97, 98, 101, 102, 103, 108, 116, 140, 169, 171, 173, 187, 190, 192, 195, 196, 201, 206, 207, 212, 215, 216, 219, 224, 227, 228, 254, 257, 268, 269, 270, 276, 277, 285], "underli": 14, "principl": [14, 215], "packag": [14, 82], "select": [14, 154, 201, 225], "content": [14, 120, 240], "style": [14, 198], "descent": 14, "numpi": [15, 43, 52, 76, 102, 120, 213], "scipi": 15, "less": 15, "parametr": [15, 169, 175], "pendulum": 16, "effect": 16, "action": [16, 154], "_step": 16, "reset": 16, "simul": 16, "_reset": 16, "metadata": [16, 17], "env": 16, "_spec": 16, "spec": 16, "shape": [16, 41, 102, 194, 258], "reproduc": 16, "seed": [16, 102], "wrap": [16, 18, 112, 138, 197, 266, 279], "envbas": 16, "our": [16, 22, 147, 153, 168, 191, 254, 268, 269, 270], "rollout": 16, "simpl": [16, 48, 94, 114, 158, 183, 251, 257], "facilit": 17, "privateuse1": 17, "via": [17, 203], "guard": [17, 194], "serial": [17, 175], "deseri": 17, "other": [17, 22, 99, 101, 103, 171, 187], "improv": [17, 119, 187, 219, 240], "user": [17, 85, 227, 279], "renam": 17, "name": [17, 144, 145, 194], "properti": 17, "relat": [17, 41, 190, 264], "pil": 18, "crop": 18, "combin": [19, 141, 151], "dataparallel": [19, 48, 60, 92, 121, 151], "rpc": [19, 132, 152, 179, 180, 181, 202, 232, 238], "framework": [19, 180, 181], "beta": [20, 23, 157, 158, 182, 218, 230, 231, 240, 244, 278, 281, 283], "acceler": [20, 102, 112, 167, 198, 204, 222], "bert": [20, 222], "semi": [20, 27, 222], "structur": [20, 222], "2": [20, 23, 47, 48, 89, 114, 140, 165, 173, 174, 187, 188, 197, 200, 219, 222, 252, 254, 257, 266, 268, 269, 270], "4": [20, 23, 47, 89, 114, 174, 176, 187, 188, 200, 219, 222, 252, 254, 257, 266, 268, 269, 270], "sparsiti": [20, 215, 222], "problem": [20, 222], "solv": [20, 222], "intro": [20, 199, 222], "establish": 20, "baselin": 20, "prune": [20, 175, 222], "spars": [20, 212, 215, 222], "infer": [20, 45, 121, 127, 176, 240, 241, 251, 261, 267, 275, 281], "torchrec": [22, 195, 196], "shard": [22, 64, 137, 138, 139, 141, 195, 286], "instal": [22, 86, 95, 114, 176, 195, 207, 219, 242, 265], "embed": [22, 101, 111, 195], "distributedmodelparallel": [22, 195], "multiprocess": 22, "tabl": [22, 120], "wise": 22, "static": [23, 105, 282], "quantiz": [23, 176, 200, 205, 219, 242], "eager": 23, "1": [23, 47, 89, 114, 140, 165, 173, 174, 187, 188, 194, 197, 200, 219, 252, 254, 257, 266, 268, 269, 270], "architectur": 23, "helper": [23, 215, 239], "3": [23, 47, 48, 89, 114, 140, 173, 174, 187, 188, 200, 219, 252, 254, 257, 266, 268, 269, 270], "dataset": [23, 29, 36, 48, 55, 97, 101, 103, 112, 126, 197, 270], "loader": [23, 92], "imagenet": 23, "post": [23, 219], "5": [23, 47, 114, 187, 188, 200, 252, 257, 266, 270], "awar": [23, 242], "speedup": [23, 192, 251], "supervis": 27, "learn": [27, 37, 38, 49, 61, 89, 105, 106, 107, 120, 127, 132, 161, 171, 177, 178, 179, 181, 187, 203, 252, 254, 257, 265, 268, 269, 270, 281, 285], "usb": 27, "built": [27, 200], "upon": 27, "freematch": 27, "softmatch": 27, "cifar": [27, 104], "10": [27, 104, 168], "onli": [27, 241, 242], "40": 27, "label": [27, 190], "specif": [27, 190, 267], "imbalanc": 27, "algorithm": [27, 178], "audio": [28, 29, 30, 31, 32, 33], "augment": [28, 30, 86, 109, 267], "featur": [30, 31, 95, 109, 127, 138, 187, 190, 195, 241, 242], "extract": [31, 190], "o": 32, "resampl": 33, "automat": [34, 108, 157, 251, 282], "differenti": [34, 46, 108, 157], "tensor": [34, 43, 52, 66, 77, 84, 97, 102, 108, 120, 132, 141, 142, 144, 168, 182, 198, 215, 217, 231, 264, 267, 282], "disabl": [34, 267], "track": [34, 148, 188], "more": [34, 94, 102, 142, 159, 160, 179, 187, 233, 252, 254, 257, 265, 268, 269, 270], "option": [34, 46, 48, 124, 197, 219, 227, 254, 285], "read": [34, 35, 36, 39, 44, 46, 57, 59, 60, 113, 114, 116, 117, 119, 124, 149, 150, 154, 190, 200, 212, 214, 215, 248, 267], "jacobian": [34, 160, 165], "product": [34, 160, 165, 182], "further": [34, 35, 36, 39, 44, 46, 57, 59, 60, 113, 114, 116, 117, 119, 124, 127, 149, 150, 154, 198, 200, 212, 214, 215, 267], "layer": [35, 95, 99, 141, 147, 198, 267], "nn": [35, 71, 72, 82, 89, 99, 112, 120, 121, 128, 129, 175, 198, 256, 264, 282], "flatten": 35, "linear": [35, 99, 106, 112], "relu": [35, 200], "sequenti": [35, 112], "softmax": [35, 106, 214], "dataload": [36, 55, 97, 103, 112], "iter": [36, 53, 55, 175], "visual": [36, 95, 101, 114, 127, 168, 183, 185, 188, 248, 250], "file": [36, 53, 114, 121, 149, 183, 203, 262], "__len__": 36, "__getitem__": 36, "prepar": [36, 53, 144, 145, 183, 187, 200, 212, 213, 214, 227, 246, 247], "through": [36, 55, 89, 200, 254], "thi": [38, 61, 138, 168, 198, 221], "guid": [38, 139, 171, 267], "hyperparamet": [39, 92, 177, 178], "quickstart": 40, "save": [40, 41, 57, 59, 114, 121, 138, 142, 148, 149, 151, 161, 168, 204, 233, 234, 251, 252, 259, 260, 261, 262, 268], "weight": [41, 50, 56, 69, 120], "initi": [43, 52, 56, 57, 139, 140, 151, 153, 161, 169, 217, 224, 254, 268, 269], "attribut": [43, 52, 95, 250], "bridg": [43, 52, 102], "arrai": [43, 52], "totensor": 44, "lambda": 44, "fast": [45, 79, 240], "better": [45, 207, 216], "A": [46, 49, 61, 94, 95, 105, 147, 171, 248, 251, 260, 266, 268], "gentl": 46, "background": [46, 171], "usag": [46, 146, 147, 157, 168, 171, 192, 194, 227, 240, 242, 275, 279], "vector": [46, 155, 160, 165], "calculu": 46, "exclus": 46, "dag": 46, "classifi": [47, 106, 114, 144, 190], "about": [47, 258], "cifar10": 47, "convolut": [47, 99, 147, 154, 191, 267], "multipl": [47, 121, 175, 262], "where": [47, 56, 79, 190, 214], "dummi": 48, "8": [48, 252, 266], "summari": [48, 138, 182, 249], "deep": [49, 61, 105, 106, 107, 131], "60": [49, 61], "minut": [49, 61], "blitz": [49, 61], "backprop": 50, "chatbot": 53, "preprocess": [53, 126, 161, 176], "format": [53, 114, 162, 203, 234, 267], "trim": 53, "seq2seq": [53, 183], "encod": [53, 111, 183], "decod": [53, 183], "procedur": 53, "mask": [53, 198, 214], "singl": [53, 164], "greedi": 53, "my": 53, "text": [53, 125, 126, 189], "googl": 54, "colab": 54, "version": [54, 165], "drive": 54, "enabl": [54, 139, 201, 203, 206, 267], "compos": [55, 160, 279], "afterword": 55, "torchvis": [55, 80, 197], "adversari": [56, 79], "fault": 57, "toler": 57, "torchrun": [57, 151], "grace": 57, "restart": 57, "process": [57, 59, 151, 173, 174, 179], "group": [57, 59, 174], "provid": 57, "variabl": [57, 140, 267], "snapshot": [57, 168], "trainer": 57, "constructor": [57, 267], "resum": [57, 121, 251], "script": [57, 89, 167, 273, 285], "video": [58, 176, 282], "section": 58, "multi": [59, 83, 92, 143], "ddp": [59, 60, 132, 149, 151, 267], "job": [59, 203, 257], "you": [60, 101, 141, 171, 198, 203, 250, 281, 285], "prefer": 60, "over": 60, "dp": 60, "goal": 61, "segment": [62, 63, 197, 282], "deeplabv3": [62, 63], "android": [62, 211, 225, 227, 229, 244, 246], "io": [63, 210, 211, 225, 244, 247], "primit": 64, "commun": [64, 86, 92, 153, 232], "launcher": 64, "appli": [64, 141, 219, 221, 285], "To": 64, "scale": [64, 141, 150, 182], "develop": 64, "control": [69, 113, 120, 182, 194, 267, 280, 285], "flow": [69, 113, 120, 194, 282], "share": [69, 120], "warm": [76, 120], "threat": 79, "sign": 79, "attack": 79, "under": 79, "fgsm": 79, "accuraci": [79, 92, 159, 242], "v": [79, 160, 171, 213], "epsilon": 79, "sampl": [79, 145, 170, 248], "finetun": [80, 127, 197], "former": 85, "holist": [86, 87], "trace": [86, 87, 89, 113, 158, 192, 225, 248, 257, 282], "analysi": [86, 87], "hta": 86, "tempor": 86, "breakdown": 86, "idl": 86, "durat": 86, "overlap": 86, "counter": 86, "memori": [86, 109, 119, 142, 147, 162, 168, 171, 178, 233, 240, 257, 267, 285], "bandwidth": 86, "queue": 86, "length": [86, 267], "launch": [86, 173, 248], "statist": 86, "diff": 87, "syntax": 89, "inform": [89, 159], "part": [89, 109], "pure": 89, "top": 89, "level": [89, 94, 109, 144, 145], "tune": [92, 138, 240, 267], "rai": 92, "configur": [92, 143, 248, 276], "search": 92, "space": 92, "youtub": [93, 96, 98], "seri": [93, 98], "fundament": 94, "turn": [94, 144], "off": 94, "On": 94, "profil": [94, 119, 158, 159, 187, 202, 238, 248, 257], "advanc": [94, 105, 138, 153, 187, 213, 228, 251, 279], "topic": [94, 153, 251], "detail": [94, 224], "high": [94, 182], "understand": 95, "captum": [95, 250], "first": [95, 113, 169], "occlus": 95, "gradcam": 95, "insight": 95, "common": [99, 146, 282], "type": [99, 102, 195, 251, 282], "recurr": [99, 154], "manipul": [99, 102], "activ": [99, 103, 216], "tensorboard": [101, 187, 188, 265], "befor": [101, 190, 250], "show": 101, "scalar": [101, 265], "resourc": [101, 103, 136, 171, 173], "random": [102, 105], "math": [102, 240], "logic": 102, "brief": 102, "broadcast": 102, "alter": 102, "copi": [102, 171], "chang": [102, 253], "number": 102, "dimens": [102, 240], "per": [103, 170], "epoch": 103, "knowledg": 104, "distil": 104, "util": [104, 175, 178, 198, 228, 252, 264, 267, 278], "cross": [104, 198], "entropi": 104, "cosin": 104, "minim": 104, "intermedi": [104, 148, 267], "regressor": 104, "dynam": [105, 194, 280], "decis": 105, "bi": 105, "lstm": [105, 109, 154], "crf": 105, "versu": 105, "toolkit": 105, "condit": 105, "field": 105, "discuss": 105, "exercis": [105, 109, 111, 124, 144, 145, 183], "tag": [105, 109], "block": [106, 198, 252], "affin": 106, "map": 106, "non": [106, 171, 194, 231, 267], "probabl": 106, "compon": [106, 159], "logist": 106, "regress": 106, "bag": [106, 111], "word": [106, 111], "nlp": [107, 144, 145, 166, 183], "librari": [108, 125, 190, 229, 254, 257, 267, 268, 269, 270, 285], "reshap": 108, "sequenc": [109, 141, 183], "long": [109, 257], "short": [109, 248], "term": 109, "speech": [109, 186, 189, 282], "tagger": 109, "charact": [109, 144, 145], "lexic": 111, "semant": [111, 212, 213], "dens": [111, 182], "n": 111, "gram": 111, "languag": [111, 128, 129], "continu": 111, "realli": 112, "mnist": 112, "net": 112, "scratch": [112, 144, 145, 166, 183], "without": [112, 227], "refactor": [112, 113], "add": [112, 140, 197, 278], "valid": [112, 267], "fit": [112, 168], "get_data": 112, "switch": [112, 267], "cnn": 112, "close": 112, "thought": 112, "attempt": 113, "suggest": [113, 194], "patch": [113, 190], "cond": 113, "depend": [114, 116, 182, 194, 195], "netron": 114, "6": [114, 187, 188, 200, 252, 257, 266], "runtim": [114, 267, 281, 285], "7": [114, 187, 200, 252, 257, 266], "compar": [114, 252], "ones": 114, "overrid": 117, "exist": [117, 162], "debug": [119, 159, 203, 267], "print": 119, "state_dict": [121, 269], "recommend": [121, 144, 171, 192], "entir": 121, "program": [121, 194], "One": [121, 262], "warmstart": [121, 268], "differ": [121, 146, 197, 268], "across": [121, 259], "cpu": [121, 138, 142, 158, 159, 171, 207, 216, 228, 241, 248, 267, 275, 279, 285], "t5": [123, 138], "base": [123, 202, 225, 238], "summar": 123, "sentiment": 123, "classif": [123, 125, 190, 282], "templat": 124, "torchtext": [125, 126, 128, 129], "vision": [127, 267], "few": 127, "predict": [127, 190], "convnet": 127, "fix": [127, 194], "extractor": 127, "dive": 131, "fsdp2": [132, 139], "tp": [132, 141], "devicemesh": [132, 236], "domain": 133, "ecosystem": 134, "welcom": 136, "fulli": [137, 138, 139, 141, 198], "fsdp": [137, 138], "recap": 138, "fine": 138, "hf": 138, "precis": [138, 139, 149, 251, 267], "intial": 138, "strategi": [138, 143], "prefetch": [138, 139], "stream": 138, "rank0": 138, "clip": [139, 251], "dtensor": 139, "dict": 139, "dcp": [139, 233, 234], "fsdp1": 139, "migrat": 139, "libuv": 140, "tcpstore": 140, "benchmark": [140, 191, 230, 252], "impact": 140, "exit": 140, "rout": 140, "use_libuv": 140, "fals": 140, "0": [140, 194, 214], "init_method": 140, "processgroup": 140, "larg": 141, "layernorm": 141, "rmsnorm": 141, "hook": [142, 168], "typic": 142, "than": 142, "concept": [142, 194], "pack": [142, 198], "unpack": 142, "some": 142, "unconvent": 142, "return": 142, "int": 142, "tupl": 142, "str": 142, "disk": 142, "na": 143, "ax": 143, "torchx": 143, "app": [143, 227], "runner": 143, "searchspac": 143, "metric": [143, 219], "optimizationconfig": 143, "choos": [143, 285], "schedul": [143, 231], "acknowledg": 143, "rnn": [144, 145, 181], "plot": [144, 145, 183], "captur": [146, 158, 168, 176, 219], "larger": 146, "log": [146, 159, 161, 265], "flag": 146, "address": [146, 282], "certain": 146, "limit": [146, 279], "aotautograd": 146, "recompil": [146, 280], "reason": [146, 258], "fuse": [147, 168, 182, 191, 195, 267], "norm": [147, 191, 267], "formula": [147, 279], "batchnorm": 147, "out": [147, 191, 221, 270], "doubl": 148, "output": [148, 195, 242], "real": [149, 176], "world": 149, "cloud": 149, "enough": 149, "multinod": 150, "local": 150, "global": [150, 175], "rank": 150, "heteregen": 150, "troubleshoot": [150, 176, 251], "between": [151, 214], "case": [151, 267], "skew": 151, "speed": [151, 240], "point": [153, 264], "collect": [153, 177, 252], "own": 153, "ring": 153, "allreduc": 153, "dqn": [154, 178], "mlp": 154, "q": [154, 178], "ensembl": 155, "vmap": [155, 226], "forc": 156, "align": 156, "wav2vec2": [156, 186], "fx": [158, 192, 219], "symbol": [158, 194], "interpret": [158, 211, 225, 244, 250], "investig": 158, "resnet18": [158, 191], "inductor": [159, 206, 276], "determin": 159, "error": [159, 194, 251, 282], "hessian": 160, "hvp": 160, "vhp": 160, "revers": 160, "jacrev": 160, "jacfwd": 160, "functorch": 160, "mario": 161, "plai": 161, "rl": 161, "agent": 161, "definit": 161, "act": 161, "cach": [161, 169, 276, 277], "recal": 161, "td": 161, "all": [161, 168, 198, 251, 257, 267], "let": 161, "channel": 162, "last": 162, "gain": [162, 280], "convert": [162, 200, 209, 218], "machin": 164, "best": [164, 192, 195], "practic": [164, 171, 187, 192, 195], "tangent": 165, "ntk": 165, "contract": 165, "nvfuser": 167, "dure": [168, 267], "disclaim": 168, "techniqu": 168, "register_post_accumulate_grad_hook": 168, "everyth": [168, 197], "line": 168, "hand": 169, "ar": [169, 198], "citizen": 169, "concaten": 169, "remov": [169, 175], "grad": [170, 214, 267], "effici": [170, 212, 244, 267], "wai": 170, "good": 171, "non_block": 171, "pin_memori": 171, "preambl": 171, "pageabl": 171, "asynchron": [171, 179, 233, 267], "synchron": [171, 267], "true": [171, 256, 267], "cudamemcpyasync": 171, "perspect": 171, "synergi": 171, "direct": [171, 232], "mp": 171, "consider": 171, "partit": 173, "main": 173, "cpp": 174, "subclass": [174, 182, 264], "expos": 174, "re": 175, "raspberri": 176, "pi": 176, "30": 176, "fp": 176, "opencv": 176, "choic": 176, "mobilenetv2": [176, 209, 218], "It": 176, "reinforc": [177, 178, 181], "ppo": 177, "server": [179, 180], "cartpol": 179, "solver": 179, "rref": 181, "dot": 182, "attent": [182, 183, 198], "sdpa": 182, "explicit": [182, 239], "hardwar": 182, "causal": 182, "self": 182, "nestedtensor": 182, "attn_bia": 182, "spatial": 185, "depict": 185, "stn": 185, "recognit": [186, 282], "With": 187, "event": 187, "analyz": [187, 203, 257], "help": 187, "amd": 187, "projector": 188, "assess": 188, "tacotron2": 189, "whole": 190, "slide": 190, "tiatoolbox": 190, "clean": 190, "download": 190, "patchpredictor": 190, "pathologi": 190, "here": 190, "fuser": 191, "pattern": [191, 200], "match": [191, 267], "fusion": [191, 200, 239], "nest": [192, 198, 217], "demonstr": [192, 282], "torchscript": [192, 241], "torchdynamo": [192, 277, 282], "nightli": 193, "break": [194, 282], "strict": [194, 282], "constraint": [194, 200], "special": 194, "dim": 194, "violat": 194, "_check": 194, "ir": 194, "decomposit": 194, "exportdb": 194, "recsi": 195, "embeddingbag": 195, "embeddingbagcollect": 195, "planner": 195, "lazyawait": 195, "anatomi": 195, "lookup": 195, "detect": 197, "pennfudan": 197, "pretrain": 197, "modifi": [197, 251], "backbon": 197, "instanc": 197, "replac": 198, "me": 198, "introduc": [198, 211], "abov": 198, "octob": 198, "2024": 198, "multiheadattent": 198, "gpt": 198, "one": 198, "row": 198, "longer": 198, "caus": 198, "nan": [198, 214, 251], "flexattent": 198, "njt": 198, "project": 198, "swiglu": 198, "feed": 198, "prototyp": [200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 215, 222, 225], "backendconfig": 200, "deriv": 200, "refer": 200, "each": 200, "dtypeconfig": 200, "conv": 200, "qconfigmap": 200, "satisfi": 200, "faulti": 200, "rotat": 201, "approach": 201, "workload": [202, 228, 238, 248, 267], "flight": 203, "stuck": 203, "retriev": 203, "dump": 203, "end": [203, 277], "gpudirect": 204, "torchao": 205, "wrapper": [206, 227], "window": 207, "xpu": [207, 248], "softwar": 207, "altern": 207, "intel": [207, 228, 241, 242, 248, 267, 275, 285], "llvm": 207, "core": [209, 267], "ml": 209, "lite": 211, "workflow": [211, 227], "adagrad": 212, "maskedtensor": [212, 213, 214, 215], "simpler": 212, "origin": 212, "maskedarrai": 213, "reduct": [213, 215], "access": [214, 267, 269, 285], "index": 214, "slice": 214, "distinguish": 214, "anoth": 214, "x": 214, "yield": 214, "nansum": 214, "nanmean": 214, "safe": 214, "miss": 214, "coo": 215, "csr": 215, "unari": 215, "binari": 215, "appendix": 215, "max": 216, "autotun": 216, "see": [217, 230, 279], "also": [217, 230, 279], "nnapi": 218, "openvino": 219, "nncf": 219, "lower": 219, "represent": 219, "unstabl": 220, "autoload": 221, "tree": 221, "mechan": 221, "skip": [224, 267], "mobil": [225, 244, 245, 249, 273], "so": 226, "vulkan": 227, "desktop": 227, "sdk": 227, "java": 227, "upload": 227, "leverag": 228, "matrix": 228, "amx": 228, "guidelin": 228, "can": 228, "confirm": 228, "being": 228, "prebuilt": 229, "lr": 231, "happen": 231, "tensorpip": 232, "even": 233, "pin": 233, "commdebugmod": 235, "hsdp": 236, "solut": [236, 282], "horizont": 239, "foreach_map": 239, "aw": 240, "graviton": 240, "processor": 240, "bfloat16": [240, 241], "openbla": 240, "smaller": 240, "alloc": [240, 267, 285], "overhead": 240, "linux": 240, "transpar": 240, "huge": 240, "page": 240, "thp": 240, "float32": 241, "imper": 241, "float16": 241, "zoo": 241, "eas": 242, "compressor": 242, "driven": 242, "deploy": 242, "recip": [245, 246, 247, 249, 255, 271, 273], "instrument": 248, "technologi": 248, "itt": 248, "vtune": 248, "showcas": 248, "begin": 250, "final": 250, "default": [251, 253], "gradscal": 251, "e": 251, "g": 251, "amp": [251, 267], "minor": 251, "inf": 251, "mismatch": 251, "mai": 251, "manifest": 251, "cudnn_status_bad_param": 251, "syntaxerror": 252, "timeit": 252, "timer": [252, 266], "autorang": 252, "fuzz": 252, "instruct": [252, 266], "count": [252, 266], "callgrind": [252, 266], "necessari": [254, 257, 268, 269, 270], "specifi": 254, "tip": 256, "mmap": 256, "meta": 256, "load_state_dict": [256, 264], "assign": 256, "instanti": 257, "resnet": 257, "consumpt": 257, "examin": 257, "stack": 257, "And": [260, 261], "swap_tensor": 264, "quick": [266, 285], "wall": 266, "blocked_autorang": 266, "snippet": 266, "collect_callgrind": 266, "delv": 266, "deeper": 266, "b": [266, 268], "footnot": 266, "calcul": 267, "bia": 267, "directli": 267, "follow": 267, "none": 267, "instead": 267, "zero_grad": 267, "channels_last": 267, "uniform": 267, "numa": [267, 285], "openmp": [267, 285], "libiomp": 267, "cudnn": 267, "auto": 267, "tuner": 267, "avoid": 267, "unnecessari": 267, "prealloc": 267, "reduc": [267, 272], "accumul": 267, "find_unused_paramet": 267, "balanc": 267, "zero": 270, "while": 270, "cold": 272, "region": 272, "fp32": 275, "bf16": 275, "torchinductor_fx_graph_cach": 276, "torchinductor_autograd_cach": 276, "torchinductor_cache_dir": 276, "torchinductor_fx_graph_remote_cach": 276, "torchinductor_autograd_remote_cach": 276, "torchinductor_autotune_remote_cach": 276, "torchinductor_force_disable_cach": 276, "offer": 277, "mega": 277, "modular": 277, "torchinductor": 277, "triton": [277, 279], "remot": 277, "rewrit": 278, "mul": 278, "triton_op": 279, "fallback": 279, "flopcount": 279, "set_stanc": 280, "descript": 280, "prevent": 280, "measur": 280, "crash": 280, "sooner": 280, "aotinductor": 281, "challeng": 282, "them": 282, "No": 282, "caption": 282, "cannot": 282, "mutat": 282, "frozen": 282, "promptabl": 282, "torch_log": 283, "xeon": 285, "run_cpu": 285, "Will": 285, "command": 285, "explan": 285}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx_last_updated_by_git": 1, "sphinx": 60}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [20, "overview"], [113, "overview"], [117, "overview"], [124, "overview"], [146, "overview"], [154, "overview"], [159, "overview"], [182, "overview"], [203, "overview"], [242, "overview"], [267, "overview"]], "Prerequisites": [[1, "prerequisites"], [104, "prerequisites"], [113, "prerequisites"], [117, "prerequisites"], [176, "prerequisites"], [203, "prerequisites"], [219, "prerequisites"], [235, "prerequisites"], [239, "prerequisites"], [257, "prerequisites"], [272, "prerequisites"], [276, "prerequisites"], [277, "prerequisites"], [279, "prerequisites"], [280, "prerequisites"], [281, "prerequisites"], [282, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [154, "environment"], [161, "environment"]], "Transforms": [[1, "transforms"], [44, "transforms"], [55, "transforms"], [177, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [177, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [177, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [39, "optimizer"], [103, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [16, "conclusion"], [17, "conclusion"], [18, "conclusion"], [20, "conclusion"], [23, "conclusion"], [53, "conclusion"], [86, "conclusion"], [104, "conclusion"], [113, "conclusion"], [114, "conclusion"], [117, "conclusion"], [124, "conclusion"], [140, "conclusion"], [141, "conclusion"], [146, "conclusion"], [154, "conclusion"], [158, "conclusion"], [159, "conclusion"], [161, "conclusion"], [162, "conclusion"], [168, "conclusion"], [171, "conclusion"], [173, "conclusion"], [182, "conclusion"], [192, "conclusion"], [194, "conclusion"], [195, "conclusion"], [198, "conclusion"], [201, "conclusion"], [203, "conclusion"], [204, "conclusion"], [205, "conclusion"], [206, "conclusion"], [207, "conclusion"], [212, "conclusion"], [213, "conclusion"], [214, "conclusion"], [215, "conclusion"], [216, "conclusion"], [217, "conclusion"], [219, "conclusion"], [221, "conclusion"], [222, "conclusion"], [228, "conclusion"], [231, "conclusion"], [233, "conclusion"], [234, "conclusion"], [235, "conclusion"], [236, "conclusion"], [239, "conclusion"], [240, "conclusion"], [256, "conclusion"], [264, "conclusion"], [267, "conclusion"], [272, "conclusion"], [276, "conclusion"], [277, "conclusion"], [278, "conclusion"], [279, "conclusion"], [280, "conclusion"], [281, "conclusion"], [282, "conclusion"], [283, "conclusion"], [285, "conclusion"]], "Next Steps": [[1, "next-steps"], [176, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [86, "getting-started"], [241, "getting-started"], [242, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[8, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[8, "why-do-we-need-to-make-a-fake-class"]], "PyTorch Custom Operators": [[9, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[9, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[9, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[9, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[9, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[9, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[10, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[11, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[11, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[11, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[11, "in-place-or-view-ops"]], "Adding autograd support": [[11, "adding-autograd-support"]], "Going beyond autograd": [[11, "going-beyond-autograd"]], "Autocast": [[11, "autocast"]], "Batched": [[11, "batched"]], "Tracer": [[11, "tracer"]], "Extending dispatcher for a new backend in C++": [[12, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[12, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[12, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[12, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[12, "register-kernels-for-the-new-backend"], [17, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[12, "autograd-support-for-the-new-backend"]], "Build an extension": [[12, "build-an-extension"]], "Custom operator support": [[12, "custom-operator-support"]], "JIT support": [[12, "jit-support"]], "Testing your backend against native PyTorch backends": [[12, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[12, "backward-compatibility"]], "Known issues & additional notes": [[12, "known-issues-additional-notes"]], "Future Work": [[12, "future-work"], [17, "future-work"]], "Stay in touch": [[12, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[13, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[13, "requirements"], [20, "requirements"], [175, "requirements"], [222, "requirements"], [232, "requirements"], [248, "requirements"], [286, "requirements"]], "What is Join?": [[13, "what-is-join"]], "Using Join with DistributedDataParallel": [[13, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[13, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[13, "passing-keyword-arguments"]], "How Does Join Work?": [[13, "how-does-join-work"]], "Joinable": [[13, "joinable"]], "JoinHook": [[13, "joinhook"]], "Join": [[13, "join"]], "Making a Toy Class Work with Join": [[13, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[14, "neural-transfer-using-pytorch"]], "Introduction": [[14, "introduction"], [56, "introduction"], [64, "introduction"], [95, "id1"], [101, "id1"], [103, "id1"], [140, "introduction"], [171, "introduction"], [187, "introduction"], [190, "introduction"], [201, "introduction"], [206, "introduction"], [207, "introduction"], [215, "introduction"], [216, "introduction"], [219, "introduction"], [224, "introduction"], [227, "introduction"], [228, "introduction"], [254, "introduction"], [257, "introduction"], [268, "introduction"], [269, "introduction"], [270, "introduction"], [276, "introduction"], [277, "introduction"]], "Underlying Principle": [[14, "underlying-principle"]], "Importing Packages and Selecting a Device": [[14, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[14, "loading-the-images"]], "Loss Functions": [[14, "loss-functions"], [99, "loss-functions"]], "Content Loss": [[14, "content-loss"]], "Style Loss": [[14, "style-loss"]], "Importing the Model": [[14, "importing-the-model"]], "Gradient Descent": [[14, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[15, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[15, "parameter-less-example"]], "Parametrized example": [[15, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[16, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[16, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[16, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[16, "environment-metadata-env-spec"]], "Specs shape": [[16, "specs-shape"]], "Reproducible experiments: seeding": [[16, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[16, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[16, "testing-our-environment"]], "Transforming an environment": [[16, "transforming-an-environment"]], "Writing custom transforms": [[16, "writing-custom-transforms"]], "Executing a rollout": [[16, "executing-a-rollout"]], "Batching computations": [[16, "batching-computations"]], "Training a simple policy": [[16, "training-a-simple-policy"]], "Training loop": [[16, "training-loop"], [154, "training-loop"], [177, "training-loop"], [178, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[17, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[17, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[17, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[17, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[17, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[17, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[17, "other-modules"]], "How to Improve User Experience with Privateuse1": [[17, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[17, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[17, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[17, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[18, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[18, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[18, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[18, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[18, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[19, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[20, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[20, "what-problem-does-semi-structured-sparsity-solve"], [222, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[20, "intro-setup"], [222, "intro-setup"]], "Establishing a baseline": [[20, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[20, "pruning-bert-to-be-2-4-sparse"], [222, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[20, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[21, "computation-times"], [42, "computation-times"], [51, "computation-times"], [68, "computation-times"], [74, "computation-times"], [78, "computation-times"], [90, "computation-times"], [100, "computation-times"], [110, "computation-times"], [118, "computation-times"], [122, "computation-times"], [184, "computation-times"], [223, "computation-times"], [263, "computation-times"], [274, "computation-times"], [287, "computation-times"]], "Exploring TorchRec sharding": [[22, "exploring-torchrec-sharding"]], "Installation": [[22, "installation"], [95, "installation"], [242, "installation"], [265, "installation"]], "Distributed Setup": [[22, "distributed-setup"]], "Constructing our embedding model": [[22, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[22, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[22, "multiprocessing-execution"]], "Table Wise Sharding": [[22, "table-wise-sharding"]], "Explore other sharding modes": [[22, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[23, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[23, "model-architecture"]], "2. Helper functions": [[23, "helper-functions"]], "3. Define dataset and data loaders": [[23, "define-dataset-and-data-loaders"]], "ImageNet Data": [[23, "imagenet-data"]], "4. Post-training static quantization": [[23, "post-training-static-quantization"]], "5. Quantization-aware training": [[23, "quantization-aware-training"]], "Speedup from quantization": [[23, "speedup-from-quantization"]], "Semi-Supervised Learning using USB built upon PyTorch": [[27, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[27, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[27, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[27, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[28, "audio-data-augmentation"]], "Audio Datasets": [[29, "audio-datasets"]], "Audio Feature Augmentation": [[30, "audio-feature-augmentation"]], "Audio Feature Extractions": [[31, "audio-feature-extractions"]], "Audio I/O": [[32, "audio-i-o"]], "Audio Resampling": [[33, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[34, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[34, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[34, "computing-gradients"]], "Disabling Gradient Tracking": [[34, "disabling-gradient-tracking"]], "More on Computational Graphs": [[34, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[34, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[34, "further-reading"], [35, "further-reading"], [36, "further-reading"], [39, "further-reading"], [44, "further-reading"], [57, "further-reading"], [59, "further-reading"], [60, "further-reading"], [119, "further-reading"], [124, "further-reading"], [149, "further-reading"], [150, "further-reading"], [154, "further-reading"], [200, "further-reading"], [212, "further-reading"], [214, "further-reading"], [215, "further-reading"], [267, "further-reading"]], "Build the Neural Network": [[35, "build-the-neural-network"]], "Get Device for Training": [[35, "get-device-for-training"]], "Define the Class": [[35, "define-the-class"]], "Model Layers": [[35, "model-layers"]], "nn.Flatten": [[35, "nn-flatten"]], "nn.Linear": [[35, "nn-linear"]], "nn.ReLU": [[35, "nn-relu"]], "nn.Sequential": [[35, "nn-sequential"]], "nn.Softmax": [[35, "nn-softmax"]], "Model Parameters": [[35, "model-parameters"]], "Datasets & DataLoaders": [[36, "datasets-dataloaders"]], "Loading a Dataset": [[36, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[36, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[36, "creating-a-custom-dataset-for-your-files"]], "__init__": [[36, "init"]], "__len__": [[36, "len"]], "__getitem__": [[36, "getitem"]], "Preparing your data for training with DataLoaders": [[36, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[36, "iterate-through-the-dataloader"]], "Learn the Basics": [[37, "learn-the-basics"], [38, "learn-the-basics"]], "Running the Tutorial Code": [[38, "running-the-tutorial-code"], [98, "running-the-tutorial-code"]], "How to Use this Guide": [[38, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[39, "optimizing-model-parameters"]], "Prerequisite Code": [[39, "prerequisite-code"]], "Hyperparameters": [[39, "hyperparameters"]], "Optimization Loop": [[39, "optimization-loop"]], "Loss Function": [[39, "loss-function"], [50, "loss-function"], [103, "loss-function"]], "Full Implementation": [[39, "full-implementation"]], "Quickstart": [[40, "quickstart"]], "Working with data": [[40, "working-with-data"]], "Creating Models": [[40, "creating-models"]], "Optimizing the Model Parameters": [[40, "optimizing-the-model-parameters"]], "Saving Models": [[40, "saving-models"]], "Loading Models": [[40, "loading-models"]], "Save and Load the Model": [[41, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[41, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[41, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[41, "related-tutorials"]], "Tensors": [[43, "tensors"], [52, "tensors"], [84, "tensors"], [120, "tensors"], [120, "id1"]], "Initializing a Tensor": [[43, "initializing-a-tensor"]], "Attributes of a Tensor": [[43, "attributes-of-a-tensor"]], "Operations on Tensors": [[43, "operations-on-tensors"]], "Bridge with NumPy": [[43, "bridge-with-numpy"], [52, "bridge-with-numpy"]], "Tensor to NumPy array": [[43, "tensor-to-numpy-array"], [52, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[43, "numpy-array-to-tensor"], [52, "numpy-array-to-tensor"]], "ToTensor()": [[44, "totensor"]], "Lambda Transforms": [[44, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[45, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[46, "a-gentle-introduction-to-torch-autograd"]], "Background": [[46, "background"], [171, "background"]], "Usage in PyTorch": [[46, "usage-in-pytorch"]], "Differentiation in Autograd": [[46, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[46, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[46, "computational-graph"]], "Exclusion from the DAG": [[46, "exclusion-from-the-dag"]], "Further readings:": [[46, "further-readings"]], "Training a Classifier": [[47, "training-a-classifier"]], "What about data?": [[47, "what-about-data"]], "Training an image classifier": [[47, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[47, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[47, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[47, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[47, "train-the-network"]], "5. Test the network on the test data": [[47, "test-the-network-on-the-test-data"]], "Training on GPU": [[47, "training-on-gpu"]], "Training on multiple GPUs": [[47, "training-on-multiple-gpus"]], "Where do I go next?": [[47, "where-do-i-go-next"]], "Optional: Data Parallelism": [[48, "optional-data-parallelism"]], "Imports and parameters": [[48, "imports-and-parameters"]], "Dummy DataSet": [[48, "dummy-dataset"]], "Simple Model": [[48, "simple-model"]], "Create Model and DataParallel": [[48, "create-model-and-dataparallel"]], "Run the Model": [[48, "run-the-model"]], "Results": [[48, "results"], [56, "results"], [79, "results"], [177, "results"]], "2 GPUs": [[48, "gpus"]], "3 GPUs": [[48, "id1"]], "8 GPUs": [[48, "id2"]], "Summary": [[48, "summary"], [138, "summary"], [182, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[49, "deep-learning-with-pytorch-a-60-minute-blitz"], [61, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[50, "neural-networks"]], "Define the network": [[50, "define-the-network"]], "Backprop": [[50, "backprop"]], "Update the weights": [[50, "update-the-weights"]], "Tensor Initialization": [[52, "tensor-initialization"]], "Tensor Attributes": [[52, "tensor-attributes"]], "Tensor Operations": [[52, "tensor-operations"]], "Chatbot Tutorial": [[53, "chatbot-tutorial"]], "Preparations": [[53, "preparations"]], "Load & Preprocess Data": [[53, "load-preprocess-data"]], "Create formatted data file": [[53, "create-formatted-data-file"]], "Load and trim data": [[53, "load-and-trim-data"]], "Prepare Data for Models": [[53, "prepare-data-for-models"]], "Define Models": [[53, "define-models"]], "Seq2Seq Model": [[53, "seq2seq-model"]], "Encoder": [[53, "encoder"]], "Decoder": [[53, "decoder"]], "Define Training Procedure": [[53, "define-training-procedure"]], "Masked loss": [[53, "masked-loss"]], "Single training iteration": [[53, "single-training-iteration"]], "Training iterations": [[53, "training-iterations"]], "Define Evaluation": [[53, "define-evaluation"]], "Greedy decoding": [[53, "greedy-decoding"]], "Evaluate my text": [[53, "evaluate-my-text"]], "Run Model": [[53, "run-model"]], "Run Training": [[53, "run-training"]], "Run Evaluation": [[53, "run-evaluation"]], "Running Tutorials in Google Colab": [[54, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[54, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[54, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[54, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[55, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[55, "dataset-class"]], "Compose transforms": [[55, "compose-transforms"]], "Iterating through the dataset": [[55, "iterating-through-the-dataset"]], "Afterword: torchvision": [[55, "afterword-torchvision"]], "DCGAN Tutorial": [[56, "dcgan-tutorial"]], "Generative Adversarial Networks": [[56, "generative-adversarial-networks"]], "What is a GAN?": [[56, "what-is-a-gan"]], "What is a DCGAN?": [[56, "what-is-a-dcgan"]], "Inputs": [[56, "inputs"], [79, "inputs"]], "Data": [[56, "data"]], "Implementation": [[56, "implementation"], [79, "implementation"]], "Weight Initialization": [[56, "weight-initialization"]], "Generator": [[56, "generator"]], "Discriminator": [[56, "discriminator"]], "Loss Functions and Optimizers": [[56, "loss-functions-and-optimizers"]], "Training": [[56, "training"], [144, "training"], [145, "training"], [178, "training"], [183, "training"], [241, "training"], [241, "id5"]], "Where to Go Next": [[56, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[57, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[57, "why-use-torchrun"]], "Graceful restarts": [[57, "graceful-restarts"]], "Process group initialization": [[57, "process-group-initialization"]], "Use torchrun-provided environment variables": [[57, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[57, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[57, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[57, "resuming-training"]], "Running the script": [[57, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[58, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[58, "running-the-code"]], "Tutorial sections": [[58, "tutorial-sections"]], "Multi GPU training with DDP": [[59, "multi-gpu-training-with-ddp"]], "Imports": [[59, "imports"]], "Constructing the process group": [[59, "constructing-the-process-group"]], "Constructing the DDP model": [[59, "constructing-the-ddp-model"]], "Distributing input data": [[59, "distributing-input-data"]], "Saving model checkpoints": [[59, "saving-model-checkpoints"]], "Running the distributed training job": [[59, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[60, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[60, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[61, "what-is-pytorch"]], "Goal of this tutorial:": [[61, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[62, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[63, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[64, "pytorch-distributed-overview"]], "Parallelism APIs": [[64, "parallelism-apis"]], "Sharding primitives": [[64, "sharding-primitives"]], "Communications APIs": [[64, "communications-apis"]], "Launcher": [[64, "launcher"]], "Applying Parallelism To Scale Your Model": [[64, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[64, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[66, "pytorch-tensors-and-autograd"], [120, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[67, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[69, "pytorch-control-flow-weight-sharing"], [120, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[71, "pytorch-custom-nn-modules"], [120, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[72, "pytorch-nn"], [120, "pytorch-nn"]], "PyTorch: optim": [[73, "pytorch-optim"], [120, "pytorch-optim"]], "Warm-up: numpy": [[76, "warm-up-numpy"], [120, "warm-up-numpy"]], "PyTorch: Tensors": [[77, "pytorch-tensors"], [120, "pytorch-tensors"]], "Adversarial Example Generation": [[79, "adversarial-example-generation"]], "Threat Model": [[79, "threat-model"]], "Fast Gradient Sign Attack": [[79, "fast-gradient-sign-attack"]], "Model Under Attack": [[79, "model-under-attack"]], "FGSM Attack": [[79, "fgsm-attack"]], "Testing Function": [[79, "testing-function"]], "Run Attack": [[79, "run-attack"]], "Accuracy vs Epsilon": [[79, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[79, "sample-adversarial-examples"]], "Where to go next?": [[79, "where-to-go-next"]], "Finetuning Torchvision Models": [[80, "finetuning-torchvision-models"]], "Autograd": [[81, "autograd"], [120, "autograd"], [120, "id2"]], "nn Package": [[82, "nn-package"]], "Multi-GPU Examples": [[83, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[85, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[86, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[86, "installing-hta"]], "Temporal Breakdown": [[86, "temporal-breakdown"]], "Idle Time Breakdown": [[86, "idle-time-breakdown"]], "Kernel Breakdown": [[86, "kernel-breakdown"]], "Kernel Duration Distribution": [[86, "kernel-duration-distribution"]], "Communication Computation Overlap": [[86, "communication-computation-overlap"]], "Augmented Counters": [[86, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[86, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[86, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[87, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[89, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[89, "hybrid-frontend-information"]], "Motivating Example": [[89, "motivating-example"]], "Part 1 - Tracing a pure python function": [[89, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[89, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[89, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[89, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[89, "top-level-module"]], "Running the Model": [[89, "running-the-model"]], "Tracing the Top-Level Model": [[89, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[91, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[92, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[92, "setup-imports"]], "Data loaders": [[92, "data-loaders"]], "Configurable neural network": [[92, "configurable-neural-network"]], "The train function": [[92, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[92, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[92, "communicating-with-ray-tune"]], "Full training function": [[92, "full-training-function"]], "Test set accuracy": [[92, "test-set-accuracy"]], "Configuring the search space": [[92, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[93, "introduction-to-pytorch-youtube-series"], [98, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[94, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[94, "what-do-we-need-autograd-for"]], "A Simple Example": [[94, "a-simple-example"]], "Autograd in Training": [[94, "autograd-in-training"]], "Turning Autograd Off and On": [[94, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[94, "autograd-and-in-place-operations"]], "Autograd Profiler": [[94, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[94, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[94, "the-high-level-api"]], "Model Understanding with Captum": [[95, "model-understanding-with-captum"]], "A First Example": [[95, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[95, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[95, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[95, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[95, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[96, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[97, "introduction-to-pytorch"], [108, "introduction-to-pytorch"]], "PyTorch Tensors": [[97, "pytorch-tensors"]], "PyTorch Models": [[97, "pytorch-models"]], "Datasets and Dataloaders": [[97, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[97, "training-your-pytorch-model"]], "Building Models with PyTorch": [[99, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[99, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[99, "common-layer-types"]], "Linear Layers": [[99, "linear-layers"]], "Convolutional Layers": [[99, "convolutional-layers"]], "Recurrent Layers": [[99, "recurrent-layers"]], "Transformers": [[99, "transformers"]], "Other Layers and Functions": [[99, "other-layers-and-functions"]], "Data Manipulation Layers": [[99, "data-manipulation-layers"]], "Activation Functions": [[99, "activation-functions"]], "PyTorch TensorBoard Support": [[101, "pytorch-tensorboard-support"]], "Before You Start": [[101, "before-you-start"]], "Showing Images in TensorBoard": [[101, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[101, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[101, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[101, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[101, "other-resources"], [103, "other-resources"]], "Introduction to PyTorch Tensors": [[102, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[102, "creating-tensors"], [108, "creating-tensors"]], "Random Tensors and Seeding": [[102, "random-tensors-and-seeding"]], "Tensor Shapes": [[102, "tensor-shapes"]], "Tensor Data Types": [[102, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[102, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[102, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[102, "more-math-with-tensors"]], "Altering Tensors in Place": [[102, "altering-tensors-in-place"]], "Copying Tensors": [[102, "copying-tensors"]], "Moving to Accelerator": [[102, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[102, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[102, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[102, "numpy-bridge"]], "Training with PyTorch": [[103, "training-with-pytorch"]], "Dataset and DataLoader": [[103, "dataset-and-dataloader"]], "The Model": [[103, "the-model"]], "The Training Loop": [[103, "the-training-loop"]], "Per-Epoch Activity": [[103, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[104, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[104, "loading-cifar-10"]], "Defining model classes and utility functions": [[104, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[104, "cross-entropy-runs"]], "Knowledge distillation run": [[104, "knowledge-distillation-run"]], "Cosine loss minimization run": [[104, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[104, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[105, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[105, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[105, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[105, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[105, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[106, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[106, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[106, "affine-maps"]], "Non-Linearities": [[106, "non-linearities"]], "Softmax and Probabilities": [[106, "softmax-and-probabilities"]], "Objective Functions": [[106, "objective-functions"]], "Optimization and Training": [[106, "optimization-and-training"]], "Creating Network Components in PyTorch": [[106, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[106, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[107, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[108, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[108, "operations-with-tensors"]], "Reshaping Tensors": [[108, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[108, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[109, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[109, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[109, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[109, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[111, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[111, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[111, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[111, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[111, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[112, "what-is-torch-nn-really"]], "MNIST data setup": [[112, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[112, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[112, "using-torch-nn-functional"]], "Refactor using nn.Module": [[112, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[112, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[112, "refactor-using-torch-optim"]], "Refactor using Dataset": [[112, "refactor-using-dataset"]], "Refactor using DataLoader": [[112, "refactor-using-dataloader"]], "Add validation": [[112, "add-validation"]], "Create fit() and get_data()": [[112, "create-fit-and-get-data"]], "Switch to CNN": [[112, "switch-to-cnn"]], "Using nn.Sequential": [[112, "using-nn-sequential"]], "Wrapping DataLoader": [[112, "wrapping-dataloader"]], "Using your Accelerator": [[112, "using-your-accelerator"]], "Closing thoughts": [[112, "closing-thoughts"]], "Export a model with control flow to ONNX": [[113, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[113, "define-the-models"]], "Exporting the Model: First Attempt": [[113, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[113, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[113, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[113, "further-reading"], [114, "further-reading"], [116, "further-reading"], [117, "further-reading"]], "Export a PyTorch model to ONNX": [[114, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[114, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[114, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[114, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[114, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[114, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[114, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[114, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[115, "onnx"]], "Introduction to ONNX": [[116, "introduction-to-onnx"]], "Dependencies": [[116, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[117, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[117, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[117, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[117, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[119, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[119, "performance-debugging-using-profiler"]], "Profile the forward pass": [[119, "profile-the-forward-pass"]], "Print profiler results": [[119, "print-profiler-results"]], "Improve memory performance": [[119, "improve-memory-performance"]], "Improve time performance": [[119, "improve-time-performance"]], "Learning PyTorch with Examples": [[120, "learning-pytorch-with-examples"]], "Table of Contents": [[120, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[120, "pytorch-defining-new-autograd-functions"]], "nn module": [[120, "nn-module"], [120, "id3"]], "Examples": [[120, "examples"], [221, "examples"], [280, "examples"]], "Saving and Loading Models": [[121, "saving-and-loading-models"]], "What is a state_dict?": [[121, "what-is-a-state-dict"]], "Example:": [[121, "example"]], "Saving & Loading Model for Inference": [[121, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[121, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[121, "save-load-entire-model"]], "Saving an Exported Program": [[121, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[121, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[121, "save"], [121, "id1"], [121, "id3"]], "Load:": [[121, "load"], [121, "id2"], [121, "id4"]], "Saving Multiple Models in One File": [[121, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[121, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[121, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[121, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[121, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[121, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[121, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[123, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[124, "template-tutorial"]], "Steps": [[124, "steps"], [187, "steps"], [252, "steps"], [254, "steps"], [257, "steps"], [268, "steps"], [269, "steps"], [270, "steps"], [272, "steps"]], "(Optional) Additional Exercises": [[124, "optional-additional-exercises"]], "Text classification with the torchtext library": [[125, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[126, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[127, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[127, "load-data"]], "Visualize a few images": [[127, "visualize-a-few-images"]], "Training the model": [[127, "training-the-model"], [185, "training-the-model"]], "Visualizing the model predictions": [[127, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[127, "finetuning-the-convnet"]], "Train and evaluate": [[127, "train-and-evaluate"], [127, "id1"]], "ConvNet as fixed feature extractor": [[127, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[127, "inference-on-custom-images"]], "Further Learning": [[127, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[128, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[129, "language-translation-with-nn-transformer-and-torchtext"]], "Compilers": [[130, "compilers"]], "Deep Dive": [[131, "deep-dive"]], "Distributed": [[132, "distributed"]], "Learn DDP": [[132, "learn-ddp"]], "Learn FSDP2": [[132, "learn-fsdp2"]], "Learn Tensor Parallel (TP)": [[132, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[132, "learn-devicemesh"]], "Learn RPC": [[132, "learn-rpc"]], "Custom Extensions": [[132, "custom-extensions"]], "Domains": [[133, "domains"]], "Ecosystem": [[134, "ecosystem"]], "Extension": [[135, "extension"]], "Welcome to PyTorch Tutorials": [[136, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[136, "additional-resources"], [173, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[137, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[137, "how-fsdp-works"]], "How to use FSDP": [[137, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[138, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[138, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[138, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[138, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[138, "transformer-wrapping-policy"]], "Mixed Precision": [[138, "mixed-precision"]], "Intializing FSDP Model on Device": [[138, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[138, "sharding-strategy"]], "Backward Prefetch": [[138, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[138, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[139, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[139, "how-fsdp2-works"]], "How to use FSDP2": [[139, "how-to-use-fsdp2"]], "Model Initialization": [[139, "model-initialization"]], "Forward/Backward with Prefetching": [[139, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[139, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[139, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[139, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[139, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[139, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[140, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[140, "performance-benchmark"]], "Impact": [[140, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[140, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[140, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[140, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[141, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[141, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[141, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[141, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[141, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[141, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[141, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[142, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[142, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[142, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[142, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[142, "saved-tensors-hooks"]], "Some unconventional examples": [[142, "some-unconventional-examples"]], "Returning an int": [[142, "returning-an-int"]], "Returning a tuple": [[142, "returning-a-tuple"]], "Returning a str": [[142, "returning-a-str"]], "Saving tensors to CPU": [[142, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[142, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[143, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[143, "defining-the-torchx-app"]], "Setting up the Runner": [[143, "setting-up-the-runner"]], "Setting up the SearchSpace": [[143, "setting-up-the-searchspace"]], "Setting up Metrics": [[143, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[143, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[143, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[143, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[143, "configuring-the-scheduler"]], "Running the optimization": [[143, "running-the-optimization"]], "Evaluating the results": [[143, "evaluating-the-results"]], "Acknowledgments": [[143, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[144, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[144, "recommended-preparation"]], "Preparing Torch": [[144, "preparing-torch"]], "Preparing the Data": [[144, "preparing-the-data"], [145, "preparing-the-data"]], "Turning Names into Tensors": [[144, "turning-names-into-tensors"]], "Creating the Network": [[144, "creating-the-network"], [145, "creating-the-network"]], "Training the Network": [[144, "training-the-network"], [145, "training-the-network"]], "Plotting the Results": [[144, "plotting-the-results"]], "Evaluating the Results": [[144, "evaluating-the-results"]], "Exercises": [[144, "exercises"], [145, "exercises"], [183, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[145, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[145, "preparing-for-training"]], "Plotting the Losses": [[145, "plotting-the-losses"]], "Sampling the Network": [[145, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[146, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[146, "setup"], [153, "setup"], [154, "setup"], [165, "setup"], [173, "setup"], [187, "setup"], [201, "setup"], [254, "setup"], [257, "setup"], [268, "setup"], [269, "setup"], [270, "setup"], [272, "setup"], [283, "setup"]], "Basic usage": [[146, "basic-usage"]], "Inspecting the compiled autograd logs": [[146, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[146, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[146, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[146, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[147, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[147, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[147, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[147, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[147, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[147, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[148, "double-backward-with-custom-functions"]], "Saving the Inputs": [[148, "saving-the-inputs"]], "Saving the Outputs": [[148, "saving-the-outputs"]], "Saving Intermediate Results": [[148, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[148, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[148, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[149, "training-real-world-models-with-ddp"]], "Files used for training": [[149, "files-used-for-training"]], "Saving and Loading from the cloud": [[149, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[149, "using-mixed-precision"]], "When is DDP not enough?": [[149, "when-is-ddp-not-enough"]], "Multinode Training": [[150, "multinode-training"]], "Local and Global ranks": [[150, "local-and-global-ranks"]], "Heteregeneous Scaling": [[150, "heteregeneous-scaling"]], "Troubleshooting": [[150, "troubleshooting"], [251, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[151, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[151, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[151, "basic-use-case"]], "Skewed Processing Speeds": [[151, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[151, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[151, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[151, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[152, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[153, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[153, "point-to-point-communication"]], "Collective Communication": [[153, "collective-communication"]], "Distributed Training": [[153, "distributed-training"]], "Our Own Ring-Allreduce": [[153, "our-own-ring-allreduce"]], "Advanced Topics": [[153, "advanced-topics"]], "Communication Backends": [[153, "communication-backends"]], "Initialization Methods": [[153, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[154, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[154, "policy"], [177, "policy"]], "Convolutional network": [[154, "convolutional-network"]], "LSTM Module": [[154, "lstm-module"]], "MLP": [[154, "mlp"]], "Using the Q-Values to select an action": [[154, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[154, "using-the-model-for-the-loss"]], "DQN Loss": [[154, "dqn-loss"]], "Collector and replay buffer": [[154, "collector-and-replay-buffer"]], "Model ensembling": [[155, "model-ensembling"]], "What is model ensembling?": [[155, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[155, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[155, "performance"]], "Forced Alignment with Wav2Vec2": [[156, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[157, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[157, "basic-usage"], [192, "basic-usage"], [194, "basic-usage"], [240, "basic-usage"], [279, "basic-usage"]], "Usage with Modules": [[157, "usage-with-modules"]], "Using the functional Module API (beta)": [[157, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[157, "custom-autograd-function"]], "Functional API (beta)": [[157, "functional-api-beta"]], "Using the functional API with Modules": [[157, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[158, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[158, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[158, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[158, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[159, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[159, "debugging"]], "Get more logging information": [[159, "get-more-logging-information"]], "Determine component of error": [[159, "determine-component-of-error"]], "Compilation error": [[159, "compilation-error"]], "Accuracy debugging": [[159, "accuracy-debugging"]], "Performance profiling": [[159, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[160, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[160, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[160, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[160, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[160, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[160, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[161, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[161, "rl-definitions"]], "Initialize Environment": [[161, "initialize-environment"]], "Preprocess Environment": [[161, "preprocess-environment"]], "Agent": [[161, "agent"]], "Act": [[161, "act"]], "Cache and Recall": [[161, "cache-and-recall"]], "Learn": [[161, "learn"]], "Neural Network": [[161, "neural-network"]], "TD Estimate & TD Target": [[161, "td-estimate-td-target"]], "Updating the model": [[161, "updating-the-model"]], "Save checkpoint": [[161, "save-checkpoint"]], "Putting it all together": [[161, "putting-it-all-together"]], "Logging": [[161, "logging"]], "Let\u2019s play!": [[161, "lets-play"]], "Channels Last Memory Format in PyTorch": [[162, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[162, "memory-format-api"]], "Performance Gains": [[162, "performance-gains"]], "Converting existing models": [[162, "converting-existing-models"]], "Work to do": [[162, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[164, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[165, "neural-tangent-kernels"]], "Create a function version of the model": [[165, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[165, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[165, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[166, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[167, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[168, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[168, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[168, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[168, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[168, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[168, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[169, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[169, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[169, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[169, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[169, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[169, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[169, "concatenating-parametrizations"]], "Initializing parametrizations": [[169, "initializing-parametrizations"]], "Removing parametrizations": [[169, "removing-parametrizations"]], "Per-sample-gradients": [[170, "per-sample-gradients"]], "What is it?": [[170, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[170, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[170, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[171, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[171, "what-you-will-learn"], [203, "what-you-will-learn"], [281, "what-you-will-learn"]], "Preamble": [[171, "preamble"]], "Memory management basics": [[171, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[171, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[171, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[171, "a-pytorch-perspective"]], "pin_memory()": [[171, "pin-memory"]], "non_blocking=True": [[171, "non-blocking-true"]], "Synergies": [[171, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[171, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[171, "practical-recommendations"]], "Additional considerations": [[171, "additional-considerations"]], "Additional resources": [[171, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[172, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[173, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[173, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[173, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[173, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[174, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[174, "basics"], [179, "basics"]], "Step 1: Implement a Subclass of Backend": [[174, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[174, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[174, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[174, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[175, "pruning-tutorial"]], "Create a model": [[175, "create-a-model"]], "Inspect a Module": [[175, "inspect-a-module"]], "Pruning a Module": [[175, "pruning-a-module"]], "Iterative Pruning": [[175, "iterative-pruning"]], "Serializing a pruned model": [[175, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[175, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[175, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[175, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[175, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[176, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[176, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[176, "installing-pytorch-and-opencv"]], "Video Capture": [[176, "video-capture"]], "Image Preprocessing": [[176, "image-preprocessing"]], "Model Choices": [[176, "model-choices"]], "MobileNetV2: Quantization and JIT": [[176, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[176, "putting-it-together"]], "Troubleshooting: Performance": [[176, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[177, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[177, "define-hyperparameters"]], "Data collection parameters": [[177, "data-collection-parameters"]], "PPO parameters": [[177, "ppo-parameters"]], "Define an environment": [[177, "define-an-environment"]], "Normalization": [[177, "normalization"]], "Value network": [[177, "value-network"]], "Loss function": [[177, "loss-function"]], "Conclusion and next steps": [[177, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[178, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[178, "replay-memory"]], "DQN algorithm": [[178, "dqn-algorithm"]], "Q-network": [[178, "q-network"]], "Hyperparameters and utilities": [[178, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[179, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[179, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[179, "batch-processing-cartpole-solver"]], "Learn More": [[179, "learn-more"], [187, "learn-more"], [252, "learn-more"], [254, "learn-more"], [257, "learn-more"], [265, "learn-more"], [268, "learn-more"], [269, "learn-more"], [270, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[180, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[181, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[181, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[181, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[182, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[182, "fused-implementations"]], "Explicit Dispatcher Control": [[182, "explicit-dispatcher-control"]], "Hardware dependence": [[182, "hardware-dependence"]], "Causal Self Attention": [[182, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[182, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[182, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[182, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[183, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[183, "loading-data-files"]], "The Seq2Seq Model": [[183, "the-seq2seq-model"]], "The Encoder": [[183, "the-encoder"]], "The Decoder": [[183, "the-decoder"]], "Simple Decoder": [[183, "simple-decoder"]], "Attention Decoder": [[183, "attention-decoder"]], "Preparing Training Data": [[183, "preparing-training-data"]], "Training the Model": [[183, "training-the-model"]], "Plotting results": [[183, "plotting-results"]], "Evaluation": [[183, "evaluation"]], "Training and Evaluating": [[183, "training-and-evaluating"]], "Visualizing Attention": [[183, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[185, "spatial-transformer-networks-tutorial"]], "Loading the data": [[185, "loading-the-data"]], "Depicting spatial transformer networks": [[185, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[185, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[186, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[187, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[187, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[187, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[187, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[187, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[187, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[187, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[187, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[188, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[188, "tensorboard-setup"]], "2. Writing to TensorBoard": [[188, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[188, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[188, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[188, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[188, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[189, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[190, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[190, "setting-up-the-environment"]], "Importing related libraries": [[190, "importing-related-libraries"]], "Clean-up before a run": [[190, "clean-up-before-a-run"]], "Downloading the data": [[190, "downloading-the-data"]], "Reading the data": [[190, "reading-the-data"]], "Classify image patches": [[190, "classify-image-patches"]], "Define PatchPredictor model": [[190, "define-patchpredictor-model"]], "Predict patch labels": [[190, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[190, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[190, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[190, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[191, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[191, "fusing-convolution-with-batch-norm"], [191, "id1"]], "Pattern Matching with torch.compile": [[191, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[191, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[191, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[192, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[192, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[192, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[192, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[192, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[192, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[193, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[194, "torch-export-tutorial"]], "Graph Breaks": [[194, "graph-breaks"]], "Non-Strict Export": [[194, "non-strict-export"]], "Control Flow Ops": [[194, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[194, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[194, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[194, "specialization"]], "Named Dims": [[194, "named-dims"]], "Constraint violations, suggested fixes": [[194, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[194, "data-dependent-errors"]], "Guards, torch._check()": [[194, "guards-torch-check"]], "Specialized values": [[194, "specialized-values"]], "Custom Ops": [[194, "custom-ops"]], "IR/Decompositions": [[194, "ir-decompositions"]], "ExportDB": [[194, "exportdb"]], "Running the Exported Program": [[194, "running-the-exported-program"]], "Introduction to TorchRec": [[195, "introduction-to-torchrec"], [196, "introduction-to-torchrec"]], "Install Dependencies": [[195, "install-dependencies"]], "Embeddings": [[195, "embeddings"]], "Embeddings in RecSys": [[195, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[195, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[195, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[195, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[195, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[195, "distributed-training-and-sharding"]], "Distributed Embeddings": [[195, "distributed-embeddings"]], "Sharding": [[195, "sharding"]], "Sharded Modules": [[195, "sharded-modules"]], "Planner": [[195, "planner"]], "Planner Result": [[195, "planner-result"]], "GPU Training with LazyAwaitable": [[195, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[195, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[195, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[195, "distributedmodelparallel"]], "Sharding Best Practices": [[195, "sharding-best-practices"]], "Adding in the Optimizer": [[195, "adding-in-the-optimizer"]], "Optimizer Classes": [[195, "optimizer-classes"]], "Fused optimizer in TorchRec": [[195, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[195, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[197, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[197, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[197, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[197, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[197, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[197, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[197, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[197, "putting-everything-together"]], "Testing forward() method (Optional)": [[197, "testing-forward-method-optional"]], "Wrapping up": [[197, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[198, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[198, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[198, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[198, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[198, "multiheadattention"]], "Utilities": [[198, "utilities"]], "GPT-style layer": [[198, "gpt-style-layer"]], "Going one step further": [[198, "going-one-step-further"]], "Cross Attention": [[198, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[198, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[198, "flexattention-njt"]], "Packed Projection": [[198, "packed-projection"]], "Input projection for MultiheadAttention": [[198, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[198, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[198, "extended-examples"]], "Intro": [[199, "intro"]], "(prototype) PyTorch BackendConfig Tutorial": [[200, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[200, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[200, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[200, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[200, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[200, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[200, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[200, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[200, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[201, "introduction-to-context-parallel"]], "Enable Context Parallel": [[201, "enable-context-parallel"]], "Select Rotation Approach": [[201, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[202, "profiling-pytorch-rpc-based-workloads"], [238, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[203, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[203, "enabling-flight-recorder"]], "Additional Settings": [[203, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[203, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[203, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[203, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[203, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[204, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[204, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[205, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[205, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[206, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[206, "prerequisites"], [216, "prerequisites"]], "Enabling the API": [[206, "enabling-the-api"]], "Example code": [[206, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[207, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[207, "software-installation"]], "Install a Compiler": [[207, "install-a-compiler"]], "Set Up Environment": [[207, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[207, "id1"]], "Intel Compiler": [[207, "id2"]], "LLVM Compiler": [[207, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[209, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[210, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[211, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[212, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[212, "introduction-and-motivation"]], "Preparation": [[212, "preparation"], [213, "preparation"], [214, "preparation"]], "Simpler Code with MaskedTensor": [[212, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[212, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[212, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[213, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[213, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[213, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[214, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[214, "using-maskedtensor"]], "Construction": [[214, "construction"]], "Accessing the data and mask": [[214, "accessing-the-data-and-mask"]], "Indexing and slicing": [[214, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[214, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[214, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[214, "torch-where"]], "Another torch.where": [[214, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[214, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[214, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[214, "safe-softmax"]], "Implementing missing torch.nan* operators": [[214, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[215, "prototype-maskedtensor-sparsity"]], "Principles": [[215, "principles"]], "Sparse COO tensors": [[215, "sparse-coo-tensors"]], "Sparse CSR tensors": [[215, "sparse-csr-tensors"]], "Supported Operations": [[215, "supported-operations"]], "Unary": [[215, "unary"]], "Binary": [[215, "binary"]], "Reductions": [[215, "reductions"]], "MaskedTensor Helper Methods": [[215, "maskedtensor-helper-methods"]], "Appendix": [[215, "appendix"]], "Sparse COO Construction": [[215, "sparse-coo-construction"]], "Sparse CSR Construction": [[215, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[216, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[216, "activating-the-max-autotune-mode"]], "Example": [[216, "example"]], "Getting Started with Nested Tensors": [[217, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[217, "nested-tensor-initialization"]], "Nested Tensor Operations": [[217, "nested-tensor-operations"]], "Why Nested Tensor": [[217, "why-nested-tensor"]], "See Also": [[217, "see-also"], [230, "see-also"], [279, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[218, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[219, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[219, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[219, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[219, "capture-fx-graph"]], "2. Apply Quantization": [[219, "apply-quantization"]], "3. Lower into OpenVINO representation": [[219, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[219, "optional-improve-quantized-model-metrics"]], "Unstable": [[220, "unstable"]], "Autoloading Out-of-Tree Extension": [[221, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[221, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[221, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[222, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[222, "id1"]], "Skipping Module Parameter Initialization": [[224, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[224, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[224, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[224, "implementation-details"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[225, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[226, "torch-vmap"]], "So, what is vmap?": [[226, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[227, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[227, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[227, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[227, "desktop-build"]], "Vulkan SDK": [[227, "vulkan-sdk"]], "Android build": [[227, "android-build"]], "Model preparation": [[227, "model-preparation"]], "Using Vulkan backend in code": [[227, "using-vulkan-backend-in-code"]], "C++ API": [[227, "c-api"]], "Python API": [[227, "python-api"]], "Android Java API": [[227, "android-java-api"]], "Building android test app with Vulkan": [[227, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[227, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[228, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[228, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[228, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[228, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[228, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[229, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[230, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[230, "model-setup"], [231, "model-setup"], [239, "model-setup"]], "Setting up and running the optimizer benchmark": [[230, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[231, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[231, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[231, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[232, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[232, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[232, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[233, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[233, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[233, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[234, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[234, "how-dcp-works"]], "How to use DCP": [[234, "how-to-use-dcp"]], "Saving": [[234, "saving"]], "Loading": [[234, "loading"]], "Formats": [[234, "formats"]], "Getting Started with CommDebugMode": [[235, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[235, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[235, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[236, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[236, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[236, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[236, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[236, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[239, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[239, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[239, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[240, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[240, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[240, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[240, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[240, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[241, "intel-extension-for-pytorch"]], "Features": [[241, "features"], [242, "features"]], "Examples \u2013 CPU": [[241, "examples-cpu"]], "Float32": [[241, "float32"], [241, "id1"], [241, "id3"], [241, "id6"], [241, "id9"], [241, "id12"]], "BFloat16": [[241, "bfloat16"], [241, "id2"], [241, "id4"], [241, "id7"], [241, "id10"], [241, "id13"]], "Inference - Imperative Mode": [[241, "inference-imperative-mode"], [241, "id8"]], "Inference - TorchScript Mode": [[241, "inference-torchscript-mode"], [241, "id11"]], "Examples \u2013 GPU": [[241, "examples-gpu"]], "Float16": [[241, "float16"], [241, "id14"]], "C++ (CPU only)": [[241, "c-cpu-only"]], "Model Zoo (CPU only)": [[241, "model-zoo-cpu-only"]], "Tutorials": [[241, "tutorials"], [242, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[242, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[242, "usages"]], "Model": [[242, "model"]], "Accuracy driven quantization": [[242, "accuracy-driven-quantization"]], "Quantization aware training": [[242, "quantization-aware-training"]], "Performance only quantization": [[242, "performance-only-quantization"]], "Quantization outputs": [[242, "quantization-outputs"]], "Deployment": [[242, "deployment"]], "Loading data in PyTorch": [[243, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[244, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[245, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[246, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[247, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[248, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[248, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[248, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[248, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[248, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[248, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[248, "configure-profiling-for-xpu"]], "Read Profiling Result": [[248, "read-profiling-result"]], "Read XPU Profiling Result": [[248, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[248, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[249, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[250, "model-interpretability-using-captum"]], "Before you begin": [[250, "before-you-begin"]], "Computing Attribution": [[250, "computing-attribution"]], "Visualizing the Results": [[250, "visualizing-the-results"]], "Final Notes": [[250, "final-notes"]], "Automatic Mixed Precision": [[251, "automatic-mixed-precision"]], "A simple network": [[251, "a-simple-network"]], "Default Precision": [[251, "default-precision"]], "Adding torch.autocast": [[251, "adding-torch-autocast"]], "Adding GradScaler": [[251, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[251, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[251, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[251, "saving-resuming"]], "Inference/Evaluation": [[251, "inference-evaluation"]], "Advanced topics": [[251, "advanced-topics"]], "Speedup with Amp is minor": [[251, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[251, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[251, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[252, "syntaxerror"]], "1. Defining functions to benchmark": [[252, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[252, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[252, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[252, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[252, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[252, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[252, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[252, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[253, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[254, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[254, "import-necessary-libraries-for-loading-our-data"], [268, "import-necessary-libraries-for-loading-our-data"], [269, "import-necessary-libraries-for-loading-our-data"], [270, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[254, "define-and-initialize-the-neural-network"], [269, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[254, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[254, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[255, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[256, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[256, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[256, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[256, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[257, "pytorch-profiler"]], "1. Import all necessary libraries": [[257, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[257, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[257, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[257, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[257, "using-tracing-functionality"]], "6. Examining stack traces": [[257, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[257, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[258, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[259, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[260, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[261, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[262, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[264, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[264, "torch-utils-swap-tensors"]], "Application to nn.Module": [[264, "application-to-nn-module"]], "nn.Module.to() and related methods": [[264, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[264, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[265, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[265, "using-tensorboard-in-pytorch"]], "Log scalars": [[265, "log-scalars"]], "Run TensorBoard": [[265, "run-tensorboard"]], "Timer quick start": [[266, "timer-quick-start"]], "1. Defining a Timer": [[266, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[266, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[266, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[266, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[266, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[266, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[266, "wrapping-up"]], "8. Footnotes": [[266, "footnotes"]], "Performance Tuning Guide": [[267, "performance-tuning-guide"]], "General optimizations": [[267, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[267, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[267, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[267, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[267, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[267, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[267, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[267, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[267, "disable-debugging-apis"]], "CPU specific optimizations": [[267, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[267, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[267, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[267, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[267, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[267, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[267, "gpu-specific-optimizations"]], "Enable Tensor cores": [[267, "enable-tensor-cores"]], "Use CUDA Graphs": [[267, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[267, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[267, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[267, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[267, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[267, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[267, "distributed-optimizations"]], "Use efficient data-parallel backend": [[267, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[267, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[267, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[267, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[268, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[268, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[268, "save-model-a"]], "4. Load into model B": [[268, "load-into-model-b"]], "What is a state_dict in PyTorch": [[269, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[269, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[269, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[270, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[270, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[270, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[270, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[270, "zero-the-gradients-while-training-the-network"]], "Recipes": [[271, "recipes"]], "Reducing torch.compile cold start compilation time with regional compilation": [[272, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[273, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[275, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[275, "usage-example"]], "Train FP32": [[275, "train-fp32"]], "Train BF16": [[275, "train-bf16"]], "Inference FP32": [[275, "inference-fp32"]], "Inference BF16": [[275, "inference-bf16"]], "Compile Time Caching Configuration": [[276, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[276, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[276, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[276, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[276, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[276, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[276, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[276, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[276, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[277, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[277, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[277, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[277, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[277, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[278, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[278, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[279, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[279, "advanced-usage"]], "Composability": [[279, "composability"]], "Wrapping Triton kernels with triton_op": [[279, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[279, "adding-training-support"]], "Adding a CPU Fallback": [[279, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[279, "adding-a-flopcounter-formula"]], "Limitations": [[279, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[280, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[280, "description"]], "Preventing recompilation": [[280, "preventing-recompilation"]], "Measuring performance gains": [[280, "measuring-performance-gains"]], "Crashing sooner": [[280, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[281, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[281, "model-compilation"]], "Model Inference in Python": [[281, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[281, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[282, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[282, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[282, "video-classification"]], "Error: Static batch size": [[282, "error-static-batch-size"]], "Solution": [[282, "solution"], [282, "id1"], [282, "id2"], [282, "id3"]], "Automatic Speech Recognition": [[282, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[282, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[282, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[282, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[282, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[282, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[283, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[285, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[285, "what-you-will-learn"]], "Introduction of the Optimizations": [[285, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[285, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[285, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[285, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[285, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[285, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[285, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[286, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[286, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[286, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})