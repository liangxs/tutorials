Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/dynamic_quantization_tutorial", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/super_resolution_with_onnxruntime", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/Intro_to_TorchScript_tutorial", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "distributed/home", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/dynamic_quantization_bert_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_conv_bn_fuser", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/quantized_transfer_learning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/fx_graph_mode_ptq_dynamic", "prototype/fx_graph_mode_ptq_static", "prototype/fx_graph_mode_quant_guide", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/graph_mode_dynamic_bert_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/numeric_suite_tutorial", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/pt2e_quant_ptq", "prototype/pt2e_quant_ptq_x86_inductor", "prototype/pt2e_quant_qat", "prototype/pt2e_quant_x86_inductor", "prototype/pt2e_quant_xpu_inductor", "prototype/pt2e_quantizer", "prototype/python_extension_autoload", "prototype/quantization_in_pytorch_2_0_export_tutorial", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/torchscript_freezing", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/fuse", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/quantization", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/dynamic_quantization", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/dynamic_quantization_tutorial.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/super_resolution_with_onnxruntime.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/Intro_to_TorchScript_tutorial.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "distributed/home.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/dynamic_quantization_bert_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_conv_bn_fuser.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/quantized_transfer_learning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/fx_graph_mode_ptq_dynamic.rst", "prototype/fx_graph_mode_ptq_static.rst", "prototype/fx_graph_mode_quant_guide.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/graph_mode_dynamic_bert_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/numeric_suite_tutorial.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/pt2e_quant_ptq.rst", "prototype/pt2e_quant_ptq_x86_inductor.rst", "prototype/pt2e_quant_qat.rst", "prototype/pt2e_quant_x86_inductor.rst", "prototype/pt2e_quant_xpu_inductor.rst", "prototype/pt2e_quantizer.rst", "prototype/python_extension_autoload.rst", "prototype/quantization_in_pytorch_2_0_export_tutorial.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/torchscript_freezing.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/fuse.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/quantization.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/dynamic_quantization.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Loading a TorchScript Model in C++", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "(beta) Dynamic Quantization on an LSTM Word Language Model", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime", "Dynamic Parallelism in TorchScript", "Extending TorchScript with Custom C++ Classes", "Extending TorchScript with Custom C++ Operators", "Semi-Supervised Learning using USB built upon PyTorch", "Introduction to TorchScript", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Distributed and Parallel Training Tutorials", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "(beta) Dynamic Quantization on BERT", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Convolution/Batch Norm fuser in FX", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "(beta) Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "(beta) Quantized Transfer Learning for Computer Vision Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) FX Graph Mode Post Training Dynamic Quantization", "(prototype) FX Graph Mode Post Training Static Quantization", "(prototype) FX Graph Mode Quantization User Guide", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "(prototype) Graph Mode Dynamic Quantization on BERT", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch Numeric Suite Tutorial", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "PyTorch Prototype Recipes", "(prototype) PyTorch 2 Export Post Training Quantization", "Quantization in PyTorch 2.0 Export Tutorial", "(prototype) PyTorch 2 Export Quantization-Aware Training (QAT)", "PyTorch 2 Export Quantization with X86 Backend through Inductor", "PyTorch 2 Export Quantization with Intel GPU Backend through Inductor", "How to Write a <code class=\"docutils literal notranslate\"><span class=\"pre\">Quantizer</span></code> for PyTorch 2 Export Quantization", "Autoloading Out-of-Tree Extension", "Quantization in PyTorch 2.0 Export Tutorial", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "Model Freezing in TorchScript", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "Distributed Optimizer with TorchScript support", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "Fuse Modules Recipe", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Quantization Recipe", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "Dynamic Quantization", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "PyTorch Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "TorchScript for Deployment", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 45, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "ha": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 47, 48, 49, 52, 55, 56, 68, 73, 80, 81, 88, 90, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 117, 120, 121, 124, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 157, 158, 160, 162, 163, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 180, 181, 182, 185, 186, 187, 188, 189, 191, 192, 193, 195, 196, 198, 199, 202, 203, 204, 205, 206, 209, 212, 213, 214, 215, 216, 218, 220, 221, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 235, 241, 242, 245, 247, 248, 252, 253, 261, 262, 264, 265, 267, 270, 277, 279, 280, 285, 286, 291, 292, 294, 295, 297, 298, 299], "been": [0, 1, 3, 5, 7, 9, 11, 16, 17, 20, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 47, 56, 74, 80, 81, 88, 90, 93, 94, 95, 96, 98, 103, 109, 113, 115, 124, 126, 127, 130, 133, 136, 141, 143, 144, 145, 148, 149, 150, 153, 155, 157, 158, 162, 163, 165, 166, 167, 170, 173, 175, 176, 177, 181, 185, 186, 187, 188, 189, 191, 192, 193, 196, 198, 199, 202, 209, 212, 213, 216, 218, 224, 225, 226, 227, 228, 229, 230, 231, 235, 241, 247, 248, 252, 253, 259, 264, 277, 278, 286, 294, 295, 298], "deprec": [0, 6, 9, 10, 27, 47, 124, 126, 127, 129, 130, 133, 135, 136, 148, 162, 165, 170, 186, 192, 199, 248, 254, 272, 273, 274, 275, 286], "redirect": [0, 9, 30, 31, 32, 33, 34, 35, 47, 64, 65, 81, 82, 83, 84, 85, 86, 94, 124, 126, 127, 130, 148, 153, 162, 165, 170, 185, 188, 191, 194, 199, 209, 210, 211, 219, 224, 230, 235, 239, 248, 255, 256, 257, 258, 260, 272, 273, 274, 275, 286], "3": [0, 2, 3, 4, 6, 7, 9, 16, 19, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 40, 47, 48, 58, 64, 65, 68, 69, 73, 74, 80, 81, 82, 83, 84, 85, 86, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 124, 125, 126, 127, 130, 133, 134, 135, 137, 142, 143, 144, 148, 149, 150, 152, 153, 157, 159, 160, 162, 163, 164, 165, 166, 168, 170, 173, 174, 175, 176, 178, 179, 180, 181, 185, 188, 189, 190, 191, 192, 193, 195, 196, 198, 200, 203, 205, 208, 209, 210, 211, 218, 219, 223, 224, 225, 230, 231, 233, 235, 237, 238, 239, 241, 245, 246, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 269, 272, 273, 274, 275, 277, 286, 288, 292, 294, 295, 297], "second": [0, 1, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 18, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 55, 57, 58, 64, 65, 68, 69, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 124, 125, 126, 127, 128, 130, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 181, 182, 184, 185, 186, 187, 188, 190, 191, 192, 193, 195, 196, 200, 201, 204, 205, 206, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 224, 228, 230, 234, 235, 236, 239, 241, 242, 245, 249, 250, 253, 255, 256, 257, 258, 260, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 285, 286, 291, 292, 293, 294, 296, 298], "click": [1, 11, 14, 15, 16, 18, 20, 24, 25, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 187, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 259, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "here": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 68, 69, 70, 72, 73, 74, 77, 78, 80, 86, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 174, 176, 177, 179, 180, 181, 182, 184, 186, 187, 190, 192, 193, 195, 196, 197, 201, 202, 203, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 231, 234, 236, 241, 244, 245, 247, 249, 250, 251, 252, 253, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 290, 291, 292, 293, 294, 295, 296, 298], "download": [1, 5, 7, 11, 14, 15, 16, 18, 20, 23, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 133, 134, 138, 139, 140, 141, 143, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 174, 175, 176, 177, 179, 181, 182, 184, 186, 187, 190, 192, 193, 195, 196, 202, 204, 205, 208, 213, 214, 215, 216, 218, 220, 223, 225, 227, 234, 236, 237, 241, 249, 252, 253, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 288, 290, 291, 292, 293, 294, 296], "full": [1, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 18, 20, 23, 24, 26, 28, 29, 36, 37, 38, 40, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 172, 173, 176, 177, 178, 181, 182, 184, 186, 190, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 213, 214, 215, 216, 218, 220, 221, 225, 234, 236, 241, 249, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 292, 293, 294, 296, 297, 298], "exampl": [1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 66, 68, 69, 70, 72, 73, 74, 77, 78, 87, 88, 89, 91, 93, 98, 99, 100, 102, 103, 104, 105, 106, 108, 109, 113, 114, 115, 117, 118, 120, 123, 125, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 197, 198, 201, 202, 203, 204, 205, 206, 208, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 227, 231, 233, 234, 236, 237, 238, 240, 241, 243, 244, 245, 246, 247, 249, 251, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 294, 295, 296, 297, 299], "author": [1, 4, 6, 11, 13, 14, 15, 16, 19, 20, 23, 28, 40, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 80, 87, 88, 90, 92, 99, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 149, 150, 151, 155, 156, 157, 159, 160, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 190, 192, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 217, 221, 223, 225, 226, 227, 228, 229, 231, 236, 237, 240, 241, 243, 244, 245, 246, 249, 251, 263, 269, 270, 277, 280, 285, 289, 290, 291, 292, 293, 294, 295, 296], "vincent": [1, 16, 150, 169, 176], "moen": [1, 16, 150, 169, 176], "separ": [1, 4, 6, 7, 10, 18, 24, 26, 27, 29, 38, 55, 58, 90, 95, 102, 103, 104, 105, 113, 120, 137, 152, 157, 159, 167, 169, 174, 179, 182, 189, 195, 197, 201, 202, 213, 223, 228, 247, 264, 280, 290, 293, 296], "rl": [1, 132, 176, 177, 178, 183], "algorithm": [1, 6, 7, 12, 13, 14, 36, 41, 46, 55, 58, 62, 74, 87, 93, 96, 98, 104, 106, 107, 108, 109, 113, 121, 132, 134, 137, 139, 143, 149, 150, 159, 169, 172, 176, 179, 184, 198, 221, 240, 241, 247, 262, 266, 280], "variou": [1, 4, 10, 17, 45, 52, 54, 55, 56, 88, 90, 93, 98, 102, 110, 113, 120, 122, 139, 149, 156, 158, 173, 176, 179, 180, 189, 193, 196, 200, 205, 215, 218, 238, 245, 249, 267, 279, 283, 289, 292, 295], "piec": [1, 6, 10, 16, 90, 98, 113, 175, 176, 180, 189, 195, 197], "assembl": [1, 10, 55, 98], "script": [1, 6, 7, 11, 12, 14, 15, 16, 18, 20, 23, 24, 25, 26, 28, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 61, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 171, 173, 175, 176, 177, 179, 181, 182, 184, 186, 189, 190, 192, 193, 195, 196, 200, 201, 202, 204, 205, 213, 214, 215, 216, 218, 220, 225, 226, 227, 234, 236, 237, 241, 247, 249, 250, 251, 252, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 291, 292, 293, 294, 296, 297], "collect": [1, 5, 7, 13, 16, 17, 22, 23, 25, 41, 48, 49, 50, 55, 61, 66, 98, 103, 104, 107, 112, 132, 133, 134, 137, 147, 150, 156, 172, 177, 180, 192, 193, 198, 200, 231, 244, 245, 246, 259, 279, 280, 284], "final": [1, 7, 11, 12, 13, 14, 16, 17, 19, 20, 23, 24, 25, 26, 27, 28, 46, 48, 52, 55, 58, 80, 90, 93, 95, 98, 100, 103, 104, 105, 110, 113, 115, 118, 120, 122, 128, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 149, 156, 157, 158, 159, 163, 166, 168, 171, 173, 174, 176, 177, 178, 179, 180, 182, 186, 187, 192, 193, 197, 198, 200, 205, 206, 213, 216, 221, 223, 225, 226, 227, 228, 231, 234, 247, 253], "function": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 38, 42, 43, 45, 46, 48, 54, 55, 57, 59, 61, 66, 67, 70, 72, 73, 74, 87, 88, 95, 96, 98, 102, 103, 109, 112, 114, 117, 118, 120, 122, 128, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 149, 150, 152, 155, 156, 157, 159, 166, 167, 169, 171, 172, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 201, 206, 207, 213, 214, 215, 216, 220, 221, 228, 231, 233, 236, 237, 240, 241, 247, 251, 252, 253, 259, 263, 265, 266, 267, 277, 279, 281, 284, 287, 289, 292, 293, 294, 296, 297, 299], "ar": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 66, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 266, 267, 269, 270, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299], "state": [1, 4, 6, 10, 12, 13, 16, 20, 26, 42, 43, 49, 55, 58, 59, 61, 93, 96, 98, 100, 104, 105, 106, 110, 113, 121, 122, 133, 134, 140, 141, 143, 145, 147, 150, 151, 152, 154, 159, 166, 168, 173, 176, 177, 178, 179, 180, 182, 186, 192, 200, 204, 206, 216, 220, 229, 231, 243, 244, 247, 249, 262, 263, 267, 269, 282, 284], "contain": [1, 2, 5, 7, 10, 12, 14, 16, 17, 20, 24, 25, 26, 27, 29, 37, 38, 42, 46, 52, 55, 56, 61, 72, 73, 74, 87, 90, 95, 96, 100, 103, 104, 107, 109, 110, 113, 114, 121, 122, 128, 132, 133, 134, 138, 139, 140, 145, 147, 150, 167, 171, 173, 174, 176, 177, 178, 180, 181, 182, 184, 186, 187, 189, 192, 193, 195, 196, 197, 200, 202, 204, 216, 220, 225, 228, 231, 233, 237, 242, 253, 259, 263, 266, 269, 277, 279, 280, 282, 294, 295, 298], "trainabl": [1, 7, 73, 105, 107, 174, 193], "paramet": [1, 5, 6, 12, 13, 14, 16, 17, 19, 20, 23, 24, 26, 28, 29, 36, 38, 39, 40, 43, 45, 46, 48, 49, 52, 54, 55, 57, 58, 72, 73, 80, 90, 93, 95, 98, 104, 105, 107, 109, 112, 113, 117, 118, 120, 121, 128, 131, 132, 133, 134, 135, 137, 139, 140, 145, 147, 149, 150, 151, 152, 154, 157, 158, 159, 163, 166, 167, 168, 174, 180, 181, 184, 186, 187, 189, 192, 193, 202, 205, 213, 221, 222, 223, 231, 234, 240, 242, 243, 244, 247, 251, 252, 253, 259, 261, 263, 267, 268, 269, 270, 271, 276, 277, 278, 282, 283, 284, 288, 292, 298, 299], "tutori": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 42, 47, 48, 49, 50, 51, 57, 59, 61, 62, 66, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 96, 97, 100, 102, 104, 106, 108, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 168, 169, 170, 171, 172, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 193, 194, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 251, 261, 262, 263, 267, 268, 269, 270, 272, 273, 274, 275, 277, 278, 279, 280, 284, 286, 295, 296, 297, 298, 299], "guid": [1, 6, 10, 20, 27, 66, 87, 90, 118, 132, 133, 149, 160, 175, 183, 186, 192, 193, 205, 221, 222, 231, 249, 259, 262, 264, 268, 276, 284, 298], "you": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 38, 40, 41, 43, 45, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 66, 72, 73, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 198, 202, 203, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 236, 237, 238, 240, 242, 243, 244, 245, 246, 247, 251, 252, 259, 261, 263, 264, 265, 266, 267, 269, 270, 278, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 295, 296, 297, 299], "through": [1, 3, 5, 6, 7, 10, 12, 15, 16, 17, 19, 23, 25, 26, 27, 28, 29, 36, 37, 41, 42, 48, 49, 52, 55, 58, 60, 61, 89, 91, 93, 95, 98, 100, 102, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 121, 125, 131, 132, 134, 135, 136, 137, 138, 140, 142, 143, 144, 149, 152, 155, 156, 157, 158, 159, 160, 163, 166, 168, 169, 171, 172, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 192, 193, 202, 203, 204, 205, 207, 208, 213, 215, 220, 221, 222, 223, 228, 231, 236, 242, 243, 244, 251, 252, 253, 261, 263, 264, 270, 278, 283, 295, 298], "from": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 36, 38, 41, 42, 43, 45, 49, 52, 54, 55, 57, 58, 59, 61, 68, 69, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 117, 118, 120, 121, 125, 128, 132, 133, 134, 135, 136, 137, 138, 139, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 190, 192, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 237, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 266, 267, 268, 270, 276, 277, 278, 279, 280, 282, 284, 290, 291, 292, 294, 295, 297, 298, 299], "ground": [1, 16, 49, 80, 195], "up": [1, 3, 5, 6, 7, 10, 12, 16, 18, 20, 22, 23, 24, 25, 26, 27, 36, 38, 41, 55, 58, 61, 66, 76, 79, 87, 90, 95, 96, 98, 99, 100, 103, 105, 106, 107, 109, 110, 112, 113, 115, 120, 132, 133, 134, 135, 136, 137, 140, 141, 145, 146, 147, 149, 150, 152, 156, 157, 163, 166, 168, 169, 171, 174, 175, 176, 177, 178, 179, 182, 186, 187, 190, 192, 193, 196, 202, 206, 207, 218, 221, 222, 223, 225, 228, 231, 234, 238, 242, 243, 245, 246, 247, 252, 264, 270, 280, 283, 284, 294, 295, 296, 298, 299], "us": [1, 4, 5, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 36, 37, 38, 41, 42, 43, 45, 46, 49, 50, 52, 54, 55, 57, 58, 60, 61, 62, 63, 66, 68, 69, 70, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 117, 121, 125, 128, 131, 132, 134, 136, 137, 138, 139, 140, 141, 144, 146, 149, 151, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 169, 171, 173, 174, 175, 176, 177, 182, 183, 184, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 213, 214, 216, 218, 220, 221, 222, 223, 225, 226, 227, 229, 231, 233, 234, 236, 238, 240, 241, 243, 247, 249, 250, 251, 252, 263, 264, 265, 266, 267, 268, 271, 276, 277, 279, 282, 283, 284, 285, 287, 289, 290, 291, 293, 295], "To": [1, 4, 5, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 23, 24, 27, 36, 37, 41, 42, 43, 46, 52, 55, 56, 57, 63, 70, 78, 87, 88, 90, 93, 96, 102, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 121, 122, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 154, 157, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 189, 192, 193, 196, 198, 200, 202, 205, 206, 207, 208, 213, 215, 216, 217, 222, 223, 225, 226, 228, 231, 233, 237, 245, 246, 251, 252, 253, 259, 261, 263, 264, 266, 269, 270, 277, 278, 279, 280, 281, 282, 283, 288, 292, 294, 295, 296, 298], "aim": [1, 7, 105, 108, 136, 166, 177, 180, 216, 227, 253], "we": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 61, 68, 69, 70, 73, 74, 80, 87, 88, 90, 93, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 259, 261, 262, 264, 266, 267, 269, 270, 271, 277, 278, 279, 281, 282, 283, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "focus": [1, 3, 24, 96, 105, 108, 172, 182, 193, 253], "which": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 40, 41, 42, 43, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 61, 62, 66, 68, 69, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 156, 157, 158, 160, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 238, 241, 242, 243, 244, 245, 246, 247, 249, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 277, 279, 280, 281, 282, 283, 285, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299], "i": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 64, 65, 66, 68, 69, 70, 73, 77, 78, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 118, 120, 121, 123, 125, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 154, 155, 156, 157, 158, 159, 163, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 237, 239, 240, 241, 243, 244, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 288, 289, 290, 292, 293, 294, 296, 298], "rel": [1, 6, 7, 96, 104, 128, 138, 151, 158, 163, 180, 182, 196, 207, 223, 253, 267, 284], "straightforward": [1, 6, 7, 19, 20, 55, 95, 98, 103, 105, 106, 157, 169, 192, 196, 228, 267, 284], "deep": [1, 7, 14, 15, 29, 40, 52, 55, 58, 74, 77, 78, 98, 99, 100, 103, 105, 109, 111, 112, 121, 131, 132, 140, 141, 142, 143, 147, 151, 157, 158, 159, 167, 173, 174, 177, 182, 189, 193, 238, 240, 241, 250, 253, 259, 266, 279, 280, 285, 298], "determinist": [1, 13, 16, 135, 150, 177, 279, 280], "gradient": [1, 4, 7, 12, 13, 15, 16, 18, 19, 29, 41, 48, 49, 52, 55, 58, 62, 66, 68, 69, 70, 73, 77, 78, 95, 98, 100, 103, 104, 105, 106, 107, 109, 113, 121, 128, 132, 133, 134, 137, 138, 140, 142, 144, 145, 147, 149, 154, 158, 159, 166, 173, 174, 176, 178, 179, 180, 183, 187, 189, 193, 213, 236, 244, 247, 262, 268, 276, 284, 299], "simpl": [1, 3, 4, 5, 6, 7, 10, 14, 17, 19, 20, 23, 25, 26, 27, 28, 29, 52, 55, 57, 60, 62, 72, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 114, 117, 121, 122, 131, 132, 133, 138, 139, 142, 144, 149, 152, 157, 158, 163, 168, 169, 171, 173, 176, 178, 179, 180, 181, 183, 184, 186, 190, 192, 193, 198, 202, 206, 217, 221, 226, 227, 231, 238, 240, 241, 244, 246, 249, 252, 253, 261, 264, 267, 269, 278, 279, 280, 282, 284, 292, 295, 296, 299], "continu": [1, 6, 24, 25, 55, 59, 90, 93, 98, 103, 105, 110, 113, 132, 135, 136, 137, 141, 145, 149, 156, 174, 176, 180, 182, 186, 190, 200, 204, 213, 215, 216, 225, 226, 227, 228, 231, 245, 264, 266, 267, 270, 280, 281, 282, 283, 285], "control": [1, 5, 10, 12, 16, 25, 27, 29, 36, 38, 41, 48, 71, 75, 88, 90, 95, 105, 115, 116, 117, 118, 125, 132, 134, 135, 136, 138, 139, 149, 154, 167, 176, 177, 178, 190, 203, 223, 229, 245, 259, 264, 284, 285, 287], "It": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 46, 48, 49, 50, 52, 55, 57, 58, 80, 81, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 117, 122, 128, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 152, 153, 154, 156, 157, 158, 159, 163, 166, 167, 168, 169, 173, 174, 177, 178, 180, 182, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 197, 198, 200, 218, 228, 231, 233, 236, 242, 243, 244, 246, 247, 261, 264, 265, 278, 280, 283, 288, 290, 292, 294, 295, 297, 298], "consist": [1, 3, 4, 7, 16, 17, 26, 28, 29, 36, 37, 38, 41, 48, 105, 107, 113, 135, 137, 145, 155, 156, 159, 163, 166, 176, 177, 181, 182, 186, 193, 196, 197, 198, 200, 215, 216, 226, 227, 228, 241, 264, 270, 280], "learn": [1, 4, 5, 7, 11, 15, 16, 18, 20, 21, 24, 25, 29, 36, 37, 38, 41, 42, 43, 45, 46, 48, 50, 52, 55, 57, 58, 59, 60, 61, 62, 66, 74, 77, 78, 80, 87, 89, 91, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 109, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 132, 133, 134, 136, 139, 140, 141, 142, 145, 146, 147, 149, 150, 157, 158, 164, 166, 167, 168, 171, 173, 175, 179, 182, 183, 184, 187, 189, 192, 193, 195, 196, 198, 204, 205, 213, 214, 215, 216, 217, 218, 222, 223, 226, 227, 228, 229, 231, 234, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 251, 253, 259, 262, 269, 277, 280, 284, 285, 288, 289, 290, 293, 295, 297, 299], "parametr": [1, 2, 20, 132, 176, 183, 231], "an": [1, 2, 3, 5, 6, 7, 8, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 48, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 72, 74, 80, 87, 88, 90, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 120, 121, 128, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 172, 173, 175, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 195, 196, 197, 198, 201, 202, 204, 205, 206, 207, 208, 213, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 240, 242, 243, 244, 246, 247, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 276, 277, 279, 280, 282, 284, 285, 287, 289, 292, 293, 294, 295, 296, 297], "action": [1, 23, 100, 104, 109, 113, 133, 134, 159, 173, 176, 177, 178, 179, 180, 186, 198, 202, 223, 225, 270, 279, 284, 295], "pair": [1, 7, 52, 55, 58, 96, 140, 141, 143, 151, 168, 176, 177, 182, 186, 195, 197, 226, 227, 241, 259, 279], "output": [1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 36, 37, 41, 45, 48, 49, 50, 52, 54, 55, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 125, 128, 133, 134, 135, 137, 138, 140, 141, 142, 147, 149, 150, 151, 152, 154, 155, 157, 158, 160, 163, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 184, 187, 189, 190, 192, 195, 196, 197, 198, 200, 202, 205, 206, 208, 217, 218, 220, 221, 223, 225, 226, 227, 228, 231, 237, 238, 240, 242, 245, 249, 250, 251, 252, 261, 262, 264, 266, 267, 270, 271, 278, 280, 288, 296, 297, 299], "maxim": [1, 16, 58, 80, 87, 105, 107, 139, 159, 177, 190, 280, 298], "given": [1, 4, 7, 10, 12, 14, 16, 18, 20, 24, 25, 26, 27, 29, 36, 38, 41, 45, 46, 48, 54, 55, 58, 61, 80, 87, 90, 96, 100, 104, 105, 108, 109, 112, 113, 122, 134, 140, 141, 149, 152, 154, 158, 159, 160, 168, 173, 176, 177, 179, 180, 182, 190, 192, 193, 195, 204, 216, 220, 228, 231, 247, 251, 264, 271, 280, 291, 295, 299], "certain": [1, 5, 6, 7, 12, 13, 17, 55, 61, 96, 109, 131, 134, 137, 138, 143, 154, 158, 160, 176, 181, 190, 192, 193, 200, 213, 216, 218, 225, 262, 266, 291, 292, 295, 298], "what": [1, 2, 3, 4, 6, 10, 16, 18, 22, 23, 24, 25, 26, 27, 29, 36, 37, 38, 48, 50, 51, 59, 60, 61, 66, 80, 92, 93, 96, 98, 100, 103, 104, 106, 107, 109, 110, 112, 114, 118, 123, 125, 132, 134, 136, 137, 138, 139, 141, 142, 145, 146, 149, 150, 159, 166, 171, 173, 176, 177, 178, 181, 187, 189, 192, 193, 195, 196, 198, 204, 215, 220, 223, 228, 229, 240, 243, 263, 264, 265, 266, 268, 269, 276, 279, 284, 295], "how": [1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 38, 41, 42, 43, 48, 49, 50, 52, 55, 56, 57, 58, 61, 62, 63, 80, 87, 90, 92, 93, 95, 96, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 128, 131, 132, 136, 138, 139, 140, 141, 142, 144, 145, 147, 149, 150, 151, 152, 154, 155, 156, 157, 159, 160, 163, 164, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 204, 205, 206, 213, 214, 215, 216, 217, 218, 220, 221, 222, 226, 227, 231, 234, 238, 241, 243, 245, 249, 250, 251, 253, 261, 262, 263, 264, 267, 268, 269, 270, 276, 277, 279, 280, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298], "write": [1, 4, 5, 8, 10, 12, 18, 21, 25, 26, 27, 49, 55, 66, 69, 102, 106, 107, 108, 109, 113, 121, 123, 128, 132, 136, 138, 139, 144, 145, 147, 150, 151, 154, 155, 157, 160, 163, 167, 169, 172, 176, 179, 180, 182, 186, 189, 190, 192, 196, 200, 204, 206, 216, 221, 222, 223, 225, 232, 236, 237, 244, 263, 264, 265, 266, 271, 280, 295], "custom": [1, 5, 7, 10, 13, 20, 21, 55, 58, 69, 71, 75, 96, 113, 120, 123, 132, 135, 139, 150, 159, 169, 176, 179, 183, 189, 190, 193, 196, 197, 203, 221, 223, 226, 228, 231, 233, 249, 252, 253, 259, 263, 268, 277, 280, 284, 288, 291, 292], "its": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 29, 36, 37, 41, 46, 48, 52, 55, 57, 58, 59, 61, 73, 87, 95, 96, 98, 100, 103, 105, 107, 109, 110, 112, 113, 115, 120, 121, 122, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 149, 150, 151, 152, 154, 156, 157, 159, 160, 166, 167, 171, 173, 176, 177, 178, 179, 180, 182, 186, 187, 190, 192, 193, 205, 215, 216, 218, 223, 228, 229, 231, 233, 237, 238, 244, 246, 250, 252, 259, 261, 263, 264, 266, 269, 270, 277, 280, 281, 282, 283, 299], "includ": [1, 2, 3, 4, 5, 6, 7, 10, 16, 17, 18, 26, 27, 28, 29, 41, 42, 45, 54, 55, 59, 61, 66, 74, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 113, 115, 117, 118, 120, 137, 139, 140, 141, 142, 144, 145, 147, 149, 150, 157, 159, 160, 169, 171, 172, 173, 176, 179, 182, 186, 187, 190, 192, 193, 195, 196, 200, 202, 205, 213, 215, 217, 221, 226, 227, 228, 229, 237, 242, 244, 245, 247, 251, 252, 253, 259, 261, 262, 263, 264, 266, 267, 270, 277, 280, 290, 292, 293, 297, 298], "design": [1, 6, 7, 16, 20, 28, 29, 58, 62, 80, 90, 96, 112, 113, 141, 147, 150, 169, 176, 177, 178, 180, 181, 186, 187, 192, 197, 198, 213, 214, 215, 220, 221, 223, 228, 231, 236, 238, 251, 264, 266, 267, 280, 288, 292, 295, 298], "effici": [1, 6, 12, 14, 17, 20, 24, 27, 29, 36, 55, 57, 80, 87, 103, 105, 109, 112, 133, 134, 137, 139, 147, 149, 150, 158, 163, 173, 176, 180, 181, 186, 189, 193, 200, 207, 216, 217, 218, 227, 231, 232, 243, 264, 269, 288, 292, 298], "store": [1, 5, 6, 7, 19, 20, 23, 26, 27, 36, 37, 38, 42, 43, 45, 48, 54, 57, 59, 73, 93, 95, 102, 103, 106, 107, 109, 112, 113, 115, 121, 136, 138, 139, 141, 149, 150, 157, 159, 160, 167, 169, 171, 172, 173, 176, 177, 178, 179, 180, 182, 192, 193, 198, 202, 205, 216, 217, 223, 225, 231, 247, 267, 270, 279, 280, 289, 290], "them": [1, 2, 3, 4, 6, 7, 10, 12, 13, 14, 16, 20, 22, 23, 27, 29, 36, 38, 41, 48, 49, 52, 54, 55, 57, 59, 61, 66, 73, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 132, 134, 135, 137, 139, 140, 141, 143, 144, 149, 150, 152, 156, 157, 158, 163, 166, 167, 168, 169, 173, 175, 177, 178, 179, 180, 189, 190, 192, 195, 196, 198, 205, 215, 217, 218, 220, 228, 229, 231, 233, 241, 250, 251, 252, 253, 263, 264, 267, 269, 277, 279, 280, 284, 289, 290, 298], "trajectori": [1, 16, 150, 176, 177], "transit": [1, 16, 90, 92, 106, 150, 169, 177, 228], "assum": [1, 2, 5, 7, 10, 12, 16, 17, 23, 25, 26, 40, 48, 49, 57, 60, 80, 95, 98, 99, 105, 106, 108, 110, 113, 118, 137, 138, 140, 141, 149, 150, 167, 173, 176, 179, 181, 182, 195, 215, 216, 218, 226, 228, 244, 269, 270, 277, 279, 295], "have": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 63, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 236, 237, 238, 241, 243, 244, 245, 246, 247, 249, 251, 252, 259, 261, 263, 264, 265, 266, 267, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 294, 295, 297, 298, 299], "complet": [1, 5, 6, 7, 17, 25, 29, 40, 90, 93, 95, 98, 106, 107, 109, 118, 132, 134, 136, 137, 139, 140, 142, 144, 149, 169, 171, 173, 174, 175, 176, 179, 189, 190, 195, 200, 205, 215, 216, 221, 227, 261, 262, 267, 280, 294, 295, 297], "ppo": [1, 132, 183], "give": [1, 2, 6, 7, 13, 16, 20, 27, 29, 41, 50, 52, 55, 56, 58, 80, 95, 96, 98, 100, 105, 107, 109, 110, 112, 113, 122, 141, 145, 152, 155, 156, 157, 158, 159, 168, 175, 179, 182, 186, 189, 190, 192, 193, 196, 202, 214, 218, 231, 247, 251, 264, 267, 297], "compon": [1, 6, 7, 10, 12, 16, 24, 29, 58, 90, 100, 105, 109, 122, 132, 139, 140, 142, 150, 155, 159, 176, 180, 184, 186, 190, 192, 196, 218, 238, 290, 297], "depend": [1, 6, 7, 10, 13, 25, 26, 27, 52, 56, 58, 80, 87, 90, 95, 96, 102, 103, 105, 106, 110, 113, 132, 137, 139, 140, 143, 144, 149, 150, 151, 154, 155, 156, 158, 159, 169, 172, 175, 176, 179, 186, 190, 196, 201, 202, 203, 205, 215, 222, 223, 225, 227, 237, 238, 240, 251, 264, 265, 267, 271, 277, 280, 285, 297, 298], "tensordict": [1, 16, 150, 159, 169, 176], "nn": [1, 2, 5, 6, 7, 11, 13, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26, 29, 41, 42, 43, 48, 49, 50, 52, 55, 61, 71, 74, 75, 93, 95, 98, 104, 107, 112, 117, 120, 123, 128, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 147, 150, 151, 152, 154, 155, 163, 167, 168, 171, 174, 176, 177, 178, 179, 180, 181, 187, 189, 190, 192, 193, 197, 198, 201, 202, 203, 204, 206, 214, 217, 218, 220, 223, 225, 226, 228, 231, 233, 240, 242, 243, 244, 246, 250, 251, 252, 253, 259, 261, 263, 266, 267, 268, 270, 271, 276, 278, 280, 281, 282, 284, 285, 288, 297, 299], "tensordictmodul": [1, 150, 176], "although": [1, 14, 19, 48, 55, 106, 107, 112, 113, 115, 118, 136, 138, 159, 167, 169, 174, 179, 190, 192, 202, 234, 251], "should": [1, 2, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 36, 48, 49, 55, 56, 57, 58, 59, 61, 74, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 128, 132, 134, 135, 136, 138, 139, 142, 144, 147, 149, 150, 152, 156, 159, 160, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 187, 189, 190, 192, 193, 195, 200, 202, 204, 205, 208, 213, 214, 215, 221, 223, 228, 229, 236, 237, 243, 244, 250, 251, 259, 263, 264, 270, 278, 279, 280, 283, 284, 291, 295, 297, 298], "suffici": [1, 7, 55, 58, 105, 106, 128, 145, 147, 166, 169, 192], "transpar": [1, 14, 96, 107, 150, 179, 237, 245, 252, 289], "understood": [1, 4, 5, 18, 292], "without": [1, 5, 6, 7, 10, 11, 12, 16, 18, 20, 24, 27, 36, 55, 59, 61, 100, 103, 105, 106, 117, 132, 133, 135, 137, 138, 141, 142, 149, 151, 152, 154, 156, 158, 159, 160, 166, 169, 172, 173, 174, 175, 176, 177, 178, 181, 186, 189, 192, 204, 213, 215, 216, 218, 226, 228, 229, 231, 241, 243, 246, 252, 261, 263, 267, 269, 271, 277, 280, 284, 290, 291, 293, 299], "understand": [1, 2, 4, 5, 7, 8, 17, 27, 48, 49, 58, 63, 87, 90, 95, 97, 98, 99, 100, 102, 103, 104, 106, 107, 109, 113, 114, 118, 128, 132, 135, 138, 139, 140, 141, 144, 149, 151, 154, 157, 169, 174, 182, 189, 192, 193, 204, 214, 217, 220, 226, 228, 243, 246, 259, 262, 278, 282, 285, 289, 290, 292, 294, 295, 298], "class": [1, 2, 5, 6, 7, 10, 12, 15, 17, 23, 25, 27, 28, 29, 36, 38, 40, 42, 43, 49, 52, 55, 58, 59, 70, 72, 80, 88, 90, 96, 98, 100, 102, 103, 104, 107, 108, 112, 113, 118, 120, 121, 122, 128, 132, 133, 134, 135, 139, 140, 142, 144, 145, 147, 149, 150, 151, 152, 156, 157, 159, 160, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 189, 192, 195, 197, 200, 202, 203, 213, 214, 215, 217, 220, 223, 225, 226, 228, 233, 242, 243, 244, 246, 247, 250, 251, 253, 259, 262, 264, 266, 279, 283, 285, 295], "do": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 43, 52, 55, 56, 57, 58, 60, 68, 69, 73, 74, 90, 93, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 121, 122, 125, 132, 133, 137, 138, 139, 140, 146, 147, 149, 150, 152, 155, 156, 157, 158, 159, 163, 166, 167, 169, 172, 173, 174, 175, 176, 177, 180, 182, 187, 189, 192, 193, 195, 196, 198, 200, 201, 202, 205, 206, 214, 215, 216, 220, 222, 223, 225, 226, 228, 229, 231, 233, 234, 236, 244, 247, 250, 253, 259, 261, 263, 264, 265, 269, 277, 278, 279, 280, 281, 283, 284, 292, 293, 294, 297], "sota": 1, "implement": [1, 2, 3, 5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 24, 28, 37, 38, 40, 48, 50, 52, 55, 57, 61, 63, 66, 68, 69, 70, 72, 73, 74, 77, 78, 90, 95, 98, 104, 112, 113, 114, 121, 131, 132, 135, 137, 138, 140, 142, 144, 149, 150, 152, 154, 157, 158, 159, 160, 163, 168, 169, 171, 173, 176, 177, 180, 183, 186, 192, 193, 195, 196, 197, 198, 200, 207, 214, 216, 217, 218, 221, 222, 223, 228, 229, 231, 237, 238, 243, 247, 251, 252, 253, 264, 269, 277, 280, 288, 289, 291, 292, 295, 298], "rather": [1, 15, 27, 29, 55, 58, 74, 80, 90, 100, 103, 105, 112, 113, 122, 132, 141, 143, 157, 167, 168, 169, 176, 189, 192, 196, 200, 205, 213, 238, 264, 267, 280, 289, 293], "provid": [1, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 37, 38, 49, 55, 57, 58, 61, 62, 80, 87, 88, 90, 93, 95, 96, 98, 103, 104, 105, 106, 107, 113, 114, 117, 118, 121, 122, 131, 132, 134, 136, 137, 138, 139, 145, 146, 147, 149, 150, 151, 155, 156, 157, 158, 159, 160, 169, 173, 175, 176, 178, 179, 181, 186, 189, 190, 192, 193, 195, 196, 200, 206, 215, 216, 220, 222, 223, 225, 227, 228, 231, 233, 236, 238, 244, 245, 247, 249, 250, 251, 252, 253, 259, 262, 263, 264, 266, 267, 269, 270, 278, 279, 280, 285, 290, 293, 294, 295, 298], "high": [1, 2, 6, 7, 17, 23, 27, 29, 49, 55, 58, 59, 61, 63, 66, 87, 90, 100, 107, 112, 115, 120, 132, 133, 134, 137, 139, 142, 143, 149, 183, 186, 187, 189, 192, 193, 207, 216, 220, 221, 222, 223, 226, 227, 242, 247, 267, 279, 280, 292, 297, 298, 299], "level": [1, 2, 4, 6, 7, 18, 20, 23, 24, 27, 29, 49, 55, 59, 61, 63, 66, 73, 100, 108, 115, 121, 132, 133, 134, 137, 142, 145, 147, 149, 151, 154, 155, 157, 160, 164, 181, 182, 183, 186, 189, 190, 192, 193, 196, 202, 206, 220, 221, 222, 223, 226, 227, 231, 242, 245, 246, 247, 253, 267, 289, 299], "illustr": [1, 23, 37, 49, 52, 62, 128, 137, 138, 139, 152, 169, 177, 187, 189, 195, 215, 216, 220, 246, 259, 262, 270, 277, 280], "": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 59, 61, 63, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 163, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 202, 205, 206, 207, 208, 213, 215, 216, 218, 220, 222, 223, 225, 226, 227, 228, 229, 231, 233, 236, 238, 240, 242, 243, 244, 245, 246, 247, 251, 261, 262, 263, 264, 266, 267, 269, 270, 277, 278, 279, 280, 282, 283, 284, 285, 289, 290, 292, 297, 298, 299], "librari": [1, 3, 4, 5, 6, 7, 8, 10, 14, 16, 18, 22, 24, 26, 27, 29, 38, 42, 49, 56, 57, 63, 66, 93, 96, 113, 117, 118, 132, 136, 139, 143, 144, 151, 156, 169, 171, 172, 175, 176, 180, 186, 193, 196, 200, 208, 217, 235, 237, 238, 246, 251, 252, 259, 261, 284, 285, 292, 294], "featur": [1, 5, 7, 12, 13, 14, 16, 23, 26, 27, 38, 42, 46, 55, 56, 57, 58, 87, 88, 90, 95, 98, 100, 103, 105, 106, 112, 113, 117, 121, 132, 133, 138, 142, 150, 151, 157, 158, 159, 166, 169, 172, 175, 176, 180, 181, 187, 190, 192, 195, 196, 206, 207, 216, 217, 218, 221, 222, 226, 227, 229, 231, 236, 237, 238, 242, 247, 249, 251, 259, 262, 266, 267, 269, 277, 279, 280, 283, 284, 285, 289, 292, 295], "context": [1, 2, 6, 10, 16, 19, 20, 48, 55, 80, 95, 100, 112, 113, 120, 131, 132, 137, 142, 154, 167, 169, 176, 179, 180, 181, 182, 186, 190, 196, 204, 207, 217, 222, 226, 227, 231, 237, 242, 245, 263, 265, 269, 270, 271, 280, 293, 295, 298], "bash": [1, 22, 24, 159, 177, 259], "pip3": [1, 22, 56, 134, 150, 169, 176, 177, 186, 193, 205, 227], "instal": [1, 4, 6, 7, 10, 20, 24, 27, 28, 40, 56, 57, 59, 61, 63, 93, 99, 102, 113, 117, 133, 134, 137, 140, 141, 145, 146, 149, 150, 154, 156, 159, 164, 169, 172, 176, 177, 178, 182, 186, 189, 190, 195, 200, 204, 205, 206, 227, 229, 237, 251, 259, 262, 264, 266, 270, 279, 281, 282, 283, 285, 292, 297, 298], "mujoco": [1, 150, 176], "glfw": 1, "cuda": [1, 5, 7, 10, 12, 13, 14, 17, 20, 22, 23, 27, 28, 37, 42, 45, 48, 49, 50, 59, 60, 61, 68, 69, 78, 80, 88, 93, 103, 107, 113, 120, 121, 122, 128, 132, 133, 134, 135, 136, 137, 140, 143, 145, 146, 147, 149, 152, 160, 166, 167, 171, 172, 174, 177, 178, 179, 180, 181, 186, 189, 190, 193, 198, 200, 204, 205, 207, 217, 225, 231, 240, 241, 243, 244, 246, 249, 263, 264, 265, 270, 284, 290, 293, 294, 295, 299], "avail": [1, 2, 3, 4, 6, 7, 12, 14, 17, 20, 22, 23, 24, 25, 26, 27, 36, 37, 38, 41, 42, 43, 45, 48, 49, 54, 55, 56, 57, 58, 59, 68, 80, 93, 96, 98, 100, 103, 104, 105, 109, 113, 115, 121, 128, 134, 138, 140, 149, 150, 154, 159, 160, 169, 173, 174, 175, 176, 177, 180, 181, 182, 186, 189, 192, 193, 195, 200, 201, 202, 221, 222, 223, 225, 226, 227, 231, 236, 242, 244, 252, 259, 261, 262, 264, 265, 266, 280, 281, 282, 283, 285, 294, 296, 297], "seri": [1, 7, 17, 27, 58, 59, 60, 61, 62, 87, 97, 100, 103, 104, 131, 132, 136, 140, 141, 145, 146, 156, 164, 173, 176, 182, 196, 215, 251, 298], "easili": [1, 6, 14, 23, 28, 37, 50, 66, 80, 96, 103, 104, 105, 113, 120, 121, 122, 134, 137, 139, 140, 147, 149, 155, 156, 157, 163, 173, 176, 177, 180, 189, 190, 192, 195, 198, 202, 205, 221, 222, 233, 243, 244, 246, 253, 264, 282], "reusabl": [1, 7, 29], "swappabl": 1, "signatur": [1, 6, 10, 12, 16, 17, 27, 118, 149, 167, 179, 192], "main": [1, 3, 5, 6, 7, 13, 19, 23, 26, 27, 41, 58, 59, 61, 93, 105, 118, 121, 133, 134, 140, 145, 149, 151, 157, 169, 174, 177, 178, 179, 180, 184, 192, 193, 195, 196, 202, 205, 207, 223, 228, 236, 237, 243, 250, 252, 253, 259, 280, 297, 299], "characterist": [1, 16, 48, 142, 156, 158, 159, 175, 181, 192, 295], "thei": [1, 3, 5, 6, 7, 10, 12, 14, 16, 18, 19, 23, 24, 25, 27, 29, 37, 38, 45, 49, 54, 55, 58, 61, 80, 87, 90, 95, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 134, 138, 139, 140, 141, 144, 147, 149, 150, 157, 158, 160, 166, 167, 176, 177, 178, 180, 182, 189, 192, 193, 196, 197, 202, 206, 208, 213, 214, 215, 216, 218, 220, 223, 225, 228, 233, 234, 238, 244, 246, 252, 264, 267, 269, 270, 278, 279, 280, 282, 283], "copi": [1, 6, 7, 14, 22, 26, 27, 40, 45, 49, 50, 56, 61, 80, 87, 95, 99, 104, 105, 120, 122, 125, 132, 133, 138, 143, 147, 149, 150, 151, 152, 155, 156, 159, 167, 174, 179, 186, 189, 192, 198, 200, 201, 202, 203, 221, 225, 226, 237, 242, 243, 249, 250, 251, 269, 280], "loss_modul": 1, "whatev": [1, 10, 26, 27, 98, 103, 104, 107, 109, 113, 122, 220, 259], "need": [1, 3, 4, 5, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 41, 42, 43, 45, 46, 48, 49, 50, 52, 55, 56, 57, 59, 60, 61, 66, 68, 69, 72, 87, 88, 93, 96, 98, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 122, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 152, 154, 156, 157, 158, 159, 160, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 189, 190, 192, 193, 195, 197, 200, 202, 204, 205, 206, 213, 217, 218, 220, 223, 225, 226, 228, 229, 231, 233, 237, 242, 243, 244, 246, 247, 251, 252, 253, 259, 261, 263, 264, 266, 270, 277, 278, 279, 280, 281, 282, 283, 285, 289, 293, 294, 295, 297], "follow": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 38, 40, 41, 45, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 80, 87, 88, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 122, 125, 128, 132, 133, 134, 135, 137, 138, 139, 142, 145, 146, 147, 149, 150, 151, 155, 156, 157, 158, 159, 160, 164, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 206, 207, 214, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 236, 237, 244, 246, 247, 250, 251, 252, 259, 261, 262, 263, 266, 269, 270, 271, 277, 278, 285, 288, 289, 290, 292, 294, 295, 297, 298], "convent": [1, 16, 58, 113, 122, 150, 189, 196, 247, 264], "torch": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 37, 38, 39, 41, 42, 43, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 66, 68, 69, 72, 73, 78, 80, 90, 93, 95, 96, 98, 102, 103, 104, 105, 107, 110, 112, 115, 117, 118, 120, 121, 123, 128, 132, 133, 134, 135, 136, 137, 141, 144, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 189, 193, 195, 197, 198, 200, 201, 202, 203, 205, 206, 207, 213, 214, 216, 217, 218, 222, 226, 227, 228, 229, 231, 232, 233, 234, 237, 238, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 259, 261, 265, 266, 267, 268, 270, 271, 278, 279, 280, 281, 282, 283, 284, 287, 288, 289, 297, 299], "receiv": [1, 5, 7, 16, 19, 61, 93, 103, 109, 121, 149, 169, 171, 176, 178, 179, 180, 190, 193, 200, 263, 266, 280], "input": [1, 2, 4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 19, 24, 25, 26, 27, 29, 36, 37, 40, 41, 45, 48, 49, 50, 52, 54, 55, 62, 66, 68, 69, 70, 72, 73, 74, 77, 78, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 131, 133, 134, 137, 139, 140, 141, 142, 143, 145, 147, 149, 150, 151, 152, 154, 157, 158, 159, 160, 163, 166, 168, 171, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 195, 197, 198, 201, 202, 203, 205, 206, 216, 218, 221, 223, 225, 226, 227, 228, 231, 234, 236, 237, 238, 240, 242, 244, 251, 252, 253, 262, 263, 266, 267, 270, 271, 283, 289, 293, 295, 297, 298], "all": [1, 2, 3, 5, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 38, 41, 42, 45, 46, 48, 49, 50, 52, 55, 56, 57, 58, 59, 61, 62, 66, 73, 80, 87, 90, 95, 96, 98, 100, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 160, 163, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 192, 193, 195, 197, 198, 200, 201, 204, 205, 206, 213, 214, 216, 218, 221, 222, 223, 226, 228, 229, 231, 233, 236, 237, 242, 245, 249, 252, 253, 259, 261, 262, 264, 266, 267, 269, 277, 278, 279, 281, 282, 283, 284, 285, 289, 290, 292, 293, 295, 296, 297, 298, 299], "necessari": [1, 4, 5, 6, 7, 10, 12, 14, 17, 22, 23, 27, 28, 43, 49, 58, 59, 61, 90, 93, 103, 104, 106, 113, 122, 133, 134, 137, 143, 147, 159, 171, 178, 179, 180, 186, 192, 193, 197, 198, 202, 206, 215, 218, 220, 221, 223, 225, 226, 227, 229, 263, 280, 285, 293], "inform": [1, 2, 4, 5, 6, 8, 10, 12, 16, 18, 24, 26, 27, 29, 36, 50, 55, 59, 80, 87, 93, 95, 100, 102, 103, 105, 109, 110, 112, 122, 133, 138, 139, 140, 141, 147, 149, 150, 151, 154, 155, 156, 159, 174, 175, 176, 177, 179, 181, 182, 186, 187, 189, 190, 192, 193, 195, 197, 200, 202, 203, 204, 205, 216, 218, 221, 223, 233, 236, 237, 238, 244, 245, 246, 259, 261, 263, 264, 279, 280, 282, 283, 293, 296, 297, 298], "return": [1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 16, 17, 18, 19, 22, 23, 25, 27, 29, 37, 38, 42, 45, 49, 50, 52, 55, 57, 58, 73, 80, 87, 95, 96, 98, 103, 104, 105, 107, 109, 110, 113, 115, 118, 120, 121, 122, 133, 134, 135, 137, 141, 142, 144, 147, 149, 150, 151, 152, 154, 157, 159, 160, 163, 167, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 186, 187, 189, 190, 192, 193, 195, 197, 202, 203, 206, 207, 208, 213, 215, 217, 220, 221, 223, 225, 226, 227, 228, 229, 231, 236, 237, 240, 242, 243, 244, 246, 250, 251, 252, 253, 259, 262, 264, 266, 267, 270, 279, 290, 293, 295, 297], "replay_buff": 1, "sampl": [1, 4, 7, 10, 37, 38, 41, 42, 45, 49, 52, 54, 55, 57, 58, 61, 66, 93, 98, 100, 102, 103, 105, 107, 122, 128, 132, 133, 140, 143, 149, 151, 158, 159, 166, 167, 174, 176, 177, 178, 180, 183, 189, 192, 195, 196, 202, 206, 218, 223, 226, 227, 236, 240, 262, 270, 279, 280, 293], "loss_dict": 1, "instanc": [1, 5, 6, 7, 13, 14, 16, 25, 26, 27, 29, 37, 43, 50, 59, 60, 61, 66, 87, 93, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 114, 121, 133, 134, 138, 139, 142, 145, 146, 147, 150, 157, 159, 169, 171, 174, 176, 178, 179, 180, 190, 202, 203, 223, 226, 227, 228, 229, 233, 249, 251, 252, 259, 263, 267, 270, 278, 279, 280, 285, 295, 297, 298, 299], "written": [1, 4, 5, 6, 7, 10, 12, 16, 18, 26, 27, 29, 90, 102, 108, 113, 114, 144, 150, 156, 163, 167, 168, 171, 174, 181, 186, 189, 200, 204, 205, 213, 252, 278, 290, 292], "under": [1, 5, 6, 10, 22, 23, 27, 36, 52, 55, 56, 58, 60, 62, 66, 102, 105, 107, 120, 121, 135, 137, 138, 142, 149, 151, 158, 159, 167, 169, 173, 180, 186, 187, 195, 197, 204, 214, 216, 242, 244, 245, 247, 253, 259, 263, 289, 292], "loss_": 1, "smth": 1, "where": [1, 3, 4, 5, 7, 10, 13, 14, 15, 16, 19, 20, 22, 24, 25, 26, 27, 28, 36, 38, 52, 55, 57, 66, 69, 73, 88, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 121, 132, 134, 137, 139, 140, 141, 144, 146, 147, 149, 151, 152, 157, 160, 163, 166, 167, 168, 169, 171, 175, 176, 177, 178, 179, 180, 181, 182, 187, 190, 192, 193, 195, 196, 197, 198, 200, 202, 205, 213, 216, 217, 220, 228, 231, 243, 246, 247, 259, 261, 263, 264, 266, 277, 278, 279, 283, 284, 295, 298], "string": [1, 4, 10, 17, 26, 27, 55, 103, 115, 139, 140, 141, 150, 173, 176, 182, 189, 193, 200, 202, 259, 264, 279], "describ": [1, 5, 6, 7, 10, 12, 16, 17, 19, 23, 24, 25, 26, 27, 43, 45, 54, 55, 58, 66, 80, 98, 105, 115, 118, 125, 131, 149, 163, 171, 176, 177, 180, 186, 189, 192, 193, 222, 223, 225, 233, 246, 249, 264, 267, 298], "addit": [1, 2, 4, 6, 10, 13, 17, 20, 23, 56, 61, 80, 96, 98, 103, 105, 110, 113, 115, 120, 134, 137, 138, 140, 147, 149, 151, 152, 155, 157, 160, 173, 178, 179, 182, 187, 190, 192, 196, 206, 213, 214, 215, 216, 221, 222, 223, 227, 228, 229, 231, 237, 243, 247, 250, 251, 252, 264, 270, 280, 291, 292, 294, 295, 298], "kei": [1, 4, 7, 10, 13, 16, 17, 49, 55, 87, 108, 112, 115, 120, 122, 125, 134, 135, 136, 139, 150, 151, 159, 169, 175, 176, 178, 181, 182, 186, 187, 189, 192, 193, 196, 198, 204, 206, 218, 220, 229, 231, 240, 241, 249, 252, 267, 269, 278, 281, 291, 292], "mai": [1, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 23, 25, 26, 27, 29, 41, 55, 56, 58, 73, 80, 90, 95, 96, 98, 100, 103, 107, 114, 118, 121, 122, 133, 136, 137, 138, 139, 142, 143, 144, 149, 150, 151, 152, 154, 157, 158, 163, 166, 167, 169, 175, 176, 179, 182, 186, 189, 190, 192, 196, 197, 200, 201, 202, 206, 215, 218, 223, 225, 226, 227, 228, 231, 233, 238, 240, 244, 246, 250, 261, 264, 267, 270, 280, 283, 290, 292, 293, 295], "metric": [1, 20, 93, 102, 103, 105, 120, 134, 151, 186, 189, 195, 231, 253, 259, 264, 278], "log": [1, 22, 41, 55, 56, 58, 59, 102, 106, 107, 110, 112, 113, 133, 136, 139, 146, 151, 175, 176, 178, 180, 186, 187, 189, 192, 193, 206, 217, 220, 241, 245, 253, 284, 290, 296, 298], "dure": [1, 3, 10, 14, 16, 22, 23, 29, 36, 37, 41, 42, 43, 55, 58, 68, 69, 90, 95, 98, 100, 103, 104, 105, 107, 112, 113, 114, 121, 122, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 147, 150, 155, 156, 157, 163, 167, 174, 175, 176, 177, 178, 180, 186, 190, 192, 195, 200, 204, 206, 208, 217, 221, 222, 225, 233, 237, 244, 247, 252, 259, 261, 267, 270, 277, 278, 285], "reason": [1, 6, 7, 10, 16, 17, 18, 20, 27, 29, 36, 58, 87, 95, 98, 105, 107, 110, 113, 122, 128, 138, 143, 149, 157, 174, 176, 181, 182, 192, 193, 200, 205, 215, 231, 244, 264, 268, 269, 276, 284, 294], "independ": [1, 27, 55, 112, 113, 158, 159, 163, 179, 213, 229, 249], "let": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 37, 41, 48, 49, 50, 52, 55, 57, 58, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 128, 135, 137, 139, 144, 147, 149, 150, 151, 152, 155, 156, 157, 158, 160, 163, 166, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 198, 205, 208, 213, 214, 218, 228, 231, 240, 244, 246, 251, 262, 264, 266, 269, 270, 277, 278, 279, 280, 283, 285, 294, 295, 297], "user": [1, 3, 6, 16, 20, 22, 23, 26, 28, 29, 46, 49, 55, 56, 87, 88, 90, 96, 105, 109, 118, 125, 134, 135, 136, 137, 140, 141, 147, 151, 155, 157, 160, 166, 169, 178, 180, 181, 182, 186, 189, 192, 193, 195, 196, 197, 198, 202, 206, 213, 214, 215, 216, 220, 222, 223, 225, 226, 227, 228, 229, 231, 238, 242, 243, 244, 245, 246, 247, 252, 253, 259, 261, 270, 284, 285, 287, 289, 290, 291, 298], "differ": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 28, 36, 41, 45, 52, 54, 55, 57, 58, 66, 78, 80, 87, 88, 90, 93, 96, 98, 100, 103, 104, 105, 106, 107, 112, 113, 115, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 149, 151, 152, 156, 157, 158, 160, 163, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 196, 197, 200, 202, 205, 207, 213, 214, 215, 216, 217, 218, 220, 223, 225, 226, 228, 231, 233, 237, 243, 244, 245, 246, 247, 249, 250, 251, 259, 261, 264, 267, 268, 270, 276, 278, 279, 280, 284, 285, 290, 293, 295, 298, 299], "set": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 36, 41, 43, 48, 49, 52, 54, 55, 56, 58, 59, 61, 66, 68, 69, 73, 80, 87, 88, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 117, 121, 122, 128, 132, 133, 134, 135, 137, 140, 141, 142, 145, 146, 147, 149, 150, 157, 159, 166, 167, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 190, 192, 193, 195, 196, 201, 213, 215, 217, 218, 221, 225, 226, 227, 229, 231, 237, 238, 243, 244, 246, 251, 252, 253, 259, 261, 264, 265, 269, 277, 279, 281, 283, 290, 296, 298], "sum": [1, 2, 4, 5, 6, 8, 13, 16, 18, 22, 23, 25, 37, 48, 49, 55, 58, 73, 87, 95, 96, 98, 106, 107, 109, 120, 121, 133, 134, 135, 141, 142, 144, 149, 158, 166, 174, 177, 178, 179, 180, 186, 190, 192, 193, 202, 214, 223, 225, 240, 242, 243, 244, 253, 264, 283, 299], "can": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 66, 73, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 208, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "simpli": [1, 3, 5, 6, 7, 10, 11, 15, 23, 25, 27, 48, 49, 55, 59, 90, 98, 109, 112, 121, 122, 136, 137, 139, 141, 144, 149, 157, 158, 166, 172, 173, 176, 177, 178, 179, 182, 184, 186, 187, 190, 192, 193, 196, 197, 198, 200, 214, 229, 233, 236, 244, 250, 252, 261, 264, 267, 279, 281, 282, 283], "done": [1, 4, 5, 6, 7, 10, 12, 16, 19, 20, 23, 24, 25, 26, 27, 29, 55, 60, 87, 90, 100, 103, 105, 106, 107, 113, 115, 133, 134, 137, 138, 141, 143, 150, 152, 156, 157, 159, 160, 169, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 187, 189, 192, 193, 200, 205, 206, 231, 233, 247, 252, 267, 269, 280, 294, 297], "via": [1, 3, 4, 6, 7, 8, 19, 20, 22, 24, 26, 27, 43, 60, 61, 80, 90, 105, 132, 133, 134, 137, 139, 149, 150, 158, 167, 175, 176, 181, 187, 189, 190, 192, 193, 195, 196, 204, 208, 217, 221, 231, 242, 246, 247, 251, 252, 253, 259, 269, 277, 278, 280, 284, 289, 292], "loss_val": 1, "item": [1, 2, 7, 12, 13, 17, 38, 45, 49, 55, 73, 98, 120, 121, 122, 125, 133, 134, 135, 140, 141, 149, 150, 151, 174, 175, 176, 178, 179, 180, 187, 189, 192, 197, 204, 250, 253, 263, 280], "startswith": [1, 88], "parent": [1, 4, 16, 98, 203, 206, 246], "As": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 14, 16, 19, 23, 24, 25, 26, 27, 29, 43, 48, 55, 56, 58, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 115, 121, 122, 133, 134, 135, 136, 137, 138, 139, 147, 149, 150, 151, 154, 155, 156, 157, 158, 159, 166, 167, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 186, 189, 192, 193, 195, 196, 197, 202, 205, 206, 216, 218, 220, 223, 228, 229, 238, 242, 245, 251, 253, 259, 264, 267, 269, 280, 285, 292, 297, 298, 299], "mani": [1, 2, 5, 6, 7, 12, 16, 17, 18, 20, 22, 27, 29, 36, 37, 41, 42, 55, 57, 58, 70, 74, 80, 87, 95, 96, 98, 100, 103, 105, 107, 108, 109, 113, 115, 117, 121, 134, 137, 139, 143, 149, 151, 152, 158, 160, 163, 168, 169, 174, 176, 178, 179, 182, 190, 192, 193, 196, 215, 231, 236, 252, 253, 262, 263, 264, 266, 280, 285, 292, 298], "other": [1, 6, 7, 10, 12, 13, 16, 20, 23, 25, 26, 27, 29, 36, 37, 40, 45, 49, 52, 54, 55, 58, 59, 61, 62, 63, 73, 74, 80, 87, 88, 93, 95, 96, 98, 103, 105, 107, 109, 110, 112, 113, 121, 122, 125, 133, 135, 136, 137, 140, 141, 143, 145, 146, 147, 149, 150, 151, 154, 155, 156, 157, 158, 159, 163, 166, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 187, 190, 192, 193, 195, 196, 197, 200, 202, 203, 205, 206, 213, 214, 215, 216, 218, 223, 225, 226, 228, 231, 233, 244, 246, 250, 261, 263, 264, 266, 267, 269, 270, 277, 278, 279, 280, 281, 282, 283, 285, 289, 290, 291, 292, 293, 297, 299], "expect": [1, 4, 5, 6, 7, 12, 13, 16, 24, 26, 27, 50, 52, 55, 57, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 114, 122, 128, 136, 139, 143, 147, 150, 158, 159, 166, 167, 173, 175, 176, 177, 178, 179, 181, 189, 192, 193, 195, 197, 200, 202, 220, 221, 223, 226, 227, 228, 245, 252, 259, 262, 263, 264, 267, 270, 277, 280, 293, 295, 299], "ani": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 36, 46, 48, 50, 52, 55, 57, 59, 61, 95, 98, 100, 103, 105, 106, 108, 109, 112, 113, 115, 117, 122, 131, 133, 135, 137, 138, 140, 142, 144, 145, 149, 151, 152, 154, 155, 156, 159, 160, 166, 167, 168, 169, 171, 175, 176, 177, 179, 180, 184, 186, 189, 192, 193, 203, 204, 206, 207, 213, 214, 215, 216, 217, 220, 221, 225, 227, 231, 233, 238, 240, 241, 243, 244, 246, 247, 249, 250, 259, 261, 263, 266, 269, 271, 277, 279, 283, 289, 290, 292, 293, 294, 296, 298], "similar": [1, 3, 4, 6, 10, 12, 13, 16, 17, 23, 26, 27, 45, 54, 55, 87, 88, 96, 98, 100, 103, 105, 106, 112, 113, 118, 121, 137, 140, 144, 149, 150, 167, 176, 178, 179, 180, 181, 182, 186, 187, 189, 192, 195, 197, 202, 204, 206, 213, 214, 215, 216, 217, 218, 225, 226, 250, 251, 263, 264, 267, 279, 280, 289, 295, 299], "structur": [1, 5, 6, 7, 10, 11, 16, 21, 22, 23, 24, 25, 26, 27, 37, 42, 43, 45, 54, 55, 58, 59, 90, 95, 98, 100, 104, 105, 106, 110, 115, 122, 132, 142, 145, 152, 156, 159, 160, 167, 168, 173, 176, 180, 187, 189, 190, 195, 216, 222, 223, 236, 267, 278, 292, 294], "format": [1, 6, 14, 20, 23, 24, 27, 29, 46, 113, 117, 122, 132, 133, 134, 136, 149, 151, 156, 157, 174, 175, 178, 180, 183, 186, 187, 189, 193, 195, 202, 206, 213, 215, 216, 223, 225, 228, 231, 238, 247, 252, 253, 261, 262, 264, 284, 297], "make": [1, 4, 5, 6, 7, 10, 12, 14, 16, 22, 23, 26, 27, 37, 41, 42, 46, 48, 49, 50, 55, 56, 57, 59, 60, 61, 63, 73, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 111, 112, 113, 114, 117, 118, 122, 125, 128, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 147, 149, 150, 151, 155, 156, 157, 158, 159, 166, 167, 169, 172, 173, 174, 176, 177, 178, 179, 180, 182, 187, 189, 190, 192, 193, 195, 196, 198, 200, 202, 205, 206, 213, 214, 215, 216, 218, 220, 223, 228, 236, 242, 244, 245, 246, 247, 250, 251, 252, 261, 262, 263, 264, 267, 269, 271, 278, 279, 280, 284, 289, 290, 292, 295, 297], "possibl": [1, 2, 4, 5, 6, 7, 8, 10, 12, 16, 17, 20, 26, 27, 95, 96, 100, 103, 106, 109, 117, 135, 138, 142, 143, 144, 150, 152, 154, 156, 158, 159, 169, 174, 175, 176, 178, 179, 182, 190, 192, 193, 195, 196, 200, 202, 206, 218, 223, 225, 226, 228, 231, 233, 238, 247, 249, 252, 253, 263, 267, 269, 280, 292, 298], "re": [1, 4, 5, 6, 7, 8, 11, 12, 16, 19, 23, 25, 26, 27, 28, 40, 42, 45, 49, 54, 55, 56, 96, 98, 100, 102, 103, 104, 105, 106, 113, 121, 128, 138, 140, 141, 150, 152, 154, 158, 163, 166, 168, 169, 175, 176, 177, 178, 179, 182, 192, 193, 195, 202, 204, 205, 213, 223, 225, 233, 236, 244, 246, 263, 264, 267, 269, 279, 280], "across": [1, 4, 6, 10, 13, 16, 19, 22, 24, 28, 45, 55, 58, 60, 61, 62, 87, 96, 103, 105, 115, 131, 133, 134, 135, 137, 145, 146, 147, 149, 152, 159, 169, 171, 173, 177, 179, 180, 192, 193, 198, 241, 244, 246, 249, 262, 278, 280, 281, 283, 284, 289, 293, 295, 298, 299], "modal": [1, 169, 262], "complex": [1, 7, 27, 29, 37, 38, 56, 72, 73, 95, 96, 100, 105, 115, 121, 122, 131, 133, 147, 163, 167, 169, 178, 180, 187, 190, 192, 193, 200, 218, 234, 245, 246, 267, 271, 281, 292], "read": [1, 2, 6, 7, 8, 11, 16, 23, 26, 27, 42, 52, 55, 57, 80, 98, 109, 110, 113, 122, 128, 131, 134, 135, 136, 138, 139, 140, 141, 142, 149, 151, 155, 157, 166, 169, 175, 176, 177, 179, 182, 184, 187, 190, 196, 204, 206, 220, 263, 264, 295, 298], "multipl": [1, 4, 6, 10, 12, 13, 16, 18, 19, 20, 22, 23, 24, 27, 45, 50, 54, 55, 59, 60, 61, 62, 66, 70, 87, 93, 95, 96, 98, 100, 103, 104, 105, 109, 113, 121, 131, 133, 135, 137, 138, 139, 140, 141, 147, 149, 152, 157, 159, 169, 171, 175, 176, 178, 179, 180, 182, 186, 187, 189, 190, 192, 193, 196, 198, 200, 202, 205, 217, 218, 226, 228, 231, 238, 244, 251, 263, 264, 270, 279, 280, 281, 284, 294, 298], "entri": [1, 5, 13, 16, 27, 59, 109, 112, 120, 122, 145, 150, 157, 173, 176, 178, 186, 192, 200, 215, 216, 218, 220, 229, 242, 282, 289], "In": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 42, 43, 45, 48, 50, 54, 55, 56, 57, 58, 59, 61, 62, 63, 69, 73, 80, 87, 88, 90, 92, 93, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 234, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 259, 262, 263, 264, 266, 267, 269, 270, 277, 278, 279, 280, 281, 282, 283, 284, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "word": [1, 7, 12, 13, 16, 21, 49, 55, 80, 87, 96, 100, 105, 106, 108, 110, 111, 122, 132, 140, 141, 149, 151, 164, 166, 167, 173, 180, 182, 193, 201, 214, 216, 218, 220, 226, 267, 295], "allow": [1, 2, 5, 6, 7, 10, 12, 13, 14, 16, 23, 26, 27, 28, 29, 36, 37, 38, 48, 55, 56, 57, 58, 59, 87, 88, 90, 93, 95, 96, 98, 100, 103, 105, 107, 109, 110, 112, 113, 114, 115, 121, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 147, 149, 150, 151, 155, 159, 160, 163, 166, 167, 169, 172, 173, 174, 176, 177, 178, 180, 181, 182, 184, 189, 190, 192, 193, 195, 196, 198, 200, 206, 207, 213, 214, 218, 220, 221, 223, 225, 226, 228, 237, 242, 246, 247, 249, 259, 261, 263, 264, 267, 270, 277, 278, 279, 289, 298], "u": [1, 4, 6, 7, 10, 11, 12, 13, 16, 18, 20, 23, 24, 27, 29, 36, 38, 49, 52, 55, 57, 58, 74, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 112, 113, 118, 121, 134, 137, 140, 143, 145, 149, 150, 152, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 171, 174, 175, 176, 177, 179, 182, 187, 189, 190, 192, 193, 196, 205, 213, 214, 216, 218, 221, 231, 236, 240, 247, 262, 264, 266, 267, 269, 277, 279, 293], "oblivi": [1, 176], "type": [1, 4, 5, 6, 7, 10, 12, 16, 22, 23, 24, 25, 26, 27, 45, 54, 55, 56, 80, 87, 90, 96, 98, 99, 102, 104, 109, 113, 115, 118, 131, 133, 134, 137, 139, 151, 152, 157, 168, 169, 172, 173, 176, 178, 179, 180, 181, 186, 189, 190, 192, 196, 197, 206, 213, 217, 221, 223, 226, 227, 228, 233, 238, 242, 243, 244, 247, 252, 253, 259, 261, 262, 277, 278, 280, 281, 288, 291, 298], "being": [1, 3, 4, 5, 6, 7, 12, 14, 16, 20, 24, 25, 27, 52, 55, 58, 87, 96, 104, 105, 106, 107, 109, 113, 115, 128, 134, 137, 139, 143, 149, 150, 167, 169, 171, 173, 176, 177, 179, 190, 192, 193, 206, 214, 215, 218, 220, 226, 227, 231, 233, 243, 252, 264, 269, 280, 294, 298], "run": [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 36, 37, 38, 41, 42, 43, 45, 46, 48, 49, 52, 54, 57, 58, 62, 63, 66, 68, 69, 70, 72, 73, 74, 77, 78, 87, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 187, 190, 193, 195, 196, 200, 201, 202, 203, 204, 205, 207, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 234, 236, 237, 238, 243, 244, 245, 246, 247, 250, 251, 252, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 277, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 292, 293, 294, 295, 296, 298], "elementari": [1, 2], "onli": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 22, 23, 24, 26, 27, 36, 43, 48, 49, 50, 52, 55, 59, 61, 62, 80, 87, 93, 95, 98, 100, 103, 105, 106, 107, 112, 113, 120, 122, 125, 128, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 160, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 179, 180, 181, 182, 186, 187, 189, 190, 192, 193, 195, 196, 197, 202, 204, 205, 206, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 226, 227, 228, 229, 233, 236, 237, 240, 241, 242, 246, 247, 249, 250, 259, 261, 263, 264, 270, 277, 280, 281, 282, 285, 289, 292, 293, 295, 298, 299], "those": [1, 4, 5, 6, 7, 8, 12, 13, 16, 20, 36, 43, 48, 93, 95, 103, 106, 112, 113, 118, 136, 137, 138, 140, 152, 156, 166, 171, 172, 173, 180, 182, 187, 189, 192, 193, 202, 205, 214, 231, 233, 236, 237, 238, 244, 253, 259, 263, 264, 279, 289, 292, 294, 298], "keep": [1, 4, 7, 12, 13, 16, 27, 36, 45, 48, 55, 58, 80, 87, 90, 98, 100, 103, 105, 107, 109, 110, 113, 121, 122, 132, 133, 134, 135, 136, 137, 138, 141, 146, 147, 150, 157, 163, 169, 174, 180, 182, 192, 193, 196, 201, 202, 223, 250, 264, 280, 299], "didact": [1, 149], "ll": [1, 4, 5, 6, 7, 10, 11, 12, 18, 20, 23, 24, 26, 27, 37, 38, 40, 45, 54, 55, 56, 82, 83, 84, 85, 93, 95, 96, 98, 100, 102, 103, 104, 106, 113, 115, 135, 140, 141, 147, 149, 150, 152, 154, 158, 163, 166, 168, 175, 176, 177, 179, 182, 187, 192, 193, 196, 201, 202, 203, 205, 206, 213, 215, 217, 220, 223, 225, 228, 231, 240, 241, 249, 264, 291, 296], "displai": [1, 2, 6, 7, 14, 38, 49, 96, 102, 104, 120, 128, 143, 174, 182, 186, 242, 245, 263, 264, 278], "each": [1, 2, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 45, 48, 49, 50, 54, 55, 57, 58, 59, 61, 62, 66, 70, 73, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 117, 120, 121, 122, 128, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 152, 154, 156, 158, 159, 160, 163, 166, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 192, 193, 195, 196, 198, 200, 204, 206, 207, 213, 216, 218, 220, 223, 225, 228, 231, 241, 242, 245, 246, 247, 252, 253, 259, 262, 263, 264, 266, 267, 269, 270, 271, 277, 278, 279, 280, 282, 283, 295, 296, 298, 299], "popul": [1, 26, 36, 48, 55, 93, 103, 134, 150, 159, 176, 178, 200, 241, 247, 249, 279, 290], "later": [1, 3, 4, 5, 6, 7, 13, 18, 27, 36, 45, 52, 55, 80, 93, 96, 100, 105, 109, 110, 113, 122, 133, 134, 136, 137, 141, 142, 144, 149, 152, 154, 155, 156, 157, 158, 159, 163, 168, 171, 176, 177, 180, 181, 182, 187, 189, 192, 193, 196, 198, 200, 202, 204, 208, 213, 223, 225, 227, 229, 240, 241, 243, 245, 249, 259, 261, 263, 264, 265, 269, 277, 280, 285, 289, 290, 291, 292, 294, 295, 296], "stage": [1, 16, 19, 100, 113, 171, 207, 217, 237, 242, 243, 249], "start": [1, 5, 6, 7, 11, 13, 19, 20, 22, 23, 27, 28, 29, 36, 40, 48, 49, 55, 56, 58, 59, 60, 61, 66, 80, 93, 95, 96, 99, 100, 103, 104, 105, 108, 109, 113, 114, 115, 118, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 149, 151, 157, 158, 159, 166, 167, 169, 174, 175, 177, 178, 179, 182, 186, 187, 189, 190, 192, 193, 195, 198, 200, 202, 205, 206, 208, 215, 220, 221, 223, 225, 226, 227, 228, 231, 232, 242, 243, 247, 251, 259, 264, 267, 268, 270, 276, 278, 280, 283, 284, 287, 289, 290, 292, 299], "solv": [1, 7, 16, 55, 57, 105, 112, 128, 167, 174, 176, 178, 180, 215, 264, 269, 280], "task": [1, 7, 15, 16, 20, 25, 28, 41, 42, 55, 104, 105, 106, 112, 120, 128, 131, 132, 133, 140, 150, 151, 167, 169, 174, 176, 177, 182, 184, 189, 195, 206, 231, 264, 270, 279, 280, 289, 295, 298], "strategi": [1, 6, 20, 22, 28, 58, 87, 132, 141, 149, 157, 158, 168, 169, 178, 179, 231, 238, 243, 245, 246, 247, 253], "predict": [1, 11, 23, 24, 37, 40, 41, 42, 43, 48, 49, 55, 58, 68, 69, 72, 73, 74, 77, 78, 95, 96, 98, 100, 104, 105, 106, 110, 112, 113, 121, 132, 137, 139, 140, 141, 151, 152, 158, 159, 169, 177, 182, 187, 193, 195, 201, 202, 223, 225, 231, 251, 262, 266, 284, 295, 297], "henc": [1, 16, 20, 45, 48, 54, 87, 133, 138, 147, 160, 163, 169, 172, 176, 178, 180, 193, 231, 251, 252, 264, 295], "our": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 19, 20, 23, 24, 25, 26, 27, 29, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 66, 68, 69, 70, 72, 73, 74, 80, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 118, 120, 121, 128, 132, 133, 134, 136, 139, 140, 141, 142, 144, 145, 146, 150, 151, 154, 156, 157, 158, 159, 160, 163, 167, 168, 169, 171, 173, 174, 176, 177, 178, 179, 181, 182, 184, 187, 189, 190, 192, 193, 195, 196, 197, 198, 202, 205, 208, 213, 214, 215, 216, 220, 223, 225, 229, 231, 234, 236, 241, 243, 244, 247, 249, 251, 262, 264, 267, 279, 284, 285, 290, 291, 299], "two": [1, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 36, 38, 41, 42, 45, 46, 48, 54, 55, 56, 58, 63, 80, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 120, 121, 128, 133, 134, 139, 140, 142, 143, 144, 146, 147, 149, 150, 154, 156, 157, 158, 159, 160, 163, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 180, 181, 182, 189, 193, 195, 196, 197, 198, 200, 203, 205, 207, 214, 216, 218, 220, 221, 223, 225, 226, 228, 231, 233, 234, 238, 242, 246, 247, 249, 251, 253, 259, 262, 264, 266, 267, 269, 270, 277, 279, 280, 281, 284, 290, 292, 294, 297, 298, 299], "constructor": [1, 7, 12, 13, 14, 25, 26, 27, 29, 72, 74, 90, 100, 104, 121, 133, 134, 147, 169, 172, 173, 176, 178, 180, 216, 233, 263, 264], "both": [1, 2, 5, 6, 7, 10, 12, 13, 14, 16, 19, 23, 24, 25, 26, 27, 28, 29, 38, 55, 57, 58, 66, 80, 87, 90, 96, 103, 104, 105, 112, 113, 120, 121, 134, 135, 137, 139, 143, 146, 147, 149, 154, 155, 157, 158, 160, 163, 169, 173, 174, 176, 178, 179, 180, 181, 182, 192, 193, 195, 196, 197, 202, 205, 206, 207, 213, 216, 217, 220, 223, 226, 227, 228, 242, 243, 244, 246, 251, 252, 253, 259, 261, 262, 263, 264, 277, 279, 289, 290, 295, 297, 298], "compat": [1, 5, 6, 7, 10, 13, 20, 56, 102, 103, 109, 114, 136, 142, 150, 160, 181, 190, 192, 193, 202, 229, 233, 247, 294, 295, 297], "comput": [1, 3, 4, 6, 7, 10, 13, 14, 15, 18, 19, 20, 23, 24, 25, 27, 28, 29, 41, 45, 49, 52, 54, 55, 57, 58, 59, 63, 66, 68, 69, 70, 73, 77, 78, 80, 88, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 113, 115, 117, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 157, 159, 166, 167, 168, 169, 171, 173, 175, 176, 177, 179, 181, 182, 186, 189, 190, 192, 193, 195, 196, 198, 200, 202, 205, 217, 218, 220, 222, 223, 225, 226, 227, 231, 233, 236, 237, 238, 240, 241, 247, 249, 251, 259, 261, 263, 264, 266, 267, 269, 271, 279, 292, 295, 297, 298], "fit": [1, 7, 12, 13, 24, 66, 93, 112, 121, 133, 134, 135, 137, 147, 169, 180, 193, 263, 298], "gener": [1, 5, 6, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 59, 68, 69, 70, 72, 73, 74, 77, 78, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 123, 125, 128, 132, 137, 138, 140, 142, 143, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 173, 174, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 189, 190, 192, 193, 195, 196, 200, 201, 204, 205, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 225, 226, 227, 228, 231, 234, 236, 238, 241, 243, 244, 249, 251, 252, 253, 259, 261, 262, 263, 265, 266, 267, 269, 270, 271, 277, 278, 279, 281, 282, 283, 284, 285, 290, 291, 292, 293, 294, 295, 296, 298], "crucial": [1, 2, 14, 16, 27, 87, 109, 150, 169, 176, 193], "convert_to_funct": 1, "extract": [1, 6, 24, 55, 58, 80, 102, 105, 128, 132, 140, 141, 151, 154, 157, 168, 174, 176, 182, 190, 192, 195, 242, 247, 249, 266], "convert": [1, 6, 11, 12, 14, 23, 24, 26, 27, 37, 38, 45, 46, 49, 55, 57, 58, 61, 98, 100, 103, 105, 113, 115, 117, 122, 132, 135, 140, 141, 151, 174, 175, 176, 178, 179, 187, 193, 201, 203, 205, 206, 213, 214, 216, 217, 218, 221, 222, 226, 227, 228, 244, 247, 250, 252, 261, 262, 267, 277, 280, 284], "strictli": [1, 103, 176], "speak": [1, 10, 48, 103, 138, 149, 280], "one": [1, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 20, 22, 23, 25, 26, 27, 29, 36, 38, 40, 45, 46, 50, 52, 54, 55, 57, 58, 61, 62, 66, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 109, 110, 112, 113, 118, 121, 122, 125, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 166, 167, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 192, 193, 195, 197, 200, 203, 204, 205, 213, 214, 215, 217, 218, 220, 225, 228, 231, 236, 243, 244, 245, 246, 247, 261, 264, 266, 267, 269, 270, 280, 281, 283, 284, 292, 293, 294, 295, 298, 299], "perfectli": [1, 16], "howev": [1, 4, 6, 7, 8, 10, 12, 14, 16, 17, 18, 20, 24, 26, 27, 29, 36, 43, 50, 52, 55, 57, 58, 80, 90, 93, 105, 106, 121, 128, 137, 138, 142, 143, 144, 149, 150, 152, 156, 160, 166, 169, 172, 173, 174, 177, 178, 179, 180, 181, 182, 187, 189, 190, 192, 193, 197, 203, 207, 208, 214, 215, 218, 225, 228, 231, 236, 238, 244, 245, 249, 251, 264, 267, 269, 277, 279, 280, 285, 292, 295, 298], "encourag": [1, 7, 23, 100, 177, 182, 189], "usag": [1, 3, 4, 5, 13, 15, 17, 25, 27, 87, 95, 120, 132, 133, 135, 138, 149, 150, 157, 158, 171, 176, 178, 180, 181, 183, 186, 196, 198, 205, 206, 208, 217, 218, 220, 226, 227, 238, 243, 252, 259, 263, 278, 280, 284, 293, 297, 298], "doe": [1, 2, 4, 6, 7, 10, 15, 16, 17, 18, 23, 26, 27, 29, 36, 46, 48, 52, 77, 78, 80, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 112, 113, 115, 118, 121, 122, 128, 133, 134, 135, 136, 142, 144, 147, 149, 150, 155, 158, 159, 160, 166, 167, 169, 171, 175, 176, 177, 179, 180, 181, 182, 186, 187, 190, 192, 193, 195, 196, 200, 202, 203, 204, 205, 214, 215, 216, 223, 226, 227, 233, 236, 243, 247, 259, 261, 263, 264, 267, 269, 277, 279, 280, 292, 294, 298], "often": [1, 5, 6, 7, 12, 16, 20, 45, 55, 80, 93, 95, 96, 98, 103, 105, 107, 109, 112, 113, 121, 122, 137, 138, 139, 141, 159, 167, 192, 193, 200, 218, 231, 234, 240, 243, 247, 263, 279, 280], "same": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 20, 23, 24, 25, 26, 27, 29, 36, 37, 43, 45, 48, 49, 55, 57, 58, 59, 61, 70, 78, 80, 90, 93, 95, 98, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 133, 134, 135, 136, 137, 138, 140, 142, 143, 146, 147, 149, 151, 152, 154, 157, 158, 159, 160, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 196, 197, 198, 201, 202, 204, 206, 207, 213, 214, 215, 216, 218, 225, 226, 227, 228, 231, 243, 244, 250, 259, 261, 263, 264, 267, 270, 272, 273, 274, 275, 277, 280, 283, 289, 290, 293, 294, 297, 298, 299], "usual": [1, 6, 7, 10, 18, 23, 27, 48, 96, 98, 100, 102, 103, 107, 108, 110, 112, 113, 128, 137, 138, 141, 143, 144, 147, 149, 150, 157, 160, 166, 169, 173, 174, 176, 192, 196, 220, 236, 263, 269, 270, 280, 298], "former": [1, 6, 140, 141, 182], "some": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 23, 24, 26, 27, 29, 36, 37, 38, 41, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 68, 73, 80, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 118, 120, 121, 122, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 152, 154, 155, 156, 157, 158, 163, 166, 168, 169, 171, 173, 174, 176, 177, 179, 180, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 198, 200, 202, 203, 205, 213, 214, 215, 216, 218, 221, 223, 225, 226, 227, 228, 229, 231, 233, 234, 236, 244, 247, 252, 253, 263, 264, 266, 267, 269, 270, 271, 279, 280, 281, 285, 292, 293, 295, 298], "lag": [1, 176], "absolut": [1, 7, 12, 87, 98, 107, 173, 177, 279], "dilut": 1, "move": [1, 5, 6, 8, 14, 27, 30, 31, 32, 33, 34, 35, 37, 42, 45, 48, 52, 54, 81, 94, 95, 107, 113, 133, 134, 135, 137, 146, 147, 150, 153, 166, 167, 169, 172, 174, 177, 179, 180, 185, 186, 188, 191, 195, 203, 209, 212, 214, 224, 225, 226, 230, 237, 242, 243, 244, 251, 264, 267, 279, 280], "averag": [1, 3, 23, 55, 58, 66, 87, 93, 96, 98, 104, 105, 113, 133, 136, 141, 149, 151, 168, 177, 180, 182, 186, 202, 223, 225, 264, 280], "These": [1, 6, 10, 13, 14, 16, 20, 23, 24, 25, 29, 43, 48, 55, 58, 61, 66, 87, 93, 100, 108, 110, 112, 113, 120, 128, 149, 159, 174, 176, 179, 181, 182, 189, 192, 193, 196, 202, 205, 221, 223, 225, 228, 231, 251, 264, 279, 280, 289, 290, 292], "associ": [1, 4, 6, 7, 10, 12, 37, 38, 56, 87, 96, 144, 154, 169, 173, 181, 189, 193, 204, 214, 231, 233, 266, 277, 280, 294], "One": [1, 2, 4, 5, 6, 7, 12, 13, 17, 25, 27, 55, 57, 80, 87, 95, 100, 103, 105, 106, 107, 109, 133, 134, 135, 136, 137, 138, 141, 147, 149, 151, 152, 155, 166, 167, 169, 184, 187, 190, 192, 193, 195, 196, 200, 215, 220, 228, 236, 243, 244, 253, 264, 271, 277, 279, 280, 295], "advantag": [1, 3, 7, 16, 20, 27, 55, 90, 103, 106, 113, 131, 134, 135, 138, 149, 150, 167, 169, 176, 190, 196, 202, 206, 216, 231, 243, 244, 252, 259, 267, 280, 290, 294], "match": [1, 5, 6, 12, 16, 20, 23, 24, 26, 49, 73, 98, 103, 105, 113, 115, 118, 121, 122, 151, 152, 155, 157, 160, 166, 168, 176, 179, 190, 192, 202, 206, 214, 216, 220, 223, 231, 251, 252, 263, 266, 271, 281, 298], "exactli": [1, 6, 10, 12, 14, 20, 29, 36, 48, 57, 58, 98, 109, 112, 113, 115, 121, 150, 157, 167, 192, 193, 206, 231], "current": [1, 4, 6, 7, 10, 12, 13, 14, 16, 17, 23, 26, 27, 37, 42, 45, 55, 58, 68, 80, 87, 96, 105, 113, 117, 121, 128, 133, 134, 136, 138, 139, 140, 141, 149, 150, 154, 159, 160, 168, 169, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 192, 193, 196, 197, 200, 202, 206, 213, 215, 216, 218, 220, 223, 225, 227, 244, 247, 250, 251, 261, 270, 280, 289, 292], "configur": [1, 5, 6, 7, 16, 22, 23, 24, 26, 27, 28, 55, 56, 87, 96, 104, 134, 137, 145, 147, 155, 157, 166, 174, 176, 179, 186, 189, 193, 203, 205, 208, 217, 226, 227, 228, 242, 251, 252, 253, 284, 285, 290, 292, 295, 298], "pessimist": [1, 176], "bound": [1, 27, 55, 122, 135, 139, 157, 176, 177, 186, 192, 193, 195, 196, 205, 263, 264, 270, 280, 298], "pai": [1, 12, 50, 55, 136, 280, 293], "attent": [1, 12, 50, 55, 100, 132, 136, 137, 140, 141, 164, 183, 184, 198, 205, 206, 218, 222, 292], "create_target_param": 1, "keyword": [1, 6, 173, 176, 189, 269, 277], "argument": [1, 2, 4, 5, 6, 7, 10, 16, 18, 25, 26, 27, 36, 42, 45, 48, 49, 54, 57, 61, 74, 87, 95, 96, 100, 102, 103, 105, 107, 110, 112, 114, 120, 121, 122, 133, 134, 141, 146, 147, 149, 150, 152, 157, 158, 168, 169, 171, 172, 173, 176, 178, 179, 180, 181, 186, 189, 190, 192, 193, 197, 198, 200, 215, 217, 226, 236, 237, 242, 245, 249, 263, 264, 269, 270, 277, 278, 280, 281, 292, 298], "below": [1, 2, 4, 5, 7, 12, 13, 14, 16, 19, 22, 23, 24, 27, 28, 38, 43, 45, 48, 50, 54, 57, 58, 59, 60, 61, 62, 63, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 135, 136, 137, 139, 142, 143, 145, 146, 147, 149, 150, 151, 154, 157, 160, 166, 172, 174, 176, 177, 178, 179, 180, 181, 186, 187, 189, 190, 192, 193, 195, 196, 200, 205, 206, 207, 208, 214, 215, 216, 217, 218, 220, 221, 229, 233, 234, 241, 242, 243, 244, 245, 247, 249, 250, 251, 253, 259, 261, 263, 264, 267, 269, 270, 280, 285, 288, 289, 292, 293, 294, 295, 298, 299], "tell": [1, 18, 22, 27, 74, 93, 95, 98, 100, 104, 112, 113, 121, 139, 140, 150, 152, 154, 166, 177, 178, 180, 182, 192, 264, 270], "creat": [1, 2, 5, 6, 7, 11, 12, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 40, 43, 45, 46, 48, 49, 52, 54, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 90, 95, 96, 98, 100, 102, 104, 105, 106, 108, 110, 112, 114, 115, 118, 121, 122, 125, 132, 134, 135, 136, 137, 142, 144, 147, 149, 150, 151, 154, 155, 159, 160, 164, 166, 167, 168, 169, 171, 172, 174, 175, 176, 177, 179, 180, 182, 186, 187, 189, 190, 192, 193, 195, 196, 198, 201, 202, 204, 205, 206, 208, 213, 216, 218, 220, 221, 223, 226, 227, 228, 233, 237, 240, 241, 243, 244, 246, 249, 251, 259, 263, 264, 266, 267, 270, 271, 277, 278, 281, 282, 283, 284, 285, 292, 294, 295, 297, 299], "If": [1, 2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 18, 19, 20, 22, 25, 26, 27, 28, 36, 37, 40, 42, 45, 48, 49, 50, 52, 54, 55, 56, 58, 59, 61, 66, 68, 80, 87, 93, 95, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 121, 122, 125, 128, 133, 134, 135, 136, 137, 138, 141, 143, 147, 149, 150, 152, 154, 157, 158, 160, 166, 167, 168, 169, 172, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 195, 196, 197, 200, 202, 203, 204, 205, 206, 207, 213, 214, 216, 217, 218, 220, 223, 225, 229, 231, 233, 236, 237, 238, 243, 244, 247, 250, 252, 253, 259, 262, 263, 265, 267, 269, 270, 277, 278, 279, 280, 281, 283, 285, 292, 293, 298], "fals": [1, 2, 4, 7, 12, 13, 16, 23, 24, 27, 38, 43, 48, 49, 61, 68, 69, 87, 88, 95, 98, 109, 121, 122, 128, 133, 134, 135, 137, 143, 151, 154, 157, 160, 166, 167, 169, 174, 175, 178, 179, 187, 189, 190, 192, 197, 200, 202, 206, 207, 214, 215, 217, 221, 223, 225, 227, 228, 229, 231, 237, 240, 250, 251, 252, 253, 261, 263, 277, 280, 281, 288, 295, 298, 299], "see": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 18, 20, 22, 23, 24, 25, 27, 28, 29, 37, 41, 42, 45, 49, 50, 52, 54, 55, 56, 57, 58, 61, 66, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 120, 122, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 154, 155, 156, 157, 159, 163, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 205, 206, 213, 215, 216, 217, 221, 222, 223, 228, 229, 231, 233, 234, 236, 237, 238, 241, 244, 245, 246, 247, 249, 250, 251, 254, 259, 261, 262, 263, 264, 267, 270, 277, 278, 279, 280, 281, 282, 283, 289, 290, 291, 293, 294, 296, 297, 298], "target_actor_network_param": 1, "attribut": [1, 7, 13, 16, 26, 29, 36, 48, 52, 59, 87, 90, 100, 112, 113, 118, 138, 150, 154, 160, 167, 171, 173, 192, 202, 206, 218, 222, 226, 227, 234, 238, 263, 283, 284, 295], "still": [1, 6, 7, 10, 12, 13, 14, 16, 17, 20, 22, 23, 24, 27, 52, 58, 80, 93, 95, 103, 105, 109, 113, 115, 120, 122, 134, 140, 141, 142, 147, 149, 150, 154, 155, 156, 160, 166, 169, 180, 190, 192, 193, 197, 198, 201, 202, 205, 207, 213, 215, 217, 220, 223, 228, 231, 243, 244, 246, 251, 261, 279, 280, 293, 299], "access": [1, 6, 7, 12, 16, 20, 23, 27, 37, 38, 56, 73, 80, 93, 95, 98, 100, 103, 104, 105, 110, 113, 121, 122, 132, 134, 138, 145, 149, 155, 167, 169, 175, 177, 179, 189, 192, 204, 206, 213, 214, 216, 217, 221, 231, 243, 246, 250, 259, 279, 283, 289], "just": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 26, 27, 29, 36, 49, 50, 52, 55, 56, 57, 58, 59, 62, 77, 78, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 122, 128, 133, 134, 137, 139, 140, 141, 147, 150, 151, 157, 158, 163, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 187, 189, 190, 192, 193, 195, 202, 205, 207, 215, 223, 225, 228, 231, 244, 246, 247, 252, 261, 264, 265, 266, 279, 280, 283, 285, 298], "detach": [1, 2, 7, 13, 36, 95, 103, 109, 136, 151, 163, 168, 198, 206, 262], "version": [1, 3, 4, 5, 6, 7, 10, 12, 14, 16, 24, 26, 27, 29, 96, 98, 100, 103, 104, 113, 114, 115, 117, 118, 133, 134, 138, 149, 150, 151, 152, 154, 158, 160, 167, 169, 171, 172, 173, 174, 175, 176, 184, 186, 187, 189, 193, 195, 196, 200, 203, 204, 205, 206, 208, 213, 223, 225, 228, 229, 237, 249, 250, 251, 252, 253, 261, 263, 264, 267, 269, 279, 285, 290, 294, 297], "q": [1, 48, 55, 132, 137, 159, 181, 189, 223, 231], "base": [1, 6, 7, 11, 12, 13, 16, 19, 20, 22, 24, 27, 28, 29, 38, 49, 55, 63, 80, 90, 93, 95, 96, 100, 104, 105, 107, 115, 120, 122, 131, 132, 133, 134, 135, 136, 139, 140, 142, 150, 151, 159, 169, 171, 172, 173, 177, 179, 182, 186, 187, 189, 192, 193, 195, 198, 201, 202, 206, 207, 215, 217, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 242, 251, 263, 267, 277, 279, 280, 284, 290, 294, 295], "empir": [1, 163, 176], "bootstrap": [1, 150], "td": 1, "0": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 61, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 87, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 128, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 189, 190, 193, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 216, 217, 218, 220, 223, 225, 227, 228, 229, 231, 232, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299], "low": [1, 4, 5, 6, 7, 16, 18, 24, 28, 29, 55, 58, 73, 87, 100, 107, 121, 132, 140, 186, 192, 196, 221, 252, 253, 279], "varianc": [1, 7, 23, 102, 176], "bia": [1, 2, 6, 7, 23, 48, 52, 73, 98, 107, 113, 120, 121, 122, 133, 142, 143, 150, 158, 173, 176, 180, 181, 196, 197, 206, 217, 218, 225, 228, 231, 250, 277], "mean": [1, 2, 4, 6, 7, 12, 14, 16, 23, 27, 29, 41, 52, 55, 57, 58, 73, 80, 87, 90, 95, 98, 100, 103, 105, 106, 107, 109, 112, 120, 121, 122, 134, 137, 139, 140, 143, 147, 149, 151, 160, 167, 169, 174, 175, 176, 177, 179, 180, 182, 186, 187, 189, 192, 193, 202, 204, 206, 213, 215, 218, 223, 225, 228, 229, 236, 237, 238, 240, 244, 261, 262, 264, 267, 269, 270, 279, 280, 285, 295, 298], "obtain": [1, 11, 28, 36, 41, 55, 73, 93, 113, 121, 139, 140, 143, 149, 151, 158, 168, 176, 177, 179, 186, 189, 195, 204, 270, 294], "reward": [1, 5, 16, 150, 159, 176, 177, 178, 180], "noth": [1, 27, 80, 98, 113, 144, 169, 180, 186, 197, 297], "els": [1, 5, 6, 10, 13, 22, 23, 27, 29, 49, 52, 55, 93, 95, 112, 114, 134, 135, 149, 151, 171, 172, 174, 178, 179, 180, 187, 189, 190, 192, 198, 202, 206, 207, 217, 223, 225, 231, 242, 246, 247, 250, 263, 295, 297, 299], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 36, 37, 38, 40, 46, 48, 55, 58, 59, 61, 69, 73, 80, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 149, 152, 154, 155, 156, 157, 158, 159, 160, 164, 166, 167, 168, 173, 175, 176, 177, 178, 179, 180, 181, 189, 190, 193, 196, 198, 200, 203, 205, 207, 208, 213, 214, 215, 216, 217, 218, 222, 223, 225, 229, 231, 233, 234, 237, 238, 242, 243, 244, 245, 246, 247, 251, 252, 253, 259, 262, 263, 269, 271, 278, 280, 288, 289, 294, 295, 297, 298, 299], "case": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16, 19, 20, 24, 26, 27, 29, 36, 43, 48, 55, 57, 66, 73, 80, 87, 90, 95, 96, 102, 103, 105, 106, 107, 109, 110, 112, 113, 118, 121, 122, 131, 133, 134, 135, 137, 138, 139, 142, 143, 144, 149, 150, 152, 154, 157, 158, 160, 163, 166, 167, 168, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 195, 196, 197, 198, 205, 206, 213, 215, 216, 217, 218, 221, 223, 228, 229, 231, 233, 236, 237, 244, 247, 252, 262, 263, 264, 267, 270, 271, 277, 279, 283, 285, 290, 292, 293, 295, 298], "whole": [1, 3, 29, 49, 52, 100, 113, 122, 132, 136, 149, 173, 174, 176, 182, 193, 202, 203, 206, 214, 228, 236, 267, 285], "sequenc": [1, 6, 7, 14, 25, 27, 45, 54, 55, 72, 73, 100, 106, 108, 111, 112, 121, 122, 132, 140, 141, 150, 151, 164, 167, 176, 181, 183, 196, 198, 202, 205, 206, 218, 220, 222, 236, 240, 241, 246, 249, 250, 263, 267, 270, 280], "upcom": 1, "intermedi": [1, 29, 81, 95, 100, 103, 132, 145, 154, 157, 158, 159, 166, 169, 183, 191, 193, 196, 228, 231, 264, 271, 297], "lambda": [1, 6, 26, 113, 142, 175, 178, 192, 231, 263, 264], "also": [1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 42, 45, 48, 52, 54, 55, 57, 58, 59, 60, 66, 73, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 120, 121, 122, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 150, 151, 154, 156, 157, 158, 166, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 203, 208, 213, 214, 215, 216, 220, 223, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 241, 243, 244, 245, 246, 247, 249, 251, 252, 253, 259, 261, 263, 264, 265, 267, 269, 270, 277, 278, 279, 280, 282, 283, 285, 289, 290, 291, 293, 294, 296, 297, 298, 299], "compromis": 1, "easi": [1, 2, 6, 7, 11, 27, 28, 38, 49, 50, 57, 73, 95, 96, 103, 105, 107, 134, 135, 137, 139, 149, 155, 158, 163, 167, 171, 176, 186, 192, 193, 203, 207, 220, 231, 236, 252, 264, 279, 295], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 8, 26, 27, 179], "defin": [1, 2, 6, 14, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 36, 41, 42, 43, 46, 48, 50, 58, 67, 70, 72, 73, 74, 80, 90, 93, 95, 100, 102, 104, 106, 107, 112, 113, 115, 118, 122, 132, 133, 134, 138, 140, 142, 145, 149, 150, 152, 155, 156, 159, 163, 166, 168, 169, 177, 178, 179, 181, 184, 186, 187, 190, 192, 196, 200, 203, 213, 220, 221, 226, 227, 228, 229, 231, 240, 243, 244, 247, 251, 252, 253, 261, 267, 268, 269, 270, 276, 277, 284, 285, 287, 291, 293, 294, 295, 299], "default": [1, 3, 4, 6, 7, 10, 11, 12, 13, 17, 20, 23, 24, 25, 28, 36, 41, 45, 48, 50, 55, 57, 58, 61, 68, 69, 87, 98, 100, 102, 103, 107, 109, 114, 118, 121, 128, 132, 133, 134, 135, 136, 137, 140, 149, 150, 152, 154, 155, 157, 160, 166, 169, 172, 174, 175, 178, 179, 180, 186, 187, 189, 190, 192, 193, 196, 197, 198, 200, 201, 202, 207, 216, 217, 220, 221, 223, 225, 226, 227, 228, 229, 233, 237, 238, 243, 244, 247, 251, 252, 259, 261, 264, 267, 268, 269, 270, 276, 278, 280, 283, 285, 288, 289, 290, 293, 295, 298, 299], "take": [1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 37, 38, 45, 48, 49, 52, 54, 55, 56, 57, 58, 73, 80, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 118, 121, 122, 128, 136, 137, 138, 139, 140, 141, 142, 144, 147, 149, 151, 156, 158, 159, 166, 169, 174, 175, 176, 177, 178, 179, 180, 182, 186, 187, 189, 190, 192, 193, 195, 196, 198, 202, 205, 208, 213, 216, 218, 220, 221, 223, 225, 226, 227, 228, 231, 236, 243, 244, 247, 251, 252, 253, 261, 264, 265, 266, 267, 270, 277, 279, 280, 281, 282, 283, 285, 290, 295, 297, 298], "simplest": [1, 7, 27, 36, 52, 95, 103, 107, 150, 176, 182, 280], "show": [1, 6, 12, 13, 18, 20, 22, 23, 26, 28, 38, 49, 57, 58, 66, 80, 87, 88, 90, 93, 95, 96, 98, 100, 103, 104, 113, 118, 120, 132, 133, 136, 139, 140, 141, 143, 144, 147, 150, 152, 157, 160, 169, 172, 174, 175, 177, 178, 180, 186, 187, 189, 190, 192, 193, 196, 197, 202, 206, 213, 220, 223, 225, 231, 241, 242, 243, 244, 246, 247, 252, 259, 261, 262, 263, 264, 267, 270, 278, 279, 280, 285, 294, 295, 298, 299], "chang": [1, 2, 6, 7, 12, 13, 14, 16, 23, 25, 26, 27, 28, 36, 45, 48, 54, 56, 57, 58, 59, 61, 87, 88, 90, 93, 95, 96, 98, 99, 104, 105, 106, 108, 109, 110, 115, 122, 132, 133, 136, 137, 139, 140, 142, 145, 146, 149, 150, 151, 154, 157, 158, 159, 166, 167, 169, 172, 173, 174, 178, 186, 189, 190, 192, 193, 196, 201, 202, 205, 207, 215, 217, 218, 221, 223, 225, 227, 228, 229, 237, 238, 241, 242, 243, 244, 249, 252, 253, 262, 263, 264, 267, 268, 276, 277, 278, 280, 281, 288, 293, 294, 295, 296, 298], "instruct": [1, 7, 23, 27, 28, 40, 96, 99, 102, 104, 140, 141, 150, 151, 154, 171, 173, 174, 176, 178, 180, 182, 202, 223, 225, 226, 237, 238, 251, 252, 259, 262, 267, 280, 284, 297, 298], "queri": [1, 16, 26, 55, 98, 103, 122, 136, 179, 181, 195, 196, 198, 206, 218, 223, 228], "correspond": [1, 2, 3, 4, 6, 7, 10, 12, 14, 16, 17, 37, 38, 42, 48, 55, 61, 87, 95, 96, 100, 102, 107, 110, 120, 122, 133, 138, 139, 142, 157, 166, 171, 173, 176, 179, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 204, 206, 216, 227, 228, 229, 253, 262, 269, 270, 280, 284, 298], "make_value_estim": 1, "central": [1, 10, 80, 95, 103, 104, 110, 112, 145, 283], "quit": [1, 7, 20, 27, 55, 80, 138, 149, 166, 176, 180, 192, 193, 213, 231, 243, 246, 249, 264, 279], "weight": [1, 2, 3, 5, 6, 7, 11, 14, 15, 16, 20, 23, 24, 28, 36, 37, 48, 49, 55, 68, 69, 71, 73, 74, 75, 77, 78, 80, 95, 98, 100, 103, 104, 105, 107, 108, 110, 113, 122, 128, 132, 133, 140, 142, 143, 145, 150, 151, 152, 155, 157, 158, 160, 166, 167, 168, 173, 174, 176, 177, 180, 182, 186, 189, 193, 196, 197, 201, 202, 203, 205, 206, 217, 221, 223, 225, 226, 227, 228, 231, 233, 243, 247, 251, 253, 261, 262, 266, 267, 277, 282, 283, 288, 295, 297], "when": [1, 4, 6, 7, 10, 12, 13, 14, 16, 17, 18, 20, 22, 24, 25, 26, 27, 29, 36, 38, 41, 43, 45, 48, 49, 50, 52, 54, 55, 56, 58, 59, 61, 66, 73, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 109, 112, 113, 114, 117, 118, 120, 121, 122, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 146, 147, 149, 150, 151, 154, 156, 157, 159, 160, 163, 166, 167, 169, 172, 173, 174, 176, 177, 178, 180, 181, 182, 186, 189, 190, 192, 193, 195, 196, 200, 202, 203, 205, 213, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 234, 237, 238, 241, 242, 244, 245, 246, 251, 259, 263, 264, 266, 267, 269, 270, 271, 277, 279, 280, 281, 283, 284, 289, 290, 292, 293, 295, 298, 299], "must": [1, 2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 18, 26, 27, 37, 38, 55, 58, 80, 90, 95, 96, 103, 106, 107, 112, 117, 118, 122, 134, 147, 149, 150, 152, 154, 169, 174, 176, 179, 186, 189, 190, 192, 193, 197, 200, 204, 213, 214, 216, 218, 225, 227, 228, 233, 236, 242, 245, 269, 271, 277, 280, 292], "sure": [1, 5, 6, 7, 10, 12, 13, 16, 23, 26, 43, 57, 63, 93, 98, 102, 105, 106, 107, 112, 118, 122, 133, 137, 142, 147, 149, 150, 151, 156, 169, 174, 176, 178, 189, 193, 206, 214, 216, 228, 236, 242, 252, 262, 263, 269, 278, 280, 289, 290, 292], "out": [1, 2, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 20, 24, 25, 26, 27, 28, 29, 36, 40, 41, 45, 46, 48, 49, 50, 54, 55, 57, 58, 64, 65, 66, 80, 82, 83, 84, 85, 86, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 108, 110, 113, 117, 120, 132, 133, 135, 136, 137, 138, 139, 140, 144, 145, 147, 149, 150, 152, 156, 157, 158, 166, 169, 172, 173, 174, 175, 176, 178, 179, 180, 182, 186, 187, 189, 192, 193, 196, 198, 200, 202, 203, 210, 211, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 231, 236, 237, 238, 239, 246, 252, 253, 255, 256, 257, 258, 260, 262, 268, 270, 276, 277, 280, 284, 290, 293, 294, 295, 298], "graph": [1, 6, 12, 16, 18, 24, 27, 29, 52, 55, 68, 70, 73, 77, 78, 87, 90, 92, 95, 106, 108, 114, 117, 118, 121, 132, 138, 140, 144, 155, 156, 157, 158, 160, 179, 180, 186, 187, 189, 196, 197, 207, 208, 222, 223, 225, 228, 232, 237, 238, 247, 250, 252, 253, 266, 278, 285, 289, 290, 294, 296, 297], "otherwis": [1, 4, 10, 12, 23, 27, 37, 42, 55, 61, 68, 80, 87, 90, 103, 113, 121, 122, 128, 133, 138, 144, 147, 150, 157, 158, 160, 166, 176, 177, 179, 190, 193, 225, 231, 236, 237, 242, 279, 293, 298], "mix": [1, 10, 17, 66, 120, 160, 202, 221, 226, 227, 252, 253, 268, 276, 284], "For": [1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 41, 42, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 68, 69, 73, 80, 87, 88, 93, 96, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 122, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 152, 155, 156, 157, 159, 160, 167, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 186, 189, 190, 192, 193, 195, 196, 197, 198, 200, 201, 202, 204, 205, 206, 207, 213, 214, 215, 216, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 237, 238, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 259, 261, 262, 263, 264, 266, 267, 269, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 296, 297, 298, 299], "hold_out_param": 1, "now": [1, 2, 5, 6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 41, 42, 48, 49, 50, 52, 55, 56, 57, 58, 61, 80, 90, 93, 94, 95, 96, 102, 103, 105, 107, 109, 112, 113, 115, 118, 121, 128, 132, 134, 137, 138, 139, 140, 142, 143, 144, 147, 149, 150, 151, 155, 156, 157, 158, 159, 163, 166, 167, 168, 169, 172, 173, 175, 176, 177, 178, 179, 180, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 198, 201, 202, 205, 206, 208, 213, 214, 218, 221, 223, 226, 228, 229, 231, 233, 236, 241, 243, 244, 247, 265, 266, 267, 277, 278, 279, 282, 290, 297], "reli": [1, 3, 4, 7, 10, 16, 27, 43, 55, 95, 112, 138, 159, 166, 169, 173, 176, 192, 208, 215, 217, 238, 242, 280], "miss": [1, 57, 122, 142, 147, 150, 186, 190, 198, 214, 263, 279, 281, 298], "glue": [1, 151, 180], "cost": [1, 6, 16, 55, 105, 107, 120, 133, 134, 137, 138, 142, 163, 186, 192, 243, 265, 280, 293, 294], "deliv": [1, 238, 252, 292], "most": [1, 2, 5, 6, 13, 16, 20, 26, 27, 29, 36, 40, 48, 55, 57, 58, 80, 93, 95, 96, 98, 100, 103, 107, 109, 110, 113, 120, 121, 122, 128, 131, 133, 137, 138, 139, 141, 143, 144, 149, 151, 156, 157, 159, 160, 166, 169, 174, 175, 176, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 196, 202, 215, 216, 217, 220, 223, 225, 228, 231, 243, 252, 253, 262, 270, 277, 279, 280, 285, 289, 293, 295, 298], "first": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 40, 43, 46, 49, 50, 55, 56, 57, 58, 59, 61, 66, 73, 74, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 107, 109, 110, 112, 113, 118, 120, 121, 122, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 163, 166, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 180, 182, 186, 189, 190, 192, 193, 195, 196, 197, 198, 200, 202, 205, 206, 208, 213, 215, 216, 218, 220, 223, 225, 228, 231, 234, 236, 242, 243, 244, 246, 247, 250, 251, 253, 263, 264, 266, 267, 269, 270, 277, 280, 285, 290, 292, 293, 294, 295, 298], "taken": [1, 7, 10, 16, 23, 26, 29, 87, 88, 100, 150, 166, 176, 189, 192, 205, 206, 221, 267, 271, 294], "care": [1, 4, 6, 16, 25, 80, 93, 95, 105, 144, 149, 169, 176, 180, 196, 213, 223, 243, 264, 265, 267, 279], "condit": [1, 16, 55, 61, 103, 110, 114, 133, 149, 151, 167, 169, 190, 192, 229, 233, 247], "remaind": [1, 98, 154], "cheetah": 1, "goal": [1, 7, 16, 17, 49, 55, 58, 66, 80, 90, 105, 138, 139, 149, 150, 156, 176, 178, 180, 200, 213, 253], "half": [1, 10, 20, 128, 171, 231, 263, 299], "fast": [1, 6, 7, 20, 22, 25, 55, 95, 113, 133, 137, 147, 163, 169, 176, 181, 189, 193, 196, 200, 205, 222, 231, 267, 279], "dm_control": 1, "gym": [1, 16, 132, 150, 159, 176, 177, 178, 180, 196], "env": [1, 22, 136, 146, 149, 150, 176, 177, 178, 180, 198, 200, 237, 264, 279, 295], "gymenv": [1, 176], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 10, 20, 23, 29, 36, 45, 48, 68, 69, 87, 93, 95, 103, 109, 112, 113, 114, 121, 134, 137, 139, 149, 152, 154, 156, 157, 166, 173, 177, 186, 192, 200, 207, 214, 216, 218, 231, 237, 243, 244, 249, 259, 266, 270, 280, 285, 289, 290, 292, 295, 298], "disabl": [1, 13, 17, 133, 134, 142, 159, 163, 175, 179, 181, 186, 190, 205, 213, 214, 215, 216, 225, 229, 237, 244, 263, 289, 298], "render": [1, 7, 87, 96, 102, 159, 169, 176], "easier": [1, 20, 22, 27, 28, 56, 57, 106, 113, 133, 139, 157, 166, 178, 182, 187, 205, 213, 216, 228, 231, 236, 244, 247, 264, 279, 292], "than": [1, 3, 4, 6, 7, 10, 12, 13, 14, 15, 16, 20, 23, 27, 29, 49, 54, 55, 56, 58, 59, 66, 72, 74, 80, 87, 90, 95, 98, 100, 103, 105, 106, 107, 109, 112, 113, 115, 121, 122, 128, 132, 133, 134, 136, 139, 141, 143, 146, 147, 149, 152, 157, 158, 159, 163, 166, 167, 168, 169, 175, 176, 177, 178, 186, 187, 189, 190, 193, 195, 196, 200, 202, 205, 213, 218, 220, 223, 231, 234, 237, 238, 261, 264, 267, 269, 280, 281, 284, 289, 295, 298], "imag": [1, 23, 27, 37, 38, 40, 46, 48, 52, 55, 57, 58, 63, 80, 87, 93, 96, 98, 100, 103, 104, 105, 113, 132, 137, 142, 152, 159, 160, 166, 168, 177, 184, 186, 187, 193, 195, 202, 218, 221, 223, 225, 226, 227, 237, 238, 246, 262, 266, 278, 281, 282, 284, 297], "focu": [1, 4, 7, 12, 22, 96, 105, 107, 117, 134, 137, 138, 151, 176, 178, 180, 182, 192, 205, 214, 253, 267], "pass": [1, 2, 3, 4, 5, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 23, 26, 27, 29, 36, 37, 38, 41, 42, 43, 48, 49, 55, 57, 58, 59, 62, 68, 69, 70, 73, 77, 78, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 113, 114, 121, 122, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 147, 149, 150, 152, 154, 156, 159, 160, 163, 167, 168, 171, 173, 176, 177, 178, 179, 180, 182, 183, 186, 189, 190, 192, 193, 196, 197, 198, 203, 205, 206, 213, 216, 220, 225, 228, 233, 241, 242, 244, 245, 247, 249, 251, 263, 264, 269, 270, 271, 277, 280, 283, 299], "pixel": [1, 24, 37, 46, 49, 80, 100, 103, 105, 150, 160, 184, 189, 262, 295], "from_pixel": 1, "true": [1, 2, 4, 5, 6, 7, 12, 13, 14, 17, 18, 23, 26, 27, 28, 36, 38, 41, 43, 48, 49, 52, 55, 57, 68, 69, 73, 87, 93, 95, 98, 103, 107, 109, 114, 115, 117, 120, 121, 122, 128, 133, 134, 135, 136, 137, 139, 142, 143, 144, 147, 149, 150, 151, 154, 157, 160, 167, 174, 175, 178, 179, 180, 181, 186, 187, 189, 190, 192, 195, 196, 197, 198, 200, 202, 206, 207, 214, 215, 216, 217, 221, 223, 225, 226, 227, 228, 229, 231, 237, 242, 243, 244, 250, 252, 253, 261, 262, 267, 270, 277, 283, 285, 288, 292, 297, 298, 299], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 10, 11, 19, 20, 27, 52, 57, 61, 96, 102, 104, 105, 106, 114, 133, 134, 139, 140, 141, 149, 150, 177, 178, 179, 180, 182, 184, 187, 189, 195, 231, 240, 241, 270, 295], "either": [1, 2, 4, 5, 6, 7, 10, 18, 23, 27, 49, 55, 78, 93, 104, 105, 113, 115, 117, 122, 128, 134, 137, 147, 150, 151, 160, 173, 177, 178, 179, 186, 190, 192, 196, 202, 206, 216, 218, 225, 226, 227, 229, 231, 234, 247, 252, 253, 259, 263, 270, 277, 280, 292, 297], "backend": [1, 6, 7, 13, 16, 22, 24, 28, 29, 59, 61, 131, 132, 139, 142, 146, 147, 150, 151, 160, 175, 176, 183, 186, 190, 192, 193, 198, 208, 217, 222, 228, 229, 238, 242, 251, 259, 261, 263, 284, 291, 295], "consid": [1, 4, 7, 12, 13, 16, 27, 36, 43, 55, 73, 80, 87, 121, 133, 135, 144, 147, 149, 160, 163, 166, 167, 169, 172, 174, 178, 182, 186, 190, 192, 193, 195, 200, 213, 214, 215, 217, 236, 243, 269, 270, 271, 290], "abov": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 16, 17, 19, 23, 24, 26, 27, 48, 49, 55, 57, 58, 70, 72, 73, 80, 87, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 121, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 154, 157, 158, 159, 160, 163, 166, 167, 168, 169, 171, 173, 174, 176, 178, 179, 180, 181, 186, 189, 190, 192, 193, 195, 197, 198, 200, 205, 208, 213, 214, 215, 216, 217, 220, 223, 225, 228, 229, 243, 244, 245, 246, 247, 250, 251, 252, 253, 259, 261, 262, 264, 267, 269, 270, 277, 278, 289, 295, 298], "dm": 1, "want": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 23, 25, 26, 27, 28, 36, 37, 38, 41, 43, 48, 49, 52, 55, 57, 58, 66, 68, 69, 72, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 121, 122, 128, 136, 137, 138, 139, 149, 150, 151, 152, 154, 156, 158, 160, 163, 167, 169, 171, 173, 174, 175, 176, 179, 181, 182, 184, 189, 190, 192, 193, 195, 196, 201, 202, 203, 213, 215, 220, 221, 222, 223, 225, 228, 236, 244, 245, 253, 259, 261, 263, 264, 267, 269, 277, 279, 281, 292, 294], "modifi": [1, 3, 7, 12, 13, 16, 23, 42, 46, 48, 49, 58, 80, 105, 106, 115, 137, 140, 149, 156, 157, 172, 174, 176, 178, 182, 192, 196, 197, 198, 220, 234, 277, 280, 293, 295], "represent": [1, 5, 12, 16, 27, 29, 48, 58, 90, 96, 100, 102, 105, 107, 110, 112, 114, 115, 117, 132, 139, 151, 155, 156, 159, 182, 186, 187, 192, 193, 196, 218, 222, 223, 228, 234, 247, 264, 267, 277, 279, 294, 297], "more": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 20, 23, 24, 25, 26, 29, 38, 40, 41, 42, 45, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 66, 72, 80, 90, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 120, 121, 122, 128, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 154, 155, 156, 159, 163, 166, 167, 169, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 187, 189, 190, 192, 193, 195, 196, 197, 200, 202, 203, 205, 206, 213, 214, 215, 216, 218, 220, 221, 222, 223, 225, 226, 227, 231, 234, 236, 237, 238, 242, 244, 245, 246, 247, 251, 252, 253, 259, 262, 269, 277, 279, 280, 285, 290, 292, 293, 294, 295, 296, 297, 298, 299], "friendli": [1, 5, 17, 27, 247, 263], "append": [1, 10, 16, 19, 22, 23, 25, 55, 103, 120, 122, 134, 149, 151, 173, 176, 178, 179, 180, 182, 187, 202, 206, 223, 225, 231, 247, 298], "special": [1, 12, 22, 26, 27, 45, 54, 98, 100, 107, 109, 112, 113, 118, 138, 150, 160, 172, 173, 186, 189, 202, 218, 221, 223, 233, 244, 277, 280, 295], "torchr": 1, "transformedenv": [1, 16, 176], "common": [1, 5, 7, 10, 12, 16, 18, 20, 23, 41, 42, 49, 55, 57, 66, 87, 98, 103, 105, 107, 109, 112, 114, 122, 128, 132, 137, 147, 151, 152, 156, 159, 167, 169, 173, 174, 175, 176, 181, 189, 192, 193, 195, 203, 215, 218, 231, 247, 253, 264, 265, 279, 280, 281, 284, 285, 291], "rescal": [1, 57, 195, 205], "heurist": [1, 87, 200, 228, 251, 292], "multipli": [1, 4, 6, 14, 23, 54, 55, 95, 96, 98, 103, 113, 155, 182, 267, 279, 291], "5": [1, 2, 3, 6, 7, 13, 20, 27, 38, 40, 50, 55, 58, 70, 87, 90, 93, 98, 100, 102, 104, 107, 110, 112, 117, 120, 121, 122, 133, 134, 143, 147, 149, 151, 152, 157, 160, 166, 174, 175, 178, 179, 180, 189, 192, 193, 195, 196, 200, 204, 208, 223, 225, 229, 231, 233, 236, 238, 240, 246, 250, 251, 252, 253, 259, 278, 280, 285, 288, 297], "interfac": [1, 4, 5, 6, 7, 16, 17, 24, 26, 27, 29, 55, 103, 113, 139, 146, 149, 176, 189, 193, 207, 252, 259, 295], "between": [1, 6, 7, 10, 13, 14, 16, 19, 20, 23, 25, 26, 27, 37, 45, 52, 54, 55, 70, 78, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 106, 107, 110, 112, 113, 121, 132, 133, 135, 137, 139, 149, 150, 151, 156, 160, 163, 169, 171, 173, 177, 179, 180, 181, 182, 187, 189, 190, 192, 193, 195, 196, 198, 200, 201, 204, 205, 206, 207, 213, 214, 216, 220, 221, 222, 225, 226, 228, 231, 243, 245, 250, 262, 263, 264, 265, 267, 270, 280, 285, 295, 296, 299], "simul": [1, 20, 22, 23, 100, 142, 176, 231, 246], "work": [1, 2, 4, 5, 6, 7, 8, 11, 14, 16, 18, 20, 22, 24, 25, 26, 27, 29, 40, 41, 48, 55, 56, 57, 58, 61, 62, 66, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 112, 113, 114, 117, 132, 138, 140, 141, 143, 144, 145, 147, 149, 150, 152, 154, 155, 156, 158, 166, 167, 168, 169, 172, 173, 175, 176, 178, 180, 181, 182, 186, 189, 192, 193, 195, 196, 200, 202, 203, 205, 206, 213, 214, 215, 216, 220, 223, 225, 226, 231, 233, 234, 236, 237, 238, 243, 246, 251, 252, 263, 264, 267, 270, 277, 279, 280, 285, 288, 289, 292, 295], "doubl": [1, 2, 4, 6, 7, 27, 41, 95, 102, 113, 120, 132, 143, 150, 151, 159, 168, 174, 176, 187, 206, 251, 263], "precis": [1, 5, 10, 12, 17, 24, 66, 138, 143, 144, 151, 160, 169, 176, 187, 193, 202, 206, 221, 226, 227, 251, 252, 253, 267, 268, 276, 284, 285], "number": [1, 4, 6, 7, 11, 13, 14, 17, 22, 23, 25, 27, 38, 41, 46, 49, 57, 58, 59, 61, 70, 87, 90, 93, 95, 98, 100, 105, 107, 109, 112, 113, 120, 121, 122, 133, 134, 136, 137, 138, 139, 140, 146, 147, 149, 150, 151, 152, 154, 157, 158, 163, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 186, 189, 190, 193, 195, 200, 205, 206, 216, 217, 218, 225, 226, 236, 237, 240, 244, 251, 261, 264, 266, 267, 270, 279, 280, 290, 296, 298], "presum": 1, "singl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 17, 20, 22, 24, 25, 26, 27, 42, 45, 48, 52, 57, 59, 60, 61, 62, 66, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 107, 113, 132, 133, 134, 135, 137, 140, 142, 143, 144, 145, 146, 147, 149, 150, 151, 158, 159, 163, 168, 169, 171, 176, 177, 178, 179, 180, 182, 186, 189, 190, 192, 193, 196, 197, 198, 200, 202, 205, 218, 223, 228, 231, 236, 244, 250, 251, 264, 267, 279, 280, 284, 295, 298], "ones": [1, 2, 4, 5, 7, 13, 16, 18, 23, 25, 98, 100, 103, 105, 149, 152, 156, 167, 168, 169, 171, 172, 174, 176, 177, 186, 192, 196, 197, 214, 225, 233, 247, 252, 279, 295], "goe": [1, 5, 6, 27, 57, 103, 106, 107, 132, 136, 144, 158, 172, 176, 179, 193, 261], "wai": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 24, 25, 26, 29, 36, 40, 42, 45, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 72, 77, 80, 87, 93, 95, 96, 98, 99, 103, 106, 107, 109, 112, 113, 115, 117, 118, 122, 131, 133, 137, 138, 139, 140, 144, 146, 147, 154, 155, 156, 157, 158, 159, 160, 163, 166, 167, 171, 173, 174, 176, 178, 179, 181, 184, 187, 192, 193, 195, 196, 197, 198, 205, 206, 214, 215, 216, 218, 220, 222, 223, 225, 228, 233, 244, 247, 262, 265, 267, 270, 271, 277, 280, 292], "repres": [1, 4, 6, 12, 14, 15, 22, 24, 25, 29, 37, 48, 55, 57, 58, 66, 68, 80, 87, 90, 95, 96, 98, 100, 104, 105, 112, 114, 115, 117, 120, 121, 133, 134, 135, 137, 139, 140, 142, 150, 154, 156, 159, 160, 176, 177, 180, 182, 189, 192, 193, 195, 196, 200, 202, 213, 218, 223, 225, 264, 266, 277, 279], "doubletofloat": [1, 176], "in_kei": [1, 16, 150, 176], "list": [1, 4, 6, 7, 10, 13, 14, 16, 17, 19, 23, 24, 25, 28, 38, 42, 45, 49, 52, 54, 55, 56, 58, 73, 80, 93, 96, 100, 103, 109, 110, 112, 114, 115, 117, 118, 121, 138, 141, 149, 151, 160, 167, 169, 174, 175, 178, 179, 180, 182, 186, 187, 189, 190, 192, 193, 203, 206, 207, 215, 218, 221, 225, 228, 231, 237, 242, 246, 247, 249, 250, 261, 262, 264, 267, 269, 270, 284, 289, 295, 298], "refer": [1, 4, 5, 6, 7, 8, 10, 15, 17, 20, 25, 26, 27, 28, 29, 36, 42, 66, 80, 87, 90, 95, 96, 103, 105, 107, 109, 110, 112, 114, 115, 117, 118, 120, 122, 133, 134, 135, 137, 138, 141, 142, 146, 147, 149, 157, 166, 169, 173, 174, 176, 178, 179, 180, 186, 189, 192, 193, 195, 196, 200, 206, 208, 213, 216, 221, 223, 225, 226, 229, 231, 251, 253, 262, 263, 264, 266, 269, 270, 277, 280, 290, 292, 295, 297, 298], "float": [1, 4, 6, 7, 10, 11, 13, 23, 27, 49, 98, 103, 109, 112, 120, 133, 134, 137, 139, 149, 151, 160, 172, 173, 174, 178, 180, 192, 193, 195, 197, 200, 201, 205, 206, 207, 215, 216, 217, 223, 225, 228, 237, 247, 250, 251, 253, 261, 263, 267, 270, 277], "while": [1, 2, 3, 5, 6, 7, 11, 13, 14, 15, 16, 20, 23, 25, 27, 38, 41, 55, 58, 61, 87, 96, 103, 114, 115, 120, 131, 132, 134, 135, 136, 138, 139, 142, 145, 147, 149, 150, 151, 157, 158, 160, 166, 169, 173, 174, 175, 176, 179, 180, 181, 182, 184, 190, 192, 193, 196, 197, 200, 202, 205, 206, 213, 214, 215, 216, 217, 218, 221, 223, 228, 231, 243, 261, 263, 264, 269, 270, 277, 280, 285, 289, 292, 295], "in_keys_inv": [1, 16], "befor": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 16, 19, 23, 24, 26, 27, 29, 36, 41, 43, 48, 49, 50, 52, 55, 57, 58, 61, 66, 73, 80, 90, 95, 96, 100, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 122, 128, 132, 134, 135, 137, 139, 140, 142, 147, 149, 150, 151, 154, 157, 159, 164, 166, 167, 169, 171, 173, 174, 175, 176, 178, 179, 180, 182, 186, 187, 190, 192, 193, 195, 197, 200, 202, 203, 206, 213, 214, 216, 220, 223, 225, 228, 229, 243, 246, 250, 261, 263, 264, 266, 269, 278, 280, 281, 282, 283, 284, 285, 289, 290, 292, 293, 298, 299], "concaten": [1, 16, 45, 54, 55, 109, 110, 137, 141, 177, 223], "cattensor": 1, "leav": [1, 10, 18, 20, 36, 48, 55, 57, 59, 90, 95, 139, 166, 167, 175, 231, 251, 277], "constant": [1, 2, 7, 27, 29, 45, 54, 87, 93, 95, 103, 107, 115, 136, 150, 167, 177, 187, 190, 192, 206, 217, 223, 231, 280], "significantli": [1, 23, 110, 131, 137, 143, 169, 190, 205, 221, 223, 226, 227, 234, 261, 267, 271, 280, 290, 298], "speed": [1, 6, 7, 12, 16, 23, 24, 36, 38, 41, 54, 55, 90, 95, 98, 99, 105, 113, 131, 132, 134, 135, 137, 140, 145, 150, 152, 157, 160, 169, 175, 176, 178, 181, 190, 196, 205, 206, 207, 221, 222, 234, 238, 242, 243, 247, 261, 264, 267, 278, 280, 284, 294, 295, 298], "throughput": [1, 134, 169, 267, 280, 298], "choos": [1, 10, 12, 14, 17, 49, 55, 58, 61, 66, 70, 93, 96, 107, 117, 121, 122, 136, 137, 141, 147, 149, 159, 167, 175, 176, 177, 182, 186, 189, 193, 195, 198, 205, 206, 208, 223, 226, 242, 259, 262, 263, 270, 285], "whether": [1, 7, 10, 12, 13, 16, 26, 55, 58, 95, 96, 98, 102, 103, 105, 113, 115, 122, 144, 149, 151, 156, 159, 166, 169, 176, 178, 186, 187, 189, 192, 197, 216, 264, 270, 280, 281], "individu": [1, 6, 7, 14, 25, 29, 37, 55, 90, 95, 96, 100, 121, 135, 137, 139, 143, 168, 169, 173, 179, 182, 187, 190, 192, 193, 196, 197, 259, 263, 264, 280, 290], "approach": [1, 4, 5, 6, 7, 8, 26, 27, 29, 43, 62, 96, 113, 117, 122, 136, 140, 145, 167, 168, 169, 176, 177, 179, 182, 190, 192, 195, 200, 203, 213, 216, 217, 221, 226, 227, 236, 253, 261, 264, 267, 277, 284, 285], "parallelenv": [1, 176], "num_work": [1, 49, 57, 93, 98, 133, 134, 174, 186, 187, 280], "4": [1, 2, 3, 4, 6, 7, 10, 14, 18, 19, 21, 25, 27, 28, 38, 40, 50, 57, 59, 60, 61, 68, 69, 70, 80, 93, 96, 98, 100, 102, 103, 104, 106, 107, 109, 112, 113, 121, 132, 133, 134, 136, 142, 143, 145, 146, 149, 150, 157, 159, 160, 166, 171, 173, 174, 177, 178, 179, 180, 189, 190, 192, 193, 195, 196, 198, 200, 201, 205, 208, 216, 222, 223, 225, 238, 243, 246, 251, 278, 285, 289, 290, 295, 298], "leverag": [1, 7, 55, 80, 105, 118, 122, 132, 134, 137, 147, 149, 158, 195, 207, 217, 222, 226, 227, 229, 245, 246, 247, 249, 280, 281, 284, 294, 298], "vector": [1, 2, 5, 6, 7, 14, 16, 26, 27, 36, 55, 58, 87, 95, 96, 100, 102, 103, 105, 107, 109, 110, 112, 113, 140, 141, 142, 150, 151, 154, 168, 172, 182, 193, 207, 217, 226, 236, 238, 251, 252, 267, 280, 292, 297], "capabl": [1, 3, 13, 17, 20, 55, 80, 137, 169, 181, 186, 223, 226, 231, 238, 240, 241, 249, 263, 280], "pytorch": [1, 2, 4, 10, 11, 13, 16, 18, 20, 21, 22, 25, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 54, 55, 57, 58, 59, 61, 62, 64, 65, 67, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 93, 95, 96, 105, 106, 111, 113, 114, 116, 117, 122, 123, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 152, 153, 154, 155, 156, 157, 158, 159, 163, 164, 166, 168, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 192, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 229, 231, 232, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 255, 257, 258, 261, 262, 263, 264, 265, 267, 269, 272, 273, 274, 275, 276, 277, 279, 285, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299], "adopt": [1, 24, 28, 66, 166, 172, 179, 229, 253], "frame_skip": [1, 176], "frame": [1, 7, 150, 159, 175, 176, 186, 200, 295], "count": [1, 7, 13, 23, 26, 41, 49, 55, 87, 107, 149, 150, 176, 180, 182, 186, 189, 202, 223, 225, 245], "frames_per_batch": [1, 176], "total_fram": [1, 176], "adjust": [1, 16, 23, 36, 41, 42, 48, 58, 80, 95, 98, 104, 137, 139, 140, 163, 178, 280], "total": [1, 6, 11, 13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 28, 29, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 88, 90, 91, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 122, 123, 125, 128, 134, 136, 138, 139, 140, 141, 143, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 175, 176, 177, 179, 181, 182, 183, 184, 186, 189, 190, 192, 193, 195, 196, 201, 202, 204, 205, 206, 213, 214, 215, 216, 218, 220, 232, 234, 236, 241, 242, 249, 251, 253, 262, 263, 264, 265, 266, 267, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 291, 292, 293, 294, 296, 298], "rais": [1, 10, 13, 18, 23, 80, 114, 136, 137, 138, 157, 160, 175, 176, 190, 192, 243, 247, 280, 293, 295], "skip": [1, 5, 6, 12, 16, 20, 23, 27, 48, 106, 122, 144, 154, 159, 178, 180, 186, 190, 192, 196, 202, 222, 229, 231, 242, 264, 270, 283, 298], "unchang": [1, 10, 88, 95], "seem": [1, 49, 58, 138, 140, 150, 169, 171, 193, 264], "like": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 29, 37, 38, 41, 42, 45, 48, 49, 50, 52, 54, 55, 57, 58, 59, 61, 66, 73, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 125, 128, 131, 132, 133, 137, 138, 139, 141, 144, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 163, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 186, 187, 189, 192, 193, 195, 196, 197, 201, 202, 203, 206, 207, 214, 215, 216, 221, 222, 223, 225, 226, 227, 228, 229, 231, 236, 237, 238, 244, 245, 246, 247, 250, 251, 252, 253, 259, 262, 263, 264, 265, 266, 267, 270, 279, 280, 289, 290, 291, 292, 293, 295, 297, 298], "cheat": [1, 103, 132, 182], "compar": [1, 6, 12, 17, 20, 23, 24, 27, 41, 49, 88, 96, 103, 105, 110, 113, 118, 128, 133, 135, 136, 137, 139, 149, 151, 156, 157, 158, 160, 163, 166, 168, 169, 173, 176, 177, 178, 180, 182, 186, 189, 190, 192, 196, 198, 201, 202, 204, 205, 207, 213, 222, 223, 226, 228, 231, 238, 242, 243, 249, 251, 252, 261, 267, 269, 278, 279, 280, 284, 293, 294, 298], "dataset": [1, 7, 11, 20, 28, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 52, 55, 58, 59, 61, 63, 80, 96, 100, 105, 107, 123, 128, 131, 132, 133, 134, 139, 140, 141, 145, 149, 152, 168, 169, 174, 175, 179, 181, 182, 184, 186, 187, 189, 193, 221, 226, 227, 231, 252, 253, 254, 266, 267, 280, 284, 288, 295], "10m": 1, "element": [1, 6, 7, 14, 20, 23, 42, 45, 54, 55, 95, 96, 98, 100, 103, 107, 109, 110, 112, 132, 138, 149, 157, 163, 167, 176, 189, 192, 195, 214, 215, 216, 218, 231, 264, 266, 280], "2": [1, 2, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 37, 38, 40, 48, 55, 57, 58, 59, 61, 68, 69, 73, 74, 80, 93, 95, 96, 98, 103, 105, 106, 107, 109, 112, 114, 117, 118, 121, 122, 125, 128, 132, 133, 134, 135, 137, 139, 142, 143, 144, 145, 146, 147, 149, 150, 152, 157, 158, 160, 164, 166, 168, 173, 175, 176, 177, 178, 179, 180, 181, 189, 190, 192, 193, 196, 198, 200, 203, 204, 205, 207, 208, 213, 218, 222, 229, 233, 237, 238, 240, 241, 242, 245, 246, 247, 251, 252, 253, 262, 263, 265, 269, 277, 280, 285, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "anoth": [1, 4, 5, 6, 10, 13, 16, 24, 25, 27, 29, 36, 45, 48, 54, 55, 58, 68, 80, 90, 98, 100, 103, 104, 106, 110, 113, 120, 121, 122, 132, 141, 142, 143, 144, 146, 149, 150, 154, 155, 167, 169, 173, 176, 178, 179, 180, 181, 182, 190, 192, 193, 195, 197, 202, 205, 220, 223, 228, 237, 261, 262, 264, 270, 280, 281, 298], "actual": [1, 3, 6, 7, 10, 13, 15, 16, 17, 23, 25, 26, 27, 29, 36, 43, 55, 57, 58, 80, 90, 98, 105, 106, 109, 112, 118, 132, 135, 138, 139, 140, 143, 147, 149, 155, 156, 166, 169, 176, 182, 186, 187, 190, 192, 193, 202, 204, 205, 213, 215, 223, 225, 228, 236, 264, 267, 291], "ratio": [1, 87, 105, 157, 169, 176, 186, 195, 220], "interact": [1, 6, 7, 16, 55, 96, 102, 103, 139, 142, 144, 159, 176, 179, 187, 190, 192, 193, 223, 245, 292], "nutshel": [1, 215], "cautiou": 1, "about": [1, 4, 5, 6, 7, 10, 11, 12, 16, 17, 20, 23, 24, 25, 26, 27, 40, 41, 42, 45, 48, 55, 58, 59, 60, 61, 63, 77, 78, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 132, 134, 136, 139, 140, 141, 144, 146, 147, 149, 152, 155, 156, 157, 158, 166, 168, 169, 174, 175, 176, 177, 178, 180, 181, 182, 184, 186, 189, 190, 192, 193, 195, 196, 200, 203, 204, 205, 206, 214, 215, 216, 222, 223, 225, 226, 228, 229, 231, 234, 243, 245, 246, 247, 261, 267, 268, 269, 276, 277, 279, 282, 284, 290, 294, 295], "deal": [1, 6, 49, 55, 57, 58, 98, 105, 113, 121, 122, 134, 158, 169, 176, 192, 193, 245, 253, 282], "lead": [1, 4, 6, 7, 16, 18, 55, 58, 80, 87, 93, 105, 113, 140, 142, 144, 150, 152, 169, 174, 192, 215, 236, 243, 277, 280, 285, 298], "bias": [1, 37, 48, 100, 105, 122, 181, 196, 277, 282, 283], "comparison": [1, 11, 20, 25, 88, 96, 103, 104, 105, 106, 133, 151, 157, 158, 198, 201, 205, 213, 215, 218, 220, 221, 231, 279], "scale": [1, 7, 23, 37, 46, 57, 62, 80, 100, 102, 105, 115, 131, 132, 133, 134, 136, 147, 149, 150, 159, 171, 176, 177, 183, 184, 193, 197, 198, 205, 206, 228, 245, 246, 253, 263, 267, 280, 285, 292, 297], "help": [1, 4, 6, 10, 12, 17, 20, 22, 23, 26, 27, 36, 37, 48, 55, 58, 73, 87, 93, 96, 105, 106, 109, 110, 112, 113, 122, 131, 132, 133, 134, 139, 146, 147, 150, 151, 152, 157, 158, 163, 166, 172, 176, 177, 178, 179, 180, 181, 182, 189, 190, 192, 193, 200, 205, 206, 214, 215, 216, 218, 221, 223, 229, 231, 236, 240, 242, 243, 244, 246, 247, 253, 259, 262, 263, 264, 266, 278, 280, 281, 284, 290, 292, 293, 296, 298], "signal": [1, 48, 96, 98, 176, 178, 220, 267, 270, 279], "magnitud": [1, 20, 95, 173, 193, 231, 263], "truncat": [1, 103, 120, 157, 176, 231], "A": [1, 6, 7, 10, 13, 14, 16, 20, 25, 26, 29, 36, 37, 38, 42, 45, 52, 53, 54, 55, 57, 58, 59, 61, 68, 69, 72, 73, 74, 77, 78, 80, 87, 88, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 114, 121, 122, 131, 132, 134, 138, 139, 140, 141, 144, 145, 149, 152, 156, 166, 167, 168, 176, 177, 178, 179, 181, 182, 183, 184, 187, 189, 190, 192, 193, 196, 200, 204, 217, 218, 223, 229, 231, 244, 251, 252, 261, 264, 269, 277, 280, 282, 290, 292, 295, 297, 298], "thousand": [1, 112, 131, 137, 140, 150, 182, 189], "500": [1, 7, 28, 120, 160, 171, 177, 180, 264], "good": [1, 2, 5, 6, 7, 24, 25, 49, 56, 58, 98, 102, 103, 105, 107, 112, 115, 132, 133, 139, 149, 150, 157, 163, 175, 177, 181, 183, 187, 189, 192, 193, 195, 196, 217, 220, 228, 259, 261, 264, 280, 285, 298], "statist": [1, 49, 58, 98, 132, 143, 155, 156, 173, 174, 176, 182, 186, 187, 189, 202, 220, 223, 225, 253, 264], "arbitrari": [1, 6, 10, 16, 18, 36, 78, 96, 105, 110, 134, 152, 159, 168, 187, 190, 196, 220, 270, 271], "random": [1, 7, 16, 19, 23, 24, 25, 29, 45, 48, 49, 50, 52, 54, 57, 58, 68, 69, 70, 77, 78, 80, 96, 98, 102, 109, 110, 113, 114, 115, 120, 121, 128, 133, 134, 139, 141, 142, 147, 149, 151, 152, 159, 163, 166, 167, 173, 174, 176, 177, 178, 180, 182, 187, 190, 202, 206, 223, 225, 242, 264, 266, 267, 271, 280], "standard": [1, 6, 10, 24, 27, 29, 45, 49, 54, 58, 87, 93, 96, 98, 105, 106, 107, 113, 115, 117, 118, 149, 175, 184, 190, 192, 193, 195, 205, 218, 266, 267, 280], "deviat": [1, 87, 98, 105], "observationnorm": [1, 176], "init_stat": 1, "purpos": [1, 6, 24, 25, 26, 63, 80, 90, 95, 100, 104, 121, 133, 138, 139, 141, 149, 150, 155, 156, 157, 166, 171, 175, 176, 179, 180, 186, 190, 193, 200, 202, 205, 214, 217, 223, 244, 253, 267, 277, 280, 285, 289], "get": [1, 2, 6, 7, 8, 10, 13, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 38, 40, 48, 49, 50, 55, 56, 57, 58, 61, 62, 66, 80, 88, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 120, 121, 122, 128, 131, 132, 134, 136, 137, 139, 140, 141, 142, 149, 151, 152, 155, 156, 158, 166, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 179, 182, 186, 187, 189, 192, 193, 195, 200, 202, 204, 205, 206, 208, 213, 220, 221, 223, 225, 226, 228, 229, 231, 232, 237, 238, 242, 243, 247, 250, 251, 259, 261, 262, 264, 267, 270, 280, 283, 284, 285, 295, 297, 298, 299], "summari": [1, 87, 112, 139, 150, 169, 176, 186, 192, 223, 278, 279], "dummi": [1, 4, 10, 18, 24, 90, 98, 104, 147, 152, 158, 168, 171, 172, 193, 206, 221, 226, 227, 244, 253, 295, 297], "over": [1, 4, 5, 6, 7, 12, 13, 16, 18, 20, 22, 23, 24, 26, 27, 37, 38, 41, 42, 45, 49, 52, 54, 55, 56, 57, 58, 59, 61, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 113, 120, 121, 132, 133, 134, 135, 136, 137, 140, 142, 146, 147, 149, 152, 155, 156, 157, 158, 159, 160, 163, 168, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 187, 189, 190, 192, 193, 195, 196, 198, 202, 205, 206, 217, 223, 225, 231, 236, 251, 263, 267, 280, 283, 293, 294], "earlier": [1, 5, 6, 7, 26, 27, 80, 98, 100, 103, 106, 107, 110, 113, 133, 135, 137, 150, 166, 169, 176, 182, 192, 263, 264], "turn": [1, 5, 6, 7, 10, 16, 17, 23, 24, 27, 29, 46, 55, 96, 100, 103, 120, 141, 150, 158, 166, 167, 169, 173, 178, 182, 193, 207, 214, 215, 217, 226, 227, 247, 297], "seen": [1, 12, 13, 22, 23, 49, 52, 55, 57, 100, 103, 105, 110, 112, 113, 120, 150, 168, 179, 190, 192, 193, 217, 264, 292], "requir": [1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 17, 18, 22, 23, 24, 26, 27, 28, 29, 40, 46, 48, 55, 56, 57, 58, 61, 66, 88, 90, 93, 95, 99, 104, 112, 113, 117, 118, 133, 137, 139, 141, 143, 144, 146, 147, 149, 150, 151, 152, 154, 155, 158, 163, 166, 167, 168, 169, 171, 174, 175, 176, 178, 179, 180, 181, 182, 189, 190, 192, 193, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 214, 215, 216, 221, 228, 233, 236, 238, 240, 241, 243, 244, 246, 251, 252, 253, 263, 265, 266, 269, 270, 277, 279, 280, 285, 289, 290, 291, 292, 293, 296], "select": [1, 4, 6, 12, 27, 56, 87, 93, 102, 105, 113, 115, 160, 173, 177, 178, 180, 186, 187, 190, 192, 200, 202, 206, 208, 215, 217, 222, 223, 231, 237, 251, 270, 280, 290, 292], "recal": [1, 7, 27, 58, 95, 103, 106, 112, 147, 151, 176, 187, 214, 215, 216, 277, 279], "wrap": [1, 4, 6, 7, 12, 19, 26, 29, 38, 42, 50, 93, 98, 107, 109, 110, 115, 120, 133, 135, 138, 143, 147, 150, 155, 159, 169, 174, 176, 179, 180, 189, 192, 193, 203, 204, 226, 227, 240, 241, 244, 245, 259, 263, 267, 270, 299], "flow": [1, 5, 6, 16, 25, 27, 29, 36, 48, 58, 71, 75, 90, 102, 105, 115, 116, 117, 118, 132, 135, 176, 177, 186, 190, 202, 203, 204, 206, 221, 223, 225, 226, 227, 280, 284], "handl": [1, 6, 10, 12, 18, 27, 55, 58, 59, 90, 100, 103, 113, 114, 118, 132, 133, 140, 151, 152, 164, 168, 169, 171, 173, 175, 176, 179, 180, 181, 189, 190, 192, 193, 202, 206, 213, 215, 218, 236, 238, 243, 244, 252, 262, 269, 270, 279, 295, 298], "specifi": [1, 4, 5, 6, 7, 10, 11, 13, 18, 20, 23, 24, 26, 27, 28, 38, 42, 57, 58, 87, 93, 95, 96, 98, 100, 103, 104, 109, 114, 121, 133, 134, 135, 136, 137, 139, 140, 144, 150, 151, 152, 154, 172, 173, 176, 179, 180, 186, 189, 192, 197, 198, 213, 214, 215, 216, 218, 221, 222, 223, 225, 228, 231, 236, 237, 242, 253, 261, 269, 270, 278, 280, 281, 289, 292, 294, 295, 297, 298], "scenario": [1, 5, 7, 16, 114, 115, 117, 118, 122, 128, 138, 169, 177, 180, 192, 200, 217, 226, 227, 251, 277, 281, 298], "tensordictsequenti": [1, 150], "valueoper": 1, "automat": [1, 2, 4, 6, 7, 10, 12, 17, 26, 29, 37, 39, 40, 42, 45, 48, 50, 51, 52, 54, 59, 63, 66, 102, 104, 106, 113, 121, 125, 132, 133, 134, 135, 137, 138, 139, 144, 151, 155, 157, 160, 169, 171, 176, 177, 180, 183, 184, 186, 189, 192, 193, 198, 200, 202, 206, 229, 238, 242, 243, 244, 247, 251, 252, 253, 259, 265, 268, 269, 270, 276, 279, 280, 284, 292], "out_kei": [1, 16, 150, 176], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 5, 6, 7, 8, 10, 21, 26, 27, 36, 52, 95, 96, 98, 100, 107, 132, 140, 149, 150, 151, 176, 181, 187, 190, 192, 195, 220, 247, 253, 262, 264, 266, 283, 290], "present": [1, 7, 10, 22, 26, 41, 87, 88, 105, 114, 151, 167, 172, 173, 174, 177, 178, 180, 189, 190, 192, 195, 218, 280, 299], "origin": [1, 6, 7, 10, 14, 16, 20, 23, 24, 27, 36, 55, 58, 80, 93, 96, 103, 105, 110, 114, 115, 135, 137, 138, 140, 141, 151, 163, 164, 167, 168, 169, 173, 174, 177, 189, 190, 192, 197, 201, 202, 203, 205, 207, 216, 221, 223, 228, 231, 250, 252, 253, 259, 261, 267, 295], "paper": [1, 6, 14, 19, 20, 58, 80, 125, 134, 137, 151, 176, 177, 179, 181, 182, 184, 193, 196, 218, 231], "found": [1, 4, 5, 6, 7, 12, 19, 26, 27, 29, 55, 56, 96, 105, 135, 139, 147, 149, 150, 151, 155, 156, 160, 169, 179, 180, 181, 189, 192, 201, 202, 203, 206, 218, 237, 252, 259, 280, 295], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 5, 6, 10, 11, 12, 13, 15, 16, 19, 23, 24, 25, 27, 49, 55, 57, 58, 59, 80, 90, 95, 96, 98, 105, 106, 107, 109, 110, 112, 113, 115, 128, 135, 136, 137, 139, 140, 141, 142, 144, 145, 149, 150, 155, 156, 166, 167, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 187, 189, 190, 192, 193, 195, 196, 197, 202, 203, 205, 206, 213, 214, 215, 223, 225, 226, 227, 228, 238, 240, 242, 243, 244, 259, 264, 269, 270, 271, 283, 285, 293, 295, 299], "lazi": 1, "materi": [1, 133, 137, 158, 193, 196, 204, 213, 233, 267, 271, 277], "abl": [1, 3, 4, 5, 6, 7, 16, 17, 20, 27, 36, 37, 55, 68, 80, 90, 98, 105, 106, 108, 112, 113, 121, 128, 139, 143, 144, 145, 146, 149, 150, 152, 157, 159, 160, 166, 168, 174, 176, 179, 187, 190, 192, 193, 195, 196, 200, 202, 206, 215, 223, 228, 231, 238, 249, 266, 267, 277, 283, 292, 295], "devic": [1, 3, 4, 7, 10, 12, 13, 16, 18, 19, 20, 22, 23, 24, 27, 29, 45, 48, 49, 50, 54, 55, 56, 58, 59, 61, 62, 66, 69, 78, 93, 103, 105, 107, 115, 121, 131, 132, 133, 135, 137, 139, 140, 146, 147, 149, 150, 151, 152, 157, 160, 166, 169, 171, 173, 174, 175, 176, 179, 180, 186, 193, 195, 197, 198, 200, 201, 202, 204, 206, 207, 208, 221, 223, 225, 226, 227, 229, 231, 233, 240, 241, 243, 244, 246, 249, 250, 251, 252, 261, 264, 268, 270, 271, 276, 277, 281, 283, 284, 290, 291, 292, 294, 295, 296, 299], "achiev": [1, 3, 4, 7, 16, 20, 23, 28, 36, 49, 55, 62, 87, 93, 105, 132, 135, 138, 143, 149, 150, 151, 157, 166, 167, 169, 173, 174, 176, 177, 186, 193, 196, 197, 202, 204, 205, 206, 225, 226, 231, 234, 242, 251, 280, 284, 292, 294, 298], "oper": [1, 5, 7, 15, 16, 17, 20, 21, 22, 23, 24, 25, 29, 36, 37, 42, 48, 50, 52, 55, 57, 66, 68, 69, 73, 78, 87, 88, 90, 98, 99, 103, 105, 106, 107, 112, 113, 114, 115, 116, 117, 120, 121, 132, 133, 135, 136, 137, 138, 140, 142, 144, 149, 150, 151, 152, 154, 155, 157, 158, 160, 163, 168, 171, 172, 175, 176, 178, 182, 186, 187, 189, 190, 192, 193, 196, 202, 203, 205, 206, 213, 214, 217, 221, 222, 223, 225, 226, 227, 231, 234, 236, 237, 244, 245, 247, 249, 251, 252, 259, 261, 262, 263, 264, 266, 267, 270, 271, 279, 283, 284, 290, 291, 292, 295, 298, 299], "practic": [1, 6, 7, 13, 24, 27, 43, 52, 55, 57, 58, 95, 96, 98, 103, 105, 107, 113, 114, 121, 125, 128, 132, 137, 138, 145, 150, 151, 157, 167, 173, 176, 177, 192, 196, 213, 214, 218, 220, 264, 265, 269, 280, 285, 294, 295, 298], "small": [1, 3, 6, 7, 11, 20, 22, 24, 25, 27, 28, 29, 48, 49, 52, 63, 80, 95, 98, 100, 102, 103, 105, 107, 108, 110, 115, 121, 128, 133, 134, 136, 139, 140, 141, 143, 156, 166, 167, 169, 174, 175, 176, 177, 180, 182, 184, 189, 193, 195, 200, 205, 213, 231, 251, 263, 264, 266, 280, 295, 296], "fake": [1, 7, 20, 23, 29, 52, 58, 166, 174, 192, 218, 223, 225, 228, 231, 261], "spec": [1, 118, 150, 176, 180, 192, 197, 228, 264], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 5, 14, 58, 92, 105, 135, 141, 151, 157, 158, 159, 160, 163, 174, 186, 189, 200, 267], "ou": 1, "nois": [1, 7, 14, 58, 80, 220, 245, 279], "reach": [1, 12, 20, 58, 66, 105, 140, 147, 149, 151, 159, 160, 176, 180, 192, 231, 253, 264], "minimum": [1, 4, 87, 135, 176, 180, 215], "iter": [1, 3, 5, 7, 13, 14, 16, 28, 36, 37, 41, 42, 48, 49, 52, 58, 59, 61, 90, 93, 95, 96, 98, 100, 106, 113, 115, 122, 139, 142, 145, 147, 150, 155, 157, 174, 176, 177, 178, 179, 180, 186, 187, 190, 193, 195, 202, 223, 225, 241, 250, 259, 263, 267, 278, 280, 283, 293, 295, 299], "reset": [1, 23, 41, 98, 103, 113, 128, 150, 176, 177, 178, 180, 186, 190, 202, 207, 220, 223, 225, 253, 296], "develop": [1, 3, 4, 5, 6, 10, 12, 14, 17, 25, 26, 27, 28, 29, 87, 90, 96, 109, 113, 115, 117, 142, 149, 160, 172, 180, 186, 190, 196, 197, 205, 207, 208, 213, 216, 217, 223, 225, 228, 234, 244, 245, 247, 249, 252, 253, 267, 268, 280, 297], "tight": [1, 114, 115, 117, 118], "per": [1, 4, 6, 7, 10, 13, 23, 105, 112, 132, 134, 140, 141, 143, 147, 149, 150, 151, 158, 160, 166, 171, 173, 180, 181, 182, 183, 186, 187, 189, 192, 193, 195, 198, 200, 204, 206, 213, 227, 236, 238, 242, 243, 244, 247, 250, 253, 264, 269, 279, 289, 298, 299], "sync": [1, 12, 13, 19, 61, 132, 133, 134, 135, 136, 159, 193], "natur": [1, 6, 7, 20, 22, 27, 28, 29, 50, 80, 100, 105, 113, 139, 140, 150, 151, 169, 179, 189, 215, 218, 223, 228, 231, 238], "resourc": [1, 59, 80, 93, 115, 117, 133, 147, 149, 166, 176, 186, 189, 200, 247, 249, 264, 280, 285, 288, 298], "alloc": [1, 7, 22, 25, 26, 27, 45, 54, 61, 103, 143, 149, 166, 169, 186, 192, 193, 218, 233, 244, 269, 270, 299], "gpu": [1, 3, 5, 14, 20, 22, 23, 24, 45, 48, 52, 54, 55, 56, 58, 59, 60, 62, 63, 66, 69, 78, 87, 88, 98, 99, 103, 104, 105, 107, 115, 121, 125, 128, 131, 132, 133, 134, 135, 137, 138, 140, 145, 146, 147, 149, 150, 151, 152, 157, 160, 163, 166, 168, 171, 174, 176, 177, 179, 180, 181, 189, 190, 195, 198, 200, 204, 206, 207, 208, 221, 222, 231, 232, 237, 238, 240, 243, 244, 247, 259, 263, 264, 267, 270, 283, 284, 290, 292], "worker": [1, 7, 13, 19, 57, 58, 98, 131, 133, 134, 136, 149, 160, 176, 179, 180, 186, 242, 247, 280], "so": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 49, 52, 55, 57, 58, 59, 70, 73, 80, 88, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 120, 121, 128, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 149, 150, 151, 155, 157, 158, 159, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 190, 192, 193, 195, 196, 197, 200, 202, 203, 204, 205, 206, 213, 215, 216, 217, 218, 220, 223, 225, 228, 231, 233, 237, 247, 251, 252, 259, 261, 263, 264, 267, 269, 279, 280, 283, 284, 293, 294, 295, 298, 299], "syncdatacollector": [1, 176], "process": [1, 4, 5, 6, 7, 13, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 38, 41, 42, 46, 52, 55, 56, 57, 58, 62, 66, 80, 87, 90, 95, 96, 98, 100, 104, 105, 113, 114, 115, 122, 125, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 145, 146, 149, 150, 151, 156, 157, 159, 160, 168, 169, 175, 177, 179, 180, 181, 182, 186, 189, 192, 193, 200, 202, 204, 205, 206, 217, 220, 221, 222, 227, 229, 231, 234, 238, 242, 243, 244, 246, 253, 261, 264, 266, 269, 270, 279, 280, 281, 283, 284, 289, 294, 295, 296, 298, 299], "offer": [1, 4, 8, 13, 16, 18, 22, 42, 46, 48, 59, 66, 95, 96, 107, 134, 135, 137, 152, 154, 157, 158, 169, 193, 196, 223, 244, 247, 262, 264, 270, 279, 280, 285, 298], "multiasyncdatacollector": [1, 176], "rollout": [1, 176], "asynchron": [1, 25, 131, 132, 136, 139, 172, 176, 180, 270, 284], "manner": [1, 6, 10, 16, 23, 36, 95, 113, 176, 189, 193, 247], "therebi": [1, 207, 213, 218, 295], "decoupl": [1, 38, 167, 223], "factori": [1, 7, 103, 109, 214, 215, 265, 269], "empti": [1, 4, 6, 7, 10, 16, 23, 25, 27, 103, 141, 157, 175, 182, 186, 189, 192, 196, 204, 206, 233, 237, 270, 279], "maximum": [1, 13, 55, 87, 98, 100, 110, 139, 141, 150, 151, 157, 176, 181, 182, 206, 217, 220, 280], "non": [1, 2, 3, 6, 10, 13, 16, 23, 26, 37, 55, 57, 59, 60, 62, 87, 90, 100, 103, 105, 106, 108, 112, 113, 122, 134, 135, 139, 143, 144, 149, 150, 151, 154, 158, 160, 163, 173, 174, 178, 181, 182, 186, 190, 193, 196, 202, 205, 206, 213, 221, 226, 227, 233, 244, 261, 264, 277, 281, 294, 298], "termin": [1, 16, 27, 59, 93, 176, 177, 179, 180, 189, 237], "max_frames_per_traj": [1, 176], "effect": [1, 6, 7, 10, 11, 13, 18, 27, 61, 80, 87, 96, 100, 103, 105, 113, 118, 137, 140, 141, 147, 152, 166, 168, 169, 173, 177, 181, 182, 189, 193, 215, 226, 227, 228, 236, 243, 245, 263, 267, 280, 285, 294], "regist": [1, 8, 18, 26, 41, 48, 52, 100, 118, 120, 122, 132, 134, 135, 137, 147, 154, 166, 167, 176, 192, 200, 204, 238, 247, 252, 259, 263, 271, 282], "new": [1, 2, 4, 5, 6, 7, 8, 10, 14, 16, 18, 26, 27, 28, 29, 35, 36, 40, 45, 48, 50, 54, 55, 56, 58, 61, 67, 80, 82, 83, 84, 85, 87, 90, 98, 102, 103, 104, 105, 107, 110, 112, 117, 118, 120, 122, 128, 132, 133, 134, 135, 136, 138, 142, 150, 151, 154, 155, 157, 159, 166, 167, 168, 169, 172, 173, 174, 176, 177, 178, 181, 182, 186, 189, 192, 193, 195, 197, 200, 204, 207, 208, 213, 218, 220, 222, 223, 225, 226, 228, 236, 237, 238, 247, 259, 267, 270, 277, 280, 281, 284, 286], "stepcount": [1, 150, 176], "infer": [1, 3, 7, 8, 10, 11, 12, 23, 24, 25, 26, 27, 43, 45, 54, 55, 96, 98, 100, 104, 105, 109, 112, 113, 115, 132, 135, 138, 139, 142, 143, 155, 157, 176, 178, 189, 190, 192, 195, 206, 217, 218, 221, 222, 223, 225, 226, 227, 231, 234, 237, 238, 244, 253, 259, 261, 266, 267, 268, 282, 284, 285, 292, 295, 298], "manual": [1, 4, 6, 10, 14, 18, 26, 27, 38, 52, 55, 59, 74, 77, 78, 103, 105, 113, 121, 122, 135, 144, 150, 152, 167, 168, 169, 171, 174, 192, 193, 202, 203, 206, 218, 225, 238, 242, 246, 259, 263, 280, 298], "around": [1, 6, 7, 13, 27, 28, 38, 42, 55, 61, 96, 98, 100, 103, 105, 128, 132, 141, 152, 157, 158, 163, 168, 174, 182, 186, 187, 192, 193, 202, 204, 213, 214, 223, 251, 267, 271], "1m": [1, 38, 49, 98, 150, 166, 176, 198], "outer": [1, 7, 134, 158], "loop": [1, 3, 5, 6, 10, 13, 19, 23, 25, 29, 40, 42, 49, 52, 55, 57, 58, 80, 90, 95, 98, 102, 105, 113, 121, 133, 135, 139, 140, 142, 151, 152, 157, 158, 159, 166, 168, 169, 179, 180, 187, 193, 203, 206, 231, 251, 264, 270, 280, 283], "equal": [1, 5, 12, 95, 103, 105, 138, 151, 160, 173, 176, 177, 189, 192, 200, 204, 216, 247, 295, 298], "length": [1, 14, 16, 55, 58, 95, 96, 100, 112, 113, 137, 141, 151, 176, 181, 182, 193, 196, 198, 206, 215, 218, 222, 231, 236, 247, 284, 294], "sub": [1, 7, 24, 29, 95, 120, 137, 142, 171, 176, 180, 186, 190, 193, 206, 246, 289, 298], "shape": [1, 4, 5, 18, 20, 27, 36, 38, 45, 48, 54, 55, 58, 73, 90, 95, 98, 105, 106, 109, 112, 120, 121, 134, 137, 140, 141, 142, 151, 152, 154, 158, 166, 168, 176, 186, 189, 193, 195, 196, 205, 206, 216, 218, 223, 227, 231, 233, 251, 259, 264, 267, 268, 270, 276, 280, 284, 289, 290, 292, 293, 295], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 7, 10, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 36, 37, 41, 42, 46, 48, 49, 50, 55, 62, 69, 77, 80, 87, 90, 93, 95, 98, 100, 103, 104, 105, 106, 107, 112, 113, 122, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 149, 150, 151, 154, 155, 158, 159, 163, 169, 171, 172, 174, 176, 177, 178, 180, 183, 184, 187, 189, 190, 192, 193, 195, 196, 198, 202, 204, 205, 206, 207, 213, 214, 218, 220, 221, 222, 225, 226, 227, 231, 233, 238, 240, 242, 246, 247, 249, 250, 252, 259, 261, 263, 264, 265, 267, 268, 269, 270, 276, 279, 283, 284, 285, 288, 292, 294, 295, 296, 297], "assess": [1, 169, 193], "mode": [1, 5, 14, 24, 43, 48, 55, 58, 61, 80, 87, 90, 92, 96, 102, 122, 132, 134, 142, 143, 144, 150, 155, 157, 159, 160, 163, 171, 174, 178, 181, 182, 183, 187, 189, 190, 192, 196, 197, 200, 204, 220, 221, 222, 225, 226, 227, 228, 232, 244, 247, 251, 253, 264, 280, 284, 287, 294, 295, 298], "dedic": [1, 12, 61, 103, 179, 180, 226, 261, 262, 263, 299], "frequenc": [1, 88, 139], "everi": [1, 2, 7, 10, 12, 16, 17, 20, 22, 23, 28, 36, 37, 38, 42, 48, 49, 52, 55, 57, 58, 61, 66, 95, 98, 100, 102, 103, 104, 128, 137, 138, 140, 141, 143, 149, 150, 154, 160, 166, 167, 168, 169, 173, 174, 176, 177, 178, 180, 182, 186, 187, 190, 192, 193, 218, 223, 225, 231, 240, 265, 278, 280, 291, 299], "10": [1, 3, 5, 7, 10, 13, 20, 23, 27, 37, 38, 46, 48, 49, 50, 55, 59, 73, 80, 88, 93, 98, 104, 107, 120, 122, 133, 134, 136, 142, 147, 149, 152, 160, 174, 175, 178, 179, 180, 181, 182, 183, 186, 187, 189, 192, 193, 196, 197, 200, 204, 205, 208, 222, 223, 225, 231, 233, 237, 240, 242, 243, 246, 251, 253, 259, 264, 266, 270, 278, 279, 295], "come": [1, 6, 7, 12, 20, 23, 24, 26, 27, 46, 57, 58, 80, 90, 93, 95, 100, 103, 105, 106, 118, 122, 133, 137, 139, 149, 150, 157, 166, 167, 169, 172, 176, 181, 190, 192, 193, 196, 202, 205, 206, 225, 226, 227, 231, 253, 264, 290, 299], "flavor": [1, 4, 6, 27], "priorit": [1, 218, 280], "error": [1, 4, 5, 6, 7, 10, 12, 13, 14, 18, 26, 41, 42, 48, 52, 55, 56, 59, 73, 95, 98, 100, 103, 105, 109, 113, 117, 118, 121, 134, 136, 138, 144, 166, 172, 176, 177, 190, 193, 196, 200, 205, 213, 220, 223, 229, 246, 252, 264, 277, 280, 283, 293, 297], "higher": [1, 23, 24, 49, 54, 59, 87, 95, 96, 100, 105, 107, 121, 133, 134, 140, 141, 144, 154, 158, 174, 175, 176, 177, 186, 187, 189, 192, 193, 202, 206, 220, 221, 223, 226, 227, 234, 236, 238, 241, 246, 249, 261, 267], "likelihood": [1, 41, 55, 100, 107, 113], "regular": [1, 5, 6, 7, 10, 12, 23, 27, 28, 105, 113, 125, 140, 141, 158, 167, 168, 169, 184, 193, 196, 213, 215, 218, 221, 226, 227, 252, 280, 292], "circular": [1, 200, 229], "compos": [1, 4, 6, 7, 8, 12, 18, 20, 23, 25, 29, 49, 66, 98, 100, 107, 132, 133, 149, 154, 155, 163, 168, 174, 175, 176, 179, 181, 183, 187, 189, 196, 202, 223, 225, 228, 246, 252, 253, 262, 266, 270, 285, 288, 290], "pick": [1, 7, 23, 49, 106, 140, 177, 182, 247, 259, 279, 284, 290], "tensor": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 23, 24, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 55, 63, 66, 67, 69, 70, 72, 73, 74, 76, 79, 80, 90, 95, 96, 97, 99, 100, 102, 104, 105, 107, 110, 113, 114, 115, 118, 120, 122, 132, 133, 134, 135, 141, 142, 143, 144, 147, 149, 150, 151, 152, 154, 157, 158, 160, 163, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 186, 187, 189, 190, 192, 193, 195, 198, 200, 202, 204, 205, 206, 207, 208, 213, 214, 215, 220, 222, 223, 226, 227, 231, 232, 233, 234, 236, 237, 242, 245, 246, 247, 249, 251, 252, 261, 262, 263, 264, 266, 267, 268, 269, 270, 271, 276, 279, 282, 283, 284, 289, 292, 297], "physic": [1, 16, 112, 169, 269, 280, 298], "memori": [1, 5, 6, 7, 10, 12, 19, 20, 22, 23, 25, 26, 27, 45, 54, 55, 57, 61, 93, 100, 103, 104, 105, 108, 111, 113, 115, 122, 132, 133, 134, 135, 137, 145, 149, 150, 157, 158, 159, 163, 173, 179, 181, 183, 186, 189, 192, 193, 195, 196, 198, 200, 204, 205, 213, 216, 218, 226, 227, 231, 238, 242, 250, 252, 261, 263, 264, 267, 269, 271, 284, 289, 299], "map": [1, 7, 14, 37, 55, 58, 96, 98, 100, 105, 110, 112, 122, 135, 140, 150, 152, 158, 166, 167, 168, 176, 177, 180, 189, 192, 195, 202, 223, 228, 231, 236, 242, 244, 269, 279, 280, 282], "arrai": [1, 7, 36, 37, 48, 49, 52, 57, 66, 77, 78, 90, 95, 96, 103, 112, 113, 120, 121, 140, 141, 159, 174, 175, 182, 189, 216, 262], "desir": [1, 4, 6, 10, 14, 16, 19, 55, 58, 80, 87, 105, 122, 135, 149, 155, 173, 186, 189, 192, 198, 200, 205, 214, 233, 259, 263, 266, 295, 298], "hyperparamet": [1, 7, 16, 20, 58, 113, 122, 123, 132, 139, 140, 213, 218, 282], "temporari": [1, 6, 139, 201], "directori": [1, 5, 6, 7, 11, 14, 26, 27, 38, 55, 57, 58, 93, 102, 105, 122, 125, 128, 139, 140, 141, 151, 157, 174, 182, 186, 189, 200, 205, 206, 244, 253, 259, 278, 289, 298], "disk": [1, 5, 27, 29, 38, 98, 102, 115, 122, 150, 169, 200, 204, 264, 269, 270, 278, 289, 290], "along": [1, 5, 6, 7, 10, 16, 20, 25, 27, 36, 37, 45, 48, 54, 55, 59, 60, 61, 62, 88, 95, 96, 98, 99, 100, 102, 103, 104, 105, 109, 110, 113, 114, 128, 133, 134, 140, 141, 145, 146, 150, 166, 173, 177, 179, 187, 189, 192, 193, 198, 215, 221, 222, 231, 233, 294], "dimens": [1, 6, 7, 14, 16, 22, 24, 25, 37, 45, 49, 52, 54, 55, 96, 98, 100, 102, 107, 109, 110, 112, 113, 132, 137, 140, 150, 152, 160, 168, 175, 176, 178, 192, 193, 198, 214, 218, 222, 223, 225, 236, 263, 267, 280, 295], "feed": [1, 7, 14, 23, 49, 52, 55, 98, 100, 104, 105, 108, 110, 115, 122, 137, 140, 141, 147, 159, 177, 182, 187, 220, 244, 266, 283], "adapt": [1, 2, 16, 20, 28, 93, 98, 115, 139, 198, 231, 264], "divid": [1, 10, 12, 13, 14, 16, 17, 23, 90, 105, 107, 136, 149, 167, 169, 180, 295, 298], "yield": [1, 7, 13, 14, 20, 23, 25, 41, 43, 103, 122, 137, 138, 178, 180, 196, 205, 216, 231, 251, 253, 280], "regard": [1, 7, 13, 16, 27, 122, 157, 158, 176, 186, 193, 294], "200": [1, 7, 11, 150, 160, 180, 205, 251], "random_crop_len": 1, "25": [1, 26, 27, 38, 80, 95, 98, 105, 107, 120, 128, 133, 174, 179, 189, 205, 251, 264, 270], "balanc": [1, 7, 22, 147, 186, 193, 259], "choic": [1, 4, 5, 7, 10, 18, 93, 139, 141, 149, 169, 193, 240, 280], "heterogen": [1, 222], "figur": [1, 10, 14, 16, 26, 38, 55, 80, 87, 98, 105, 132, 136, 137, 139, 150, 157, 169, 178, 186, 187, 189, 192, 202, 220, 223], "dataflow": 1, "8": [1, 3, 6, 7, 20, 23, 27, 38, 49, 93, 98, 100, 107, 110, 120, 121, 134, 137, 143, 147, 151, 155, 157, 160, 166, 171, 174, 175, 186, 189, 192, 193, 198, 200, 205, 206, 208, 226, 227, 231, 237, 238, 242, 243, 244, 245, 246, 247, 251, 253, 261, 263, 270, 280, 298, 299], "1000": [1, 2, 23, 48, 102, 104, 128, 133, 134, 138, 157, 176, 187, 226, 231, 242, 259, 264, 279], "known": [1, 4, 5, 6, 14, 20, 95, 137, 149, 151, 154, 156, 173, 177, 182, 192, 193, 200, 206, 228, 231, 238, 264, 267, 279, 290], "utd": 1, "64": [1, 6, 7, 17, 20, 22, 23, 27, 38, 42, 48, 93, 98, 103, 110, 113, 133, 134, 137, 150, 152, 168, 175, 178, 179, 193, 198, 217, 231, 236, 238, 251, 253, 264, 270, 285], "reproduc": [1, 14, 58, 80, 98, 103, 105, 151, 157, 176, 177, 180, 190, 206, 251, 264, 280], "realiz": [1, 20, 231], "sever": [1, 2, 3, 4, 12, 13, 17, 19, 23, 26, 29, 36, 42, 46, 50, 52, 58, 59, 60, 80, 105, 107, 134, 140, 146, 149, 159, 166, 167, 169, 172, 174, 176, 178, 179, 186, 187, 190, 192, 196, 215, 221, 228, 251, 252, 264, 279, 289, 290, 298], "qnet": 1, "ve": [1, 6, 7, 10, 20, 25, 26, 29, 50, 52, 56, 95, 96, 98, 100, 103, 104, 113, 132, 138, 150, 156, 158, 166, 168, 169, 179, 187, 192, 193, 205, 213, 215, 216, 217, 231, 243, 244, 264, 267], "becaus": [1, 2, 4, 5, 6, 7, 10, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 36, 38, 43, 45, 48, 49, 52, 54, 55, 57, 58, 61, 62, 80, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 113, 114, 115, 118, 122, 128, 134, 135, 138, 140, 143, 144, 147, 150, 151, 154, 158, 159, 160, 163, 168, 169, 173, 174, 178, 180, 182, 184, 186, 190, 192, 195, 196, 201, 203, 205, 206, 213, 215, 220, 225, 228, 231, 234, 236, 240, 251, 261, 264, 267, 277, 280, 282, 283, 295], "_must_": 1, "off": [1, 10, 19, 23, 25, 28, 36, 38, 48, 55, 100, 103, 122, 133, 139, 140, 157, 166, 174, 176, 178, 179, 180, 189, 213, 243, 267, 284, 297], "dictat": [1, 16], "introduc": [1, 13, 17, 19, 20, 25, 26, 27, 28, 37, 40, 60, 93, 96, 105, 107, 120, 121, 132, 134, 136, 142, 147, 157, 160, 166, 178, 180, 181, 182, 189, 190, 192, 193, 201, 202, 204, 206, 207, 208, 213, 215, 216, 217, 220, 221, 223, 226, 227, 228, 231, 234, 236, 238, 242, 243, 252, 277, 280, 295, 296, 298], "outdat": 1, "trick": [1, 4, 7, 12, 55, 103, 144, 149, 158], "multi": [1, 6, 7, 16, 22, 52, 55, 58, 59, 60, 62, 66, 95, 96, 100, 103, 107, 132, 134, 135, 137, 145, 146, 147, 150, 151, 176, 178, 181, 183, 186, 195, 206, 218, 244, 246, 280, 298], "altern": [1, 7, 12, 27, 54, 55, 110, 128, 133, 152, 156, 160, 172, 174, 176, 182, 186, 189, 190, 196, 202, 205, 216, 217, 226, 227, 244, 277, 280, 296], "hack": [1, 151, 206, 213, 277], "find": [1, 2, 4, 5, 6, 7, 10, 12, 20, 26, 27, 36, 38, 45, 54, 80, 87, 88, 90, 93, 98, 100, 103, 106, 109, 113, 132, 133, 136, 140, 149, 151, 154, 155, 157, 167, 174, 177, 180, 182, 186, 192, 193, 203, 213, 214, 215, 216, 217, 220, 223, 228, 231, 253, 259, 262, 264, 278], "well": [1, 3, 4, 5, 6, 7, 10, 12, 13, 23, 24, 26, 27, 38, 45, 49, 54, 55, 59, 87, 90, 93, 96, 98, 105, 107, 109, 113, 115, 122, 128, 133, 134, 135, 138, 139, 140, 143, 144, 149, 150, 151, 154, 155, 166, 167, 169, 171, 174, 175, 178, 179, 180, 181, 182, 186, 187, 189, 190, 193, 195, 202, 206, 213, 214, 215, 218, 220, 223, 225, 228, 233, 243, 244, 246, 252, 259, 264, 267, 269, 277, 279, 280, 282, 290, 291, 292, 295, 296, 298], "despit": [1, 80, 142, 147], "fact": [1, 3, 4, 6, 7, 10, 14, 16, 23, 26, 27, 36, 45, 80, 95, 96, 98, 100, 103, 105, 107, 112, 138, 167, 176, 177, 187, 192, 193, 196], "part": [1, 3, 6, 7, 10, 12, 15, 16, 17, 19, 24, 27, 41, 48, 50, 55, 58, 80, 93, 95, 96, 100, 106, 108, 112, 113, 114, 132, 134, 137, 138, 140, 141, 144, 145, 149, 150, 151, 156, 157, 164, 166, 167, 176, 182, 192, 193, 198, 200, 202, 203, 205, 207, 213, 215, 217, 222, 225, 247, 253, 259, 262, 263, 267, 277, 279, 285, 289, 292, 295], "made": [1, 7, 12, 17, 23, 29, 58, 93, 96, 103, 105, 134, 136, 138, 149, 150, 169, 182, 187, 189, 192, 216, 222, 228, 261, 262, 267, 280], "thank": [1, 11, 23, 55, 113, 139, 140, 141, 149, 151, 182, 196, 206, 220], "hardupd": 1, "softupd": [1, 150], "appropri": [1, 7, 10, 55, 96, 113, 139, 147, 167, 174, 179, 187, 193, 196, 202, 204, 221, 223, 225, 226, 227, 251, 252, 263], "locat": [1, 4, 7, 35, 38, 45, 54, 87, 96, 98, 112, 120, 149, 169, 174, 176, 186, 195, 200, 244, 259, 270, 280, 289], "adam": [1, 7, 13, 15, 41, 52, 58, 74, 104, 107, 121, 135, 149, 166, 177, 178, 180, 240, 241, 243, 244, 249, 299], "pretti": [1, 19, 25, 49, 103, 120, 121, 158, 180, 202, 236], "plot": [1, 7, 58, 80, 87, 95, 139, 150, 169, 177, 178, 187, 189, 220], "alreadi": [1, 2, 4, 5, 6, 7, 12, 13, 17, 26, 27, 95, 98, 103, 105, 106, 113, 137, 139, 147, 160, 166, 169, 171, 174, 175, 176, 181, 187, 193, 215, 217, 228, 229, 242, 246, 247, 251, 252, 261, 264, 266, 280, 281, 282, 283, 285, 299], "mention": [1, 4, 6, 7, 12, 13, 17, 19, 58, 80, 90, 103, 105, 106, 122, 133, 137, 149, 150, 169, 177, 179, 186, 189, 192, 196, 206, 223, 244, 259, 269, 277, 289, 298], "greater": [1, 13, 55, 58, 96, 121, 138, 237, 298], "concret": [1, 6, 7, 10, 13, 95, 169, 176, 192, 213, 228], "takeawai": [1, 125, 196], "further": [1, 5, 6, 7, 10, 23, 25, 27, 52, 80, 93, 100, 105, 113, 137, 149, 155, 157, 169, 173, 176, 189, 190, 192, 205, 218, 220, 221, 222, 223, 225, 226, 229, 243, 247, 252, 261, 269, 280, 288], "might": [1, 4, 6, 10, 12, 17, 18, 19, 29, 36, 43, 49, 56, 57, 58, 59, 95, 98, 103, 105, 106, 110, 112, 115, 118, 120, 135, 144, 145, 146, 147, 149, 155, 156, 158, 167, 169, 174, 177, 180, 181, 182, 186, 190, 192, 193, 195, 196, 200, 202, 205, 206, 213, 223, 228, 229, 237, 246, 264, 265, 270, 277, 280, 285, 295, 298], "dispatch": [1, 4, 6, 17, 132, 135, 172, 196, 238, 251, 259, 263, 291], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 27, 28, 29, 55, 90, 95, 113, 115, 122, 132, 134, 135, 145, 196, 221, 226, 244, 264], "runnable_code_remov": [1, 11, 14, 15, 16, 18, 20, 24, 26, 27, 28, 29, 36, 37, 40, 41, 42, 43, 45, 46, 48, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 74, 77, 78, 80, 90, 93, 95, 96, 99, 100, 102, 103, 104, 105, 106, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 125, 128, 138, 139, 140, 141, 143, 150, 154, 155, 156, 157, 158, 159, 160, 161, 163, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 190, 192, 193, 195, 196, 201, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 263, 264, 265, 266, 267, 269, 270, 271, 277, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "minut": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 136, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 175, 176, 177, 181, 182, 184, 186, 187, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "002": [1, 11, 14, 15, 16, 18, 21, 29, 36, 37, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 57, 77, 78, 79, 93, 95, 100, 101, 103, 106, 110, 111, 112, 113, 115, 118, 119, 123, 125, 134, 138, 139, 140, 143, 150, 156, 159, 160, 163, 167, 168, 173, 176, 177, 182, 183, 184, 213, 214, 216, 220, 232, 241, 249, 265, 269, 271, 276, 277, 285, 287, 291, 292, 294, 296], "python": [1, 3, 5, 7, 11, 12, 14, 15, 16, 17, 20, 21, 22, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 59, 61, 62, 63, 68, 69, 70, 72, 73, 74, 77, 78, 80, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 133, 134, 138, 139, 140, 141, 142, 143, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 175, 176, 177, 179, 181, 182, 184, 186, 190, 192, 193, 195, 196, 198, 200, 201, 203, 204, 205, 206, 207, 213, 214, 215, 216, 218, 220, 221, 222, 223, 226, 227, 229, 234, 236, 241, 244, 245, 246, 247, 249, 252, 253, 259, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 291, 292, 293, 295, 297, 298], "sourc": [1, 3, 6, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 24, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 61, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 134, 137, 138, 139, 140, 141, 143, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 172, 173, 176, 177, 178, 180, 181, 182, 184, 186, 189, 190, 192, 193, 195, 196, 200, 201, 204, 205, 207, 213, 214, 215, 216, 218, 220, 222, 226, 234, 236, 237, 241, 249, 250, 252, 253, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "coding_ddpg": [1, 21], "py": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 171, 172, 173, 176, 177, 179, 181, 182, 183, 184, 186, 190, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 206, 213, 214, 215, 216, 218, 220, 226, 227, 229, 232, 234, 236, 237, 241, 245, 246, 249, 253, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 276, 277, 278, 279, 280, 281, 282, 283, 285, 287, 291, 292, 293, 294, 295, 296, 298], "jupyt": [1, 11, 14, 15, 16, 18, 20, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "notebook": [1, 11, 14, 15, 16, 18, 20, 22, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "ipynb": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "galleri": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "sphinx": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 176, 177, 181, 182, 184, 186, 190, 192, 193, 195, 196, 201, 204, 205, 213, 214, 215, 216, 218, 220, 234, 236, 241, 249, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 285, 291, 292, 293, 294, 296], "The": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 42, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 72, 73, 74, 78, 80, 87, 88, 90, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 129, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 163, 166, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 189, 190, 192, 193, 195, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 234, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 250, 251, 252, 253, 254, 261, 263, 264, 266, 267, 269, 270, 277, 278, 279, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299], "packag": [2, 4, 6, 7, 20, 22, 26, 27, 28, 49, 52, 57, 63, 66, 73, 74, 93, 104, 105, 107, 113, 117, 121, 128, 131, 132, 133, 134, 147, 149, 151, 156, 172, 174, 175, 177, 180, 186, 189, 190, 206, 229, 231, 246, 252, 262, 266, 270, 279, 283, 284, 295, 297], "build": [2, 7, 16, 23, 24, 29, 36, 38, 39, 40, 41, 42, 43, 45, 46, 52, 55, 66, 73, 74, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 112, 113, 120, 121, 125, 131, 132, 140, 141, 149, 150, 151, 154, 164, 166, 168, 169, 176, 177, 178, 179, 180, 183, 192, 193, 200, 201, 202, 206, 208, 218, 222, 223, 226, 236, 252, 264, 266, 279, 280, 292, 295], "highli": [2, 6, 7, 12, 22, 55, 93, 182, 193, 236, 280], "dynam": [2, 5, 6, 7, 10, 14, 16, 17, 21, 23, 24, 26, 27, 29, 36, 48, 59, 70, 95, 105, 108, 111, 114, 121, 122, 132, 142, 160, 173, 176, 197, 202, 203, 205, 222, 223, 225, 226, 232, 252, 253, 263, 268, 276, 280, 284, 287, 290, 292, 295], "neural": [2, 6, 15, 16, 20, 21, 24, 36, 39, 40, 42, 48, 51, 53, 55, 57, 63, 73, 80, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 110, 112, 115, 117, 121, 128, 132, 139, 140, 141, 142, 143, 150, 164, 173, 176, 177, 179, 182, 183, 184, 187, 189, 217, 221, 222, 226, 231, 238, 251, 252, 259, 267, 268, 276, 280, 284, 285], "network": [2, 3, 6, 10, 14, 15, 16, 20, 23, 24, 25, 29, 36, 39, 40, 41, 42, 43, 48, 51, 53, 55, 57, 63, 73, 74, 80, 95, 96, 98, 100, 104, 105, 106, 108, 109, 111, 112, 113, 115, 117, 121, 128, 132, 138, 139, 142, 143, 146, 147, 163, 164, 167, 169, 173, 174, 179, 183, 186, 187, 189, 200, 217, 221, 222, 226, 231, 238, 251, 252, 253, 259, 267, 268, 271, 276, 280, 284, 285], "api": [2, 4, 6, 8, 9, 10, 12, 13, 16, 17, 18, 22, 24, 25, 26, 27, 28, 29, 37, 38, 40, 42, 45, 46, 54, 62, 87, 96, 117, 120, 122, 132, 133, 134, 136, 137, 138, 139, 142, 147, 149, 151, 156, 157, 158, 162, 168, 170, 171, 174, 178, 179, 180, 186, 190, 192, 193, 195, 197, 198, 201, 202, 203, 204, 205, 217, 220, 221, 222, 223, 225, 226, 227, 234, 236, 242, 243, 244, 245, 246, 252, 253, 261, 262, 264, 265, 267, 270, 279, 284, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298], "explor": [2, 7, 10, 16, 25, 27, 50, 55, 80, 118, 132, 139, 144, 150, 157, 159, 166, 169, 171, 176, 177, 181, 182, 193, 196, 200, 217, 227, 245, 262, 284, 289, 292, 295, 298], "note": [2, 4, 5, 6, 7, 10, 11, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 36, 48, 49, 50, 52, 55, 56, 58, 80, 90, 95, 96, 98, 100, 103, 104, 107, 108, 109, 110, 112, 113, 118, 120, 122, 128, 133, 134, 135, 137, 138, 143, 144, 146, 147, 149, 151, 152, 154, 155, 157, 158, 160, 166, 168, 169, 172, 173, 174, 178, 179, 180, 181, 186, 187, 189, 190, 192, 193, 195, 196, 197, 200, 201, 202, 203, 204, 206, 213, 214, 215, 216, 218, 225, 226, 227, 231, 233, 234, 236, 238, 242, 243, 244, 246, 247, 270, 279, 282, 285, 289, 290, 291, 292, 298, 299], "pleas": [2, 4, 5, 6, 7, 8, 10, 11, 12, 18, 23, 24, 26, 27, 49, 50, 52, 57, 64, 65, 86, 93, 133, 134, 137, 147, 149, 151, 152, 154, 155, 156, 157, 160, 166, 168, 172, 174, 178, 179, 180, 186, 189, 190, 192, 193, 195, 196, 197, 200, 203, 204, 206, 207, 208, 210, 211, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 236, 237, 239, 244, 246, 251, 252, 253, 255, 256, 257, 258, 259, 260, 263, 265, 267, 280, 295, 298], "differenti": [2, 6, 7, 16, 22, 29, 39, 40, 45, 51, 52, 63, 95, 121, 132, 150, 168, 177, 183, 184, 215], "requires_grad": [2, 4, 7, 10, 36, 48, 52, 68, 69, 73, 95, 103, 107, 109, 113, 121, 128, 142, 144, 174, 198, 231, 269, 283], "track": [2, 6, 10, 16, 37, 41, 48, 58, 87, 95, 100, 102, 103, 107, 109, 113, 121, 134, 136, 141, 142, 146, 150, 155, 174, 180, 182, 186, 229, 245, 270, 278, 283, 294, 295], "auto": [2, 3, 6, 7, 10, 12, 14, 26, 61, 133, 134, 157, 172, 192, 193, 207, 217, 237, 252, 253, 264, 279, 298], "x": [2, 4, 6, 7, 14, 22, 23, 24, 25, 26, 27, 29, 36, 45, 48, 49, 52, 54, 55, 58, 68, 69, 72, 73, 74, 77, 78, 80, 90, 95, 98, 100, 103, 105, 106, 107, 109, 113, 121, 122, 133, 135, 137, 138, 140, 141, 142, 144, 147, 149, 152, 158, 167, 169, 171, 172, 174, 175, 178, 179, 180, 187, 189, 190, 192, 195, 197, 203, 205, 207, 208, 217, 218, 221, 223, 225, 226, 227, 231, 242, 243, 244, 246, 250, 251, 252, 253, 259, 261, 264, 278, 279, 290, 292, 295], "std": [2, 5, 6, 7, 14, 17, 23, 26, 27, 57, 98, 105, 172, 174, 175, 180, 189, 202, 207, 213, 223, 225, 252, 262, 264, 297], "cout": [2, 5, 7, 26, 27, 297], "endl": [2, 7, 26, 27], "cpufloattyp": [2, 5, 7, 27], "y": [2, 6, 22, 24, 26, 27, 36, 45, 46, 48, 54, 58, 68, 69, 72, 73, 74, 77, 78, 80, 87, 90, 95, 98, 100, 103, 105, 106, 109, 110, 113, 121, 134, 138, 151, 171, 172, 186, 189, 190, 192, 206, 207, 208, 215, 217, 220, 242, 278, 279, 290, 292], "wa": [2, 3, 4, 5, 6, 13, 18, 20, 24, 26, 27, 29, 49, 57, 58, 80, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 113, 115, 118, 122, 133, 137, 139, 142, 147, 149, 159, 163, 166, 167, 168, 169, 171, 173, 175, 176, 177, 180, 181, 182, 187, 192, 193, 196, 205, 215, 216, 225, 231, 244, 259, 263, 264, 267, 270, 272, 273, 274, 275, 295, 298], "result": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 20, 23, 24, 25, 27, 28, 29, 36, 41, 43, 45, 48, 49, 57, 69, 73, 87, 88, 93, 95, 96, 98, 103, 104, 105, 109, 113, 114, 118, 121, 122, 125, 134, 135, 136, 137, 138, 141, 147, 149, 150, 151, 154, 155, 157, 158, 159, 163, 168, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 187, 189, 190, 192, 195, 196, 197, 198, 200, 202, 205, 214, 215, 216, 217, 218, 220, 223, 225, 226, 227, 228, 233, 234, 237, 240, 242, 243, 249, 250, 251, 253, 261, 266, 267, 269, 270, 277, 279, 280, 284, 285, 289, 290, 292, 293, 294, 297, 298, 299], "grad_fn": [2, 5, 29, 36, 48, 52, 95, 98, 107, 109, 138, 144, 206], "name": [2, 4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 26, 27, 36, 56, 57, 58, 87, 106, 112, 113, 115, 118, 120, 122, 132, 134, 137, 139, 142, 147, 150, 151, 157, 164, 167, 171, 172, 173, 176, 177, 178, 179, 181, 182, 183, 186, 189, 190, 193, 195, 200, 202, 206, 220, 221, 223, 225, 228, 229, 231, 234, 237, 244, 246, 251, 252, 253, 261, 264, 269, 270, 279, 281, 294, 297, 298], "addbackward1": 2, "z": [2, 6, 27, 58, 90, 98, 103, 109, 192, 215], "27": [2, 57, 157, 180, 205, 251, 261, 264, 294], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 36, 109], "exist": [2, 5, 7, 10, 12, 13, 18, 20, 26, 27, 29, 52, 58, 59, 66, 72, 88, 90, 103, 109, 121, 132, 142, 149, 151, 155, 173, 175, 180, 181, 182, 184, 186, 189, 190, 192, 196, 206, 213, 214, 216, 223, 228, 229, 231, 242, 243, 245, 247, 263, 264, 277, 280], "flag": [2, 4, 6, 16, 27, 48, 95, 109, 151, 167, 182, 192, 206, 222, 225, 269, 279, 285, 298], "place": [2, 6, 7, 11, 13, 16, 22, 26, 27, 45, 48, 50, 54, 58, 90, 96, 100, 102, 107, 109, 113, 115, 134, 139, 147, 149, 152, 166, 168, 169, 174, 176, 182, 189, 190, 192, 193, 196, 198, 202, 213, 221, 223, 225, 226, 227, 236, 242, 244, 269, 277, 279, 280], "randn": [2, 4, 6, 7, 14, 27, 107, 109, 122, 142, 147, 152, 178, 180, 207, 208, 217, 221, 223, 225, 226, 227, 236, 242, 264, 278, 295, 299], "b": [2, 4, 6, 7, 20, 22, 25, 27, 36, 38, 48, 49, 68, 69, 88, 95, 98, 103, 107, 110, 112, 113, 120, 121, 138, 140, 141, 157, 158, 160, 166, 175, 177, 190, 192, 193, 196, 200, 208, 217, 231, 264, 270, 290], "sumbackward0": 2, "backprop": [2, 48, 109, 113, 140, 159], "scalar": [2, 6, 16, 17, 27, 36, 48, 55, 58, 68, 95, 98, 103, 109, 121, 187, 192, 223, 237, 249], "backward": [2, 3, 4, 7, 10, 13, 14, 15, 17, 18, 19, 23, 29, 36, 41, 48, 49, 50, 52, 58, 68, 69, 73, 77, 78, 95, 96, 98, 104, 107, 109, 110, 113, 121, 128, 132, 133, 137, 138, 141, 145, 147, 149, 154, 158, 163, 168, 171, 174, 178, 179, 180, 183, 186, 187, 192, 193, 196, 225, 240, 241, 242, 243, 244, 247, 249, 252, 253, 263, 270, 278, 280, 283, 288, 292, 294, 299], "equival": [2, 5, 6, 13, 26, 27, 36, 48, 95, 107, 121, 135, 151, 154, 168, 171, 177, 179, 189, 192, 193, 196, 206, 207, 213, 215, 218, 225, 226, 228, 231, 280, 296, 297], "print": [2, 5, 6, 7, 13, 16, 22, 23, 25, 26, 27, 29, 37, 38, 42, 49, 50, 55, 57, 58, 59, 73, 80, 90, 93, 95, 98, 100, 103, 105, 107, 112, 113, 114, 117, 121, 122, 133, 134, 135, 136, 141, 142, 143, 146, 147, 149, 150, 151, 152, 155, 157, 167, 171, 172, 174, 175, 178, 179, 180, 182, 187, 190, 192, 193, 196, 197, 200, 202, 204, 206, 208, 213, 215, 223, 225, 229, 231, 237, 240, 242, 243, 244, 245, 246, 250, 251, 252, 253, 261, 263, 264, 270, 271, 280, 282, 296, 297, 299], "d": [2, 4, 6, 7, 10, 23, 26, 42, 58, 66, 68, 69, 95, 96, 98, 100, 103, 107, 112, 113, 121, 134, 137, 139, 141, 143, 147, 149, 151, 158, 159, 166, 171, 186, 189, 192, 196, 206, 216, 225, 246, 252, 293], "dx": [2, 69, 107, 121, 144], "grad": [2, 4, 7, 14, 18, 36, 48, 52, 68, 73, 95, 109, 113, 121, 133, 138, 142, 144, 147, 149, 154, 158, 163, 166, 178, 179, 180, 196, 213, 236, 241, 247, 249, 263, 283], "5000": [2, 264], "got": [2, 17, 23, 61, 96, 98, 103, 106, 107, 109, 113, 147, 172, 179, 192, 223, 228, 295], "matrix": [2, 6, 7, 14, 20, 27, 36, 45, 48, 54, 87, 95, 98, 100, 103, 106, 107, 109, 112, 113, 120, 137, 140, 141, 158, 163, 167, 181, 182, 189, 192, 193, 196, 216, 218, 226, 231, 236, 251, 252, 253, 259, 266, 280, 284, 294], "explan": [2, 58, 187, 269], "arriv": [2, 7, 17, 27, 134, 147, 178, 280], "valu": [2, 4, 5, 6, 7, 11, 14, 16, 22, 23, 24, 25, 26, 27, 29, 36, 37, 41, 45, 46, 48, 52, 54, 55, 56, 61, 68, 73, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 137, 138, 139, 142, 146, 147, 149, 151, 152, 156, 159, 171, 172, 177, 178, 179, 180, 181, 182, 186, 189, 190, 193, 196, 198, 200, 202, 203, 206, 213, 214, 215, 216, 218, 220, 221, 222, 223, 225, 228, 234, 241, 247, 262, 263, 264, 267, 270, 277, 278, 289, 298, 299], "section": [2, 4, 5, 6, 7, 10, 13, 17, 22, 23, 25, 27, 37, 38, 40, 41, 42, 43, 45, 48, 49, 52, 56, 57, 58, 80, 96, 99, 103, 104, 105, 106, 107, 110, 112, 113, 118, 135, 138, 142, 143, 149, 157, 159, 163, 169, 174, 177, 178, 180, 186, 189, 192, 193, 195, 196, 197, 202, 214, 215, 223, 225, 228, 233, 238, 241, 249, 252, 259, 263, 264, 269, 280, 290, 294], "look": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 19, 22, 24, 26, 27, 29, 38, 43, 45, 48, 49, 52, 54, 55, 56, 57, 58, 61, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 122, 128, 133, 135, 137, 138, 139, 144, 149, 150, 152, 160, 163, 166, 169, 173, 175, 176, 179, 180, 181, 182, 186, 187, 189, 192, 193, 195, 196, 201, 202, 207, 213, 216, 218, 221, 223, 225, 226, 227, 245, 249, 251, 252, 264, 266, 270, 278, 279, 281, 282, 283, 285, 290, 294], "jacobian": [2, 48, 95, 132, 154, 183, 236], "product": [2, 3, 5, 7, 45, 48, 54, 90, 95, 107, 115, 132, 134, 149, 154, 171, 182, 183, 193, 198, 206, 226, 228, 236, 267, 284, 292], "norm": [2, 16, 20, 23, 58, 100, 105, 132, 137, 167, 171, 173, 183, 189, 196, 202, 231], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 251], "4944": 2, "v": [2, 20, 22, 23, 36, 48, 58, 59, 61, 95, 98, 102, 104, 109, 110, 112, 134, 137, 151, 154, 177, 179, 186, 187, 196, 203, 204, 205, 215, 222, 223, 228, 231, 251, 293], "0001": [2, 23, 93, 157, 253], "kfloat": [2, 3, 4, 207, 237], "102": 2, "4000": [2, 49, 98, 279], "1024": [2, 6, 22, 25, 87, 105, 136, 226, 240, 264], "0000": [2, 27, 107, 231], "stop": [2, 5, 6, 27, 36, 93, 95, 109, 141, 160, 166, 176, 178, 182, 186, 200, 270], "histori": [2, 36, 45, 52, 54, 95, 103, 109, 142, 173, 174], "put": [2, 6, 7, 10, 14, 16, 19, 37, 50, 55, 57, 90, 98, 100, 103, 132, 133, 134, 149, 150, 167, 176, 177, 179, 180, 189, 226, 228], "nogradguard": [2, 297], "block": [2, 4, 6, 7, 10, 12, 14, 20, 23, 26, 27, 36, 37, 52, 55, 87, 95, 109, 114, 133, 136, 137, 149, 150, 157, 169, 171, 174, 178, 179, 180, 181, 186, 189, 198, 205, 217, 231, 238, 242, 270, 280, 285], "pow": [2, 6, 73, 121, 213], "no_grad": [2, 23, 36, 48, 49, 73, 95, 98, 107, 109, 110, 113, 121, 133, 134, 151, 159, 174, 175, 179, 187, 192, 202, 206, 217, 221, 223, 225, 226, 227, 233, 247, 252, 280, 288, 297], "Or": [2, 25, 27, 142, 166, 180, 197, 225, 237], "content": [2, 4, 6, 16, 27, 29, 56, 62, 102, 103, 104, 122, 129, 138, 147, 149, 169, 175, 176, 180, 182, 190, 192, 200, 254, 262, 264, 279, 294, 295], "eq": [2, 23, 27, 55, 133, 179, 192, 202, 223, 225, 253, 270], "bool": [2, 13, 16, 17, 27, 120, 151, 172, 189, 197, 206, 217, 231, 298], "is_leaf": 2, "detach_": [2, 180], "register_hook": [2, 142], "retain_grad": 2, "doc": [2, 4, 5, 7, 8, 55, 68, 80, 95, 103, 104, 105, 117, 120, 121, 128, 135, 146, 149, 155, 156, 169, 178, 180, 189, 192, 201, 218, 236, 259, 263, 278, 293, 294], "applic": [2, 3, 13, 14, 16, 17, 27, 38, 55, 66, 96, 100, 105, 115, 128, 131, 132, 133, 138, 139, 143, 147, 151, 156, 166, 169, 173, 174, 178, 180, 189, 192, 205, 215, 229, 237, 242, 243, 244, 249, 251, 253, 259, 280, 284, 294, 298], "calcul": [2, 14, 20, 36, 41, 48, 49, 55, 58, 62, 80, 87, 90, 93, 95, 96, 98, 104, 105, 113, 140, 141, 151, 159, 177, 178, 180, 181, 182, 189, 193, 196, 198, 202, 215, 223, 228, 231, 246, 253, 283], "penalti": [2, 167, 175, 263], "h": [2, 4, 5, 6, 7, 10, 12, 26, 27, 29, 55, 137, 151, 157, 160, 171, 172, 195, 206, 252, 279, 297, 298], "model": [2, 3, 6, 10, 13, 16, 19, 21, 26, 27, 28, 36, 38, 39, 40, 45, 46, 48, 49, 52, 54, 58, 59, 60, 62, 68, 70, 72, 73, 74, 92, 93, 95, 97, 99, 103, 106, 107, 108, 109, 111, 113, 116, 117, 118, 120, 121, 123, 131, 132, 133, 139, 140, 141, 142, 143, 146, 149, 154, 155, 157, 158, 164, 166, 167, 168, 176, 177, 178, 179, 180, 181, 183, 190, 192, 193, 196, 198, 200, 203, 205, 207, 217, 218, 222, 226, 227, 228, 229, 231, 232, 236, 238, 242, 243, 244, 245, 246, 247, 251, 261, 263, 268, 269, 271, 276, 277, 278, 283, 284, 285, 288, 290, 292, 293, 298, 299], "linear": [2, 6, 7, 11, 13, 19, 20, 23, 29, 45, 48, 49, 50, 52, 54, 73, 80, 98, 103, 108, 120, 121, 122, 128, 133, 135, 137, 140, 141, 142, 147, 151, 152, 157, 158, 167, 171, 174, 178, 179, 180, 182, 187, 192, 196, 197, 201, 202, 204, 205, 206, 213, 217, 218, 220, 221, 223, 225, 226, 228, 231, 233, 238, 240, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 259, 261, 263, 269, 271, 277, 278, 282, 285, 299], "loss": [2, 3, 6, 7, 11, 13, 16, 19, 20, 21, 23, 36, 42, 45, 48, 54, 70, 72, 73, 74, 77, 78, 80, 93, 95, 98, 102, 107, 112, 113, 121, 122, 132, 133, 134, 135, 140, 142, 149, 159, 160, 166, 168, 171, 174, 177, 179, 180, 182, 186, 187, 193, 202, 223, 225, 231, 247, 252, 253, 267, 278, 288, 299], "target": [2, 3, 5, 7, 16, 19, 22, 23, 26, 27, 41, 49, 52, 55, 61, 80, 96, 103, 105, 107, 110, 112, 113, 118, 133, 141, 149, 150, 152, 157, 166, 168, 169, 171, 172, 175, 177, 178, 179, 180, 182, 187, 189, 190, 192, 195, 197, 202, 221, 223, 225, 226, 227, 228, 237, 252, 253, 259, 262, 264, 266, 267, 288, 297], "mseloss": [2, 14, 41, 52, 73, 121, 147, 178, 243, 244, 278, 299], "grad_output": [2, 10, 12], "ones_lik": [2, 103], "create_graph": [2, 144], "gradient_penalti": 2, "dim": [2, 5, 6, 13, 25, 37, 98, 103, 107, 133, 135, 171, 173, 175, 178, 179, 180, 187, 189, 198, 214, 215, 223, 225, 237, 251, 253, 295, 297], "add": [2, 4, 5, 7, 8, 10, 12, 14, 16, 17, 18, 20, 23, 25, 26, 27, 41, 49, 52, 56, 80, 90, 93, 100, 103, 104, 107, 110, 118, 125, 132, 133, 134, 137, 141, 142, 143, 149, 150, 155, 156, 157, 158, 166, 168, 169, 172, 175, 176, 178, 179, 180, 182, 186, 192, 196, 198, 202, 205, 207, 213, 215, 226, 228, 229, 231, 237, 244, 247, 250, 264, 266, 270, 284, 292, 296], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 5, 6, 7, 18, 24, 36, 52, 58, 66, 87, 90, 93, 95, 96, 100, 102, 103, 104, 109, 122, 128, 132, 147, 149, 150, 154, 156, 157, 174, 179, 180, 181, 186, 189, 190, 192, 195, 197, 204, 215, 221, 223, 226, 236, 237, 244, 250, 252, 253, 261, 280, 289, 290, 292, 293, 296, 297], "link": [2, 5, 6, 7, 12, 14, 26, 27, 40, 42, 58, 87, 99, 113, 115, 125, 149, 154, 215, 217, 237, 252, 295], "ad": [2, 6, 7, 12, 17, 22, 26, 27, 28, 29, 36, 55, 56, 59, 80, 88, 90, 95, 98, 100, 102, 103, 104, 107, 109, 122, 133, 134, 140, 141, 142, 147, 150, 154, 158, 163, 166, 172, 177, 181, 182, 192, 195, 225, 229, 252, 253, 267, 277, 279, 282, 293], "subclass": [2, 6, 7, 16, 20, 29, 37, 38, 72, 95, 98, 100, 113, 121, 132, 135, 139, 150, 173, 179, 187, 195, 215, 218, 231, 251, 262, 263, 268, 276, 284, 292, 297], "encod": [2, 16, 45, 46, 52, 54, 100, 108, 111, 134, 139, 150, 167, 176, 180, 189, 196, 205, 206, 220, 228, 231, 263, 295], "method": [2, 4, 5, 6, 7, 10, 12, 13, 14, 16, 19, 20, 23, 25, 27, 29, 36, 37, 43, 45, 49, 52, 55, 57, 61, 80, 88, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 113, 114, 122, 131, 132, 136, 139, 140, 144, 147, 150, 151, 154, 155, 156, 157, 158, 159, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 179, 187, 189, 190, 192, 193, 196, 202, 203, 213, 217, 221, 223, 225, 227, 228, 231, 243, 244, 253, 261, 262, 263, 266, 278, 279, 280, 285, 295, 298], "forward": [2, 3, 5, 10, 12, 13, 14, 16, 17, 19, 23, 26, 27, 29, 36, 37, 42, 48, 49, 50, 52, 55, 58, 62, 68, 69, 70, 73, 77, 78, 90, 95, 98, 100, 103, 105, 106, 107, 108, 110, 113, 114, 121, 122, 128, 132, 133, 134, 137, 138, 140, 143, 144, 145, 147, 149, 152, 155, 163, 166, 167, 168, 171, 173, 174, 177, 178, 179, 180, 182, 183, 186, 187, 189, 190, 192, 193, 197, 202, 203, 206, 217, 220, 223, 225, 226, 237, 241, 242, 243, 244, 245, 246, 249, 250, 251, 252, 253, 259, 261, 263, 266, 267, 270, 271, 280, 295, 297, 299], "detail": [2, 4, 6, 7, 10, 12, 14, 17, 18, 19, 24, 26, 27, 29, 38, 41, 48, 49, 50, 58, 59, 80, 87, 88, 90, 100, 103, 104, 114, 118, 133, 135, 137, 139, 141, 143, 145, 147, 155, 157, 163, 166, 174, 180, 181, 186, 187, 190, 192, 193, 197, 198, 200, 206, 213, 214, 215, 216, 221, 223, 225, 226, 229, 236, 238, 241, 245, 249, 250, 251, 252, 259, 261, 262, 263, 264, 267, 269, 279, 280, 290, 295], "namespac": [2, 4, 7, 10, 12, 26, 27, 37, 113, 118, 151, 172, 190, 197, 206, 218, 297], "inherit": [2, 13, 17, 26, 42, 57, 90, 98, 103, 104, 107, 156, 159, 176, 189, 195, 200, 215, 218, 220, 226, 227, 247, 295], "linearfunct": 2, "public": [2, 10, 12, 17, 135, 172], "static": [2, 4, 10, 12, 16, 25, 95, 132, 151, 154, 155, 172, 192, 193, 201, 203, 205, 206, 222, 223, 225, 226, 227, 228, 253, 280], "option": [2, 4, 6, 7, 10, 12, 13, 21, 27, 40, 49, 51, 53, 57, 59, 87, 93, 95, 96, 99, 100, 103, 105, 118, 120, 131, 132, 135, 136, 139, 145, 150, 152, 157, 160, 169, 171, 173, 175, 189, 190, 192, 193, 200, 202, 203, 205, 206, 223, 225, 226, 227, 228, 242, 247, 249, 250, 263, 264, 270, 280, 284, 288, 289, 290, 293, 294, 296], "autogradcontext": [2, 10, 12], "ctx": [2, 4, 6, 10, 12, 22, 144, 242], "save_for_backward": [2, 4, 6, 144], "mm": [2, 6, 151, 206, 207, 223, 237, 238], "t": [2, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 20, 23, 25, 26, 27, 29, 36, 38, 40, 41, 45, 48, 49, 52, 56, 58, 59, 61, 66, 73, 80, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 115, 118, 121, 122, 128, 133, 134, 138, 144, 150, 151, 152, 154, 156, 157, 158, 159, 160, 163, 166, 168, 169, 173, 174, 175, 176, 177, 178, 180, 181, 182, 187, 189, 190, 192, 193, 196, 197, 198, 200, 201, 202, 203, 205, 206, 213, 214, 215, 217, 220, 223, 225, 228, 231, 236, 237, 240, 241, 247, 249, 251, 259, 261, 263, 264, 266, 279, 280, 281, 282, 283, 291, 292, 293, 295, 296, 297, 298], "unsqueez": [2, 16, 52, 73, 103, 121, 168, 175, 178, 180, 187, 237, 262], "expand_a": [2, 23, 202, 223, 225], "tensor_list": [2, 10, 12, 149], "save": [2, 4, 5, 7, 13, 14, 23, 24, 27, 36, 37, 38, 39, 40, 41, 45, 46, 49, 54, 55, 56, 58, 80, 93, 102, 104, 105, 123, 128, 132, 133, 135, 137, 139, 143, 151, 157, 158, 171, 173, 174, 178, 179, 180, 182, 183, 186, 189, 193, 200, 202, 206, 220, 232, 237, 250, 252, 253, 261, 266, 267, 268, 269, 270, 278, 279, 280, 282, 283, 284, 285, 290, 294, 297], "get_saved_vari": 2, "grad_input": [2, 144], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 14, 17, 20, 24, 26, 28, 29, 49, 50, 58, 80, 90, 106, 107, 110, 112, 113, 118, 125, 132, 133, 147, 166, 171, 172, 173, 176, 177, 178, 180, 182, 186, 198, 220, 227, 228, 229, 231, 242, 246, 261, 277], "appli": [2, 3, 5, 6, 7, 10, 11, 12, 16, 17, 20, 23, 27, 29, 36, 37, 46, 57, 58, 73, 87, 90, 95, 98, 100, 103, 105, 107, 121, 132, 133, 135, 140, 142, 143, 144, 147, 149, 152, 155, 158, 159, 160, 163, 166, 167, 168, 171, 173, 176, 178, 179, 180, 182, 184, 189, 192, 193, 195, 196, 198, 200, 201, 205, 206, 213, 214, 218, 225, 231, 233, 236, 238, 240, 244, 245, 246, 247, 250, 252, 261, 262, 277, 280, 284, 285, 288, 289, 292, 294, 296], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 5, 6, 7, 12, 13, 16, 21, 23, 26, 27, 36, 37, 38, 41, 42, 48, 55, 58, 73, 95, 96, 98, 100, 103, 105, 109, 113, 121, 122, 128, 132, 138, 140, 143, 149, 152, 154, 156, 169, 172, 178, 179, 180, 181, 183, 186, 187, 189, 192, 198, 201, 202, 218, 223, 225, 228, 243, 244, 247, 252, 253, 262, 264, 277, 279, 280, 282, 284, 285, 295], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 11, 14, 20, 22, 27, 36, 58, 88, 90, 95, 100, 103, 105, 107, 109, 113, 125, 139, 142, 146, 147, 152, 160, 167, 176, 177, 179, 181, 182, 192, 193, 196, 204, 213, 231, 236, 249, 259, 264, 267, 269, 270, 277, 295, 298], "todoubl": 2, "On": [2, 5, 6, 7, 10, 23, 25, 26, 27, 99, 103, 113, 128, 134, 147, 149, 151, 160, 167, 173, 178, 179, 190, 193, 195, 196, 222, 231, 234, 251, 259, 263, 280, 298], "easiest": [2, 6, 11, 27, 40, 99, 113, 132, 158, 174, 176, 192, 261, 280], "your": [2, 4, 7, 8, 10, 11, 13, 14, 17, 18, 20, 21, 22, 23, 26, 27, 29, 36, 37, 40, 42, 48, 49, 50, 52, 55, 56, 57, 59, 60, 61, 72, 80, 87, 93, 95, 96, 99, 100, 103, 104, 107, 109, 110, 112, 114, 115, 117, 118, 121, 122, 123, 125, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 149, 150, 151, 154, 156, 158, 159, 160, 164, 166, 167, 169, 172, 173, 174, 175, 176, 179, 180, 181, 184, 186, 187, 189, 190, 192, 193, 196, 200, 206, 207, 208, 217, 222, 223, 225, 226, 227, 228, 229, 231, 233, 236, 237, 240, 245, 247, 250, 262, 263, 264, 267, 270, 278, 279, 281, 282, 283, 284, 285, 292, 293, 294, 295], "tabl": [2, 19, 25, 112, 120, 132, 134, 149, 151, 157, 179, 180, 186, 192, 193, 251, 264, 270], "set_data": 2, "data": [2, 3, 4, 6, 8, 13, 14, 16, 19, 20, 22, 24, 25, 26, 27, 28, 36, 37, 40, 41, 45, 46, 48, 51, 52, 53, 54, 57, 66, 73, 77, 78, 80, 87, 90, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 112, 115, 121, 122, 131, 132, 138, 139, 145, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 163, 164, 166, 168, 169, 171, 175, 177, 178, 179, 180, 190, 195, 196, 202, 203, 204, 205, 206, 214, 216, 217, 218, 221, 222, 223, 225, 226, 227, 228, 231, 236, 237, 238, 244, 245, 246, 247, 250, 251, 252, 253, 259, 262, 263, 264, 267, 269, 270, 271, 277, 278, 284, 285, 288, 294, 295, 299], "output_nr": 2, "after": [2, 3, 6, 7, 11, 12, 14, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 36, 37, 38, 45, 48, 50, 52, 55, 58, 59, 93, 95, 96, 100, 105, 106, 107, 110, 112, 113, 115, 122, 132, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 149, 150, 151, 152, 157, 159, 160, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 184, 186, 187, 192, 193, 195, 197, 201, 202, 203, 206, 220, 221, 223, 225, 226, 227, 228, 229, 231, 233, 234, 237, 244, 261, 263, 264, 267, 269, 270, 277, 278, 280, 290, 292, 294, 299], "file": [2, 4, 6, 7, 10, 11, 12, 17, 21, 23, 24, 25, 26, 27, 44, 53, 56, 57, 58, 61, 75, 79, 87, 88, 91, 93, 95, 96, 101, 109, 111, 113, 119, 120, 123, 125, 134, 138, 140, 141, 147, 149, 151, 157, 166, 169, 172, 175, 183, 186, 189, 192, 195, 198, 202, 204, 206, 207, 208, 216, 217, 218, 223, 225, 229, 232, 237, 238, 244, 245, 246, 250, 252, 253, 263, 264, 269, 270, 276, 278, 279, 281, 284, 287, 289, 290, 294, 295, 297, 298], "bug": [2, 6, 12, 27, 102, 157, 196, 200, 207, 217, 295], "report": [2, 12, 20, 27, 58, 80, 93, 95, 98, 100, 104, 132, 136, 151, 157, 169, 178, 180, 181, 200, 207, 217, 231, 270, 292], "github": [2, 3, 5, 7, 12, 13, 19, 23, 26, 27, 28, 55, 59, 60, 61, 66, 118, 132, 133, 134, 136, 137, 143, 145, 146, 147, 149, 151, 152, 154, 155, 156, 159, 160, 168, 171, 172, 178, 179, 180, 186, 189, 195, 197, 198, 202, 204, 205, 207, 217, 236, 237, 238, 244, 246, 250, 252, 253, 262, 295], "issu": [2, 5, 6, 7, 10, 11, 23, 24, 26, 27, 57, 134, 135, 146, 151, 152, 155, 156, 157, 160, 168, 169, 175, 186, 190, 192, 193, 196, 200, 204, 205, 206, 207, 213, 215, 217, 218, 220, 226, 229, 236, 238, 244, 245, 259, 263, 265, 277, 295], "fix": [2, 16, 20, 24, 27, 28, 36, 55, 56, 57, 58, 105, 138, 174, 177, 178, 205, 231, 259, 279, 280, 293], "soon": [2, 6, 58, 160, 166, 225, 243, 252], "overview": [2, 6, 7, 13, 59, 61, 98, 131, 132, 140, 141, 147, 149, 155, 172, 176, 178, 179, 180, 182, 186, 196, 213, 214, 216, 222, 232, 238, 240], "alwai": [2, 3, 4, 5, 7, 11, 16, 19, 22, 23, 26, 27, 46, 58, 98, 100, 104, 107, 110, 112, 113, 135, 136, 137, 138, 143, 149, 150, 151, 169, 175, 176, 177, 178, 180, 192, 193, 195, 206, 213, 217, 220, 238, 293], "problem": [2, 5, 7, 13, 16, 17, 22, 26, 27, 55, 57, 58, 106, 108, 112, 113, 121, 128, 139, 150, 155, 157, 158, 167, 174, 176, 178, 180, 186, 190, 193, 213, 215, 238, 264, 265, 269, 280, 295, 298], "question": [2, 5, 6, 7, 10, 12, 20, 26, 27, 55, 96, 134, 149, 151, 156, 182, 193, 203, 214, 228, 231, 238, 264], "forum": [2, 5, 6, 7, 26, 27, 49, 155, 156, 203, 238], "touch": [2, 5, 7, 16, 26, 27, 238], "view": [3, 12, 13, 16, 17, 19, 23, 29, 56, 59, 61, 62, 66, 87, 96, 98, 102, 103, 107, 109, 112, 113, 115, 121, 122, 133, 136, 137, 139, 145, 146, 147, 149, 155, 157, 171, 172, 178, 179, 180, 181, 182, 187, 198, 200, 202, 203, 218, 223, 225, 237, 241, 244, 245, 246, 249, 259, 262, 271, 278, 296], "edit": [3, 7, 11, 13, 14, 19, 23, 24, 54, 56, 66, 136, 137, 147, 149, 151, 156, 157, 171, 172, 174, 175, 178, 179, 180, 198, 202, 205, 244, 246], "code": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 36, 37, 38, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 168, 169, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 198, 200, 201, 202, 204, 205, 206, 214, 215, 216, 217, 218, 220, 223, 225, 226, 227, 228, 229, 231, 234, 236, 238, 241, 242, 244, 245, 246, 247, 249, 250, 252, 253, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 291, 292, 293, 294, 295, 296, 297, 299], "prerequisit": [3, 4, 18, 59, 61, 62, 108, 125, 134, 136, 137, 142, 145, 146, 147, 149, 150, 171, 172, 178, 179, 180, 189, 193, 196, 198, 204, 223, 229, 243, 244, 246, 270], "frontend": [3, 4, 12, 89, 91, 132, 207, 218, 222, 226, 252, 253, 288], "semant": [3, 4, 7, 26, 55, 73, 103, 108, 110, 111, 121, 135, 149, 151, 192, 193, 215, 216, 218, 222, 232, 236], "11": [3, 6, 7, 13, 20, 22, 27, 38, 73, 98, 107, 120, 133, 134, 154, 175, 180, 183, 189, 190, 193, 245, 246, 251, 264, 270, 297], "nvidia": [3, 6, 20, 56, 143, 149, 151, 160, 190, 231, 246, 263, 280, 284], "toolkit": [3, 27, 108, 155, 159, 169, 192, 278], "releas": [3, 4, 5, 7, 12, 20, 24, 27, 56, 115, 120, 122, 133, 134, 138, 155, 166, 179, 181, 186, 226, 231, 242, 243, 251, 252, 253, 270, 280, 285, 295], "greatli": [3, 7, 55, 95, 113, 177], "reduc": [3, 7, 11, 13, 20, 23, 38, 41, 48, 62, 98, 100, 105, 120, 133, 134, 135, 137, 139, 140, 143, 145, 147, 149, 151, 158, 159, 160, 166, 169, 173, 175, 178, 180, 186, 189, 190, 193, 198, 206, 207, 226, 231, 234, 245, 250, 261, 263, 264, 267, 268, 269, 284, 287, 289, 290, 298, 299], "cpu": [3, 4, 6, 7, 10, 12, 13, 16, 17, 22, 23, 24, 27, 37, 42, 45, 48, 49, 54, 55, 58, 68, 78, 80, 87, 88, 93, 103, 105, 107, 113, 115, 120, 121, 128, 132, 133, 135, 136, 137, 140, 147, 149, 151, 160, 167, 171, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 186, 189, 193, 195, 200, 202, 204, 206, 207, 221, 222, 223, 225, 226, 233, 237, 242, 243, 247, 251, 262, 263, 264, 265, 267, 269, 270, 277, 284, 295], "overhead": [3, 6, 7, 12, 20, 62, 87, 120, 133, 134, 137, 142, 147, 158, 160, 169, 175, 178, 180, 181, 186, 190, 196, 200, 205, 207, 218, 226, 231, 243, 264, 270, 280, 291, 298], "increas": [3, 6, 7, 22, 23, 24, 28, 41, 42, 49, 80, 87, 88, 93, 96, 105, 113, 133, 134, 135, 137, 139, 140, 141, 145, 155, 166, 169, 175, 186, 193, 202, 205, 218, 223, 245, 251, 262, 263, 264, 267, 279, 280, 283, 284, 285, 298], "mostli": [3, 12, 23, 90, 95, 105, 140, 180, 182, 197, 226], "util": [3, 4, 6, 12, 17, 23, 26, 27, 28, 29, 38, 42, 49, 55, 57, 59, 61, 87, 98, 102, 104, 113, 120, 121, 122, 128, 132, 133, 134, 135, 137, 140, 142, 149, 151, 152, 154, 155, 157, 158, 160, 167, 169, 171, 172, 174, 175, 176, 179, 181, 182, 186, 187, 189, 190, 195, 202, 204, 206, 218, 221, 223, 225, 226, 227, 228, 231, 233, 237, 240, 243, 244, 247, 250, 252, 253, 259, 262, 263, 278, 279, 284, 287, 288, 290, 292, 294, 298], "deploy": [3, 5, 29, 105, 139, 207, 221, 226, 252, 261, 267, 284, 294], "import": [3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 48, 49, 52, 55, 56, 57, 58, 59, 73, 80, 87, 90, 95, 96, 98, 100, 102, 103, 105, 107, 110, 113, 117, 120, 121, 122, 125, 133, 134, 135, 136, 137, 142, 143, 144, 147, 149, 150, 152, 154, 155, 156, 166, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 186, 187, 190, 192, 193, 197, 198, 200, 201, 202, 204, 206, 207, 208, 213, 215, 216, 217, 218, 220, 221, 226, 227, 229, 231, 233, 237, 238, 240, 241, 242, 243, 244, 246, 247, 250, 251, 252, 253, 259, 261, 262, 264, 267, 277, 278, 279, 280, 285, 288, 290, 295, 296, 298, 299], "appear": [3, 13, 16, 26, 29, 112, 192, 259, 262, 267], "won": [3, 6, 12, 48, 113, 121, 133, 144, 154, 163, 168, 176, 192, 193, 217, 261, 263], "heart": [3, 55, 251], "veri": [3, 4, 5, 6, 7, 10, 16, 17, 22, 23, 25, 26, 27, 28, 29, 45, 50, 52, 54, 55, 70, 80, 90, 96, 100, 107, 109, 113, 121, 128, 133, 137, 138, 140, 166, 167, 174, 177, 178, 180, 181, 182, 184, 186, 187, 193, 195, 202, 213, 215, 220, 225, 259, 267, 270, 279, 280, 293], "time": [3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 20, 23, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 125, 128, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 200, 201, 202, 204, 205, 206, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 225, 231, 234, 236, 237, 241, 242, 243, 244, 249, 251, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 277, 278, 280, 281, 282, 283, 284, 291, 292, 293, 294, 296, 297], "tool": [3, 7, 10, 16, 25, 29, 57, 87, 93, 95, 96, 100, 104, 106, 121, 133, 147, 149, 150, 157, 169, 178, 181, 186, 187, 189, 196, 200, 202, 220, 245, 259, 269, 292, 298], "compil": [3, 5, 7, 8, 10, 12, 18, 20, 25, 26, 29, 90, 106, 132, 149, 156, 183, 192, 205, 207, 218, 222, 226, 227, 238, 247, 252, 264, 268, 270, 279, 280, 284, 287, 288, 295, 297], "boost": [3, 105, 107, 157, 158, 205, 217, 222, 226, 238, 247, 252, 253, 280], "would": [3, 4, 5, 6, 7, 10, 16, 18, 19, 22, 23, 24, 25, 26, 27, 29, 36, 48, 55, 59, 61, 80, 93, 95, 98, 100, 103, 105, 109, 112, 113, 118, 122, 128, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 150, 151, 155, 156, 157, 158, 160, 166, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 182, 189, 190, 192, 193, 195, 196, 200, 202, 204, 206, 215, 216, 222, 225, 227, 236, 238, 244, 246, 247, 259, 280, 289, 290, 294, 298], "demonstr": [3, 4, 11, 16, 18, 19, 20, 24, 25, 26, 29, 43, 48, 56, 63, 87, 90, 96, 98, 104, 114, 118, 131, 132, 133, 134, 136, 137, 138, 143, 144, 147, 151, 152, 154, 155, 156, 157, 163, 169, 171, 172, 176, 178, 179, 180, 181, 186, 189, 192, 193, 196, 197, 198, 200, 204, 205, 206, 207, 215, 217, 218, 220, 221, 225, 229, 231, 233, 234, 241, 243, 244, 246, 249, 250, 251, 253, 261, 263, 264, 267, 269, 270, 283, 284, 289, 291, 292, 293, 294, 296, 298, 299], "mnist": [3, 7, 38, 49, 52, 80, 98, 102, 104, 131, 132, 133, 139, 143, 149, 152, 168, 179, 184, 187, 253, 266, 284], "libtorch": [3, 4, 7, 26, 27, 237, 252, 284, 297], "counterpart": [3, 20, 157, 192, 220, 231, 246, 252, 280], "syntax": [3, 27, 29, 54, 89, 91, 92, 107, 122, 132, 264], "step": [3, 4, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 27, 36, 40, 41, 48, 49, 52, 55, 58, 66, 80, 87, 90, 95, 98, 104, 105, 106, 107, 113, 115, 118, 131, 132, 133, 134, 135, 140, 141, 142, 143, 145, 147, 149, 150, 151, 157, 159, 163, 167, 169, 174, 177, 178, 179, 180, 181, 182, 183, 187, 189, 190, 192, 193, 197, 200, 201, 202, 204, 205, 206, 208, 217, 218, 220, 221, 223, 225, 226, 227, 228, 231, 233, 237, 240, 241, 243, 244, 247, 252, 253, 259, 261, 263, 277, 278, 280, 288, 294, 299], "depict": [3, 102, 193], "chunk": [3, 6, 61, 149, 166, 169, 171, 198], "batch": [3, 6, 7, 19, 20, 23, 24, 25, 38, 41, 42, 43, 49, 50, 52, 55, 57, 58, 59, 61, 62, 80, 87, 93, 95, 96, 98, 102, 103, 104, 105, 110, 113, 122, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 145, 149, 150, 151, 152, 159, 160, 163, 166, 168, 169, 171, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 189, 190, 193, 195, 196, 198, 201, 202, 205, 206, 215, 218, 222, 225, 231, 236, 253, 263, 264], "data_load": [3, 7, 23, 202, 223, 225, 226, 227], "optim": [3, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 27, 29, 36, 37, 38, 39, 40, 43, 45, 46, 48, 52, 55, 59, 61, 66, 70, 71, 72, 75, 87, 90, 93, 95, 98, 102, 105, 106, 114, 118, 122, 128, 132, 133, 134, 137, 142, 143, 145, 147, 149, 150, 152, 155, 156, 157, 159, 160, 167, 168, 169, 173, 174, 175, 176, 177, 178, 179, 182, 183, 186, 187, 189, 190, 192, 195, 196, 202, 205, 206, 208, 213, 218, 220, 221, 222, 225, 226, 227, 231, 234, 237, 238, 243, 244, 249, 250, 252, 253, 261, 263, 264, 269, 277, 278, 281, 284, 285, 287, 288, 289, 292, 294, 295, 297], "zero_grad": [3, 7, 23, 41, 49, 52, 73, 95, 98, 107, 113, 121, 133, 134, 135, 147, 149, 166, 174, 178, 180, 187, 193, 225, 243, 244, 252, 253, 278, 283, 288], "nll_loss": [3, 133, 149, 179, 253], "updat": [3, 7, 11, 12, 13, 14, 15, 16, 19, 20, 23, 25, 27, 41, 48, 49, 55, 58, 73, 74, 87, 95, 105, 107, 112, 113, 114, 121, 122, 132, 133, 134, 135, 139, 143, 147, 150, 151, 160, 166, 176, 177, 179, 180, 186, 193, 196, 202, 206, 213, 223, 225, 226, 228, 229, 231, 238, 240, 244, 247, 249, 250, 253, 261, 263, 277, 282, 299], "captur": [3, 5, 7, 26, 27, 29, 58, 95, 114, 115, 117, 132, 133, 154, 189, 190, 192, 193, 196, 200, 207, 223, 225, 228, 264, 295], "But": [3, 7, 10, 12, 24, 49, 50, 58, 80, 96, 103, 109, 112, 138, 147, 160, 166, 167, 168, 177, 192, 195, 202, 206, 213, 216, 228, 236, 250, 253, 261, 264], "slightli": [3, 6, 16, 27, 134, 149, 150, 169, 175, 182, 216, 264, 280], "prealloc": 3, "reus": [3, 12, 70, 113, 121, 144, 151, 154, 167, 177, 193, 206, 280, 284, 285, 298], "tensoropt": [3, 207], "floatcuda": 3, "dtype": [3, 4, 10, 12, 16, 17, 18, 98, 103, 109, 120, 135, 144, 151, 171, 192, 197, 198, 204, 206, 207, 216, 223, 226, 227, 228, 237, 250, 252, 261, 263, 277, 288, 290], "longcuda": 3, "klong": 3, "zero": [3, 7, 13, 20, 23, 36, 41, 46, 49, 52, 55, 73, 95, 96, 98, 100, 103, 104, 107, 112, 113, 121, 133, 134, 141, 149, 150, 163, 167, 169, 172, 173, 174, 178, 180, 182, 187, 206, 213, 215, 216, 228, 229, 231, 253, 263, 268, 270, 276, 279, 280, 284, 295, 299], "ktrainbatchs": 3, "28": [3, 7, 20, 38, 73, 98, 100, 102, 113, 152, 168, 187, 231, 251, 253, 264, 279], "copy_": [3, 45, 54, 120, 135, 157, 178, 269, 277], "training_step": 3, "call": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 43, 45, 46, 48, 49, 50, 52, 55, 57, 58, 59, 61, 72, 73, 80, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 112, 113, 118, 120, 121, 122, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 151, 154, 155, 156, 157, 159, 160, 163, 166, 167, 168, 169, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 184, 186, 189, 192, 193, 200, 202, 203, 206, 207, 220, 225, 227, 229, 231, 236, 237, 238, 241, 243, 244, 245, 247, 250, 251, 261, 263, 264, 265, 266, 267, 269, 270, 278, 279, 280, 283, 290, 291, 292, 293, 295, 298], "void": [3, 4, 6, 7, 17, 26, 27, 157, 172, 207, 217, 264, 270, 279], "net": [3, 7, 23, 49, 50, 52, 55, 58, 80, 90, 93, 98, 102, 103, 105, 133, 149, 163, 175, 179, 186, 187, 253, 266], "stream": [3, 17, 87, 103, 106, 135, 169, 175, 207, 252], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 25, 76, 79, 120, 186, 190, 218, 234, 249, 251, 264, 270, 280], "side": [3, 24, 57, 58, 87, 112, 152, 160, 166, 168, 169, 172, 177, 178, 186, 259], "prepar": [3, 13, 20, 23, 29, 49, 57, 58, 73, 74, 102, 110, 121, 122, 151, 152, 166, 171, 172, 176, 178, 206, 220, 221, 222, 226, 227, 228, 231, 242, 250, 261, 270, 284], "cach": [3, 142, 151, 157, 166, 186, 196, 205, 206, 217, 280, 284, 293, 298], "cubla": [3, 264], "cudnn": [3, 6, 140, 143, 150, 160, 263], "warmupstream": 3, "int": [3, 4, 5, 6, 7, 11, 13, 22, 23, 26, 27, 57, 59, 61, 120, 133, 134, 136, 147, 149, 151, 157, 171, 172, 178, 179, 180, 186, 190, 192, 195, 198, 200, 201, 206, 217, 237, 246, 252, 297, 298], "num_warmup_it": 3, "success": [3, 7, 16, 27, 80, 109, 139, 157, 182, 237, 259], "replac": [3, 4, 7, 23, 28, 48, 61, 63, 96, 107, 113, 114, 118, 120, 128, 132, 133, 135, 149, 151, 154, 173, 174, 180, 182, 186, 192, 195, 198, 205, 215, 218, 235, 250, 252, 264, 267, 295], "replai": [3, 16, 29, 159], "spin": [3, 98], "ordinari": 3, "epoch": [3, 7, 11, 19, 23, 38, 41, 42, 49, 58, 59, 61, 93, 98, 102, 105, 107, 113, 122, 128, 133, 134, 135, 139, 140, 149, 160, 166, 174, 176, 180, 187, 195, 225, 253, 278], "59584": 3, "60000": [3, 149], "3921": 3, "test": [3, 10, 23, 24, 26, 27, 28, 38, 41, 42, 55, 88, 90, 96, 98, 104, 105, 107, 108, 114, 125, 132, 133, 134, 140, 149, 152, 154, 157, 160, 169, 175, 179, 182, 184, 187, 190, 192, 200, 201, 202, 203, 205, 222, 223, 226, 236, 249, 251, 252, 253, 264, 267, 297], "2051": 3, "accuraci": [3, 11, 20, 23, 24, 28, 42, 49, 98, 104, 105, 113, 131, 132, 133, 134, 135, 139, 163, 173, 174, 175, 179, 184, 187, 189, 202, 206, 220, 221, 225, 226, 231, 250, 251, 261, 263, 278, 283, 284], "938": [3, 7, 160], "1826": 3, "1273": 3, "960": 3, "1796": [3, 107], "1012": [3, 160], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": [3, 98], "978": 3, "6": [3, 7, 13, 23, 27, 38, 40, 49, 55, 73, 90, 96, 98, 100, 103, 107, 112, 114, 118, 120, 121, 122, 143, 144, 149, 151, 157, 160, 166, 172, 173, 175, 178, 180, 189, 190, 192, 196, 205, 206, 208, 223, 225, 231, 246, 250, 251, 253, 261, 263, 280, 292, 293, 294, 297, 298], "0511": [3, 206], "0704": 3, "977": [3, 160, 251], "7": [3, 6, 7, 20, 22, 23, 26, 27, 38, 40, 49, 57, 90, 98, 107, 120, 128, 133, 134, 149, 159, 160, 174, 175, 189, 190, 193, 198, 204, 205, 208, 217, 226, 227, 233, 237, 238, 240, 241, 246, 249, 250, 251, 253, 261, 263, 280, 291, 295], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 6, 7, 20, 22, 23, 27, 38, 48, 49, 55, 73, 93, 98, 107, 112, 113, 120, 122, 157, 166, 167, 174, 175, 178, 187, 189, 193, 208, 231, 237, 251, 252, 253, 262, 264, 266, 270, 288], "0669": [3, 107], "0544": 3, "984": [3, 251], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 16, 24, 36, 42, 58, 60, 95, 105, 106, 107, 108, 112, 132, 133, 140, 141, 149, 150, 166, 172, 177, 182, 190, 192, 193, 200, 215, 218, 223, 228, 250, 251, 264, 267], "0m44": 3, "287": 3, "018": [3, 287], "sy": [3, 22, 23, 59, 61, 147, 149, 151, 172, 202, 206, 223, 225, 240], "0m1": 3, "116": [3, 200, 206], "produc": [3, 5, 6, 7, 13, 26, 27, 29, 73, 105, 114, 121, 139, 142, 150, 152, 154, 156, 158, 160, 169, 176, 177, 182, 189, 192, 193, 197, 202, 203, 206, 221, 223, 225, 226, 227, 237, 244, 263, 267, 280, 285], "4092": 3, "2037": 3, "2039": 3, "1274": [3, 107], "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 231], "0520": 3, "0710": 3, "0935": 3, "0666": [3, 27], "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 157], "0m7": 3, "048": [3, 238], "0m0": 3, "619": 3, "gain": [3, 6, 20, 87, 186, 198, 222, 227, 231], "six": [3, 176], "kind": [3, 6, 7, 23, 27, 41, 49, 52, 55, 80, 96, 104, 106, 110, 122, 132, 151, 223, 298], "larg": [3, 4, 6, 7, 8, 14, 18, 19, 20, 22, 27, 41, 45, 55, 66, 93, 96, 100, 102, 105, 110, 112, 113, 115, 121, 128, 131, 132, 133, 134, 136, 139, 143, 147, 149, 152, 163, 169, 171, 176, 177, 179, 180, 181, 189, 190, 193, 195, 198, 200, 215, 226, 231, 233, 240, 246, 251, 263, 270, 271, 280, 285], "improv": [3, 6, 7, 10, 12, 20, 23, 24, 25, 28, 41, 55, 62, 98, 103, 105, 113, 118, 131, 132, 133, 134, 135, 136, 137, 140, 143, 155, 160, 167, 174, 177, 181, 182, 189, 190, 196, 200, 204, 205, 206, 217, 222, 223, 227, 228, 231, 238, 240, 242, 247, 249, 250, 252, 263, 264, 278, 280, 288, 292], "due": [3, 6, 7, 20, 22, 26, 58, 87, 90, 103, 114, 118, 133, 137, 142, 147, 166, 167, 174, 179, 190, 196, 200, 202, 205, 215, 221, 228, 231, 233, 241, 245, 247, 253, 267, 295, 298], "size": [3, 4, 6, 7, 10, 11, 13, 14, 16, 20, 22, 23, 24, 25, 27, 36, 37, 38, 41, 42, 46, 48, 49, 50, 52, 55, 57, 58, 61, 87, 93, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 122, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 149, 150, 152, 157, 158, 159, 160, 163, 166, 168, 169, 172, 174, 175, 176, 177, 178, 179, 182, 186, 189, 190, 192, 193, 195, 196, 198, 200, 201, 202, 203, 204, 205, 213, 216, 218, 222, 225, 231, 243, 244, 245, 247, 250, 252, 261, 262, 263, 264, 269, 271, 278, 279, 280, 284, 299], "larger": [3, 10, 14, 80, 87, 95, 105, 113, 117, 122, 132, 133, 134, 137, 139, 145, 155, 169, 174, 177, 180, 182, 186, 189, 190, 205, 218, 234, 243, 244, 251, 264, 285], "heavi": [3, 7, 55, 105, 109], "less": [3, 6, 7, 8, 10, 18, 23, 62, 87, 100, 105, 106, 113, 117, 128, 134, 139, 150, 154, 166, 169, 176, 177, 178, 186, 187, 190, 192, 193, 196, 200, 205, 223, 246, 264, 267, 269], "impact": [3, 14, 20, 41, 93, 105, 150, 169, 178, 181, 205, 231, 262, 298, 299], "smaller": [3, 11, 41, 100, 105, 112, 113, 133, 137, 174, 176, 178, 189, 234, 262, 264, 267, 269, 285], "nevertheless": [3, 6, 23, 27, 160, 176], "richard": 4, "zou": 4, "integr": [4, 7, 12, 16, 18, 27, 40, 93, 114, 118, 120, 132, 139, 142, 171, 186, 187, 190, 196, 197, 217, 222, 226, 228, 229, 237, 243, 251, 259, 262, 277, 282, 292, 298], "opcheck": [4, 18], "basic": [4, 10, 13, 17, 18, 19, 27, 28, 36, 37, 38, 41, 42, 43, 45, 46, 55, 60, 62, 63, 78, 82, 85, 92, 95, 98, 99, 100, 103, 105, 108, 112, 113, 114, 115, 117, 118, 121, 132, 137, 140, 143, 157, 164, 171, 176, 181, 193, 196, 214, 218, 243, 244, 264, 278, 284, 289, 290, 294, 295], "program": [4, 5, 6, 22, 25, 26, 27, 29, 66, 100, 106, 108, 109, 112, 132, 137, 140, 156, 169, 171, 179, 190, 198, 200, 208, 223, 225, 226, 228, 229, 244, 264, 280, 294, 295, 297, 298], "amd": [4, 6], "rocm": [4, 6, 186], "modif": [4, 16, 17, 23, 24, 25, 93, 106, 113, 143, 149, 173, 176, 179, 184, 187, 192, 196, 202, 279, 285, 295], "e": [4, 5, 6, 7, 8, 10, 12, 13, 18, 22, 26, 27, 29, 36, 37, 42, 48, 49, 55, 57, 58, 66, 80, 90, 93, 95, 98, 100, 103, 105, 108, 112, 113, 122, 128, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 149, 152, 155, 160, 167, 168, 172, 173, 178, 180, 182, 186, 190, 192, 196, 197, 202, 206, 215, 216, 218, 221, 222, 228, 233, 236, 237, 242, 246, 247, 249, 252, 264, 266, 270, 279, 280, 282, 283, 297], "g": [4, 6, 7, 8, 10, 12, 13, 16, 18, 22, 27, 29, 48, 55, 57, 58, 66, 93, 95, 98, 100, 103, 105, 107, 108, 112, 128, 132, 133, 135, 139, 140, 141, 147, 149, 151, 152, 157, 166, 168, 172, 176, 178, 180, 182, 186, 190, 192, 196, 197, 202, 206, 207, 216, 221, 222, 228, 236, 237, 246, 249, 264, 270, 279, 280], "etc": [4, 8, 12, 18, 49, 50, 52, 55, 57, 74, 98, 100, 103, 106, 107, 108, 109, 113, 122, 137, 169, 173, 176, 177, 182, 192, 193, 196, 201, 202, 215, 221, 228, 242, 247, 251, 252, 264, 266, 280, 282], "wish": [4, 6, 7, 8, 18, 27, 58, 80, 96, 103, 122, 136, 163, 168, 179, 189, 193, 197, 206, 214, 225, 244, 263, 293], "bring": [4, 8, 96, 136, 169, 176, 186, 189, 193, 205, 216, 236, 247, 267, 270, 280, 298], "bless": 4, "path": [4, 5, 6, 7, 22, 23, 26, 27, 38, 49, 55, 56, 58, 59, 80, 87, 93, 95, 98, 103, 104, 105, 106, 113, 122, 133, 134, 151, 157, 172, 174, 189, 190, 196, 200, 202, 204, 205, 206, 213, 220, 221, 223, 225, 226, 228, 237, 238, 243, 244, 259, 261, 264, 277, 279, 280, 281, 297, 298], "fuse": [4, 6, 20, 23, 132, 157, 174, 175, 183, 196, 197, 201, 202, 205, 217, 225, 231, 237, 249, 284], "subsystem": [4, 8, 18, 192, 292], "def": [4, 5, 6, 7, 10, 13, 16, 22, 23, 25, 26, 27, 38, 49, 59, 61, 90, 98, 107, 120, 122, 133, 134, 135, 136, 137, 142, 144, 147, 149, 151, 152, 157, 166, 167, 171, 172, 174, 178, 179, 180, 187, 189, 197, 198, 202, 203, 206, 207, 208, 213, 217, 221, 223, 225, 226, 227, 228, 229, 231, 233, 240, 242, 243, 244, 246, 247, 250, 251, 253, 259, 261, 264, 278, 290, 295, 299], "mymuladd": 4, "end": [4, 5, 6, 7, 10, 16, 18, 20, 23, 26, 27, 29, 36, 48, 55, 58, 60, 66, 87, 90, 95, 96, 98, 100, 103, 105, 110, 113, 121, 132, 134, 136, 137, 139, 141, 143, 149, 150, 151, 157, 159, 166, 171, 174, 175, 177, 178, 180, 182, 184, 186, 187, 190, 192, 193, 198, 203, 205, 206, 213, 225, 228, 229, 231, 252, 253, 261, 263, 264, 267, 270, 277, 280, 284, 294, 299], "bind": [4, 5, 7, 8, 12, 27, 132, 136, 204, 280, 298], "precompil": 4, "instead": [4, 5, 6, 7, 8, 10, 12, 18, 20, 23, 24, 26, 27, 29, 36, 49, 50, 55, 57, 58, 59, 69, 95, 98, 103, 106, 107, 112, 113, 120, 121, 128, 133, 134, 135, 138, 139, 141, 144, 145, 149, 155, 156, 158, 159, 160, 163, 166, 172, 173, 174, 175, 178, 179, 180, 182, 184, 186, 187, 189, 190, 192, 193, 195, 196, 197, 205, 213, 215, 216, 217, 218, 225, 226, 227, 228, 231, 236, 237, 244, 247, 251, 254, 259, 271, 285, 291, 293, 299], "cpp_extens": [4, 6, 12, 27, 172, 264], "extens": [4, 7, 8, 17, 21, 26, 27, 58, 96, 122, 132, 135, 142, 144, 149, 189, 207, 213, 215, 222, 223, 226, 251, 253, 264, 268, 276, 284, 291], "ahead": [4, 6, 26, 41, 98, 142, 166, 187, 192, 197, 244, 267, 280, 294, 297], "setuptool": [4, 12, 172, 186], "load_inlin": [4, 27, 264], "setup": [4, 6, 7, 12, 19, 23, 26, 40, 58, 59, 61, 133, 134, 139, 147, 166, 172, 180, 200, 205, 215, 216, 229, 236, 237, 243, 244, 246, 264, 270, 279], "extension_cpp": 4, "ext_modul": [4, 6, 12, 27, 172], "cppextens": [4, 6, 12, 27, 172], "muladd": 4, "cpp": [4, 5, 6, 7, 10, 26, 27, 131, 132, 157, 217, 222, 226, 252, 279, 294, 297], "py_limited_api": 4, "min": [4, 23, 58, 87, 100, 105, 128, 149, 172, 174, 176, 178, 180, 189, 192, 223, 228, 295], "expos": [4, 6, 7, 10, 26, 27, 104, 135, 180, 193, 201, 223, 225, 229, 237, 280], "stabl": [4, 5, 24, 30, 31, 32, 33, 34, 55, 68, 80, 105, 106, 117, 121, 128, 136, 153, 175, 185, 186, 188, 201, 235, 253, 263], "limit": [4, 5, 7, 11, 12, 13, 17, 20, 23, 43, 55, 66, 80, 114, 133, 137, 140, 150, 151, 152, 159, 160, 168, 169, 182, 190, 192, 193, 202, 205, 206, 223, 231, 243, 261, 264, 267, 277], "subset": [4, 16, 25, 27, 90, 93, 98, 102, 105, 117, 128, 149, 172, 174, 189, 215, 216, 251, 264, 297], "extra_compile_arg": [4, 12], "cxx": [4, 5, 7, 26, 27, 208, 237, 252], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 55, 105, 176, 186, 222], "cmdclass": [4, 6, 12, 27, 172], "build_ext": [4, 6, 12, 27, 172], "buildextens": [4, 6, 12, 27, 172], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 172], "cpython": [4, 6, 27, 279], "agnost": [4, 6, 265], "pure": [4, 5, 6, 7, 12, 27, 132, 140, 144, 152, 168, 192, 195, 207, 217, 226], "agnostic": 4, "minim": [4, 7, 12, 14, 20, 27, 41, 58, 68, 69, 72, 73, 74, 77, 78, 80, 87, 95, 107, 112, 113, 121, 132, 134, 139, 146, 151, 157, 171, 177, 190, 193, 202, 206, 213, 221, 226, 227, 231, 267, 280, 283, 285], "oldest": 4, "hexcod": 4, "throughout": [4, 14, 29, 58, 110, 149, 166, 169, 176, 187, 215, 277], "environ": [4, 5, 6, 7, 8, 13, 18, 21, 22, 26, 29, 40, 61, 87, 90, 96, 99, 102, 115, 125, 132, 133, 134, 137, 142, 146, 147, 149, 157, 169, 171, 172, 177, 178, 179, 180, 190, 192, 193, 196, 198, 200, 217, 229, 237, 238, 242, 243, 244, 245, 246, 247, 251, 259, 262, 264, 279, 280, 289, 294, 296, 297, 298, 299], "unknown": 4, "behavior": [4, 10, 12, 13, 14, 16, 26, 29, 41, 55, 57, 100, 110, 113, 114, 150, 156, 157, 160, 166, 169, 190, 192, 214, 215, 223, 225, 233, 269, 280, 291, 293, 298], "runnabl": [4, 139, 157, 193, 283], "three": [4, 7, 12, 14, 16, 17, 38, 41, 57, 58, 69, 80, 87, 90, 95, 96, 98, 102, 103, 106, 113, 118, 121, 122, 132, 136, 137, 140, 141, 160, 164, 167, 169, 172, 176, 180, 181, 182, 184, 186, 187, 193, 200, 205, 216, 217, 226, 227, 259, 261, 270, 297], "line": [4, 5, 6, 7, 10, 14, 18, 25, 26, 27, 55, 56, 57, 61, 62, 87, 98, 102, 103, 104, 105, 107, 113, 120, 139, 140, 141, 147, 149, 156, 157, 175, 177, 179, 180, 182, 186, 187, 190, 192, 200, 207, 208, 213, 215, 243, 244, 246, 252, 253, 269, 278, 280, 295, 296, 297, 298], "specif": [4, 6, 7, 10, 11, 12, 13, 20, 22, 23, 26, 27, 29, 38, 42, 49, 61, 80, 87, 93, 95, 96, 98, 100, 102, 104, 107, 108, 109, 113, 114, 115, 117, 118, 122, 125, 133, 134, 137, 140, 141, 143, 149, 150, 151, 157, 169, 171, 173, 174, 176, 178, 179, 180, 181, 182, 186, 187, 192, 193, 195, 196, 197, 206, 214, 217, 218, 221, 226, 227, 228, 229, 231, 237, 238, 242, 243, 244, 251, 252, 259, 262, 267, 270, 277, 279, 284, 289, 292, 294, 298, 299], "verifi": [4, 7, 24, 90, 95, 103, 118, 125, 144, 152, 154, 155, 158, 160, 173, 175, 193, 195, 204, 237, 251, 252, 259, 297], "met": [4, 16, 133, 169], "crash": [4, 7, 200], "wors": [4, 23], "silent": [4, 18, 157, 190, 226, 277], "incorrect": [4, 18, 58, 95, 98, 138, 144, 169, 190], "avoid": [4, 6, 19, 49, 93, 102, 105, 133, 134, 135, 137, 143, 147, 149, 160, 163, 166, 176, 178, 190, 192, 204, 205, 213, 214, 218, 222, 229, 231, 233, 243, 263, 264, 267, 269, 270, 277, 289, 298], "unstabl": 4, "libtorch_python": 4, "particular": [4, 5, 6, 7, 10, 13, 27, 38, 49, 57, 87, 88, 93, 95, 96, 98, 100, 112, 137, 139, 140, 142, 149, 152, 163, 168, 171, 179, 189, 192, 195, 196, 197, 213, 214, 216, 218, 269, 280, 289], "aten": [4, 6, 10, 12, 17, 27, 118, 120, 157, 186, 192, 202, 206, 207, 217, 221, 223, 225, 226, 227, 251, 252, 259, 270, 279], "strongli": [4, 17, 150, 167, 196], "recommend": [4, 5, 7, 8, 10, 12, 17, 22, 23, 24, 27, 66, 87, 96, 102, 113, 117, 132, 135, 141, 147, 151, 164, 174, 175, 182, 186, 192, 193, 195, 196, 198, 200, 201, 202, 206, 215, 221, 222, 226, 227, 238, 243, 251, 252, 259, 261, 269, 278, 279, 280, 297], "ascertain": [4, 204], "compliant": [4, 195, 243, 244], "safe": [4, 23, 27, 105, 169], "guarante": [4, 12, 105, 146, 149, 160, 169, 173, 179, 180, 192, 214, 295], "better": [4, 6, 7, 16, 20, 23, 25, 38, 41, 42, 49, 58, 62, 95, 98, 100, 102, 105, 112, 113, 117, 120, 132, 135, 136, 139, 140, 141, 142, 157, 158, 159, 166, 168, 169, 174, 176, 177, 182, 186, 187, 189, 192, 198, 202, 205, 213, 214, 220, 223, 225, 226, 227, 228, 231, 238, 264, 280, 288, 298], "wild": 4, "west": 4, "There": [4, 5, 7, 10, 12, 16, 17, 20, 26, 27, 29, 36, 52, 80, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 128, 131, 141, 142, 146, 150, 152, 156, 158, 160, 163, 166, 168, 171, 174, 175, 176, 179, 180, 182, 192, 193, 194, 195, 196, 197, 200, 201, 215, 223, 228, 231, 261, 264, 266, 267, 272, 273, 274, 275, 279, 280, 283, 286, 289, 294, 296, 298], "caveat": [4, 147, 178, 200, 228, 264, 269], "yourself": [4, 5, 6, 7, 10, 27, 40, 98, 109, 132, 159, 193, 203], "truli": [4, 7, 55, 159], "relev": [4, 5, 7, 16, 59, 106, 108, 112, 125, 134, 137, 173, 189, 192, 204, 280, 282, 289, 295], "third": [4, 7, 10, 14, 18, 26, 27, 58, 68, 69, 70, 72, 73, 74, 77, 78, 100, 103, 110, 121, 132, 136, 144, 172, 182, 213, 220, 236], "intend": [4, 6, 7, 10, 14, 27, 95, 105, 133, 137, 157, 160, 181, 190, 192, 196, 213, 223, 242, 266, 280, 290], "influenc": [4, 7, 58, 100, 169, 298], "accordingli": [4, 5, 11, 12, 22, 26, 150, 166, 178, 189, 238], "command": [4, 5, 6, 7, 16, 27, 56, 96, 102, 104, 117, 125, 132, 135, 146, 147, 151, 169, 172, 176, 178, 179, 180, 182, 186, 187, 189, 195, 198, 200, 208, 244, 246, 250, 251, 252, 270, 278, 280, 294, 295, 296, 297], "consequ": [4, 137, 169, 177, 192], "properli": [4, 10, 11, 12, 16, 27, 56, 61, 105, 144, 147, 149, 160, 166, 167, 176, 178, 179, 180, 182, 196, 213, 215, 233, 267, 277], "could": [4, 5, 6, 7, 10, 12, 13, 27, 58, 93, 95, 100, 105, 106, 107, 109, 110, 112, 115, 120, 133, 134, 137, 138, 141, 149, 160, 166, 169, 176, 177, 178, 179, 180, 182, 186, 187, 189, 192, 195, 197, 213, 215, 217, 221, 223, 226, 227, 228, 236, 244, 245, 246, 247, 252, 253, 259, 269, 270, 298], "outsid": [4, 12, 16, 17, 27, 50, 132, 135, 137, 143, 186, 189, 192, 213, 277, 285, 293], "cannot": [4, 6, 7, 13, 16, 22, 26, 27, 55, 66, 87, 103, 114, 118, 121, 122, 135, 136, 144, 147, 149, 150, 160, 169, 174, 176, 190, 192, 205, 220, 234, 236, 292], "mymuladd_cpu": 4, "const": [4, 5, 6, 7, 10, 12, 17, 26, 27, 157, 172, 207, 217, 252, 264, 279, 297], "torch_check": [4, 6, 10], "torch_internal_assert": [4, 10], "devicetyp": [4, 10, 17], "a_contig": 4, "contigu": [4, 6, 10, 37, 160, 217, 226, 227, 250, 280], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 10, 27, 207], "b_ptr": 4, "result_ptr": [4, 10], "int64_t": [4, 7, 10, 27, 217], "numel": [4, 10, 178, 213, 279], "order": [4, 5, 7, 8, 13, 14, 17, 18, 20, 24, 26, 36, 37, 38, 49, 50, 55, 56, 61, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 93, 95, 96, 98, 103, 113, 114, 115, 117, 118, 120, 121, 132, 133, 135, 138, 139, 141, 144, 147, 149, 156, 157, 158, 160, 172, 173, 179, 182, 184, 189, 190, 192, 193, 195, 196, 197, 198, 202, 215, 218, 228, 231, 236, 247, 269, 279, 289, 290, 298], "torch_librari": [4, 5, 7, 8, 10, 18, 26, 27, 252, 297], "ensur": [4, 6, 10, 11, 12, 13, 14, 16, 17, 23, 26, 42, 55, 59, 62, 69, 105, 113, 114, 120, 121, 122, 133, 146, 147, 149, 154, 169, 171, 176, 177, 179, 181, 189, 190, 193, 204, 207, 217, 225, 229, 233, 243, 264, 266, 267, 277, 283, 292, 297, 298], "awar": [4, 80, 95, 103, 137, 139, 149, 150, 151, 160, 181, 192, 203, 213, 222, 292], "top": [4, 6, 7, 10, 20, 23, 24, 26, 27, 40, 56, 58, 87, 88, 96, 99, 102, 105, 113, 137, 149, 174, 175, 180, 181, 186, 187, 190, 195, 202, 221, 223, 225, 226, 227, 231, 251, 259, 262, 297], "project": [4, 5, 6, 7, 27, 58, 95, 102, 122, 137, 172, 177, 182, 187, 218, 252, 253, 259, 284, 297, 299], "schema": [4, 12, 24, 27], "mutat": [4, 10, 12, 18, 121, 152, 168, 169, 192, 236, 241], "m": [4, 5, 6, 7, 10, 12, 16, 17, 23, 26, 27, 36, 48, 55, 95, 100, 109, 113, 133, 134, 151, 152, 157, 158, 172, 174, 175, 178, 180, 203, 204, 206, 217, 223, 225, 226, 231, 233, 244, 251, 259, 280, 298], "torch_library_impl": [4, 10, 12, 17], "impl": [4, 10, 12, 17, 279], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 23, 38, 120, 174, 175, 187, 231], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 14, 98, 105, 189, 197, 228, 270], "256": [4, 7, 20, 23, 57, 93, 137, 138, 159, 182, 192, 202, 223, 225, 228, 231, 238, 251, 262, 270], "faketensor": [4, 18, 192, 204], "kernel": [4, 6, 7, 8, 10, 15, 18, 20, 22, 27, 88, 98, 100, 103, 113, 118, 132, 135, 140, 152, 157, 160, 167, 168, 169, 181, 182, 183, 186, 190, 192, 193, 196, 205, 207, 208, 217, 221, 226, 227, 231, 235, 238, 247, 259, 264, 266, 269, 270, 280, 284, 287, 290, 295], "meta": [4, 18, 22, 135, 137, 139, 152, 168, 176, 192, 193, 228, 233, 271, 277, 284], "abstract": [4, 6, 13, 16, 38, 57, 66, 93, 103, 104, 108, 113, 121, 137, 139, 149, 155, 169, 172, 176, 193, 245, 246], "metadata": [4, 12, 18, 20, 26, 142, 176, 187, 192, 204, 231, 269], "correct": [4, 5, 6, 7, 10, 12, 13, 14, 15, 18, 23, 41, 48, 49, 52, 55, 69, 80, 90, 93, 95, 96, 98, 100, 103, 104, 106, 107, 113, 121, 133, 134, 138, 143, 150, 157, 160, 167, 176, 178, 179, 182, 184, 186, 187, 193, 198, 202, 204, 218, 223, 225, 246, 253, 263, 277, 295], "stride": [4, 6, 7, 18, 23, 58, 96, 98, 100, 133, 143, 157, 160, 189, 192, 197, 204, 216, 250, 262, 269], "register_fak": [4, 18], "though": [4, 7, 12, 27, 52, 80, 95, 103, 105, 106, 128, 143, 144, 152, 156, 168, 176, 187, 192, 193, 205, 213, 252, 264, 279], "definit": [4, 6, 7, 10, 12, 24, 26, 29, 43, 52, 73, 80, 90, 107, 121, 132, 156, 167, 177, 181, 201, 214, 250, 253, 261, 279, 280], "load": [4, 6, 20, 22, 23, 24, 25, 27, 28, 36, 37, 39, 40, 41, 45, 46, 48, 52, 57, 58, 61, 80, 93, 98, 103, 104, 106, 113, 115, 123, 132, 133, 135, 140, 157, 160, 166, 169, 171, 176, 186, 187, 189, 192, 193, 195, 200, 201, 202, 205, 206, 207, 220, 229, 231, 232, 237, 243, 252, 253, 263, 268, 276, 277, 279, 284, 285, 294, 295], "strive": 4, "load_librari": [4, 26, 27], "next": [4, 5, 6, 7, 10, 11, 13, 14, 16, 17, 19, 20, 23, 24, 26, 27, 38, 48, 55, 57, 59, 61, 62, 87, 90, 95, 98, 100, 103, 105, 106, 107, 110, 113, 115, 122, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 150, 151, 152, 156, 157, 159, 163, 166, 168, 169, 174, 177, 178, 179, 180, 182, 186, 187, 192, 193, 198, 201, 202, 205, 208, 215, 216, 220, 223, 225, 226, 227, 231, 234, 247, 251, 252, 259, 267, 269, 270, 285, 290], "_c": [4, 107, 136, 200, 206], "_": [4, 6, 13, 14, 16, 17, 23, 25, 39, 45, 49, 54, 55, 58, 97, 98, 103, 106, 107, 113, 116, 117, 135, 136, 140, 149, 151, 152, 163, 166, 174, 176, 178, 180, 187, 198, 201, 202, 206, 221, 223, 225, 226, 240, 242, 251, 262, 263, 267, 269, 295, 299], "_check": 4, "empty_lik": [4, 103, 160, 213], "formula": [4, 12, 18, 105, 154, 176], "matter": [4, 6, 189, 213, 215, 240, 263], "wrong": [4, 58, 80, 107, 140, 157, 190, 220], "hold": [4, 6, 16, 19, 22, 52, 68, 69, 70, 72, 73, 74, 93, 113, 121, 133, 134, 135, 140, 146, 166, 177, 178, 180, 269, 277, 280], "happen": [4, 10, 25, 27, 29, 36, 37, 38, 41, 48, 58, 95, 98, 100, 103, 105, 107, 113, 115, 134, 135, 137, 144, 147, 149, 169, 173, 178, 186, 187, 192, 193, 205, 206, 223, 226, 245, 264, 269, 280, 283, 293, 295], "modul": [4, 6, 11, 14, 15, 16, 19, 22, 23, 25, 26, 27, 28, 37, 42, 43, 46, 49, 50, 52, 55, 59, 61, 66, 71, 73, 75, 95, 96, 98, 103, 104, 107, 112, 117, 122, 123, 128, 132, 133, 134, 135, 137, 138, 142, 143, 147, 149, 152, 155, 156, 157, 160, 163, 166, 168, 171, 172, 174, 175, 176, 178, 179, 180, 181, 184, 187, 189, 190, 192, 196, 197, 200, 201, 202, 203, 205, 206, 207, 217, 221, 222, 223, 225, 226, 227, 228, 229, 231, 234, 237, 242, 243, 244, 245, 246, 251, 252, 253, 259, 261, 264, 266, 267, 268, 270, 276, 280, 282, 284, 285, 297, 298], "initi": [4, 7, 10, 13, 16, 19, 22, 23, 24, 25, 26, 27, 29, 37, 38, 41, 48, 55, 61, 69, 77, 78, 80, 96, 98, 103, 104, 105, 107, 110, 112, 113, 120, 121, 122, 128, 133, 134, 137, 140, 141, 150, 152, 155, 157, 160, 166, 169, 171, 173, 174, 175, 177, 178, 179, 180, 182, 186, 190, 193, 196, 198, 200, 216, 222, 225, 234, 237, 243, 244, 246, 251, 259, 262, 264, 267, 269, 277, 280, 285, 297], "pybind11_modul": [4, 6, 172], "notic": [4, 6, 10, 16, 25, 26, 27, 29, 36, 48, 49, 58, 80, 90, 95, 98, 103, 105, 107, 122, 144, 149, 157, 159, 167, 168, 174, 176, 186, 190, 192, 196, 213, 215, 220, 283, 295, 297], "pybind11": [4, 6, 10, 26, 27, 172, 264], "promis": [4, 113, 217], "With": [4, 5, 10, 12, 17, 19, 20, 22, 23, 25, 45, 54, 58, 80, 90, 95, 96, 102, 109, 135, 137, 144, 147, 149, 151, 157, 163, 166, 171, 178, 179, 180, 181, 182, 183, 198, 205, 207, 223, 226, 228, 231, 238, 241, 242, 243, 246, 247, 259, 261, 262, 267, 269, 277, 280, 294, 297, 298, 299], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 107, 166, 169, 193, 196], "sai": [4, 5, 6, 7, 18, 28, 48, 57, 103, 107, 109, 112, 135, 138, 152, 158, 166, 173, 186, 205, 228, 267], "not_agnost": 4, "csrc": [4, 6, 26, 27, 172], "extension_bad": 4, "__init__": [4, 5, 6, 7, 13, 16, 23, 25, 26, 37, 42, 49, 57, 59, 98, 100, 107, 120, 122, 133, 140, 142, 147, 149, 152, 171, 173, 178, 179, 180, 187, 189, 197, 202, 203, 217, 223, 225, 226, 229, 233, 242, 243, 244, 246, 247, 250, 251, 253, 259, 261, 266, 269, 295], "successfulli": [4, 5, 7, 26, 49, 56, 115, 136, 139, 149, 157, 171, 179, 192, 193, 215, 237, 249, 251, 266, 281, 282, 283, 297], "extern": [4, 57, 105, 122, 139, 156, 157, 207, 217, 226, 280], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 17, 26], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 200, 259], "interpret": [4, 6, 7, 27, 29, 62, 87, 90, 96, 112, 132, 141, 142, 151, 182, 190, 192, 207, 222, 247, 264, 268, 276, 279, 284, 295, 298], "global": [4, 6, 7, 29, 55, 62, 93, 137, 152, 166, 171, 179, 184, 192, 202, 229, 231, 240, 242, 245, 247, 265, 277, 279, 280], "variabl": [4, 5, 6, 7, 10, 24, 26, 27, 36, 55, 87, 93, 95, 103, 106, 107, 109, 113, 125, 142, 146, 149, 157, 171, 178, 181, 192, 193, 196, 200, 205, 208, 215, 217, 218, 229, 236, 237, 238, 251, 259, 289, 296, 298], "pymodule_cr": 4, "entir": [4, 6, 7, 16, 19, 22, 23, 29, 52, 55, 59, 105, 107, 110, 113, 128, 132, 133, 134, 140, 142, 143, 155, 166, 168, 171, 173, 174, 176, 180, 182, 192, 193, 202, 213, 214, 215, 223, 225, 244, 263, 269, 271, 280, 284, 285, 295], "statement": [4, 10, 25, 29, 36, 48, 50, 114, 182, 192, 203, 229, 263, 265], "trigger": [4, 135, 147, 157, 169, 178, 180, 280], "challeng": [4, 16, 109, 110, 114, 133, 136, 137, 149, 155, 167, 177, 189, 244, 245, 246, 264, 284], "shift": [4, 176], "toward": [4, 23, 55, 105, 141, 177, 202, 267], "trivial": [4, 16, 57, 62, 103, 138, 193, 233, 245], "pathlib": [4, 113, 134, 189], "so_fil": 4, "__file__": [4, 6, 172, 264], "glob": 4, "assert": [4, 6, 13, 22, 23, 135, 142, 147, 152, 157, 179, 181, 187, 192, 198, 200, 204, 228, 231, 240, 290], "len": [4, 23, 38, 57, 61, 107, 113, 128, 133, 134, 135, 149, 151, 174, 178, 179, 187, 189, 206, 223, 225, 228, 231, 246, 247, 253], "f": [4, 6, 10, 13, 14, 18, 22, 23, 26, 36, 38, 48, 49, 52, 59, 61, 73, 95, 98, 107, 113, 121, 122, 133, 134, 136, 137, 138, 147, 149, 151, 152, 157, 158, 166, 171, 172, 174, 175, 178, 179, 180, 187, 189, 198, 200, 202, 204, 206, 207, 223, 225, 231, 236, 240, 242, 243, 244, 246, 247, 251, 253, 259, 264, 297, 299], "register_autograd": [4, 18, 292], "prefer": [4, 5, 7, 10, 18, 59, 158, 163, 172, 176, 190, 193, 200, 217, 263, 292], "directli": [4, 5, 6, 7, 10, 13, 14, 16, 18, 24, 26, 27, 29, 37, 45, 54, 58, 90, 93, 95, 96, 98, 103, 114, 115, 117, 118, 135, 136, 137, 142, 144, 145, 151, 158, 169, 175, 176, 180, 182, 193, 200, 202, 205, 206, 215, 216, 233, 237, 242, 244, 247, 253, 261, 298], "_backward": 4, "saved_tensor": [4, 6, 144], "grad_a": 4, "grad_b": 4, "none": [4, 13, 16, 17, 22, 23, 38, 55, 93, 95, 105, 113, 133, 134, 135, 149, 151, 152, 157, 160, 166, 168, 171, 174, 179, 189, 192, 197, 202, 206, 221, 223, 225, 227, 231, 233, 238, 243, 244, 246, 247, 278, 290], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 8, 13, 18, 29, 107, 108, 158, 171, 176, 246, 292], "had": [4, 7, 27, 52, 57, 95, 98, 103, 110, 113, 115, 121, 166, 167, 177, 187, 223, 252, 259, 277], "own": [4, 6, 7, 10, 12, 13, 16, 19, 20, 22, 27, 29, 37, 38, 55, 58, 69, 80, 93, 95, 96, 98, 113, 118, 120, 121, 132, 133, 134, 135, 141, 142, 143, 147, 157, 166, 167, 173, 175, 176, 179, 180, 182, 189, 190, 192, 193, 195, 196, 197, 200, 205, 220, 223, 225, 228, 231, 243, 245, 247, 264, 277], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 14, 18, 55, 58, 80, 95, 96, 98, 125, 132, 135, 154, 160, 166, 169, 171, 173, 175, 189, 190, 193, 196, 215, 225, 246, 283], "mathemat": [4, 12, 15, 18, 48, 54, 69, 95, 98, 100, 109, 149, 176, 192], "plan": [4, 5, 7, 8, 12, 22, 122, 134, 137, 189, 193, 202, 216, 225, 237], "gradcheck": [4, 18, 143, 144, 154, 280], "sample_input": [4, 122], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 5, 7, 23, 27, 49, 87, 90, 93, 98, 103, 107, 120, 133, 139, 140, 147, 149, 150, 160, 166, 173, 178, 180, 186, 225, 231, 253, 264, 270, 279, 295, 299], "14": [4, 7, 26, 27, 28, 73, 98, 107, 133, 157, 189, 196, 251, 252, 253, 261, 264, 270, 298], "123": [4, 57, 180, 251], "reference_muladd": 4, "extend": [4, 5, 6, 7, 10, 23, 28, 58, 93, 114, 115, 116, 117, 132, 133, 141, 150, 175, 179, 180, 189, 193, 197, 200, 207, 222, 226, 252, 253, 280, 285, 289, 291], "arg": [4, 22, 23, 25, 59, 61, 109, 122, 133, 134, 147, 149, 151, 156, 174, 177, 178, 179, 180, 189, 190, 192, 206, 207, 225, 228, 240, 242, 243, 244, 247, 252, 295, 299], "assert_clos": 4, "check": [4, 5, 6, 7, 10, 15, 16, 17, 23, 24, 26, 27, 29, 40, 41, 42, 45, 48, 49, 50, 55, 56, 58, 61, 64, 65, 80, 86, 90, 95, 98, 100, 103, 104, 105, 106, 109, 113, 115, 120, 132, 133, 134, 135, 136, 139, 140, 147, 149, 150, 154, 157, 160, 168, 169, 173, 175, 176, 179, 189, 190, 192, 193, 195, 196, 208, 210, 211, 216, 217, 218, 219, 221, 225, 228, 229, 237, 239, 244, 251, 252, 255, 256, 257, 258, 259, 260, 263, 270, 288, 290, 294, 295, 297], "undefin": [4, 149, 196, 213, 214, 215], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 160, 279], "caus": [4, 14, 17, 25, 26, 80, 87, 95, 103, 113, 138, 157, 169, 175, 178, 182, 186, 189, 192, 193, 200, 213, 220, 229, 259, 261, 265, 280, 293, 298], "incompat": [4, 5, 136, 192, 223, 295], "went": [4, 58, 100, 103, 142, 157, 223], "fairli": [4, 6, 105, 113, 149, 166, 177, 196], "longer": [5, 14, 25, 26, 29, 58, 64, 65, 95, 107, 113, 121, 135, 138, 142, 157, 166, 173, 177, 178, 190, 192, 193, 210, 211, 217, 218, 219, 223, 225, 234, 237, 239, 241, 247, 255, 256, 257, 258, 260, 264, 280, 297], "activ": [5, 6, 7, 11, 12, 14, 16, 17, 20, 23, 25, 26, 29, 37, 58, 64, 65, 87, 95, 96, 98, 105, 107, 113, 134, 137, 142, 145, 149, 151, 158, 166, 173, 175, 186, 196, 197, 198, 202, 206, 207, 208, 210, 211, 219, 220, 221, 226, 227, 228, 231, 234, 238, 239, 247, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 267, 270, 280, 297], "primari": [5, 6, 7, 17, 155, 169, 207, 217, 218, 237, 245, 279, 280, 298], "languag": [5, 6, 7, 21, 25, 27, 28, 29, 49, 55, 100, 106, 108, 110, 132, 137, 139, 140, 141, 151, 164, 180, 182, 198, 201, 207, 220, 238, 251, 267, 280, 285, 290, 292, 295, 297], "suitabl": [5, 10, 46, 145, 149, 189, 226, 279], "eas": [5, 6, 90, 103, 104, 134, 196, 252, 269, 284], "situat": [5, 17, 27, 29, 95, 103, 135, 143, 144, 147, 149, 193, 195, 205, 220], "properti": [5, 6, 7, 13, 16, 25, 27, 29, 36, 45, 54, 95, 98, 103, 109, 112, 139, 167, 182, 192, 214, 252, 263, 264, 277, 282, 297], "unfavor": 5, "latter": [5, 6, 7, 139, 178, 225], "land": [5, 18, 27, 132, 142, 159, 196, 215, 252, 299], "latenc": [5, 7, 20, 132, 137, 139, 146, 157, 169, 175, 190, 193, 231, 251, 289, 290, 298], "strict": [5, 122, 189, 214, 227, 252, 281], "even": [5, 6, 7, 10, 12, 16, 19, 25, 27, 29, 48, 49, 57, 80, 95, 98, 100, 103, 112, 113, 122, 133, 134, 137, 142, 144, 147, 155, 156, 158, 167, 169, 176, 178, 181, 189, 192, 193, 196, 205, 213, 215, 216, 220, 228, 234, 251, 261, 264, 280, 281], "java": 5, "rust": 5, "go": [5, 13, 14, 15, 16, 19, 22, 23, 25, 26, 27, 29, 45, 54, 57, 95, 96, 98, 103, 104, 106, 109, 110, 113, 114, 115, 117, 118, 128, 132, 134, 138, 146, 149, 152, 155, 156, 158, 171, 174, 175, 177, 179, 182, 187, 192, 193, 195, 197, 204, 205, 213, 228, 244, 261, 264, 267, 278, 279, 297], "paragraph": [5, 7, 27], "outlin": [5, 6, 7, 27, 169, 193], "journei": [5, 7, 58, 151], "enabl": [5, 6, 7, 10, 13, 16, 17, 19, 22, 23, 27, 28, 38, 52, 61, 62, 87, 95, 103, 105, 117, 122, 133, 134, 136, 137, 139, 142, 143, 144, 147, 149, 151, 157, 160, 166, 169, 171, 173, 175, 176, 186, 187, 189, 192, 193, 197, 203, 204, 205, 213, 215, 217, 218, 220, 222, 226, 229, 238, 243, 244, 245, 247, 251, 252, 259, 261, 263, 270, 277, 284, 285, 289, 290, 291, 293, 294, 298, 299], "vanilla": [5, 6, 7, 27, 55, 70, 107, 121, 189, 196, 213, 299], "eager": [5, 12, 27, 90, 92, 132, 142, 157, 160, 181, 190, 192, 193, 196, 201, 220, 221, 223, 225, 226, 227, 228, 240, 249, 253, 280, 293, 295], "discuss": [5, 6, 7, 10, 12, 17, 19, 27, 49, 80, 95, 98, 100, 104, 109, 110, 133, 134, 142, 149, 155, 156, 157, 163, 169, 171, 190, 196, 200, 203, 213, 214, 215, 216, 261, 269, 290, 292], "littl": [5, 20, 29, 58, 98, 105, 107, 113, 150, 176, 178, 180, 181, 184, 186, 231], "effort": [5, 16, 55, 57, 58, 118, 202, 220, 222, 279], "mechan": [5, 6, 7, 13, 16, 17, 28, 36, 55, 62, 104, 132, 144, 156, 167, 182, 184, 186, 192, 221, 222, 226, 227, 247, 252, 253, 259, 289, 290], "evalu": [5, 7, 11, 14, 20, 23, 24, 28, 41, 43, 80, 95, 96, 102, 105, 115, 122, 142, 158, 163, 171, 177, 179, 187, 190, 192, 195, 201, 225, 231, 253, 295], "onc": [5, 6, 7, 10, 12, 13, 16, 19, 20, 24, 25, 26, 27, 29, 36, 38, 41, 57, 58, 62, 87, 96, 98, 102, 103, 104, 105, 106, 110, 115, 145, 150, 160, 166, 167, 173, 175, 176, 177, 179, 182, 186, 187, 192, 193, 204, 205, 206, 218, 220, 231, 245, 252, 259, 263, 264, 280, 294, 295], "record": [5, 7, 10, 23, 24, 27, 29, 36, 48, 55, 113, 122, 132, 133, 134, 142, 143, 144, 166, 176, 177, 179, 180, 192, 222, 253, 267, 270, 295], "explicit": [5, 7, 25, 27, 132, 135, 160, 169, 180, 192, 196, 214, 228, 229, 259, 263, 284, 287, 292], "pars": [5, 6, 27, 55, 57, 112, 133, 134, 139, 200, 264], "subject": [5, 13, 16, 27, 133, 154, 182, 192, 217, 218, 221, 225, 236, 237, 238, 242, 249, 264, 294], "constraint": [5, 7, 14, 20, 22, 90, 107, 132, 137, 139, 167, 176, 189, 193, 198, 200, 223, 225, 228, 231, 243, 263, 264, 277, 295], "impos": [5, 265, 277], "guidanc": [5, 10, 136, 220, 263, 298], "offici": [5, 87, 118, 136, 149, 177, 190, 192, 201, 226, 250, 252], "jit": [5, 7, 10, 17, 23, 25, 26, 29, 90, 117, 151, 155, 160, 190, 202, 206, 225, 234, 237, 238, 247, 250, 252, 264, 270, 280, 285, 292, 294, 295, 297], "scriptmodul": [5, 26, 27, 29, 90, 234, 297], "embed": [5, 19, 25, 27, 55, 100, 106, 108, 110, 111, 122, 132, 134, 135, 137, 151, 171, 179, 180, 182, 187, 196, 198, 201, 220, 245], "torchvis": [5, 12, 14, 23, 38, 40, 42, 46, 48, 49, 56, 63, 93, 96, 98, 99, 102, 104, 105, 128, 132, 133, 134, 151, 156, 166, 174, 175, 178, 179, 183, 186, 187, 189, 190, 202, 205, 221, 223, 225, 226, 227, 228, 237, 252, 253, 261, 262, 270, 278, 280, 283, 288, 294, 295, 297], "resnet18": [5, 48, 160, 174, 175, 186, 189, 202, 220, 221, 223, 225, 226, 227, 262, 294, 297], "normal": [5, 7, 10, 13, 14, 23, 24, 25, 41, 43, 46, 55, 57, 58, 90, 96, 98, 100, 104, 105, 107, 112, 121, 122, 128, 133, 143, 149, 150, 167, 169, 174, 175, 178, 179, 181, 182, 187, 189, 190, 193, 196, 202, 205, 214, 223, 225, 247, 252, 253, 261, 262, 280, 288, 293], "rand": [5, 6, 7, 17, 25, 90, 98, 103, 120, 144, 166, 197, 198, 223, 225, 231, 237, 240, 243, 244, 251, 252, 259, 280, 288, 290, 297], "224": [5, 14, 23, 24, 57, 105, 166, 174, 175, 189, 202, 221, 223, 225, 226, 227, 237, 250, 252, 262, 288, 295, 297, 298], "traced_script_modul": 5, "ident": [5, 7, 20, 61, 90, 95, 103, 104, 113, 121, 137, 146, 155, 163, 174, 187, 192, 206, 216, 231, 250, 264], "2698": 5, "0381": 5, "4023": 5, "3010": 5, "0448": 5, "slicebackward": 5, "circumst": [5, 6, 169, 263], "emploi": [5, 105, 182, 186, 196, 243], "form": [5, 7, 11, 14, 17, 20, 27, 46, 52, 55, 58, 66, 106, 113, 115, 132, 138, 141, 157, 182, 189, 196, 205, 218, 231, 233, 243, 244, 259, 267, 280, 290, 298], "mymodul": [5, 7, 120, 233, 242], "self": [5, 6, 7, 10, 12, 13, 16, 17, 23, 25, 26, 28, 29, 38, 49, 55, 59, 61, 98, 107, 113, 120, 121, 122, 132, 133, 137, 142, 147, 149, 152, 157, 159, 167, 171, 178, 179, 180, 186, 187, 189, 192, 196, 197, 202, 203, 206, 217, 223, 225, 226, 233, 242, 243, 244, 246, 247, 250, 251, 253, 259, 261, 270, 277, 285, 295], "n": [5, 6, 7, 14, 20, 23, 26, 27, 36, 48, 66, 77, 78, 87, 90, 95, 100, 103, 105, 113, 121, 133, 134, 135, 147, 149, 151, 158, 159, 163, 171, 173, 178, 179, 180, 182, 187, 192, 193, 195, 200, 202, 205, 206, 217, 223, 225, 228, 231, 236, 252, 280, 297], "super": [5, 6, 7, 13, 22, 23, 24, 25, 26, 29, 49, 98, 107, 120, 122, 133, 136, 142, 147, 152, 159, 171, 178, 179, 180, 187, 189, 197, 217, 223, 225, 226, 233, 242, 243, 244, 246, 250, 251, 253, 259, 267, 295], "mv": 5, "my_modul": 5, "sm": [5, 186], "exclud": [5, 10, 48, 135, 190, 221, 270], "doesn": [5, 8, 10, 12, 15, 18, 20, 29, 66, 107, 109, 112, 113, 138, 158, 160, 169, 173, 189, 190, 192, 197, 203, 205, 213, 220, 225, 228, 231, 236, 240, 241, 249, 261, 279, 280, 291, 295, 296, 298], "support": [5, 7, 13, 16, 17, 19, 20, 22, 23, 26, 27, 28, 36, 42, 52, 57, 62, 64, 65, 80, 88, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 114, 115, 116, 117, 120, 132, 133, 134, 135, 136, 139, 144, 146, 147, 149, 150, 151, 154, 157, 160, 167, 169, 171, 172, 173, 175, 176, 178, 179, 180, 186, 189, 190, 192, 195, 197, 200, 201, 202, 203, 204, 206, 208, 210, 211, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 231, 237, 238, 239, 240, 241, 242, 244, 249, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 264, 270, 280, 284, 289, 291, 294, 295, 296, 298], "yet": [5, 7, 12, 13, 22, 27, 56, 80, 95, 98, 103, 117, 118, 142, 149, 169, 179, 182, 193, 197, 206, 218, 225, 226, 227, 244, 247, 252, 295], "ignor": [5, 23, 57, 105, 110, 112, 122, 172, 189, 192, 195, 197, 202, 214, 215, 218, 223, 225, 250, 263, 270, 281, 293], "readi": [5, 7, 11, 12, 19, 26, 27, 55, 96, 98, 104, 106, 107, 112, 113, 132, 134, 149, 163, 171, 172, 176, 178, 179, 180, 193, 195, 225, 226, 261, 270, 295], "hand": [5, 6, 7, 10, 16, 20, 22, 27, 80, 103, 106, 112, 113, 141, 149, 168, 169, 190, 192, 193, 214, 231, 243, 244, 267, 285], "shown": [5, 7, 10, 20, 23, 24, 25, 58, 95, 103, 113, 135, 137, 139, 151, 157, 159, 174, 177, 178, 180, 181, 186, 189, 190, 193, 200, 203, 214, 215, 216, 220, 225, 228, 229, 231, 244, 251, 252, 259, 261, 267, 294, 295, 296, 298, 299], "filenam": [5, 7, 120, 189, 200, 263], "traced_resnet_model": 5, "pt": [5, 7, 26, 27, 59, 122, 133, 134, 135, 151, 204, 237, 250, 252, 253, 261, 290, 297], "my_module_model": 5, "left": [5, 20, 36, 48, 52, 55, 58, 69, 90, 95, 102, 103, 107, 112, 121, 122, 149, 151, 159, 163, 176, 177, 179, 181, 186, 187, 228, 231, 259, 267, 284], "realm": [5, 7], "cross": [5, 10, 15, 24, 49, 58, 98, 100, 104, 137, 139, 280, 283, 298], "sphere": 5, "distribut": [5, 6, 7, 16, 17, 23, 58, 80, 93, 98, 103, 104, 105, 107, 112, 132, 133, 134, 135, 136, 137, 139, 145, 146, 151, 160, 166, 172, 176, 178, 186, 196, 198, 200, 206, 221, 222, 233, 242, 245, 246, 262, 264, 284, 298, 299], "encompass": 5, "share": [5, 6, 7, 12, 13, 22, 26, 27, 45, 54, 61, 71, 75, 93, 105, 109, 132, 134, 138, 147, 149, 150, 159, 169, 176, 179, 180, 192, 200, 220, 244, 252, 264, 269, 279, 289, 294, 298], "header": [5, 6, 7, 10, 26, 27, 172, 264], "cmake": [5, 7, 237, 252, 297], "futur": [5, 22, 25, 26, 55, 113, 118, 120, 133, 151, 154, 159, 166, 172, 174, 177, 178, 179, 180, 197, 201, 216, 223, 225, 226, 228, 243, 251, 282, 293], "begin": [5, 6, 7, 13, 14, 20, 23, 26, 27, 29, 36, 48, 55, 56, 58, 61, 80, 90, 95, 98, 110, 112, 134, 137, 151, 164, 166, 174, 177, 179, 186, 187, 193, 215, 231, 249, 261, 263, 264, 266, 270, 281, 282, 283, 285], "iostream": [5, 6, 7, 26, 27, 252], "argc": [5, 26, 27, 252, 297], "char": [5, 26, 27, 157, 252, 297], "argv": [5, 26, 27, 59, 61, 252, 297], "cerr": [5, 26, 27, 252, 297], "app": [5, 27, 115, 132, 243, 244, 252, 261, 284], "export": [5, 8, 10, 21, 25, 27, 52, 90, 95, 116, 117, 132, 146, 147, 151, 157, 181, 183, 190, 217, 222, 229, 238, 251, 263, 280, 284], "try": [5, 7, 14, 16, 17, 20, 23, 25, 26, 27, 29, 41, 45, 49, 52, 54, 55, 58, 59, 66, 80, 95, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 120, 136, 139, 140, 141, 142, 150, 155, 157, 159, 163, 166, 169, 171, 172, 173, 176, 177, 182, 186, 190, 192, 196, 198, 202, 205, 214, 223, 231, 247, 251, 252, 263, 264, 267, 277, 278, 295, 297, 298], "deseri": [5, 7, 27, 122, 202, 223, 225, 297], "catch": [5, 10, 13, 26, 190, 192, 252, 293, 297], "c10": [5, 10, 12, 17, 26, 172, 207, 217, 251, 252, 264, 279, 297], "ok": [5, 112, 136, 178], "accept": [5, 6, 24, 46, 93, 95, 105, 110, 137, 139, 154, 158, 163, 168, 169, 176, 179, 186, 189, 197, 228, 233, 236, 242, 251, 270, 280], "proce": [5, 13, 29, 105, 107, 157, 174, 192, 200, 267, 280], "examin": [5, 13, 26, 29, 87, 95, 96, 102, 104, 105, 149, 156, 169, 193], "moment": [5, 7, 13, 197, 216, 237], "cmakelist": [5, 7, 26, 27, 252, 297], "txt": [5, 6, 7, 26, 27, 55, 140, 141, 151, 157, 175, 182, 206, 245, 252, 297], "cmake_minimum_requir": [5, 7, 26, 27, 252, 297], "fatal_error": [5, 7, 26, 27, 252, 297], "custom_op": [5, 18, 118, 292, 297], "find_packag": [5, 7, 26, 27, 252, 297], "add_execut": [5, 7, 26, 27, 252, 297], "target_link_librari": [5, 7, 26, 27, 252, 297], "set_properti": [5, 7, 252, 297], "cxx_standard": [5, 7, 252, 297], "17": [5, 7, 25, 27, 38, 73, 98, 107, 120, 157, 192, 234, 251, 264], "last": [5, 7, 13, 16, 23, 27, 37, 48, 55, 58, 59, 80, 88, 90, 93, 98, 100, 103, 104, 107, 110, 115, 128, 132, 137, 138, 141, 149, 150, 157, 166, 174, 176, 177, 178, 180, 181, 182, 183, 187, 192, 195, 213, 216, 221, 250, 252, 261, 263, 280, 284, 295], "thing": [5, 6, 7, 10, 17, 18, 25, 26, 27, 29, 36, 48, 49, 52, 55, 90, 93, 95, 98, 103, 104, 105, 106, 107, 109, 110, 112, 113, 132, 135, 137, 138, 139, 144, 145, 146, 149, 150, 156, 157, 160, 167, 175, 176, 184, 192, 202, 205, 220, 223, 229, 243, 264, 283], "grab": [5, 7, 8, 58, 102, 175, 180], "latest": [5, 7, 9, 12, 16, 24, 93, 96, 121, 122, 132, 134, 142, 149, 151, 162, 170, 174, 175, 176, 179, 182, 184, 189, 190], "page": [5, 7, 8, 12, 18, 26, 27, 56, 60, 66, 94, 113, 120, 121, 132, 140, 142, 169, 180, 186, 192, 193, 226, 238, 243, 248, 252, 280, 293], "websit": [5, 7, 96, 177, 259, 262], "unzip": [5, 7, 23, 56, 189, 195, 201, 202, 223, 225, 294], "archiv": [5, 6, 7, 29, 160, 192, 294], "folder": [5, 7, 23, 27, 56, 58, 87, 88, 96, 98, 134, 151, 187, 195, 200, 201, 202, 206, 223, 225, 237, 250], "bin": [5, 7, 26, 27, 98, 149, 207, 250, 252, 259, 294], "lib": [5, 6, 7, 12, 22, 26, 27, 157, 166, 200, 252, 279, 295, 298], "against": [5, 18, 26, 27, 41, 42, 49, 100, 102, 115, 136, 149, 160, 176, 196, 242, 252, 264, 267], "window": [5, 6, 7, 24, 49, 57, 98, 100, 112, 115, 132, 147, 179, 186, 195, 222, 237, 259], "debug": [5, 7, 10, 23, 29, 66, 106, 132, 138, 177, 183, 192, 207, 220, 222, 245, 264, 279, 289], "abi": [5, 6, 7, 26, 27, 237, 252], "laid": 5, "within": [5, 6, 16, 22, 25, 27, 66, 90, 95, 96, 102, 113, 114, 115, 120, 137, 142, 144, 151, 155, 157, 167, 173, 177, 179, 189, 190, 193, 196, 204, 206, 207, 216, 217, 218, 220, 226, 227, 229, 237, 246, 251, 264, 271, 280, 289, 291, 294, 298], "mkdir": [5, 7, 27, 186, 189, 201], "cd": [5, 7, 26, 27, 186, 195, 201, 237, 250, 259], "dcmake_prefix_path": [5, 7, 26, 27, 252, 297], "config": [5, 7, 12, 20, 24, 93, 133, 135, 139, 142, 151, 175, 197, 204, 205, 206, 207, 217, 223, 226, 227, 231, 252, 253, 277, 285, 289, 292, 295], "someth": [5, 6, 7, 13, 16, 23, 27, 29, 49, 93, 98, 103, 107, 109, 149, 157, 174, 175, 182, 192, 196, 236, 264, 267, 279], "root": [5, 6, 7, 16, 26, 27, 36, 38, 48, 49, 57, 58, 98, 106, 135, 143, 150, 157, 179, 180, 200, 252, 259, 278, 288], "4b5a67132e81": 5, "identif": [5, 7, 26, 27, 252], "gnu": [5, 6, 7, 26, 27, 252, 280, 298], "usr": [5, 7, 22, 26, 27, 149, 252], "cc": [5, 7, 26, 27, 48, 237, 252], "detect": [5, 7, 13, 14, 22, 26, 27, 58, 100, 132, 175, 183, 186, 190, 192, 252, 266, 280, 293, 298], "info": [5, 6, 7, 26, 27, 87, 136, 146, 149, 151, 159, 189, 192, 206, 238, 252, 253, 261], "pthread": [5, 6, 7, 26, 27, 252], "pthread_creat": [5, 7, 26, 27, 252], "thread": [5, 6, 7, 10, 11, 25, 26, 27, 58, 120, 135, 136, 147, 151, 152, 169, 175, 178, 179, 180, 201, 202, 247, 252, 259, 264, 270, 279, 280, 298], "scan": [5, 7, 26, 27, 98, 100, 189, 192], "50": [5, 7, 20, 23, 25, 26, 27, 58, 59, 98, 113, 150, 160, 173, 177, 180, 195, 202, 206, 221, 223, 226, 227, 231, 234, 251, 253, 261, 280], "cmakefil": [5, 7, 26, 27], "dir": [5, 7, 26, 27, 87, 102, 139, 200, 279, 289], "o": [5, 6, 7, 13, 22, 23, 26, 27, 38, 55, 56, 59, 61, 105, 133, 134, 136, 147, 149, 151, 163, 166, 169, 171, 172, 174, 175, 178, 179, 180, 189, 198, 200, 202, 204, 206, 223, 225, 229, 231, 242, 243, 244, 246, 261, 264, 269, 299], "100": [5, 7, 11, 23, 25, 26, 27, 38, 49, 54, 73, 98, 107, 121, 133, 136, 142, 147, 152, 157, 160, 166, 175, 176, 177, 180, 187, 189, 202, 217, 223, 225, 231, 246, 251, 253, 264, 279, 290], "suppli": [5, 7, 109, 160, 175], "binari": [5, 7, 24, 26, 27, 55, 58, 103, 115, 149, 160, 190, 214, 222, 226, 242, 250, 252, 294], "1d": [5, 73, 100, 121, 236, 280], "4d": [5, 52, 160, 228], "path_to_model": 5, "coupl": [5, 16, 40, 55, 99, 103, 104, 112, 134, 137, 144, 150, 152, 166, 169, 187, 192, 203, 234, 280], "awai": [5, 6, 7, 27, 52, 100, 102, 106, 107, 109, 176, 177, 178, 193, 216, 245, 267], "ivalu": [5, 27, 172, 237, 252, 297], "push_back": [5, 26, 27, 252, 297], "totensor": [5, 23, 27, 38, 49, 57, 98, 133, 149, 174, 175, 179, 187, 189, 202, 223, 225, 237, 252, 253, 262, 288, 297], "slice": [5, 6, 45, 54, 110, 113, 173, 196, 218, 237, 246, 279], "eras": [5, 29], "http": [5, 7, 11, 22, 23, 28, 29, 30, 31, 32, 33, 34, 39, 50, 51, 55, 68, 80, 81, 82, 83, 84, 85, 86, 89, 97, 102, 105, 108, 115, 116, 117, 118, 121, 128, 133, 140, 141, 143, 151, 153, 154, 155, 156, 160, 166, 168, 174, 175, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 201, 202, 205, 209, 212, 214, 216, 227, 234, 235, 236, 237, 250, 253, 262, 263, 264, 267, 268, 269, 272, 273, 274, 275, 278, 295], "org": [5, 7, 30, 31, 32, 33, 34, 39, 50, 51, 55, 68, 80, 81, 82, 83, 84, 85, 86, 89, 97, 100, 102, 104, 105, 108, 116, 117, 121, 128, 140, 141, 151, 153, 154, 155, 156, 166, 174, 175, 182, 185, 186, 188, 190, 191, 192, 193, 201, 205, 209, 212, 214, 216, 222, 227, 234, 235, 236, 237, 253, 259, 263, 267, 268, 269, 272, 273, 274, 275, 297], "cppdoc": [5, 7], "pariti": [5, 196], "manipul": [5, 45, 46, 98, 102, 121, 135, 156, 166, 202, 206], "five": [5, 11], "ideal": [5, 7, 16, 38, 95, 98, 103, 105, 169, 182, 192, 223, 238, 290], "previous": [5, 6, 10, 24, 36, 90, 109, 113, 142, 154, 155, 171, 173, 176, 177, 178, 186, 192, 213, 223, 236, 277, 284, 294], "kcuda": [5, 7, 207], "live": [5, 7, 12, 17, 103, 132, 138, 169, 179, 180, 216, 247], "hopefulli": [5, 7, 56, 57, 80, 90, 107, 122, 281], "equip": [5, 6, 144, 150, 213, 298], "concept": [5, 7, 13, 26, 40, 41, 61, 99, 108, 109, 113, 121, 125, 132, 139, 159, 169, 178, 181, 182, 193, 200, 207, 217, 223, 226, 227, 228, 270, 279, 298], "close": [5, 7, 11, 16, 20, 23, 27, 58, 95, 100, 103, 105, 106, 134, 139, 151, 166, 187, 201, 206, 231, 278, 280], "Of": [5, 16, 27, 105, 109, 113, 138, 149, 187, 214, 216, 259, 294], "cours": [5, 7, 16, 20, 23, 27, 59, 95, 96, 103, 105, 108, 109, 112, 113, 138, 149, 187, 231, 259], "did": [5, 7, 10, 18, 23, 27, 29, 49, 58, 73, 95, 98, 100, 103, 115, 121, 136, 149, 154, 167, 176, 179, 182, 193, 200, 202, 264], "cover": [5, 6, 8, 16, 17, 19, 22, 26, 29, 38, 52, 103, 108, 118, 125, 132, 134, 139, 149, 171, 172, 176, 179, 180, 187, 190, 192, 215, 217, 218, 223, 227, 228, 242, 251, 252, 263, 272, 273, 274, 275, 278, 279, 291, 298], "insid": [5, 6, 7, 12, 19, 22, 26, 27, 37, 41, 50, 135, 137, 186, 190, 195, 217, 220, 231, 236, 238], "shortli": [5, 178], "master": [5, 19, 23, 55, 133, 143, 149, 155, 156, 160, 179, 180, 195, 197, 200, 222, 226, 237, 242, 252], "html": [5, 30, 31, 32, 33, 34, 39, 50, 51, 55, 68, 80, 81, 82, 83, 84, 85, 89, 97, 105, 108, 116, 117, 121, 125, 128, 151, 153, 155, 156, 174, 185, 188, 189, 191, 192, 201, 209, 212, 214, 216, 234, 235, 263, 267, 268, 269, 272, 273, 274, 275], "peter": 6, "goldsborough": 6, "newest": [6, 10, 24, 27, 115], "date": [6, 7, 10, 12, 27, 80, 82, 83, 84, 85, 86, 134, 179, 223, 252, 277, 294], "plethora": 6, "relat": [6, 13, 16, 58, 95, 96, 103, 104, 109, 112, 132, 137, 157, 167, 192, 196, 202, 217, 264, 280], "algebra": [6, 16, 45, 54, 98, 103, 107, 251], "wrangl": 6, "novel": [6, 96, 198], "research": [6, 7, 20, 23, 27, 29, 55, 58, 80, 90, 96, 103, 107, 125, 149, 151, 163, 168, 173, 189, 201, 231, 247, 295], "power": [6, 7, 27, 48, 55, 63, 70, 80, 93, 95, 98, 105, 107, 113, 121, 132, 133, 139, 147, 149, 157, 159, 163, 172, 173, 175, 182, 189, 205, 216, 249, 264, 292, 298], "spare": [6, 7], "deriv": [6, 7, 12, 18, 20, 27, 29, 36, 41, 45, 48, 54, 95, 103, 107, 109, 110, 112, 121, 138, 140, 144, 154, 158, 220, 231, 280], "express": [6, 8, 18, 27, 95, 98, 100, 103, 106, 117, 125, 137, 151, 192, 196, 215, 221, 223, 225, 228, 249], "realli": [6, 10, 27, 29, 49, 95, 100, 103, 106, 107, 112, 121, 123, 132, 138, 174, 187, 213, 215, 236, 264], "frequent": [6, 26, 27, 36, 87, 112, 121, 133, 215, 252, 293], "expens": [6, 20, 45, 105, 120, 180, 192, 205, 231, 270, 279, 293], "few": [6, 7, 10, 11, 12, 17, 23, 25, 26, 27, 52, 57, 62, 90, 95, 96, 98, 103, 105, 107, 108, 109, 110, 112, 122, 131, 134, 135, 138, 140, 141, 142, 147, 149, 150, 167, 169, 175, 176, 179, 182, 190, 193, 196, 197, 205, 214, 215, 216, 223, 225, 241, 244, 247, 252, 253, 263, 279, 280, 281, 289], "plausibl": 6, "address": [6, 14, 22, 26, 28, 87, 100, 132, 136, 149, 169, 178, 179, 192, 193, 196, 223, 229, 245, 253, 277, 284, 298], "nativ": [6, 7, 10, 17, 18, 24, 27, 61, 93, 117, 118, 132, 134, 137, 150, 151, 171, 180, 196, 197, 198, 205, 213, 216, 223, 247, 251, 252, 270, 279, 280, 284], "much": [6, 7, 10, 12, 14, 16, 20, 23, 27, 29, 41, 58, 62, 95, 96, 105, 106, 107, 112, 113, 122, 134, 138, 139, 155, 158, 159, 166, 169, 175, 176, 179, 180, 182, 186, 187, 190, 192, 193, 200, 205, 213, 216, 228, 231, 250, 259, 261, 263, 264, 267, 269, 278, 280, 281, 284, 285, 298], "boilerpl": [6, 7, 23, 49, 107, 187, 213], "degre": [6, 41, 69, 100, 121, 139, 182, 186, 198, 216], "organ": [6, 10, 16, 27, 57, 98, 122, 140, 198, 264, 298], "tackl": [6, 120], "decid": [6, 7, 10, 12, 20, 22, 58, 66, 93, 95, 177, 192, 193, 216, 222, 231, 283], "contribut": [6, 58, 66, 87, 96, 103, 151, 160, 186], "upstream": [6, 252, 280], "rest": [6, 7, 16, 49, 128, 135, 150, 156, 174, 176, 178, 179, 193, 196, 215, 225, 250, 267, 277], "walk": [6, 7, 12, 17, 19, 26, 27, 28, 29, 48, 60, 95, 108, 113, 125, 131, 132, 138, 157, 159, 179, 197, 205, 207, 208, 221, 226, 263, 278], "chase": 6, "someon": [6, 182], "fire": [6, 147], "don": [6, 7, 10, 12, 18, 25, 48, 49, 58, 59, 61, 93, 98, 100, 103, 106, 107, 110, 113, 118, 122, 128, 138, 144, 151, 156, 158, 159, 166, 169, 174, 176, 177, 180, 181, 192, 193, 202, 203, 206, 213, 214, 215, 228, 241, 247, 259, 263, 292, 293], "dai": [6, 137, 193, 277], "head": [6, 8, 20, 25, 40, 88, 100, 120, 137, 147, 174, 181, 195, 218, 231], "straight": [6, 7, 27, 182], "recurr": [6, 49, 55, 106, 110, 132, 140, 141, 164, 167, 182, 183, 267], "unit": [6, 7, 29, 55, 100, 103, 133, 134, 158, 169, 173, 176, 177, 182, 189, 192, 196, 266, 280], "superior": [6, 136, 217], "art": [6, 49, 58, 96, 98, 100, 151, 173, 206, 262], "lstm": [6, 21, 49, 55, 100, 108, 111, 132, 140, 141, 180, 201, 203, 220, 261, 267, 284], "lack": [6, 17, 87, 96, 213, 245], "forget": [6, 7, 113, 122, 174, 190], "gate": [6, 55, 100, 196, 277], "exponenti": [6, 55, 95, 103, 107, 109, 167, 177, 205], "elu": [6, 221], "intern": [6, 10, 12, 13, 17, 26, 42, 43, 55, 62, 73, 100, 105, 121, 132, 133, 135, 139, 149, 186, 200, 213, 222, 234, 238, 243, 279], "never": [6, 95, 106, 107, 108, 112, 138, 173, 184], "lltm": 6, "long": [6, 7, 12, 24, 27, 55, 56, 87, 93, 100, 103, 107, 108, 109, 111, 113, 134, 136, 138, 141, 150, 151, 156, 157, 167, 171, 177, 180, 186, 193, 196, 198, 200, 206, 207, 223, 264, 267, 279, 280, 283, 293], "term": [6, 7, 17, 45, 58, 66, 80, 95, 96, 100, 104, 107, 108, 109, 111, 120, 134, 136, 137, 163, 173, 176, 192, 193, 196, 205, 216, 223, 226, 228, 233, 267, 271, 298], "signific": [6, 7, 11, 23, 58, 87, 96, 134, 136, 140, 143, 151, 156, 157, 158, 160, 166, 169, 176, 181, 186, 190, 193, 200, 234, 244, 245, 246, 251, 253, 263, 264, 267, 292], "enough": [6, 7, 20, 25, 27, 55, 87, 98, 109, 113, 121, 138, 143, 175, 192, 200, 231, 243, 251, 262, 263], "lstmcell": 6, "cell": [6, 25, 27, 29, 56, 95, 96, 98, 100, 103, 104, 120, 169, 177, 181, 189, 193, 205, 267, 280], "plain": [6, 7, 27, 55, 113, 135, 140, 141, 182, 195, 277, 279], "input_featur": [6, 295], "state_s": 6, "candid": [6, 157, 280], "reset_paramet": [6, 135], "stdv": 6, "math": [6, 12, 73, 90, 95, 109, 121, 163, 175, 267, 280], "sqrt": [6, 90, 113, 196, 213, 233], "uniform_": [6, 7, 180, 233], "old_h": 6, "old_cel": 6, "cat": [6, 24, 25, 45, 49, 54, 96, 98, 106, 109, 157, 180, 182, 187, 195, 228, 262], "gate_weight": 6, "split": [6, 10, 22, 23, 24, 25, 50, 55, 58, 90, 93, 98, 102, 104, 107, 132, 140, 141, 147, 151, 171, 176, 179, 180, 182, 193, 195, 202, 206, 223, 225, 242, 259], "combin": [6, 12, 25, 41, 61, 66, 93, 95, 98, 100, 105, 106, 109, 112, 113, 131, 132, 133, 138, 140, 141, 143, 152, 163, 169, 173, 174, 177, 180, 182, 192, 193, 196, 203, 207, 218, 223, 226, 245, 246, 253, 264, 267, 280], "input_g": 6, "sigmoid": [6, 7, 58, 100, 197, 228, 280], "output_g": 6, "tanh": [6, 7, 58, 100, 107, 176, 280], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 25, 55, 96, 100, 105, 106, 110, 113, 137, 139, 140, 141, 150, 155, 180, 181, 182, 223, 262, 267], "new_h": 6, "batch_siz": [6, 7, 16, 23, 24, 38, 49, 55, 57, 58, 61, 93, 98, 133, 134, 135, 137, 149, 151, 166, 174, 177, 178, 179, 186, 187, 189, 193, 202, 206, 217, 223, 225, 231, 252, 253, 263, 288, 295], "rnn": [6, 25, 29, 50, 55, 100, 132, 150, 164, 167, 179, 182, 183, 226, 280], "new_c": 6, "intel": [6, 132, 149, 157, 160, 221, 222, 226, 229, 237, 284], "mkl": [6, 157, 217, 270, 298], "nnpack": 6, "why": [6, 7, 10, 13, 16, 18, 29, 49, 58, 90, 96, 105, 107, 112, 122, 125, 144, 147, 157, 166, 182, 190, 192, 193, 214, 216, 264, 294, 295], "room": [6, 105, 169, 251], "obviou": [6, 192, 264], "knowledg": [6, 55, 58, 80, 107, 108, 123, 125, 132, 157, 159], "know": [6, 7, 10, 13, 22, 23, 26, 27, 36, 48, 55, 77, 78, 80, 98, 100, 103, 107, 109, 112, 113, 121, 138, 140, 141, 144, 149, 150, 152, 157, 159, 160, 163, 168, 169, 171, 176, 177, 178, 182, 187, 192, 193, 195, 197, 202, 214, 220, 253, 264, 291], "execut": [6, 7, 10, 13, 17, 19, 21, 24, 25, 26, 27, 29, 36, 37, 43, 44, 48, 50, 53, 56, 75, 79, 87, 91, 95, 98, 101, 103, 106, 111, 114, 118, 119, 123, 131, 132, 135, 136, 138, 139, 142, 149, 150, 156, 157, 160, 169, 172, 176, 177, 179, 180, 181, 183, 190, 192, 196, 198, 200, 202, 203, 206, 207, 217, 232, 234, 237, 238, 242, 251, 259, 263, 267, 276, 279, 287, 290, 294, 295, 297, 298], "involv": [6, 10, 11, 17, 20, 23, 27, 29, 40, 43, 56, 90, 95, 96, 103, 106, 109, 115, 122, 131, 138, 140, 146, 159, 166, 180, 182, 192, 200, 202, 204, 205, 218, 231, 271, 280, 285, 292, 295], "launch": [6, 7, 25, 59, 66, 136, 139, 146, 147, 178, 179, 180, 181, 186, 198, 237, 251, 253, 264, 270, 280, 298], "amount": [6, 23, 29, 80, 87, 122, 137, 147, 169, 173, 190, 193, 205, 270, 280], "becom": [6, 7, 13, 25, 28, 58, 80, 90, 96, 105, 137, 144, 158, 160, 169, 186, 187, 193, 200, 207, 218, 223, 240, 247, 251, 263, 298], "furthermor": [6, 23, 105, 152, 158, 187, 207, 228, 245, 264], "itself": [6, 13, 27, 36, 37, 48, 87, 90, 98, 100, 103, 105, 109, 110, 113, 118, 122, 137, 138, 140, 144, 149, 159, 176, 179, 180, 182, 193, 220, 247, 263, 270, 294], "slow": [6, 7, 10, 41, 133, 135, 169, 193, 196, 261, 270, 280], "down": [6, 10, 12, 13, 23, 37, 38, 56, 87, 93, 95, 100, 102, 107, 113, 133, 150, 157, 158, 159, 179, 184, 187, 192, 200, 213, 279, 280], "therefor": [6, 7, 11, 17, 23, 55, 57, 105, 122, 131, 140, 147, 160, 163, 169, 172, 173, 179, 180, 192, 208, 215, 216, 228, 237, 263, 298], "rewrit": [6, 25, 50, 142, 167, 192, 228, 236, 237], "group": [6, 13, 22, 23, 28, 55, 66, 88, 100, 103, 120, 131, 132, 133, 134, 135, 136, 141, 143, 145, 147, 149, 157, 171, 186, 193, 195, 196, 200, 243, 244, 246, 247, 264, 295, 298, 299], "profit": 6, "fewer": [6, 13, 143, 158], "visibl": [6, 26, 27, 49, 93, 102, 189, 202], "translat": [6, 27, 29, 55, 115, 117, 118, 132, 140, 141, 163, 164, 183, 215, 280, 295], "benefit": [6, 7, 11, 20, 22, 48, 90, 93, 134, 136, 154, 160, 166, 169, 174, 181, 196, 205, 223, 227, 231, 247, 251, 252, 263, 267, 280, 291, 298], "massiv": [6, 29, 49, 109, 112, 193, 252], "parallel": [6, 7, 13, 19, 22, 49, 51, 53, 55, 57, 61, 80, 93, 98, 122, 132, 139, 145, 149, 151, 163, 176, 179, 180, 193, 200, 217, 222, 243, 244, 245, 247, 249, 263, 270, 298, 299], "lltm_cpp": 6, "conveni": [6, 10, 16, 26, 27, 49, 52, 55, 96, 109, 113, 138, 141, 152, 158, 172, 176, 200, 214, 216, 244, 252, 263, 264, 279], "wrapper": [6, 7, 10, 61, 113, 122, 133, 134, 144, 150, 159, 176, 189, 193, 204, 222, 226, 243, 244, 292], "include_dir": [6, 12, 172], "include_path": 6, "manag": [6, 26, 37, 48, 55, 66, 95, 113, 120, 131, 135, 137, 142, 145, 146, 147, 167, 181, 186, 190, 193, 204, 243, 244, 245, 246, 247, 263, 264, 265, 269, 270, 271, 280, 293, 298], "And": [6, 7, 12, 18, 26, 27, 28, 29, 58, 96, 109, 115, 140, 144, 157, 158, 160, 163, 175, 186, 187, 190, 192, 220, 226, 228, 264, 279], "overal": [6, 23, 55, 100, 133, 134, 149, 169, 177, 189, 192, 193, 223, 228, 251, 261, 264, 280], "d_sigmoid": 6, "bit": [6, 17, 27, 29, 73, 98, 103, 120, 121, 150, 175, 176, 182, 193, 205, 213, 223, 226, 227, 238, 253, 261, 264, 267], "datatyp": [6, 27, 45, 54, 78, 98, 103, 120, 252, 263, 267, 280], "Its": [6, 105, 107, 218], "inspect": [6, 27, 95, 105, 118, 134, 135, 139, 156, 181, 184, 190, 192, 193, 202, 206, 247, 264, 294], "dispos": 6, "nvcc": 6, "hit": [6, 11, 23, 80, 137, 186], "workaround": [6, 27, 90, 144, 154, 295], "logic": [6, 7, 13, 20, 27, 41, 46, 90, 106, 114, 132, 133, 139, 146, 171, 173, 179, 180, 189, 203, 231, 233, 244, 247, 298], "sigmoidalphablendforwardcuda": 6, "open": [6, 40, 42, 56, 93, 96, 98, 99, 102, 104, 112, 115, 117, 132, 134, 149, 151, 152, 156, 166, 168, 182, 186, 189, 196, 206, 208, 237, 252, 253, 259, 262], "port": [6, 19, 136, 149, 179, 193, 200, 259, 289], "lltm_forward": 6, "addmm": [6, 7, 120, 157, 223, 237, 238, 251, 270], "transpos": [6, 7, 14, 45, 49, 54, 55, 58, 98, 157, 174, 187, 218, 237, 262, 295], "alpha": [6, 7, 17, 159, 189, 213], "respect": [6, 8, 18, 19, 36, 38, 40, 41, 42, 48, 55, 58, 68, 69, 73, 95, 96, 107, 109, 121, 125, 137, 138, 150, 154, 157, 158, 168, 169, 176, 180, 182, 186, 193, 198, 225, 242, 277, 280, 282, 292, 298], "ultim": [6, 23, 55, 58, 90, 213, 238], "plop": [6, 27], "autograd": [6, 8, 14, 17, 18, 19, 25, 29, 37, 38, 40, 41, 42, 43, 45, 46, 51, 52, 53, 63, 67, 73, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 113, 120, 132, 140, 141, 144, 147, 157, 158, 163, 168, 177, 178, 179, 182, 183, 192, 228, 236, 242, 247, 259, 263, 280, 292, 297], "nice": [6, 55, 113, 166, 168, 192, 193, 196], "dig": [6, 96, 107, 181, 192], "deeper": [6, 13, 14, 42, 96, 103, 105, 107, 156, 157, 181, 192, 241, 249, 297], "interest": [6, 7, 12, 16, 20, 24, 27, 29, 49, 55, 57, 93, 95, 96, 105, 107, 114, 115, 117, 118, 128, 134, 139, 158, 166, 167, 174, 176, 184, 192, 195, 196, 231, 236, 264, 267, 279, 282, 283], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 14, 23, 27, 49, 52, 58, 98, 100, 107, 113, 122, 133, 147, 152, 157, 174, 175, 178, 179, 180, 187, 201, 202, 217, 221, 228, 243, 244, 245, 246, 250, 251, 252, 253, 263, 280], "exp": [6, 106, 107, 144, 215], "d_elu": 6, "mask": [6, 20, 96, 100, 120, 132, 150, 167, 173, 181, 189, 195, 205, 213, 214, 216, 218, 222, 231, 252, 295], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 23, 133, 179, 202, 223, 225, 253], "d_x": 6, "d_old_h": 6, "d_input": 6, "span": [6, 20, 106, 147, 186, 231, 259], "four": [6, 16, 22, 26, 90, 98, 100, 103, 121, 134, 149, 171, 187, 196, 221, 261, 295], "torch_extension_nam": [6, 172], "macro": [6, 7, 10, 17, 27], "maintain": [6, 12, 16, 26, 36, 37, 38, 48, 55, 80, 100, 105, 110, 132, 136, 145, 149, 159, 177, 180, 192, 229, 237, 243, 263, 299], "mismatch": [6, 105, 192, 200], "nasti": [6, 277], "hard": [6, 7, 10, 17, 25, 38, 107, 139, 169, 173, 192, 264, 289], "At": [6, 7, 10, 16, 17, 20, 24, 27, 48, 52, 55, 56, 90, 93, 110, 113, 121, 133, 134, 137, 150, 154, 159, 174, 176, 177, 178, 181, 182, 186, 213, 216, 223, 231, 237, 270, 277, 280, 294], "point": [6, 7, 10, 12, 13, 16, 20, 22, 23, 24, 26, 27, 48, 52, 55, 56, 57, 58, 59, 87, 90, 95, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 121, 133, 135, 137, 138, 139, 144, 145, 147, 156, 159, 163, 169, 174, 176, 178, 182, 187, 189, 192, 193, 200, 201, 202, 205, 206, 213, 215, 216, 223, 228, 229, 231, 253, 261, 267, 268, 276, 278, 280, 284, 291, 295], "bdist_egg": 6, "egg_info": [6, 27], "egg": [6, 27], "pkg": [6, 27], "dependency_link": [6, 27], "top_level": [6, 27], "manifest": [6, 27, 215], "bdist": 6, "linux": [6, 7, 22, 24, 26, 27, 115, 137, 147, 149, 175, 186, 195, 237, 252, 298], "x86_64": [6, 22, 27], "install_lib": 6, "temp": [6, 23, 27, 142, 151, 202, 206, 223, 225, 289], "gcc": [6, 27, 157, 217], "local": [6, 7, 10, 11, 19, 22, 23, 26, 27, 40, 55, 56, 66, 95, 99, 106, 114, 122, 125, 134, 135, 137, 139, 147, 149, 151, 166, 173, 174, 178, 179, 180, 182, 184, 193, 198, 200, 204, 206, 242, 247, 250, 263, 266, 280, 289, 290, 298, 299], "miniconda": [6, 22, 27], "compiler_compat": [6, 27], "wl": [6, 26, 27], "sysroot": [6, 27], "wsign": [6, 27], "dndebug": [6, 27], "fwrapv": [6, 27], "o3": [6, 27, 264], "wall": [6, 27, 106, 156, 264], "wstrict": [6, 27], "prototyp": [6, 12, 13, 17, 27, 38, 192, 193, 207, 209, 217, 218, 228, 232, 236, 237, 242, 249], "fpic": [6, 27], "python3": [6, 22, 26, 27, 186, 200, 251, 279, 295], "site": [6, 8, 22, 26, 27, 56, 58, 156, 182, 270, 279, 295], "th": [6, 16, 27, 57, 107, 112, 149, 159], "thc": [6, 27], "7m": [6, 27, 98], "dtorch_api_include_extension_h": [6, 27], "dtorch_extension_nam": [6, 27], "d_glibcxx_use_cxx11_abi": [6, 27], "cc1plu": [6, 27], "warn": [6, 23, 27, 57, 151, 157, 189, 202, 206, 213, 214, 215, 216, 223, 225, 247, 264, 270, 279], "valid": [6, 24, 27, 28, 41, 55, 93, 98, 100, 102, 104, 105, 117, 120, 122, 128, 133, 134, 139, 140, 143, 144, 169, 172, 174, 189, 192, 195, 202, 214, 215, 228, 231, 264, 290, 293], "objc": [6, 27], "l": [6, 14, 16, 27, 48, 57, 58, 95, 107, 176, 177, 192, 200, 264, 294], "rpath": [6, 27], "37m": [6, 27], "stub": [6, 174], "loader": [6, 7, 28, 42, 49, 104, 113, 176, 179, 195, 264], "byte": [6, 151, 192, 193, 201, 204, 295], "37": [6, 20, 38, 98, 120, 175, 180, 231, 251, 270], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 23, 27, 87, 132, 166, 176, 190, 192, 206, 279, 295], "__pycache__": 6, "dist": [6, 13, 22, 133, 134, 136, 147, 149, 171, 172, 179, 198, 200, 243, 244, 246, 299], "py3": 6, "remov": [6, 20, 23, 55, 58, 59, 88, 113, 118, 120, 125, 135, 138, 147, 151, 155, 157, 166, 175, 181, 182, 189, 190, 192, 193, 196, 202, 203, 205, 206, 213, 214, 218, 223, 225, 231, 247, 261, 264, 279], "everyth": [6, 18, 48, 93, 103, 105, 107, 139, 140, 144, 150, 174, 175, 176, 177, 178, 182, 187, 193, 204, 242], "pth": [6, 11, 23, 27, 49, 122, 166, 189, 201, 202, 205, 223, 225, 244, 252, 253, 295], "finish": [6, 7, 19, 27, 49, 50, 98, 147, 178, 180, 187, 221, 226, 242, 243, 250, 259, 266, 280], "ubuntu": [6, 7, 186, 298], "16": [6, 20, 23, 27, 38, 49, 93, 98, 100, 105, 107, 122, 147, 150, 160, 166, 174, 175, 180, 187, 189, 192, 195, 205, 217, 231, 243, 244, 251, 264, 270, 294, 295], "04": [6, 44, 98, 166, 186, 208, 251, 264], "recent": [6, 55, 110, 120, 136, 137, 149, 151, 157, 163, 167, 174, 177, 186, 295, 298], "maco": [6, 7, 115, 149, 189], "clang": [6, 208, 237], "worst": [6, 151], "resolv": [6, 27, 105, 155, 160, 192, 215, 245, 295], "symbol": [6, 29, 155, 202, 228, 264, 279, 295], "linker": [6, 27], "pycapsul": [6, 27], "builtin": [6, 172, 264, 279], "arg0": 6, "arg1": [6, 179], "arg2": [6, 179], "arg3": 6, "arg4": 6, "citizen": [6, 27, 213, 215], "lltmfunction": 6, "staticmethod": [6, 144, 178, 189], "benchmark": [6, 17, 20, 28, 38, 120, 132, 139, 151, 152, 157, 158, 169, 175, 181, 190, 196, 205, 217, 218, 221, 226, 227, 231, 249, 252, 253, 270, 276, 279, 280, 284, 290, 295, 298], "measur": [6, 14, 25, 41, 87, 95, 96, 98, 100, 105, 112, 133, 136, 151, 152, 156, 158, 169, 176, 177, 181, 184, 190, 205, 217, 220, 226, 234, 242, 251, 263, 264, 270, 279, 284, 285, 294], "durat": [6, 88, 172, 177, 186, 200], "32": [6, 22, 23, 25, 49, 61, 93, 98, 100, 103, 105, 110, 120, 133, 151, 163, 166, 168, 171, 175, 179, 180, 186, 189, 192, 193, 198, 217, 225, 251, 253, 261, 264], "128": [6, 7, 26, 57, 58, 61, 93, 105, 120, 133, 137, 140, 149, 151, 152, 175, 178, 179, 180, 193, 196, 206, 227, 228, 238, 242, 252, 264, 279, 288], "rang": [6, 7, 13, 14, 16, 22, 23, 25, 38, 46, 49, 57, 58, 59, 73, 80, 87, 93, 96, 98, 105, 107, 113, 114, 115, 117, 118, 121, 133, 134, 135, 136, 139, 149, 151, 152, 166, 171, 174, 175, 178, 180, 182, 186, 187, 192, 195, 197, 198, 200, 205, 206, 207, 223, 225, 231, 240, 242, 243, 246, 251, 253, 259, 262, 263, 267, 270, 278, 280, 292, 295, 298, 299], "100000": [6, 151, 264], "3f": [6, 23, 49, 98, 225, 231], "wrote": [6, 27, 190, 195], "post": [6, 7, 13, 24, 55, 105, 132, 133, 134, 135, 139, 151, 160, 184, 193, 198, 203, 206, 222, 225, 228, 232, 253, 262], "my": [6, 25, 56, 106, 112, 196, 225, 234], "machin": [6, 7, 22, 24, 25, 29, 40, 42, 46, 49, 55, 56, 57, 59, 60, 61, 62, 66, 80, 93, 95, 96, 99, 115, 117, 132, 133, 134, 139, 145, 146, 147, 149, 156, 168, 169, 175, 179, 180, 181, 182, 193, 195, 200, 206, 225, 234, 240, 249, 251, 259, 278, 280, 289, 290, 295, 298], "506": 6, "480": [6, 270], "444": 6, "694": 6, "349": [6, 98], "335": [6, 160, 180, 299], "443": [6, 180, 270], "523": 6, "speedup": [6, 20, 25, 49, 121, 132, 152, 157, 168, 196, 201, 202, 205, 217, 218, 231, 251, 280, 285, 294], "30": [6, 7, 23, 50, 87, 107, 132, 134, 136, 160, 173, 178, 180, 202, 223, 231, 264, 270], "albeit": [6, 16, 261], "major": [6, 12, 13, 23, 100, 103, 112, 128, 136, 157, 166, 181, 190, 193, 216, 247, 251, 285, 292, 299], "particularli": [6, 15, 20, 59, 113, 167, 182, 217, 231, 280], "engin": [6, 7, 16, 24, 36, 48, 93, 95, 133, 142, 169, 175, 180, 189, 192, 193, 195, 200, 236, 238, 252, 261, 295], "correspondingli": 6, "big": [6, 58, 100, 106, 112, 121, 135, 141, 152, 166, 176, 182, 189], "win": [6, 166, 206], "No": [6, 7, 59, 107, 118, 135, 157, 197, 241, 292], "cuda_devic": 6, "creation": [6, 7, 12, 103, 216, 233, 269], "is_avail": [6, 7, 14, 49, 93, 103, 171, 172, 174, 177, 179, 198, 229, 295], "synchron": [6, 13, 19, 61, 62, 87, 133, 135, 147, 149, 176, 178, 179, 186, 190, 200, 204, 242, 243, 259, 263, 264, 293, 299], "1e6": [6, 23, 151, 202, 206, 223, 225, 240, 261, 299], "1e5": 6, "again": [6, 7, 11, 25, 29, 49, 56, 95, 96, 100, 102, 103, 105, 106, 113, 114, 138, 143, 149, 150, 166, 178, 180, 182, 186, 189, 190, 193, 204, 205, 223, 228, 229, 264], "187": [6, 264], "719": 6, "410": [6, 160], "815": 6, "149": 6, "802": [6, 157], "393": 6, "458": [6, 157], "That": [6, 7, 20, 27, 48, 49, 50, 55, 95, 96, 98, 103, 107, 109, 110, 112, 113, 115, 137, 140, 147, 154, 156, 158, 160, 163, 166, 176, 177, 181, 186, 192, 193, 195, 213, 214, 216, 231, 267, 279, 284], "great": [6, 55, 115, 121, 122, 215, 223, 264, 282], "pull": [6, 25, 96, 103, 104, 156, 229], "dive": [6, 7, 13, 27, 42, 142, 147, 157, 174, 217, 279], "elabor": [6, 7, 137, 157, 178], "fly": [6, 16, 27, 57, 106, 176, 196, 261], "background": [6, 7, 27, 37, 80, 102, 175, 187, 189, 195, 290, 291], "tmp": [6, 27, 157, 189, 200, 207, 250, 261, 289, 290], "torch_extens": 6, "emit": [6, 7, 106, 192], "ninja": 6, "verbos": [6, 27, 146, 189, 192, 238, 245], "complic": [6, 16, 106, 107, 112, 113, 121, 139, 192, 223, 236, 246, 263, 264], "techniqu": [6, 11, 19, 20, 23, 25, 55, 66, 105, 106, 112, 114, 132, 137, 143, 144, 145, 156, 164, 167, 169, 171, 173, 174, 180, 189, 193, 196, 205, 213, 218, 231, 234, 261, 267, 280, 295, 298], "fine": [6, 7, 20, 23, 55, 57, 95, 106, 131, 138, 149, 157, 174, 175, 186, 190, 193, 206, 213, 231, 262, 263, 264, 279, 280, 298], "system": [6, 7, 10, 12, 14, 16, 17, 26, 27, 29, 61, 105, 132, 135, 139, 149, 167, 169, 175, 176, 178, 190, 192, 193, 200, 237, 238, 243, 266, 280, 289, 298], "increment": [6, 13, 90, 109, 113, 149, 177], "thu": [6, 7, 10, 12, 23, 24, 25, 27, 36, 43, 55, 90, 93, 105, 113, 134, 152, 166, 169, 182, 217, 223, 233, 247, 259, 264, 270, 280, 298], "didn": [6, 10, 26, 96, 115, 156, 178, 201, 236], "prospect": 6, "pointwis": [6, 10, 155, 160, 226, 227, 249, 280, 284], "declar": [6, 7, 15, 27, 80], "best": [6, 7, 10, 27, 43, 48, 58, 66, 80, 93, 115, 118, 120, 122, 128, 132, 145, 149, 151, 152, 157, 168, 169, 174, 175, 178, 180, 184, 192, 196, 205, 217, 226, 231, 251, 252, 253, 270, 279, 280, 283, 284, 290, 292, 298], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": 6, "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 241], "cuda_runtim": 6, "templat": [6, 10, 26, 27, 123, 149, 157, 217, 253], "typenam": 6, "scalar_t": [6, 157], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 22, 29, 41, 45, 48, 54, 58, 59, 93, 95, 109, 135, 136, 137, 146, 150, 160, 180, 181, 184, 192, 202, 216, 218, 228, 229, 259, 280], "zeros_lik": [6, 103, 178, 247], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 12, 13, 16, 27, 37, 55, 68, 69, 87, 95, 96, 98, 100, 102, 106, 107, 112, 118, 120, 121, 139, 140, 150, 151, 157, 173, 176, 177, 179, 186, 187, 189, 193, 200, 206, 213, 215, 216, 220, 228, 238, 262, 264, 295, 297], "runtim": [6, 10, 16, 21, 22, 25, 27, 29, 45, 56, 87, 90, 95, 98, 99, 103, 117, 118, 120, 132, 136, 137, 142, 143, 156, 166, 169, 171, 186, 190, 192, 193, 201, 205, 206, 208, 217, 223, 237, 238, 240, 251, 263, 264, 267, 270, 283, 284, 291], "back": [6, 7, 10, 12, 16, 17, 23, 24, 26, 27, 36, 49, 52, 57, 80, 93, 95, 103, 105, 109, 113, 115, 120, 135, 138, 160, 166, 169, 176, 178, 179, 180, 182, 189, 190, 192, 193, 196, 213, 218, 244, 267, 277, 280, 292, 293], "determin": [6, 7, 10, 13, 20, 23, 45, 54, 96, 98, 103, 104, 105, 106, 109, 112, 115, 136, 137, 139, 152, 166, 167, 168, 173, 190, 192, 193, 200, 202, 218, 229, 231, 264, 267, 270, 271, 280], "conceptu": [6, 7, 36, 48, 55, 121, 279], "switch": [6, 10, 17, 23, 102, 103, 122, 166, 193, 237, 251, 263, 265, 270, 283], "scalartyp": 6, "messag": [6, 18, 55, 95, 118, 142, 149, 151, 189, 192, 206, 238, 298], "alia": [6, 12, 103], "instanti": [6, 7, 12, 16, 25, 26, 29, 38, 43, 57, 58, 70, 72, 90, 98, 105, 113, 115, 121, 139, 172, 173, 177, 189, 233, 249, 267, 269], "retriev": [6, 7, 16, 19, 25, 36, 38, 55, 138, 139, 171, 176, 178, 179, 193, 259, 298], "at_dispatch_all_typ": 6, "sens": [6, 10, 14, 16, 105, 112, 113, 152, 169, 187], "routin": [6, 7, 27, 193], "convolut": [6, 7, 10, 14, 15, 24, 58, 96, 98, 103, 105, 113, 122, 128, 132, 160, 163, 173, 174, 183, 184, 192, 202, 226, 227, 228, 237, 238, 251, 252, 259, 263, 266, 270, 271, 282, 283, 294], "harder": [6, 105, 205, 206], "ourselv": [6, 7, 41, 55, 143, 176], "grid": [6, 102, 104, 113, 128, 174, 184, 187, 207], "fill": [6, 7, 16, 98, 112, 113, 140, 150, 214, 215], "matric": [6, 14, 20, 27, 29, 45, 54, 95, 109, 158, 167, 231, 238], "2048": [6, 22, 105], "heard": 6, "introductori": 6, "ever": [6, 7, 27, 138, 147, 192, 269], "__restrict__": [6, 217], "size_t": 6, "column": [6, 22, 27, 95, 103, 107, 109, 120, 137, 140, 157, 158, 163, 186, 189, 193, 214, 215, 216, 270], "index": [6, 7, 17, 38, 45, 46, 49, 54, 55, 57, 88, 103, 106, 107, 109, 110, 112, 113, 120, 133, 138, 139, 140, 149, 167, 171, 178, 182, 186, 189, 190, 192, 193, 205, 218, 227, 236, 262, 298], "gates_row": 6, "primarili": [6, 87, 179, 190, 245, 263, 280], "imagin": [6, 95, 103, 106, 112, 144, 149, 166, 167, 182, 193, 264, 277], "giant": [6, 182], "million": [6, 128, 134, 150], "serial": [6, 7, 12, 27, 29, 42, 43, 113, 122, 132, 192, 202, 204, 223, 225, 259, 264, 294], "faster": [6, 7, 10, 11, 14, 23, 55, 62, 80, 100, 103, 105, 113, 122, 132, 134, 136, 146, 147, 150, 152, 158, 160, 168, 169, 178, 182, 190, 195, 200, 202, 217, 234, 250, 261, 263, 264, 267, 279, 280, 281, 284, 298], "right": [6, 7, 10, 12, 14, 16, 24, 27, 36, 40, 45, 48, 54, 55, 58, 69, 87, 95, 100, 102, 105, 107, 109, 112, 121, 140, 149, 151, 159, 163, 166, 174, 176, 177, 178, 181, 182, 186, 189, 195, 196, 206, 220, 223, 236, 251, 259, 267], "inde": [6, 16, 18, 105, 143, 158, 169, 176, 181, 190, 193, 215, 216, 264, 280], "ineffici": [6, 87, 193, 218], "readabl": [6, 29, 38, 57, 96, 103, 106, 141, 186, 200, 264, 279], "especi": [6, 8, 20, 23, 55, 58, 80, 96, 103, 134, 136, 147, 156, 163, 166, 169, 192, 196, 205, 214, 226, 227, 231, 253, 261], "dimension": [6, 37, 45, 52, 54, 55, 58, 66, 77, 78, 95, 100, 102, 103, 105, 108, 109, 110, 112, 121, 137, 142, 160, 173, 181, 182, 187, 189, 193, 216, 238, 246], "row": [6, 22, 27, 38, 57, 80, 95, 100, 103, 107, 109, 110, 112, 113, 135, 137, 139, 140, 158, 174, 178, 193, 214, 216, 236, 259], "arithmet": [6, 23, 45, 98, 103, 169, 206, 267], "fortun": [6, 7, 12, 17, 27, 93, 149, 150, 264], "foo": [6, 25, 26, 179, 202, 208, 223, 229, 233, 279], "12": [6, 27, 38, 49, 73, 98, 107, 120, 133, 134, 157, 178, 187, 197, 205, 227, 228, 231, 251, 253, 264], "foo_a": 6, "trace": [6, 10, 12, 18, 24, 25, 36, 48, 95, 102, 120, 132, 142, 151, 155, 157, 163, 169, 181, 186, 192, 193, 200, 217, 222, 234, 245, 252, 280, 284, 291, 292, 296], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 55, 157, 176, 178, 180, 217, 242], "integ": [6, 7, 10, 46, 98, 103, 107, 109, 112, 139, 173, 192, 195, 205, 216, 223, 225, 226, 238, 261, 267, 270], "fundament": [6, 55, 97, 100, 109, 112, 121, 132, 159, 169, 192, 193, 214, 225, 244, 279], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 12, 20, 133, 192, 223, 231], "packedaccessor32": 6, "variant": [6, 55, 98, 100, 102, 104, 137, 143, 175, 181, 193, 196, 198, 249], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 20, 62, 147, 169, 175, 177, 190, 195, 205, 207, 218, 231, 262], "host": [6, 22, 40, 60, 87, 99, 106, 133, 134, 137, 147, 149, 169, 171, 179, 180, 186, 246, 247, 270, 280, 289], "reshap": [6, 7, 14, 23, 100, 103, 112, 113, 171, 202, 218, 223, 225, 237, 253], "pattern": [6, 20, 25, 100, 102, 137, 149, 155, 157, 167, 179, 202, 203, 206, 213, 215, 221, 223, 231, 233, 246, 252], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "hassl": [6, 7], "entail": [6, 192], "simpler": [6, 113, 135, 137, 143, 154, 167, 223, 236, 264], "hope": [6, 29, 55, 159, 166, 190, 196, 251], "fastest": [6, 181, 290], "129": [6, 98, 101, 120], "431": 6, "304": [6, 55], "641": [6, 160], "faq": [6, 26, 27], "blog": [6, 133, 134, 140, 145, 196, 251, 262], "framework": [7, 12, 28, 29, 40, 58, 95, 107, 108, 121, 131, 132, 169, 171, 178, 181, 189, 196, 200, 203, 221, 238, 242, 247, 253, 295], "sit": [7, 114, 115, 117, 118, 167], "atop": 7, "substanti": [7, 139, 169], "codebas": [7, 12, 16], "foundat": [7, 140, 176, 189, 193], "underli": [7, 10, 16, 27, 45, 54, 66, 80, 103, 105, 122, 139, 152, 157, 168, 179, 192, 200, 202, 215, 216, 218, 246, 247, 280], "popular": [7, 73, 80, 105, 121, 139, 149, 150, 151, 193, 196, 205, 217, 252, 253, 284, 295], "stochast": [7, 41, 52, 58, 70, 95, 98, 104, 113, 121, 149, 176, 177], "descent": [7, 41, 48, 52, 70, 73, 95, 98, 104, 113, 121, 149, 193, 205, 283], "digit": [7, 52, 98, 113, 132, 133, 134, 189, 295], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 104, 145, 149], "lightn": [7, 139], "talk": [7, 10, 55, 58, 61, 98, 109, 169, 176, 179, 192, 193], "cppcon": 7, "2018": [7, 151], "quick": [7, 20, 37, 54, 95, 105, 107, 110, 112, 132, 134, 147, 152, 158, 168, 193, 205, 231, 264, 267, 268, 276, 284, 297], "humor": 7, "sweep": [7, 181], "philosophi": 7, "ecosystem": [7, 118, 142], "descript": [7, 56, 133, 134, 157, 176, 178, 179, 180, 181, 189, 192, 201, 221, 264, 280, 295, 296], "embark": 7, "excit": [7, 26, 27, 156, 166], "team": [7, 118, 139, 151, 177, 189, 196], "job": [7, 50, 58, 59, 60, 66, 87, 105, 136, 139, 145, 146, 147, 149, 171, 222], "reinforc": [7, 16, 104, 132, 159, 178, 179, 183], "game": [7, 49, 58, 159, 295], "tractabl": [7, 106], "multithread": [7, 48, 62, 120, 169, 247, 259, 264, 298], "lock": [7, 16, 29, 62, 149, 169, 178, 179, 243, 247], "gil": [7, 62, 147, 247], "multiprocess": [7, 13, 16, 38, 42, 57, 59, 61, 62, 133, 134, 147, 149, 176, 179, 180, 200, 242, 243, 244, 247, 298, 299], "scalabl": [7, 132, 136, 139, 193, 213, 238, 251, 252, 280, 298], "shortcom": [7, 215], "neuroevolut": 7, "owner": [7, 178, 179, 180], "anyth": [7, 15, 18, 49, 77, 78, 98, 100, 103, 106, 109, 110, 112, 113, 121, 175, 196, 201, 202, 205, 259, 277, 278, 295], "serv": [7, 63, 66, 90, 98, 105, 110, 121, 132, 147, 156, 159, 172, 179, 180, 193, 204, 215, 227, 242, 245, 249, 263, 264, 279, 280, 289], "web": [7, 115, 259], "server": [7, 19, 29, 131, 132, 136, 147, 172, 180, 197, 206, 244, 247, 252, 259, 261, 289, 295, 298], "3d": [7, 66, 100, 102, 109, 110, 171, 189, 223, 228, 280], "graphic": [7, 181, 237], "photo": [7, 96, 262], "softwar": [7, 151, 172, 186, 200, 237], "remain": [7, 93, 95, 105, 135, 136, 149, 155, 166, 169, 173, 182, 197, 198, 200, 205, 215, 218, 220, 226, 227, 280], "forth": [7, 113], "retain": [7, 45, 54, 103, 122], "intuit": [7, 58, 80, 98, 103, 107, 122, 157, 182, 189, 192, 214, 259, 277], "tradit": [7, 58, 105, 107, 158, 179, 192, 193, 196, 200, 217], "experi": [7, 12, 105, 106, 134, 136, 149, 151, 159, 169, 172, 174, 176, 177, 181, 182, 184, 189, 190, 192, 193, 196, 205, 206, 213, 222, 227, 229, 236, 242, 245, 261, 263, 279, 281, 289, 295, 296, 298], "compet": [7, 139, 169], "meant": [7, 8, 13, 90, 95, 100, 134, 193, 200, 215, 280, 297], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 80, 134, 143, 169, 176, 177, 217, 246, 264], "core": [7, 10, 12, 13, 50, 106, 107, 108, 121, 122, 132, 137, 149, 150, 157, 160, 169, 175, 186, 192, 200, 222, 223, 259, 263, 279, 298], "principl": [7, 10, 110, 112, 139], "curiou": [7, 152, 166, 168, 241], "tri": [7, 22, 58, 95, 106, 112, 177, 192, 237, 263, 295], "experienc": [7, 90], "ask": [7, 20, 26, 27, 96, 98, 100, 141, 150, 169, 176, 192, 193, 229, 231, 264], "rememb": [7, 49, 58, 80, 107, 110, 113, 120, 122, 158, 159, 166, 169, 182, 193, 196, 264], "dot": [7, 16, 36, 58, 110, 112, 132, 158, 182, 183, 198, 236, 264, 292], "colon": [7, 189], "zip": [7, 22, 49, 55, 56, 58, 122, 151, 152, 178, 180, 187, 189, 195, 201, 206, 231, 247, 294], "free": [7, 12, 23, 26, 27, 29, 41, 48, 55, 80, 90, 105, 114, 115, 117, 118, 122, 134, 135, 139, 149, 155, 156, 159, 160, 166, 169, 176, 178, 182, 186, 192, 247, 262, 267, 279], "too": [7, 12, 16, 23, 49, 69, 73, 87, 93, 98, 100, 105, 106, 112, 113, 120, 121, 135, 137, 147, 166, 169, 173, 177, 178, 180, 182, 192, 213, 261, 279, 293], "cu90": 7, "url": [7, 23, 186, 190, 193, 205, 227, 278], "wget": [7, 11, 22, 195, 201, 205], "nightli": [7, 22, 151, 154, 190, 195, 200, 205, 222, 226, 236, 253, 295], "dep": 7, "tini": [7, 133, 166, 295], "ey": [7, 24, 27, 169], "fledg": 7, "visual": [7, 16, 29, 48, 58, 80, 87, 88, 98, 104, 132, 134, 138, 139, 144, 156, 176, 186, 189, 207, 208, 215, 245, 270, 278, 284], "studio": [7, 208], "qmake": 7, "makefil": 7, "feel": [7, 12, 23, 41, 48, 55, 105, 114, 115, 117, 118, 122, 134, 155, 156, 157, 159, 160, 166, 186, 192], "comfort": 7, "box": [7, 10, 12, 13, 18, 20, 46, 80, 132, 135, 139, 142, 144, 149, 175, 178, 186, 192, 195, 196, 226, 231, 236, 238, 252, 259, 262, 295], "cmake_prefix_path": [7, 26, 27], "invok": [7, 10, 26, 27, 29, 105, 147, 149, 154, 156, 157, 169, 172, 179, 180, 207, 215, 226, 234, 238, 259, 277, 280, 288, 292, 298], "agre": [7, 27, 151, 299], "break": [7, 10, 12, 13, 18, 23, 37, 38, 87, 95, 100, 114, 122, 135, 136, 142, 166, 178, 180, 190, 198, 213, 294], "unexpect": [7, 57, 215, 220, 228, 280], "pwd": [7, 259], "fa350df05ecf": 7, "home": [7, 45, 54, 213, 237, 248], "enter": [7, 55, 134, 147, 149], "ran": [7, 112, 136, 176, 179, 181, 193, 264], "me": [7, 20, 55, 107, 166, 182, 231], "besid": [7, 27, 98, 112, 167, 178, 253, 262, 280], "encapsul": [7, 41, 52, 100, 104, 142, 166, 178], "buffer": [7, 16, 49, 52, 122, 134, 135, 143, 147, 152, 154, 159, 163, 166, 167, 168, 169, 173, 177, 192, 193, 198, 200, 204, 233, 237, 243, 269, 282, 283], "nest": [7, 16, 37, 48, 98, 103, 132, 135, 155, 176, 178, 180, 181, 222, 232], "similarli": [7, 11, 14, 26, 57, 88, 96, 103, 135, 138, 139, 140, 157, 158, 166, 169, 171, 197, 204, 216, 244], "w": [7, 36, 41, 48, 52, 80, 110, 112, 134, 151, 160, 180, 186, 192, 195, 205, 206, 217], "register_paramet": [7, 233], "reflect": [7, 10, 27, 45, 54, 98, 103, 176, 192, 220], "magic": [7, 107, 141, 149, 158], "assign": [7, 26, 46, 50, 52, 59, 96, 100, 103, 105, 106, 107, 110, 112, 114, 135, 149, 167, 176, 193, 246, 259, 277, 280, 298], "behind": [7, 10, 20, 27, 50, 87, 105, 107, 113, 121, 143, 177, 197, 214, 216, 222, 231, 233], "scene": [7, 27, 113, 121, 233, 295], "another_bia": 7, "recurs": [7, 19, 49, 135, 142, 190, 233, 250, 278], "0808": 7, "8613": 7, "2017": [7, 80], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": [7, 98], "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 189], "1230": 7, "0516": 7, "aptli": [7, 15], "register_modul": 7, "dropout": [7, 23, 24, 43, 55, 80, 100, 113, 122, 133, 137, 139, 141, 150, 174, 178, 180, 182, 218, 225, 231, 253, 297], "conv2d": [7, 14, 23, 49, 52, 58, 98, 113, 122, 133, 143, 175, 179, 187, 192, 197, 202, 221, 223, 225, 226, 227, 228, 238, 250, 252, 253, 259, 261, 270, 280], "subtleti": [7, 216], "bodi": [7, 157], "upon": [7, 21, 55, 62, 128, 149, 154, 182, 187, 190, 196, 200, 262, 280], "tree": [7, 12, 17, 26, 55, 106, 112, 143, 222, 245], "p": [7, 22, 23, 55, 73, 100, 106, 112, 113, 121, 133, 134, 143, 149, 151, 152, 155, 160, 163, 166, 174, 178, 179, 180, 195, 202, 206, 223, 225, 231, 237, 238, 242, 247], "0345": [7, 206], "4456": 7, "6313": 7, "3585": 7, "4008": [7, 27], "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 294], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": 7, "0420": 7, "3679": 7, "1482": 7, "0460": [7, 107], "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 13, 23, 38, 48, 49, 52, 53, 98, 101, 120, 149, 166, 174, 180, 183, 196, 208, 240, 251, 253, 294, 299], "6861": 7, "1166": 7, "45": [7, 49, 139, 157, 180, 251, 262], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 37, 193], "ordereddict": [7, 195], "13": [7, 27, 98, 107, 120, 166, 180, 189, 196, 251, 259], "48": [7, 20, 49, 98, 157, 160, 187, 231, 251, 270], "1863": 7, "8611": 7, "1228": [7, 107], "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": [7, 206], "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": 7, "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": [7, 98], "8060": 7, "topic": [7, 55, 66, 80, 96, 103, 114, 115, 117, 118, 125, 131, 194, 235, 247, 272, 273, 274, 275, 286], "devour": 7, "menu": [7, 56], "pipelin": [7, 19, 66, 113, 132, 176, 189, 195, 200, 267], "briefli": [7, 41, 66, 132, 137, 176, 190, 196, 238], "who": [7, 55, 80, 105, 108, 136, 149, 166, 192, 244, 259, 264, 290, 294], "heap": 7, "referenc": [7, 180, 267], "lower": [7, 16, 20, 56, 80, 87, 100, 102, 132, 134, 135, 136, 139, 147, 151, 154, 157, 166, 167, 174, 176, 177, 181, 187, 189, 192, 193, 196, 197, 206, 216, 220, 225, 231, 279, 280, 295], "heavili": [7, 169, 182, 205], "ergonom": 7, "far": [7, 16, 24, 26, 52, 55, 69, 95, 98, 100, 103, 105, 106, 107, 121, 138, 149, 166, 173, 177, 182, 192, 193, 196, 213, 225, 264], "stack": [7, 10, 16, 17, 25, 26, 45, 54, 98, 120, 132, 137, 152, 159, 163, 169, 172, 178, 182, 186, 187, 189, 193, 196, 200], "shared_ptr": [7, 26], "cognit": 7, "think": [7, 26, 27, 49, 58, 73, 96, 98, 106, 107, 109, 110, 112, 121, 156, 158, 176, 179, 181, 193, 196, 216, 236, 267], "everywher": [7, 103, 112], "make_shar": 7, "stai": [7, 87, 136, 137, 142, 176, 177, 178, 226, 261], "shorten": [7, 27], "wait": [7, 19, 25, 87, 136, 141, 147, 149, 150, 169, 172, 178, 179, 180, 186, 189, 193, 200, 243, 269, 270, 280], "hell": 7, "lot": [7, 10, 12, 17, 23, 25, 57, 95, 106, 113, 133, 135, 149, 163, 179, 182, 186, 190, 193, 205, 213, 263, 264, 267, 279], "came": [7, 58, 214], "scheme": [7, 22, 104, 105, 132, 193, 213, 221, 233, 269, 277], "hide": [7, 143, 176, 236], "reserv": [7, 12, 17, 151, 186, 204], "simplifi": [7, 12, 16, 28, 113, 140, 147, 171, 182, 189, 195, 200, 213, 216, 221, 222, 223, 226, 227, 246], "linearimpl": 7, "torch_modul": 7, "brief": [7, 28, 87, 95, 106, 176, 193, 196], "typedef": 7, "among": [7, 10, 26, 59, 87, 93, 104, 137, 173, 186, 228, 261, 262, 298], "holder": 7, "arrow": [7, 48, 137, 220], "resembl": [7, 14, 27, 106, 145, 177], "extra": [7, 10, 62, 98, 103, 105, 109, 110, 113, 117, 135, 140, 141, 143, 150, 154, 167, 176, 182, 189, 190, 195, 252, 270, 279, 280], "netimpl": 7, "subtl": [7, 103, 263], "deserv": 7, "construct": [7, 16, 24, 25, 26, 29, 36, 52, 58, 70, 72, 90, 105, 121, 128, 132, 135, 141, 144, 150, 152, 158, 164, 168, 176, 177, 179, 182, 193, 195, 196, 203, 218, 222, 223, 228, 233, 236, 251, 253, 263, 266, 282, 299], "tricki": [7, 20, 144, 155, 192, 193, 231], "nullptr": [7, 207], "familiar": [7, 10, 12, 26, 40, 41, 45, 49, 54, 59, 60, 62, 90, 98, 99, 103, 104, 106, 108, 113, 122, 132, 134, 138, 145, 146, 149, 159, 171, 179, 192, 229, 259, 264, 279], "pythonista": 7, "disadvantag": [7, 122], "said": [7, 27, 29, 159, 166, 176, 177, 213, 214], "introduct": [7, 13, 18, 20, 51, 53, 59, 60, 61, 62, 63, 89, 90, 95, 100, 107, 108, 111, 114, 115, 116, 118, 123, 132, 142, 145, 146, 157, 183, 196, 215, 231, 252, 264, 270, 280, 284, 292, 295, 297], "sooner": [7, 134], "technic": [7, 27, 149, 150, 166, 193, 213, 240, 241, 249], "henceforth": 7, "recap": [7, 52, 177, 216, 269], "adversari": [7, 49, 104, 123, 132], "architectur": [7, 11, 20, 29, 37, 58, 62, 80, 90, 100, 105, 106, 132, 134, 137, 139, 145, 152, 163, 169, 171, 173, 181, 187, 189, 190, 196, 217, 221, 223, 226, 227, 231, 252, 259, 261, 263, 280], "repositori": [7, 12, 60, 88, 125, 134, 137, 149, 171, 172, 180, 181, 182, 195, 200, 237], "distinct": [7, 20, 25, 58, 87, 103, 112, 134, 180, 187, 192, 193, 231, 295], "transform": [7, 14, 20, 21, 23, 24, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 55, 58, 93, 95, 96, 98, 103, 104, 120, 123, 131, 132, 133, 135, 149, 150, 152, 154, 155, 157, 159, 163, 166, 167, 174, 175, 179, 182, 183, 186, 187, 189, 195, 198, 202, 205, 206, 218, 221, 223, 225, 226, 227, 231, 247, 251, 252, 253, 262, 264, 266, 277, 279, 280, 285, 288, 292, 295], "probabl": [7, 10, 26, 37, 55, 58, 96, 100, 103, 105, 106, 109, 112, 133, 138, 139, 141, 175, 177, 187, 189, 218, 251], "judg": 7, "closer": [7, 95, 105, 177], "feedback": [7, 11, 23, 134, 151, 155, 156, 159, 160, 204, 206, 220, 222, 223, 249], "authent": 7, "theori": [7, 55, 58, 95, 105, 138, 169], "delic": 7, "tandem": [7, 291], "indistinguish": 7, "fool": [7, 55, 80], "excel": [7, 57, 187, 243], "realist": [7, 25, 196, 218], "2d": [7, 37, 58, 100, 113, 135, 140, 155, 178, 189, 193, 228, 246], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 49, 52, 98, 100, 122, 133, 168, 173, 174, 179, 187, 202, 228, 253], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 49, 98, 100, 122, 133, 179, 187, 228, 253], "pad": [7, 23, 55, 100, 143, 151, 181, 196, 215, 218, 231, 280], "batch_norm2": 7, "conv3": 7, "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 23, 58, 113, 143, 156, 197, 225, 250, 280], "dcgangener": 7, "chosen": [7, 24, 26, 96, 100, 136, 177, 190, 263, 264, 295], "student": [7, 105], "harm": [7, 105], "discoveri": [7, 192], "fed": [7, 14, 42, 55, 58, 189, 193, 228], "soylent": 7, "regularli": [7, 59], "channel": [7, 12, 14, 23, 25, 48, 49, 58, 96, 98, 100, 103, 105, 113, 132, 137, 166, 173, 183, 187, 195, 206, 227, 242, 252, 266, 280], "moduleopt": 7, "linearopt": 7, "leaki": [7, 58], "squash": [7, 150, 159], "sequenti": [7, 14, 23, 55, 73, 100, 112, 121, 150, 155, 167, 174, 206, 218, 233, 236, 240, 251, 280, 298, 299], "orient": [7, 184], "layer": [7, 10, 12, 13, 14, 15, 17, 19, 20, 23, 24, 36, 42, 43, 48, 52, 55, 58, 61, 66, 73, 80, 93, 95, 98, 102, 103, 104, 105, 107, 113, 121, 122, 128, 132, 133, 134, 135, 139, 140, 141, 142, 150, 160, 167, 171, 173, 174, 175, 176, 179, 180, 182, 184, 192, 193, 195, 198, 205, 206, 217, 221, 228, 231, 240, 241, 242, 245, 249, 251, 262, 263, 266, 267, 269, 271, 277, 281, 282, 285, 297], "conv2dopt": 7, "leakyrelu": [7, 58], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 70, 121, 144, 226], "knob": [7, 298], "sampler": [7, 23, 38, 61, 104, 133, 134, 151, 176, 184, 202, 206, 223, 225], "collat": [7, 57], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 13, 22, 55, 58, 59, 61, 66, 133, 147, 149, 178, 179, 180, 200, 242, 243, 244, 299], "concurr": [7, 120, 137, 139, 169, 198, 243, 280, 298], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 187, 189], "label": [7, 38, 41, 42, 46, 48, 49, 57, 58, 80, 93, 95, 96, 98, 102, 103, 104, 107, 112, 120, 128, 134, 137, 140, 147, 151, 169, 174, 175, 178, 182, 187, 193, 195, 206, 231, 253, 259, 264, 266, 270, 284, 295, 299], "field": [7, 12, 13, 16, 17, 37, 55, 100, 110, 112, 149, 166, 178, 186, 192, 195, 200, 215, 228, 247], "rebuild": [7, 264], "danc": [7, 14], "generator_optim": 7, "adamopt": 7, "2e": [7, 95, 151], "beta": [7, 21, 24, 115, 132, 183, 216, 267, 280, 284, 287], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 104, 121, 216, 222, 232], "lbfg": [7, 14], "rmsprop": [7, 41, 52, 74, 107, 121], "sgd": [7, 23, 41, 48, 49, 52, 72, 74, 93, 98, 104, 107, 113, 121, 122, 147, 149, 174, 178, 179, 180, 184, 187, 252, 253, 278, 282, 283, 288], "exhaust": [7, 13, 192, 228], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 263], "fake_imag": [7, 166], "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 186], "g_loss": 7, "printf": 7, "r": [7, 13, 16, 23, 41, 48, 52, 80, 90, 98, 106, 107, 132, 157, 158, 159, 160, 163, 177, 178, 180, 189, 195, 202, 223, 225, 236, 252, 264, 280, 298], "2ld": 7, "3ld": 7, "4f": [7, 133, 134, 174], "batches_per_epoch": 7, "uniformli": [7, 93, 177, 280], "robust": [7, 55, 59, 60, 80, 103, 136, 177, 251], "smooth": [7, 105, 114, 189], "propag": [7, 12, 19, 36, 41, 48, 50, 52, 58, 105, 109, 110, 113, 144, 154, 160, 176, 223, 226, 227, 280], "repeat": [7, 16, 22, 23, 27, 95, 98, 140, 141, 176, 186, 192, 198, 202, 213, 223, 225, 242, 270, 279, 285], "spiel": 7, "progress": [7, 10, 17, 28, 58, 59, 102, 104, 150, 174, 182, 187, 200, 217, 244], "observ": [7, 16, 23, 52, 57, 87, 104, 128, 133, 134, 139, 142, 150, 151, 159, 160, 166, 169, 176, 177, 178, 180, 181, 182, 190, 196, 197, 201, 202, 206, 216, 221, 223, 225, 226, 227, 228, 234, 240, 251, 263, 264, 267, 271, 277, 280, 284, 285, 296, 299], "meaning": [7, 55, 105, 160, 200], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 134, 180, 251, 264, 279], "3652": 7, "6626": 7, "400": [7, 98, 122, 151, 206, 264, 279, 295], "8057": 7, "2795": [7, 264], "3531": 7, "4452": 7, "600": [7, 160, 177, 297], "3501": 7, "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 40, 49, 87, 105, 106, 107, 112, 113, 121, 137, 166, 177, 182, 200, 247, 253, 267], "onto": [7, 10, 16, 19, 22, 49, 100, 102, 103, 132, 150, 166, 179, 180, 193, 200, 233, 280], "somewher": [7, 27, 100, 106, 107, 122], "kcpu": [7, 207, 237], "whose": [7, 87, 90, 95, 96, 105, 112, 134, 138, 160, 169, 189, 228, 262, 264], "insert": [7, 14, 20, 23, 100, 151, 174, 180, 192, 197, 201, 202, 221, 223, 225, 226, 227, 228, 231, 261], "op": [7, 12, 13, 17, 25, 26, 27, 54, 87, 118, 132, 133, 134, 135, 137, 142, 143, 147, 149, 151, 157, 160, 175, 186, 196, 197, 201, 202, 205, 206, 207, 214, 215, 217, 218, 223, 225, 226, 228, 233, 238, 242, 249, 253, 263, 269, 284], "previou": [7, 13, 16, 17, 19, 20, 26, 27, 41, 55, 59, 61, 103, 104, 105, 113, 118, 128, 134, 135, 136, 140, 141, 144, 145, 146, 150, 159, 166, 169, 171, 173, 174, 176, 177, 178, 180, 181, 182, 186, 187, 189, 190, 192, 193, 202, 223, 225, 226, 227, 231, 238, 264, 271, 280, 295], "resid": [7, 105, 169], "downstream": [7, 189], "portabl": [7, 290], "augment": [7, 28, 57, 113, 128, 132, 174, 184, 192, 195], "period": [7, 55, 58, 136, 139, 159, 186, 200], "middl": 7, "procedur": [7, 27, 52, 131, 174, 177, 184], "restor": [7, 80, 122, 147, 160, 282], "session": [7, 24, 105, 115, 267], "essenti": [7, 12, 16, 18, 36, 55, 106, 107, 109, 132, 142, 149, 164, 169, 177, 192, 221, 233, 253, 267, 298], "interv": [7, 16, 95, 139, 180], "kcheckpointeveri": 7, "str": [7, 22, 23, 26, 88, 134, 151, 171, 176, 179, 189, 192, 206, 227, 234, 247, 298], "checkpoint_count": 7, "counter": [7, 13, 55, 58, 142, 149, 292], "bump": 7, "beta1": [7, 58], "krestorefromcheckpoint": 7, "intermediari": [7, 138], "xxx": [7, 17, 57], "matplotlib": [7, 14, 38, 49, 58, 63, 95, 96, 98, 102, 174, 177, 182, 187, 189], "argpars": [7, 133, 134, 151, 178, 179, 180, 206], "pyplot": [7, 14, 38, 49, 98, 113, 174, 187, 189], "plt": [7, 14, 38, 49, 98, 174, 182, 187, 189], "parser": [7, 106, 133, 134, 178, 179, 180], "argumentpars": [7, 133, 134, 178, 179, 180], "add_argu": [7, 133, 134, 178, 179, 180], "png": [7, 57, 132, 195], "parse_arg": [7, 133, 134, 178, 179, 180], "sample_fil": 7, "mul": [7, 142, 157, 192, 223, 237, 264, 279], "uint8": [7, 195, 228], "numpi": [7, 14, 18, 21, 23, 46, 49, 57, 63, 76, 78, 79, 95, 98, 113, 115, 120, 132, 144, 151, 174, 175, 180, 187, 189, 190, 202, 206, 213, 222, 223, 225, 231, 262, 279, 295], "axi": [7, 25, 38, 87, 109, 110, 120, 140, 151, 169, 173, 174, 189, 206], "subplot": [7, 174], "imshow": [7, 14, 38, 49, 98, 174, 187, 189], "cmap": [7, 38, 187], "grai": [7, 38, 159, 262], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "57": [7, 20, 120, 157, 270], "4953": 7, "0195": [7, 206], "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 49, 98, 122, 128, 174, 180, 187, 270], "8084": 7, "hoorai": [7, 29], "ball": 7, "court": 7, "digest": [7, 279], "necess": [7, 55, 102], "broad": [7, 63, 96, 104], "space": [7, 16, 26, 55, 58, 80, 95, 96, 100, 105, 106, 110, 112, 139, 150, 159, 166, 169, 176, 177, 180, 182, 186, 187, 189, 193, 196, 204], "consult": [7, 166, 223, 262], "stuck": [7, 222], "whenev": [7, 26, 59, 72, 103, 106, 107, 238, 283], "rate": [7, 41, 48, 58, 93, 98, 100, 104, 105, 107, 128, 133, 134, 139, 140, 159, 174, 177, 179, 193, 195, 200, 247, 278, 280], "vmap": [8, 10, 132, 154, 158, 163, 168, 222, 232], "oppos": [8, 26, 55, 58, 128, 149, 158, 163, 179, 264], "treat": [8, 18, 95, 112, 168, 178, 190, 192, 193, 234], "opaqu": [8, 18, 27, 279, 292], "callabl": [8, 18, 25, 46, 57, 113, 186, 190, 192, 202, 262, 292], "aotinductor": [8, 192, 284, 292, 295], "toe": 8, "registr": [8, 10, 12, 17, 18, 26, 27, 252, 253, 259], "pybind": 8, "ed": [8, 294], "respons": [10, 13, 19, 22, 55, 95, 96, 104, 113, 132, 137, 143, 147, 149, 178, 179, 182, 190, 192, 240, 242, 262], "nontrivi": 10, "cut": [10, 171, 192], "concern": [10, 25, 107, 193, 213, 223, 247, 253], "rule": [10, 26, 36, 48, 52, 95, 103, 110, 138, 152, 158, 167, 168, 176, 177, 192, 202, 263], "convers": [10, 55, 95, 103, 160, 182, 213, 247, 249, 261, 267, 277], "highest": [10, 23, 49, 55, 102, 136, 141, 177, 189, 190, 280], "prioriti": [10, 136, 202], "transfer": [10, 21, 26, 49, 57, 105, 113, 122, 123, 132, 149, 169, 175, 179, 186, 195, 204, 237, 261, 265, 281], "redispatch": 10, "unlik": [10, 14, 20, 96, 103, 105, 121, 138, 154, 155, 160, 174, 182, 192, 229, 231, 292, 298], "style": [10, 137, 171, 192, 195, 244, 267], "abid": [10, 58], "myop": 10, "myadd": [10, 12], "myadd_cpu": 10, "self_": 10, "other_": 10, "self_ptr": 10, "other_ptr": 10, "myadd_cuda": 10, "boundari": [10, 135, 176, 289], "myops_cpu": 10, "myops_cuda": 10, "subdivid": 10, "xla": [10, 12, 17, 277], "torch_xla": [10, 12], "useabl": 10, "behav": [10, 18, 24, 103, 113, 160, 167, 178, 225, 259], "autogradnotimplementedfallback": 10, "notimpl": 10, "node": [10, 22, 24, 27, 36, 48, 52, 59, 60, 61, 62, 66, 68, 95, 102, 106, 115, 118, 121, 131, 134, 135, 136, 140, 142, 145, 146, 147, 156, 157, 179, 182, 192, 198, 207, 221, 225, 226, 227, 228, 246, 280, 298], "preserv": [10, 20, 26, 29, 103, 132, 135, 160, 173, 203, 214, 221, 231, 267, 277, 282], "require_grad": 10, "ness": 10, "pin": [10, 104, 138, 169, 280], "lost": [10, 20, 107, 231], "alias": [10, 12, 192], "adinplaceorview": 10, "bookkeep": [10, 264], "autogradnotimplementedinplaceorviewfallback": 10, "logi": 10, "annot": [10, 12, 22, 25, 26, 27, 38, 57, 107, 118, 151, 189, 190, 192, 247, 264], "guess": [10, 41, 48, 55, 58, 140, 182], "twist": 10, "constitut": [10, 16], "hood": [10, 23, 55, 58, 60, 62, 66, 121, 137, 138, 158, 159, 169, 180, 216, 242, 245, 247], "singleton": [10, 179], "findschemaorthrow": 10, "decltyp": 10, "qualifi": [10, 26, 244], "overload": [10, 26], "typic": [10, 13, 16, 23, 25, 38, 48, 52, 54, 60, 61, 87, 98, 106, 107, 112, 135, 137, 139, 143, 145, 157, 166, 169, 176, 179, 189, 190, 192, 193, 228, 249, 251, 252, 253, 261, 263, 265, 267, 280, 285, 295, 298], "cast": [10, 20, 22, 78, 120, 134, 135, 169, 192, 231, 263], "lookup": [10, 19, 112, 142, 180], "typo": 10, "myaddfunct": [10, 12], "autononvariabletypemod": [10, 12], "myadd_autograd": [10, 12], "except": [10, 13, 20, 27, 45, 48, 49, 54, 55, 58, 96, 98, 100, 103, 107, 110, 114, 128, 135, 136, 140, 151, 152, 154, 158, 160, 168, 172, 174, 182, 192, 204, 218, 222, 228, 231, 233, 236, 237, 252, 289, 295], "raii": 10, "guard": [10, 147, 226, 241], "infinit": 10, "overflow": [10, 55, 205, 263, 267], "send": [10, 12, 13, 14, 49, 50, 66, 93, 149, 159, 169, 171, 172, 174, 178, 179, 180, 193, 242, 270], "consider": [10, 12, 24, 133, 192, 193, 295], "handler": [10, 189, 277], "autogradcpu": 10, "autogradcuda": 10, "pythondispatch": 10, "_python_dispatch": 10, "isn": [10, 95, 106, 154, 169, 175, 187, 192, 193, 215, 264, 266, 281, 282], "glorifi": 10, "add_cpu": 10, "add_cuda": 10, "unsupport": [10, 114, 118, 132, 190, 192, 295], "decentr": 10, "importantli": [10, 23, 27, 144, 166, 169, 213, 264], "parti": [10, 18, 26, 27, 135, 136, 172], "aspect": [10, 17, 80, 149, 195, 264], "patch": [10, 12, 177], "dispatchkei": [10, 12], "varieti": [10, 28, 37, 55, 95, 96, 100, 104, 113, 122, 141, 169, 196, 216, 298], "fallback": [10, 12, 17, 114, 196, 206], "opt": [10, 26, 113, 139, 160, 166, 172, 179, 180, 186, 205, 233, 240], "amp": [10, 17, 66, 135, 160, 217, 227, 238, 252, 284, 288], "incom": [10, 98, 186], "float16": [10, 17, 134, 151, 160, 238, 263], "float32": [10, 16, 27, 98, 134, 135, 175, 180, 198, 207, 217, 226, 227, 228, 263, 277, 280], "matmul": [10, 27, 137, 157, 192, 205, 231, 236, 238, 251, 263, 280], "impair": 10, "converg": [10, 41, 55, 58, 69, 104, 105, 121, 122, 137, 149, 167, 177, 182, 241, 263, 267, 281, 284], "hypothet": 10, "autocast_mod": 10, "mymatmul_autocast": 10, "excludedispatchkeyguard": 10, "no_autocast": 10, "mymatmul": 10, "cached_cast": 10, "khalf": 10, "elig": [10, 280], "polici": [10, 17, 132, 133, 135, 159, 177, 178, 180, 183, 298], "mixtur": [10, 249], "meanwhil": [10, 138, 157, 214, 252], "float64": 10, "unaffect": [10, 105], "forc": [10, 16, 20, 27, 55, 100, 132, 182, 190, 196, 213, 215, 231, 263, 280, 289], "fallthrough": 10, "occur": [10, 13, 18, 23, 27, 29, 59, 87, 105, 157, 160, 169, 178, 179, 186, 189, 192, 193, 200, 205, 206, 245, 270, 291], "fall": [10, 17, 96, 167, 177, 293], "unfortun": [10, 27, 29, 121, 149, 192], "aren": [10, 144, 150, 192, 193, 215, 280, 283], "dri": [10, 186], "reduct": [10, 11, 73, 103, 121, 133, 134, 135, 138, 143, 151, 166, 172, 186, 189, 196, 201, 213, 215, 222, 263, 267, 280], "gemm": [10, 157, 217, 226, 227, 251], "unless": [10, 24, 45, 54, 103, 107, 114, 151, 176, 192, 202, 205, 206, 236, 269], "categori": [10, 12, 23, 80, 87, 96, 103, 128, 140, 141, 186, 192, 202, 223, 225], "promote_typ": 10, "widest": 10, "safest": 10, "my_multiple_input_op_autocast": 10, "t0": [10, 134, 240, 264], "t1": [10, 264], "optimist": 10, "exec_typ": 10, "my_multiple_input_op": 10, "myadd_autocast": 10, "gymnast": 10, "invoc": [10, 29, 156, 178, 259, 285, 291], "stabil": [10, 105, 177], "41478": 10, "jame": [11, 29, 156], "reed": [11, 29, 156], "seth": [11, 23, 40], "weidman": [11, 23], "wikitext": [11, 201], "corpu": [11, 55, 56, 151], "preprocess": [11, 24, 57, 105, 113, 132, 140, 182, 189, 267], "train": [11, 12, 14, 19, 20, 22, 24, 27, 36, 40, 41, 42, 46, 48, 51, 52, 53, 57, 60, 62, 63, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 87, 90, 96, 97, 99, 100, 103, 105, 106, 108, 110, 112, 113, 115, 121, 132, 133, 135, 136, 139, 142, 143, 147, 151, 160, 161, 163, 164, 167, 168, 171, 172, 175, 178, 179, 180, 181, 183, 186, 189, 190, 192, 195, 198, 200, 203, 204, 206, 215, 222, 228, 231, 232, 238, 240, 241, 243, 244, 245, 246, 247, 263, 266, 267, 270, 278, 281, 282, 284, 285, 295, 297, 299], "pre": [11, 23, 38, 106, 132, 134, 137, 149, 151, 174, 175, 189, 193, 195, 196, 205, 206, 217, 228, 244, 247, 290, 298], "s3": [11, 192, 201], "amazonaw": [11, 201], "com": [11, 12, 22, 23, 28, 29, 55, 118, 133, 140, 141, 143, 154, 155, 156, 160, 168, 182, 189, 195, 197, 201, 202, 205, 236, 237, 250, 262, 264, 295], "asset": [11, 201, 237], "word_language_model_quant": [11, 201], "model_data_filepath": 11, "gpt": [11, 60, 133, 145, 146, 171], "almost": [11, 14, 23, 110, 112, 133, 137, 150, 175, 192, 205], "quantize_dynam": [11, 151, 261, 267], "int8": [11, 23, 151, 175, 193, 205, 206, 217, 223, 226, 227, 228, 238, 253, 261, 267], "macbook": [11, 23, 151, 182], "pro": [11, 23, 99, 151], "welcom": [11, 23, 151, 206, 220], "dynamic_quantization_tutori": [11, 21, 267], "repo": [12, 17, 22, 23, 60, 87, 132, 145, 149, 151, 169, 178, 179, 193, 204, 205, 253], "mainten": [12, 189], "solut": [12, 20, 58, 114, 122, 132, 157, 168, 169, 189, 190, 193, 215, 218, 231, 245, 264, 280, 284, 290], "pr": [12, 187, 196, 252, 279], "propos": [12, 28, 137, 150, 167, 213, 215, 245], "request": [12, 29, 36, 48, 93, 103, 113, 134, 167, 175, 178, 179, 207, 215, 216, 217, 229, 242, 243, 247, 262], "hardwar": [12, 17, 20, 24, 45, 54, 56, 103, 105, 115, 140, 149, 152, 158, 160, 168, 169, 172, 173, 193, 196, 205, 231, 238, 251, 252, 253, 265, 267, 280, 288, 292, 295], "googl": [12, 20, 25, 28, 29, 40, 55, 58, 102, 132, 149, 150, 151, 176, 177, 186, 193, 298], "tpu": [12, 172, 283], "chip": 12, "layout": [12, 20, 137, 196, 213, 216, 222, 231, 246, 280], "spars": [12, 19, 100, 107, 112, 132, 150, 173, 193, 196, 215, 222, 232, 277], "quantiz": [12, 21, 105, 128, 132, 166, 222, 232, 238, 250, 268, 276, 277, 284], "enforc": [12, 16, 26, 139, 167, 213, 214], "mainli": [12, 16, 17, 22, 151, 157, 186, 190, 221, 226, 228, 253, 294], "haven": [12, 27, 93, 95, 98, 103, 106, 110, 112, 152, 156, 168, 247], "identifi": [12, 20, 38, 59, 61, 80, 87, 88, 96, 113, 120, 146, 159, 160, 164, 173, 179, 192, 195, 200, 202, 206, 216, 228, 231, 245, 280, 295], "carri": [12, 16, 55, 58, 95, 103, 105, 109, 145, 150, 160, 182, 269], "privateuse1": [12, 132, 229], "autogradprivateuse1": [12, 17], "privateuse2": [12, 17], "autogradprivateuse2": [12, 17], "privateuse3": [12, 17], "autogradprivateuse3": [12, 17], "tensorimpl": [12, 17, 264, 279], "storag": [12, 17, 18, 104, 109, 122, 138, 150, 152, 160, 169, 176, 186, 200, 213, 215, 216, 222, 232, 233, 243, 244, 263, 269, 277], "dispatchkeyset": [12, 17], "k": [12, 14, 23, 87, 96, 106, 137, 151, 178, 179, 181, 200, 202, 204, 217, 223, 225, 231], "caffe2": [12, 90], "typemeta": 12, "data_typ": [12, 109], "opaquetensorimpl": 12, "tweak": [12, 55, 283], "overrid": [12, 17, 57, 73, 98, 107, 121, 136, 156, 160, 172, 189, 206, 284, 291], "vulkan": [12, 222], "submit": [12, 252], "src": [12, 13, 118, 149, 172, 237, 279], "registrationdeclar": 12, "snippet": [12, 25, 133, 134, 136, 142, 149, 157, 172, 181, 198, 204, 206, 213, 217, 223, 225, 229, 246, 261, 263, 269, 280, 284], "ab": [12, 98, 190, 202, 238, 270], "abs_": 12, "abs_out": 12, "absolute_": 12, "absolute_out": 12, "angl": [12, 16, 112], "angle_out": 12, "sgn": 12, "uniqu": [12, 20, 55, 59, 61, 106, 107, 108, 110, 112, 134, 146, 179, 182, 193, 195, 213, 231, 267, 295], "boolean": [12, 117, 150, 192], "impli": [12, 105, 110, 151, 192, 243, 269, 279, 292], "schema_my_op1": 12, "my_op1": 12, "schema_my_op2": 12, "my_op2": 12, "schema_my_op2_backward": 12, "my_op2_backward": 12, "zoom": [12, 87, 102, 139, 186, 189], "1600": [12, 264, 279], "grow": [12, 55, 107, 136, 138, 145, 243], "unrealist": 12, "classifi": [12, 14, 23, 28, 37, 48, 51, 52, 53, 58, 63, 80, 87, 93, 98, 100, 105, 122, 128, 132, 135, 141, 151, 159, 164, 182, 183, 195, 196, 262, 284, 295], "accompani": 12, "comment": [12, 149, 166, 182, 213, 236, 252, 253, 265], "sacrif": [12, 173], "max_pool2d": [12, 98, 133, 179, 237, 253, 270], "worri": [12, 58, 107, 144, 147, 166, 180, 246], "my_op": [12, 27], "squeez": [12, 16, 38, 103, 151, 187, 205, 206, 262], "max": [12, 13, 23, 49, 55, 58, 87, 98, 100, 133, 139, 149, 151, 174, 176, 187, 189, 192, 196, 202, 205, 206, 218, 222, 223, 225, 228, 231, 280, 295, 298, 299], "op_backward": 12, "proper": [12, 36, 134, 137, 147, 160, 176, 180, 189, 193, 213, 280], "rare": [12, 17, 55, 128, 169, 182, 280], "assumpt": [12, 16, 80, 105, 112, 113, 163, 169], "myadd_schema": 12, "my_add": 12, "_xlac": 12, "torch_xla_sourc": 12, "library_dir": 12, "extra_link_arg": 12, "make_relative_rpath": 12, "seamlessli": [12, 16, 59, 137, 193, 196, 226, 227, 264, 290], "nm": [12, 252], "torchvsion": 12, "adhoc": 12, "unbox": 12, "potenti": [12, 16, 29, 80, 95, 106, 134, 136, 142, 169, 179, 190, 192, 195, 200, 221, 222, 223, 226, 227, 247, 290, 292], "wiki": [12, 154, 160], "suit": [12, 96, 120, 176, 202, 217, 222, 223, 226, 232, 251, 267], "ship": [12, 49, 98], "delet": [12, 88, 138, 147, 166, 171, 180, 189, 205], "old": [12, 23, 122, 135, 136, 173, 186, 201, 202, 218, 261], "until": [12, 55, 87, 95, 134, 136, 140, 141, 149, 150, 157, 166, 169, 176, 178, 179, 180, 186, 198, 213, 242, 264], "interrupt": [12, 59, 93, 182], "quarterli": 12, "cadenc": 12, "join": [12, 22, 38, 45, 49, 54, 55, 56, 59, 98, 131, 133, 140, 147, 149, 151, 174, 178, 179, 180, 200, 206, 242, 243, 244, 264, 299], "announc": 12, "slack": [12, 49], "Not": [12, 147, 175, 299], "search": [12, 22, 55, 132, 139, 157, 173, 192, 205, 298], "instantiate_device_type_test": 12, "testtorchdevicetyp": 12, "testviewop": 12, "testtensordeviceop": 12, "testtypepromot": 12, "__reduce_ex__": 12, "monkei": 12, "direct": [12, 27, 29, 36, 48, 52, 58, 80, 95, 96, 98, 104, 112, 139, 149, 151, 154, 159, 163, 167, 182, 204, 205, 216, 243, 247, 284, 293], "suppos": [12, 26, 105, 106, 107, 112, 133, 190, 195, 197, 229, 247, 252], "vice": [12, 27, 45, 54, 261], "versa": [12, 27, 45, 54, 261], "Such": [12, 13, 95, 267], "seamless": [12, 193, 222, 226, 245], "coverag": [12, 154, 158, 160, 218, 221, 223, 226, 227, 263], "comprehens": [12, 25, 28, 45, 54, 96, 118, 157, 192, 226, 249, 279], "refactor": [12, 122, 145], "codegen": [12, 157], "dev": [12, 107, 142, 151, 175, 186, 189, 190, 206, 222, 259, 263], "andrew": [13, 197, 225], "gu": 13, "shard": [13, 131, 132, 145, 198, 242, 244, 245, 246, 284], "saw": [13, 16, 25, 27, 41, 55, 98, 100, 103, 107, 109, 154, 155, 158, 159], "skeleton": [13, 16, 277], "implicitli": [13, 48, 55, 95, 133, 144, 181, 192, 228, 259], "schedul": [13, 87, 93, 104, 128, 133, 134, 135, 147, 171, 174, 177, 186, 195, 270, 280, 284, 287, 298], "rank": [13, 19, 22, 50, 59, 61, 87, 132, 133, 134, 135, 136, 147, 149, 171, 172, 178, 179, 180, 193, 198, 200, 242, 243, 244, 246, 298, 299], "commun": [13, 17, 22, 61, 132, 133, 134, 135, 137, 139, 145, 146, 147, 171, 172, 176, 178, 179, 180, 186, 189, 192, 193, 198, 200, 208, 222, 245, 246, 280, 284], "particip": [13, 100, 146, 179, 263, 280], "hang": [13, 61, 141], "persist": [13, 26, 43, 243, 263], "facilit": [13, 16, 55, 96, 103, 105, 122, 132, 135, 137, 150, 218, 229, 280], "earli": [13, 27, 58, 93, 147, 149, 169, 197, 215, 249], "shadow": [13, 220], "hook": [13, 135, 137, 142, 147, 173, 183, 271], "mp": [13, 17, 37, 42, 45, 59, 61, 68, 80, 103, 121, 128, 132, 133, 134, 147, 149, 178, 179, 180, 242, 243, 244, 299], "ddp": [13, 19, 59, 60, 66, 132, 133, 134, 135, 137, 146, 186, 246, 299], "nccl": [13, 22, 59, 61, 87, 133, 134, 136, 137, 147, 149, 186, 193, 198, 200, 243, 244, 246], "world_siz": [13, 19, 22, 59, 61, 133, 134, 136, 147, 149, 171, 172, 178, 179, 180, 198, 200, 242, 243, 244, 246, 299], "num_input": 13, "master_addr": [13, 22, 59, 61, 133, 136, 147, 149, 172, 178, 179, 180, 200, 242, 243, 244, 299], "localhost": [13, 22, 59, 61, 102, 133, 136, 147, 172, 178, 179, 180, 186, 187, 193, 242, 243, 244, 246, 278, 289, 299], "master_port": [13, 22, 59, 61, 133, 136, 147, 149, 172, 178, 179, 180, 200, 242, 243, 244, 299], "29500": [13, 22, 149, 172, 178, 179, 180, 242, 299], "init_process_group": [13, 19, 22, 59, 61, 133, 134, 136, 147, 149, 171, 172, 198, 200, 243, 244, 246, 299], "device_id": [13, 61, 122, 134, 135, 147, 299], "nproc": [13, 59, 61, 133, 147, 178, 180, 198, 242, 243, 244, 299], "__name__": [13, 57, 59, 61, 133, 134, 136, 147, 149, 151, 171, 178, 179, 180, 198, 206, 242, 243, 244, 259, 299], "__main__": [13, 57, 59, 61, 133, 134, 147, 149, 171, 178, 179, 180, 198, 242, 243, 244, 259, 264, 299], "arbitrarili": [13, 55, 105, 271], "prior": [13, 17, 23, 56, 58, 95, 100, 105, 147, 159, 173, 187, 196, 223, 242, 244], "togeth": [13, 20, 25, 29, 37, 43, 55, 57, 66, 90, 98, 100, 103, 104, 105, 109, 113, 133, 135, 143, 147, 150, 152, 169, 178, 180, 182, 189, 196, 223, 226, 228, 231, 247, 279, 292], "lr": [13, 23, 49, 52, 58, 93, 98, 107, 113, 122, 128, 133, 134, 135, 147, 149, 157, 159, 174, 177, 178, 179, 180, 187, 240, 243, 244, 247, 252, 253, 278, 284, 287, 288, 299], "notabl": [13, 23, 93, 277], "addition": [13, 14, 41, 87, 138, 139, 147, 169, 192, 195, 200, 226, 227, 229, 243, 244, 289, 298], "divide_by_initial_world_s": 13, "world": [13, 16, 22, 27, 42, 60, 95, 103, 107, 137, 149, 156, 159, 172, 177, 178, 179, 192, 193, 200, 218, 243, 244, 246, 251], "nonetheless": [13, 105], "mind": [13, 45, 55, 58, 90, 105, 146, 163, 250], "preliminari": [13, 149, 151], "delv": [13, 157, 292], "insight": [13, 80, 87, 149, 181, 264, 279], "join_hook": 13, "kwarg": [13, 25, 122, 135, 156, 160, 176, 179, 192, 193, 217, 233, 240, 247, 295], "join_devic": 13, "join_process_group": 13, "processgroup": [13, 19, 22, 66, 131, 132, 137, 180, 193, 200, 246, 280], "throw_on_early_termin": 13, "explain": [13, 14, 20, 24, 27, 48, 52, 58, 80, 96, 107, 113, 136, 137, 157, 190, 192, 207, 217, 221, 226, 231, 267, 270, 290, 295], "joinconfig": 13, "_join_config": 13, "main_hook": 13, "repeatedli": [13, 100, 176, 180, 204], "post_hook": 13, "is_last_join": 13, "broadcast": [13, 73, 113, 121, 135, 147, 149, 172, 192, 279, 299], "vacuou": 13, "contextlib": [13, 189], "nullcontext": 13, "conform": [13, 189], "interleav": [13, 198], "syncbatchnorm": [13, 61], "__exit__": 13, "heartbeat": 13, "notify_join_context": 13, "serializ": 13, "fulli": [13, 14, 16, 17, 24, 25, 26, 40, 66, 87, 93, 98, 99, 100, 113, 128, 131, 132, 139, 142, 145, 160, 163, 174, 177, 179, 181, 186, 202, 215, 223, 231, 238, 244, 249, 252, 266], "proceed": [13, 52, 105, 118, 169], "overlap": [13, 25, 62, 133, 134, 135, 140, 145, 147, 169, 186, 189, 198, 280], "moreov": [13, 169, 213, 252, 264], "permit": [13, 263], "customiz": [13, 150, 220], "idea": [13, 27, 28, 80, 90, 105, 107, 108, 109, 112, 121, 137, 143, 150, 157, 167, 177, 180, 182, 213, 236, 242, 247, 259, 264, 267, 280, 298, 299], "counterjoinhook": 13, "sync_max_count": 13, "all_reduc": [13, 66, 133, 134, 149, 172, 200, 245], "get_rank": [13, 135, 147, 149], "process_group": [13, 200, 246], "common_rank": 13, "find_common_rank": 13, "max_count": 13, "clone": [13, 26, 27, 60, 103, 140, 144, 145, 149, 157, 160, 171, 198, 250, 295], "__call__": [13, 57, 73, 121, 173], "meth": [13, 16], "to_consid": 13, "reduceop": [13, 133, 134, 149], "device_count": [13, 59, 61, 93, 103, 133, 147, 243, 244, 246], "highlight": [13, 55, 90, 114, 125, 134, 135, 181, 186, 190, 192, 193, 242, 252, 253, 292], "alexi": 14, "jacq": 14, "winston": 14, "her": [14, 172], "leon": 14, "gati": 14, "alexand": [14, 221], "ecker": 14, "matthia": 14, "bethg": 14, "artist": 14, "distanc": [14, 68, 69, 72, 73, 74, 77, 78, 95, 105, 121], "d_c": 14, "d_": 14, "indispens": [14, 176], "pil": [14, 24, 46, 57, 175, 189, 195, 262], "pretrain": [14, 24, 28, 48, 80, 96, 112, 128, 132, 151, 174, 175, 182, 189, 201, 202, 206, 220, 221, 223, 225, 226, 237, 252, 253, 294, 295, 297], "resiz": [14, 23, 24, 52, 58, 150, 174, 202, 223, 225, 252, 262, 288], "unabl": [14, 18, 27, 152, 168, 192, 215], "caff": 14, "picasso": 14, "jpg": [14, 38, 57, 58, 96, 262], "reconvert": 14, "f_": [14, 176], "xl": [14, 251], "w_": [14, 112], "cl": [14, 151, 203, 208], "c": [14, 17, 18, 22, 23, 25, 29, 48, 68, 69, 90, 95, 96, 102, 103, 105, 112, 121, 132, 134, 141, 142, 144, 149, 151, 157, 160, 169, 175, 180, 181, 189, 190, 192, 193, 200, 208, 217, 226, 227, 253, 259, 263, 264, 277, 278, 284, 294], "squar": [14, 41, 52, 57, 68, 69, 72, 73, 74, 77, 78, 95, 98, 100, 103, 105, 121, 143, 144, 159, 167, 177, 181, 197], "contentloss": 14, "recomput": [14, 105, 143, 145, 167, 280], "act": [14, 48, 55, 95, 100, 103, 139, 150, 173, 177, 179, 192, 193], "gram": 14, "g_": 14, "hat": [14, 110], "counteract": 14, "pool": [14, 22, 49, 58, 98, 100, 105, 113, 122, 187, 193], "tend": [14, 20, 95, 100, 105, 205, 231], "sl": 14, "19": [14, 20, 27, 38, 49, 107, 157, 166, 177, 192, 205, 207, 231, 251, 270], "vgg": 14, "child": [14, 120, 186, 206, 246], "connect": [14, 52, 93, 98, 100, 112, 128, 132, 136, 137, 149, 154, 156, 163, 173, 174, 175, 177, 196, 200, 228, 246, 250, 266], "eval": [14, 20, 23, 24, 43, 55, 113, 122, 133, 134, 143, 151, 155, 174, 179, 182, 189, 201, 203, 206, 221, 225, 226, 227, 231, 237, 252, 253, 261, 262, 288, 295, 297], "485": [14, 23, 57, 105, 174, 175, 202, 223, 225, 262], "456": [14, 23, 57, 105, 174, 175, 202, 223, 225, 262], "406": [14, 23, 57, 105, 174, 175, 202, 223, 225, 262], "229": [14, 23, 57, 105, 174, 175, 202, 223, 225, 262], "225": [14, 23, 57, 105, 120, 174, 175, 202, 223, 225, 262], "vgg19": [14, 160], "maxpool2d": [14, 49, 52, 98, 122, 156, 187], "align": [14, 132, 181, 182, 204, 214, 220, 259], "depth": [14, 48, 58, 62, 95, 98, 103, 109, 138, 157, 192, 226, 240, 280], "immedi": [14, 22, 25, 45, 54, 58, 100, 103, 110, 149, 166, 178, 179, 186, 205], "white": [14, 18, 20, 80, 98, 100, 113, 187, 189, 231], "input_img": [14, 262], "content_img": 14, "bfg": 14, "closur": [14, 192, 247], "reevalu": 14, "exce": [14, 80, 143, 193, 261], "sphinx_gallery_thumbnail_numb": 14, "neural_style_tutori": [14, 21], "paszk": [15, 149, 177], "dziedzic": 15, "shall": [15, 52, 58], "learnabl": [15, 52, 72, 73, 121, 122, 132, 233, 282], "badfftfunct": 15, "literatur": [15, 177], "confusingli": 15, "correl": [15, 87, 100, 113, 157], "filter": [15, 28, 55, 88, 96, 105, 138, 151, 174, 182, 193, 200, 206, 279], "flip": [15, 25, 158], "wrt": [15, 144], "numpy_extensions_tutori": [15, 21], "freeli": 16, "inspir": [16, 149, 158, 163, 181, 236, 267], "v1": [16, 20, 177, 178, 180, 201, 231, 242, 264], "openai": [16, 132, 159, 176, 177, 178, 180, 295], "farama": [16, 176], "gymnasium": [16, 176, 177], "stateless": [16, 26, 152, 154], "encount": [16, 55, 134, 142, 157, 190, 192, 193, 196, 229, 280, 289, 295], "undertaken": 16, "broader": [16, 29], "wider": [16, 158], "acquaint": 16, "set_se": [16, 151, 206], "avenu": [16, 90], "backpropag": [16, 41, 42, 48, 52, 55, 80, 95, 106, 107, 108, 110, 112, 113, 121, 138, 159, 193], "_set_se": 16, "torqu": 16, "upward": 16, "posit": [16, 96, 100, 107, 132, 151, 167, 176, 177, 181, 182, 189, 192, 196, 200, 231, 262, 298], "angular": 16, "stand": [16, 90, 95, 98, 113, 159, 196, 216], "equat": [16, 58, 151, 177, 266, 271], "motion": 16, "veloc": [16, 177], "theta": [16, 80, 107, 176], "_t": [16, 159], "sin": [16, 18, 68, 69, 72, 73, 74, 77, 78, 95, 103, 121, 208, 280, 290], "theta_t": 16, "dt": 16, "rad": 16, "sec": [16, 133, 151], "gravit": 16, "mass": 16, "accord": [16, 17, 28, 36, 103, 104, 122, 157, 159, 171, 173, 177, 181, 189, 216, 233, 238, 289], "theta_": [16, 159], "001": [16, 49, 98, 122, 147, 178, 187, 252, 288], "deleg": [16, 25, 132, 223, 237], "privat": [16, 17, 27, 136, 172, 173, 213], "merg": [16, 26, 50, 96, 100, 175, 189, 252], "is_shar": 16, "new_th": 16, "plu": [16, 107], "new_thdot": 16, "neg": [16, 25, 41, 55, 96, 100, 106, 107, 113, 114, 151, 157, 169, 173, 176, 262], "discourag": [16, 45, 54, 176], "possibli": [16, 58, 135, 176, 192, 200, 290], "omit": [16, 27, 95, 120, 135, 157, 176, 196, 201, 223, 225, 226, 270, 277, 279], "agent": [16, 132, 177, 178, 180, 183], "param": [16, 23, 57, 73, 107, 121, 122, 133, 134, 135, 144, 147, 149, 152, 154, 168, 174, 179, 180, 197, 213, 247, 277, 299], "mandatori": [16, 154, 176], "domain": [16, 28, 38, 42, 55, 56, 80, 104, 118, 132, 176, 218, 280], "accur": [16, 23, 80, 93, 98, 120, 139, 156, 169, 180, 190, 215, 221, 293], "lazili": [16, 166], "costli": [16, 138, 280], "observation_spec": [16, 176], "compositespec": 16, "dictionari": [16, 42, 43, 55, 87, 112, 115, 122, 141, 166, 168, 176, 178, 179, 182, 189, 193, 204, 206, 220, 269, 282, 284], "action_spec": [16, 176], "reward_spec": [16, 176], "done_spec": 16, "input_spec": [16, 176], "state_spec": 16, "output_spec": 16, "neither": [16, 103, 197, 298], "shortcut": 16, "tensorspec": 16, "irrelev": [16, 172], "incorpor": [16, 105, 114, 132, 150, 181], "pseudo": [16, 28], "_make_spec": 16, "pendulumenv": 16, "gen_param": 16, "batch_lock": 16, "homonym": [16, 169], "check_env_spec": [16, 176], "rand_step": 16, "randomli": [16, 49, 57, 58, 77, 78, 93, 98, 100, 121, 141, 151, 159, 177, 182, 193, 206, 267], "invers": [16, 98, 103, 204, 214, 242], "showcas": [16, 27, 70, 134, 135, 163, 166, 193, 207, 222], "thdot": 16, "summar": [16, 55, 57, 113, 125, 131, 134, 139, 151, 186, 192], "_apply_transform": 16, "_call": 16, "inv": 16, "_inv_apply_transform": 16, "eventu": [16, 136, 143, 150], "out_keys_inv": 16, "unitari": 16, "sine": [16, 98, 121], "cosin": [16, 251], "raw": [16, 27, 37, 49, 55, 73, 87, 98, 121, 200, 293], "del_kei": 16, "mdp": 16, "gather": [16, 61, 96, 102, 133, 135, 137, 147, 149, 150, 156, 176, 198, 222, 236, 263], "unexplor": 16, "abil": [16, 27, 103, 113, 122, 137, 138, 149, 184, 187, 190, 196, 215, 237], "recreat": [16, 36, 48], "clip": [16, 55, 80, 98, 174, 176], "scratch": [16, 36, 48, 55, 59, 105, 106, 122, 125, 128, 132, 183, 200, 281, 284], "advanc": [17, 20, 21, 23, 27, 48, 93, 108, 111, 114, 115, 117, 118, 131, 132, 135, 147, 169, 189, 193, 196, 213, 216, 217, 221, 222, 226, 227, 231, 232, 236, 245, 247, 252, 253, 267, 280, 284, 298], "verif": [17, 179], "rapid": [17, 95, 216], "manufactur": 17, "imposs": [17, 98, 106, 166, 236], "simultan": [17, 26, 29, 36, 48, 62, 132, 139, 149, 169, 175, 280], "began": 17, "enhanc": [17, 96, 136, 140, 169, 184, 208, 217, 226, 227, 229, 238, 247, 261, 280, 295, 298], "rapidli": 17, "wrapper_custom_tensor_add": 17, "torch_fn": 17, "custom_cpu_fallback": 17, "operatorhandl": 17, "hint": [17, 22, 95, 105, 106, 110, 118, 138, 149, 178, 186, 192], "cpu_fallback": 17, "cppfunction": 17, "makefromboxedfunct": 17, "cumtomselufunct": 17, "selu": 17, "wrapper_autogradcumstom__selu": 17, "wrapper_autogradcustom__selu": 17, "autocastprivateuse1": 17, "autocast": [17, 217, 226, 227, 231, 238, 252, 288], "kernel_privateuseon": 17, "makefallthrough": 17, "backendmodul": 17, "_register_device_modul": 17, "backend_nam": 17, "get_amp_supported_dtyp": 17, "is_autocast_en": 17, "get_autocast_dtyp": 17, "set_autocast_dtyp": 17, "set_autocast_en": 17, "generatorimpl": 17, "builder": [17, 192], "register_generator_privateuse1": 17, "customgeneratorimpl": 17, "make_custom_gener": 17, "deviceindex": 17, "device_index": 17, "make_gener": 17, "make_cumstom_gener": 17, "event": [17, 26, 87, 120, 133, 134, 178, 190, 200, 270, 278, 293], "deviceguard": 17, "deviceguardimplinterfac": 17, "c10_register_guard_impl": 17, "customguardimpl": 17, "backend_meta_": 17, "extrameta": 17, "backendmeta": 17, "custombackendmetadata": 17, "unordered_map": 17, "tensorbackendmetaregistri": 17, "for_seri": 17, "for_deseri": 17, "expand": [17, 95, 109, 115, 157, 164, 187, 218, 243, 295], "timer": [17, 58, 152, 182, 231, 240, 268, 276], "ascend": [17, 58, 88, 229], "npu": [17, 221, 229], "meet": [17, 56, 58, 233, 253, 264], "usabl": [17, 122, 150, 155, 200, 281], "compli": 17, "habit": 17, "torch_npu": [17, 229], "exclus": [17, 27, 173], "rename_privateuse1_backend": 17, "register_privateuse1_backend": 17, "unsupported_dtyp": 17, "quint8": [17, 197], "generate_methods_for_privateuse1_backend": 17, "for_tensor": 17, "for_modul": 17, "for_storag": 17, "is_npu": 17, "perhap": [18, 80, 140, 173, 244], "prevent": [18, 41, 55, 61, 113, 120, 138, 141, 147, 157, 159, 169, 192, 193, 229, 263, 264, 280, 285, 298], "induc": [18, 173, 200], "bad": [18, 93, 138, 205, 280], "fullgraph": [18, 142, 190, 240, 292], "uncom": [18, 55, 57, 69, 78, 98, 102, 109, 113, 121, 171, 177], "cropped_img": 18, "img": [18, 38, 49, 96, 98, 132, 174, 187, 189, 262], "black": [18, 80, 87, 98, 100, 113, 132, 137, 139, 178, 182], "aka": [18, 158, 160, 169, 174, 196, 252, 294], "mutates_arg": 18, "led": 18, "past": [18, 55, 56, 104, 109, 192, 196], "exercis": [18, 23, 49, 149, 174, 263], "reader": [18, 110, 149, 196, 279], "region": [18, 96, 103, 139, 156, 184, 189, 195, 259, 263, 268, 280, 284, 287, 291, 293], "unus": [18, 157, 172, 223], "forgot": [18, 200], "python_custom_op": [18, 21], "pritam": 19, "damania": 19, "yi": [19, 192, 294], "wang": [19, 28, 115, 117, 118, 157, 159, 200, 227], "distributeddataparallel": [19, 61, 62, 66, 131, 133, 134, 135, 149, 172, 180, 263, 299], "paradigm": [19, 20, 66, 105, 121, 131, 179, 180, 231], "dens": [19, 20, 193, 196, 213, 218, 231], "fc": [19, 48, 159, 174, 233], "replic": [19, 22, 62, 66, 132, 133, 137, 145, 147, 149, 179, 180, 193, 246], "trainer": [19, 28, 61, 139, 145, 178, 179, 180, 231, 244], "hybrid": [19, 89, 91, 246], "pipedream": 19, "embeddingbag": [19, 22], "drive": [19, 29, 58, 95, 98, 100, 132, 159, 169, 213, 242], "respond": [19, 96, 159, 179], "amongst": [19, 193, 214], "themselv": [19, 100, 193, 215, 223], "remotemodul": 19, "kick": [19, 36, 48, 166, 178, 179, 180], "remot": [19, 66, 131, 139, 178, 179, 180, 186, 242, 247, 259, 289, 298], "hybridmodel": 19, "allreduc": [19, 87, 133, 137, 147, 172, 200, 280], "firstli": [19, 118, 157, 177], "tcp": [19, 61, 136, 145, 146, 149, 242], "init_method": [19, 147, 149, 198], "_run_train": [19, 180], "rpc_async": [19, 178, 180], "exit": [19, 154, 178, 179, 180, 200, 240, 241, 249, 291, 296, 298], "conflict": [19, 157, 192], "remote_emb_modul": 19, "rref": [19, 178, 179, 242, 247], "distributedoptim": [19, 179, 180, 242, 247], "remote_paramet": 19, "cannnot": 19, "crossentropyloss": [19, 23, 41, 49, 98, 107, 137, 171, 174, 180, 187, 202, 223, 225, 252, 288], "get_next_batch": [19, 178, 180], "jess": [20, 231], "cai": [20, 231], "seek": [20, 90, 96, 231, 245], "grain": [20, 38, 95, 134, 149, 186, 190, 231, 262, 263, 264, 279], "2n": [20, 231], "degrad": [20, 80, 231, 261], "sparsifi": [20, 132, 173, 231], "answer": [20, 41, 96, 100, 107, 149, 151, 156, 166, 182, 192, 193, 231], "tune": [20, 23, 41, 87, 105, 113, 123, 131, 132, 133, 139, 142, 174, 175, 205, 206, 217, 221, 231, 253, 267, 268, 276, 279, 284, 298], "recov": [20, 133, 134, 147, 160, 225, 231], "nearli": [20, 113, 187, 231, 264], "f1": [20, 151, 190, 206, 231], "86": [20, 98, 152, 157, 166, 175, 180, 196, 231, 251, 264], "92": [20, 231, 251, 264], "3x": [20, 69, 121, 231, 238, 263, 280], "beginn": [20, 39, 50, 51, 82, 83, 84, 85, 89, 97, 99, 108, 116, 121, 123, 132, 231, 234, 267, 272, 273, 274, 275], "to_sparse_semi_structur": [20, 231], "motiv": [20, 80, 136, 157, 179, 197, 207, 214, 215, 218, 231], "affect": [20, 96, 100, 104, 105, 144, 169, 171, 231, 280], "swap": [20, 57, 107, 137, 151, 169, 176, 196, 202, 205, 206, 218, 220, 225, 231, 277], "compress": [20, 96, 173, 213, 216, 221, 231, 253], "arrang": [20, 121, 231], "drawback": [20, 112, 192, 231, 243, 244], "2020": [20, 231], "amper": [20, 134, 163, 168, 231, 263], "cutlass": [20, 217, 231], "cusparselt": [20, 231], "milder": [20, 231], "account": [20, 56, 113, 150, 166, 169, 182, 187, 196, 206, 221, 231, 294], "retrain": [20, 231], "sweet": [20, 231], "spot": [20, 98, 102, 103, 140, 231], "2x": [20, 24, 90, 132, 144, 166, 201, 231, 251], "theoret": [20, 58, 169, 213, 231, 285], "granular": [20, 134, 157, 193, 206, 231, 270, 280, 298], "fp16": [20, 134, 160, 205, 217, 231], "resnet": [20, 48, 49, 96, 138, 174, 186, 202, 223, 225, 226, 231, 261, 280], "imagenet": [20, 49, 57, 96, 128, 174, 175, 202, 223, 225, 231, 262], "76": [20, 160, 166, 180, 196, 231, 264], "resnext": [20, 231], "101_32x8d": [20, 231], "79": [20, 49, 157, 166, 223, 231, 264, 270], "xception": [20, 231], "ssd": [20, 231, 280], "rn50": [20, 231], "coco2017": [20, 231], "bbap": [20, 231], "24": [20, 23, 38, 49, 98, 107, 157, 175, 196, 231, 251, 264], "maskrcnn": [20, 231], "fairseq": [20, 231], "en": [20, 25, 107, 154, 182, 189, 231], "de": [20, 22, 26, 182, 231], "wmt14": [20, 231], "bleu": [20, 231], "squad": [20, 231], "91": [20, 98, 180, 231, 251, 264], "workflow": [20, 23, 40, 87, 92, 93, 114, 132, 133, 193, 216, 222, 228, 231, 267, 284], "perspect": [20, 27, 109, 176, 231, 298], "subproblem": [20, 231], "bmatrix": [20, 110, 231], "handoff": [20, 231], "anticip": [20, 231], "area": [20, 96, 100, 187, 195, 205, 216, 231, 262], "colab": [20, 22, 28, 29, 40, 45, 54, 99, 102, 113, 132, 149, 150, 151, 158, 174, 176, 177, 189, 193], "pip": [20, 24, 28, 56, 87, 96, 102, 115, 117, 151, 159, 174, 175, 177, 186, 189, 190, 195, 200, 205, 221, 237, 251, 253, 262, 264, 266, 270, 278, 281, 282, 283, 285, 292, 298], "panda": [20, 38, 57, 80, 189], "hug": [20, 157], "face": [20, 49, 57, 58, 80, 157, 223, 295], "token": [20, 55, 112, 134, 137, 141, 171, 181, 182, 196, 206, 231, 280, 295], "val": [20, 23, 26, 134, 174, 175, 202, 223, 225, 231], "segment": [20, 132, 196, 205, 231], "text": [20, 38, 49, 58, 80, 90, 96, 106, 107, 109, 110, 112, 131, 132, 134, 140, 141, 149, 151, 164, 169, 176, 177, 182, 186, 189, 196, 201, 222, 231, 259, 262, 284, 295], "wikipedia": [20, 154, 231], "articl": [20, 38, 231], "score": [20, 55, 96, 106, 110, 112, 120, 151, 181, 182, 195, 196, 198, 206, 231, 262, 295], "fair": [20, 105, 218, 231], "lowest": [20, 133, 173, 231], "l1": [20, 93, 173, 231], "ao": [20, 23, 197, 201, 202, 205, 221, 223, 225, 226, 227, 231], "satisfi": [20, 139, 220, 231, 233, 280], "anytim": [20, 231], "pruner": [20, 231], "update_mask": [20, 231], "shot": [20, 178, 231, 295], "wouldn": [20, 112, 133, 150, 231], "squash_mask": [20, 231], "quickstart": [20, 36, 37, 38, 39, 40, 41, 43, 45, 46, 132, 231], "28x": [20, 231], "amen": [20, 231], "spent": [20, 87, 181, 186, 231, 264, 267, 270, 285], "delta": [20, 157, 177, 231, 264, 279], "exact": [20, 105, 122, 143, 181, 192, 196, 200, 206, 223, 225, 231, 240], "78": [20, 49, 98, 231, 264], "53": [20, 49, 98, 160, 166, 231, 251, 270], "44": [20, 38, 157, 180, 231], "09": [20, 55, 157, 180, 231, 251], "93": [20, 120, 166, 180, 231, 251, 264, 270], "49": [20, 160, 166, 180, 206, 231, 264], "15": [20, 27, 28, 38, 50, 80, 98, 100, 107, 128, 174, 187, 189, 195, 231, 234, 251, 264, 270], "54": [20, 38, 98, 160, 264], "71x": 20, "35": [20, 137, 160, 234, 251, 253], "74": [20, 49, 166, 180, 206, 251, 264, 270], "23x": 20, "72": [20, 166, 175, 264, 270], "71": [20, 23, 25, 49, 57, 157, 166, 180], "59": [20, 98, 166, 175, 189, 264, 270], "41": [20, 133, 175, 264, 270], "22x": 20, "286": [20, 160, 189, 231], "65": [20, 38, 57, 180, 195, 196, 250, 264], "247": [20, 107, 111, 180], "63": [20, 98, 166, 261, 270], "14x": 20, "46": [20, 49, 151, 157, 160, 166, 175], "02x": 20, "ye": [20, 56, 107, 151, 166, 292], "47": [20, 49, 93, 98, 160, 251, 264, 270], "68": [20, 57, 98, 151, 157, 264], "18x": [20, 231], "36": [20, 98, 152, 166, 175, 251], "13x": 20, "159": 20, "22": [20, 98, 107, 157, 160, 166, 180, 251, 264], "142": [20, 251], "23": [20, 49, 53, 98, 101, 107, 157, 180, 251, 264, 270, 279], "12x": [20, 196], "sparsesemistructuredtensor": [20, 231], "000": [20, 21, 23, 24, 28, 38, 40, 44, 68, 69, 70, 72, 74, 75, 96, 99, 101, 114, 117, 119, 120, 122, 123, 139, 155, 159, 160, 161, 183, 186, 187, 189, 193, 201, 204, 218, 232, 234, 236, 262, 263, 264, 266, 267, 270, 276, 278, 279, 280, 281, 282, 283], "semi_structured_spars": [20, 21], "00": [21, 38, 44, 49, 53, 75, 79, 91, 98, 101, 111, 119, 120, 123, 157, 166, 180, 183, 189, 205, 208, 232, 251, 270, 276, 287], "014": 21, "mb": [21, 23, 44, 53, 75, 79, 91, 101, 111, 119, 120, 123, 133, 151, 183, 202, 206, 223, 225, 232, 261, 270, 276, 287, 299], "torchrl": [21, 132, 150, 159, 183], "ddpg": [21, 132], "pendulum": [21, 132, 176], "scipi": [21, 49, 132, 144, 190], "acceler": [21, 37, 42, 45, 54, 55, 56, 63, 66, 68, 80, 105, 117, 121, 128, 132, 140, 169, 218, 222, 232, 238, 241, 251, 252, 267, 280], "bert": [21, 100, 132, 133, 221, 222, 226, 261, 267], "semi": [21, 132, 196, 222], "sparsiti": [21, 112, 132, 173, 196, 213, 215, 222, 232], "onnx": [21, 90, 132], "super_resolution_with_onnxruntim": [21, 24], "supervis": [21, 107, 132, 184, 189], "usb": [21, 132, 175], "usb_semisup_learn": [21, 28], "embeddingplann": [22, 132], "conda": [22, 27, 87, 96, 102, 149, 157, 200, 205, 222, 253, 262, 278, 279, 298], "cudatoolkit": 22, "sudo": [22, 186, 237], "rm": [22, 242], "miniconda3": [22, 26, 279], "py37_4": 22, "sh": [22, 147, 237, 250, 259, 270], "anaconda": [22, 87, 96, 149, 278], "chmod": 22, "fbgemm": [22, 23, 193, 197, 201, 202, 261], "ipython": [22, 120], "cp": [22, 198, 237], "restart": [22, 27, 96, 102, 146, 177], "newli": [22, 128, 149, 247], "python37": 22, "dynload": 22, "enviro": 22, "spmd": [22, 137, 244], "mimic": [22, 23, 105, 174, 205, 206, 213], "launcher": 22, "embeddingbagcollect": 22, "bag": [22, 38, 40, 187, 193], "ebc": [22, 193], "4096": [22, 193, 204, 251], "parameterconstraint": 22, "placement": [22, 135, 221, 298], "evenli": [22, 95], "intra": [22, 25, 134, 137, 151, 246], "interconnect": [22, 266], "nvlink": [22, 137, 242], "data_parallel": 22, "planner": 22, "embedding_typ": 22, "embeddingcomputekernel": 22, "shardingtyp": 22, "dict": [22, 55, 57, 166, 176, 192, 195, 220, 227, 228, 243, 244, 247, 249, 263, 269], "large_table_cnt": 22, "small_table_cnt": 22, "large_t": 22, "embeddingbagconfig": 22, "large_table_": 22, "embedding_dim": [22, 100], "num_embed": 22, "feature_nam": 22, "large_table_feature_": 22, "poolingtyp": 22, "small_tabl": 22, "small_table_": 22, "small_table_feature_": 22, "gen_constraint": 22, "sharding_typ": 22, "table_wis": 22, "large_table_constraint": 22, "small_table_constraint": 22, "mimick": 22, "single_rank_execut": 22, "embeddingbagcollectionshard": [22, 193], "model_parallel": 22, "embeddingshardingplann": 22, "topologi": [22, 151, 193, 206, 244, 246, 252, 259], "moduleshard": 22, "shardingenv": 22, "init_distributed_single_host": 22, "pyre": 22, "fixm": 22, "set_devic": [22, 59, 61, 133, 134, 147, 198, 207, 243, 244, 246], "compute_devic": 22, "pg": [22, 200], "sharder": [22, 193], "shardingplan": 22, "collective_plan": 22, "sharded_model": 22, "from_process_group": 22, "spmd_sharing_simul": 22, "get_context": [22, 149], "exitcod": 22, "factor": [22, 24, 100, 128, 169, 174, 177, 178, 190, 193, 203, 205, 243, 267], "medium": [22, 136, 195, 280], "large_table_0": 22, "parametershard": 22, "compute_kernel": 22, "batched_fus": 22, "sharding_spec": 22, "enumerableshardingspec": 22, "shardmetadata": 22, "shard_offset": 22, "shard_siz": 22, "large_table_1": 22, "small_table_0": 22, "small_table_1": 22, "finer": [22, 38, 270], "halv": [22, 120], "row_wis": 22, "512": [22, 134, 171, 192, 231, 238, 252, 264, 270], "imbal": [22, 280], "vertic": [22, 25], "column_wis": 22, "unfortu": 22, "batched_dens": 22, "raghuraman": [23, 151, 174], "krishnamoorthi": [23, 151, 174], "jerri": [23, 201, 202, 203, 223, 226, 228], "zhang": [23, 201, 202, 203, 223, 226, 227, 228, 243, 244, 246], "decreas": [23, 42, 55, 80, 88, 105, 113, 137, 140, 193, 216], "mobilenetv2": [23, 222, 225], "np": [23, 49, 57, 98, 106, 120, 151, 174, 175, 180, 187, 189, 202, 206, 214, 223, 225, 231, 262, 279, 295], "dataload": [23, 36, 37, 39, 40, 41, 42, 43, 45, 46, 49, 50, 58, 61, 80, 93, 105, 123, 133, 134, 140, 149, 151, 169, 171, 174, 179, 186, 187, 189, 202, 206, 221, 223, 225, 252, 253, 254, 268, 280, 288], "filterwarn": [23, 189, 202, 223, 225], "deprecationwarn": [23, 202, 223, 225], "seed": [23, 58, 80, 98, 105, 133, 134, 149, 151, 177, 178, 180, 202, 206, 223, 225], "manual_se": [23, 98, 103, 107, 133, 134, 149, 151, 152, 177, 178, 198, 202, 206, 223, 225, 231, 299], "191009": [23, 202, 223, 225], "floatfunct": 23, "quantstub": [23, 202, 250, 261], "dequantstub": [23, 202, 250, 261], "relu6": 23, "_make_divis": 23, "divisor": 23, "min_valu": 23, "tf": [23, 102], "divis": [23, 103, 192], "tensorflow": [23, 102, 106, 108, 121], "blob": [23, 27, 118, 133, 155, 186, 197, 202, 237], "slim": [23, 121], "mobilenet": [23, 132, 175], "new_v": 23, "round": [23, 118, 134, 178, 264, 267, 279], "convbnrelu": 23, "in_plan": 23, "out_plan": 23, "kernel_s": [23, 98, 133, 197, 250, 253], "momentum": [23, 48, 49, 70, 74, 93, 98, 104, 113, 121, 122, 143, 149, 174, 178, 187, 193, 197, 225, 247, 250, 252, 253, 282, 283, 288], "inplac": [23, 133, 174, 201, 220, 231, 250, 261], "invertedresidu": 23, "inp": [23, 174, 179, 192, 217, 245], "oup": 23, "expand_ratio": 23, "hidden_dim": [23, 100], "use_res_connect": 23, "pw": 23, "dw": 23, "conv": [23, 58, 100, 143, 155, 156, 160, 174, 179, 201, 202, 227, 228, 250, 259, 270], "skip_add": 23, "num_class": [23, 178, 187, 189, 195], "width_mult": 23, "inverted_residual_set": 23, "round_nearest": 23, "v2": [23, 105, 125, 150, 175, 193, 229, 238, 243, 249], "width": [23, 48, 49, 52, 100, 103, 139, 163, 166, 189, 195, 295], "input_channel": 23, "last_channel": 23, "1280": [23, 195], "96": [23, 157, 180, 251], "160": [23, 151, 180, 189, 250, 264, 270], "320": [23, 253], "valueerror": [23, 247, 295], "invert": [23, 132, 176, 214], "residu": [23, 137], "output_channel": 23, "quant": [23, 174, 197, 206, 223, 227, 228, 250, 261], "dequant": [23, 174, 197, 202, 205, 206, 223, 226, 227, 228, 250, 253, 261], "isinst": [23, 135, 202, 206, 207, 225, 228, 231], "init": [23, 26, 27, 107, 136, 229, 233, 250], "kaiming_normal_": 23, "fan_out": 23, "zeros_": 23, "elif": [23, 151, 171, 206, 247], "ones_": 23, "normal_": 23, "bn": [23, 143, 156, 174, 197, 201, 225, 250], "numer": [23, 24, 45, 55, 77, 78, 103, 105, 106, 115, 121, 135, 139, 198, 202, 206, 222, 223, 225, 226, 231, 232, 263, 280], "fuse_model": [23, 174], "is_qat": [23, 197, 225, 226], "fuse_modul": [23, 174], "fuse_modules_qat": 23, "averagemet": [23, 202, 223, 225], "fmt": [23, 202, 223, 225], "avg": [23, 202, 223, 225, 251, 270], "__str__": [23, 193, 202, 223, 225], "fmtstr": [23, 202, 223, 225], "__dict__": [23, 202, 221, 223, 225, 226, 227, 277], "topk": [23, 202, 223, 225, 253, 297], "maxk": [23, 202, 223, 225], "pred": [23, 113, 133, 137, 151, 174, 179, 187, 202, 206, 223, 225, 253], "correct_k": [23, 202, 223, 225], "mul_": [23, 202, 223, 225, 247], "criterion": [23, 49, 52, 98, 174, 180, 182, 187, 202, 223, 225, 252, 278, 288], "neval_batch": [23, 225], "top1": [23, 202, 223, 225, 253], "acc": [23, 174, 189, 202, 223, 225], "2f": [23, 133, 175, 178, 180, 202, 223, 225, 261], "top5": [23, 202, 223, 225, 297], "cnt": [23, 202, 223, 225], "acc1": [23, 202, 223, 225], "acc5": [23, 202, 223, 225], "load_model": [23, 202, 223, 225], "model_fil": [23, 202, 223, 225], "state_dict": [23, 43, 49, 55, 59, 61, 93, 133, 134, 135, 147, 151, 173, 174, 190, 202, 204, 223, 225, 243, 244, 252, 261, 263, 266, 268, 276, 277, 281, 284], "weights_onli": [23, 43, 49, 122, 135, 147, 189, 202, 223, 225, 253], "load_state_dict": [23, 43, 49, 59, 93, 104, 122, 135, 147, 174, 189, 202, 223, 225, 243, 244, 253, 263, 268, 276, 281], "print_size_of_model": [23, 151, 202, 206, 223, 225], "getsiz": [23, 151, 202, 206, 223, 225, 261], "data_path": [23, 93, 202, 223, 225], "prepare_data_load": [23, 202, 223, 225], "randomresizedcrop": [23, 57, 202, 223, 225], "randomhorizontalflip": [23, 57, 174, 202, 223, 225], "dataset_test": [23, 202, 223, 225], "centercrop": [23, 174, 202, 223, 225, 262], "train_sampl": [23, 202, 223, 225], "randomsampl": [23, 151, 202, 206, 223, 225], "test_sampl": [23, 202, 223, 225], "sequentialsampl": [23, 151, 202, 206, 223, 225], "train_batch_s": [23, 202, 223, 225], "data_loader_test": [23, 202, 223, 225, 226, 227], "eval_batch_s": [23, 151, 202, 206, 223, 225], "saved_model_dir": [23, 202, 223, 225], "float_model_fil": [23, 202, 223, 225], "mobilenet_pretrained_float": 23, "scripted_float_model_fil": [23, 202], "mobilenet_quantization_script": 23, "scripted_quantized_model_fil": 23, "mobilenet_quantization_scripted_quant": 23, "float_model": [23, 201, 202, 206, 220, 221, 223, 225, 226], "fusion": [23, 87, 132, 156, 157, 193, 202, 205, 217, 225, 247, 250, 252, 280, 284, 287, 296], "baselin": [23, 25, 28, 96, 105, 189, 205, 223, 231, 262, 264, 279], "un": [23, 103, 182], "num_eval_batch": [23, 225], "sophist": [23, 121, 176], "num_calibration_batch": 23, "mymodel": [23, 197], "estim": [23, 52, 57, 58, 100, 139, 176, 177, 182, 193, 205, 264, 285], "qconfig": [23, 174, 197, 201, 202, 203, 206, 223, 227, 228, 250, 261], "default_qconfig": [23, 202], "calibr": [23, 169, 197, 201, 203, 221, 225, 226, 227, 253], "56": [23, 98, 160, 166, 175, 231, 264, 270, 298], "4x": [23, 134, 201, 202, 267], "x86": [23, 197, 201, 202, 217, 222, 238, 261], "basi": [23, 134, 151], "histogram": [23, 220, 223, 278], "per_channel_quantized_model": 23, "get_default_qconfig": [23, 201, 202, 250, 261], "67": [23, 49, 98, 120, 157, 197, 206, 251], "qat": [23, 174, 197, 226], "train_one_epoch": [23, 225], "ntrain_batch": [23, 225], "avgloss": [23, 225], "5f": [23, 225], "start_tim": [23, 225], "global_avg": [23, 225], "qat_model": 23, "get_default_qat_qconfig": [23, 261], "prepare_qat": [23, 174, 261], "freez": [23, 48, 128, 174, 222, 225, 226, 227, 232, 252, 280], "num_train_batch": [23, 225], "nepoch": [23, 225], "disable_observ": [23, 225], "intrins": [23, 197], "freeze_bn_stat": 23, "quantized_model": [23, 151, 201, 202, 206, 221, 223, 225], "confirm": [23, 24, 93, 96, 113, 114, 134, 158, 178, 297], "allud": [23, 80], "run_benchmark": 23, "img_load": 23, "elaps": [23, 133, 182, 206], "num_batch": [23, 149], "enumer": [23, 49, 93, 98, 104, 133, 135, 137, 174, 175, 179, 186, 187, 231, 252, 253, 288], "num_imag": 23, "0f": [23, 174, 253], "61": [23, 38, 49, 120, 160, 231, 251], "dynamo_export": 24, "torchdynamo": [24, 132, 142, 192, 208, 221, 226, 227, 228], "technologi": [24, 66, 105, 132, 149, 196, 247, 284], "torchscript": [24, 115, 117, 123, 132, 155, 160, 193, 206, 222, 232, 261, 270, 284], "platform": [24, 27, 115, 147, 149, 186, 238, 251, 259, 280, 288, 297, 298], "mac": [24, 151, 237], "prove": 24, "onnxruntim": [24, 115, 117], "resolut": [24, 100, 189], "video": [24, 41, 48, 49, 59, 61, 62, 95, 96, 98, 100, 102, 103, 104, 125, 131, 132, 145, 146, 186, 280], "wide": [24, 37, 66, 95, 100, 113, 136, 137, 140, 141, 149, 151, 172, 182, 205, 247, 262, 280], "superresolut": 24, "shi": 24, "et": [24, 28, 55, 58, 80, 149, 173, 182], "al": [24, 28, 55, 58, 80, 173, 182], "upscal": 24, "ycbcr": 24, "ordinarili": [24, 263], "torch_model": 24, "batchnorm": [24, 58, 61, 122, 155, 160, 202, 221, 223, 225, 226, 227, 280, 282], "ax": [24, 57, 107, 110, 132, 174, 182, 183, 187], "dynamic_ax": 24, "torch_out": 24, "super_resolut": 24, "modelproto": 24, "bundl": [24, 290], "ml": [24, 40, 80, 103, 105, 131, 132, 139, 193, 222, 249, 251], "proto": 24, "checker": 24, "check_model": 24, "onnx_model": 24, "rtol": [24, 152], "1e": [24, 73, 93, 100, 121, 135, 143, 152, 174, 178, 180, 197, 198, 231, 250], "03": [24, 49, 98, 166, 179, 180, 189, 198, 251, 279], "atol": [24, 152, 198, 231], "05": [24, 25, 80, 98, 134, 180, 197, 250, 251], "contact": [24, 134, 236], "pronounc": [24, 169], "famou": [24, 28, 80], "224x224": [24, 96, 175], "cb": 24, "cr": 24, "grayscal": [24, 38, 150, 159], "blue": [24, 48, 134, 137, 259], "red": [24, 137, 142, 187, 220, 259], "chroma": 24, "sensit": [24, 105, 145, 154, 193, 202], "human": [24, 55, 80, 96, 141, 151, 159, 182, 189, 200], "mobil": [24, 64, 65, 105, 197, 208, 210, 211, 219, 222, 237, 239, 250, 257, 258, 261, 268, 284], "deploi": [24, 60, 115, 132, 139, 146, 173, 175], "cloud": [24, 40, 60, 99, 113, 115, 298], "inferenc": [24, 43], "azur": [24, 186], "servic": [24, 55, 175, 252, 285, 298], "inter": [25, 132, 137, 146, 163, 196, 246, 280], "workload": [25, 27, 105, 120, 131, 132, 135, 146, 147, 186, 193, 202, 208, 217, 223, 243, 246, 247, 251, 252, 284, 298], "fragment": [25, 280], "fork": [25, 177, 298], "fn": [25, 142, 149, 154, 157, 190, 207, 240, 290, 293], "fut": [25, 178, 180], "x_normal": 25, "x_parallel": 25, "async": [25, 178, 180, 193, 243], "sort": [25, 29, 100, 106, 110, 120, 151, 175, 196, 206, 270, 280], "parlanc": 25, "revers": [25, 48, 55, 95, 135, 154, 163, 167, 175, 182, 193], "bidirectionalrecurrentlstm": 25, "cell_f": 25, "input_s": [25, 200], "hidden_s": [25, 55], "cell_b": 25, "output_f": 25, "x_rev": 25, "output_b": 25, "output_b_rev": 25, "lstmensembl": 25, "n_model": 25, "modulelist": [25, 167], "demo": [25, 29, 50, 132, 172, 186, 251, 261], "took": [25, 95, 149, 156, 166, 181, 190, 200, 293], "future_f": 25, "stuff": 25, "worth": [25, 27, 58, 166, 169, 179, 267], "profil": [25, 87, 123, 132, 133, 169, 181, 183, 217, 220, 251, 264, 268, 276, 280, 284], "chrome": [25, 95, 169, 181, 186, 270], "prof": [25, 120, 181, 251, 270], "export_chrome_trac": [25, 181], "json": [25, 120, 169, 181, 186, 245, 270, 294], "navig": [25, 66, 186, 187, 259], "button": [25, 56, 58, 115, 186, 259], "timelin": [25, 166, 186, 259], "horizont": [25, 132, 284, 287], "opportun": [25, 90, 115, 150, 193, 247], "breviti": [25, 27, 196, 213, 267, 277], "intro": [25, 39, 40, 44, 61, 107, 108, 131, 150, 187, 241, 249], "tracer": [25, 171], "member": [26, 72, 121, 174, 222, 229], "portion": [26, 87, 166, 169, 171, 173, 200, 251, 259, 279], "custom_class": 26, "mystackclass": 26, "customclasshold": 26, "stack_": 26, "push": [26, 58, 80, 100, 105, 158, 205, 236, 250], "pop": [26, 100, 151, 206, 231], "pop_back": 26, "intrusive_ptr": [26, 172, 264, 279], "make_intrus": [26, 172], "elem": [26, 277], "smart": [26, 192], "class_": 26, "my_class": 26, "contructor": 26, "yourclass": 26, "ref": [26, 223], "unari": 26, "add_librari": [26, 27], "cmake_cxx_standard": 26, "custom_class_project": 26, "rh": 26, "devtoolset": 26, "torchbind_tutori": 26, "j": [26, 27, 36, 48, 49, 80, 95, 98, 105, 106, 110, 135, 151, 182, 200], "libcustom_class": 26, "filesystem": [26, 98, 149, 204], "treatment": [26, 189, 215, 216, 267], "cpp_inference_exampl": 26, "foobarbaz": 26, "tostr": 26, "add_subdirectori": [26, 27], "drill": [26, 95, 279], "75": [26, 27, 98, 105, 128, 133, 174, 267], "momfoobarbaz": 26, "incred": 26, "make_custom_class": 26, "tocustomclass": 26, "iscustomclass": 26, "export_attr": 26, "scripted_foo": 26, "runtimeerror": [26, 136, 172, 175, 295], "__torch__": 26, "def_pickl": 26, "pushivalueimpl": 26, "pickler": 26, "__getstate__": 26, "__setstate__": 26, "pickl": [26, 43, 93, 113, 122, 166, 200, 264], "salient": 26, "wherea": [26, 113, 142, 187, 189, 205, 214, 215, 227], "confus": [26, 27, 107, 113, 140, 154, 189, 193, 205, 214, 215, 216, 223], "manipulate_inst": 26, "trycustomop": 26, "bar": [26, 55, 87, 179, 189, 190, 202, 223, 233, 259], "relax": [26, 167, 295], "standalon": [26, 59, 198, 263, 292], "blend": [26, 27], "smoothli": [26, 27], "subsequ": [27, 80, 96, 105, 122, 133, 140, 150, 178, 180, 182, 190, 200, 205, 226, 227, 280, 283, 289, 298], "resort": 27, "emb": [27, 110, 112, 180], "opencv": [27, 49], "vision": [27, 28, 42, 49, 57, 96, 100, 123, 132, 166, 222, 262, 295, 297], "mat": 27, "warpperspect": 27, "warp_perspect": 27, "warp": 27, "image_mat": 27, "cv": [27, 28, 218], "col": [27, 38, 174], "cv_32fc1": 27, "warp_mat": 27, "output_mat": 27, "dsize": 27, "output_tensor": 27, "from_blob": 27, "ptr": 27, "short": [27, 29, 87, 100, 103, 106, 108, 111, 131, 141, 149, 167, 169, 176, 182, 184, 192, 226, 267, 280, 283], "opencv2": 27, "hpp": [27, 172], "alongsid": [27, 154, 187, 189, 193, 263], "goodi": 27, "hardcod": [27, 143, 192, 228], "strikingli": 27, "flat": [27, 135], "scope": [27, 100, 103, 109, 120, 138, 142, 192, 259, 285], "dealloc": [27, 186, 280], "invalid": [27, 214, 215, 216, 247, 264, 280], "quot": [27, 128], "metaprogram": 27, "experiment": [27, 133, 139, 155, 180, 197, 198, 200, 207, 221, 253, 278, 280], "target_compile_featur": 27, "cxx_std_14": 27, "opencv_cor": 27, "opencv_imgproc": 27, "libwarp_perspect": 27, "sensat": 27, "0x7f618fc6fa50": 27, "3218": 27, "4611": 27, "4636": 27, "3746": 27, "0978": 27, "5005": 27, "3245": 27, "0169": 27, "4458": 27, "1862": 27, "1692": 27, "noteworthi": [27, 251], "frozen": [27, 36, 48, 135, 159, 174, 206, 217, 234], "prim": [27, 206], "revel": 27, "drop": [27, 56, 100, 102, 115, 145, 166, 180, 205, 251], "26": [27, 38, 49, 157, 159, 160, 166, 175, 180, 251], "restrict": [27, 29, 55, 90, 149, 186, 190, 192, 197, 236], "script_method": [27, 90], "42": [27, 151, 177, 180, 206, 264], "tensortobool": 27, "block0": 27, "block1": 27, "21": [27, 73, 98, 107, 120, 175, 251, 264, 270, 279], "sent": [27, 107, 149, 169, 178, 192, 242], "wire": 27, "dlopen": 27, "example_app": 27, "cxx_range_for": 27, "throw": [27, 95, 103, 136, 178], "errorreport": 27, "mayb": [27, 109, 112, 152, 192, 222], "subdirectori": [27, 58, 195], "prefix": [27, 134, 138, 142, 150, 151, 186, 190, 192, 200, 205, 206, 264, 279, 298, 299], "inconveni": [27, 213], "altogeth": [27, 163, 215], "nb": [27, 104, 236], "impress": [27, 157, 192], "opencv_photo": 27, "happi": [27, 155, 156], "4125": 27, "8262": 27, "5345": 27, "6111": [27, 264], "3997": 27, "4683": 27, "5969": 27, "0850": 27, "0698": 27, "4597": 27, "0926": 27, "5727": 27, "9319": 27, "4834": 27, "1747": 27, "0162": 27, "9521": 27, "6269": 27, "lastli": [27, 93, 132, 166, 192], "driver": [27, 98, 186], "infrastructur": [27, 66], "vener": 27, "beforehand": [27, 163, 228, 261], "is_python_modul": 27, "extra_ldflag": 27, "lopencv_cor": 27, "lopencv_imgproc": 27, "approxim": [27, 55, 96, 134, 143, 156, 159, 163, 173, 177, 206, 251, 266, 280], "0x7f3e0f840b10": 27, "op_sourc": 27, "cpp_sourc": [27, 264], "rout": [27, 142, 157, 192], "quirki": 27, "with_opt": 27, "no_python_abi_suffix": 27, "bottom": [27, 106, 186, 189, 192, 259], "suffix": [27, 45, 54, 87, 157], "tag": [27, 57, 100, 108, 112, 192, 204, 269, 278], "0x7ff51c5b7bd0": 27, "hao": 28, "chen": [28, 192], "unifi": [28, 132, 143, 220, 245, 262, 295], "ssl": 28, "modular": [28, 38, 122, 190, 282], "fixmatch": 28, "defixmatch": 28, "speech": [28, 80, 100, 106, 108, 112, 132, 141, 280], "light": [28, 29, 58, 98, 102, 103, 143, 262], "vit": [28, 295], "strong": [28, 106, 192, 216, 295], "unlabel": [28, 103], "confid": [28, 58, 96, 98, 104, 107, 139, 176, 177, 187, 263], "threshold": [28, 55, 87, 120, 139, 176, 180, 189, 251, 280], "statu": [28, 136, 139, 142, 180, 192, 294], "absorb": 28, "gaussian": [28, 58, 139, 176], "overcom": [28, 114], "quantiti": [28, 105, 132, 137, 158, 163, 168], "qualiti": [28, 159, 182], "trade": [28, 139, 166, 217, 267], "afford": 28, "nlp": [28, 98, 100, 107, 110, 112, 125, 132, 151, 183, 206, 218, 226, 263, 267, 280], "audio": [28, 38, 49, 132, 153, 185, 188], "semilearn": 28, "get_dataset": 28, "get_data_load": 28, "weak": 28, "get_net_build": 28, "get_algorithm": 28, "get_config": 28, "hyper": [28, 181, 298], "87": [28, 49, 98, 120, 180, 217, 251, 264], "lb_imb_ratio": 28, "ulb_imb_ratio": 28, "microsoft": [28, 40, 117, 118, 151, 186, 208], "kihyuk": 28, "sohn": 28, "yidong": 28, "jamesre": 29, "fb": 29, "michael": [29, 106, 240, 241, 249, 263, 291, 296], "suo": 29, "rev2": 29, "hierarchi": 29, "3x4": 29, "my_cel": 29, "redefin": 29, "mycel": 29, "succinctli": [29, 167], "mydecisiong": 29, "tape": 29, "rewind": 29, "tracedmodul": [29, 90], "ir": [29, 157, 203, 247, 290], "commonli": [29, 46, 55, 74, 93, 100, 105, 121, 171, 175, 182, 186, 197, 247, 252, 271, 280, 285], "acquir": [29, 103, 122, 173, 176, 180], "traced_cel": 29, "laden": 29, "submodul": [29, 55, 90, 100, 114, 135, 167, 181, 229, 233, 250, 261, 267], "branch": [29, 95, 114, 192, 195, 226, 237, 252], "nowher": 29, "faithfulli": [29, 114, 213], "analysi": [29, 93, 95, 104, 132, 133, 156, 157, 181, 186, 189, 192, 198, 205, 259, 267, 279, 295], "decis": [29, 95, 108, 111, 150, 169, 192, 213, 214, 216, 238, 280, 290, 296], "inlin": [29, 58, 95, 98, 102, 104, 142, 155, 157, 213, 217, 222, 234, 285], "freestand": 29, "neurip": 29, "1hiicg6jrkbnr5hvk2": 29, "vnmi88vi9puzej": 29, "intro_to_torchscript_tutori": [29, 123, 234], "audio_data_augmentation_tutori": [30, 32], "audio_datasets_tutori": 31, "audio_feature_extractions_tutori": 33, "audio_io_tutori": 34, "frac": [36, 48, 69, 90, 95, 106, 107, 109, 112, 121, 138, 144, 149, 176, 177, 196], "partial": [36, 48, 93, 95, 109, 122, 133, 134, 135, 137, 138, 142, 150, 158, 198, 247, 252, 281, 284], "leaf": [36, 48, 95, 190, 203], "retain_graph": [36, 142], "surround": [36, 169], "mark": [36, 55, 137, 142, 160, 177, 178, 192, 202, 203, 215, 259], "acycl": [36, 48], "dag": 36, "chain": [36, 48, 95, 103, 107, 108, 135, 143, 157, 178, 215, 228], "accumul": [36, 48, 52, 55, 58, 95, 98, 107, 109, 144, 159, 166, 177, 178, 179, 180, 263, 267, 283], "vec": [36, 48, 95, 107, 217], "langl": 36, "x_1": [36, 109, 163], "x_n": [36, 58], "rangl": 36, "y_1": [36, 109], "y_m": 36, "ccc": [36, 48, 95], "y_": [36, 48, 95, 106], "x_": [36, 48, 95], "cdot": [36, 48, 58, 95, 112, 138], "vdot": [36, 48, 95], "ddot": [36, 48, 95], "v_1": 36, "v_m": 36, "life": [36, 105, 140, 141, 243], "autogradqs_tutori": [36, 39, 44, 82], "compris": [37, 38, 58, 122], "fashionmnist": [37, 38, 40, 42, 46, 187], "mtia": [37, 42, 45, 68, 80, 103, 121, 128], "xpu": [37, 42, 45, 68, 80, 103, 121, 128, 227, 252, 270], "neuralnetwork": 37, "minibatch": [37, 38, 102, 113, 140, 152, 168, 171], "28x28": [37, 113, 187, 266], "784": [37, 102, 113, 152, 187], "nonlinear": 37, "phenomena": 37, "seq_modul": 37, "logit": [37, 41, 105, 151, 206, 251], "infti": [37, 177], "parameter": [37, 231], "preview": 37, "buildmodel_tutori": [37, 39, 44], "messi": 38, "primit": [38, 42, 121, 132, 137, 158, 169, 193, 196, 200, 223, 238], "fashion": [38, 55, 102, 104, 117, 134, 137, 139, 179, 184, 187, 189, 190, 193, 252], "zalando": 38, "60": [38, 49, 98, 115, 134, 140, 141, 160, 174, 175, 180, 182, 187, 192, 251, 270], "internet": [38, 175], "target_transform": [38, 42, 46], "training_data": [38, 110], "test_data": [38, 107], "4m": 38, "5k": 38, "366kb": 38, "229k": 38, "696kb": 38, "950k": 38, "22mb": 38, "83m": 38, "02": [38, 58, 98, 157, 166, 180, 208, 251], "70mb": 38, "38": [38, 73, 98, 120, 180, 251, 279], "5mb": [38, 98], "9mb": [38, 98], "73": [38, 49, 73, 157, 180, 231, 264], "2m": [38, 49, 98], "0mb": [38, 98, 299], "95": [38, 98, 139, 166, 180, 197, 251], "0m": 38, "8mb": [38, 49, 98], "29": [38, 98, 151, 166, 175, 180, 264], "326kb": 38, "42m": 38, "359kb": 38, "06": [38, 251], "681kb": 38, "852k": 38, "43mb": 38, "93m": 38, "12mb": 38, "07mb": 38, "15k": 38, "labels_map": 38, "shirt": [38, 40, 187], "trouser": [38, 40, 187], "pullov": [38, 40, 187], "dress": [38, 40, 187], "coat": [38, 40, 187], "sandal": [38, 40, 187], "sneaker": [38, 40, 187], "ankl": [38, 40, 187], "boot": [38, 40, 175, 187], "figsiz": [38, 174, 187], "sample_idx": [38, 231], "randint": [38, 57, 58, 135, 151, 152, 171, 206, 252], "add_subplot": [38, 187], "titl": [38, 80, 140, 169, 174, 182, 189], "img_dir": 38, "csv": [38, 55, 57, 134], "annotations_fil": 38, "pd": [38, 189], "io": [38, 55, 57, 102, 132, 178, 181, 189, 201, 222, 261, 262, 284], "decode_imag": 38, "customimagedataset": 38, "img_label": 38, "read_csv": 38, "img_path": 38, "iloc": 38, "tshirt1": 38, "tshirt2": 38, "ankleboot999": 38, "tupl": [38, 45, 54, 87, 98, 100, 103, 105, 110, 112, 115, 151, 177, 192, 195, 198, 202, 206, 216, 223, 225, 228, 267, 279, 297], "read_imag": 38, "reshuffl": 38, "overfit": [38, 98, 113, 122, 141, 174], "train_dataload": 38, "shuffl": [38, 42, 49, 57, 61, 98, 104, 113, 133, 134, 149, 174, 175, 179, 186, 187, 198, 253], "test_dataload": 38, "train_featur": 38, "train_label": 38, "929": [38, 44], "data_tutori": [38, 39, 44], "quickstart_tutori": [39, 42, 44], "tensorqs_tutori": [39, 44, 45, 85], "tensor_tutori": [39, 51, 53, 54], "transforms_tutori": [39, 44, 46], "autograd_tutori": [39, 48, 51, 53], "optimization_tutori": [39, 41, 44], "saveloadrun_tutori": [39, 43, 44], "sphx_glr_beginner_basics_autogradqs_tutori": [39, 44], "sphx_glr_beginner_basics_buildmodel_tutori": [39, 44], "sphx_glr_beginner_basics_intro": [39, 44], "sphx_glr_beginner_basics_saveloadrun_tutori": [39, 44], "sphx_glr_beginner_basics_transforms_tutori": [39, 44], "sphx_glr_beginner_basics_optimization_tutori": [39, 44], "sphx_glr_beginner_basics_quickstart_tutori": [39, 44], "sphx_glr_beginner_basics_tensorqs_tutori": [39, 44], "sphx_glr_beginner_basics_data_tutori": [39, 44], "suraj": [40, 59, 60, 61, 62, 120, 145, 146, 159], "subramanian": [40, 59, 60, 61, 62, 120, 145, 146, 159], "juarez": 40, "cassi": 40, "breviu": 40, "dmitri": 40, "soshnikov": 40, "ari": 40, "bornstein": 40, "belong": [40, 140, 151, 193], "favorit": [40, 99, 149, 156], "id": [40, 87, 99, 142, 147, 151, 178, 179, 180, 189, 192, 193, 231, 243, 244, 298], "walkthrough": [41, 48, 54, 87, 120], "3blue1brown": [41, 48], "unpredict": [41, 95, 147], "jump": [41, 80, 110, 114, 115, 117, 118, 159, 290], "untrain": 41, "dissimilar": [41, 103, 112], "regress": [41, 113, 151, 184, 206, 264, 278], "nllloss": [41, 107], "classif": [41, 49, 58, 80, 93, 96, 98, 103, 104, 105, 107, 128, 132, 133, 141, 151, 175, 184, 195, 196, 206, 237, 283], "logsoftmax": 41, "deposit": [41, 48], "train_loop": 41, "test_loop": 41, "warmstart": [41, 268, 276, 284], "torchtext": [42, 56, 98, 104, 132], "torchaudio": [42, 56, 98, 104, 132, 134, 175, 186, 205, 227], "cifar": [42, 49, 98, 187], "coco": [42, 195], "conduct": [42, 96, 157, 172, 205], "unpickl": [43, 122, 200], "fail": [43, 95, 103, 114, 122, 157, 169, 175, 177, 181, 190, 192, 200, 222, 225, 228, 229, 252, 263, 295], "inconsist": [43, 122, 157], "legaci": [43, 136], "checkpoint": [43, 55, 93, 135, 145, 166, 171, 204, 205, 252, 263, 268, 276, 282, 284], "tip": [43, 58, 99, 112, 187, 268, 276, 284], "944": [44, 251], "beginner_bas": 44, "ndarrai": [45, 46, 54, 103, 189], "elimin": [45, 115, 120, 143, 152, 157, 158, 175, 192, 196, 203, 218, 229, 247], "overridden": [45, 54, 150, 269], "1200": [45, 264], "breez": [45, 54], "subtli": [45, 54], "y1": [45, 195, 278], "y2": 45, "y3": 45, "wise": [45, 54, 80, 98, 103, 107, 137, 149, 157, 160, 163, 192, 193, 280, 294], "z1": [45, 157], "z2": 45, "z3": 45, "aggreg": [45, 48, 98, 120, 159, 189, 214, 270], "operand": [45, 95, 192], "denot": [45, 107, 110, 193, 213, 214, 218], "t_": [45, 54], "problemat": [45, 54, 157, 167, 280], "hot": [46, 55, 80, 100, 112, 140, 141, 150, 182], "floattensor": [46, 103], "intens": [46, 90, 157, 169, 238, 280, 298], "scatter_": [46, 178], "prop": 48, "proportion": [48, 166], "travers": [48, 180, 253], "height": [48, 52, 100, 103, 166, 189, 195, 259, 295], "3a": [48, 175], "9a": 48, "2b": 48, "dq": [48, 223], "bf": 48, "external_grad": 48, "finetun": [48, 132, 138, 166, 183], "unfrozen": 48, "exclusionari": 48, "autodiff": [48, 132, 158], "pillow": [49, 98], "librosa": 49, "cython": 49, "nltk": 49, "spaci": 49, "viz": [49, 96, 262], "huge": [49, 107, 112, 121, 137, 147, 150], "airplan": [49, 98, 105], "automobil": [49, 98, 105], "bird": [49, 98], "deer": [49, 98], "dog": [49, 98, 105, 195, 262], "frog": [49, 98], "hors": [49, 98], "truck": [49, 98, 105], "3x32x32": 49, "color": [49, 58, 96, 98, 100, 102, 103, 139, 159, 160, 175, 187, 189, 195], "32x32": [49, 52, 98, 105, 115, 187], "extrem": [49, 112, 160, 193], "pilimag": 49, "brokenpipeerror": 49, "trainset": [49, 98, 187], "trainload": [49, 93, 98, 187], "testset": [49, 98, 187], "testload": [49, 98, 187], "plane": [49, 98, 136], "car": [49, 98], "170m": [49, 98, 251], "688k": 49, "86mb": 49, "52m": 49, "7mb": [49, 98], "31": [49, 98, 134, 157, 228, 251, 264, 270, 279], "9m": [49, 98], "94": [49, 139, 223, 251, 270], "3mb": [49, 98], "43": [49, 98, 166, 251, 264], "5m": [49, 98], "102mb": 49, "55": [49, 98, 160, 223, 264, 298], "107mb": 49, "39": [49, 133, 180, 196, 251, 264], "66": [49, 133, 166, 251, 264], "110mb": 49, "112mb": 49, "90": [49, 98, 151, 166, 180, 251], "113mb": 49, "102m": 49, "114mb": 49, "113m": 49, "115mb": 49, "125m": 49, "80": [49, 93, 98, 139, 140, 160, 180, 267, 295], "137m": 49, "116mb": 49, "148m": [49, 251], "160m": 49, "fun": [49, 55, 114, 115, 117, 118, 176, 267], "unnorm": [49, 98, 187], "npimg": [49, 98, 187], "datait": [49, 98, 187], "make_grid": [49, 98, 174, 187], "fc1": [49, 98, 122, 133, 152, 179, 187, 206, 253], "fc2": [49, 98, 122, 133, 152, 179, 187, 206, 253], "84": [49, 57, 98, 120, 122, 159, 166, 187], "fc3": [49, 98, 122, 152, 187], "flatten": [49, 52, 73, 105, 113, 121, 133, 137, 152, 174, 179, 192, 251], "entropi": [49, 58, 98, 100, 104, 137, 283], "running_loss": [49, 98, 174, 187], "2000": [49, 73, 98, 105, 121, 187, 189, 192, 200, 264, 299], "1999": [49, 73, 98], "mini": [49, 52, 55, 58, 98, 102, 110, 113, 168, 175, 187, 253], "5d": [49, 98], "180": [49, 180, 192, 251, 264], "867": 49, "6000": [49, 98], "655": 49, "8000": [49, 98, 279], "565": 49, "10000": [49, 58, 98, 171, 180, 264, 279], "501": 49, "12000": [49, 98], "462": 49, "395": [49, 120, 180], "377": 49, "325": [49, 251], "297": [49, 251], "288": 49, "290": [49, 180], "cifar_net": 49, "learnt": 49, "truth": [49, 80, 115, 195, 222], "okai": 49, "groundtruth": 49, "wasn": [49, 106, 109, 192], "energi": [49, 55], "chanc": [49, 55, 105, 159], "hmmm": 49, "correct_pr": 49, "classnam": 49, "total_pr": 49, "correct_count": 49, "1f": [49, 151, 187, 206], "40": [49, 98, 133, 159, 160, 166, 180, 182, 196, 207, 217, 220, 231, 251, 264, 294], "69": [49, 98, 166, 206, 264], "plai": [49, 55, 58, 105, 107, 132, 176, 183, 226, 227, 298], "chat": [49, 55, 182], "del": [49, 135, 166, 171, 204, 207], "389": [49, 53], "cifar10_tutori": [49, 51, 53], "sung": 50, "kim": 50, "jenni": 50, "kang": 50, "mytensor": 50, "my_tensor": [50, 122], "parallelli": 50, "getitem": 50, "cnn": [50, 105, 132, 163, 167, 168, 184, 189, 195, 226, 252, 261], "capsul": 50, "monitor": [50, 113, 149], "output_s": [50, 200], "former_torchi": 50, "parallelism_tutori": 50, "data_parallel_tutori": [50, 51, 53, 84], "neural_networks_tutori": [51, 52, 53], "gentl": [51, 53, 62, 63, 131], "glimps": 52, "convnet": [52, 96, 150, 159, 174, 179], "learning_r": [52, 73, 105, 121, 151], "lenet": [52, 80, 98, 102, 104, 173, 253], "nsampl": 52, "nchannel": 52, "least": [52, 80, 103, 122, 139, 141, 147, 159, 169, 175, 182, 192, 244, 247, 264, 267, 299], "clear": [52, 57, 80, 95, 106, 107, 112, 138, 142, 157, 169, 180, 189, 207, 215, 264], "sub_": 52, "nesterov": [52, 122], "398": 53, "beginner_blitz": 53, "003": [53, 54, 55, 58, 80, 90, 91, 101, 102, 104, 105, 109, 111, 123, 128, 141, 154, 157, 158, 169, 181, 183, 190, 192, 195, 196, 205, 215, 232, 287, 293], "matthew": [55, 92, 122], "inkawhich": [55, 58, 80, 90, 92, 122], "movi": [55, 56, 96], "cornel": [55, 56], "dialog": [55, 56], "artifici": [55, 105, 266], "intellig": 55, "onlin": [55, 150, 151, 159, 176, 179], "helpdesk": 55, "bot": 55, "predefin": [55, 105, 113, 150, 228, 253, 280], "compani": 55, "IT": 55, "teach": [55, 58, 105, 182], "boom": 55, "hello": [55, 107, 166], "am": [55, 109, 141, 182], "hospit": 55, "lawyer": 55, "friend": [55, 166], "arrest": 55, "kid": 55, "sorri": 55, "san": 55, "francisco": [55, 113], "goodby": 55, "luong": [55, 182], "jointli": [55, 182], "acknowledg": [55, 149], "borrow": [55, 180], "yuan": 55, "kuei": 55, "wu": [55, 136, 198, 207, 217], "ywk991112": 55, "sean": [55, 140, 141, 182], "robertson": [55, 140, 141, 182], "spro": 55, "floydhub": 55, "textutil": 55, "__": [55, 68, 80, 105, 121, 128, 189, 267], "reformat": 55, "rich": [55, 259], "charact": [55, 112, 132, 145, 164, 176, 182, 183], "220": [55, 180], "579": [55, 160], "exchang": [55, 115, 117, 134, 149, 182, 186], "292": [55, 93], "035": 55, "617": 55, "713": [55, 98], "utter": [55, 56], "divers": 55, "variat": [55, 104, 113, 144, 196, 213, 234, 264, 279], "formal": [55, 213, 244], "sentiment": 55, "datafil": 55, "tab": [55, 102, 104, 182, 187, 259], "sentenc": [55, 100, 106, 107, 110, 112, 141, 149, 151, 182, 196, 218], "jsonl": [55, 56], "loadlinesandconvers": 55, "lineid": 55, "characterid": 55, "conversationid": 55, "movieid": 55, "extractsentencepair": 55, "formatted_movie_lin": 55, "unescap": 55, "delimit": 55, "busi": [55, 141, 298], "vocabulari": [55, 98, 100, 112, 137, 140, 151, 218, 280], "implicit": [55, 95, 135, 192, 259, 280], "discret": [55, 252], "voc": 55, "addword": 55, "addsent": 55, "infrequ": 55, "unicod": [55, 140, 141, 182], "ascii": [55, 112, 140, 141, 182], "unicodetoascii": 55, "letter": [55, 140, 141, 182], "lowercas": [55, 113, 182], "punctuat": [55, 182], "normalizestr": 55, "aid": [55, 122, 193, 269], "max_length": [55, 151, 206, 231], "filterpair": 55, "stackoverflow": [55, 140, 141, 182, 264], "518232": [55, 140, 141, 182], "2809427": [55, 140, 141, 182], "tactic": 55, "benefici": [55, 100, 131, 177, 217, 229, 280, 283, 298], "soften": 55, "difficulti": [55, 176], "min_count": 55, "massag": 55, "accommod": 55, "shorter": [55, 57, 113, 182, 186, 213], "eos_token": 55, "english": [55, 107, 110, 140, 164, 182], "indexesfromsent": 55, "zeropad": 55, "inputvar": 55, "outputvar": 55, "pad_token": [55, 151], "batch2traindata": 55, "bunch": [55, 140, 141, 259, 294], "aforement": [55, 87, 105, 196, 253, 290], "brain": 55, "sutskev": 55, "discov": [55, 118, 149, 179, 196, 229], "accomplish": [55, 58, 140, 149, 163, 233, 246, 264, 279], "jeddy92": 55, "ts_seq2seq_intro": 55, "invent": [55, 58, 176], "cho": 55, "2014": [55, 58], "bidirect": [55, 132, 150, 151], "gru": [55, 100, 140, 141, 182], "colah": 55, "2015": [55, 105], "fp": [55, 93, 132, 163], "unpack": [55, 151, 203, 206, 237], "pack_padded_sequ": 55, "pad_packed_sequ": 55, "input_seq": 55, "input_length": [55, 134], "n_layer": [55, 171], "num_direct": 55, "sole": [55, 186], "combat": [55, 112], "bahdanau": [55, 182], "groundwork": 55, "h_t": [55, 110], "attn": [55, 182], "softmax": [55, 100, 105, 110, 112, 113, 140, 175, 178, 180, 187, 196, 218, 251, 297], "unidirect": 55, "input_step": 55, "last_hidden": 55, "encoder_output": 55, "num_word": 55, "masknllloss": 55, "clever": [55, 107], "teacher": [55, 105, 132, 182], "teacher_forcing_ratio": [55, 182], "instabl": [55, 182], "craft": [55, 80, 112, 141], "explod": [55, 100], "essenc": [55, 109], "nan": [55, 214], "overshoot": 55, "steep": 55, "cliff": 55, "goodfellow": [55, 58, 80], "2016": 55, "www": [55, 151, 182, 195], "deeplearningbook": 55, "sos_token": 55, "realiti": [55, 58, 80, 109, 113, 174, 181, 279], "tie": 55, "trainit": [55, 182], "n_iter": 55, "explanatori": 55, "lift": [55, 236], "tarbal": 55, "NOT": [55, 90, 122, 142, 144, 145, 147, 166], "decoder_output": 55, "greedysearchdecod": 55, "searcher": 55, "evaluateinput": 55, "press": [55, 58], "gracefulli": [55, 59, 179, 244], "prompt": [55, 56, 205, 295], "regardless": [55, 103, 104, 158, 169, 179], "attn_model": 55, "concat": [55, 109, 202, 228], "loadfilenam": 55, "save_dir": [55, 189], "model_nam": [55, 134, 221, 226, 227, 231, 252], "corpus_nam": [55, 56], "encoder_n_lay": 55, "decoder_n_lay": 55, "_checkpoint": [55, 134], "tar": [55, 122], "checkpoint_it": 55, "folk": 55, "congratul": [55, 118, 138, 140, 193, 266, 281, 282, 283], "tailor": [55, 149, 169, 193, 298], "cool": [55, 58, 166, 168, 236], "chatbot_tutori": [55, 123], "wen": [56, 190, 192, 293], "uninstal": [56, 151], "reinstal": 56, "torchdata": 56, "chatbot": [56, 123], "browser": [56, 102, 104, 115, 186, 245], "subfold": 56, "visit": [56, 205, 253], "in_": 56, "_colab": 56, "_name": 56, "mount": [56, 200], "gdrive": 56, "upload": [56, 245], "rerun": [56, 142, 166], "evolv": [56, 157, 163], "t4": 56, "sasank": [57, 128, 174], "chilamkurthi": [57, 128, 174], "scikit": [57, 151], "facial": 57, "pose": [57, 245, 246], "landmark": 57, "dlib": 57, "image_nam": 57, "part_0_x": 57, "part_0_i": 57, "part_1_x": 57, "part_1_i": 57, "part_2_x": 57, "part_67_x": 57, "part_67_i": 57, "0805personali01": 57, "83": [57, 251, 279], "98": [57, 157, 180, 251], "134": 57, "1084239450_e76e00b7e7": 57, "70": [57, 160, 180, 231, 264], "236": 57, "257": [57, 111, 264], "312": [57, 160, 295], "person": [57, 193, 195], "img_nam": 57, "__len__": [57, 113, 140, 149, 195], "__getitem__": [57, 113, 140, 149, 195], "randomcrop": [57, 174], "crop": [57, 98, 139, 184, 195], "tsfm": 57, "transformed_sampl": 57, "safer": [57, 264], "stick": [57, 149, 160], "lose": [57, 59, 103, 105, 159, 193, 267, 284], "collate_fn": 57, "indent": [57, 264], "imagefold": [57, 58, 98, 174], "ant": [57, 128, 174], "xxy": 57, "jpeg": 57, "xxz": 57, "bee": [57, 128, 174], "nsdf3": 57, "asd932_": 57, "data_transform": [57, 174], "hymenoptera_dataset": 57, "hymenoptera_data": [57, 174], "dataset_load": 57, "data_loading_tutori": [57, 123], "nathan": [58, 80, 90, 92], "celebr": [58, 132], "pictur": [58, 80, 135, 137, 182], "thorough": 58, "shed": [58, 262], "spend": [58, 87, 166, 264, 270], "sake": [58, 150, 173, 177, 281, 282], "ian": 58, "constantli": [58, 80, 177], "outsmart": 58, "equilibrium": 58, "perfect": [58, 95, 147, 215], "notat": [58, 80], "chw": [58, 175], "3x64x64": 58, "thought": [58, 88, 214, 279], "latent": [58, 112], "p_": 58, "p_g": 58, "minimax": 58, "logd": 58, "underset": 58, "mathbb": [58, 90, 163, 177], "sim": 58, "radford": 58, "unsupervis": 58, "drawn": [58, 113, 176], "rgb": [58, 98, 105, 159, 175, 189, 262], "volum": [58, 133], "manualse": 58, "dataroot": 58, "image_s": [58, 166, 295], "spatial": [58, 96, 98, 100, 132, 183, 195], "64x64": 58, "nc": [58, 217], "nz": 58, "ngf": 58, "ndf": 58, "num_epoch": [58, 174, 225], "0002": 58, "ngpu": 58, "celeb": 58, "img_align_celeba": 58, "celeba": 58, "188242": 58, "173822": 58, "284702": 58, "537394": 58, "stdev": 58, "weights_init": 58, "reiniti": 58, "criteria": 58, "netg": 58, "netd": 58, "critic": [58, 90, 135, 146, 169, 198, 243, 247, 261, 279], "downsampl": [58, 98, 159], "promot": 58, "healthi": 58, "bceloss": 58, "ell": [58, 182], "l_1": 58, "l_n": 58, "quad": [58, 177], "y_n": 58, "bce": 58, "gt": [58, 120], "fixed_nois": 58, "establish": [58, 267], "Be": [58, 95], "somewhat": [58, 169], "collaps": 58, "ganhack": 58, "secondli": 58, "loss_d": 58, "loss_g": 58, "versu": [58, 80, 132, 140, 238], "anim": [58, 98], "music": 58, "dcgan_faces_tutori": [58, 123], "mingpt": [59, 60, 61, 62, 145, 146], "aw": [59, 61, 133, 145, 146, 284], "p3": [59, 60, 61, 69, 121, 145, 146], "8xlarg": [59, 61], "youtub": [59, 60, 61, 62, 95, 96, 98, 100, 102, 103, 104, 132, 145, 146], "failur": [59, 114, 146, 147, 157, 192, 200, 241, 295], "disrupt": [59, 200, 293], "suscept": [59, 246], "elast": [59, 134, 147, 246], "attempt": [59, 95, 103, 107, 134, 169, 192, 200, 238, 269, 293], "minutia": 59, "multinod": [59, 145, 193], "load_snapshot": 59, "snapshot_path": 59, "train_step": 59, "should_checkpoint": 59, "save_snapshot": 59, "membership": [59, 146], "intervent": [59, 105, 206, 290], "diff": [59, 61, 87, 132, 223, 264, 279], "multigpu": [59, 61, 146], "multigpu_torchrun": 59, "envvari": 59, "ddp_setup": [59, 61], "12355": [59, 61, 133, 147, 243, 244], "local_rank": [59, 134, 146, 147, 151, 171, 200, 206], "gpu_id": [59, 61, 146], "_save_snapshot": 59, "model_st": 59, "epochs_run": 59, "_load_snapshot": 59, "max_epoch": 59, "_run_epoch": [59, 61], "total_epoch": [59, 61], "save_everi": [59, 61], "nproc_per_nod": [59, 134, 135, 147, 171, 200, 246], "migrat": [59, 61, 280], "fault": [60, 61, 62, 93, 145, 146, 169], "toler": [60, 61, 62, 93, 95, 145, 146], "cluster": [60, 102, 134, 139, 145, 146, 147, 149, 244, 246, 289], "torchrun": [60, 66, 134, 135, 145, 146, 171, 198, 200, 246], "amazon": 60, "ec2": [60, 133], "gentli": 60, "stat": [61, 134, 142, 176, 186, 193, 225, 270, 279], "replica": [61, 62, 66, 133, 135, 147, 149, 299], "convert_sync_batchnorm": 61, "single_gpu": 61, "mytraindataset": 61, "distributedsampl": [61, 62, 133, 134, 151, 206], "destroy_process_group": [61, 133, 134, 136, 147, 171, 198, 243, 244], "excess": [61, 87, 137, 190, 252, 263], "train_data": 61, "train_dataset": [61, 105, 134, 231, 252, 288], "set_epoch": [61, 133, 134], "b_sz": 61, "_run_batch": 61, "ckp": 61, "_save_checkpoint": 61, "load_train_obj": 61, "prepare_dataload": 61, "shorthand": 61, "ring": [62, 137, 198], "older": [62, 120, 121, 152, 168, 169, 177, 205], "destroi": [62, 95, 154], "soumith": [63, 149], "chintala": [63, 149], "scientif": [63, 100, 103, 121], "cifar10": [63, 93, 98, 186, 252, 283, 288], "executorch": [64, 65, 132, 210, 211, 219, 223, 235, 237, 239, 255, 256, 257, 258, 260, 295], "Will": [66, 135], "constabl": [66, 135], "categor": [66, 87, 102, 150, 178, 180, 193], "fsdp": [66, 135, 137, 145, 243, 244, 246], "tp": [66, 200, 246], "pp": 66, "dtensor": [66, 137, 245, 284], "devicemesh": [66, 137, 284], "reshard": [66, 135, 244], "mesh": [66, 131, 135, 137, 246], "recip": [66, 120, 132, 212, 237, 240, 242, 245, 247, 249, 259, 262, 263, 264, 265, 266, 267, 269, 270, 277, 281, 282, 283, 285, 287, 289, 290, 291, 292, 293, 294, 295, 297, 299], "c10d": [66, 147, 172, 200, 280], "all_gath": [66, 133, 134, 149, 172], "p2p": 66, "isend": [66, 149], "guidelin": [66, 280], "fullyshardeddataparallel": [66, 133, 134, 135, 137, 243, 244, 246], "torchtitan": [66, 171, 198], "polynomi": [68, 69, 70, 72, 73, 74, 77, 78, 121], "pi": [68, 69, 72, 73, 74, 77, 78, 95, 121, 132, 177], "euclidean": [68, 69, 72, 73, 74, 77, 78, 95, 105, 121], "polynomial_autograd": 68, "bx": [69, 121], "cx": [69, 107, 121], "p_3": [69, 121], "5x": [69, 121], "legendr": [69, 121], "polynomial_custom_funct": 69, "strang": [70, 90, 121], "fifth": [70, 121], "tough": [70, 121], "dynamic_net": [70, 75], "polynomial_modul": [72, 75], "99": [73, 121, 180], "739": 73, "563232421875": 73, "199": 73, "496": 73, "3849182128906": 73, "299": [73, 189], "334": [73, 98], "30804443359375": 73, "399": 73, "226": [73, 103], "2323760986328": 73, "499": 73, "154": 73, "12876892089844": 73, "599": 73, "105": 73, "99846649169922": 73, "699": 73, "85237884521484": 73, "799": 73, "52": [73, 160, 251], "36949920654297": 73, "899": [73, 157, 297], "00376510620117": 73, "999": [73, 187], "391084671020508": 73, "1099": [73, 107], "95456886291504": 73, "1199": 73, "64162826538086": 73, "1299": 73, "749560356140137": 73, "1399": 73, "808740615844727": 73, "1499": 73, "505276679992676": 73, "1599": 73, "629130363464355": 73, "1699": 73, "039702415466309": 73, "1799": 73, "64280891418457": 73, "1899": 73, "375327110290527": 73, "194887161254883": 73, "012148887850344181": 73, "8414947390556335": 73, "002095884643495083": 73, "09116175770759583": 73, "linspac": [73, 95, 121], "xx": [73, 121, 157], "flaten": [73, 121], "mse": [73, 100, 105, 121], "loss_fn": [73, 121, 147, 171, 178, 243, 244, 299], "y_pred": [73, 121, 251], "linear_lay": [73, 121], "519": [73, 75, 264], "polynomial_nn": [73, 75], "polynomial_optim": [74, 75], "beginner_examples_nn": 75, "polynomial_numpi": [77, 79], "biggest": [78, 200], "polynomial_tensor": [78, 79], "004": 79, "beginner_examples_tensor": 79, "appreci": [80, 106], "overlook": [80, 264], "secur": [80, 186], "vulner": 80, "surpris": [80, 167], "impercept": 80, "perturb": [80, 96], "drastic": [80, 192, 294], "overarch": 80, "misclassif": 80, "alter": [80, 122, 205, 267, 271, 282], "har": 80, "remark": [80, 190], "mathbf": 80, "nabla_": [80, 107], "007": 80, "misclassifi": 80, "gibbon": 80, "clearli": [80, 139, 200, 213, 214], "pretrained_model": [80, 189], "fgsm_attack": 80, "clean": [80, 133, 134, 140, 147, 166, 171, 193, 198, 213, 220], "data_grad": 80, "_imag": 80, "_grad": 80, "strength": [80, 187, 220], "_data": 80, "trend": [80, 88, 186], "curv": [80, 186, 187], "linearli": 80, "lunch": 80, "BUT": [80, 109], "percept": 80, "tradeoff": [80, 132, 138, 139, 149, 176, 285], "evid": [80, 136], "defend": 80, "nip": 80, "defens": 80, "competit": [80, 152, 168, 298], "defenc": 80, "dirti": 80, "fgsm_tutori": [80, 123], "torchvision_tutori": [81, 183, 195], "nn_tutori": [83, 113, 123], "blitz": [84, 115, 140, 141, 182, 187], "anupam": [87, 88], "bhatnagar": [87, 88], "holistictraceanalysi": 87, "env_nam": [87, 176], "deactiv": 87, "trace_dir": 87, "trace_analysi": 87, "traceanalysi": 87, "engag": [87, 222], "datafram": [87, 139, 189], "time_spent_df": 87, "get_temporal_breakdown": 87, "enqueu": 87, "slowdown": [87, 134, 138], "consecut": [87, 141, 150, 159, 169, 175, 189, 298], "insuffici": [87, 177], "delai": [87, 147, 178, 193], "stall": [87, 200, 298], "gap": [87, 90], "nanosecond": 87, "consecutive_kernel_delai": 87, "get_idle_time_breakdown": 87, "idle_time_df": 87, "show_idle_interval_stat": 87, "percentag": [87, 173, 218], "visualize_pctg": 87, "comm": 87, "comp": 87, "mem": [87, 120, 270], "proport": [87, 166], "pie": [87, 166], "chart": [87, 102, 292], "kernel_type_metrics_df": 87, "kernel_metrics_df": 87, "get_gpu_kernel_breakdown": 87, "bottleneck": [87, 120, 134, 137, 146, 166, 169, 178, 186, 190, 240, 259], "plotli": [87, 96, 139], "hover": [87, 139, 175], "pan": 87, "num_kernel": 87, "duration_ratio": 87, "preced": [87, 95, 103, 143, 150, 155, 202, 221, 223, 226, 227], "lab": [87, 187, 205], "image_render": 87, "jupyterlab": 87, "gpu_kernel_breakdown": 87, "tflop": 87, "oversubscrib": 87, "unresolv": [87, 215], "extent": [87, 103], "overlap_df": 87, "get_comm_comp_overlap": 87, "h2d": [87, 242], "d2h": [87, 242], "d2d": 87, "memcpi": 87, "memset": 87, "outstand": [87, 226], "generate_trace_with_count": 87, "_with_count": 87, "screenshot": [87, 259], "get_memory_bw_summari": 87, "get_queue_length_summari": 87, "get_memory_bw_time_seri": 87, "get_queue_length_time_seri": 87, "mem_bw_summari": 87, "queue_len_summari": 87, "mem_bw_seri": 87, "queue_len_seri": 87, "get_queue_length_seri": 87, "25th": 87, "50th": 87, "75th": 87, "percentil": 87, "cudalaunchkernel": 87, "cudamemcpyasync": 87, "cudamemsetasync": 87, "kernel_info_df": 87, "get_cuda_kernel_launch_stat": 87, "outlier": [87, 177], "microsecond": [87, 158, 181, 250, 264], "cutoff": 87, "runtime_cutoff": 87, "launch_delay_cutoff": 87, "occasion": [88, 179, 182], "hta": [88, 186], "tracediff": 88, "cumul": [88, 177], "compare_trac": 88, "ops_diff": 88, "absent": 88, "visualize_counts_diff": 88, "visualize_duration_diff": 88, "ten": [88, 98, 102, 105], "df": 88, "compare_traces_output": 88, "sort_valu": 88, "diff_count": 88, "largest": [88, 113, 189, 206], "diff_dur": 88, "differer": 88, "overshadow": 88, "profilerstep": [88, 157], "loc": [88, 176, 263], "trace_diff_demo": 88, "learning_hybrid_frontend_through_example_tutori": [89, 90, 91], "hybrid_frontend": 89, "introduction_to_hybrid_frontend_tutori": 89, "shini": 90, "enjoi": [90, 159], "aquaint": 90, "bridg": [90, 245], "refin": [90, 192], "gradual": [90, 166], "proven": [90, 216, 226], "resouc": 90, "consumpt": [90, 98, 100, 102, 104, 120, 134, 137, 139, 157, 169, 173, 186, 280, 284, 299], "discrep": [90, 221], "interwork": 90, "intrus": [90, 166], "decor": [90, 95, 118, 131, 142, 159, 178, 190, 280, 293], "broken": [90, 109], "epsilon": [90, 143, 150, 176, 177], "biggl": 90, "lfloor": 90, "prod_": 90, "biggr": 90, "rfloor": 90, "hline": 90, "190": [90, 180, 189, 264], "4377": 90, "59051": 90, "accomod": [90, 145], "beginner_hybrid_frontend": 91, "dramat": [93, 113], "industri": [93, 96], "slight": [93, 136, 144, 251, 265], "trial": [93, 139, 263], "train_cifar": 93, "data_dir": [93, 134, 151, 174, 206], "l2": [93, 100, 173], "get_checkpoint": 93, "as_directori": 93, "checkpoint_dir": [93, 243, 244], "pkl": 93, "rb": 93, "checkpoint_st": 93, "start_epoch": 93, "net_state_dict": 93, "optimizer_state_dict": [93, 122, 243, 244, 252], "luckili": [93, 157, 192, 193, 215, 264], "fraction": [93, 264], "checkpoint_data": 93, "tempfil": [93, 147], "temporarydirectori": 93, "wb": [93, 166], "dump": [93, 157, 166, 238, 245], "from_directori": 93, "val_loss": [93, 134], "val_step": 93, "wast": [93, 186, 218, 222, 233, 264, 269, 271, 285], "loguniform": [93, 264], "ashaschedul": 93, "functool": [93, 133, 134], "gpus_per_tri": 93, "resources_per_tri": 93, "num_sampl": [93, 134], "checkpoint_at_end": 93, "000668163": 93, "31479": 93, "0977": 93, "0331514": 93, "31605": 93, "0983": 93, "000150295": 93, "30755": 93, "1023": 93, "0128248": 93, "66912": 93, "4391": 93, "00464561": 93, "7316": 93, "3463": 93, "00031556": 93, "19409": 93, "1736": 93, "00574329": 93, "85679": 93, "3368": 93, "00325652": 93, "30272": 93, "0984": 93, "000342987": 93, "76044": 93, "003734": 93, "53101": 93, "4761": 93, "0037339984519545164": 93, "5310075663924216": 93, "4737": 93, "hyperparameter_tuning_tutori": [93, 123], "tensorboard": [95, 96, 97, 98, 99, 100, 103, 104, 132, 139, 183, 268, 270, 276, 284], "rigidli": 95, "sign": [95, 167, 227], "contextu": 95, "nudg": [95, 98, 104], "calculu": 95, "next_funct": 95, "machineri": [95, 264], "co": [95, 112, 208, 270, 280], "ins": [95, 190], "ideal_output": 95, "layer2": [95, 174], "blow": 95, "b1": 95, "b2": 95, "temporarili": 95, "enable_grad": 95, "sin_": 95, "handi": [95, 98, 113, 149, 159, 187], "bake": [95, 155], "hessian": [95, 132, 183, 236], "twice": [95, 113, 144, 169, 205, 251, 264, 270, 299], "jvp": [95, 154, 158], "vjp": [95, 158, 163, 236], "vhp": [95, 132, 183], "hvp": [95, 132, 183], "autogradyt_tutori": [95, 97, 101], "latin": 96, "increasingli": [96, 196], "ai": [96, 107, 108, 113, 133, 139, 151, 159, 182, 200, 217, 238, 244, 252, 262, 280], "review": [96, 145, 151, 164, 174, 192, 213, 214, 216, 229, 237, 252, 285], "neuron": [96, 105, 262], "analag": 96, "ablat": 96, "permut": [96, 105, 160, 175, 189, 203, 249], "valuabl": [96, 105, 182, 218, 249], "certainli": [96, 156, 214, 216, 267], "attr": [96, 172, 238, 262], "widget": 96, "toolset": 96, "flask": 96, "renam": [96, 197, 202, 223, 225], "virtual": [96, 169, 172, 208, 269], "recogn": [96, 100, 172, 228, 266], "visualize_image_attr": 96, "integrated_gradi": 96, "strongest": [96, 98, 100, 104], "visualize_image_attr_multipl": [96, 262], "heat": [96, 175], "upsampl": 96, "interpol": 96, "layerattribut": 96, "teapot": 96, "trilobit": 96, "fossil": 96, "attributionvisu": 96, "imagefeatur": 96, "heatmap": 96, "captumyt": [96, 101], "introyt": 97, "introyt1_tutori": [97, 98, 101], "tensors_deeper_tutori": [97, 101, 103], "modelsyt_tutori": [97, 100, 101], "tensorboardyt_tutori": [97, 101, 102], "trainingyt_tutori": 97, "captumyt_tutori": 97, "captum": [97, 268, 276, 284], "sphx_glr_beginner_introyt_introyt_index": [97, 101], "sphx_glr_beginner_introyt_modelsyt_tutori": [97, 101], "sphx_glr_beginner_introyt_autogradyt_tutori": [97, 101], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [97, 101], "sphx_glr_beginner_introyt_captumyt": [97, 101], "sphx_glr_beginner_introyt_trainingyt": [97, 101], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [97, 101], "sphx_glr_beginner_introyt_introyt1_tutori": [97, 101], "5x3": 98, "int16": [98, 103, 223, 267], "helpfulli": 98, "prng": 98, "1729": 98, "r1": 98, "r2": 98, "na": [98, 183], "r3": 98, "nshould": 98, "3126": 98, "3791": 98, "3087": 98, "4216": 98, "0691": 98, "2332": 98, "4047": 98, "nabsolut": 98, "trigonometr": [98, 103], "ninvers": 98, "asin": 98, "singular": [98, 167, 181, 294], "decomposit": [98, 118, 135, 157], "ndetermin": 98, "det": 98, "nsingular": 98, "svd": 98, "naverag": 98, "std_mean": 98, "nmaximum": 98, "9956": 98, "2232": 98, "6593": 98, "4775": 98, "2251": 98, "3961": 98, "7199": 98, "5703": 98, "return_typ": 98, "8353": 98, "5497": 98, "1793": 98, "4836": 98, "8851": 98, "4654": 98, "7217": 98, "diagram": [98, 177], "earliest": 98, "explos": 98, "handwritten": [98, 133], "abridg": 98, "c1": [98, 157], "s2": [98, 192], "c3": 98, "s4": [98, 192], "f5": 98, "f6": 98, "5x5": [98, 100], "affin": [98, 110, 143, 184, 197, 250, 280, 298], "wx": 98, "num_flat_featur": 98, "num_featur": 98, "artifact": [98, 145, 192, 289, 290, 294], "nimag": 98, "nraw": 98, "in_featur": [98, 120, 133, 174, 197, 217, 231, 233, 271], "out_featur": [98, 120, 133, 197, 217, 231], "0898": 98, "0318": 98, "1485": 98, "0301": 98, "0085": [98, 206], "1135": 98, "0296": 98, "0164": 98, "0039": 98, "0616": 98, "addmmbackward0": [98, 107], "gist": 98, "tile": [98, 102, 104, 189, 231, 238], "hasn": 98, "shouldn": [98, 173], "4914": 98, "4822": 98, "4465": 98, "2470": 98, "2435": 98, "2616": 98, "center": [98, 100, 104, 177, 186, 262, 280], "concatdataset": 98, "50000": 98, "rotat": [98, 102, 184, 187], "vehicl": [98, 180], "459k": 98, "20mb": 98, "96m": 98, "07": [98, 120, 134, 250, 251, 270, 279], "6mb": 98, "67m": 98, "2mb": 98, "6m": [98, 166], "3m": 98, "4mb": 98, "18": [98, 107, 118, 120, 140, 157, 174, 175, 180, 205, 251, 261, 264, 294], "51": [98, 160, 180, 251], "8m": 98, "89": [98, 157, 180, 270], "100m": 98, "109m": [98, 270], "88": [98, 120, 166, 180, 223], "118m": 98, "127m": 98, "136m": 98, "85": [98, 133, 151, 251, 264, 270], "145m": 98, "1mb": 98, "153m": 98, "162m": 98, "told": [98, 176], "49473685": 98, "5632443": 98, "strip": [98, 231, 279], "ingredi": 98, "195": [98, 175, 180], "879": 98, "656": [98, 157, 299], "576": [98, 100], "517": 98, "461": [98, 160], "415": 98, "368": 98, "327": 98, "318": 98, "261": 98, "inner": [98, 169, 176], "235": [98, 120], "940": 98, "573": 98, "507": 98, "442": 98, "378": 98, "364": 98, "319": [98, 251, 270], "284": [98, 180], "267": 98, "monoton": 98, "descend": 98, "memor": 98, "roughli": [98, 106, 121, 134, 147, 157, 201, 280], "brad": 99, "heintz": 99, "introyt_index": [99, 101], "lin": [100, 107, 151, 174], "nearbi": 100, "lenet5": 100, "1x32x32": 100, "liken": 100, "3x5": 100, "presenc": [100, 190, 192, 226, 227, 262], "6x28x28": 100, "2x2": 100, "6x14x14": 100, "sought": 100, "3x3": 100, "16x12x12": 100, "16x6x6": 100, "edg": [100, 115, 121, 132, 156, 186, 197, 223, 228, 266, 295], "instrument": [100, 156, 284], "dna": 100, "nucleotid": 100, "moder": 100, "beyond": [100, 103, 109, 172, 173, 280], "tagger": [100, 106], "noun": 100, "verb": 100, "vocab_s": [100, 107, 135, 151, 171, 206, 252], "tagset_s": 100, "log_softmax": [100, 107, 113, 133, 179, 253], "decod": [100, 106, 134, 171, 180, 181, 196, 205, 263, 295], "transformerencod": [100, 196], "transformerdecod": [100, 196], "subcompon": [100, 190], "transformerencoderlay": [100, 181, 196], "transformerdecoderlay": [100, 171, 196], "twin": 100, "maxpool": [100, 174, 228], "quadrant": 100, "6x6": 100, "vanish": [100, 107], "offset": [100, 193, 204, 231, 243], "neighborhood": 100, "sometim": [100, 103, 121, 138, 144, 146, 147, 150, 158, 177, 180, 182, 192, 205, 215, 216, 280], "suffer": [100, 186, 247], "steepest": 100, "feasibl": [100, 133, 135], "hardtanh": 100, "141": [101, 251, 264], "beginner_introyt": 101, "trainingyt": [101, 104], "garment": 102, "tb": [102, 295], "gfile": 102, "tensorflow_stub": 102, "add_imag": [102, 187], "summarywrit": [102, 187, 278], "flush": [102, 263, 278], "log_dir": [102, 139, 187], "logdir": [102, 186, 187, 278], "6006": [102, 186, 187, 278], "efficaci": 102, "add_graph": [102, 187], "add_embed": [102, 187], "projector": 102, "toggl": [102, 204, 299], "night": [102, 187], "icon": 102, "dark": [102, 189], "upack": 103, "attach": [103, 177, 220, 228, 298], "terminologi": [103, 109], "likewis": [103, 166], "fctori": 103, "assur": [103, 169], "random1": 103, "random3": 103, "random2": 103, "random4": 103, "rng": [103, 149], "_like": [103, 160], "rand_lik": 103, "cue": 103, "intent": [103, 214, 223, 228, 244], "subtract": [103, 105, 280], "2x4": 103, "1x4": 103, "honor": 103, "3rd": [103, 135, 142, 238, 252], "2nd": [103, 110, 135, 142, 179], "hundr": [103, 131, 137, 189, 193], "bitwis": [103, 263], "inventori": [103, 104], "occupi": [103, 259], "discard": [103, 133, 134, 186, 270, 279], "underscor": 103, "add_": [103, 192, 213, 237, 247], "deepli": 103, "nor": [103, 149, 197, 213, 298], "mid": 103, "someplac": 103, "ram": [103, 134, 169, 193, 269], "colloqui": 103, "fragil": 103, "robustli": [103, 117], "whichev": 103, "thrown": [103, 216, 237], "zeroth": 103, "bracket": [103, 197], "rescu": 103, "squeeze_": 103, "unsqueeze_": 103, "radic": 103, "parenthes": 103, "comma": 103, "convinc": [103, 166], "kinship": 103, "autom": [104, 121, 139, 156, 160, 189, 202], "outcom": [104, 139, 200, 228], "saniti": [104, 139, 176, 189, 297], "chose": [104, 175], "saved_model": 104, "garmentclassifi": 104, "alexandro": 105, "chariton": 105, "computation": [105, 189], "lightweight": [105, 132, 173, 263], "drone": 105, "phone": [105, 115], "4gb": [105, 166, 175], "3072": [105, 231], "satur": [105, 226, 263], "held": [105, 140, 179], "greedi": [105, 150, 177], "num_images_to_keep": 105, "50_000": 105, "test_dataset": 105, "10_000": 105, "extractor": [105, 189], "train_load": [105, 133, 134, 179, 186, 252, 253, 288], "detriment": 105, "test_load": [105, 133, 179, 253], "conclud": [105, 144, 149, 192, 228], "interven": [105, 192], "soft": [105, 177], "mistaken": 105, "alon": [105, 122, 137, 182, 187], "exploit": [105, 159, 182], "meaningfulli": 105, "temperatur": 105, "smoother": 105, "soft_target_loss_weight": 105, "ce_loss_weight": 105, "train_knowledge_distil": 105, "ce": [105, 182], "coeffici": 105, "convei": [105, 228], "naiv": [105, 138, 158, 168, 181, 218], "rational": 105, "capac": [105, 145, 176, 189, 280], "cosineembeddingloss": 105, "obvious": [105, 109, 180], "somehow": [105, 112, 193], "hidden_represent": 105, "hidden_representation_s": 105, "avg_pool1d": 105, "modifiedlightnnregressor": 105, "cosineloss": 105, "wiggl": 105, "hinton": 105, "vinyal": 105, "dean": 105, "workshop": 105, "romero": 105, "balla": 105, "kahou": 105, "chassang": 105, "gatta": 105, "bengio": 105, "fitnet": 105, "thin": [105, 204], "confer": 105, "knowledge_distillation_tutori": [105, 123], "kit": 106, "dynet": [106, 108], "opposit": [106, 169, 214], "theano": [106, 108], "kera": [106, 108, 121], "difficult": [106, 158, 167, 182, 193, 215, 220, 236, 249], "constitu": 106, "green": [106, 134, 137, 187], "fat": 106, "exception": 106, "entiti": [106, 112, 193, 282, 283], "recognit": [106, 132, 238, 280], "ner": 106, "sound": [106, 109, 121], "scari": 106, "viterbi": [106, 110], "sum_": [106, 112, 177], "psi_i": 106, "sum_i": 106, "partit": [106, 132, 137, 142, 149, 244, 280], "emiss": 106, "timestep": [106, 110, 140, 141, 177], "textbf": 106, "psi_": 106, "y_i": [106, 110], "rightarrow": [106, 149, 177], "x_i": [106, 107], "tran": [106, 189], "h_i": [106, 110], "collin": 106, "robert": [106, 107, 109, 110, 112, 267], "guthri": [106, 107, 109, 110, 112, 267], "prepare_sequ": 106, "anywai": [106, 109, 169], "gold": [106, 182], "perceptron": 106, "score_sent": 106, "advanced_tutori": [106, 108, 111], "workhors": 107, "0x7f8586d51070": 107, "2x5": 107, "1755": 107, "3268": 107, "5069": 107, "6602": 107, "2260": 107, "1089": 107, "acx": 107, "ac": [107, 189], "sigma": [107, 176], "plenti": 107, "peopl": [107, 108, 128, 206, 228], "shy": 107, "linearit": 107, "5404": 107, "2102": 107, "1130": 107, "0040": 107, "sum_j": 107, "x_j": 107, "theres": 107, "3800": 107, "3505": 107, "3455": 107, "5046": 107, "8213": 107, "2948": 107, "0192": 107, "1048": 107, "4584": 107, "2214": 107, "9519": 107, "2560": [107, 231], "0969": 107, "7801": 107, "unseen": [107, 112], "eta": 107, "vari": [107, 135, 143, 159, 169, 182, 190, 192, 196, 201, 202, 215, 218, 223, 225, 226, 227, 240, 263, 267], "spanish": [107, 140, 141], "bow": 107, "vocab": [107, 110, 137, 151, 206], "gusta": 107, "comer": 107, "la": 107, "cafeteria": 107, "creo": 107, "que": 107, "sea": 107, "una": 107, "buena": 107, "yo": 107, "si": [107, 172], "word_to_ix": [107, 110, 112], "num_label": 107, "bowclassifi": 107, "dont": 107, "bow_vec": 107, "make_bow_vector": 107, "make_target": 107, "label_to_ix": 107, "longtensor": [107, 112, 141, 178, 180], "bow_vector": 107, "log_prob": [107, 178, 180], "1194": 107, "0609": 107, "1268": 107, "1191": 107, "1739": 107, "0323": 107, "0038": 107, "0286": 107, "1488": 107, "1392": 107, "1067": 107, "0958": 107, "0112": 107, "0644": 107, "0431": 107, "0713": 107, "0972": 107, "1816": 107, "0987": 107, "1379": 107, "1480": 107, "0119": 107, "0334": 107, "1152": 107, "1136": 107, "1743": 107, "1427": 107, "0291": 107, "1103": 107, "0630": 107, "1471": 107, "0394": 107, "0471": 107, "1313": 107, "0931": 107, "0351": 107, "0834": 107, "0594": 107, "0363": 107, "1106": 107, "0849": 107, "1668": 107, "1882": 107, "0102": 107, "1344": 107, "0406": 107, "0631": 107, "1465": 107, "5378": 107, "8771": 107, "loss_funct": 107, "bigger": [107, 140, 141, 175, 189], "0th": [107, 168, 173, 181, 218], "9297": 107, "5020": 107, "6388": 107, "7506": 107, "selectbackward0": 107, "2093": 107, "6669": 107, "5330": 107, "0828": 107, "2803": 107, "5605": 107, "deep_learning_tutori": [107, 108, 111], "russel": 108, "norvig": 108, "book": 108, "rip": 108, "pytorch_tutori": [108, 109, 111], "word_embeddings_tutori": [108, 111, 112], "lexic": [108, 111], "sequence_models_tutori": [108, 110, 111, 267], "bi": [108, 111, 151], "crf": [108, 111], "2x2x2": 109, "complain": [109, 192], "x_2": [109, 163], "vagu": 109, "programm": [109, 112, 223, 226, 227], "x_0": 109, "overbrac": [109, 110, 112], "y_0": 109, "z_0": 109, "z_1": 109, "y_2": 109, "z_2": 109, "gloss": 109, "new_z": 109, "NO": 109, "forgotten": 109, "classic": [110, 113, 160, 167, 184, 277], "markov": 110, "myriad": 110, "cow": 110, "q_": [110, 112, 159], "1st": [110, 133, 135, 142], "unfamiliar": 110, "w_1": 110, "w_m": 110, "w_i": [110, 112], "_i": [110, 206], "_1": 110, "_m": 110, "argmax": [110, 133, 151, 179, 206, 251, 253], "_j": 110, "ah_i": 110, "affix": [110, 112], "bear": 110, "ly": 110, "adverb": 110, "c_w": 110, "x_w": 110, "po": [110, 189], "beginner_nlp": 111, "capit": 112, "enorm": [112, 189], "notion": 112, "mathematician": 112, "physicist": 112, "role": [112, 173, 180, 193, 298], "orthograph": 112, "linguist": 112, "hypothesi": 112, "coffe": 112, "phi": 112, "gave": 112, "pain": 112, "earth": 112, "herself": 112, "ith": [112, 218], "shakespear": [112, 181], "sonnet": 112, "word_i": 112, "context_s": 112, "beauti": [112, 262], "cbow": 112, "probabilist": [112, 176], "percent": 112, "q_w": 112, "raw_text": 112, "dedupl": 112, "jeremi": 113, "howard": [113, 159, 171, 172], "rachel": 113, "thoma": 113, "ingham": 113, "elegantli": [113, 266], "concis": 113, "trail": 113, "signifi": 113, "xavier": [113, 114], "initialis": 113, "prewritten": 113, "talli": 113, "debugg": 113, "set_trac": 113, "logist": 113, "cross_entropi": [113, 137], "clearer": [113, 187], "uppercas": 113, "zero_": [113, 172, 180], "prone": [113, 142, 196, 223, 246], "gone": [113, 138, 193], "xb": 113, "faciallandmarkdataset": 113, "tensordataset": [113, 151, 206], "x_train": 113, "y_train": 113, "start_i": 113, "end_i": 113, "yb": 113, "train_d": 113, "cleaner": [113, 213, 215, 222, 223], "train_dl": 113, "phase": [113, 149, 174, 180, 228, 270, 296], "loss_batch": 113, "rid": [113, 114, 135, 158, 247, 295], "avgpool2d": 113, "adaptiveavgpool2d": [113, 150], "lucki": [113, 173], "rent": 113, "hour": [113, 295], "mnist_sampl": 113, "fastai": 113, "practition": [113, 149, 216], "dupr\u00e9": 114, "circumv": 114, "forwardwithcontrolflowtest": 114, "modelwithcontrolflowtest": 114, "mlp": [114, 137, 152, 193], "unexpectedli": [114, 259], "succe": [114, 117, 192], "assertionerror": [114, 157], "dynamo": [114, 115, 117, 142, 157, 207, 295, 296], "identity2": 114, "fx": [114, 115, 132, 157, 183, 192, 193, 197, 208, 222, 223, 228, 232, 253, 289], "imperfect": 114, "faith": 114, "pitfal": [114, 192], "necessarili": [114, 115, 117, 118, 142, 144, 169, 192], "export_control_flow_model_to_onnx_tutori": [114, 116, 119], "ti": [115, 117, 118], "tai": [115, 117, 118], "justin": [115, 118, 121], "chu": [115, 118], "thiago": [115, 117], "crepaldi": [115, 117], "gamut": 115, "supercomput": 115, "constrain": [115, 139, 167], "onnxscript": [115, 117, 118], "upgrad": [115, 117, 167, 175, 186, 222], "fold": [115, 155, 193, 202, 221, 223, 226, 227], "redund": [115, 118, 150], "onnxprogram": [115, 118], "protobuf": 115, "drag": [115, 166, 186, 187, 245], "image_classifier_model": 115, "export_simple_model_to_onnx_tutori": [115, 116, 119], "intro_onnx": [116, 117, 119], "onnx_registry_tutori": [116, 118, 119], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [116, 119], "sphx_glr_beginner_onnx_intro_onnx": [116, 119], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [116, 119], "sphx_glr_beginner_onnx_onnx_registry_tutori": [116, 119], "consum": [117, 120, 138, 157, 169, 176, 178, 180, 181, 202, 220, 228, 270, 280, 297], "exportedprogram": [117, 118, 122, 192, 223, 294, 295], "newer": [117, 148, 160, 166, 168, 194, 235, 272, 273, 274, 275, 280], "__version__": [117, 151, 175, 206, 237], "registri": 118, "_op": 118, "opoverload": 118, "opset": 118, "native_funct": 118, "yaml": [118, 145, 253], "custom_translation_t": 118, "node_add_0": 118, "input_i": 118, "input_x": 118, "gelu": [118, 221], "op_typ": 118, "mylibrari": 118, "add_and_round_op": 118, "005": 119, "beginner_onnx": 119, "quicker": 120, "record_funct": [120, 157, 251, 270], "incur": [120, 137, 200, 242, 243, 280], "investig": [120, 160, 173, 189, 190, 192, 279], "hi_idx": 120, "argwher": 120, "from_numpi": [120, 178, 180], "with_stack": [120, 186], "profile_memori": [120, 186, 270], "key_averag": [120, 251], "group_by_stack_n": 120, "traceback": [120, 157, 295], "sort_bi": [120, 251, 270], "193a910735e8": 120, "stacktrac": 120, "self_cpu_time_tot": [120, 251, 270], "row_limit": 120, "212": 120, "953": 120, "mnt": [120, 149], "xarfus": 120, "au": 120, "715": 120, "848m": 120, "350": [120, 151], "151u": 120, "293": [120, 160], "342u": 120, "095u": 120, "931": 120, "footprint": [120, 133, 134, 135, 145, 166, 250, 251, 261, 263, 299], "006": 120, "476": 120, "34": [120, 175, 251, 264, 270, 279], "338": 120, "759m": 120, "as_strid": [120, 157], "281": [120, 160], "808u": 120, "275": 120, "721u": 120, "_local": 120, "268": 120, "650u": [120, 270], "_scalar_dens": 120, "347": 120, "nonzero": [120, 280], "as_tupl": 120, "089m": 120, "402m": 120, "491m": 120, "119": [120, 206], "441": 120, "587u": 120, "_numpi": 120, "602u": 120, "801m": 120, "rpc": [120, 132, 247, 284], "johnson": 121, "brows": 121, "utf": [121, 151], "modern": [121, 169, 190, 193], "50x": 121, "hairi": 121, "thankfulli": 121, "wave": 121, "tflearn": 121, "burden": [121, 182, 280], "facil": 122, "running_mean": [122, 225, 282], "themodelclass": 122, "param_tensor": 122, "var_nam": 122, "param_group": [122, 241, 247], "dampen": 122, "weight_decai": [122, 174, 247], "4675713712": 122, "4675713784": 122, "4675714000": 122, "4675714072": 122, "4675714216": 122, "4675714288": 122, "4675714432": 122, "4675714504": 122, "4675714648": 122, "4675714720": 122, "_use_new_zipfile_seri": 122, "best_model_st": 122, "deepcopi": [122, 152, 174, 202, 225, 226], "pt2": [122, 192, 222, 226, 240, 241, 246, 249, 294], "simplemodel": 122, "exported_program": [122, 295], "saved_exported_program": 122, "model_state_dict": [122, 135, 243, 244, 252], "theoptimizerclass": 122, "modela_state_dict": 122, "modela": 122, "modelb_state_dict": 122, "modelb": 122, "optimizera_state_dict": 122, "optimizera": 122, "optimizerb_state_dict": 122, "optimizerb": 122, "themodelaclass": 122, "themodelbclass": 122, "theoptimizeraclass": 122, "theoptimizerbclass": 122, "gan": [122, 132, 167], "ensembl": [122, 132, 183], "map_loc": [122, 135, 147, 189, 263, 269], "remap": 122, "overwrit": 122, "saving_loading_model": [122, 123, 272, 273, 274, 275], "026": 123, "distil": [123, 132, 253], "dcgan": [123, 132], "transfer_learning_tutori": [123, 128], "rai": [123, 132], "template_tutori": [123, 125], "firstnam": 125, "lastnam": 125, "gallery_pattern": 125, "neural_style_transfer_tutori": 125, "_build": 125, "beginner_sourc": 125, "link1": [125, 134], "link2": [125, 134], "cs231n": 128, "licens": [128, 151, 184], "bsd": [128, 184], "todai": [128, 174, 193, 215], "lr_schedul": [128, 133, 134, 174], "num_ftr": [128, 174], "class_nam": [128, 174, 189], "decai": [128, 150, 174, 177, 247], "checkout": [128, 237], "spread": [131, 189], "demand": [131, 200], "distributeddata": 131, "uneven": 131, "huggingfac": [131, 133, 134, 196, 206, 231, 295], "hf": 131, "t5": 131, "async_execut": [131, 132, 178], "dataparallel": [131, 132, 138, 151, 206, 263, 280], "plug": [131, 172, 184], "inductor": [132, 142, 183, 192, 205, 208, 217, 221, 222, 223, 290, 292, 296], "foreach_map": [132, 284, 287], "bite": [132, 284], "non_block": [132, 183], "pin_memori": [132, 133, 134, 183, 280], "slide": [132, 280], "tiatoolbox": 132, "resampl": 132, "waveform": 132, "wav2vec2": 132, "dqn": [132, 183], "cartpol": [132, 150, 177, 180], "v0": [132, 159, 177, 195], "proxim": [132, 176], "mario": [132, 167, 183], "_static": 132, "thumbnail": [132, 189], "holist": 132, "fuser": [132, 183, 280], "nchw": [132, 160, 252], "raspberri": 132, "nerur": 132, "netork": 132, "exploresever": 132, "func": [132, 152, 154, 158, 163, 168, 236, 291, 295], "tangent": [132, 154, 183], "plugin": [132, 186], "orthogon": [132, 167], "symmetr": [132, 151, 167, 221, 223, 227, 228], "prune": [132, 167, 183, 222, 253], "snapshot": [132, 145, 192], "torchx": 132, "scaled_dot_product_attent": [132, 181, 196, 198], "paral": 132, "fsdp2": [132, 133], "fully_shard": [132, 135], "fsdp1": [132, 133], "libuv": 132, "tcpstore": [132, 147], "sdk": 132, "v3": [132, 261], "camera": [132, 175], "xnnpack": [132, 197, 223, 225, 228], "metal": 132, "shader": 132, "android": [132, 222, 261, 284], "deeplab": 132, "fp32": [132, 134, 145, 151, 160, 181, 193, 197, 205, 206, 217, 223, 226, 238, 253, 267], "torchrec": [132, 183], "distributedmodelparallel": 132, "sheet": 132, "hamid": [133, 134], "shojanazeri": [133, 134], "yanli": [133, 134], "zhao": [133, 134], "shen": [133, 147, 172, 178, 180], "li": [133, 147, 149, 169, 172, 178, 180, 190], "1t": [133, 145], "courtesi": 133, "patrick": 133, "hu": 133, "reduce_scatt": [133, 134, 137], "scatter": [133, 135, 147, 149, 189], "possess": [133, 205, 269], "toi": [133, 147, 155, 180, 192, 193, 226, 244, 277], "fsdp_mnist": 133, "size_based_auto_wrap_polici": 133, "default_auto_wrap_polici": 133, "fsdp_auto_wrap_polici": 133, "auto_wrap_polici": [133, 134, 135], "steplr": [133, 134, 174], "fully_sharded_data_parallel": [133, 243, 244], "cpuoffload": [133, 135], "backwardprefetch": [133, 134], "enable_wrap": [133, 134], "cleanup": [133, 134, 147, 243, 244], "dropout1": [133, 179], "dropout2": [133, 179], "9216": [133, 179], "ddp_loss": 133, "batch_idx": [133, 252, 253, 288], "tloss": [133, 253], "6f": [133, 253], "view_a": [133, 179, 253], "test_loss": 133, "fsdp_main": [133, 134], "1307": [133, 149, 179, 253], "3081": [133, 149, 179, 253], "dataset1": 133, "dataset2": 133, "sampler1": [133, 134], "num_replica": [133, 134], "sampler2": [133, 134], "train_kwarg": [133, 134], "test_kwarg": [133, 134], "test_batch_s": [133, 134], "cuda_kwarg": [133, 134], "my_auto_wrap_polici": 133, "min_num_param": 133, "init_start_ev": [133, 134], "enable_tim": [133, 134], "init_end_ev": [133, 134], "adadelta": 133, "step_siz": [133, 134, 174], "gamma": [133, 134, 159, 174, 177, 178, 180], "elapsed_tim": 133, "save_model": [133, 134], "barrier": [133, 134, 136, 147, 149, 151, 198, 206], "mnist_cnn": 133, "metavar": [133, 134, 178, 180], "store_tru": [133, 134], "110": [133, 180, 206, 264], "67462890625sec": 133, "_fsdp_wrapped_modul": 133, "flattenparamswrapp": 133, "_fpw_modul": 133, "peak": [133, 135, 143, 166, 175, 196, 198, 205, 243, 292, 298, 299], "g4dn": 133, "xlarg": 133, "allgath": [133, 134, 137, 172, 280], "seal": 133, "20000": 133, "89130859375sec": 133, "auto_wrap": 133, "offload": [133, 134, 135, 251, 259], "cpu_offload": [133, 135], "offload_param": [133, 135], "dpp": 133, "ddp_mnist": 133, "77766015625sec": 133, "wright": 134, "rohan": [134, 179], "varma": [134, 179], "wikihow": 134, "p4dn": 134, "a100": [134, 138, 168, 190, 196, 205, 231], "pressur": [134, 243], "fdsp": 134, "xxl": 134, "billion": [134, 137], "3b": [134, 175], "wikihowal": 134, "wikihowsep": 134, "summarization_dataset": 134, "t5_train": 134, "autotoken": [134, 231], "gpt2tokenizerfast": 134, "t5token": 134, "t5forconditionalgener": 134, "modeling_t5": 134, "t5block": 134, "checkpoint_wrapp": 134, "checkpointimpl": 134, "apply_activation_checkpointing_wrapp": 134, "mixedprecis": 134, "shardingstrategi": [134, 246], "fullstatedictconfig": 134, "statedicttyp": [134, 243, 244], "transformer_auto_wrap_polici": 134, "tqdm": [134, 150, 151, 176, 206, 231], "datetim": [134, 136, 200], "setup_model": 134, "from_pretrain": [134, 151, 206, 231, 252, 295], "get_date_of_run": 134, "2022": [134, 208], "08": [134, 157, 180, 198, 251, 253, 264, 294], "12_pm": 134, "date_of_run": 134, "strftime": 134, "s_": [134, 177], "format_metrics_to_gb": 134, "gigabyt": 134, "metric_num": 134, "g_gigabyt": 134, "ndigit": 134, "fsdp_loss": 134, "inner_pbar": 134, "colour": 134, "desc": [134, 151, 200, 206], "r0": 134, "input_id": [134, 137, 151, 206, 231, 295], "source_id": 134, "attention_mask": [134, 151, 206, 295], "source_mask": 134, "target_id": 134, "train_accuraci": 134, "val_load": 134, "load_dataset": [134, 231, 295], "type_path": 134, "output_length": 134, "print_text": 134, "1500": [134, 264], "150": [134, 180], "val_dataset": 134, "t5_auto_wrap_polici": 134, "transformer_layer_cl": 134, "sharding_strategi": [134, 135, 246], "shard_grad_op": [134, 135], "zero2": 134, "full_shard": [134, 135], "zero3": 134, "bf16_readi": 134, "is_bf16_support": 134, "loosevers": 134, "is_nccl_avail": [134, 198], "mp_polici": [134, 135], "bfsixteen": 134, "mixed_precis": [134, 135], "current_devic": [134, 263], "adamw": [134, 177], "best_val_loss": 134, "inf": [134, 192, 215, 218, 220], "curr_val_loss": 134, "file_save_nam": 134, "time_of_run": 134, "dur": 134, "train_acc_track": 134, "val_acc_track": 134, "training_start_tim": 134, "track_memori": 134, "mem_alloc_track": 134, "mem_reserved_track": 134, "run_valid": 134, "zone": 134, "memory_alloc": 134, "memory_reserv": 134, "save_polici": 134, "offload_to_cpu": 134, "rank0_onli": 134, "state_dict_typ": 134, "full_state_dict": [134, 135], "cpu_stat": 134, "currepoch": 134, "save_nam": 134, "store_fals": 134, "nnode": [134, 147, 171, 198, 200], "transfom": 134, "mhsa": 134, "ffn": [134, 196], "bfloat16": [134, 135, 198, 205, 217, 226, 227, 238, 263, 277, 280, 288], "v100": [134, 190], "fpsixteen": 134, "param_dtyp": [134, 135], "reduce_dtyp": [134, 135], "buffer_dtyp": [134, 135], "fp32_polici": 134, "grad_bf16": 134, "oom": [134, 166, 263], "freed": [134, 166, 223], "backward_pr": [134, 135], "backward_prefetch": [134, 135], "backward_post": [134, 135], "wei": 135, "feng": [135, 159, 172], "yifan": 135, "mao": 135, "unshard": [135, 193, 198], "recordstream": 135, "float8": 135, "nf4": 135, "qlora": 135, "eg": 135, "fsdpmodul": 135, "fsdptransform": 135, "tok_embed": [135, 137, 171], "fsdptransformerblock": 135, "joint": [135, 290], "to_loc": 135, "clip_grad_norm_": 135, "seq_len": 135, "queu": [135, 243], "set_modules_to_forward_prefetch": 135, "set_modules_to_backward_prefetch": 135, "perf": [135, 231], "layers_to_prefetch": 135, "num_to_forward_prefetch": 135, "num_to_backward_prefetch": 135, "upcast": 135, "model_arg": [135, 171], "fsdp_kwarg": 135, "mixedprecisionpolici": 135, "max_norm": 135, "resum": [135, 190, 225, 244, 284, 295], "distributed_tensor": 135, "distribute_tensor": 135, "mmap": 135, "full_sd": 135, "meta_sharded_sd": 135, "sharded_sd": 135, "param_nam": [135, 277], "full_tensor": 135, "sharded_meta_param": 135, "sharded_tensor": 135, "device_mesh": [135, 137, 198, 246], "full_param": 135, "cpu_state_dict": 135, "sharded_param": 135, "set_model_state_dict": 135, "broadcast_from_rank0": 135, "statedictopt": 135, "get_model_state_dict": 135, "set_optimizer_state_dict": 135, "get_optimizer_state_dict": 135, "modulewrappolici": 135, "transformerblock": [135, 137], "param_init_fn": 135, "itertool": [135, 180, 228], "to_empti": [135, 233, 277], "sublay": 135, "reshard_after_forward": 135, "hybrid_shard": [135, 246], "_hybrid_shard_zero2": 135, "offload_polici": 135, "cpuoffloadpolici": 135, "cast_forward_input": 135, "cast_root_forward_input": 135, "output_dtyp": [135, 197, 200], "sync_module_st": 135, "rank0": [135, 178, 180, 200], "forward_prefetch": 135, "fsdp_modul": 135, "limit_all_gath": 135, "use_orig_param": [135, 137], "no_sync": [135, 280], "set_requires_gradient_sync": 135, "ignored_param": 135, "ignored_st": 135, "xilun": [136, 198], "roll": 136, "1k": [136, 137], "98304": [136, 206], "96k": 136, "perf_count": 136, "logger": [136, 151, 189, 206, 220], "getlogg": [136, 151, 189, 206], "var": [136, 166], "preset": [136, 221], "env_rank": 136, "env_world_s": 136, "env_master_addr": 136, "env_master_port": 136, "23456": [136, 149], "tcp_store": 136, "is_mast": 136, "time_elaps": [136, 174], "client": 136, "timeout": [136, 147, 172, 200], "store_based_barri": 136, "timedelta": [136, 200], "diststoreerror": 136, "_diststoreerror": 136, "_store_based_barri": 136, "group_nam": 136, "rendezvous_count": 136, "default_pg_timeout": 136, "logging_interv": 136, "store_kei": 136, "store_based_barrier_kei": 136, "worker_count": 136, "last_worker_kei": 136, "last_work": 136, "num_workers_join": 136, "tcpstore_test": 136, "number_run": 136, "spectrum": 136, "listen_fd": 136, "socket": [136, 149, 157, 280, 298], "listen_sock": 136, "af_inet": 136, "sock_stream": 136, "addr": [136, 200], "getsocknam": 136, "master_listen_fd": 136, "notimplementederror": 136, "gloo": [136, 147, 149, 172, 186, 193, 299], "vairabl": 136, "notifi": [136, 178], "wanchao": [137, 246], "liang": [137, 246], "tianyu": 137, "liu": [137, 227], "megatron": 137, "lm": [137, 242], "sp": 137, "parallelstyl": 137, "parallelize_modul": 137, "foward": 137, "aris": [137, 192, 196, 205, 215, 295], "exceed": [137, 176], "domin": [137, 160, 189, 234, 267], "ballpark": [137, 267], "flop": [137, 193, 292], "llm": [137, 171, 217], "trillion": [137, 145], "month": 137, "llama": [137, 196, 221], "70b": 137, "2k": 137, "llama2": 137, "colwiseparallel": 137, "rowwiseparallel": 137, "sequenceparallel": 137, "rmsnormpython": 137, "preparemoduleinput": 137, "preparemoduleoutput": 137, "init_device_mesh": [137, 198, 246], "tp_mesh": [137, 246], "feedforward": 137, "swiglu": 137, "w2": 137, "silu": 137, "w1": 137, "w3": 137, "colwis": 137, "rowwis": 137, "parallelize_plan": 137, "layer_tp_plan": 137, "feed_foward": 137, "feed_forward": 137, "wq": 137, "wk": 137, "wv": 137, "wo": 137, "tp_plan": 137, "draft": [137, 149], "num_head": 137, "layer_id": [137, 171], "transformer_block": 137, "attn_lay": 137, "n_head": [137, 171], "n_kv_head": 137, "input_layout": 137, "output_layout": 137, "attention_norm": 137, "ffn_norm": 137, "desired_input_layout": 137, "yellow": 137, "loss_parallel": 137, "use_local_output": 137, "seq": 137, "dp": [137, 200], "mesh_2d": [137, 246], "submesh": 137, "dp_mesh": 137, "model_tp": 137, "model_2d": 137, "broadli": 138, "torchviz": [138, 144], "orang": [138, 175], "_save": 138, "kept": [138, 200], "_saved_self": 138, "_saved_oth": 138, "cycl": [138, 186, 238, 264, 270], "thumb": [138, 158, 176, 263], "pack_hook": 138, "unpack_hook": 138, "silli": 138, "harmless": 138, "debat": 138, "__repr__": [138, 264], "152": 138, "48gb": 138, "5gb": 138, "6x": 138, "leak": 138, "autograd_saved_tensors_hooks_tutori": [138, 183], "david": 139, "eriksson": 139, "balandat": 139, "methodologi": [139, 247, 252], "laptop": 139, "sustain": [139, 243], "studi": [139, 173, 189], "botorch": 139, "bayesian": 139, "mnist_train_na": [139, 161, 183], "appdef": 139, "kubernet": 139, "local_cwd": 139, "fetch": [139, 141, 178, 179, 180, 193, 290], "proxi": [139, 213, 216, 264, 285], "tensorboardcurvemetr": 139, "curve_nam": 139, "lower_is_bett": 139, "favor": [139, 163, 176, 192], "multiobjectiveoptimizationconfig": 139, "generationstrategi": 139, "scheduleropt": 139, "max_pending_tri": 139, "pareto": 139, "frontier": 139, "surrog": 139, "uncertainti": 139, "num_param": 139, "val_acc": 139, "contour": 139, "hidden_size_1": 139, "kiuk": 139, "chung": 139, "tristan": [139, 175], "rice": [139, 175], "ax_multiobjective_nas_tutori": [139, 161, 183], "surnam": 140, "spell": 140, "lua": [140, 141, 182], "unreason": [140, 141], "roman": 140, "alphabet": 140, "n_letter": 140, "line_length": 140, "all_lett": 140, "linetotensor": 140, "namesdataset": 140, "20074": 140, "charrnn": 140, "58": [140, 160, 231, 253], "label_from_output": 140, "histor": [140, 141], "all_loss": [140, 141], "minu": [140, 186], "bright": 140, "incorrectli": [140, 225], "chines": [140, 141], "korean": 140, "italian": 140, "greek": 140, "poorli": 140, "gender": 140, "writer": [140, 151, 155, 175, 176, 187, 200, 206, 243, 278], "subreddit": 140, "char_rnn_classification_tutori": [140, 183], "russian": 141, "ru": 141, "rovakov": 141, "uantov": 141, "shavakov": 141, "german": 141, "ger": 141, "gerren": 141, "ereng": 141, "rosher": 141, "spa": 141, "salla": 141, "parer": 141, "allan": 141, "chi": 141, "chan": 141, "iun": 141, "category_lin": 141, "o2o": 141, "muscl": [141, 189], "fuzz": 141, "chao": 141, "abcd": 141, "eo": [141, 182], "n_categori": 141, "randomtrainingexampl": 141, "contrast": [141, 147, 168, 169, 192, 213], "timesinc": 141, "timestamp": [141, 156, 259], "print_everi": 141, "plot_everi": 141, "output_nam": 141, "fiction": 141, "countri": 141, "citi": 141, "char_rnn_generation_tutori": [141, 183], "simon": 142, "fan": [142, 175], "torch_log": [142, 192, 217, 284, 285, 287, 295], "_dynamo": [142, 157, 190, 192, 226, 285, 295], "compiled_autograd": 142, "intercept": 142, "bytecod": [142, 190], "aotdispatch": 142, "rewritten": 142, "compiled_autograd_verbos": 142, "stderr": 142, "aot0_": 142, "aot0_view_2": 142, "view_2": 142, "aot": [142, 157, 292], "unoptim": [142, 190], "aot_eag": [142, 157], "graph_break": [142, 295], "unique_graph": 142, "call_hook": 142, "div": [142, 157, 213, 223], "adjac": 143, "dilat": 143, "ep": [143, 180, 192, 197, 213, 225, 227, 228, 231, 250, 295], "track_running_statist": 143, "denomin": 143, "nenadmarku": [143, 155], "bulk": 143, "fusedconvbn": 143, "geforc": 143, "rtx": 143, "3070": 143, "56gb": 143, "unfus": 143, "68gb": 143, "shallow": [143, 150], "custom_function_conv_bn_tutori": [143, 183], "grad_out": 144, "finit": [144, 163], "differenc": 144, "magnifi": 144, "gradgradcheck": [144, 280], "grad_x": 144, "make_dot": 144, "dout": 144, "ouptut": 144, "sinh": 144, "cosh": 144, "expx": 144, "expnegx": 144, "_grad_out_exp": 144, "_grad_out_negexp": 144, "sinhbad": 144, "cube_backward": 144, "cubebackward": 144, "cube_forward": 144, "cube_backward_backward": 144, "sav_grad_out": 144, "cube_backward_backward_grad_out": 144, "cube": 144, "dgrad_out": 144, "reachabl": [145, 146, 149], "2xlarg": [145, 146], "hydra": 145, "slurm": [145, 146, 147, 149], "char_dataset": 145, "gpt2_train_cfg": 145, "bucket": [145, 280], "aggress": 145, "rendezv": [146, 172], "nccl_debug": 146, "diagnos": 146, "nccl_socket_ifnam": 146, "eth0": 146, "joe": 147, "zhu": [147, 157], "chirag": [147, 200], "pandya": [147, 200], "clarifi": 147, "filestor": 147, "libtmp": 147, "some_fil": 147, "toymodel": [147, 243, 244, 246], "net1": [147, 243, 244, 245, 246], "net2": [147, 243, 244, 245, 246], "demo_bas": 147, "ddp_model": [147, 299], "run_demo": 147, "demo_fn": 147, "caution": 147, "straggler": [147, 186], "inevit": 147, "spike": [147, 175], "AND": 147, "recoveri": 147, "torchelast": 147, "demo_checkpoint": 147, "checkpoint_path": [147, 225], "gettempdir": 147, "toympmodel": 147, "dev0": 147, "dev1": 147, "output_devic": 147, "demo_model_parallel": 147, "mp_model": 147, "ddp_mp_model": 147, "n_gpu": [147, 151, 206], "elastic_ddp": 147, "rdzv_id": [147, 246], "rdzv_backend": 147, "rdzv_endpoint": [147, 246], "29400": [147, 246], "scontrol": 147, "hostnam": 147, "slurm_nodelist": 147, "srun": 147, "torchrun_script": 147, "s\u00e9b": 149, "arnold": 149, "sysadmin": 149, "coordin": [149, 184, 195, 205, 216, 298], "pdsh": 149, "clustershel": 149, "init_process": 149, "127": [149, 197, 227, 228], "set_start_method": 149, "ip": 149, "recv": [149, 171, 180], "irecv": 149, "dst": 149, "req": 149, "behaviour": 149, "fanci": 149, "baidu": 149, "deepspeech": 149, "facebook": 149, "communc": 149, "new_group": [149, 171, 246], "commut": 149, "band": 149, "bor": 149, "bxor": 149, "premul_sum": 149, "scatter_list": 149, "gather_list": 149, "all_to_al": 149, "output_tensor_list": 149, "input_tensor_list": 149, "random_split": 149, "data_idx": 149, "datapartition": 149, "1234": 149, "data_len": 149, "part_len": 149, "partition_dataset": 149, "get_world_s": 149, "bsz": 149, "partition_s": 149, "train_set": [149, 186], "30000": 149, "ceil": 149, "epoch_loss": [149, 174], "average_gradi": 149, "voil\u00e0": 149, "send_buff": 149, "recv_buff": 149, "accum": [149, 217], "send_req": 149, "bandwidth": [149, 186, 193, 222, 251], "subsect": 149, "mpi": 149, "eleg": 149, "smi": [149, 263], "mvapich2": 149, "ipc": [149, 186], "recompil": [149, 190, 225, 241, 285, 289, 290], "requisit": 149, "forg": [149, 253, 298], "openmpi": 149, "mpirun": 149, "myscript": 149, "handshak": 149, "superflu": 149, "everybodi": 149, "readili": 149, "race": [149, 247], "fcntl": 149, "nf": [149, 200], "sharedfil": 149, "everyon": 149, "unclear": [149, 192], "natalia": 149, "gimelshein": 149, "actor": 150, "carrier": [150, 176], "step_mdp": 150, "brought": [150, 169, 176, 192], "84x84": 150, "accessori": [150, 175], "inittrack": 150, "stamp": 150, "is_init": 150, "tensordictprim": 150, "primer": [150, 216], "disappear": 150, "lstmmodul": 150, "backbon": [150, 189], "flank": 150, "assist": [150, 246], "tensordictmodulebas": 150, "batch_first": 150, "make_tensordict_prim": 150, "qvaluemodul": 150, "action_valu": 150, "qvalueactor": 150, "set_recurrent_mod": 150, "uniniti": [150, 233], "dqnloss": 150, "delay_valu": 150, "lazymemmapstorag": 150, "dqn_with_rnn_tutori": [150, 183], "jianyu": 151, "huang": [151, 171, 172, 198, 243, 244], "jessica": [151, 174], "paraphras": 151, "mrpc": [151, 206], "dolan": 151, "brockett": 151, "2005": 151, "imbalanc": 151, "sklearn": [151, 189], "whl": [151, 174, 186, 190, 193, 205, 227], "cu101": [151, 174], "torch_nightli": [151, 174], "bertconfig": [151, 206], "bertforsequenceclassif": [151, 206], "berttoken": [151, 206], "glue_compute_metr": [151, 206], "compute_metr": [151, 206, 231], "glue_output_mod": [151, 206], "output_mod": [151, 206], "glue_processor": [151, 206], "processor": [151, 206, 226, 238, 252, 280, 284, 298], "glue_convert_examples_to_featur": [151, 206], "convert_examples_to_featur": [151, 206], "basicconfig": [151, 206], "asctim": [151, 206], "levelnam": [151, 206], "datefmt": [151, 206], "modeling_util": [151, 206], "setlevel": [151, 206], "set_num_thread": [151, 175, 206], "__config__": [151, 206], "parallel_info": [151, 206], "sep": 151, "glue_data": [151, 206], "download_glue_data": [151, 206], "spirit": 151, "uncas": [151, 206], "glue_dir": [151, 206], "task_nam": [151, 206], "out_dir": [151, 206], "run_glu": 151, "model_typ": [151, 206, 221], "model_name_or_path": [151, 206], "do_train": 151, "do_ev": 151, "do_lower_cas": [151, 206], "max_seq_length": [151, 206], "per_gpu_eval_batch_s": [151, 206], "per_gpu_train_batch_s": 151, "num_train_epoch": [151, 231], "save_step": 151, "output_dir": [151, 206], "label_list": [151, 189, 206], "get_label": [151, 206], "overwrite_cach": [151, 206], "copyright": 151, "inc": 151, "corpor": 151, "apach": 151, "complianc": 151, "law": [151, 218], "AS": 151, "warranti": 151, "OR": [151, 278], "OF": 151, "govern": [151, 178], "permiss": 151, "mnli": [151, 206], "mi": [151, 206], "eval_task_nam": [151, 206], "eval_outputs_dir": [151, 206], "eval_task": [151, 206], "eval_output_dir": [151, 206], "eval_dataset": [151, 206, 231], "load_and_cache_exampl": [151, 206], "makedir": [151, 206], "eval_sampl": [151, 206], "eval_dataload": [151, 206, 253], "num": [151, 178, 206], "eval_loss": 151, "nb_eval_step": [151, 206], "out_label_id": [151, 206], "distilbert": [151, 206], "token_type_id": [151, 206], "xlnet": [151, 206], "xlm": [151, 206], "roberta": [151, 206], "segment_id": [151, 206], "tmp_eval_loss": 151, "output_eval_fil": [151, 206], "eval_result": [151, 206], "cached_features_fil": [151, 206], "cached_": [151, 206], "get_dev_exampl": [151, 206], "get_train_exampl": [151, 206], "pad_on_left": 151, "convert_tokens_to_id": 151, "pad_token_segment_id": 151, "all_input_id": [151, 206], "all_attention_mask": [151, 206], "all_token_type_id": [151, 206], "all_label": [151, 206], "qint8": [151, 197, 261], "438": [151, 206], "181": [151, 264], "30522": 151, "768": [151, 160, 206, 231], "time_model_evalu": [151, 206], "eval_start_tim": [151, 206], "eval_end_tim": [151, 206], "eval_duration_tim": [151, 206], "408": 151, "prec": [151, 160], "9019": 151, "902": [151, 206], "8788": 151, "8956": 151, "asymmetr": [151, 221, 227, 228], "openmp": [151, 238, 259], "tbb": 151, "ids_tensor": [151, 206], "int32": [151, 205, 206, 223, 228, 267], "dummy_input": [151, 206, 297], "traced_model": [151, 206], "bert_traced_eager_qu": 151, "loaded_quantized_model": [151, 202, 223], "implic": [151, 206], "devlin": 151, "lee": 151, "toutanova": 151, "zafrir": 151, "boudoukh": 151, "izsak": 151, "wasserblat": 151, "2019": 151, "q8bert": 151, "8bit": 151, "tradition": [152, 233], "simplemlp": 152, "pretend": [152, 168], "num_model": 152, "6400": 152, "predictions_diff_minibatch_loop": 152, "predictions2": 152, "stack_module_st": 152, "functional_cal": [152, 163, 168], "base_model": 152, "fmodel": 152, "front": [152, 173, 192], "predictions1_vmap": 152, "allclos": [152, 157, 198, 231], "in_dim": [152, 168, 236], "predictions2_vmap": 152, "without_vmap": 152, "stmt": [152, 231, 240, 264], "with_vmap": 152, "timeit": [152, 267, 279], "0x7f84fc38d870": 152, "0x7f84fc3e0400": 152, "467": 152, "weren": [152, 168], "039": [152, 183], "forced_alignment_tutori": 153, "incomplet": [154, 169], "eagerli": [154, 166, 192, 293], "primal": 154, "dual": 154, "dual_level": 154, "fresh": [154, 263], "check_forward_ad": 154, "check_backward_ad": 154, "check_undefined_grad": 154, "check_batched_grad": 154, "functorch": 154, "downsid": [154, 169], "reformul": [154, 163], "ft": 154, "make_functional_with_buff": 154, "analog": [154, 192, 193, 215, 216], "consolid": [154, 178, 193, 225], "dual_numb": 154, "forward_ad_usag": [154, 183], "horac": 155, "he": [155, 159, 182], "orig": 155, "clariti": [155, 267], "simplif": [155, 267], "conclus": 155, "hear": [155, 156], "tracker": [155, 156], "fx_conv_bn_fus": [155, 183], "longest": 156, "nicer": 156, "tabul": [156, 190, 200, 292], "ca": 156, "graphmodul": [156, 197], "symbolic_trac": 156, "profilinginterpret": 156, "clock": [156, 264], "51393": 156, "fx_profiling_tutori": [156, 183], "xuan": 157, "liao": 157, "haozh": 157, "jiong": [157, 207, 217, 226, 228], "gong": [157, 207, 217, 226, 228], "weihan": 157, "intricaci": 157, "troubleshoot": 157, "pinpoint": [157, 192, 245], "narrow": [157, 192, 200, 218], "torch_compile_debug": 157, "_inductor": [157, 192, 207, 217, 226, 294], "model___20": 157, "torchinductor_root": 157, "rx": 157, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 157, "fx_graph_runn": 157, "fx_graph_transform": 157, "ir_pre_fus": 157, "ir_post_fus": 157, "output_cod": [157, 217, 296], "triton": [157, 190, 208, 217, 226, 227, 284, 287, 289, 294], "gv": 157, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 157, "tmp2": [157, 217], "tmp1": [157, 217], "exc": [157, 295], "backendcompilerfail": 157, "cppcompileerror": 157, "xg": 157, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 157, "unsign": [157, 264], "max_propagate_nan": 157, "tmp3": [157, 217], "tmp0": [157, 217], "deduct": 157, "substitut": [157, 158, 166, 228], "deduc": 157, "in_ptr0": 157, "in_ptr1": 157, "out_ptr0": 157, "pragma": [157, 217], "ivdep": [157, 217], "i0": 157, "static_cast": [157, 217], "0l": [157, 217], "8390l": 157, "1l": [157, 207, 217], "i1": 157, "8l": 157, "buf0": [157, 207], "schedulernod": 157, "computedbuff": 157, "memorydep": 157, "c0": 157, "67120": 157, "unmet_depend": 157, "met_depend": 157, "arg0_1": [157, 207], "8390": 157, "arg1_1": 157, "nodeus": 157, "can_inplac": 157, "buf0_loop_bodi": 157, "var_rang": 157, "z0": 157, "index0": 157, "index1": 157, "get_index": 157, "get_index_1": 157, "load_1": 157, "get_index_2": 157, "minifi": 157, "dead": 157, "minif": 157, "tol": 157, "test_script": 157, "expected_result": 157, "actual_result": 157, "torchdynamo_repro_aft": 157, "torchdynamo_repro_level": 157, "mobilebertforquestionansw": 157, "xeon": [157, 160, 226, 238, 252, 284], "platinum": 157, "8358": 157, "60ghz": 157, "kmp_blocktim": [157, 280, 298], "kmp_set": 157, "kmp_affin": [157, 280, 298], "compact": [157, 280, 298], "ld_preload": [157, 280, 298], "conda_prefix": [157, 264], "dirnam": [157, 172, 259], "libiomp5": [157, 280, 298], "libjemalloc": [157, 298], "malloc_conf": [157, 298], "oversize_threshold": [157, 298], "background_thread": [157, 298], "metadata_thp": [157, 298], "dirty_decay_m": 157, "muzzy_decay_m": 157, "numactl": [157, 280, 298], "bench": 157, "eager_t": 157, "num_it": 157, "inductor_t": 157, "1023553796113": 157, "339": 157, "95180135127157": 157, "359459053287382": 157, "355x": 157, "enable_kernel_profil": 157, "370": 157, "814m": 157, "362": 157, "161": [157, 250], "276m": 157, "363": 157, "97": [157, 166, 180, 251], "121": [157, 270], "416m": 157, "488": [157, 264], "154m": 157, "194": 157, "clamp_min": [157, 251], "81": [157, 166, 251], "444m": 157, "bmm": [157, 218, 238, 264], "258m": [157, 251], "810": 157, "920m": 157, "447m": 157, "_softmax": 157, "087m": 157, "376": 157, "888m": 157, "77": 157, "430m": 157, "502m": 157, "161m": 157, "850": 157, "377m": 157, "386": [157, 180, 270], "index_select": 157, "000u": [157, 270], "986": 157, "420m": 157, "703": 157, "963": 157, "864m": 157, "_mkl_linear": [157, 217], "231": [157, 264, 270], "573m": [157, 270], "992m": 157, "336": [157, 270], "642m": 157, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 157, "915": 157, "911": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 157, "901": [157, 206], "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 157, "898": [157, 297], "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 157, "895": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 157, "893": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 157, "892": [157, 175, 264, 297], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 157, "891": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 157, "890": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 157, "889": 157, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 157, "graph_0_cpp_fused_": 157, "63x": 157, "cblas_sgemm_comput": 157, "339m": 157, "94x": 157, "cpp_fused__mkl_linear_add_mul_relu_151": 157, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 157, "bottl": [157, 243], "neck": [157, 243], "780875144992024": 157, "9588955780491233": 157, "0286805751604735": 157, "smallest": [157, 173], "solid": 157, "analyt": 157, "hotspot": [157, 259], "phenomenon": 157, "inductor_debug_cpu": [157, 183], "annoi": 158, "jax": [158, 163, 236], "argnum": 158, "millisecond": [158, 172, 280], "get_perf": 158, "rigor": [158, 267], "taller": 158, "hessiani": 158, "overwhelm": 158, "jacobians_hessian": [158, 183], "yuansong": 159, "steven": 159, "guo": 159, "cheatsheet": 159, "companion": 159, "bro": 159, "ne": [159, 182, 270], "emul": [159, 206], "tube": 159, "mushroom": 159, "screen": [159, 177, 259], "next_stat": [159, 177], "240": [159, 180, 270], "pipe": 159, "sky": 159, "grayscaleobserv": 159, "resizeobserv": 159, "skipfram": 159, "framestack": 159, "hi": [159, 218], "movement": 159, "exploration_r": 159, "marionet": 159, "ddqn": 159, "_e": 159, "argmax_": 159, "td_target": 159, "td_t": 159, "td_e": 159, "leftarrow": 159, "nabla": 159, "episod": [159, 177, 178, 180], "mario_rl_tutori": [159, 183], "vitali": 160, "fedyunin": 160, "densest": 160, "4x4": 160, "10x3x16x16": 160, "minor": [160, 174, 180, 187, 252, 253], "ambigu": [160, 214, 215], "n1hw": 160, "contrari": [160, 169, 173], "restrid": 160, "unintend": 160, "apex": 160, "main_amp": 160, "resnet50": [160, 175, 178, 252, 280, 288], "o2": 160, "opt_level": 160, "keep_batchnorm_fp32": 160, "nonetyp": 160, "loss_scal": 160, "7603": 160, "cast_model_typ": 160, "patch_torch_funct": 160, "master_weight": 160, "125": [160, 270], "866": 160, "230": [160, 180, 189], "949": 160, "6735125184": 160, "6735": 160, "259": 160, "562": 160, "773": 160, "481": 160, "355": 160, "693": 160, "6968704462": 160, "6852": 160, "258": 160, "775": 160, "089": 160, "433": 160, "965": 160, "7877287269": 160, "7194": 160, "833": 160, "771": 160, "710": 160, "487": 160, "8285319805": 160, "7467": 160, "260": [160, 180], "380": 160, "770": 160, "090": 160, "525": 160, "908": 160, "7370464802": 160, "7447": 160, "360": 160, "623": 160, "555": 160, "728": 160, "7592862844": 160, "7472": 160, "917": 160, "345": [160, 195], "774": 160, "746": [160, 264], "115": [160, 206, 251], "9698858261": 160, "9218": 160, "324": 160, "597": 160, "659": 160, "2505953312": 160, "0879": 160, "767": 160, "785": 160, "7579724789": 160, "7580": 160, "198": 160, "482": 160, "135": [160, 175, 264], "414": 160, "716": [160, 251, 264], "7007197738": 160, "7293": 160, "250": [160, 180, 270], "387": 160, "1010": 160, "516": 160, "7113101482": 160, "7233": 160, "667": 160, "197": 160, "340": 160, "1013": 160, "023": 160, "588": 160, "333": 160, "8943189979": 160, "7661": 160, "541": 160, "7113249302": 160, "9551": 160, "1011": 160, "163": 160, "683": 160, "574": 160, "8537774086": 160, "7716": 160, "279": 160, "453": 160, "7595844269": 160, "3413": 160, "429": 160, "269": 160, "827": 160, "743": 160, "883": 160, "8196096420": 160, "4011": 160, "volta": [160, 263, 280], "alexnet": 160, "mnasnet0_5": 160, "mnasnet0_75": 160, "mnasnet1_0": 160, "mnasnet1_3": 160, "mobilenet_v2": [160, 175, 195, 237, 261], "resnet101": 160, "resnet152": 160, "resnet34": 160, "resnext50_32x4d": 160, "shufflenet_v2_x0_5": [160, 175], "shufflenet_v2_x1_0": [160, 175], "shufflenet_v2_x1_5": [160, 175], "shufflenet_v2_x2_0": [160, 175], "squeezenet1_0": 160, "squeezenet1_1": 160, "vgg11": 160, "vgg11_bn": 160, "vgg13": 160, "vgg13_bn": 160, "vgg16": 160, "vgg16_bn": 160, "vgg19_bn": 160, "wide_resnet101_2": 160, "wide_resnet50_2": 160, "ic": [160, 227], "lake": [160, 252], "densenet121": 160, "densenet161": 160, "densenet169": 160, "googlenet": [160, 175, 261], "inception_v3": [160, 175], "resnext101_32x8d": [160, 175], "spite": 160, "nc11": 160, "memory_format_tutori": [160, 183], "year": [163, 167, 196], "j_": 163, "diagon": 163, "asymptot": 163, "i_o": 163, "i_": 163, "e_o": 163, "textrm": 163, "_o": 163, "tensorfloat": 163, "sacrific": 163, "empirical_ntk_ntk_vp": 163, "luck": [163, 166, 193], "neural_tangent_kernel": [163, 183], "french": [164, 182], "homepag": [165, 199], "ooz": 166, "_might_": 166, "vit_l_16": 166, "852ce7e3": 166, "ci": [166, 195], "hub": [166, 186], "13g": 166, "337mb": 166, "388mb": 166, "110m": 166, "378mb": 166, "146m": 166, "370mb": 166, "183m": 166, "376mb": 166, "219m": 166, "326mb": 166, "254m": 166, "339mb": 166, "297m": 166, "372mb": 166, "340m": 166, "396mb": 166, "33": [166, 175, 180, 251, 264], "382m": [166, 251], "407mb": 166, "421m": [166, 251], "356mb": 166, "462m": 166, "375mb": 166, "499m": [166, 251], "371mb": 166, "535m": 166, "374mb": 166, "572m": 166, "368mb": 166, "612m": [166, 251], "385mb": 166, "650m": 166, "689m": 166, "727m": 166, "389mb": 166, "764m": 166, "293mb": 166, "796m": 166, "305mb": 166, "828m": 166, "859m": 166, "265mb": 166, "887m": 166, "272mb": 166, "915m": 166, "274mb": 166, "942m": [166, 251], "145mb": 166, "978m": 166, "184mb": 166, "98g": 166, "160mb": 166, "00g": 166, "175mb": 166, "03g": 166, "189mb": 166, "05g": 166, "203mb": 166, "07g": 166, "215mb": 166, "10g": 166, "243mb": 166, "286mb": 166, "2p": 166, "ephemer": 166, "_record_memory_histori": 166, "_snapshot": 166, "memory_viz": 166, "devot": 166, "bat": [166, 208], "2gb": [166, 175], "6gb": 166, "foreach": [166, 249], "reveal": [166, 181, 190, 262, 264], "silver": 166, "bullet": 166, "sizabl": [166, 169], "tantamount": 166, "eat": 166, "lora": 166, "unlock": [166, 202, 206, 221, 247], "optimizer_dict": 166, "optimizer_hook": 166, "neat": 166, "lrschedul": [166, 284], "slate": 166, "bwd": 166, "woohoo": 166, "apart": 166, "shrunk": 166, "0gb": 166, "549": [166, 183], "optimizer_step_in_backward_tutori": [166, 183], "lezcano": 167, "surprisingli": 167, "ill": 167, "frobeniu": 167, "spectral": 167, "lipschitz": 167, "x\u1d40": 167, "upper": [167, 181, 192, 270], "triangular": 167, "reimplement": [167, 173, 192], "skew": [167, 186, 270], "unparametr": 167, "linearsymmetr": 167, "moduledict": [167, 171, 231], "parametrizationlist": [167, 231], "inbuilt": 167, "caylei": 167, "spd": 167, "right_invers": 167, "remove_parametr": 167, "parametri": 167, "leave_parametr": 167, "privaci": [168, 173], "sample_grad": 168, "compute_loss": 168, "ft_compute_grad": 168, "25x": [168, 189, 231], "opacu": 168, "per_sample_grad": [168, 183], "cpu_tensor": 169, "cuda_tensor": [169, 280], "erron": 169, "carefulli": [169, 280], "distinguish": [169, 180, 187], "isol": [169, 174, 190], "illus": 169, "anywher": 169, "cudastreamsynchron": 169, "dma": 169, "volterra": 169, "tesla": 169, "h100": [169, 190], "t3_cuda": 169, "belief": [169, 192], "brand": 169, "cudahostalloc": 169, "cudamemcpi": 169, "doubt": 169, "interestingli": 169, "tick": 169, "__whenev": 169, "memory__": 169, "corrupt": 169, "garbag": 169, "reliabl": [169, 264], "annihil": 169, "legitim": 169, "notori": 169, "inher": [169, 192, 193, 244], "blockag": 169, "afterward": [169, 192, 204], "non_blocking_pin": 169, "ration": 169, "outweigh": [169, 251], "perman": [169, 173], "shuttl": 169, "expedit": 169, "advers": 169, "bu": 169, "monopol": 169, "pinmem_nonblock": [169, 183], "microbatch": 171, "micro": 171, "educ": [171, 196], "dataclass": [171, 228], "modelarg": 171, "witout": 171, "layernorm": [171, 196, 231], "splitpoint": 171, "pipelinestag": 171, "schedulegpip": 171, "pp_group": 171, "stage_index": 171, "num_stag": 171, "init_distribut": 171, "peer": [171, 299], "manual_model_split": 171, "split_spec": 171, "4th": [171, 238], "mirror": [171, 226, 227], "build_stag": 171, "gpipe": 171, "1f1b": 171, "interleaved1f1b": 171, "loopedbf": 171, "num_microbatch": 171, "example_input_microbatch": 171, "tracer_model_split": 171, "tokenwise_loss_fn": 171, "n_microbatch": 171, "pipelining_tutori": 171, "tian": 172, "zeroredundancyoptim": [172, 284], "processgroupnccl": 172, "processgroupgloo": 172, "processgroupmpi": 172, "ucc": 172, "oneccl": [172, 280], "trainum": 172, "emerg": 172, "backenddummi": 172, "chrono": 172, "outputtensor": [172, 237], "inputtensor": [172, 237], "allgatheropt": 172, "allreduceopt": 172, "workdummi": 172, "optyp": 172, "recvanysourc": 172, "future_": 172, "iscomplet": 172, "issuccess": 172, "kunsettimeout": 172, "getfutur": 172, "outputtensorvec": 172, "listtyp": 172, "tensortyp": 172, "markcomplet": 172, "createbackenddummi": 172, "backenddummyconstructor": 172, "__attribute__": 172, "register_backend": 172, "cpp_function": [172, 264], "libraries_dir": 172, "abspath": 172, "dummy_collect": 172, "michela": 173, "paganini": 173, "biolog": 173, "batteri": 173, "subnetwork": 173, "lotteri": 173, "ticket": 173, "destruct": [173, 298], "0a0": [173, 237], "8e8a5e0": 173, "lecun": 173, "1998": 173, "unprun": 173, "basepruningmethod": 173, "adequ": [173, 176], "weight_orig": 173, "_orig": 173, "intact": [173, 178, 277], "weight_mask": 173, "_mask": 173, "forward_pre_hook": 173, "l1_unstructur": 173, "bias_orig": 173, "bias_mask": 173, "pruningcontain": 173, "compute_mask": 173, "ln_structur": 173, "undo": 173, "reassign": 173, "global_unstructur": 173, "apply_mask": 173, "unstructur": 173, "preprun": 173, "pruning_typ": 173, "pruning_tutori": [173, 183], "zafar": 174, "takhirov": 174, "initializaion": 174, "unfreez": 174, "ion": 174, "image_dataset": 174, "dataset_s": 174, "fig": [174, 187], "set_xtick": 174, "set_ytick": 174, "set_titl": [174, 187], "nrow": 174, "train_model": [174, 278], "best_model_wt": 174, "best_acc": 174, "running_correct": 174, "set_grad_en": [174, 251], "epoch_acc": 174, "visualize_model": 174, "was_train": 174, "current_row": 174, "current_col": 174, "lbl": 174, "jdx": 174, "model_f": 174, "create_combined_model": 174, "model_fe_featur": 174, "bn1": 174, "layer1": 174, "layer3": 174, "layer4": 174, "avgpool": 174, "new_head": 174, "new_model": 174, "optimizer_ft": 174, "exp_lr_schedul": 174, "tight_layout": 174, "appar": 174, "model_ft": 174, "default_qat_qconfig": 174, "model_ft_tun": 174, "model_quantized_and_train": 174, "ioff": 174, "sink": 175, "5v": 175, "sd": [175, 204], "card": [175, 181], "8gb": 175, "arm": [175, 251, 261], "64bit": 175, "aarch64": 175, "arm64": [175, 237, 250], "raspberrypi": 175, "raspios_arm64": 175, "rpi": 175, "sdcard": 175, "start_x": 175, "128m": 175, "gpu_mem": 175, "commment": 175, "camera_auto_detect": 175, "v4l2": 175, "reboot": 175, "video4linux2": 175, "video0": 175, "picamera": 175, "36fp": 175, "30fp": 175, "framer": 175, "cv2": 175, "cap": [175, 176, 186], "videocaptur": 175, "cap_prop_frame_width": 175, "cap_prop_frame_height": 175, "cap_prop_fp": 175, "bgr": 175, "ret": [175, 178], "input_tensor": 175, "input_batch": 175, "qnnpack": [175, 197, 250, 261], "mobilenet_v3_larg": 175, "109": 175, "233": [175, 180], "885": [175, 251], "204": [175, 251, 264], "132": 175, "82": [175, 223, 251, 270], "prequant": 175, "20fp": 175, "cap_v4l2": 175, "last_log": 175, "frame_count": 175, "ui": [175, 186, 259, 278, 284], "htop": 175, "mug": 175, "allevi": 175, "repetit": [176, 264], "maximis": 176, "clipppoloss": 176, "theta_k": 176, "pi_": 176, "lingua": 176, "franca": 176, "sub_batch_s": 176, "deepmind": [176, 184], "interchang": 176, "panel": [176, 186], "transmit": 176, "gymwrapp": 176, "loos": 176, "supplementari": 176, "stringent": 176, "n_step": [176, 178, 180], "mu_": 176, "d_ob": 176, "d_action": 176, "mu": [176, 189], "normalparamextractor": 176, "probabilisticactor": 176, "tanhnorm": 176, "discount": [176, 177, 178], "amort": [176, 178], "datacollector": 176, "multisyncdatacollector": 176, "refil": 176, "replaybuff": 176, "gae": 176, "value_target": 176, "videorecord": 176, "reinforcement_ppo": [176, 183], "tower": 177, "cart": 177, "pole": 177, "upright": 177, "classic_control": 177, "action_spac": 177, "observation_spac": 177, "decorrel": 177, "replaymemori": 177, "cyclic": 177, "formul": 177, "r_": 177, "t_0": 177, "r_t": 177, "uncertain": 177, "tempor": 177, "max_a": 177, "univers": [177, 189], "obei": 177, "bellman": 177, "huber": 177, "noisi": [177, 264, 279], "mathcal": 177, "le": [177, 182], "mathrm": 177, "select_act": [177, 178, 180], "eps_start": 177, "eps_end": 177, "eps_decai": 177, "plot_dur": 177, "underneath": [177, 192], "tau": 177, "optimize_model": 177, "s_t": 177, "a_t": 177, "num_episod": [177, 178], "target_net": 177, "reinforcement_q_learn": [177, 183], "calle": [178, 179, 242], "unblock": 178, "idl": [178, 186, 270], "callback": 178, "paus": [178, 225], "update_and_fetch_model": 178, "future_model": 178, "batch_update_s": 178, "batchupdateparameterserv": 178, "curr_update_s": 178, "get_model": 178, "ps_rref": 178, "local_valu": [178, 179], "setti": 178, "set_result": 178, "rpc_sync": [178, 179, 180, 242], "image_w": 178, "image_h": 178, "one_hot_indic": 178, "random_": 178, "get_worker_info": [178, 180], "543": 178, "affine1": [178, 180], "affine2": [178, 180], "action_scor": [178, 180], "select_action_batch": 178, "run_episod": [178, 180], "agent_rref": [178, 180], "ep_reward": [178, 180], "num_step": 178, "start_step": 178, "curr_reward": 178, "prob": [178, 180, 187], "saved_log_prob": [178, 180], "rob": 178, "ob_rref": [178, 180], "running_reward": [178, 180], "ob_rank": [178, 180], "ob_info": [178, 180], "observer_nam": [178, 180], "future_act": 178, "pending_st": 178, "select_acion": 178, "ob_id": [178, 180], "stitch": [178, 179], "oberv": [178, 180], "wait_al": 178, "policy_loss": [178, 180], "passiv": [178, 180], "run_work": [178, 179, 180, 242], "n_episod": 178, "print_log": 178, "init_rpc": [178, 179, 180, 242], "agent_nam": [178, 180], "i_episod": [178, 180], "last_reward": [178, 180], "tlast": [178, 180], "taverag": [178, 180], "shutdown": [178, 179, 180, 242], "tik": [178, 242], "tok": [178, 242], "dist_autograd": [179, 180], "num_gpu": 179, "dropout2d": [179, 253], "next_devic": 179, "caller": [179, 242], "call_method": 179, "remote_method": 179, "foo_inst": 179, "parameterserv": 179, "input_devic": 179, "intention": [179, 180, 242], "miscellan": 179, "get_dist_gradi": 179, "get_gradi": 179, "get_param_rref": 179, "cid": 179, "cpu_grad": 179, "k_cpu": 179, "v_cpu": 179, "paramt": 179, "param_rref": [179, 180], "run_parameter_serv": 179, "param_serv": 179, "global_lock": 179, "get_parameter_serv": 179, "parameter_serv": 179, "shut": 179, "offlin": 179, "trainernet": 179, "param_server_rref": 179, "get_global_param_rref": 179, "paramat": 179, "remote_param": [179, 180], "model_output": 179, "run_training_loop": 179, "nueral": 179, "context_id": [179, 180], "get_accuraci": 179, "correct_sum": 179, "trainer_": 179, "traffic": 179, "listen": 179, "subprocess": [179, 264, 280], "rpc_parameter_serv": 179, "solver": 180, "formatter_class": 180, "argumentdefaultshelpformatt": 180, "log_interv": 180, "report_reward": 180, "_max_episode_step": 180, "lifetim": 180, "finfo": 180, "reward_threshold": 180, "finish_episod": 180, "min_reward": 180, "surpass": 180, "ob": [180, 228], "ctrl": 180, "475": 180, "62": [180, 231], "111": [180, 206, 264, 297, 298], "131": 180, "130": [180, 251], "137": 180, "140": 180, "104": 180, "170": [180, 195], "126": 180, "213": 180, "322": [180, 251], "165": 180, "272": [180, 251], "210": 180, "168": [180, 298], "184": [180, 206], "208": [180, 189, 262], "270": [180, 189], "405": 180, "280": 180, "464": 180, "3163778435275": 180, "embeddingt": 180, "destin": [180, 242], "rnnmodel": 180, "ntoken": 180, "ninp": 180, "nhid": 180, "nlayer": 180, "emb_table_rref": 180, "decoder_rref": 180, "_remote_method": 180, "rremot": 180, "_parameter_rref": 180, "parameter_rref": [180, 242], "run_train": 180, "nindic": 180, "driss": 181, "guessou": 181, "multiheadattent": 181, "flashattent": 181, "flash": [181, 205], "andrej": 181, "karpathi": 181, "nanogpt": 181, "causalselfattent": 181, "mine": 181, "166": 181, "616": 181, "726": 181, "amaz": 181, "compiled_causal_attention_trac": 181, "concentr": 181, "6090": 181, "49m": 181, "3273": 181, "17m": 181, "commit": [181, 222, 238], "ae3a8d5": 181, "causal_upper_left": 181, "causal_lower_right": 181, "is_caus": [181, 196, 198], "causalbia": 181, "corner": 181, "attn_scor": 181, "sdpa_kernel": [181, 198], "scaled_dot_product_attention_tutori": [181, 183], "il": 182, "est": [182, 186], "peindr": 182, "tableau": 182, "paint": 182, "pourquoi": 182, "pa": 182, "essay": 182, "vin": 182, "delicieux": 182, "delici": 182, "wine": 182, "poet": 182, "romancier": 182, "she": 182, "novelist": 182, "vou": 182, "trop": 182, "maigr": 182, "skinni": 182, "condens": [182, 279], "unfold": 182, "phrase": 182, "tatoeba": 182, "eng": 182, "manyth": 182, "anki": 182, "fra": 182, "cold": [182, 268, 284, 287, 289], "froid": 182, "dozen": 182, "trim": [182, 279], "lang": 182, "word2index": 182, "index2word": 182, "word2count": 182, "apostroph": 182, "je": 182, "sui": 182, "noir": 182, "attn_appli": 182, "exhibit": [182, 280], "coher": 182, "grammar": 182, "wander": 182, "freedom": 182, "plot_loss": 182, "judgement": 182, "matshow": 182, "iot": 182, "word2vec": 182, "glove": 182, "autoencod": 182, "seq2seq_translation_tutori": [182, 183], "651": 183, "torch_compile_tutori": [183, 190], "torch_export_tutori": [183, 191, 192], "sdpa": [183, 196, 198], "sphx_glr_intermediate_transformer_building_block": 183, "transformer_building_block": [183, 196], "spatial_transformer_tutori": [183, 184], "sphx_glr_intermediate_mnist_train_na": 183, "tensorboard_profiler_tutori": [183, 186], "torchrec_intro_tutori": [183, 193], "ghassen": 184, "hamrouni": 184, "geometr": 184, "invari": [184, 214], "boil": 184, "affine_grid": 184, "grid_sampl": 184, "speech_recognition_pipeline_tutori": 185, "perfetto": 186, "warmup": [186, 196, 234, 240, 241, 249, 251, 270, 293, 294], "on_trace_readi": [186, 270], "tensorboard_trace_handl": 186, "record_shap": [186, 270], "torch_tb_profil": 186, "safari": 186, "pytorch_profil": 186, "breakdown": 186, "dropdown": 186, "callstack": 186, "multiprocessor": 186, "occup": 186, "tooltip": 186, "toolbar": 186, "keyboard": 186, "mous": 186, "resnet18_4work": 186, "76m": [186, 202], "132m": 186, "torchtbprofil": 186, "memory_demo_1_10": 186, "gpu0": 186, "children": [186, 270], "distributed_bert": 186, "docker": 186, "profiler_tutori": 186, "test_cifar10": 186, "vi": 186, "kfd": 186, "sys_ptrac": 186, "seccomp": 186, "unconfin": 186, "shm": [186, 242], "8g": 186, "apt": [186, 189, 298], "libjpeg": 186, "rocm5": 186, "scp": 186, "plot_classes_pr": 187, "matplotlib_imshow": 187, "one_channel": 187, "grei": 187, "fashion_mnist_experiment_1": 187, "img_grid": 187, "four_fashion_mnist_imag": 187, "refresh": [187, 193], "select_n_random": 187, "datapoint": 187, "perm": 187, "randperm": 187, "class_label": [187, 189], "label_img": 187, "thoroughli": 187, "images_to_prob": 187, "preds_tensor": 187, "el": 187, "arang": [187, 278], "xtick": 187, "ytick": 187, "add_scalar": [187, 278], "add_figur": 187, "global_step": [187, 278], "scroll": 187, "3000": [187, 192, 295], "test_siz": 187, "class_prob": 187, "class_probs_batch": 187, "test_prob": 187, "test_label": 187, "add_pr_curve_tensorboard": 187, "class_index": 187, "tensorboard_truth": 187, "tensorboard_prob": 187, "add_pr_curv": 187, "poke": 187, "tacotron2_pipeline_tutori": 188, "wsi": 189, "tissu": 189, "surgeri": 189, "biopsi": 189, "scanner": 189, "pathologist": 189, "diseas": 189, "cancer": 189, "microscop": 189, "tumor": 189, "growth": [189, 216], "patient": 189, "000x100": 189, "25x0": 189, "micron": 189, "pyramid": 189, "magnif": 189, "sketch": 189, "histoencod": 189, "jopo666": 189, "openjpeg": 189, "openslid": 189, "pixman": 189, "qq": 189, "libopenjp2": 189, "libpixman": 189, "echo": 189, "brew": 189, "__future__": [189, 269, 277], "hashandl": 189, "nopython": 189, "shutil": 189, "zipfil": 189, "mpl": 189, "cm": 189, "accuracy_scor": 189, "confusion_matrix": 189, "patch_predictor": 189, "iopatchpredictorconfig": 189, "misc": 189, "download_data": 189, "grab_files_from_dir": 189, "overlay_prediction_mask": 189, "wsicor": 189, "wsiread": 189, "rcparam": 189, "dpi": 189, "facecolor": 189, "on_gpu": 189, "suppress": 189, "overli": 189, "suppress_console_output": 189, "redirect_stderr": 189, "stringio": 189, "abnorm": [189, 259], "global_save_dir": 189, "rmdir": 189, "dir_path": 189, "is_dir": 189, "rmtree": 189, "kather": 189, "100k": 189, "wsi_path": 189, "sample_wsi": 189, "sv": 189, "patches_path": 189, "kather100k": 189, "weights_path": 189, "dc": 189, "warwick": 189, "uk": 189, "tcga": 189, "3l": 189, "aa1b": 189, "01z": 189, "dx1": 189, "8923a151": 189, "a690": 189, "40b7": 189, "9e5a": 189, "fcbedfc2394f": 189, "extractal": 189, "pc": 189, "patch_list": 189, "dataset_path": 189, "image_ext": 189, "tif": 189, "label_dict": 189, "glass": 189, "mucosa": 189, "deb": 189, "debri": 189, "tum": 189, "colorect": 189, "adenocarcinoma": 189, "epithelium": 189, "adi": 189, "adipos": 189, "muc": 189, "mucu": 189, "stroma": 189, "lym": 189, "lymphocyt": 189, "dataset_class_path": 189, "patch_list_single_class": 189, "file_typ": 189, "xlabel": 189, "ylabel": 189, "211": [189, 251, 270], "176": 189, "178": 189, "209": 189, "232": [189, 264], "abc": 189, "modelabc": 189, "tia": 189, "toolbox": 189, "readthedoc": 189, "_autosummari": 189, "models_abc": 189, "preproc_func": 189, "predictor": [189, 295], "pretrained_weight": 189, "cnnmodel": 189, "fromarrai": 189, "conf": [189, 253], "df_cm": 189, "215": 189, "993000": 189, "000000": 189, "00000": 189, "988636": 189, "011364": 189, "991304": 189, "008696": 189, "996503": 189, "003497": 189, "004808": 189, "990385": 189, "988764": 189, "011236": 189, "996296": 189, "003704": 189, "004785": 189, "985646": 189, "004310": 189, "99569": 189, "input_resolut": 189, "patch_input_shap": 189, "stride_shap": 189, "wsi_ioconfig": 189, "mpp": 189, "return_prob": 189, "ioconfig": 189, "greatest": [189, 263], "unnecessari": [189, 192, 196, 242, 283, 298], "merge_predict": 189, "wsi_output": 189, "wsi_predict": 189, "overlai": 189, "overlay_patch_predict": 189, "overview_resolut": 189, "overview_unit": 189, "wsi_overview": 189, "slide_thumbnail": 189, "label_color_dict": 189, "get_cmap": 189, "set1": 189, "pred_map": 189, "label_info": 189, "return_ax": 189, "histologi": 189, "pohjonen": 189, "joona": 189, "helsinki": 189, "umap": 189, "semantic_segmentor": 189, "deepfeatureextractor": 189, "iosegmentorconfig": 189, "histoencwrapp": 189, "histoenc": 189, "feat_extract": 189, "extract_featur": 189, "num_block": 189, "avg_pool": 189, "infer_batch": 189, "batch_data": 189, "img_patches_devic": 189, "inference_mod": [189, 231], "create_encod": 189, "prostate_medium": 189, "662": 189, "446": 189, "605": 189, "169": [189, 251], "155": 189, "output_resolut": 189, "patch_output_shap": 189, "auto_generate_mask": 189, "otsu": 189, "num_loader_work": 189, "num_postproc_work": 189, "wsi_featur": 189, "umap_reduc": 189, "n_neighbor": 189, "n_compon": 189, "manhattan": 189, "random_st": 189, "fit_transform": 189, "npy": 189, "feat": 189, "5mpp": 189, "4mpp": 189, "histolog": 189, "william": [190, 192, 293], "devel": 190, "elsewher": 190, "torchinductor": [190, 207, 208, 217, 226, 227, 280, 289], "torchtriton": 190, "cu117": 190, "opt_mod": 190, "mod": [190, 192, 234, 295], "complex_funct": 190, "complex_conjug": 190, "outer_funct": 190, "_orig_": 190, "dashboard": [190, 278], "struggl": 190, "fn1": 190, "fn2": 190, "f2": 190, "disallow": 190, "zhengxu": 192, "angela": [192, 294], "pian": 192, "pawakapan": 192, "synonym": 192, "dynamic_shap": [192, 223, 225, 295], "graph_signatur": 192, "range_constraint": 192, "stronger": [192, 295], "safeti": [192, 295], "cond": 192, "predic": 192, "true_fn": 192, "false_fn": 192, "while_loop": 192, "associative_scan": 192, "adher": [192, 233], "x0": [192, 195, 217], "x1": [192, 195, 217], "s0": 192, "s1": 192, "x2": 192, "x3": 192, "s5": 192, "proof": 192, "_log": [192, 296], "set_log": 192, "spit": 192, "create_symbol": 192, "int_oo": 192, "2841": 192, "runtime_assert": 192, "ncreate_symbol": 192, "nruntime_assert": 192, "dynamic_shapes_tutori": 192, "_subclass": [192, 204, 295], "fake_impl": 192, "845": [192, 297], "infer_s": [192, 279], "torchdynamo_extended_debug_guard_ad": 192, "_meta_registr": 192, "2127": 192, "meta_mm": 192, "marker": 192, "aliv": 192, "attract": 192, "friction": 192, "believ": [192, 214], "stanc": [192, 293], "constraintviol": 192, "unrel": [192, 293], "univari": 192, "diverg": [192, 213, 215, 264, 280], "tolist": [192, 231], "unbind": 192, "unback": 192, "nomenclatur": 192, "absenc": [192, 226, 227, 245, 262], "u0": 192, "unhint": 192, "is_compil": 192, "invas": 192, "bypass": [192, 217], "offend": 192, "smarter": 192, "prevail": 192, "prohibit": 192, "_check_is_s": 192, "guard_size_oblivi": 192, "starter": 192, "guardondatadependentsymnod": 192, "_schema": 192, "is_mut": 192, "export_for_train": [192, 223, 225, 227], "run_decomposit": 192, "mutabl": 192, "conv1d": [192, 228, 238, 280], "cond_pred": 192, "tensorrt": [192, 197], "pt2_path": 192, "aoti_compile_and_packag": [192, 294], "compiler_aot_inductor": 192, "aoti_compil": 192, "aoti_load_packag": [192, 294], "cu121": [193, 205], "fbgemm_gpu": 193, "torchmetr": 193, "cardin": 193, "relationship": [193, 220], "hash": 193, "conjunct": [193, 200, 204, 280], "ctr": 193, "dlrm": [193, 280], "embedding_collect": 193, "embedding_bag_collect": 193, "vast": [193, 216], "collis": [193, 279], "80g": 193, "embeddingcollect": 193, "jaggedtensor": 193, "keyedjaggedtensor": 193, "keyedtensor": 193, "product_t": 193, "user_t": 193, "id_list_featur": 193, "id_score_list_featur": 193, "id_list_feature_offset": 193, "q1": 193, "product_jt": 193, "user_jt": 193, "q2": 193, "reread": 193, "to_dict": 193, "congrat": 193, "pat": 193, "grasp": 193, "scarc": [193, 243], "hbm": 193, "gb": [193, 196], "shardedembeddingbagcollect": 193, "incredibli": 193, "ton": 193, "everytim": 193, "await": 193, "input_dist": 193, "tbe": 193, "output_dist": 193, "twpooledembeddingshard": 193, "kjt": 193, "canon": 193, "dmp": 193, "hyperoptim": 193, "combinedoptim": 193, "keyedoptim": 193, "in_backward_optimizer_filt": 193, "fused_optim": 193, "fused_param": 193, "apply_optimizer_in_backward": 193, "ampl": 193, "loadabl": 193, "criteo": 193, "1tb": 193, "penn": 195, "fudan": 195, "databas": [195, 289, 290], "pedestrian": 195, "keypoint": 195, "tv_tensor": 195, "boundingbox": 195, "y0": 195, "image_id": 195, "iscrowd": 195, "pycocotool": 195, "gautamchitni": 195, "git": [195, 205, 250], "cocoapi": 195, "cocodataset": 195, "pythonapi": 195, "get_height_and_width": 195, "upenn": 195, "edu": 195, "jshi": 195, "ped_html": 195, "pennfudanp": 195, "pedmask": 195, "fudanped00001_mask": 195, "fudanped00002_mask": 195, "fudanped00003_mask": 195, "fudanped00004_mask": 195, "pngimag": 195, "fudanped00001": 195, "fudanped00002": 195, "fudanped00003": 195, "fudanped00004": 195, "tvtensor": 195, "zoo": 195, "fasterrcnn": 195, "rpn": 195, "anchor": 195, "featmap_nam": 195, "rcnn": 195, "train2017": 195, "mikayla": [196, 269, 277], "gawarecki": [196, 269, 277], "jag": [196, 218], "famili": [196, 251, 298], "xformer": 196, "torchtun": 196, "rag": [196, 218], "ux": [196, 218, 221, 223, 226], "key_padding_mask": 196, "qk": 196, "premis": 196, "rmsnorm": 196, "sinusoid": 196, "rotari": [196, 198], "alibi": 196, "threefold": 196, "query_padding_mask": 196, "mha": [196, 214], "nestedtensor": [196, 218, 222, 232], "cleanli": [196, 240, 241, 249, 291, 296], "zipf": [196, 218], "attn_mask": 196, "padded_tim": 196, "03454": 196, "padded_peak_memori": 196, "nested_tim": 196, "00612": 196, "nested_peak_memori": 196, "padded_bw_tim": 196, "09337": 196, "padded_bw_peak_mem": 196, "nested_bw_tim": 196, "01452": 196, "nested_bw_peak_mem": 196, "144": [196, 251], "out_proj": 196, "000244140625": 196, "packed_proj": 196, "001556396484375": 196, "001953125": 196, "causal": 196, "trust": 196, "ragged": 196, "alibi_mod": 196, "block_mask": 196, "create_nested_block_mask": 196, "e_q": 196, "e_tot": 196, "05x": 196, "swish": 196, "08x": [196, 251], "kv": [196, 198], "lucidrain": 196, "navit": 196, "visiontransform": 196, "readm": 197, "prepare_fx": [197, 201, 202, 203], "convert_fx": [197, 201, 202, 203], "default_weight_observ": 197, "get_default_qconfig_map": 197, "minmaxobserv": [197, 228], "backend_config": 197, "backendpatternconfig": 197, "dtypewithconstraint": 197, "observationtyp": 197, "quantize_fx": [197, 201, 202], "fp32_linear": 197, "quant1": 197, "dequant1": 197, "quant2": 197, "dequant2": 197, "fp32_conv_relu": 197, "quint8_with_constraint": 197, "quant_min_lower_bound": 197, "quant_max_upper_bound": 197, "scale_min_lower_bound": 197, "weighted_int8_dtype_config": 197, "input_dtyp": [197, 200], "weight_dtyp": 197, "bias_dtyp": 197, "fuse_conv2d_relu": 197, "convrelu2d": [197, 202], "linear_config": 197, "set_pattern": 197, "set_observation_typ": 197, "output_use_different_observer_as_input": 197, "add_dtype_config": 197, "set_root_modul": 197, "set_qat_modul": 197, "set_reference_quantized_modul": 197, "conv_relu_config": 197, "set_fused_modul": 197, "set_fuser_method": 197, "fused_conv_relu_config": 197, "my_backend": 197, "set_backend_pattern_config": 197, "quant_max": [197, 227, 228], "activation_observ": 197, "with_arg": [197, 227, 228], "quant_min": [197, 227, 228], "qconfig_map": [197, 201, 202, 203], "set_object_typ": [197, 202, 223], "use_bn": 197, "example_input": [197, 201, 202, 203, 221, 223, 225, 226, 227, 228], "quantizedlinear": 197, "012136868201196194": 197, "zero_point": [197, 206, 228], "qscheme": [197, 227, 228], "per_tensor_affin": [197, 228], "quantizedconvrelu2d": 197, "0029353597201406956": 197, "linear_input_scale_0": 197, "linear_input_zero_point_0": 197, "quantize_per_tensor": [197, 206, 223, 253], "dequantize_2": 197, "015307803638279438": 197, "track_running_stat": [197, 250], "dequantize_1": 197, "get_fbgemm_backend_config": 197, "get_qnnpack_backend_config": 197, "get_native_backend_config": 197, "union": 197, "md": 197, "rfc": [197, 214, 217, 229], "0019": [197, 206], "chien": [198, 243, 244], "chin": [198, 243, 244], "llama3": 198, "freq_ci": 198, "context_parallel": 198, "buffer_seq_dim": 198, "miscalcul": 198, "set_rotate_method": 198, "sdpbackend": 198, "sdpa_exampl": 198, "nhead": 198, "qkv_len": 198, "8192": [198, 264], "flash_attent": 198, "cudnn_attent": 198, "qkv": 198, "cp_sdpa_exampl": 198, "_attent": 198, "context_parallel_unshard": 198, "context_parallel_sdpa_exampl": 198, "device_typ": [198, 226, 227, 288], "mesh_shap": 198, "mesh_dim_nam": [198, 246], "cp_qkv": 198, "cp_out": 198, "alltoal": [198, 280], "junji": 200, "impedi": 200, "starvat": 200, "deadlock": 200, "indefinit": 200, "diagnost": 200, "flight_record": 200, "torch_nccl_trace_buffer_s": 200, "torch_nccl_dump_on_timeout": 200, "torch_nccl_debug_info_temp_fil": 200, "nccl_trace_rank_": 200, "torch_nccl_trace_cpp_stack": 200, "torch_symbolize_mod": 200, "torch_nccl_enable_tim": 200, "dladdr": 200, "addr2lin": 200, "debuginfowrit": 200, "registerwrit": 200, "_distributed_c10d": 200, "_dump_nccl_trac": 200, "includecollect": 200, "includestacktrac": 200, "onlyact": 200, "pg_config": 200, "default_pg": 200, "pg_statu": 200, "last_enqueued_collect": 200, "last_started_collect": 200, "last_completed_collect": 200, "test_short_pickl": 200, "test_c10d_nccl": 200, "3647": 200, "spawn_main": 200, "record_id": 200, "pg_id": 200, "collective_seq_id": 200, "p2p_seq_id": 200, "op_id": 200, "profiling_nam": 200, "time_created_n": 200, "1724779239936775119": 200, "time_discovered_started_n": 200, "time_discovered_completed_n": 200, "1724779239975811724": 200, "retir": 200, "timeout_m": 200, "600000": 200, "is_p2p": 200, "fr_trace": 200, "use_distribut": 200, "torchfrtrac": 200, "culprit": 200, "recod": 200, "trace_": 200, "trace_0": 200, "trace_1": 200, "tldr": [201, 202], "default_dynamic_qconfig": [201, 206], "qconfigmap": [201, 203, 223, 228], "release": 201, "set_glob": [201, 202, 203, 223, 225, 226, 227], "prepared_model": [201, 202, 221, 223, 225, 226, 227], "metamind": 201, "forunct": 201, "fx_graph_mode_ptq_dynam": [201, 232], "charl": 202, "hernandez": 202, "traceabl": 202, "identitc": [202, 223], "resnet18_pretrained_float": [202, 223, 225], "fuse_fx": 202, "recursivescriptmodul": [202, 206, 225], "model_to_quant": [202, 223, 225], "qconfig_opt": [202, 223], "set_module_name_regex": 202, "set_module_nam": [202, 223], "set_module_name_object_type_ord": 202, "object_typ": 202, "module_name_regex": 202, "module_nam": 202, "qconfig_mapping_util": 202, "serila": [202, 223], "fx_graph_mode_model_file_path": 202, "resnet18_fx_graph_mode_quant": 202, "erro": 202, "convrelu": 202, "moduleattributeerror": 202, "_modul": 202, "conv1_weight_after_fus": 202, "conv1_weight_after_qu": 202, "resnet18_script": 202, "eager_quantized_model": 202, "eager_mode_model_fil": 202, "resnet18_eager_mode_quant": 202, "aibench": 202, "192": 202, "48m": 202, "63m": 202, "non_traceable_code_1": 203, "traceable_cod": 203, "non_traceable_code_2": 203, "fp32traceabl": 203, "traceable_submodul": 203, "traceable_code_1": 203, "traceable_code_2": 203, "model_fp32": 203, "non_traceable_cod": 203, "fp32nontrac": 203, "non_traceable_submodul": 203, "prepare_custom_config_dict": 203, "non_traceable_module_nam": 203, "non_traceable_module_class": 203, "mnontrac": 203, "model_prepar": 203, "transpose_for_scor": 203, "new_x_shap": 203, "num_attention_head": 203, "attention_head_s": 203, "custommodul": 203, "observednontrac": 203, "classmethod": 203, "from_float": 203, "from_observ": 203, "staticquantnontrac": 203, "float_to_observed_custom_module_class": 203, "convert_custom_config_dict": 203, "observed_to_quantized_custom_module_class": 203, "model_quant": [203, 261], "thee": 203, "dynamicquantnontrac": 203, "weightonlyquantmnontrac": 203, "test_custom_module_class": 203, "test_quantize_fx": 203, "bounc": 204, "gd": 204, "cufil": 204, "4kb": 204, "storage_align": 204, "serialization_config": 204, "gdsfile": 204, "skip_data": 204, "faketensormod": 204, "gds_register_buff": 204, "cufilebufregist": 204, "save_storag": 204, "cufilewrit": 204, "fake_tensor": 204, "fake_sd": 204, "untyped_storag": 204, "_checkpoint_offset": 204, "o_rdwr": 204, "sd_load": 204, "load_storag": 204, "cufileread": 204, "gpu_direct_storag": [204, 232], "hdcharl": 205, "pg509": 205, "330": 205, "myenv": 205, "facebookresearch": 205, "vit_h": 205, "dl": [205, 238, 253], "fbaipublicfil": 205, "segment_anyth": 205, "sam_vit_h_4b8939": 205, "sam_checkpoint_base_path": 205, "image_encod": 205, "instant": 205, "protect": 205, "bf16": [205, 217, 226, 227, 238, 251], "43m": 205, "17gb": 205, "7x": 205, "186": [205, 251], "16m": 205, "95m": 205, "24gb": 205, "autotun": [205, 222, 280, 289, 290, 292], "int4": 205, "int8_dynamic_activation_int8_weight": 205, "int8_weight_onli": 205, "int4_weight_onli": 205, "apply_dynamic_qu": 205, "apply_weight_only_int8_qu": 205, "int8_dynamic_activ": 205, "04m": 205, "58gb": 205, "force_fuse_int_mm_with_mul": 205, "78m": 205, "37gb": 205, "unquant": [205, 228], "epilogu": [205, 217], "enlarg": 205, "39gb": 205, "10x": [205, 238], "appl": 205, "677": 205, "28m": 205, "729": 205, "65m": 205, "gpu_quantization_torchao_tutori": [205, 232], "supriya": 206, "rao": 206, "tl": 206, "dr": 206, "per_channel_dynamic_qconfig": 206, "quantize_dynamic_jit": 206, "ts_model": 206, "installaion": 206, "necesessari": 206, "lenght": 206, "overwritten": [206, 269, 283, 298], "qconfig_glob": 206, "qconfig_sub": 206, "qconfig_fc": 206, "242141": 206, "354759": 206, "188": [206, 264], "157": 206, "quantized_model_debug": 206, "prepare_dynamic_jit": 206, "convert_dynamic_jit": 206, "406429": 206, "897": 206, "getattr": 206, "112": [206, 270, 295, 298], "113": 206, "4_scale_0": 206, "114": 206, "4_zero_point_0": 206, "4_axis_0": 206, "4_scalar_type_0": 206, "quantize_per_channel": 206, "1640": 206, "_choose_qparams_per_tensor": 206, "linear_dynam": 206, "0157": 206, "0257": 206, "0269": 206, "0158": 206, "0764": 206, "0548": 206, "0325": 206, "0423": 206, "0528": 206, "1382": 206, "0069": 206, "0106": 206, "0113": 206, "0275": 206, "0253": 206, "0457": 206, "0090": 206, "0512": 206, "0555": 206, "0277": 206, "0543": 206, "0539": 206, "0943": 206, "0619": 206, "1040": 206, "0598": [206, 231], "0465": 206, "0009": 206, "0949": 206, "0097": 206, "0183": 206, "clonebackward": 206, "0011": 206, "0010": 206, "0034": 206, "0013": 206, "0012": 206, "0015": 206, "0016": 206, "0036": 206, "0014": 206, "0008": 206, "0023": 206, "0018": 206, "0031": 206, "0022": 206, "0024": 206, "016605": 206, "182": 206, "878029": 206, "jit_model_path_float": 206, "jit_model_path_eag": 206, "jit_model_path_graph": 206, "chunyuan": [207, 217], "bao": [207, 294], "cpp_wrapper": [207, 226], "opt_fn": 207, "assert_size_strid": 207, "empty_strid": [207, 237, 270], "cpp_fused_add_lift_fresh_0": 207, "c_void_p": 207, "constant0": 207, "inductor_entry_cpp": 207, "19l": 207, "cppwrappercodecach": 207, "cpp_wrapper_src": 207, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 207, "_wrap_func": 207, "args_tensor": 207, "constants_tensor": 207, "_deviceguard": 207, "lift_fresh": 207, "stream0": 207, "get_cuda_stream": 207, "triton_poi_fused_add_lift_fresh_0": 207, "run_intermediate_hook": 207, "cudaguard": 207, "device_guard": 207, "loadkernel": 207, "torchinductor_us": 207, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 207, "cubin": [207, 290, 294], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 207, "cudeviceptr": 207, "var_0": 207, "reinterpret_cast": 207, "var_1": 207, "var_2": 207, "var_3": 207, "kernel_args_var_0": 207, "cudastream_t": 207, "getcurrentcudastream": 207, "launchkernel": 207, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 207, "zhaoqiong": 208, "zheng": 208, "xu": 208, "han": 208, "msvc": 208, "desktop": 208, "checkmark": 208, "cmd": 208, "ex": [208, 231, 259], "vc": 208, "auxiliari": [208, 238], "vcvars64": 208, "opt_foo1": 208, "9074e": 208, "3994e": 208, "3894e": 208, "2630e": 208, "3060e": 208, "1833e": 208, "4016e": 208, "1905e": 208, "0637e": 208, "3648e": 208, "3728e": 208, "2863e": 208, "6888e": 208, "5442e": 208, "6790e": 208, "2025e": 208, "2647e": 208, "2684e": 208, "2483e": 208, "2845e": 208, "7747e": 208, "2028e": 208, "1431e": 208, "7196e": 208, "5304e": 208, "1945e": 208, "6654e": 208, "7376e": 208, "3644e": 208, "3600e": 208, "0157e": 208, "7200e": 208, "0146e": 208, "8175e": 208, "4057e": 208, "8119e": 208, "2853e": 208, "2773e": 208, "5082e": 208, "4615e": 208, "4140e": 208, "2130e": 208, "0762e": 208, "3914e": 208, "1122e": 208, "6895e": 208, "8852e": 208, "3310e": 208, "4101e": 208, "8318e": 208, "2355e": 208, "9290e": 208, "3707e": 208, "3754e": 208, "3768e": 208, "8970e": 208, "1171e": 208, "9944e": 208, "2553e": 208, "3394e": 208, "3428e": 208, "8400e": 208, "1756e": 208, "0654e": 208, "7973e": 208, "4019e": 208, "1886e": 208, "9194e": 208, "3632e": 208, "1811e": 208, "1615e": 208, "6622e": 208, "2089e": 208, "2011e": 208, "0659e": 208, "0892e": 208, "1932e": 208, "3888e": 208, "3898e": 208, "3218e": 208, "4139e": 208, "4000e": 208, "1192e": 208, "0175e": 208, "6432e": 208, "0498e": 208, "4115e": 208, "3212e": 208, "0964e": 208, "0127e": 208, "7244e": 208, "2799e": 208, "3595e": 208, "0907e": 208, "7191e": 208, "4062e": 208, "3672e": 208, "8502e": 208, "5216e": 208, "6046e": 208, "icx": 208, "win64": 208, "inductor_window": 209, "mobile_interpret": 212, "1369": 213, "weed": 213, "state_sum": 213, "addcmul_": 213, "addcdiv_": 213, "clr": 213, "_make_spars": 213, "grad_indic": 213, "sparse_coo_tensor": [213, 216], "coalesc": [213, 263], "_indic": 213, "grad_valu": 213, "_valu": 213, "sparse_mask": [213, 216], "std_valu": 213, "sqrt_": 213, "state_sum2": 213, "masked_grad": 213, "get_data": [213, 215], "std2": 213, "masked_tensor": [213, 215, 216], "to_spars": [213, 216], "param2": [213, 233], "glanc": [213, 277], "dodg": 213, "make_spars": 213, "brittl": 213, "argu": 213, "densif": 213, "csc": [213, 216], "bsr": [213, 216], "bsc": 213, "conflat": 213, "disentangl": 213, "purposefulli": 213, "relianc": 213, "unreli": [213, 215], "maskedarrai": [213, 222], "maskedtensor_adagrad": [213, 232], "maskedtensor_overview": [214, 215, 216, 232], "Their": [214, 216], "unspecifi": [214, 215, 216, 222], "intersect": 214, "logical_or": 214, "to_tensor": [214, 215], "mt0": 214, "get_mask": [214, 215], "mt1": 214, "revisit": 214, "ma": 214, "masked_arrai": 214, "mask0": 214, "mask1": 214, "necessit": 214, "maskedtensor_advanced_semant": [214, 232], "as_masked_tensor": 215, "as_tensor": 215, "afterthought": 215, "born": 215, "recur": 215, "inabl": 215, "10729": 215, "troubl": 215, "52248": 215, "frustrat": 215, "4132": 215, "67180": 215, "longstand": 215, "unsaf": 215, "61474": 215, "nanmax": 215, "nanmin": 215, "lend": 215, "substructur": 216, "sparse_coo": 216, "sparse_csr": 216, "ndim": 216, "nse": 216, "int64": 216, "sparse_tensor_data": 216, "sparse_tensor_mask": 216, "dense_masked_tensor": 216, "to_sparse_coo": 216, "to_sparse_csr": 216, "nuanc": 216, "crow_indic": 216, "col_indic": 216, "nnz": 216, "to_dens": 216, "is_spars": 216, "is_sparse_coo": 216, "is_sparse_csr": 216, "mt": 216, "mt2": 216, "surfac": 216, "synergi": 216, "invest": 216, "maskedtensor_spars": [216, 232], "lesli": [217, 226, 228], "fang": [217, 226, 228], "onednn": [217, 226, 227, 238, 251, 252, 259], "torchinductor_max_autotune_gemm_backend": 217, "upfront": [217, 269], "torchinductor_freez": [217, 226, 227], "log_autotuning_result": 217, "amp_en": 217, "outperform": 217, "linear_unari": 217, "64x16": 217, "32x16": 217, "cpp_packed_gemm_0": 217, "2142": 217, "_linear_pointwis": 217, "2441": 217, "mkldnn": [217, 238, 251], "anymor": [217, 278], "cpp_fused__to_copy_relu_1": 217, "async_compil": 217, "cpp_pybind": 217, "kernel_micro_gemm_amx_kernel_32_2": 217, "amxstat": 217, "amx_stat": 217, "lda": 217, "ldb": 217, "ldc": 217, "uint8_t": 217, "tilecfg_row": 217, "kernel_micro_gemm": 217, "constexpr": 217, "num_thread": [217, 264], "64l": 217, "omp": [217, 298], "tid": 217, "omp_get_thread_num": 217, "mc_block_id": 217, "num_mc_blocks_per_thread": 217, "n_block_start": 217, "n_block_end": 217, "nc_block": 217, "kc": 217, "k_block_start": 217, "k_block_end": 217, "kc_block": 217, "nci": 217, "nc_block_end": 217, "m_end": 217, "m_start": 217, "16l": 217, "div_floor_integ": 217, "n_end": 217, "n_start": 217, "loadu": 217, "local_acc_buf": 217, "nr": 217, "tmp4": 217, "tmp5": 217, "tmp6": 217, "tmp7": 217, "tmp8": 217, "32l": 217, "invalu": 218, "nt": 218, "poss": 218, "irregularli": 218, "legal": 218, "semnat": 218, "qmodel": 220, "compare_weight": 220, "wt_compare_dict": 220, "sqnr": 220, "nomin": 220, "compare_model_output": 220, "white_list": 220, "outputlogg": 220, "default_numeric_suite_compare_model_output_white_list": 220, "myoutputlogg": 220, "prepare_model_with_stub": 220, "shadowlogg": 220, "compare_model_stub": 220, "quantizablebasicblock": 220, "myshadowlogg": 220, "db": [220, 223], "ON": [220, 250], "numeric_suite_tutori": [220, 232], "daniil": 221, "lyakhov": 221, "aamir": 221, "nazir": 221, "suslov": 221, "yamini": 221, "nimmagadda": 221, "kozlov": 221, "openvinoquant": 221, "quantize_pt2": [221, 223, 225, 226, 227], "prepare_pt2": [221, 223, 226, 227], "convert_pt2": [221, 223, 225, 226, 227], "traced_b": [221, 226, 227], "disable_patch": 221, "exported_model": [221, 223, 225, 226, 227], "prelu": 221, "quantizationpreset": 221, "modeltyp": 221, "ignored_scop": 221, "layer_1": 221, "layer_2": 221, "layer_3": 221, "ignoredscop": 221, "regex": 221, "layer_": 221, "subgraph": [221, 225], "target_devic": 221, "cpu_spr": 221, "targetdevic": 221, "fold_quant": 221, "optimized_model": [221, 226, 227], "smoothquant": 221, "biascorrect": 221, "calibration_load": 221, "transform_fn": 221, "data_item": 221, "calibration_dataset": 221, "smooth_quant": 221, "fast_bias_correct": 221, "pypi": [222, 253], "openvino": 222, "optimizi": 222, "nnapi": 222, "autovector": [222, 236], "maskedtensor": [222, 232], "coo": 222, "csr": 222, "flight": 222, "flightrecord": 222, "autoload": 222, "gpudirect": [222, 232], "_export": [223, 225, 226, 294], "14k": 223, "xnnpack_quant": [223, 225], "xnnpackquant": [223, 225, 228], "get_symmetric_quantization_config": [223, 225], "backendconfig": [223, 228], "fake_qu": 223, "embedding_byt": 223, "executorchquant": 223, "composed_quant": 223, "quantization_cap": 223, "minmax": 223, "capture_pre_autograd_graph": [223, 225, 226], "dynamic_dim": [223, 225], "themodel": 223, "fp32_op": 223, "qauntiz": 223, "quantized_linear": 223, "x_int8": 223, "x_scale": 223, "x_zero_point": 223, "weight_int8": 223, "weight_scal": [223, 228], "weight_zero_point": 223, "bias_fp32": 223, "output_scal": 223, "output_zero_point": 223, "x_fp32": 223, "quantized_decompos": 223, "dequantize_per_tensor": 223, "x_i8": 223, "x_quant_min": 223, "x_quant_max": 223, "weight_fp32": 223, "weight_i8": 223, "weight_quant_min": 223, "weight_quant_max": 223, "weight_permut": 223, "permute_copi": 223, "out_fp32": 223, "out_i8": 223, "out_scal": 223, "out_zero_point": 223, "out_quant_min": 223, "out_quant_max": 223, "float32_op": 223, "use_reference_represent": 223, "x_int16": 223, "weight_int16": 223, "acc_int32": 223, "out_dtyp": 223, "bias_scal": 223, "bias_int32": 223, "out_int8": 223, "clamp": [223, 237], "qmin": 223, "qmax": 223, "pt2e_quantized_model_file_path": 223, "resnet18_pt2e_quant": 223, "quantized_ep": 223, "loaded_quantized_ep": 223, "ptq": [225, 226], "prepare_qat_pt2": [225, 226], "move_exported_model_to_ev": [225, 226], "move_exported_model_to_train": 225, "_native_batch_norm_legit": 225, "cudnn_batch_norm": 225, "num_observer_update_epoch": 225, "num_batch_norm_update_epoch": 225, "num_epochs_between_ev": 225, "subseq": 225, "running_var": 225, "new_arg": 225, "prepared_model_copi": 225, "checkpoint_": 225, "weiwen": [226, 228], "xia": [226, 228], "x86inductorquant": 226, "spr": 226, "x86_inductor_quant": 226, "xiq": 226, "memory_format": [226, 227, 237, 238, 247, 250, 252], "channels_last": [226, 227, 238, 250, 252], "aten_graph": 226, "get_default_x86_inductor_quantization_config": 226, "is_dynam": [226, 227, 228], "converted_model": [226, 227], "qconvolut": [226, 227], "qlinear": [226, 227], "conting": [226, 227], "qmaxpool2d": [226, 227], "example_x86inductorquantizer_pytorch_2_1": 226, "torchbench": [226, 251], "shoud": 226, "example_x86inductorquantizer_qat": 226, "yan": 227, "zhiwei": 227, "eikan": 227, "liangang": 227, "river": 227, "cui": 227, "yifeng": 227, "xpuinductorquant": 227, "xpu_inductor_quantizer_exampl": 227, "xpu_inductor_quant": 227, "xpuiq": 227, "resnet18_weight": [227, 262], "get_default_xpu_inductor_quantization_config": 227, "histogramobserv": [227, 228], "perchannelminmaxobserv": 227, "quantizationspec": [227, 228], "xnnpack_quantizer_util": 227, "quantizationconfig": [227, 228], "type_check": 227, "_observerorfakequantizeconstructor": 227, "get_xpu_inductor_symm_quantization_config": 227, "extra_arg": 227, "act_observer_or_fake_quant_ctr": 227, "act_quantization_spec": [227, 228], "per_tensor_symmetr": [227, 228], "observer_or_fake_quant_ctr": [227, 228], "weight_observer_or_fake_quant_ctr": 227, "weight_quantization_spec": [227, 228], "per_channel_symmetr": 227, "ch_axi": 227, "oc": 227, "kh": 227, "kw": 227, "bias_quantization_spec": 227, "placehold": 227, "quantization_config": 227, "indcutor": 227, "kimish": 228, "patel": 228, "quantiat": 228, "qnnpackquant": 228, "quantizationannot": 228, "bitwidth": 228, "input_qspec_map": 228, "output_qspec": 228, "_annot": 228, "matcher": 228, "get_source_partit": 228, "add_partit": 228, "gm": 228, "add_nod": 228, "output_nod": 228, "input_act_qspec": 228, "output_act_qspec": 228, "input_act0": 228, "input_act1": 228, "quantization_annot": 228, "sharedquantizationspec": 228, "average_pool": 228, "edgeornod": 228, "conv1_out": 228, "conv2_out": 228, "qspec1": 228, "cat_input0": 228, "cat_input1": 228, "share_qparams_with_input_act0_qspec": 228, "fixedqparamsquantizationspec": 228, "act_qspec": 228, "sigmoid_nod": 228, "input_act": 228, "derivedquantizationspec": 228, "derive_qparams_fn": 228, "observerorfakequant": 228, "observerbas": 228, "fakequantizebas": 228, "obejct": 228, "obs_or_fq": 228, "fq": 228, "act_obs_or_fq": 228, "weight_obs_or_fq": 228, "act_scal": 228, "act_zp": 228, "calculate_qparam": 228, "weight_zp": 228, "bias_qspec": 228, "derived_from": 228, "backendquant": 228, "get_input_act_qspec": 228, "get_output_act_qspec": 228, "get_weight_qspec": 228, "get_bias_qspec": 228, "call_funct": 228, "relu_": [228, 237], "relu_nod": 228, "maybe_conv_nod": 228, "recognz": 228, "subgraphmatch": 228, "conv_relu_pattern": 228, "name_node_map": 228, "input_nod": 228, "weight_nod": 228, "bias_nod": 228, "yuanhao": 229, "ji": 229, "effortless": 229, "gaudi": 229, "hpu": 229, "huawei": 229, "torch_device_backend_autoload": 229, "torch_foo": 229, "_autoload": 229, "entry_point": 229, "habana_framework": 229, "__autoload": 229, "device_backend": 229, "is_load": 229, "entrypoint": 229, "_force_cutlass": 231, "10240": 231, "dense_output": 231, "dense_t": 231, "blocked_autorang": [231, 240, 264], "median": [231, 264, 279], "1e3": 231, "sparse_output": 231, "sparse_t": 231, "80gb": 231, "870m": 231, "630m": 231, "382x": 231, "weightnormsparsifi": 231, "preprocess_validation_funct": 231, "384": [231, 295], "only_second": 231, "return_overflowing_token": 231, "return_offsets_map": 231, "sample_map": 231, "overflow_to_sample_map": 231, "example_id": 231, "sequence_id": 231, "offset_map": 231, "preprocess_train_funct": 231, "start_posit": 231, "end_posit": 231, "start_char": 231, "answer_start": 231, "end_char": 231, "context_start": 231, "context_end": 231, "start_logit": 231, "end_logit": 231, "n_best": 231, "max_answer_length": 231, "example_to_featur": 231, "defaultdict": 231, "predicted_answ": 231, "feature_index": 231, "start_index": 231, "argsort": 231, "end_index": 231, "logit_scor": 231, "best_answ": 231, "prediction_text": 231, "theoretical_answ": 231, "measure_execution_tim": 231, "dataset_for_model": 231, "remove_column": 231, "set_format": 231, "batch_size_to_time_sec": 231, "column_nam": 231, "p50": 231, "automodelforquestionansw": 231, "squad_dataset": 231, "tokenized_squad_dataset": 231, "data_col": 231, "datacollatorwithpad": 231, "hyperparam": 231, "training_arg": 231, "trainingargu": 231, "lr_scheduler_typ": 231, "per_device_train_batch_s": 231, "per_device_eval_batch_s": 231, "fp16_baselin": 231, "fp16_time": 231, "cuda_fp16": 231, "exact_match": 231, "53358561967833": 231, "9280493093186": 231, "927572380751371": 231, "607915310189128": 231, "18846387788653": 231, "91255673766136": 231, "sparsity_level": 231, "elemen": 231, "sparse_block_shap": 231, "zeros_per_block": 231, "sparse_config": 231, "tensor_fqn": 231, "fqn": [231, 243, 244], "named_modul": 231, "paramter": 231, "bertoutput": 231, "parametrizedlinear": 231, "fakespars": 231, "elementwise_affin": 231, "59602649006622": 231, "51610004515979": 231, "set_printopt": [231, 264], "edgeitem": 231, "0237": 231, "0130": 231, "0462": 231, "0272": 231, "0436": 231, "0492": 231, "0844": 231, "0340": 231, "0302": 231, "0350": 231, "0303": 231, "0175": 231, "0529": 231, "0327": 231, "0213": 231, "0258": 231, "0239": 231, "0380": 231, "0562": 231, "0432": 231, "0262": 231, "0227": 231, "0244": 231, "0921": 231, "0784": 231, "0761": 231, "0225": 231, "0395": 231, "0684": 231, "0344": 231, "metrics_spars": 231, "sparse_perf": 231, "43897824030275": 231, "48718950090766": 231, "621004460379481": 231, "368514601141214": 231, "702805917710066": 231, "244": [231, 259], "19364519417286": 231, "87x": 231, "015": 232, "torchao": 232, "torchscript_freez": [232, 234], "vmap_recip": [232, 236], "uniform": [233, 298], "orthogonal_": 233, "skip_init": 233, "param1": 233, "kaiming_uniform_": 233, "register_buff": 233, "some_buff": 233, "intial": 233, "0107": 234, "0048": 234, "42368": 236, "unsuccessfulli": 236, "rummag": 236, "shenanigin": 236, "8304": 236, "23475": 236, "performantli": 236, "7786": 236, "batch_of_sampl": 236, "grad_sampl": 236, "ivan": 237, "kobzarev": 237, "use_vulkan": 237, "vulkan_wrapp": 237, "use_vulkan_wrapp": 237, "libvulkan": 237, "vulkansdk": 237, "lunarg": 237, "vulkan_sdk": 237, "vulkan_sdk_root": 237, "install_vulkan": 237, "pytorch_root": 237, "use_vulkan_shaderc_runtim": 237, "macosx_deployment_target": 237, "41237a4": 237, "android_abi": [237, 250], "v8a": [237, 250], "build_android": [237, 250], "pytorch_android": 237, "aar": 237, "build_pytorch_android": 237, "script_model": 237, "mobilenet2": 237, "32bit": 237, "mobile_optim": [237, 250], "optimize_for_mobil": [237, 250], "script_model_vulkan": 237, "optimization_blocklist": 237, "mobileoptimizertyp": 237, "vulkan_automatic_gpu_transf": 237, "is_vulkan_avail": 237, "tensor_vulkan": 237, "tensor_output_vulkan": 237, "tensor_output": 237, "_adaptive_avg_pool2d": 237, "_cat": 237, "avg_pool2d": 237, "hardtanh_": 237, "transpose_": 237, "upsample_nearest2d": 237, "floatbuff": 237, "allocatefloatbuff": 237, "fromblob": 237, "mmodul": 237, "test_app": 237, "testapp": 237, "mainact": 237, "l133": 237, "apploc": 237, "gradl": 237, "installmbvulkanlocalbasedebug": 237, "mbq": 237, "swiftshad": 237, "googlesourc": 237, "tmul": 238, "gen": 238, "avx": [238, 252], "vnni": [238, 252], "024": 238, "conv3d": [238, 280], "conv_transpose1d": 238, "conv_transpose2d": 238, "conv_transpose3d": 238, "baddbmm": 238, "addbmm": 238, "onednn_verbos": 238, "verbose_on": 238, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 238, "nthr": 238, "isa": [238, 280], "prim_templ": 238, "prop_kind": 238, "memory_descriptor": 238, "problem_desc": 238, "exec_tim": 238, "exec": 238, "reorder": [238, 251, 259, 280], "undef": 238, "src_f32": 238, "f0": 238, "dst_f32": 238, "scratchpad": 238, "2561": 238, "avx512_core_amx_bf16": 238, "forward_train": 238, "src_bf16": 238, "acdb": 238, "wei_bf16": 238, "abcd16b16a2b": 238, "bia_f32": 238, "dst_bf16": 238, "alg": 238, "convolution_direct": 238, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 238, "628906": 238, "brg": 238, "avx512_core_amx_int8": 238, "src_s8": 238, "wei_s8": 238, "ba16a64b4a": 238, "dst_s8": 238, "1x30522": 238, "30522x768": 238, "1x768": 238, "66382": 238, "lazo": [240, 241, 249, 291, 296], "get_device_cap": 240, "benchmark_torch_function_in_microsecond": 240, "eager_runtim": 240, "compiled_runtim": 240, "747": 240, "2437149845064u": 240, "392": 240, "07384741178u": 240, "linearlr": 241, "compiling_optimizer_lr_schedul": [241, 287], "set_device_map": 242, "worker0": 242, "worker1": 242, "payload": [242, 277], "infiniband": 242, "cma": 242, "comm_mod": [242, 245], "pend": [242, 278], "current_stream": 242, "tensorpiperpcbackendopt": 242, "num_worker_thread": 242, "rpc_backend_opt": 242, "34x": 242, "3145179748535156": 242, "06867480278015137": 242, "luca": [243, 244], "pasqualin": [243, 244], "iri": [243, 244, 246], "rodrigo": [243, 244], "kumpera": [243, 244], "async_sav": 243, "checkpoint_size_per_rank": 243, "number_of_rank": 243, "pageabl": 243, "get_state_dict": [243, 244], "set_state_dict": [243, 244], "appstat": [243, 244], "protocol": [243, 244], "load_stat_dict": [243, 244], "sharded_state_dict": [243, 244], "optim_state_dict": [243, 244], "run_fsdp_checkpoint_save_exampl": [243, 244], "checkpoint_futur": 243, "checkpoint_id": [243, 244], "_step": 243, "attack": 243, "storagewrit": 243, "cached_state_dict": 243, "storage_writ": 243, "adddition": 244, "run_fsdp_checkpoint_load_exampl": 244, "run_checkpoint_load_exampl": 244, "format_util": 244, "torch_to_dcp": 244, "dcp_to_torch": 244, "dcp_to_torch_sav": 244, "torch_save_to_dcp": 244, "torch_save_checkpoint_dir": 244, "torch_save_checkpoint": 244, "_new": 244, "anshul": 245, "sinha": 245, "distributedtensor": 245, "interoper": 245, "mlpmodul": 245, "generate_comm_debug_tracing_t": 245, "noise_level": 245, "log_comm_debug_tracing_table_to_fil": 245, "file_nam": [245, 295], "transformer_operation_log": 245, "generate_json_dump": 245, "c10d_function": 245, "comm_mode_features_exampl": 245, "effortlessli": 246, "homogen": 246, "num_node_devic": 246, "shard_rank_list": 246, "shard_group": 246, "current_shard_group": 246, "current_replicate_group": 246, "shard_factor": 246, "replicate_group_rank": 246, "replicate_group": 246, "2d_setup": 246, "thru": 246, "get_group": 246, "mesh_dim": 246, "2d_setup_with_device_mesh": 246, "meshshap": 246, "mesh_3d": 246, "hsdp_mesh": 246, "tp_group": 246, "quasi": 247, "hyperbol": 247, "qhm": 247, "qhm_updat": 247, "dp_list": 247, "momentum_buffer_list": 247, "nu": 247, "weight_decay_typ": 247, "d_p": 247, "momentum_buff": 247, "polymorph": 247, "functionalqhm": 247, "params_with_grad": 247, "preserve_format": 247, "functional_optim_map": 247, "remote_params_list": 247, "dist_optim": 247, "_foreach": 249, "horizton": 249, "annotatedconvbnrelumodel": 250, "prepare_sav": 250, "torchscript_model": 250, "torchscript_model_optim": 250, "model_fus": 250, "bnrelu2d": 250, "build_pytorch_mobil": 250, "dbuild_binari": 250, "speed_benchmark_torch": 250, "adb": 250, "shell": 250, "input_dim": 250, "input_typ": 250, "6189": 250, "575": 250, "6216": 250, "858": 250, "sunita": 251, "nadamp": 251, "graviton3": 251, "sve": 251, "simd": 251, "graviton2": 251, "bla": 251, "acl": 251, "c7g": 251, "bfloa16": 251, "r7g": 251, "m7g": 251, "4vcpu": 251, "profileract": [251, 270], "myneuralnetwork": 251, "linear_relu_stack": 251, "11008": 251, "pred_probab": 251, "mymodel_infer": 251, "813": 251, "255m": 251, "177": 251, "032m": 251, "160u": 251, "162": [251, 264], "054m": 251, "540": 251, "180u": 251, "738m": 251, "201": 251, "955m": 251, "985": 251, "282m": 251, "043m": 251, "810u": 251, "356m": 251, "179": 251, "388m": 251, "896": 251, "940u": 251, "mmla": 251, "dnnl_default_fpmath_mod": 251, "943": 251, "052": 251, "507m": 251, "167": [251, 298], "653m": 251, "838": 251, "265u": 251, "107": 251, "593m": 251, "358": 251, "643u": 251, "167m": 251, "262": 251, "911m": 251, "060": 251, "533m": 251, "414m": 251, "892m": 251, "307u": 251, "281m": 251, "934m": 251, "849": [251, 264], "670u": 251, "fastmath": 251, "821": 251, "914": 251, "713m": 251, "244m": 251, "711": 251, "220u": 251, "322m": 251, "307": 251, "740u": 251, "094": 251, "495m": 251, "921": 251, "736m": 251, "131m": 251, "441m": 251, "803u": 251, "186m": 251, "720": 251, "930u": 251, "848": 251, "309m": 251, "706": 251, "545u": 251, "916m": 251, "720u": 251, "431m": 251, "471m": 251, "951": 251, "027m": 251, "243m": 251, "143u": 251, "928m": 251, "143": [251, 298], "237m": 251, "185u": 251, "47x": 251, "till": [251, 261], "torch_mkldnn_matmul_min_dim": 251, "958": 251, "124m": 251, "620u": 251, "951m": 251, "170u": 251, "423m": 251, "034": 251, "691m": 251, "988": 251, "628m": 251, "520m": 251, "945m": 251, "817u": 251, "136": 251, "910u": 251, "781": 251, "604m": 251, "295": 251, "437m": 251, "477m": 251, "516m": 251, "558": 251, "387u": 251, "708m": 251, "788": 251, "627m": 251, "982m": 251, "385m": 251, "617u": 251, "932m": 251, "369m": 251, "487m": 251, "038m": 251, "060m": 251, "300u": 251, "013m": 251, "106": 251, "710u": 251, "521m": 251, "750m": 251, "216": 251, "475m": 251, "033m": 251, "110u": 251, "285m": 251, "345m": 251, "725u": 251, "margin": 251, "thp_mem_alloc_en": 251, "321": 251, "069m": 251, "568m": 251, "613m": 251, "602m": 251, "682": 251, "007u": 251, "777m": 251, "697": 251, "082m": 251, "329": 251, "097m": 251, "547m": 251, "115m": 251, "626m": 251, "avx512": 252, "amx": [252, 253], "xmx": 252, "claus": [252, 253, 299], "nhwc": 252, "cooper": 252, "roialign": 252, "intel_extension_for_pytorch": [252, 288], "ipex": [252, 284, 288], "bertmodel": 252, "seq_length": 252, "check_trac": 252, "cache_en": 252, "memoryformat": 252, "channelslast": 252, "intel_ext_pt_cpu": 252, "libpytorch_path": 252, "ldd": 252, "workspac": 252, "cmake_have_libc_pthread": 252, "0x00007f3cf98e0000": 252, "libc10": 252, "0x00007f3cf985a000": 252, "libintel": 252, "ext": 252, "0x00007f3cf70fc000": 252, "libtorch_cpu": [252, 279], "0x00007f3ce16ac000": 252, "libdnnl_graph": 252, "0x00007f3cde954000": 252, "mitig": [253, 280], "conv2_drop": 253, "fc1_drop": 253, "lenet_mnist_model": 253, "pytorch_fx": 253, "accuracy_criterion": 253, "neural_compressor": 253, "calib_dataload": 253, "q_model": 253, "top1metr": 253, "quant_aware_train": 253, "training_func": 253, "q_func": 253, "dummy_dataset": 253, "dummydataset": 253, "2021": 253, "linearrelu": 253, "best_configur": 253, "best_model_weight": 253, "int8_model": 253, "gui": [259, 284], "emit_itt": 259, "8080": 259, "path_of_launch": 259, "iteration_n": 259, "range_push": 259, "range_pop": 259, "oneapi": 259, "brown": 259, "percerntag": 259, "jitter": [259, 264], "enrich": 259, "queue": [259, 280], "ittsampl": 259, "292820": 259, "unmark": 259, "iteration_": 259, "basefold": 259, "bash_sourc": 259, "ota": 261, "incept": 261, "print_model_s": 261, "mdl": 261, "model_dynamic_quant": 261, "qconfig_spec": 261, "model_static_quant": 261, "98mb": 261, "tra": 261, "model_qat": 261, "gradcam": 262, "bytesio": 262, "imagenet1k_v1": 262, "freepik": 262, "puppi": 262, "dog_58409": 262, "6024": 262, "center_crop": 262, "283": 262, "occlus": 262, "labrador": 262, "sliding_window_shap": 262, "occlud": 262, "attribution_dog": 262, "persian": 262, "attribution_cat": 262, "deconvolut": 262, "guidedbackprop": 262, "deeplift": 262, "gradientshap": 262, "forward_func": 262, "pictori": 262, "textual": 262, "vis_typ": 262, "heat_map": 262, "original_imag": 262, "vis_sign": 262, "distractor": 262, "show_colorbar": 262, "visualize_text": 262, "imdb_torchtext_interpret": 262, "gilbert": 262, "tanner": 262, "gilberttann": 262, "captum_recip": [262, 268, 276], "carilli": 263, "ture": 263, "kepler": 263, "maxwel": 263, "pascal": 263, "modest": 263, "in_siz": 263, "out_siz": 263, "num_lay": 263, "underflow": 263, "scaler": 263, "unscal": 263, "unscale_": 263, "rough": 263, "binary_cross_entropy_with_logit": 263, "suspect": 263, "docstr": 263, "subregion": 263, "backtrac": 263, "torch_show_cpp_stacktrac": 263, "amp_recip": [263, 268, 276], "tediou": 264, "mistak": 264, "mul_sum": 264, "0x7fb10400d0f0": 264, "batched_dot_mul_sum": 264, "379": 264, "0x7fb103d67048": 264, "batched_dot_bmm": 264, "sub_label": 264, "0x7fb103d54080": 264, "118": 264, "0x7fb16935d2e8": 264, "2775": 264, "0x7fb10400d080": 264, "min_run_tim": [264, 279], "274": 264, "748": 264, "432": [264, 270], "22657": 264, "11899": 264, "609": 264, "23098": 264, "27246": 264, "267073": 264, "118823": 264, "189": 264, "2782": 264, "7471": 264, "11874": 264, "173": 264, "7264": 264, "27824": 264, "100060": 264, "121499": 264, "2773": 264, "12833": 264, "6295": 264, "27062": 264, "71804": 264, "120365": 264, "103": 264, "2804": 264, "6764": 264, "11871": 264, "6640": 264, "27592": 264, "73003": 264, "120083": 264, "callgrindstat": [264, 279], "trip": [264, 279], "batched_dot": 264, "36000": 264, "40000": 264, "stark": 264, "fuzzer": 264, "10000000": 264, "k0": 264, "k1": 264, "discontigu": 264, "725": 264, "383": 264, "1468": 264, "5039": 264, "2140": 264, "1296": 264, "41000": 264, "1598": 264, "310": 264, "763": 264, "1082": 264, "473": 264, "16384": 264, "12642115": 264, "4800": 264, "20400": 264, "110000": 264, "400000": 264, "493": 264, "1100": [264, 279], "2440": 264, "870": 264, "2030": 264, "495": 264, "23600": 264, "24000": [264, 279], "62374": 264, "90000": 264, "240372": 264, "16000": 264, "40156": 264, "2670": 264, "opac": 264, "complementari": 264, "insensit": 264, "environment": 264, "cpp_lib": 264, "batched_dot_src": 264, "extra_cflag": 264, "extra_include_path": 264, "getenv": 264, "batched_dot_mul_sum_v0": 264, "batched_dot_mul_sum_v1": 264, "module_import_str": 264, "67631": 264, "importlib": 264, "spec_from_file_loc": 264, "repr": 264, "module_from_spec": 264, "exec_modul": 264, "textwrap": 264, "pretty_print": 264, "t_baselin": 264, "stats_v0": 264, "collect_callgrind": 264, "stats_v1": 264, "as_standard": [264, 279], "denois": 264, "cancel": [264, 280], "ing": 264, "wrap_pybind_function_impl_": 264, "linewidth": 264, "valgrind_wrapp": [264, 279], "timer_interfac": [264, 279], "0x7fb0f06e7630": 264, "2392671": 264, "4367": 264, "rel_with_deb_info": [264, 279], "0x7fb10400d208": 264, "2378978": 264, "functioncount": [264, 279], "0x7fb1000ab358": 264, "0x000000000020d9e0": 264, "0x000000000020db10": 264, "integer_sequ": 264, "0ul": 264, "1ul": 264, "5200": 264, "undefinedtensorimpl": 264, "reset_": 264, "5935": 264, "0x000000000022c0e0": 264, "13693": 264, "changing_default_devic": [265, 276], "subsidiari": [266, 281, 282], "neighbor": [266, 280], "sharp": 266, "blurri": 266, "defining_a_neural_network": [266, 268, 276], "postprocess": 267, "quanitz": 267, "float_lstm": 267, "mileag": 267, "quantized_lstm": 267, "documentaion": 267, "dynamic_quant": [267, 268, 276], "what_is_state_dict": [268, 276, 282], "saving_and_loading_models_for_infer": 268, "custom_dataset_transforms_load": 268, "warmstarting_model_using_parameters_from_a_different_model": [268, 276, 281], "zeroing_out_gradi": [268, 276, 283], "mobile_perf": 268, "regional_compil": [268, 285, 287], "syntaxerror": [268, 276], "undesir": 269, "unload": 269, "somemodul": 269, "param_in_model": 269, "param_in_state_dict": 269, "set_swap_module_params_on_convers": [269, 277], "swap_tensor": [269, 276], "module_load_state_dict_tip": [269, 276], "shivam": 270, "raikundalia": 270, "model_infer": 270, "_fork": 270, "509m": 270, "503m": 270, "931m": 270, "597m": 270, "700m": 270, "585m": 270, "_convolut": 270, "450m": 270, "mkldnn_convolut": 270, "838m": 270, "114m": 270, "556m": 270, "batch_norm": 270, "693m": 270, "734": 270, "_batch_norm_impl_index": 270, "482m": 270, "724": 270, "100u": 270, "native_batch_norm": 270, "229m": 270, "705": 270, "450u": 270, "332": 270, "631m": 270, "286u": 270, "668m": 270, "292m": 270, "988u": 270, "549m": 270, "dnn": 270, "group_by_input_shap": 270, "008m": 270, "956m": 270, "909m": 270, "834m": 270, "332m": 270, "303m": 270, "273m": 270, "233m": 270, "751m": 270, "occurr": 270, "666m": 270, "484m": 270, "_convolution_nogroup": 270, "thnn_conv2d": 270, "thnn_conv2d_forward": 270, "im2col_kernel": 270, "844m": 270, "sgemm_32x32x32_nn": 270, "206m": 270, "sgemm_32x32x32_nn_vec": 270, "093m": 270, "015m": 270, "567m": 270, "871m": 270, "560u": 270, "convolution_overrid": 270, "gen_conv": 270, "216u": 270, "640u": 270, "632u": 270, "conv_reord": 270, "880u": 270, "448u": 270, "712": 270, "486m": 270, "max_pool2d_with_indic": 270, "kb": 270, "572": 270, "resize_": 270, "masked_select": 270, "122": 270, "064m": 270, "viewer": 270, "439": 270, "_conv_forward": 270, "1051": 270, "_call_impl": 270, "016m": 270, "659m": 270, "skip_first": 270, "step_num": 270, "profiler_recip": [270, 276], "reasoning_about_shap": [271, 276], "009": 276, "recipes_recip": 276, "tensorboard_with_pytorch": [276, 278], "timer_quick_start": [276, 279], "tuning_guid": [276, 280], "hereaft": 277, "__class__": 277, "__slots__": 277, "pertin": 277, "__torch_dispatch__": [277, 295], "new_param": 277, "myquantizedlinearweight": 277, "__setattr__": 277, "module_load": 277, "__torch_function__": 277, "param_kei": 277, "scalar_valu": 278, "walltim": 278, "tfevent": 278, "0x7f1929a38ed0": 279, "iqr": 279, "424": 279, "0x7f192b019ed0": 279, "unsurprisingli": 279, "0x7f1929a35850": 279, "563600": 279, "tensormethod": 279, "ab_ref": 279, "0x7f192a6dfd90": 279, "47264": 279, "_int_fre": 279, "25963": 279, "_int_malloc": 279, "19900": 279, "tensorit": 279, "tensoriteratorconfig": 279, "18000": 279, "__tls_get_addr": 279, "13500": 279, "malloc": [279, 280, 298], "11300": 279, "smallvector": 279, "10345": 279, "_int_memalign": 279, "9200": 279, "iteratorbas": 279, "get_strid": 279, "173472": 279, "0x7f192995d750": 279, "118200": 279, "tensoriter": 279, "65000": 279, "20900": 279, "15900": 279, "15100": 279, "cpualloc": 279, "12500": 279, "352327": 279, "a0": 279, "b0": 279, "a1": 279, "a127": 279, "pickleabl": 279, "broadcasting_stat": 279, "17600": 279, "tensoriteratorbas": 279, "compute_strid": 279, "12700": 279, "allocate_or_resize_output": 279, "10200": 279, "smallvectorimpl": 279, "7400": 279, "6200": 279, "invert_perm": 279, "6064": 279, "5100": 279, "reorder_dimens": 279, "4300": 279, "compatible_strid": 279, "check_tensor_options_and_extract_memory_format": 279, "__memcmp_avx2_movb": 279, "empty_cpu": 279, "1300": 279, "2400": 279, "6100": 279, "compute_fast_setup_typ": 279, "22600": 279, "fast_set_up": 279, "58091": 279, "580": 279, "0x7f19299544d0": 279, "compute_shap": 279, "2300": 279, "coalesce_dimens": 279, "promin": 279, "__add__": 279, "__sub__": 279, "dice": 279, "szymon": 280, "migacz": 280, "set_to_non": 280, "elementwis": [280, 296], "anomali": 280, "detect_anomali": 280, "set_detect_anomali": 280, "emit_nvtx": 280, "nth": 280, "cpunodebind": 280, "membind": 280, "pytorch_script": 280, "omp_num_thread": [280, 298], "thrash": 280, "gomp_cpu_affin": 280, "omp_proc_bind": 280, "omp_schedul": 280, "libgomp": [280, 298], "sleep": 280, "jemalloc": [280, 298], "tcmalloc": [280, 298], "emphas": 280, "optimize_for_infer": 280, "avx512_bf16": 280, "ccl": 280, "set_float32_matmul_precis": 280, "judgment": 283, "itt": 284, "vtune": 284, "set_stanc": [284, 287], "usecas": 284, "torchcompil": 284, "prebuilt": 284, "torchscipt": 284, "pod": 284, "andriod": 284, "run_cpu": 284, "graviton": 284, "compressor": 284, "tensorpip": 284, "dcp": 284, "commdebugmod": 284, "animesh": 285, "jain": 285, "startup": 285, "inline_inbuilt_nn_modul": 285, "graph_cod": 285, "strateg": 285, "torch_compiler_set_stance_tutori": [287, 293], "torch_compile_torch_function_mod": [287, 291], "torch_compile_user_defined_triton_kernel_tutori": [287, 292], "sphx_glr_recipes_torch_export_aoti_python": 287, "torch_export_aoti_python": [287, 294], "compile_model": 288, "resnet50_weight": 288, "weights_prepack": 288, "oguz": [289, 290, 292], "ulgen": [289, 290, 292], "sam": [289, 295], "larsen": 289, "fxgraphcach": [289, 290], "aotautogradcach": [289, 290], "redi": [289, 290], "usernam": 289, "aotautograd": [289, 290], "fxgraph": 289, "torchinductor_": 289, "torchinductor_myusernam": [289, 290], "triton_cache_dir": 289, "torchinductor_redis_host": 289, "torchinductor_redis_port": 289, "6379": 289, "cachebench": 290, "onward": 290, "save_cache_artifact": 290, "load_cache_artifact": 290, "artifact_byt": 290, "cache_info": 290, "pgo": 290, "tritoncach": 290, "inductorcach": 290, "autotuningcach": 290, "torchinductor_cache_dir": 290, "basetorchfunctionmod": 291, "flopcountermod": 292, "wrap_triton": 292, "footgun": 292, "register_kernel": 292, "register_flop_formula": 292, "flop_count": 292, "mysin": 292, "reappli": 293, "force_eag": 293, "eager_on_recompil": 293, "fail_on_recompil": 293, "torch.export": 294, "torch._inductor.aoti_compile_and_packag": 294, "aot_compil": 294, "torch._export.aoti_load_packag": 294, "ankith": [294, 295], "gunap": [294, 295], "aot_load": 294, "max_autotun": 294, "runner": 294, "archive_format": 294, "10088": 294, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 294, "17160": 294, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 294, "16616": 294, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 294, "17776": 294, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 294, "10856": 294, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 294, "14608": 294, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 294, "11376": 294, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 294, "10984": 294, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 294, "14736": 294, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 294, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 294, "11624": 294, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 294, "15632": 294, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 294, "25472": 294, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 294, "139389": 294, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 294, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 294, "47195424": 294, "47523148": 294, "jordi": 295, "ramon": 295, "marco": 295, "carranza": 295, "mvit": 295, "whisper": 295, "blip": 295, "sam2": 295, "timm": 295, "multiscal": 295, "kinet": 295, "mvit_v1_b_weight": 295, "mvit_v1_b": 295, "224x224x3": 295, "input_fram": 295, "num_clip": 295, "print_exc": 295, "batch_dim": 295, "asr": 295, "transcrib": 295, "spoken": 295, "680k": 295, "whisperprocessor": 295, "whisperforconditionalgener": 295, "decoder_input_id": 295, "decoder_start_token_id": 295, "internaltorchdynamoerror": 295, "attributeerror": 295, "dynamiccach": 295, "key_cach": 295, "non_strict": 295, "proxytensor": 295, "gameplai": 295, "gamer": 295, "salesforc": 295, "blip_decod": 295, "caption_input": 295, "model_url": 295, "googleapi": 295, "sfr": 295, "model_base_capfilt_larg": 295, "exportdb": 295, "bos_token_id": 295, "anaconda3": 295, "functional_tensor": 295, "545": 295, "outs_unwrap": 295, "_op_dk": 295, "sam2imagepredictor": 295, "_predict": 295, "unnorm_coord": 295, "unnorm_box": 295, "mask_input": 295, "multimask_output": 295, "return_logit": 295, "image_predict": 295, "sam2_image_predictor": 295, "359": 295, "exporthelp": 295, "model_to_export": 295, "aoti": 295, "repl": 297, "r18": 297, "r18_script": 297, "unscripted_output": 297, "unscript": 297, "scripted_output": 297, "unscripted_top5": 297, "scripted_top5": 297, "463": 297, "731": 297, "msg_without_backtrac": 297, "output_sm": 297, "softmaxfuncopt": 297, "top5_tensor": 297, "ndone": 297, "418": 297, "644": 297, "cpulongtyp": 297, "exposit": 297, "preload": 298, "tunabl": 298, "taskset": 298, "uma": 298, "lscpu": 298, "9480": 298, "223": 298, "vendor": 298, "genuineintel": 298, "node0": 298, "node1": 298, "cento": 298, "yum": 298, "libiomp": 298, "perftool": 298, "gperftool": 298, "libjemalloc2": 298, "ninstanc": 298, "ncore": 298, "program_arg": 298, "iomp": 298, "prepend": 298, "core_id": 298, "dafault": 298, "ncores_per_inst": 298, "libtcmalloc": 298, "preliminarili": 298, "deepspe": 299, "marian": 299, "oftentim": 299, "exp_avg": 299, "exp_avg_sq": 299, "print_peak_memori": 299, "max_memory_alloc": 299, "use_zero": 299, "optimizer_class": 299, "992": 299, "1361": 299, "3453": 299, "6123046875": 299, "1697": 299}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 24, 114, 115, 116, 117, 118], "live": 0, "tutori": [0, 40, 43, 55, 56, 58, 60, 63, 92, 99, 105, 125, 128, 131, 132, 134, 167, 173, 174, 176, 177, 184, 191, 192, 195, 196, 197, 207, 220, 224, 230, 252, 253, 294], "torchrl": [1, 16, 176], "object": [1, 107, 139, 195], "code": [1, 2, 8, 16, 26, 40, 41, 60, 99, 203, 207, 213, 237, 259], "ddpg": 1, "loss": [1, 14, 41, 49, 52, 55, 58, 100, 104, 105, 106, 137, 141, 150, 176, 263, 283], "overview": [1, 20, 66, 114, 118, 125, 142, 150, 157, 181, 193, 200, 215, 243, 253], "prerequisit": [1, 41, 105, 114, 118, 174, 175, 200, 207, 217, 221, 226, 227, 228, 245, 249, 285, 289, 290, 292, 293, 294, 295], "import": [1, 14, 50, 61, 93, 151, 189, 223, 225, 266, 270, 281, 282, 283, 297], "setup": [1, 20, 22, 27, 93, 113, 142, 149, 150, 151, 163, 171, 175, 186, 187, 197, 198, 206, 220, 231, 240, 241, 249, 266, 281, 282, 283, 285, 296], "lossmodul": 1, "The": [1, 7, 8, 93, 95, 104, 138, 171, 172, 182, 196, 259], "__init__": [1, 38], "method": [1, 17, 26, 149, 163, 195, 216, 277], "valu": [1, 150, 167, 176, 192], "estim": [1, 159], "actor": 1, "put": [1, 159, 175, 195], "thing": [1, 16], "togeth": [1, 16, 137, 159, 166, 175, 195, 263], "forward": [1, 6, 7, 25, 120, 135, 142, 154, 158, 195, 196], "call": [1, 190], "environ": [1, 16, 27, 59, 136, 150, 159, 176, 189, 205, 208], "transform": [1, 9, 16, 46, 47, 57, 100, 129, 130, 134, 137, 151, 158, 168, 170, 171, 176, 181, 184, 196], "parallel": [1, 9, 25, 50, 60, 62, 66, 131, 133, 134, 135, 137, 147, 148, 162, 170, 171, 198, 246, 280], "execut": [1, 5, 16, 22, 115, 171, 178, 186, 270, 280], "normal": [1, 49, 176, 283], "observ": [1, 203], "stat": 1, "build": [1, 4, 5, 6, 12, 26, 27, 37, 100, 107, 155, 156, 172, 174, 196, 235, 237, 250, 283, 297], "model": [1, 5, 7, 9, 11, 14, 20, 22, 23, 24, 25, 29, 37, 41, 42, 43, 50, 55, 61, 66, 80, 81, 90, 96, 98, 100, 102, 104, 105, 110, 112, 114, 115, 122, 124, 128, 129, 134, 135, 137, 138, 145, 147, 150, 151, 152, 156, 159, 160, 162, 163, 170, 171, 173, 174, 175, 182, 184, 186, 187, 189, 195, 197, 201, 202, 206, 220, 221, 223, 225, 234, 237, 240, 241, 249, 250, 252, 253, 257, 258, 259, 262, 266, 267, 270, 274, 275, 280, 281, 282, 294, 295, 297], "explor": [1, 5, 22], "data": [1, 7, 9, 11, 23, 30, 38, 42, 49, 50, 55, 56, 58, 60, 61, 62, 93, 100, 103, 113, 128, 133, 134, 135, 137, 140, 141, 147, 174, 176, 182, 184, 186, 187, 189, 192, 193, 200, 201, 215, 220, 254, 266, 280, 281, 282, 283], "collector": [1, 150, 176], "evalu": [1, 55, 128, 138, 139, 140, 151, 174, 182, 202, 206, 223, 263], "your": [1, 5, 6, 12, 16, 38, 66, 98, 102, 113, 120, 165, 195, 203, 205, 246, 266, 297], "record": [1, 186, 200], "replai": [1, 150, 176, 177], "buffer": [1, 150, 176, 280], "storag": [1, 204, 295], "batch": [1, 10, 16, 143, 155, 158, 178, 251, 280, 295], "size": [1, 151, 206, 223, 267, 295], "modul": [1, 5, 7, 17, 29, 72, 90, 100, 113, 120, 121, 150, 151, 154, 167, 173, 193, 220, 233, 250, 269, 277, 295], "construct": [1, 22, 61, 215, 216], "target": [1, 159, 280], "network": [1, 7, 37, 49, 52, 58, 93, 107, 110, 140, 141, 150, 159, 176, 177, 182, 184, 196, 263, 266, 281, 282, 283], "updat": [1, 52, 159, 178, 233], "optim": [1, 41, 42, 49, 58, 74, 104, 107, 113, 115, 121, 135, 139, 166, 180, 193, 240, 241, 247, 251, 280, 282, 283, 286, 298, 299], "time": [1, 21, 24, 44, 53, 75, 79, 87, 91, 101, 111, 119, 120, 123, 151, 175, 183, 232, 270, 276, 279, 285, 287, 289, 290], "train": [1, 3, 4, 7, 9, 13, 16, 18, 23, 28, 37, 38, 49, 55, 58, 59, 61, 93, 95, 98, 102, 104, 107, 122, 128, 131, 134, 137, 138, 140, 141, 145, 146, 149, 150, 159, 166, 170, 174, 176, 177, 182, 184, 187, 193, 201, 202, 221, 223, 225, 226, 227, 252, 253, 261, 280, 283, 288, 292], "polici": [1, 16, 134, 150, 176], "experi": [1, 16, 17, 139, 197], "result": [1, 3, 50, 58, 80, 115, 120, 139, 140, 144, 176, 182, 184, 186, 193, 206, 231, 259, 262, 264], "conclus": [1, 2, 3, 4, 6, 7, 11, 16, 17, 18, 20, 23, 25, 26, 27, 55, 87, 105, 114, 115, 118, 125, 136, 137, 142, 150, 151, 156, 157, 159, 166, 169, 171, 176, 181, 190, 192, 193, 196, 198, 200, 201, 204, 205, 206, 207, 208, 213, 214, 215, 216, 217, 218, 220, 221, 223, 225, 226, 227, 228, 229, 231, 234, 238, 241, 243, 244, 245, 246, 249, 251, 269, 277, 285, 289, 290, 291, 292, 293, 294, 295, 296, 298], "next": [1, 49, 58, 80, 175, 176], "step": [1, 5, 125, 166, 171, 172, 175, 176, 186, 196, 250, 264, 266, 267, 270, 281, 282, 283, 285], "autograd": [2, 4, 10, 12, 36, 48, 68, 69, 82, 95, 121, 138, 142, 154, 180], "c": [2, 3, 4, 5, 6, 7, 8, 10, 12, 26, 27, 207, 237, 252, 279, 297], "frontend": [2, 7, 90, 92], "basic": [2, 7, 25, 29, 39, 40, 142, 147, 154, 169, 172, 178, 190, 192, 234, 251, 292], "oper": [2, 4, 6, 8, 10, 12, 18, 26, 27, 45, 54, 95, 109, 118, 169, 197, 215, 216, 218, 228, 238, 280], "comput": [2, 16, 21, 36, 44, 48, 53, 75, 79, 87, 91, 101, 109, 111, 112, 119, 123, 128, 158, 163, 174, 183, 232, 262, 276, 280, 287], "higher": 2, "order": [2, 280], "gradient": [2, 14, 36, 80, 96, 135, 168, 215, 263, 280, 283], "us": [2, 3, 6, 7, 9, 13, 14, 15, 24, 26, 27, 28, 29, 40, 48, 56, 59, 88, 113, 114, 115, 118, 120, 122, 127, 133, 135, 142, 143, 145, 147, 148, 150, 152, 154, 168, 170, 172, 178, 179, 180, 181, 186, 187, 189, 204, 208, 211, 215, 217, 228, 237, 239, 242, 244, 245, 246, 253, 259, 261, 262, 269, 270, 278, 280, 281, 292, 294, 296, 298, 299], "custom": [2, 4, 6, 8, 12, 16, 17, 18, 26, 27, 38, 57, 72, 118, 121, 127, 128, 131, 143, 144, 154, 172, 173, 174, 192, 195, 246, 247], "function": [2, 14, 17, 23, 36, 41, 49, 52, 58, 69, 80, 90, 93, 100, 104, 105, 106, 107, 113, 121, 143, 144, 151, 154, 158, 163, 168, 173, 174, 176, 202, 223, 225, 249, 264, 270, 280, 283, 291], "translat": [2, 124, 130, 182], "from": [2, 8, 23, 24, 26, 48, 56, 113, 115, 122, 140, 141, 145, 164, 182, 189, 193, 195, 269, 281], "python": [2, 4, 6, 8, 18, 26, 27, 90, 172, 237, 294, 296], "cuda": [3, 4, 6, 8, 56, 87, 169, 242, 280], "graph": [3, 36, 48, 102, 109, 115, 142, 190, 192, 201, 202, 203, 206, 221, 226, 227, 280, 295], "pytorch": [3, 5, 6, 7, 8, 12, 14, 17, 23, 24, 28, 29, 48, 51, 56, 60, 63, 66, 68, 69, 70, 72, 73, 74, 78, 86, 94, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 112, 115, 118, 120, 121, 132, 149, 151, 160, 169, 175, 186, 189, 193, 196, 197, 199, 211, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 237, 238, 239, 248, 251, 252, 253, 254, 256, 259, 260, 266, 268, 270, 271, 278, 280, 281, 282, 283, 284, 288], "api": [3, 5, 7, 66, 95, 135, 154, 160, 166, 172, 200, 206, 207, 228, 237, 259, 280, 296], "get": [3, 5, 12, 37, 87, 112, 133, 135, 147, 157, 165, 180, 218, 244, 245, 246, 252, 253], "start": [3, 87, 102, 133, 135, 147, 165, 180, 218, 244, 245, 246, 252, 253, 279, 285, 298], "set": [4, 93, 136, 139, 151, 189, 197, 200, 202, 205, 206, 208, 223, 240, 241, 249, 267, 280, 289], "up": [4, 77, 121, 139, 189, 195, 197, 205, 208, 240, 241, 249, 251, 267, 279], "system": 4, "defin": [4, 7, 10, 11, 23, 26, 37, 49, 52, 55, 69, 105, 114, 121, 139, 151, 171, 176, 189, 195, 197, 201, 202, 223, 225, 250, 264, 266, 279, 281, 282, 283, 292], "op": [4, 6, 10, 192, 291], "ad": [4, 10, 18, 93, 187, 193, 263, 292], "backend": [4, 10, 12, 17, 136, 149, 157, 172, 197, 221, 223, 225, 226, 227, 237, 280, 288, 298], "implement": [4, 10, 26, 27, 41, 58, 80, 106, 118, 143, 167, 172, 178, 179, 181, 213, 215, 233, 249], "an": [4, 11, 12, 16, 24, 49, 110, 112, 118, 122, 138, 150, 176, 193, 200, 241, 269, 298], "regist": [4, 7, 10, 12, 17, 27], "torch": [4, 5, 36, 48, 86, 100, 109, 113, 114, 122, 140, 142, 147, 173, 181, 190, 191, 192, 196, 204, 208, 215, 221, 223, 225, 236, 240, 249, 263, 264, 269, 277, 285, 290, 291, 292, 293, 294, 295, 296, 298], "compil": [4, 6, 27, 142, 157, 181, 190, 193, 196, 208, 217, 221, 240, 241, 249, 285, 289, 290, 291, 292, 293, 294, 296], "support": [4, 10, 12, 18, 93, 102, 118, 174, 181, 216, 233, 247, 292], "hybrid": [4, 90, 92], "registr": 4, "test": [4, 11, 12, 16, 18, 49, 80, 93, 143, 155, 195, 237, 250, 266, 279], "creat": [4, 8, 15, 38, 42, 50, 55, 103, 107, 109, 113, 139, 140, 141, 156, 163, 173, 280], "mutabl": [4, 18], "load": [5, 7, 11, 14, 26, 29, 38, 42, 43, 49, 55, 59, 105, 122, 128, 145, 147, 151, 174, 182, 184, 204, 223, 225, 244, 254, 264, 266, 269, 272, 273, 274, 280, 281, 282, 283, 297], "torchscript": [5, 25, 26, 27, 29, 190, 234, 247, 252, 280, 297], "1": [5, 11, 23, 49, 90, 115, 136, 151, 163, 171, 172, 174, 186, 187, 192, 195, 197, 201, 202, 206, 220, 221, 226, 227, 228, 250, 261, 264, 266, 267, 270, 279, 281, 282, 283], "convert": [5, 29, 160, 197, 202, 210, 219, 223, 225], "script": [5, 27, 29, 59, 90, 165, 206, 286, 298], "via": [5, 17, 200], "trace": [5, 27, 29, 87, 88, 90, 114, 156, 190, 203, 206, 235, 259, 270, 295], "annot": [5, 228], "2": [5, 11, 20, 23, 49, 50, 90, 115, 136, 151, 163, 171, 172, 174, 186, 187, 195, 197, 201, 202, 206, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 250, 261, 264, 266, 267, 270, 279, 281, 282, 283], "serial": [5, 17, 26, 151, 173], "file": [5, 38, 55, 115, 122, 145, 182, 200, 275], "3": [5, 11, 23, 49, 50, 90, 115, 136, 151, 171, 172, 186, 187, 197, 201, 202, 206, 220, 221, 226, 227, 228, 250, 261, 264, 266, 267, 270, 279, 281, 282, 283], "A": [5, 27, 48, 51, 63, 95, 96, 106, 143, 169, 228, 259, 263, 273, 279, 281], "minim": [5, 105], "applic": [5, 7, 149, 172, 239, 277], "depend": [5, 115, 117, 181, 192, 193], "libtorch": 5, "4": [5, 11, 20, 23, 49, 90, 115, 151, 172, 175, 186, 187, 197, 202, 206, 221, 228, 231, 250, 261, 264, 266, 267, 270, 279, 281, 282, 283], "5": [5, 23, 49, 115, 186, 187, 197, 202, 206, 228, 264, 267, 270, 279, 283], "help": [5, 186], "extens": [6, 12, 15, 131, 172, 229, 238, 241, 252, 277, 288], "motiv": [6, 7, 90, 202, 213, 223, 228], "exampl": [6, 15, 18, 25, 26, 80, 84, 90, 95, 96, 107, 110, 112, 121, 122, 138, 196, 200, 207, 217, 228, 229, 250, 252, 288, 293, 298], "write": [6, 7, 16, 57, 149, 187, 195, 203, 213, 228, 247], "setuptool": [6, 27], "pass": [6, 13, 120, 136, 142, 155, 166, 266], "backward": [6, 12, 25, 134, 135, 142, 143, 144, 166], "bind": [6, 26], "perform": [6, 120, 136, 152, 156, 157, 160, 168, 175, 181, 186, 208, 217, 223, 243, 251, 253, 256, 280, 293, 298], "comparison": [6, 24, 143, 147, 168, 190, 202], "gpu": [6, 7, 49, 50, 61, 84, 93, 122, 169, 186, 193, 205, 211, 227, 252, 280], "devic": [6, 14, 17, 37, 122, 134, 237, 242, 265, 269, 272, 280], "jit": [6, 12, 27, 114, 175], "mix": [6, 29, 134, 135, 145, 263, 280], "accessor": 6, "integr": [6, 8, 17, 96], "neural": [7, 14, 37, 49, 52, 93, 113, 159, 163, 253, 266, 281, 282, 283], "paramet": [7, 15, 37, 41, 42, 50, 100, 122, 173, 176, 178, 179, 228, 233, 264, 280, 281], "submodul": [7, 203], "travers": 7, "hierarchi": [7, 259], "run": [7, 24, 26, 40, 50, 55, 56, 59, 60, 61, 80, 90, 99, 105, 139, 147, 186, 189, 192, 206, 240, 241, 249, 270, 278, 297], "mode": [7, 22, 23, 154, 158, 201, 202, 203, 206, 217, 223, 252, 291], "ownership": 7, "dcgan": [7, 58], "what": [7, 12, 13, 17, 20, 49, 58, 62, 63, 95, 113, 122, 144, 152, 160, 168, 169, 200, 231, 236, 241, 242, 245, 246, 247, 259, 267, 282, 294, 297, 298, 299], "wa": 7, "gan": [7, 58], "agan": 7, "gener": [7, 17, 58, 80, 122, 139, 141, 250, 264, 273, 280], "discrimin": [7, 58, 106], "loop": [7, 16, 41, 104, 150, 176, 177, 225], "move": [7, 26, 103], "checkpoint": [7, 61, 122, 134, 147, 159, 225, 243, 244, 269, 273, 280], "recov": 7, "state": [7, 135, 299], "inspect": [7, 142, 167, 173, 187, 263], "imag": [7, 14, 24, 49, 64, 65, 102, 115, 128, 174, 175, 189, 295], "author": [8, 29, 115], "manual": 8, "when": [8, 137, 144, 145, 215, 294], "should": [8, 62, 137], "i": [8, 13, 17, 34, 49, 58, 62, 63, 113, 122, 144, 145, 152, 160, 166, 168, 196, 215, 236, 238, 242, 245, 246, 247, 259, 263, 267, 282, 295, 297, 299], "why": [8, 59, 62, 137, 138, 215, 218, 245, 246], "distribut": [9, 13, 19, 22, 59, 60, 61, 62, 66, 87, 131, 147, 148, 149, 171, 179, 180, 193, 243, 244, 247, 280], "pipelin": [9, 148, 170, 171], "dispatch": [10, 12, 181], "schema": 10, "For": [10, 95, 274], "do": [10, 49, 95, 144, 160, 267], "need": [10, 95, 196, 203], "In": [10, 95, 103, 275], "place": [10, 95, 103], "view": [10, 186], "go": [10, 49, 58, 80, 189, 196], "beyond": 10, "autocast": [10, 263], "tracer": 10, "beta": [11, 20, 23, 151, 154, 155, 156, 160, 174, 181, 219, 240, 241, 251, 255, 291, 294, 296], "dynam": [11, 25, 106, 151, 192, 201, 206, 220, 261, 267, 293], "quantiz": [11, 23, 151, 174, 175, 193, 197, 201, 202, 203, 205, 206, 220, 221, 223, 224, 225, 226, 227, 228, 230, 253, 261, 267], "lstm": [11, 25, 106, 110, 150], "word": [11, 107, 112], "languag": [11, 112, 129, 130], "introduct": [11, 14, 28, 29, 48, 58, 66, 87, 94, 96, 97, 98, 99, 102, 103, 104, 109, 117, 136, 151, 167, 169, 171, 186, 189, 190, 193, 194, 198, 206, 207, 208, 213, 216, 217, 220, 221, 226, 227, 228, 233, 237, 238, 250, 261, 266, 267, 281, 282, 283, 289, 290, 298], "text": [11, 55, 126, 127, 188], "pretrain": [11, 195, 261], "extend": [12, 26, 27, 118, 173, 196], "new": [12, 17, 69, 106, 121, 143], "": [12, 18, 109, 159, 214], "kei": [12, 295], "full": [12, 41, 93], "list": 12, "kernel": [12, 17, 87, 163, 249, 251, 292], "against": 12, "nativ": [12, 239], "compat": 12, "known": 12, "issu": 12, "addit": [12, 125, 132, 169, 171, 186, 200, 267], "note": [12, 106, 228, 262], "futur": [12, 17], "work": [12, 13, 17, 42, 133, 134, 135, 137, 160, 229, 244], "stai": 12, "touch": 12, "uneven": 13, "input": [13, 58, 61, 80, 144, 193, 196, 220, 264, 280], "join": 13, "context": [13, 198], "manag": [13, 169], "requir": [13, 20, 115, 138, 173, 231, 242, 247, 259, 295, 297, 299], "distributeddataparallel": [13, 147, 280], "zeroredundancyoptim": [13, 299], "keyword": 13, "argument": 13, "how": [13, 17, 40, 133, 134, 135, 137, 166, 202, 208, 223, 225, 228, 229, 242, 244, 246, 247, 259, 266, 278, 297, 299], "doe": [13, 20, 138, 231], "joinabl": 13, "joinhook": 13, "make": [13, 106, 203, 239], "toi": [13, 228], "class": [13, 16, 26, 37, 57, 105, 167, 193], "transfer": [14, 128, 174], "underli": 14, "principl": [14, 216], "packag": [14, 83], "select": [14, 150, 198, 235], "content": [14, 121, 251], "style": [14, 196], "descent": 14, "numpi": [15, 45, 54, 77, 103, 121, 214], "scipi": 15, "less": 15, "parametr": [15, 167, 173], "pendulum": 16, "effect": 16, "action": [16, 150], "_step": 16, "reset": 16, "simul": 16, "_reset": 16, "metadata": [16, 17], "env": 16, "_spec": 16, "spec": 16, "shape": [16, 43, 103, 192, 271], "reproduc": 16, "seed": [16, 103], "wrap": [16, 18, 113, 134, 195, 279, 292], "envbas": 16, "our": [16, 22, 143, 149, 155, 166, 266, 281, 282, 283], "rollout": 16, "simpl": [16, 50, 95, 115, 156, 182, 263, 270], "facilit": 17, "privateuse1": 17, "guard": [17, 192], "deseri": [17, 26], "other": [17, 22, 100, 102, 104, 169, 186], "improv": [17, 120, 186, 221, 251], "user": [17, 86, 203, 237, 292], "renam": 17, "name": [17, 140, 141, 192], "properti": 17, "relat": [17, 43, 189, 277], "pil": 18, "crop": 18, "combin": [19, 137, 147], "dataparallel": [19, 50, 62, 93, 122, 147], "rpc": [19, 131, 148, 178, 179, 180, 199, 242, 248], "framework": [19, 179, 180], "acceler": [20, 103, 113, 165, 196, 204, 231], "bert": [20, 151, 206, 231], "semi": [20, 28, 231], "structur": [20, 231], "sparsiti": [20, 216, 231], "problem": [20, 228, 231], "solv": [20, 231], "intro": [20, 231], "establish": 20, "baselin": [20, 202], "prune": [20, 173, 231], "spars": [20, 213, 216, 231], "infer": [20, 47, 122, 128, 151, 175, 193, 251, 252, 263, 274, 280, 288, 294, 297], "torchrec": [22, 193, 194], "shard": [22, 66, 133, 134, 135, 137, 193, 299], "instal": [22, 87, 96, 115, 151, 174, 175, 193, 208, 221, 253, 278], "embed": [22, 102, 112, 193], "distributedmodelparallel": [22, 193], "multiprocess": 22, "tabl": [22, 121], "wise": 22, "static": [23, 106, 202, 220, 261, 295], "eager": [23, 202, 206], "architectur": 23, "helper": [23, 151, 202, 216, 223, 225, 249], "dataset": [23, 31, 38, 50, 57, 98, 102, 104, 113, 127, 151, 195, 202, 206, 223, 225, 283], "loader": [23, 93], "imagenet": 23, "post": [23, 201, 202, 221, 223, 226, 227, 261], "awar": [23, 225, 226, 253, 261], "speedup": [23, 190, 263], "option": [24, 36, 48, 50, 115, 125, 195, 221, 237, 266, 298], "export": [24, 114, 115, 118, 122, 191, 192, 221, 223, 224, 225, 226, 227, 228, 230, 294, 295, 297], "runtim": [24, 115, 280, 294, 298], "between": [24, 147, 215], "syntax": [25, 90, 234], "appli": [25, 66, 137, 151, 221, 226, 227, 229, 298], "ensembl": [25, 152], "bidirect": 25, "layer": [25, 37, 96, 100, 137, 143, 196, 280], "asid": 25, "visual": [25, 38, 96, 102, 115, 128, 166, 174, 182, 184, 187, 259, 262], "project": [26, 196], "With": [26, 186], "cmake": [26, 27], "save": [26, 29, 42, 43, 59, 61, 115, 122, 134, 138, 144, 145, 147, 159, 166, 204, 223, 225, 243, 244, 263, 264, 272, 273, 274, 275, 281], "To": [26, 66], "ivalu": 26, "take": 26, "return": [26, 138], "bound": 26, "appendix": [27, 216], "more": [27, 36, 95, 103, 138, 157, 158, 178, 186, 243, 250, 261, 264, 266, 267, 270, 278, 281, 282, 283], "wai": [27, 168], "supervis": 28, "learn": [28, 39, 40, 51, 63, 90, 106, 107, 108, 121, 128, 131, 151, 159, 169, 174, 176, 177, 178, 180, 186, 200, 250, 261, 264, 266, 267, 270, 278, 281, 282, 283, 294, 298], "usb": 28, "built": [28, 197], "upon": 28, "freematch": 28, "softmatch": 28, "cifar": [28, 105], "10": [28, 105, 166, 202], "onli": [28, 203, 252, 253], "40": 28, "label": [28, 189], "specif": [28, 189, 223, 225, 280], "imbalanc": 28, "algorithm": [28, 177], "further": [29, 36, 37, 38, 41, 46, 48, 59, 61, 62, 114, 115, 117, 118, 120, 125, 128, 145, 146, 150, 196, 197, 213, 215, 216], "read": [29, 36, 37, 38, 41, 46, 48, 59, 61, 62, 114, 115, 117, 118, 120, 125, 145, 146, 150, 189, 197, 213, 215, 216, 259], "audio": [30, 31, 32, 33, 34, 35], "augment": [30, 32, 87, 110, 280], "featur": [32, 33, 96, 110, 128, 134, 174, 186, 189, 193, 252, 253], "extract": [33, 189], "o": 34, "resampl": 35, "automat": [36, 109, 154, 263, 295], "differenti": [36, 48, 109, 154], "tensor": [36, 45, 54, 68, 78, 85, 98, 103, 109, 121, 131, 137, 138, 140, 166, 181, 196, 216, 218, 228, 241, 277, 280, 295], "disabl": [36, 280], "track": [36, 144, 187], "jacobian": [36, 158, 163], "product": [36, 158, 163, 181], "nn": [37, 72, 73, 83, 90, 100, 113, 121, 122, 129, 130, 173, 196, 269, 277, 295], "flatten": 37, "linear": [37, 100, 107, 113], "relu": [37, 197], "sequenti": [37, 113], "softmax": [37, 107, 215], "dataload": [38, 57, 98, 104, 113], "iter": [38, 55, 57, 173], "__len__": 38, "__getitem__": 38, "prepar": [38, 55, 140, 141, 182, 186, 197, 202, 213, 214, 215, 223, 225, 237, 257, 258], "through": [38, 57, 90, 197, 226, 227, 266], "thi": [40, 63, 134, 166, 196, 229], "guid": [40, 135, 169, 203, 280], "hyperparamet": [41, 93, 176, 177], "quickstart": 42, "weight": [43, 52, 58, 70, 121, 220], "initi": [45, 54, 58, 59, 135, 136, 147, 149, 159, 167, 218, 233, 266, 281, 282], "attribut": [45, 54, 96, 262], "bridg": [45, 54, 103], "arrai": [45, 54], "totensor": 46, "lambda": 46, "fast": [47, 80, 251], "better": [47, 208, 217], "gentl": 48, "background": [48, 169], "usag": [48, 142, 143, 154, 166, 169, 190, 192, 237, 251, 253, 288, 292], "vector": [48, 152, 158, 163], "calculu": 48, "exclus": 48, "dag": 48, "classifi": [49, 107, 115, 140, 174, 189], "about": [49, 151, 271], "cifar10": 49, "convolut": [49, 100, 143, 150, 155, 280], "multipl": [49, 122, 173, 275], "where": [49, 58, 80, 189, 215], "dummi": 50, "8": [50, 202, 264, 279], "summari": [50, 134, 181, 260], "deep": [51, 63, 106, 107, 108], "60": [51, 63], "minut": [51, 63], "blitz": [51, 63], "backprop": 52, "chatbot": 55, "preprocess": [55, 127, 159, 175], "format": [55, 115, 160, 200, 244, 280], "trim": 55, "seq2seq": [55, 182], "encod": [55, 112, 182], "decod": [55, 182], "procedur": 55, "mask": [55, 196, 215], "singl": [55, 162], "greedi": 55, "my": 55, "googl": 56, "colab": 56, "version": [56, 163], "drive": 56, "enabl": [56, 135, 198, 200, 207, 280], "compos": [57, 158, 292], "afterword": 57, "torchvis": [57, 81, 195], "adversari": [58, 80], "fault": 59, "toler": 59, "torchrun": [59, 147], "grace": 59, "restart": 59, "process": [59, 61, 147, 171, 172, 178], "group": [59, 61, 172], "provid": 59, "variabl": [59, 136, 280], "snapshot": [59, 166], "trainer": 59, "constructor": [59, 280], "resum": [59, 122, 263], "video": [60, 175, 295], "section": 60, "multi": [61, 84, 93, 139], "ddp": [61, 62, 131, 145, 147, 280], "job": [61, 200, 270], "you": [62, 102, 137, 169, 196, 200, 262, 294, 298], "prefer": 62, "over": 62, "dp": 62, "goal": 63, "segment": [64, 65, 195, 295], "deeplabv3": [64, 65], "android": [64, 212, 235, 237, 239, 250, 255, 257], "io": [65, 211, 212, 235, 255, 258], "primit": 66, "commun": [66, 87, 93, 149, 242], "launcher": 66, "scale": [66, 137, 146, 181], "develop": 66, "control": [70, 114, 121, 181, 192, 280, 293, 298], "flow": [70, 114, 121, 192, 228, 295], "share": [70, 121, 228], "warm": [77, 121], "threat": 80, "sign": 80, "attack": 80, "under": 80, "fgsm": 80, "accuraci": [80, 93, 151, 157, 223, 253, 267], "v": [80, 158, 169, 214], "epsilon": 80, "sampl": [80, 141, 168, 259], "finetun": [81, 128, 174, 195], "former": 86, "holist": [87, 88], "analysi": [87, 88], "hta": 87, "tempor": 87, "breakdown": 87, "idl": 87, "durat": 87, "overlap": 87, "counter": 87, "memori": [87, 110, 120, 138, 143, 160, 166, 169, 177, 243, 251, 270, 280, 298], "bandwidth": 87, "queue": 87, "length": [87, 280], "launch": [87, 171, 259], "statist": 87, "diff": 88, "inform": [90, 157], "part": [90, 110, 174], "pure": 90, "top": 90, "level": [90, 95, 110, 140, 141], "tune": [93, 134, 151, 251, 280], "rai": 93, "configur": [93, 139, 151, 206, 223, 225, 259, 289], "search": 93, "space": 93, "youtub": [94, 97, 99], "seri": [94, 99], "fundament": 95, "we": 95, "turn": [95, 140], "off": 95, "On": 95, "profil": [95, 120, 156, 157, 186, 199, 248, 259, 270], "advanc": [95, 106, 134, 149, 186, 214, 238, 263, 292], "topic": [95, 149, 263], "detail": [95, 233], "high": [95, 181], "understand": 96, "captum": [96, 262], "first": [96, 114, 167], "occlus": 96, "gradcam": 96, "insight": 96, "common": [100, 142, 228, 295], "type": [100, 103, 193, 263, 295], "recurr": [100, 150], "manipul": [100, 103], "activ": [100, 104, 217], "tensorboard": [102, 186, 187, 278], "befor": [102, 189, 262], "show": 102, "scalar": [102, 278], "resourc": [102, 104, 132, 169, 171, 267, 297], "random": [103, 106], "math": [103, 251], "logic": 103, "brief": 103, "broadcast": 103, "alter": 103, "copi": [103, 169], "chang": [103, 265], "number": 103, "dimens": [103, 251], "per": [104, 168], "epoch": 104, "knowledg": 105, "distil": 105, "util": [105, 173, 177, 196, 238, 264, 277, 280, 291], "cross": [105, 196], "entropi": 105, "cosin": 105, "intermedi": [105, 144, 280], "regressor": 105, "decis": 106, "bi": 106, "crf": 106, "versu": 106, "toolkit": 106, "condit": 106, "field": 106, "discuss": 106, "exercis": [106, 110, 112, 125, 140, 141, 182], "tag": [106, 110], "block": [107, 196, 264], "affin": 107, "map": 107, "non": [107, 169, 192, 203, 241, 250, 280], "probabl": 107, "compon": [107, 157], "logist": 107, "regress": 107, "bag": [107, 112], "nlp": [108, 140, 141, 164, 182], "librari": [109, 126, 189, 239, 266, 270, 280, 281, 282, 283, 298], "reshap": 109, "sequenc": [110, 137, 182], "long": [110, 270], "short": [110, 259], "term": 110, "speech": [110, 185, 188, 295], "tagger": 110, "charact": [110, 140, 141], "lexic": 112, "semant": [112, 213, 214], "dens": [112, 181], "n": 112, "gram": 112, "continu": 112, "realli": 113, "mnist": 113, "net": 113, "scratch": [113, 140, 141, 164, 182], "without": [113, 237, 250], "refactor": [113, 114, 203], "add": [113, 136, 195, 291], "valid": [113, 280], "fit": [113, 166], "get_data": 113, "switch": [113, 280], "cnn": 113, "close": 113, "thought": 113, "attempt": 114, "suggest": [114, 192], "patch": [114, 189], "cond": 114, "netron": 115, "6": [115, 186, 187, 197, 202, 264, 270, 279], "7": [115, 186, 197, 202, 264, 270, 279], "compar": [115, 206, 220, 250, 264], "ones": 115, "overrid": 118, "exist": [118, 160], "debug": [120, 157, 200, 202, 206, 223, 280], "print": 120, "state_dict": [122, 282], "recommend": [122, 140, 169, 190, 228], "entir": 122, "program": [122, 192], "One": [122, 275], "warmstart": [122, 281], "differ": [122, 142, 195, 281], "across": [122, 272], "cpu": [122, 134, 138, 156, 157, 169, 208, 217, 238, 252, 259, 280, 288, 292, 298], "t5": [124, 134], "base": [124, 174, 199, 235, 248], "summar": 124, "sentiment": 124, "classif": [124, 126, 189, 295], "templat": 125, "torchtext": [126, 127, 129, 130], "vision": [128, 174, 280], "few": [128, 174], "predict": [128, 174, 189], "convnet": 128, "fix": [128, 192, 228], "extractor": [128, 174], "fsdp": [131, 133, 134], "tp": [131, 137], "devicemesh": [131, 246], "welcom": 132, "fulli": [133, 134, 135, 137, 196], "recap": 134, "fine": [134, 151], "hf": 134, "precis": [134, 135, 145, 263, 280], "intial": 134, "strategi": [134, 139], "prefetch": [134, 135], "stream": 134, "rank0": 134, "fsdp2": 135, "clip": [135, 263], "dtensor": 135, "dict": 135, "dcp": [135, 243, 244], "fsdp1": 135, "migrat": 135, "libuv": 136, "tcpstore": 136, "benchmark": [136, 155, 206, 240, 250, 264], "impact": 136, "exit": 136, "rout": 136, "use_libuv": 136, "fals": 136, "0": [136, 174, 192, 215, 224, 230], "init_method": 136, "processgroup": 136, "larg": 137, "layernorm": 137, "rmsnorm": 137, "hook": [138, 166], "typic": 138, "than": 138, "concept": [138, 192], "pack": [138, 196], "unpack": 138, "some": 138, "unconvent": 138, "int": 138, "tupl": 138, "str": 138, "disk": 138, "na": 139, "ax": 139, "torchx": 139, "app": [139, 237], "runner": 139, "searchspac": 139, "metric": [139, 221], "optimizationconfig": 139, "choos": [139, 298], "schedul": [139, 241], "acknowledg": 139, "rnn": [140, 141, 180], "plot": [140, 141, 182], "captur": [142, 156, 166, 175, 221, 226, 227], "larger": 142, "log": [142, 157, 159, 278], "flag": 142, "address": [142, 295], "certain": 142, "limit": [142, 292], "aotautograd": 142, "recompil": [142, 293], "reason": [142, 271], "fuse": [143, 155, 166, 181, 193, 250, 280], "norm": [143, 155, 280], "formula": [143, 292], "batchnorm": 143, "out": [143, 155, 229, 283], "doubl": 144, "output": [144, 193, 253], "real": [145, 175], "world": 145, "cloud": 145, "enough": 145, "multinod": 146, "local": 146, "global": [146, 151, 173, 206], "rank": 146, "heteregen": 146, "troubleshoot": [146, 175, 263], "case": [147, 280], "skew": 147, "speed": [147, 251], "point": [149, 220, 277], "collect": [149, 176, 264], "own": [149, 203], "ring": 149, "allreduc": 149, "dqn": [150, 177], "mlp": 150, "q": [150, 177], "huggingfac": 151, "necessari": [151, 266, 270, 281, 282, 283], "download": [151, 189, 201, 206], "token": 151, "check": [151, 206, 223], "refer": [151, 197, 220], "vmap": [152, 236], "forc": 153, "align": 153, "wav2vec2": [153, 185], "fuser": 155, "fx": [155, 156, 190, 201, 202, 203, 221, 226, 227], "fusion": [155, 197, 249], "resnet18": [155, 156, 228], "symbol": [156, 192, 203], "interpret": [156, 212, 235, 255, 262], "investig": 156, "inductor": [157, 207, 226, 227, 289], "determin": 157, "error": [157, 192, 263, 295], "hessian": 158, "hvp": 158, "vhp": 158, "revers": 158, "jacrev": 158, "jacfwd": 158, "functorch": 158, "mario": 159, "plai": 159, "rl": 159, "agent": 159, "definit": 159, "act": 159, "cach": [159, 167, 289, 290], "recal": 159, "td": 159, "all": [159, 166, 196, 263, 270, 280], "let": 159, "channel": 160, "last": 160, "gain": [160, 293], "machin": 162, "best": [162, 190, 193], "practic": [162, 169, 186, 190, 193], "tangent": 163, "ntk": 163, "contract": 163, "nvfuser": 165, "dure": [166, 280], "disclaim": 166, "techniqu": 166, "register_post_accumulate_grad_hook": 166, "everyth": [166, 195], "line": [166, 206], "hand": 167, "ar": [167, 196], "citizen": 167, "concaten": 167, "remov": [167, 173], "grad": [168, 215, 280], "effici": [168, 213, 255, 280], "good": 169, "non_block": 169, "pin_memori": 169, "preambl": 169, "pageabl": 169, "asynchron": [169, 178, 243, 280], "synchron": [169, 280], "true": [169, 269, 280], "cudamemcpyasync": 169, "perspect": 169, "synergi": 169, "direct": [169, 242], "mp": 169, "consider": 169, "partit": 171, "main": 171, "cpp": 172, "subclass": [172, 181, 277], "expos": 172, "re": 173, "nightli": [174, 191], "raspberri": 175, "pi": 175, "30": 175, "fp": 175, "opencv": 175, "choic": 175, "mobilenetv2": [175, 210, 219], "It": 175, "reinforc": [176, 177, 180], "ppo": 176, "server": [178, 179], "cartpol": 178, "solver": 178, "rref": 180, "dot": 181, "attent": [181, 182, 196], "sdpa": 181, "explicit": [181, 249], "hardwar": 181, "causal": 181, "self": 181, "nestedtensor": 181, "attn_bia": 181, "spatial": 184, "depict": 184, "stn": 184, "recognit": [185, 295], "event": 186, "analyz": [186, 200, 270], "amd": 186, "projector": 187, "assess": 187, "tacotron2": 188, "whole": 189, "slide": 189, "tiatoolbox": 189, "clean": 189, "patchpredictor": 189, "pathologi": 189, "here": 189, "nest": [190, 196, 218], "demonstr": [190, 295], "torchdynamo": [190, 290, 295], "break": [192, 295], "strict": [192, 295], "constraint": [192, 197], "special": 192, "dim": 192, "violat": 192, "_check": 192, "ir": [192, 228], "decomposit": 192, "exportdb": 192, "recsi": 193, "embeddingbag": 193, "embeddingbagcollect": 193, "planner": 193, "lazyawait": 193, "anatomi": 193, "lookup": 193, "detect": 195, "pennfudan": 195, "modifi": [195, 263], "backbon": 195, "instanc": 195, "replac": 196, "me": 196, "introduc": [196, 212], "abov": 196, "octob": 196, "2024": 196, "multiheadattent": 196, "gpt": 196, "one": [196, 206], "row": 196, "longer": 196, "caus": 196, "nan": [196, 215, 263], "flexattent": 196, "njt": 196, "swiglu": 196, "feed": 196, "prototyp": [197, 200, 201, 202, 203, 204, 205, 206, 210, 211, 212, 213, 214, 215, 216, 222, 223, 225, 231, 235], "backendconfig": 197, "deriv": [197, 228], "pattern": [197, 228], "each": 197, "dtypeconfig": 197, "conv": 197, "qconfigmap": [197, 202], "satisfi": 197, "faulti": 197, "rotat": 198, "approach": 198, "workload": [199, 238, 248, 259, 280], "flight": 200, "stuck": 200, "retriev": 200, "dump": 200, "end": [200, 290], "eval": [202, 223], "specifi": [202, 206, 266], "calibr": [202, 223], "9": 202, "float": [202, 220], "skip": [203, 233, 280], "traceabl": 203, "gpudirect": 204, "torchao": 205, "glue": 206, "qconfig_dict": 206, "wrapper": [207, 237], "window": 208, "xpu": [208, 259], "softwar": 208, "altern": 208, "intel": [208, 227, 238, 252, 253, 259, 280, 288, 298], "llvm": 208, "core": [210, 280], "ml": 210, "lite": 212, "workflow": [212, 237, 261], "adagrad": 213, "maskedtensor": [213, 214, 215, 216], "simpler": 213, "origin": 213, "maskedarrai": 214, "reduct": [214, 216], "access": [215, 280, 282, 298], "index": 215, "slice": 215, "distinguish": 215, "anoth": 215, "x": 215, "yield": 215, "nansum": 215, "nanmean": 215, "safe": 215, "miss": 215, "coo": 216, "csr": 216, "unari": 216, "binari": 216, "max": 217, "autotun": 217, "see": [218, 240, 292], "also": [218, 240, 292], "nnapi": 219, "numer": 220, "suit": 220, "correspond": 220, "locat": 220, "its": 220, "equival": 220, "same": 220, "openvino": 221, "nncf": 221, "lower": [221, 223, 226, 227], "represent": 221, "recip": [222, 250, 256, 257, 258, 260, 261, 268, 284, 286], "qat": 225, "x86": 226, "param": 228, "pt2e": 228, "match": [228, 280], "aten": 228, "directli": [228, 280], "subgraphmatcherwithnamenodemap": 228, "autoload": 229, "tree": 229, "mechan": 229, "freez": 234, "mobil": [235, 255, 256, 260, 286], "so": 236, "vulkan": 237, "desktop": 237, "sdk": 237, "java": 237, "upload": 237, "leverag": 238, "matrix": 238, "amx": 238, "guidelin": 238, "can": 238, "confirm": 238, "being": 238, "prebuilt": 239, "lr": 241, "happen": 241, "tensorpip": 242, "even": 243, "pin": 243, "commdebugmod": 245, "hsdp": 246, "solut": [246, 295], "horizont": 249, "foreach_map": 249, "pre": [250, 261], "requisit": [250, 261], "two": 250, "fuse_modul": 250, "tool": 250, "aw": 251, "graviton": 251, "processor": 251, "bfloat16": [251, 252], "openbla": 251, "smaller": 251, "alloc": [251, 280, 298], "overhead": 251, "linux": 251, "transpar": 251, "huge": 251, "page": 251, "thp": 251, "float32": 252, "imper": 252, "float16": 252, "zoo": 252, "eas": 253, "compressor": 253, "driven": 253, "deploy": [253, 297], "instrument": 259, "technologi": 259, "itt": 259, "vtune": 259, "showcas": 259, "mobilenet": 261, "v2": 261, "begin": 262, "final": 262, "default": [263, 265], "gradscal": 263, "e": 263, "g": 263, "amp": [263, 280], "minor": 263, "inf": 263, "mismatch": 263, "mai": 263, "manifest": 263, "cudnn_status_bad_param": 263, "syntaxerror": 264, "timeit": 264, "timer": [264, 279], "autorang": 264, "fuzz": 264, "instruct": [264, 279], "count": [264, 279], "callgrind": [264, 279], "look": 267, "latenc": 267, "tip": 269, "mmap": 269, "meta": 269, "load_state_dict": [269, 277], "assign": 269, "instanti": 270, "resnet": 270, "consumpt": 270, "examin": 270, "stack": 270, "And": [273, 274], "swap_tensor": 277, "quick": [279, 298], "wall": 279, "blocked_autorang": 279, "snippet": 279, "collect_callgrind": 279, "delv": 279, "deeper": 279, "b": [279, 281], "footnot": 279, "calcul": 280, "bia": 280, "follow": 280, "none": 280, "instead": 280, "zero_grad": 280, "channels_last": 280, "uniform": 280, "numa": [280, 298], "openmp": [280, 298], "libiomp": 280, "onednn": 280, "cudnn": 280, "auto": 280, "tuner": 280, "avoid": 280, "unnecessari": 280, "prealloc": 280, "reduc": [280, 285], "accumul": 280, "find_unused_paramet": 280, "balanc": 280, "zero": 283, "while": 283, "cold": 285, "region": 285, "fp32": 288, "bf16": 288, "torchinductor_fx_graph_cach": 289, "torchinductor_autograd_cach": 289, "torchinductor_cache_dir": 289, "torchinductor_fx_graph_remote_cach": 289, "torchinductor_autograd_remote_cach": 289, "torchinductor_autotune_remote_cach": 289, "torchinductor_force_disable_cach": 289, "offer": 290, "mega": 290, "modular": 290, "torchinductor": 290, "triton": [290, 292], "remot": 290, "rewrit": 291, "mul": 291, "triton_op": 292, "fallback": 292, "flopcount": 292, "set_stanc": 293, "descript": 293, "prevent": 293, "measur": 293, "crash": 293, "sooner": 293, "aotinductor": 294, "challeng": 295, "them": 295, "No": 295, "caption": 295, "cannot": 295, "mutat": 295, "frozen": 295, "promptabl": 295, "torch_log": 296, "engin": 297, "xeon": 298, "run_cpu": 298, "Will": 298, "command": 298, "explan": 298}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [20, "overview"], [114, "overview"], [118, "overview"], [125, "overview"], [142, "overview"], [150, "overview"], [157, "overview"], [181, "overview"], [200, "overview"], [253, "overview"]], "Prerequisites": [[1, "prerequisites"], [105, "prerequisites"], [114, "prerequisites"], [118, "prerequisites"], [175, "prerequisites"], [200, "prerequisites"], [221, "prerequisites"], [226, "prerequisites"], [227, "prerequisites"], [245, "prerequisites"], [249, "prerequisites"], [285, "prerequisites"], [289, "prerequisites"], [290, "prerequisites"], [292, "prerequisites"], [293, "prerequisites"], [294, "prerequisites"], [295, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [150, "environment"], [159, "environment"]], "Transforms": [[1, "transforms"], [46, "transforms"], [57, "transforms"], [176, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [176, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [176, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [41, "optimizer"], [104, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [11, "conclusion"], [16, "conclusion"], [17, "conclusion"], [18, "conclusion"], [20, "conclusion"], [23, "conclusion"], [25, "conclusion"], [26, "conclusion"], [27, "conclusion"], [55, "conclusion"], [87, "conclusion"], [105, "conclusion"], [114, "conclusion"], [115, "conclusion"], [118, "conclusion"], [125, "conclusion"], [136, "conclusion"], [137, "conclusion"], [142, "conclusion"], [150, "conclusion"], [151, "conclusion"], [156, "conclusion"], [157, "conclusion"], [159, "conclusion"], [166, "conclusion"], [169, "conclusion"], [171, "conclusion"], [181, "conclusion"], [190, "conclusion"], [192, "conclusion"], [193, "conclusion"], [196, "conclusion"], [198, "conclusion"], [200, "conclusion"], [204, "conclusion"], [205, "conclusion"], [206, "conclusion"], [207, "conclusion"], [208, "conclusion"], [213, "conclusion"], [214, "conclusion"], [215, "conclusion"], [216, "conclusion"], [217, "conclusion"], [218, "conclusion"], [220, "conclusion"], [221, "conclusion"], [223, "conclusion"], [225, "conclusion"], [226, "conclusion"], [227, "conclusion"], [228, "conclusion"], [229, "conclusion"], [231, "conclusion"], [234, "conclusion"], [238, "conclusion"], [241, "conclusion"], [243, "conclusion"], [244, "conclusion"], [245, "conclusion"], [246, "conclusion"], [249, "conclusion"], [251, "conclusion"], [269, "conclusion"], [277, "conclusion"], [285, "conclusion"], [289, "conclusion"], [290, "conclusion"], [291, "conclusion"], [292, "conclusion"], [293, "conclusion"], [294, "conclusion"], [295, "conclusion"], [296, "conclusion"], [298, "conclusion"]], "Next Steps": [[1, "next-steps"], [175, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [87, "getting-started"], [252, "getting-started"], [253, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Loading a TorchScript Model in C++": [[5, "loading-a-torchscript-model-in-c"]], "Step 1: Converting Your PyTorch Model to Torch Script": [[5, "step-1-converting-your-pytorch-model-to-torch-script"]], "Converting to Torch Script via Tracing": [[5, "converting-to-torch-script-via-tracing"]], "Converting to Torch Script via Annotation": [[5, "converting-to-torch-script-via-annotation"]], "Step 2: Serializing Your Script Module to a File": [[5, "step-2-serializing-your-script-module-to-a-file"]], "Step 3: Loading Your Script Module in C++": [[5, "step-3-loading-your-script-module-in-c"]], "A Minimal C++ Application": [[5, "a-minimal-c-application"]], "Depending on LibTorch and Building the Application": [[5, "depending-on-libtorch-and-building-the-application"]], "Step 4: Executing the Script Module in C++": [[5, "step-4-executing-the-script-module-in-c"]], "Step 5: Getting Help and Exploring the API": [[5, "step-5-getting-help-and-exploring-the-api"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "PyTorch Custom Operators": [[8, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[8, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[8, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[8, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[8, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[8, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[9, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[10, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[10, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[10, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[10, "in-place-or-view-ops"]], "Adding autograd support": [[10, "adding-autograd-support"]], "Going beyond autograd": [[10, "going-beyond-autograd"]], "Autocast": [[10, "autocast"]], "Batched": [[10, "batched"]], "Tracer": [[10, "tracer"]], "(beta) Dynamic Quantization on an LSTM Word Language Model": [[11, "beta-dynamic-quantization-on-an-lstm-word-language-model"]], "Introduction": [[11, "introduction"], [14, "introduction"], [58, "introduction"], [66, "introduction"], [96, "id1"], [102, "id1"], [104, "id1"], [136, "introduction"], [151, "introduction"], [169, "introduction"], [186, "introduction"], [189, "introduction"], [198, "introduction"], [206, "introduction"], [207, "introduction"], [208, "introduction"], [216, "introduction"], [217, "introduction"], [220, "introduction"], [221, "introduction"], [226, "introduction"], [227, "introduction"], [228, "introduction"], [233, "introduction"], [237, "introduction"], [238, "introduction"], [250, "introduction"], [261, "introduction"], [266, "introduction"], [267, "introduction"], [281, "introduction"], [282, "introduction"], [283, "introduction"], [289, "introduction"], [290, "introduction"]], "1. Define the model": [[11, "define-the-model"]], "2. Load in the text data": [[11, "load-in-the-text-data"]], "3. Load the pretrained model": [[11, "load-the-pretrained-model"]], "4. Test dynamic quantization": [[11, "test-dynamic-quantization"]], "Extending dispatcher for a new backend in C++": [[12, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[12, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[12, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[12, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[12, "register-kernels-for-the-new-backend"], [17, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[12, "autograd-support-for-the-new-backend"]], "Build an extension": [[12, "build-an-extension"]], "Custom operator support": [[12, "custom-operator-support"]], "JIT support": [[12, "jit-support"]], "Testing your backend against native PyTorch backends": [[12, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[12, "backward-compatibility"]], "Known issues & additional notes": [[12, "known-issues-additional-notes"]], "Future Work": [[12, "future-work"], [17, "future-work"]], "Stay in touch": [[12, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[13, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[13, "requirements"], [20, "requirements"], [173, "requirements"], [231, "requirements"], [242, "requirements"], [247, "requirements"], [259, "requirements"], [297, "requirements"], [299, "requirements"]], "What is Join?": [[13, "what-is-join"]], "Using Join with DistributedDataParallel": [[13, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[13, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[13, "passing-keyword-arguments"]], "How Does Join Work?": [[13, "how-does-join-work"]], "Joinable": [[13, "joinable"]], "JoinHook": [[13, "joinhook"]], "Join": [[13, "join"]], "Making a Toy Class Work with Join": [[13, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[14, "neural-transfer-using-pytorch"]], "Underlying Principle": [[14, "underlying-principle"]], "Importing Packages and Selecting a Device": [[14, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[14, "loading-the-images"]], "Loss Functions": [[14, "loss-functions"], [100, "loss-functions"]], "Content Loss": [[14, "content-loss"]], "Style Loss": [[14, "style-loss"]], "Importing the Model": [[14, "importing-the-model"]], "Gradient Descent": [[14, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[15, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[15, "parameter-less-example"]], "Parametrized example": [[15, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[16, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[16, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[16, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[16, "environment-metadata-env-spec"]], "Specs shape": [[16, "specs-shape"]], "Reproducible experiments: seeding": [[16, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[16, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[16, "testing-our-environment"]], "Transforming an environment": [[16, "transforming-an-environment"]], "Writing custom transforms": [[16, "writing-custom-transforms"]], "Executing a rollout": [[16, "executing-a-rollout"]], "Batching computations": [[16, "batching-computations"]], "Training a simple policy": [[16, "training-a-simple-policy"]], "Training loop": [[16, "training-loop"], [150, "training-loop"], [176, "training-loop"], [177, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[17, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[17, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[17, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[17, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[17, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[17, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[17, "other-modules"]], "How to Improve User Experience with Privateuse1": [[17, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[17, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[17, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[17, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[18, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[18, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[18, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[18, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[18, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[19, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[20, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[20, "what-problem-does-semi-structured-sparsity-solve"], [231, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[20, "intro-setup"], [231, "intro-setup"]], "Establishing a baseline": [[20, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[20, "pruning-bert-to-be-2-4-sparse"], [231, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[20, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[21, "computation-times"], [44, "computation-times"], [53, "computation-times"], [75, "computation-times"], [79, "computation-times"], [91, "computation-times"], [101, "computation-times"], [111, "computation-times"], [119, "computation-times"], [123, "computation-times"], [183, "computation-times"], [232, "computation-times"], [276, "computation-times"], [287, "computation-times"]], "Exploring TorchRec sharding": [[22, "exploring-torchrec-sharding"]], "Installation": [[22, "installation"], [96, "installation"], [253, "installation"], [278, "installation"]], "Distributed Setup": [[22, "distributed-setup"]], "Constructing our embedding model": [[22, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[22, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[22, "multiprocessing-execution"]], "Table Wise Sharding": [[22, "table-wise-sharding"]], "Explore other sharding modes": [[22, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[23, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[23, "model-architecture"]], "2. Helper functions": [[23, "helper-functions"]], "3. Define dataset and data loaders": [[23, "define-dataset-and-data-loaders"]], "ImageNet Data": [[23, "imagenet-data"]], "4. Post-training static quantization": [[23, "post-training-static-quantization"]], "5. Quantization-aware training": [[23, "quantization-aware-training"]], "Speedup from quantization": [[23, "speedup-from-quantization"]], "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime": [[24, "optional-exporting-a-model-from-pytorch-to-onnx-and-running-it-using-onnx-runtime"]], "Timing Comparison Between Models": [[24, "timing-comparison-between-models"]], "Running the model on an image using ONNX Runtime": [[24, "running-the-model-on-an-image-using-onnx-runtime"]], "Dynamic Parallelism in TorchScript": [[25, "dynamic-parallelism-in-torchscript"]], "Basic Syntax": [[25, "basic-syntax"], [234, "basic-syntax"]], "Applied Example: Ensemble of Bidirectional LSTMs": [[25, "applied-example-ensemble-of-bidirectional-lstms"]], "Parallelizing Forward and Backward Layers": [[25, "parallelizing-forward-and-backward-layers"]], "Aside: Visualizing Parallelism": [[25, "aside-visualizing-parallelism"]], "Parallelizing Models in the Ensemble": [[25, "parallelizing-models-in-the-ensemble"]], "Extending TorchScript with Custom C++ Classes": [[26, "extending-torchscript-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[26, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[26, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python and TorchScript": [[26, "using-the-c-class-from-python-and-torchscript"]], "Saving, Loading, and Running TorchScript Code Using Custom Classes": [[26, "saving-loading-and-running-torchscript-code-using-custom-classes"]], "Moving Custom Classes To/From IValues": [[26, "moving-custom-classes-to-from-ivalues"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[26, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[26, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "Extending TorchScript with Custom C++ Operators": [[27, "extending-torchscript-with-custom-c-operators"]], "Implementing the Custom Operator in C++": [[27, "implementing-the-custom-operator-in-c"]], "Registering the Custom Operator with TorchScript": [[27, "registering-the-custom-operator-with-torchscript"]], "Building the Custom Operator": [[27, "building-the-custom-operator"]], "Environment setup": [[27, "environment-setup"]], "Building with CMake": [[27, "building-with-cmake"]], "Using the TorchScript Custom Operator in Python": [[27, "using-the-torchscript-custom-operator-in-python"]], "Using the Custom Operator with Tracing": [[27, "using-the-custom-operator-with-tracing"]], "Using the Custom Operator with Script": [[27, "using-the-custom-operator-with-script"]], "Using the TorchScript Custom Operator in C++": [[27, "using-the-torchscript-custom-operator-in-c"]], "Appendix A: More Ways of Building Custom Operators": [[27, "appendix-a-more-ways-of-building-custom-operators"]], "Building with JIT compilation": [[27, "building-with-jit-compilation"]], "Building with Setuptools": [[27, "building-with-setuptools"]], "Semi-Supervised Learning using USB built upon PyTorch": [[28, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[28, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[28, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[28, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Introduction to TorchScript": [[29, "introduction-to-torchscript"]], "Basics of PyTorch Model Authoring": [[29, "basics-of-pytorch-model-authoring"]], "Basics of TorchScript": [[29, "basics-of-torchscript"]], "Tracing Modules": [[29, "tracing-modules"]], "Using Scripting to Convert Modules": [[29, "using-scripting-to-convert-modules"]], "Mixing Scripting and Tracing": [[29, "mixing-scripting-and-tracing"]], "Saving and Loading models": [[29, "saving-and-loading-models"]], "Further Reading": [[29, "further-reading"], [36, "further-reading"], [37, "further-reading"], [38, "further-reading"], [41, "further-reading"], [46, "further-reading"], [59, "further-reading"], [61, "further-reading"], [62, "further-reading"], [120, "further-reading"], [125, "further-reading"], [145, "further-reading"], [146, "further-reading"], [150, "further-reading"], [197, "further-reading"], [213, "further-reading"], [215, "further-reading"], [216, "further-reading"]], "Audio Data Augmentation": [[30, "audio-data-augmentation"]], "Audio Datasets": [[31, "audio-datasets"]], "Audio Feature Augmentation": [[32, "audio-feature-augmentation"]], "Audio Feature Extractions": [[33, "audio-feature-extractions"]], "Audio I/O": [[34, "audio-i-o"]], "Audio Resampling": [[35, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[36, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[36, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[36, "computing-gradients"]], "Disabling Gradient Tracking": [[36, "disabling-gradient-tracking"]], "More on Computational Graphs": [[36, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[36, "optional-reading-tensor-gradients-and-jacobian-products"]], "Build the Neural Network": [[37, "build-the-neural-network"]], "Get Device for Training": [[37, "get-device-for-training"]], "Define the Class": [[37, "define-the-class"]], "Model Layers": [[37, "model-layers"]], "nn.Flatten": [[37, "nn-flatten"]], "nn.Linear": [[37, "nn-linear"]], "nn.ReLU": [[37, "nn-relu"]], "nn.Sequential": [[37, "nn-sequential"]], "nn.Softmax": [[37, "nn-softmax"]], "Model Parameters": [[37, "model-parameters"]], "Datasets & DataLoaders": [[38, "datasets-dataloaders"]], "Loading a Dataset": [[38, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[38, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[38, "creating-a-custom-dataset-for-your-files"]], "__init__": [[38, "init"]], "__len__": [[38, "len"]], "__getitem__": [[38, "getitem"]], "Preparing your data for training with DataLoaders": [[38, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[38, "iterate-through-the-dataloader"]], "Learn the Basics": [[39, "learn-the-basics"], [40, "learn-the-basics"]], "Running the Tutorial Code": [[40, "running-the-tutorial-code"], [99, "running-the-tutorial-code"]], "How to Use this Guide": [[40, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[41, "optimizing-model-parameters"]], "Prerequisite Code": [[41, "prerequisite-code"]], "Hyperparameters": [[41, "hyperparameters"]], "Optimization Loop": [[41, "optimization-loop"]], "Loss Function": [[41, "loss-function"], [52, "loss-function"], [104, "loss-function"]], "Full Implementation": [[41, "full-implementation"]], "Quickstart": [[42, "quickstart"]], "Working with data": [[42, "working-with-data"]], "Creating Models": [[42, "creating-models"]], "Optimizing the Model Parameters": [[42, "optimizing-the-model-parameters"]], "Saving Models": [[42, "saving-models"]], "Loading Models": [[42, "loading-models"]], "Save and Load the Model": [[43, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[43, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[43, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[43, "related-tutorials"]], "Tensors": [[45, "tensors"], [54, "tensors"], [85, "tensors"], [121, "tensors"], [121, "id1"]], "Initializing a Tensor": [[45, "initializing-a-tensor"]], "Attributes of a Tensor": [[45, "attributes-of-a-tensor"]], "Operations on Tensors": [[45, "operations-on-tensors"]], "Bridge with NumPy": [[45, "bridge-with-numpy"], [54, "bridge-with-numpy"]], "Tensor to NumPy array": [[45, "tensor-to-numpy-array"], [54, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[45, "numpy-array-to-tensor"], [54, "numpy-array-to-tensor"]], "ToTensor()": [[46, "totensor"]], "Lambda Transforms": [[46, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[47, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[48, "a-gentle-introduction-to-torch-autograd"]], "Background": [[48, "background"], [169, "background"]], "Usage in PyTorch": [[48, "usage-in-pytorch"]], "Differentiation in Autograd": [[48, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[48, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[48, "computational-graph"]], "Exclusion from the DAG": [[48, "exclusion-from-the-dag"]], "Further readings:": [[48, "further-readings"]], "Training a Classifier": [[49, "training-a-classifier"]], "What about data?": [[49, "what-about-data"]], "Training an image classifier": [[49, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[49, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[49, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[49, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[49, "train-the-network"]], "5. Test the network on the test data": [[49, "test-the-network-on-the-test-data"]], "Training on GPU": [[49, "training-on-gpu"]], "Training on multiple GPUs": [[49, "training-on-multiple-gpus"]], "Where do I go next?": [[49, "where-do-i-go-next"]], "Optional: Data Parallelism": [[50, "optional-data-parallelism"]], "Imports and parameters": [[50, "imports-and-parameters"]], "Dummy DataSet": [[50, "dummy-dataset"]], "Simple Model": [[50, "simple-model"]], "Create Model and DataParallel": [[50, "create-model-and-dataparallel"]], "Run the Model": [[50, "run-the-model"]], "Results": [[50, "results"], [58, "results"], [80, "results"], [176, "results"]], "2 GPUs": [[50, "gpus"]], "3 GPUs": [[50, "id1"]], "8 GPUs": [[50, "id2"]], "Summary": [[50, "summary"], [134, "summary"], [181, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[51, "deep-learning-with-pytorch-a-60-minute-blitz"], [63, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[52, "neural-networks"]], "Define the network": [[52, "define-the-network"]], "Backprop": [[52, "backprop"]], "Update the weights": [[52, "update-the-weights"]], "Tensor Initialization": [[54, "tensor-initialization"]], "Tensor Attributes": [[54, "tensor-attributes"]], "Tensor Operations": [[54, "tensor-operations"]], "Chatbot Tutorial": [[55, "chatbot-tutorial"]], "Preparations": [[55, "preparations"]], "Load & Preprocess Data": [[55, "load-preprocess-data"]], "Create formatted data file": [[55, "create-formatted-data-file"]], "Load and trim data": [[55, "load-and-trim-data"]], "Prepare Data for Models": [[55, "prepare-data-for-models"]], "Define Models": [[55, "define-models"]], "Seq2Seq Model": [[55, "seq2seq-model"]], "Encoder": [[55, "encoder"]], "Decoder": [[55, "decoder"]], "Define Training Procedure": [[55, "define-training-procedure"]], "Masked loss": [[55, "masked-loss"]], "Single training iteration": [[55, "single-training-iteration"]], "Training iterations": [[55, "training-iterations"]], "Define Evaluation": [[55, "define-evaluation"]], "Greedy decoding": [[55, "greedy-decoding"]], "Evaluate my text": [[55, "evaluate-my-text"]], "Run Model": [[55, "run-model"]], "Run Training": [[55, "run-training"]], "Run Evaluation": [[55, "run-evaluation"]], "Running Tutorials in Google Colab": [[56, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[56, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[56, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[56, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[57, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[57, "dataset-class"]], "Compose transforms": [[57, "compose-transforms"]], "Iterating through the dataset": [[57, "iterating-through-the-dataset"]], "Afterword: torchvision": [[57, "afterword-torchvision"]], "DCGAN Tutorial": [[58, "dcgan-tutorial"]], "Generative Adversarial Networks": [[58, "generative-adversarial-networks"]], "What is a GAN?": [[58, "what-is-a-gan"]], "What is a DCGAN?": [[58, "what-is-a-dcgan"]], "Inputs": [[58, "inputs"], [80, "inputs"]], "Data": [[58, "data"]], "Implementation": [[58, "implementation"], [80, "implementation"]], "Weight Initialization": [[58, "weight-initialization"]], "Generator": [[58, "generator"]], "Discriminator": [[58, "discriminator"]], "Loss Functions and Optimizers": [[58, "loss-functions-and-optimizers"]], "Training": [[58, "training"], [140, "training"], [141, "training"], [177, "training"], [182, "training"], [252, "training"], [252, "id5"]], "Where to Go Next": [[58, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[59, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[59, "why-use-torchrun"]], "Graceful restarts": [[59, "graceful-restarts"]], "Process group initialization": [[59, "process-group-initialization"]], "Use torchrun-provided environment variables": [[59, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[59, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[59, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[59, "resuming-training"]], "Running the script": [[59, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[60, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[60, "running-the-code"]], "Tutorial sections": [[60, "tutorial-sections"]], "Multi GPU training with DDP": [[61, "multi-gpu-training-with-ddp"]], "Imports": [[61, "imports"]], "Constructing the process group": [[61, "constructing-the-process-group"]], "Constructing the DDP model": [[61, "constructing-the-ddp-model"]], "Distributing input data": [[61, "distributing-input-data"]], "Saving model checkpoints": [[61, "saving-model-checkpoints"]], "Running the distributed training job": [[61, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[62, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[62, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[63, "what-is-pytorch"]], "Goal of this tutorial:": [[63, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[64, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[65, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[66, "pytorch-distributed-overview"]], "Parallelism APIs": [[66, "parallelism-apis"]], "Sharding primitives": [[66, "sharding-primitives"]], "Communications APIs": [[66, "communications-apis"]], "Launcher": [[66, "launcher"]], "Applying Parallelism To Scale Your Model": [[66, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[66, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[68, "pytorch-tensors-and-autograd"], [121, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[69, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[70, "pytorch-control-flow-weight-sharing"], [121, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[72, "pytorch-custom-nn-modules"], [121, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[73, "pytorch-nn"], [121, "pytorch-nn"]], "PyTorch: optim": [[74, "pytorch-optim"], [121, "pytorch-optim"]], "Warm-up: numpy": [[77, "warm-up-numpy"], [121, "warm-up-numpy"]], "PyTorch: Tensors": [[78, "pytorch-tensors"], [121, "pytorch-tensors"]], "Adversarial Example Generation": [[80, "adversarial-example-generation"]], "Threat Model": [[80, "threat-model"]], "Fast Gradient Sign Attack": [[80, "fast-gradient-sign-attack"]], "Model Under Attack": [[80, "model-under-attack"]], "FGSM Attack": [[80, "fgsm-attack"]], "Testing Function": [[80, "testing-function"]], "Run Attack": [[80, "run-attack"]], "Accuracy vs Epsilon": [[80, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[80, "sample-adversarial-examples"]], "Where to go next?": [[80, "where-to-go-next"]], "Finetuning Torchvision Models": [[81, "finetuning-torchvision-models"]], "Autograd": [[82, "autograd"], [121, "autograd"], [121, "id2"]], "nn Package": [[83, "nn-package"]], "Multi-GPU Examples": [[84, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[86, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[87, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[87, "installing-hta"]], "Temporal Breakdown": [[87, "temporal-breakdown"]], "Idle Time Breakdown": [[87, "idle-time-breakdown"]], "Kernel Breakdown": [[87, "kernel-breakdown"]], "Kernel Duration Distribution": [[87, "kernel-duration-distribution"]], "Communication Computation Overlap": [[87, "communication-computation-overlap"]], "Augmented Counters": [[87, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[87, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[87, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[88, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[90, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[90, "hybrid-frontend-information"]], "Motivating Example": [[90, "motivating-example"]], "Part 1 - Tracing a pure python function": [[90, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[90, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[90, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[90, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[90, "top-level-module"]], "Running the Model": [[90, "running-the-model"]], "Tracing the Top-Level Model": [[90, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[92, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[93, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[93, "setup-imports"]], "Data loaders": [[93, "data-loaders"]], "Configurable neural network": [[93, "configurable-neural-network"]], "The train function": [[93, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[93, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[93, "communicating-with-ray-tune"]], "Full training function": [[93, "full-training-function"]], "Test set accuracy": [[93, "test-set-accuracy"]], "Configuring the search space": [[93, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[94, "introduction-to-pytorch-youtube-series"], [99, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[95, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[95, "what-do-we-need-autograd-for"]], "A Simple Example": [[95, "a-simple-example"]], "Autograd in Training": [[95, "autograd-in-training"]], "Turning Autograd Off and On": [[95, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[95, "autograd-and-in-place-operations"]], "Autograd Profiler": [[95, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[95, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[95, "the-high-level-api"]], "Model Understanding with Captum": [[96, "model-understanding-with-captum"]], "A First Example": [[96, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[96, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[96, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[96, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[96, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[97, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[98, "introduction-to-pytorch"], [109, "introduction-to-pytorch"]], "PyTorch Tensors": [[98, "pytorch-tensors"]], "PyTorch Models": [[98, "pytorch-models"]], "Datasets and Dataloaders": [[98, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[98, "training-your-pytorch-model"]], "Building Models with PyTorch": [[100, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[100, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[100, "common-layer-types"]], "Linear Layers": [[100, "linear-layers"]], "Convolutional Layers": [[100, "convolutional-layers"]], "Recurrent Layers": [[100, "recurrent-layers"]], "Transformers": [[100, "transformers"]], "Other Layers and Functions": [[100, "other-layers-and-functions"]], "Data Manipulation Layers": [[100, "data-manipulation-layers"]], "Activation Functions": [[100, "activation-functions"]], "PyTorch TensorBoard Support": [[102, "pytorch-tensorboard-support"]], "Before You Start": [[102, "before-you-start"]], "Showing Images in TensorBoard": [[102, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[102, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[102, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[102, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[102, "other-resources"], [104, "other-resources"]], "Introduction to PyTorch Tensors": [[103, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[103, "creating-tensors"], [109, "creating-tensors"]], "Random Tensors and Seeding": [[103, "random-tensors-and-seeding"]], "Tensor Shapes": [[103, "tensor-shapes"]], "Tensor Data Types": [[103, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[103, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[103, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[103, "more-math-with-tensors"]], "Altering Tensors in Place": [[103, "altering-tensors-in-place"]], "Copying Tensors": [[103, "copying-tensors"]], "Moving to Accelerator": [[103, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[103, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[103, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[103, "numpy-bridge"]], "Training with PyTorch": [[104, "training-with-pytorch"]], "Dataset and DataLoader": [[104, "dataset-and-dataloader"]], "The Model": [[104, "the-model"]], "The Training Loop": [[104, "the-training-loop"]], "Per-Epoch Activity": [[104, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[105, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[105, "loading-cifar-10"]], "Defining model classes and utility functions": [[105, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[105, "cross-entropy-runs"]], "Knowledge distillation run": [[105, "knowledge-distillation-run"]], "Cosine loss minimization run": [[105, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[105, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[106, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[106, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[106, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[106, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[106, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[107, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[107, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[107, "affine-maps"]], "Non-Linearities": [[107, "non-linearities"]], "Softmax and Probabilities": [[107, "softmax-and-probabilities"]], "Objective Functions": [[107, "objective-functions"]], "Optimization and Training": [[107, "optimization-and-training"]], "Creating Network Components in PyTorch": [[107, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[107, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[108, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[109, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[109, "operations-with-tensors"]], "Reshaping Tensors": [[109, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[109, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[110, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[110, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[110, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[110, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[112, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[112, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[112, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[112, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[112, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[113, "what-is-torch-nn-really"]], "MNIST data setup": [[113, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[113, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[113, "using-torch-nn-functional"]], "Refactor using nn.Module": [[113, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[113, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[113, "refactor-using-torch-optim"]], "Refactor using Dataset": [[113, "refactor-using-dataset"]], "Refactor using DataLoader": [[113, "refactor-using-dataloader"]], "Add validation": [[113, "add-validation"]], "Create fit() and get_data()": [[113, "create-fit-and-get-data"]], "Switch to CNN": [[113, "switch-to-cnn"]], "Using nn.Sequential": [[113, "using-nn-sequential"]], "Wrapping DataLoader": [[113, "wrapping-dataloader"]], "Using your Accelerator": [[113, "using-your-accelerator"]], "Closing thoughts": [[113, "closing-thoughts"]], "Export a model with control flow to ONNX": [[114, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[114, "define-the-models"]], "Exporting the Model: First Attempt": [[114, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[114, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[114, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[114, "further-reading"], [115, "further-reading"], [117, "further-reading"], [118, "further-reading"]], "Export a PyTorch model to ONNX": [[115, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[115, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[115, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[115, "export-the-model-to-onnx-format"]], "3.5. (Optional) Optimize the ONNX model": [[115, "optional-optimize-the-onnx-model"]], "4. Save the ONNX model in a file": [[115, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[115, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[115, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[115, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[116, "onnx"]], "Introduction to ONNX": [[117, "introduction-to-onnx"]], "Dependencies": [[117, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[118, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[118, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[118, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[118, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[120, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[120, "performance-debugging-using-profiler"]], "Profile the forward pass": [[120, "profile-the-forward-pass"]], "Print profiler results": [[120, "print-profiler-results"]], "Improve memory performance": [[120, "improve-memory-performance"]], "Improve time performance": [[120, "improve-time-performance"]], "Learning PyTorch with Examples": [[121, "learning-pytorch-with-examples"]], "Table of Contents": [[121, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[121, "pytorch-defining-new-autograd-functions"]], "nn module": [[121, "nn-module"], [121, "id3"]], "Examples": [[121, "examples"], [229, "examples"], [293, "examples"]], "Saving and Loading Models": [[122, "saving-and-loading-models"]], "What is a state_dict?": [[122, "what-is-a-state-dict"]], "Example:": [[122, "example"]], "Saving & Loading Model for Inference": [[122, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[122, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[122, "save-load-entire-model"]], "Saving an Exported Program": [[122, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[122, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[122, "save"], [122, "id1"], [122, "id3"]], "Load:": [[122, "load"], [122, "id2"], [122, "id4"]], "Saving Multiple Models in One File": [[122, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[122, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[122, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[122, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[122, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[122, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[122, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[124, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[125, "template-tutorial"]], "Steps": [[125, "steps"], [186, "steps"], [250, "steps"], [264, "steps"], [266, "steps"], [267, "steps"], [270, "steps"], [281, "steps"], [282, "steps"], [283, "steps"], [285, "steps"]], "(Optional) Additional Exercises": [[125, "optional-additional-exercises"]], "Text classification with the torchtext library": [[126, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[127, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[128, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[128, "load-data"], [174, "load-data"]], "Visualize a few images": [[128, "visualize-a-few-images"], [174, "visualize-a-few-images"]], "Training the model": [[128, "training-the-model"], [184, "training-the-model"]], "Visualizing the model predictions": [[128, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[128, "finetuning-the-convnet"]], "Train and evaluate": [[128, "train-and-evaluate"], [128, "id1"], [174, "train-and-evaluate"]], "ConvNet as fixed feature extractor": [[128, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[128, "inference-on-custom-images"]], "Further Learning": [[128, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[129, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[130, "language-translation-with-nn-transformer-and-torchtext"]], "Distributed and Parallel Training Tutorials": [[131, "distributed-and-parallel-training-tutorials"]], "Learn DDP": [[131, "learn-ddp"]], "Learn FSDP": [[131, "learn-fsdp"]], "Learn Tensor Parallel (TP)": [[131, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[131, "learn-devicemesh"]], "Learn RPC": [[131, "learn-rpc"]], "Custom Extensions": [[131, "custom-extensions"]], "Welcome to PyTorch Tutorials": [[132, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[132, "additional-resources"], [171, "additional-resources"], [267, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[133, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[133, "how-fsdp-works"]], "How to use FSDP": [[133, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[134, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[134, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[134, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[134, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[134, "transformer-wrapping-policy"]], "Mixed Precision": [[134, "mixed-precision"]], "Intializing FSDP Model on Device": [[134, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[134, "sharding-strategy"]], "Backward Prefetch": [[134, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[134, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[135, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[135, "how-fsdp2-works"]], "How to use FSDP2": [[135, "how-to-use-fsdp2"]], "Model Initialization": [[135, "model-initialization"]], "Forward/Backward with Prefetching": [[135, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[135, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[135, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[135, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[135, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[135, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[136, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[136, "performance-benchmark"]], "Impact": [[136, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[136, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[136, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[136, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[137, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[137, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[137, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[137, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[137, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[137, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[137, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[138, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[138, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[138, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[138, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[138, "saved-tensors-hooks"]], "Some unconventional examples": [[138, "some-unconventional-examples"]], "Returning an int": [[138, "returning-an-int"]], "Returning a tuple": [[138, "returning-a-tuple"]], "Returning a str": [[138, "returning-a-str"]], "Saving tensors to CPU": [[138, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[138, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[139, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[139, "defining-the-torchx-app"]], "Setting up the Runner": [[139, "setting-up-the-runner"]], "Setting up the SearchSpace": [[139, "setting-up-the-searchspace"]], "Setting up Metrics": [[139, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[139, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[139, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[139, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[139, "configuring-the-scheduler"]], "Running the optimization": [[139, "running-the-optimization"]], "Evaluating the results": [[139, "evaluating-the-results"]], "Acknowledgments": [[139, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[140, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[140, "recommended-preparation"]], "Preparing Torch": [[140, "preparing-torch"]], "Preparing the Data": [[140, "preparing-the-data"], [141, "preparing-the-data"]], "Turning Names into Tensors": [[140, "turning-names-into-tensors"]], "Creating the Network": [[140, "creating-the-network"], [141, "creating-the-network"]], "Training the Network": [[140, "training-the-network"], [141, "training-the-network"]], "Plotting the Results": [[140, "plotting-the-results"]], "Evaluating the Results": [[140, "evaluating-the-results"]], "Exercises": [[140, "exercises"], [141, "exercises"], [182, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[141, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[141, "preparing-for-training"]], "Plotting the Losses": [[141, "plotting-the-losses"]], "Sampling the Network": [[141, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[142, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[142, "setup"], [149, "setup"], [150, "setup"], [163, "setup"], [171, "setup"], [186, "setup"], [198, "setup"], [220, "setup"], [220, "id1"], [266, "setup"], [281, "setup"], [282, "setup"], [283, "setup"], [285, "setup"], [296, "setup"]], "Basic usage": [[142, "basic-usage"]], "Inspecting the compiled autograd logs": [[142, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[142, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[142, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[142, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[143, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[143, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[143, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[143, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[143, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[143, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[144, "double-backward-with-custom-functions"]], "Saving the Inputs": [[144, "saving-the-inputs"]], "Saving the Outputs": [[144, "saving-the-outputs"]], "Saving Intermediate Results": [[144, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[144, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[144, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[145, "training-real-world-models-with-ddp"]], "Files used for training": [[145, "files-used-for-training"]], "Saving and Loading from the cloud": [[145, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[145, "using-mixed-precision"]], "When is DDP not enough?": [[145, "when-is-ddp-not-enough"]], "Multinode Training": [[146, "multinode-training"]], "Local and Global ranks": [[146, "local-and-global-ranks"]], "Heteregeneous Scaling": [[146, "heteregeneous-scaling"]], "Troubleshooting": [[146, "troubleshooting"], [263, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[147, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[147, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[147, "basic-use-case"]], "Skewed Processing Speeds": [[147, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[147, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[147, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[147, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[148, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[149, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[149, "point-to-point-communication"]], "Collective Communication": [[149, "collective-communication"]], "Distributed Training": [[149, "distributed-training"]], "Our Own Ring-Allreduce": [[149, "our-own-ring-allreduce"]], "Advanced Topics": [[149, "advanced-topics"]], "Communication Backends": [[149, "communication-backends"]], "Initialization Methods": [[149, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[150, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[150, "policy"], [176, "policy"]], "Convolutional network": [[150, "convolutional-network"]], "LSTM Module": [[150, "lstm-module"]], "MLP": [[150, "mlp"]], "Using the Q-Values to select an action": [[150, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[150, "using-the-model-for-the-loss"]], "DQN Loss": [[150, "dqn-loss"]], "Collector and replay buffer": [[150, "collector-and-replay-buffer"]], "(beta) Dynamic Quantization on BERT": [[151, "beta-dynamic-quantization-on-bert"]], "1. Setup": [[151, "setup"]], "1.1 Install PyTorch and HuggingFace Transformers": [[151, "install-pytorch-and-huggingface-transformers"]], "1.2 Import the necessary modules": [[151, "import-the-necessary-modules"]], "1.3 Learn about helper functions": [[151, "learn-about-helper-functions"]], "1.4 Download the dataset": [[151, "download-the-dataset"]], "2. Fine-tune the BERT model": [[151, "fine-tune-the-bert-model"]], "2.1 Set global configurations": [[151, "set-global-configurations"]], "2.2 Load the fine-tuned BERT model": [[151, "load-the-fine-tuned-bert-model"]], "2.3 Define the tokenize and evaluation function": [[151, "define-the-tokenize-and-evaluation-function"]], "3. Apply the dynamic quantization": [[151, "apply-the-dynamic-quantization"]], "3.1 Check the model size": [[151, "check-the-model-size"]], "3.2 Evaluate the inference accuracy and time": [[151, "evaluate-the-inference-accuracy-and-time"]], "3.3 Serialize the quantized model": [[151, "serialize-the-quantized-model"]], "References": [[151, "references"], [220, "references"]], "Model ensembling": [[152, "model-ensembling"]], "What is model ensembling?": [[152, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[152, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[152, "performance"]], "Forced Alignment with Wav2Vec2": [[153, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[154, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[154, "basic-usage"], [190, "basic-usage"], [192, "basic-usage"], [251, "basic-usage"], [292, "basic-usage"]], "Usage with Modules": [[154, "usage-with-modules"]], "Using the functional Module API (beta)": [[154, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[154, "custom-autograd-function"]], "Functional API (beta)": [[154, "functional-api-beta"]], "Using the functional API with Modules": [[154, "using-the-functional-api-with-modules"]], "(beta) Building a Convolution/Batch Norm fuser in FX": [[155, "beta-building-a-convolution-batch-norm-fuser-in-fx"]], "Fusing Convolution with Batch Norm": [[155, "fusing-convolution-with-batch-norm"], [155, "id1"]], "FX Fusion Pass": [[155, "fx-fusion-pass"]], "Testing out our Fusion Pass": [[155, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[155, "benchmarking-our-fusion-on-resnet18"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[156, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[156, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[156, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[156, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[157, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[157, "debugging"]], "Get more logging information": [[157, "get-more-logging-information"]], "Determine component of error": [[157, "determine-component-of-error"]], "Compilation error": [[157, "compilation-error"]], "Accuracy debugging": [[157, "accuracy-debugging"]], "Performance profiling": [[157, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[158, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[158, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[158, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[158, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[158, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[158, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[159, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[159, "rl-definitions"]], "Initialize Environment": [[159, "initialize-environment"]], "Preprocess Environment": [[159, "preprocess-environment"]], "Agent": [[159, "agent"]], "Act": [[159, "act"]], "Cache and Recall": [[159, "cache-and-recall"]], "Learn": [[159, "learn"]], "Neural Network": [[159, "neural-network"]], "TD Estimate & TD Target": [[159, "td-estimate-td-target"]], "Updating the model": [[159, "updating-the-model"]], "Save checkpoint": [[159, "save-checkpoint"]], "Putting it all together": [[159, "putting-it-all-together"]], "Logging": [[159, "logging"]], "Let\u2019s play!": [[159, "lets-play"]], "(beta) Channels Last Memory Format in PyTorch": [[160, "beta-channels-last-memory-format-in-pytorch"]], "What is Channels Last": [[160, "what-is-channels-last"]], "Memory Format API": [[160, "memory-format-api"]], "Performance Gains": [[160, "performance-gains"]], "Converting existing models": [[160, "converting-existing-models"]], "Work to do": [[160, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[162, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[163, "neural-tangent-kernels"]], "Create a function version of the model": [[163, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[163, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[163, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[164, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[165, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[166, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[166, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[166, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[166, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[166, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[166, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[167, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[167, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[167, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[167, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[167, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[167, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[167, "concatenating-parametrizations"]], "Initializing parametrizations": [[167, "initializing-parametrizations"]], "Removing parametrizations": [[167, "removing-parametrizations"]], "Per-sample-gradients": [[168, "per-sample-gradients"]], "What is it?": [[168, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[168, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[168, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[169, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[169, "what-you-will-learn"], [200, "what-you-will-learn"], [294, "what-you-will-learn"]], "Preamble": [[169, "preamble"]], "Memory management basics": [[169, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[169, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[169, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[169, "a-pytorch-perspective"]], "pin_memory()": [[169, "pin-memory"]], "non_blocking=True": [[169, "non-blocking-true"]], "Synergies": [[169, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[169, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[169, "practical-recommendations"]], "Additional considerations": [[169, "additional-considerations"]], "Additional resources": [[169, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[170, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[171, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[171, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[171, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[171, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[172, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[172, "basics"], [178, "basics"]], "Step 1: Implement a Subclass of Backend": [[172, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[172, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[172, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[172, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[173, "pruning-tutorial"]], "Create a model": [[173, "create-a-model"]], "Inspect a Module": [[173, "inspect-a-module"]], "Pruning a Module": [[173, "pruning-a-module"]], "Iterative Pruning": [[173, "iterative-pruning"]], "Serializing a pruned model": [[173, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[173, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[173, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[173, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[173, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "(beta) Quantized Transfer Learning for Computer Vision Tutorial": [[174, "beta-quantized-transfer-learning-for-computer-vision-tutorial"]], "Part 0. Prerequisites": [[174, "part-0-prerequisites"]], "Installing the Nightly Build": [[174, "installing-the-nightly-build"]], "Support Function for Model Training": [[174, "support-function-for-model-training"]], "Support Function for Visualizing the Model Predictions": [[174, "support-function-for-visualizing-the-model-predictions"]], "Part 1. Training a Custom Classifier based on a Quantized Feature Extractor": [[174, "part-1-training-a-custom-classifier-based-on-a-quantized-feature-extractor"]], "Part 2. Finetuning the Quantizable Model": [[174, "part-2-finetuning-the-quantizable-model"]], "Finetuning the model": [[174, "finetuning-the-model"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[175, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[175, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[175, "installing-pytorch-and-opencv"]], "Video Capture": [[175, "video-capture"]], "Image Preprocessing": [[175, "image-preprocessing"]], "Model Choices": [[175, "model-choices"]], "MobileNetV2: Quantization and JIT": [[175, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[175, "putting-it-together"]], "Troubleshooting: Performance": [[175, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[176, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[176, "define-hyperparameters"]], "Data collection parameters": [[176, "data-collection-parameters"]], "PPO parameters": [[176, "ppo-parameters"]], "Define an environment": [[176, "define-an-environment"]], "Normalization": [[176, "normalization"]], "Value network": [[176, "value-network"]], "Loss function": [[176, "loss-function"]], "Conclusion and next steps": [[176, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[177, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[177, "replay-memory"]], "DQN algorithm": [[177, "dqn-algorithm"]], "Q-network": [[177, "q-network"]], "Hyperparameters and utilities": [[177, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[178, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[178, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[178, "batch-processing-cartpole-solver"]], "Learn More": [[178, "learn-more"], [186, "learn-more"], [250, "learn-more"], [261, "learn-more"], [264, "learn-more"], [266, "learn-more"], [267, "learn-more"], [270, "learn-more"], [278, "learn-more"], [281, "learn-more"], [282, "learn-more"], [283, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[179, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[180, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[180, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[180, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[181, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[181, "fused-implementations"]], "Explicit Dispatcher Control": [[181, "explicit-dispatcher-control"]], "Hardware dependence": [[181, "hardware-dependence"]], "Causal Self Attention": [[181, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[181, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[181, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[181, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[182, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[182, "loading-data-files"]], "The Seq2Seq Model": [[182, "the-seq2seq-model"]], "The Encoder": [[182, "the-encoder"]], "The Decoder": [[182, "the-decoder"]], "Simple Decoder": [[182, "simple-decoder"]], "Attention Decoder": [[182, "attention-decoder"]], "Preparing Training Data": [[182, "preparing-training-data"]], "Training the Model": [[182, "training-the-model"]], "Plotting results": [[182, "plotting-results"]], "Evaluation": [[182, "evaluation"]], "Training and Evaluating": [[182, "training-and-evaluating"]], "Visualizing Attention": [[182, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[184, "spatial-transformer-networks-tutorial"]], "Loading the data": [[184, "loading-the-data"]], "Depicting spatial transformer networks": [[184, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[184, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[185, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[186, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[186, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[186, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[186, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[186, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[186, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[186, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[186, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[187, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[187, "tensorboard-setup"]], "2. Writing to TensorBoard": [[187, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[187, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[187, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[187, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[187, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[188, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[189, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[189, "setting-up-the-environment"]], "Importing related libraries": [[189, "importing-related-libraries"]], "Clean-up before a run": [[189, "clean-up-before-a-run"]], "Downloading the data": [[189, "downloading-the-data"]], "Reading the data": [[189, "reading-the-data"]], "Classify image patches": [[189, "classify-image-patches"]], "Define PatchPredictor model": [[189, "define-patchpredictor-model"]], "Predict patch labels": [[189, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[189, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[189, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[189, "where-to-go-from-here"]], "Introduction to torch.compile": [[190, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[190, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[190, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[190, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[190, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[190, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[191, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[192, "torch-export-tutorial"]], "Graph Breaks": [[192, "graph-breaks"]], "Non-Strict Export": [[192, "non-strict-export"]], "Control Flow Ops": [[192, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[192, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[192, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[192, "specialization"]], "Named Dims": [[192, "named-dims"]], "Constraint violations, suggested fixes": [[192, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[192, "data-dependent-errors"]], "Guards, torch._check()": [[192, "guards-torch-check"]], "Specialized values": [[192, "specialized-values"]], "Custom Ops": [[192, "custom-ops"]], "IR/Decompositions": [[192, "ir-decompositions"]], "ExportDB": [[192, "exportdb"]], "Running the Exported Program": [[192, "running-the-exported-program"]], "Introduction to TorchRec": [[193, "introduction-to-torchrec"], [194, "introduction-to-torchrec"]], "Install Dependencies": [[193, "install-dependencies"]], "Embeddings": [[193, "embeddings"]], "Embeddings in RecSys": [[193, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[193, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[193, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[193, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[193, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[193, "distributed-training-and-sharding"]], "Distributed Embeddings": [[193, "distributed-embeddings"]], "Sharding": [[193, "sharding"]], "Sharded Modules": [[193, "sharded-modules"]], "Planner": [[193, "planner"]], "Planner Result": [[193, "planner-result"]], "GPU Training with LazyAwaitable": [[193, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[193, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[193, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[193, "distributedmodelparallel"]], "Sharding Best Practices": [[193, "sharding-best-practices"]], "Adding in the Optimizer": [[193, "adding-in-the-optimizer"]], "Optimizer Classes": [[193, "optimizer-classes"]], "Fused optimizer in TorchRec": [[193, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[193, "adding-an-optimizer-to-embeddingbagcollection"]], "Inference": [[193, "inference"]], "Quantization": [[193, "quantization"]], "Shard": [[193, "shard"]], "Compilation": [[193, "compilation"]], "TorchVision Object Detection Finetuning Tutorial": [[195, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[195, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[195, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[195, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[195, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[195, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[195, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[195, "putting-everything-together"]], "Testing forward() method (Optional)": [[195, "testing-forward-method-optional"]], "Wrapping up": [[195, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[196, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[196, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[196, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[196, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[196, "multiheadattention"]], "Utilities": [[196, "utilities"]], "GPT-style layer": [[196, "gpt-style-layer"]], "Going one step further": [[196, "going-one-step-further"]], "Cross Attention": [[196, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[196, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[196, "flexattention-njt"]], "Packed Projection": [[196, "packed-projection"]], "Input projection for MultiheadAttention": [[196, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[196, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[196, "extended-examples"]], "(prototype) PyTorch BackendConfig Tutorial": [[197, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[197, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[197, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[197, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[197, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[197, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[197, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[197, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[197, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[198, "introduction-to-context-parallel"]], "Enable Context Parallel": [[198, "enable-context-parallel"]], "Select Rotation Approach": [[198, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[199, "profiling-pytorch-rpc-based-workloads"], [248, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[200, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[200, "enabling-flight-recorder"]], "Additional Settings": [[200, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[200, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[200, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[200, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[200, "an-end-to-end-example"]], "(prototype) FX Graph Mode Post Training Dynamic Quantization": [[201, "prototype-fx-graph-mode-post-training-dynamic-quantization"]], "1. Define the Model, Download Data and Model": [[201, "define-the-model-download-data-and-model"]], "2. Post Training Dynamic Quantization": [[201, "post-training-dynamic-quantization"], [261, "post-training-dynamic-quantization"]], "3. Conclusion": [[201, "conclusion"]], "(prototype) FX Graph Mode Post Training Static Quantization": [[202, "prototype-fx-graph-mode-post-training-static-quantization"]], "1. Motivation of FX Graph Mode Quantization": [[202, "motivation-of-fx-graph-mode-quantization"]], "2. Define Helper Functions and Prepare Dataset": [[202, "define-helper-functions-and-prepare-dataset"]], "3. Set model to eval mode": [[202, "set-model-to-eval-mode"]], "4. Specify how to quantize the model with QConfigMapping": [[202, "specify-how-to-quantize-the-model-with-qconfigmapping"]], "5. Prepare the Model for Post Training Static Quantization": [[202, "prepare-the-model-for-post-training-static-quantization"]], "6. Calibration": [[202, "calibration"]], "7. Convert the Model to a Quantized Model": [[202, "convert-the-model-to-a-quantized-model"]], "8. Evaluation": [[202, "evaluation"]], "9. Debugging Quantized Model": [[202, "debugging-quantized-model"]], "10. Comparison with Baseline Float Model and Eager Mode Quantization": [[202, "comparison-with-baseline-float-model-and-eager-mode-quantization"]], "(prototype) FX Graph Mode Quantization User Guide": [[203, "prototype-fx-graph-mode-quantization-user-guide"]], "Symbolically trace only the code that needs to be quantized": [[203, "symbolically-trace-only-the-code-that-needs-to-be-quantized"]], "Skip symbolically trace the non-traceable code": [[203, "skip-symbolically-trace-the-non-traceable-code"]], "Refactor your code to make it symbolically traceable": [[203, "refactor-your-code-to-make-it-symbolically-traceable"]], "Write your own observed and quantized submodule": [[203, "write-your-own-observed-and-quantized-submodule"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[204, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[204, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[205, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[205, "set-up-your-environment"]], "(prototype) Graph Mode Dynamic Quantization on BERT": [[206, "prototype-graph-mode-dynamic-quantization-on-bert"]], "1. Quantizing BERT Model": [[206, "quantizing-bert-model"]], "1.1 Setup": [[206, "setup"]], "1.2 Download GLUE dataset": [[206, "download-glue-dataset"]], "1.3 Set global BERT configurations": [[206, "set-global-bert-configurations"]], "1.4 Quantizing BERT model with Graph Mode Quantization": [[206, "quantizing-bert-model-with-graph-mode-quantization"]], "1.4.1 Script/Trace the model": [[206, "script-trace-the-model"]], "1.4.2 Specify qconfig_dict": [[206, "specify-qconfig-dict"]], "1.4.3 Quantize the model (one-line API)": [[206, "quantize-the-model-one-line-api"]], "2. Evaluation": [[206, "evaluation"]], "2.1 Check Model Size": [[206, "check-model-size"]], "2.2 Run the evaluation": [[206, "run-the-evaluation"]], "3. Debugging the Quantized Model": [[206, "debugging-the-quantized-model"]], "3.1. Evaluate the Debug Model": [[206, "evaluate-the-debug-model"]], "4. Comparing Results with Eager Mode": [[206, "comparing-results-with-eager-mode"]], "5. Benchmarking the Model": [[206, "benchmarking-the-model"]], "Inductor C++ Wrapper Tutorial": [[207, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[207, "prerequisites"], [217, "prerequisites"], [228, "prerequisites"]], "Enabling the API": [[207, "enabling-the-api"]], "Example code": [[207, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[208, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[208, "software-installation"]], "Install a Compiler": [[208, "install-a-compiler"]], "Set Up Environment": [[208, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[208, "id1"]], "Intel Compiler": [[208, "id2"]], "LLVM Compiler": [[208, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[210, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[211, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[212, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[213, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[213, "introduction-and-motivation"]], "Preparation": [[213, "preparation"], [214, "preparation"], [215, "preparation"]], "Simpler Code with MaskedTensor": [[213, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[213, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[213, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[214, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[214, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[214, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[215, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[215, "using-maskedtensor"]], "Construction": [[215, "construction"]], "Accessing the data and mask": [[215, "accessing-the-data-and-mask"]], "Indexing and slicing": [[215, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[215, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[215, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[215, "torch-where"]], "Another torch.where": [[215, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[215, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[215, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[215, "safe-softmax"]], "Implementing missing torch.nan* operators": [[215, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[216, "prototype-maskedtensor-sparsity"]], "Principles": [[216, "principles"]], "Sparse COO tensors": [[216, "sparse-coo-tensors"]], "Sparse CSR tensors": [[216, "sparse-csr-tensors"]], "Supported Operations": [[216, "supported-operations"]], "Unary": [[216, "unary"]], "Binary": [[216, "binary"]], "Reductions": [[216, "reductions"]], "MaskedTensor Helper Methods": [[216, "maskedtensor-helper-methods"]], "Appendix": [[216, "appendix"]], "Sparse COO Construction": [[216, "sparse-coo-construction"]], "Sparse CSR Construction": [[216, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[217, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[217, "activating-the-max-autotune-mode"]], "Example": [[217, "example"]], "Getting Started with Nested Tensors": [[218, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[218, "nested-tensor-initialization"]], "Nested Tensor Operations": [[218, "nested-tensor-operations"]], "Why Nested Tensor": [[218, "why-nested-tensor"]], "See Also": [[218, "see-also"], [240, "see-also"], [292, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[219, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch Numeric Suite Tutorial": [[220, "pytorch-numeric-suite-tutorial"]], "Numeric Suite for Static Quantization": [[220, "numeric-suite-for-static-quantization"]], "1. Compare the weights of float and quantized models": [[220, "compare-the-weights-of-float-and-quantized-models"], [220, "id2"]], "2. Compare float point and quantized models at corresponding locations": [[220, "compare-float-point-and-quantized-models-at-corresponding-locations"], [220, "id3"]], "3. Compare a module in a quantized model with its float point equivalent, with the same input data": [[220, "compare-a-module-in-a-quantized-model-with-its-float-point-equivalent-with-the-same-input-data"], [220, "id4"]], "Numeric Suite for Dynamic Quantization": [[220, "numeric-suite-for-dynamic-quantization"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[221, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[221, "post-training-quantization"], [226, "post-training-quantization"], [227, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[221, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[221, "capture-fx-graph"], [226, "capture-fx-graph"], [227, "capture-fx-graph"]], "2. Apply Quantization": [[221, "apply-quantization"], [226, "apply-quantization"], [227, "apply-quantization"]], "3. Lower into OpenVINO representation": [[221, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[221, "optional-improve-quantized-model-metrics"]], "PyTorch Prototype Recipes": [[222, "pytorch-prototype-recipes"]], "(prototype) PyTorch 2 Export Post Training Quantization": [[223, "prototype-pytorch-2-export-post-training-quantization"]], "Motivation of PyTorch 2 Export Quantization": [[223, "motivation-of-pytorch-2-export-quantization"]], "Define Helper Functions and Prepare Dataset": [[223, "define-helper-functions-and-prepare-dataset"]], "Set the model to eval mode": [[223, "set-the-model-to-eval-mode"]], "Export the model with torch.export": [[223, "export-the-model-with-torch-export"], [225, "export-the-model-with-torch-export"]], "Import the Backend Specific Quantizer and Configure how to Quantize the Model": [[223, "import-the-backend-specific-quantizer-and-configure-how-to-quantize-the-model"], [225, "import-the-backend-specific-quantizer-and-configure-how-to-quantize-the-model"]], "Prepare the Model for Post Training Quantization": [[223, "prepare-the-model-for-post-training-quantization"]], "Calibration": [[223, "calibration"]], "Convert the Calibrated Model to a Quantized Model": [[223, "convert-the-calibrated-model-to-a-quantized-model"]], "Checking Model Size and Accuracy Evaluation": [[223, "checking-model-size-and-accuracy-evaluation"]], "Save and Load Quantized Model": [[223, "save-and-load-quantized-model"]], "Debugging the Quantized Model": [[223, "debugging-the-quantized-model"]], "Lowering and Performance Evaluation": [[223, "lowering-and-performance-evaluation"]], "Quantization in PyTorch 2.0 Export Tutorial": [[224, "quantization-in-pytorch-2-0-export-tutorial"], [230, "quantization-in-pytorch-2-0-export-tutorial"]], "(prototype) PyTorch 2 Export Quantization-Aware Training (QAT)": [[225, "prototype-pytorch-2-export-quantization-aware-training-qat"]], "Define Helper Functions and Prepare the Dataset": [[225, "define-helper-functions-and-prepare-the-dataset"]], "Prepare the Model for Quantization-Aware Training": [[225, "prepare-the-model-for-quantization-aware-training"]], "Training Loop": [[225, "training-loop"]], "Saving and Loading Model Checkpoints": [[225, "saving-and-loading-model-checkpoints"]], "Convert the Trained Model to a Quantized Model": [[225, "convert-the-trained-model-to-a-quantized-model"]], "PyTorch 2 Export Quantization with X86 Backend through Inductor": [[226, "pytorch-2-export-quantization-with-x86-backend-through-inductor"]], "3. Lower into Inductor": [[226, "lower-into-inductor"], [227, "lower-into-inductor"]], "Quantization Aware Training": [[226, "quantization-aware-training"]], "PyTorch 2 Export Quantization with Intel GPU Backend through Inductor": [[227, "pytorch-2-export-quantization-with-intel-gpu-backend-through-inductor"]], "How to Write a Quantizer for PyTorch 2 Export Quantization": [[228, "how-to-write-a-quantizer-for-pytorch-2-export-quantization"]], "Annotation API": [[228, "annotation-api"]], "1. Annotate Common Operator Patterns": [[228, "annotate-common-operator-patterns"]], "2. Annotate Operators that Shares Quantization Params": [[228, "annotate-operators-that-shares-quantization-params"]], "3. Annotate Operators with Fixed Quantization Parameters": [[228, "annotate-operators-with-fixed-quantization-parameters"]], "4. Annotate Tensors with Derived Quantization Parameters": [[228, "annotate-tensors-with-derived-quantization-parameters"]], "5. A Toy Example with Resnet18": [[228, "a-toy-example-with-resnet18"]], "A Note on IR for PT2E Quantization Flow": [[228, "a-note-on-ir-for-pt2e-quantization-flow"]], "Motivation: Problem of Matching aten IR directly": [[228, "motivation-problem-of-matching-aten-ir-directly"]], "Recommendation: Use SubgraphMatcherWithNameNodeMap for pattern matching": [[228, "recommendation-use-subgraphmatcherwithnamenodemap-for-pattern-matching"]], "Autoloading Out-of-Tree Extension": [[229, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[229, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[229, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[231, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[231, "id1"]], "Skipping Module Parameter Initialization": [[233, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[233, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[233, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[233, "implementation-details"]], "Model Freezing in TorchScript": [[234, "model-freezing-in-torchscript"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[235, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[236, "torch-vmap"]], "So, what is vmap?": [[236, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[237, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[237, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[237, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[237, "desktop-build"]], "Vulkan SDK": [[237, "vulkan-sdk"]], "Android build": [[237, "android-build"]], "Model preparation": [[237, "model-preparation"]], "Using Vulkan backend in code": [[237, "using-vulkan-backend-in-code"]], "C++ API": [[237, "c-api"]], "Python API": [[237, "python-api"]], "Android Java API": [[237, "android-java-api"]], "Building android test app with Vulkan": [[237, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[237, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[238, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[238, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[238, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[238, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[238, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[239, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[240, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[240, "model-setup"], [241, "model-setup"], [249, "model-setup"]], "Setting up and running the optimizer benchmark": [[240, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[241, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[241, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[241, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[242, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[242, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[242, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[243, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[243, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[243, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[244, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[244, "how-dcp-works"]], "How to use DCP": [[244, "how-to-use-dcp"]], "Saving": [[244, "saving"]], "Loading": [[244, "loading"]], "Formats": [[244, "formats"]], "Getting Started with CommDebugMode": [[245, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[245, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[245, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[246, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[246, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[246, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[246, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[246, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Distributed Optimizer with TorchScript support": [[247, "distributed-optimizer-with-torchscript-support"]], "What is Distributed Optimizer?": [[247, "what-is-distributed-optimizer"]], "What is Distributed Optimizer with TorchScript support?": [[247, "what-is-distributed-optimizer-with-torchscript-support"]], "How to write a customized distributed optimizer with TorchScript support?": [[247, "how-to-write-a-customized-distributed-optimizer-with-torchscript-support"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[249, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[249, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[249, "setting-up-and-running-the-compiled-kernel"]], "Fuse Modules Recipe": [[250, "fuse-modules-recipe"]], "Pre-requisites": [[250, "pre-requisites"], [261, "pre-requisites"]], "1. Define the Example Model": [[250, "define-the-example-model"]], "2. Generate Two Models with and without fuse_modules": [[250, "generate-two-models-with-and-without-fuse-modules"]], "3. Build the Android benchmark Tool": [[250, "build-the-android-benchmark-tool"]], "4. Test Compare the Fused and Non-Fused Models": [[250, "test-compare-the-fused-and-non-fused-models"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[251, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[251, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[251, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[251, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[251, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[252, "intel-extension-for-pytorch"]], "Features": [[252, "features"], [253, "features"]], "Examples \u2013 CPU": [[252, "examples-cpu"]], "Float32": [[252, "float32"], [252, "id1"], [252, "id3"], [252, "id6"], [252, "id9"], [252, "id12"]], "BFloat16": [[252, "bfloat16"], [252, "id2"], [252, "id4"], [252, "id7"], [252, "id10"], [252, "id13"]], "Inference - Imperative Mode": [[252, "inference-imperative-mode"], [252, "id8"]], "Inference - TorchScript Mode": [[252, "inference-torchscript-mode"], [252, "id11"]], "Examples \u2013 GPU": [[252, "examples-gpu"]], "Float16": [[252, "float16"], [252, "id14"]], "C++ (CPU only)": [[252, "c-cpu-only"]], "Model Zoo (CPU only)": [[252, "model-zoo-cpu-only"]], "Tutorials": [[252, "tutorials"], [253, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[253, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[253, "usages"]], "Model": [[253, "model"]], "Accuracy driven quantization": [[253, "accuracy-driven-quantization"]], "Quantization aware training": [[253, "quantization-aware-training"]], "Performance only quantization": [[253, "performance-only-quantization"]], "Quantization outputs": [[253, "quantization-outputs"]], "Deployment": [[253, "deployment"]], "Loading data in PyTorch": [[254, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[255, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[256, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[257, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[258, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[259, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[259, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[259, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[259, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[259, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[259, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[259, "configure-profiling-for-xpu"]], "Read Profiling Result": [[259, "read-profiling-result"]], "Read XPU Profiling Result": [[259, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[259, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[260, "summary-of-pytorch-mobile-recipes"]], "Quantization Recipe": [[261, "quantization-recipe"]], "Workflows": [[261, "workflows"]], "1. Use Pretrained Quantized MobileNet v2": [[261, "use-pretrained-quantized-mobilenet-v2"]], "3. Post Training Static Quantization": [[261, "post-training-static-quantization"]], "4. Quantization Aware Training": [[261, "quantization-aware-training"]], "Model Interpretability using Captum": [[262, "model-interpretability-using-captum"]], "Before you begin": [[262, "before-you-begin"]], "Computing Attribution": [[262, "computing-attribution"]], "Visualizing the Results": [[262, "visualizing-the-results"]], "Final Notes": [[262, "final-notes"]], "Automatic Mixed Precision": [[263, "automatic-mixed-precision"]], "A simple network": [[263, "a-simple-network"]], "Default Precision": [[263, "default-precision"]], "Adding torch.autocast": [[263, "adding-torch-autocast"]], "Adding GradScaler": [[263, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[263, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[263, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[263, "saving-resuming"]], "Inference/Evaluation": [[263, "inference-evaluation"]], "Advanced topics": [[263, "advanced-topics"]], "Speedup with Amp is minor": [[263, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[263, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[263, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[264, "syntaxerror"]], "1. Defining functions to benchmark": [[264, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[264, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[264, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[264, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[264, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[264, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[264, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[264, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[265, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[266, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[266, "import-necessary-libraries-for-loading-our-data"], [281, "import-necessary-libraries-for-loading-our-data"], [282, "import-necessary-libraries-for-loading-our-data"], [283, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[266, "define-and-initialize-the-neural-network"], [282, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[266, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[266, "optional-pass-data-through-your-model-to-test"]], "Dynamic Quantization": [[267, "dynamic-quantization"]], "What is dynamic quantization?": [[267, "what-is-dynamic-quantization"]], "1: Set Up": [[267, "set-up"]], "2: Do the Quantization": [[267, "do-the-quantization"]], "3. Look at Model Size": [[267, "look-at-model-size"]], "4. Look at Latency": [[267, "look-at-latency"]], "5: Look at Accuracy": [[267, "look-at-accuracy"]], "PyTorch Recipes": [[268, "pytorch-recipes"], [284, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[269, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[269, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[269, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[269, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[270, "pytorch-profiler"]], "1. Import all necessary libraries": [[270, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[270, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[270, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[270, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[270, "using-tracing-functionality"]], "6. Examining stack traces": [[270, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[270, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[271, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[272, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[273, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[274, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[275, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[277, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[277, "torch-utils-swap-tensors"]], "Application to nn.Module": [[277, "application-to-nn-module"]], "nn.Module.to() and related methods": [[277, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[277, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[278, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[278, "using-tensorboard-in-pytorch"]], "Log scalars": [[278, "log-scalars"]], "Run TensorBoard": [[278, "run-tensorboard"]], "Timer quick start": [[279, "timer-quick-start"]], "1. Defining a Timer": [[279, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[279, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[279, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[279, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[279, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[279, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[279, "wrapping-up"]], "8. Footnotes": [[279, "footnotes"]], "Performance Tuning Guide": [[280, "performance-tuning-guide"]], "General optimizations": [[280, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[280, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[280, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[280, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[280, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[280, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[280, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[280, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[280, "disable-debugging-apis"]], "CPU specific optimizations": [[280, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[280, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[280, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[280, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[280, "switch-memory-allocator"]], "Use oneDNN Graph with TorchScript for inference": [[280, "use-onednn-graph-with-torchscript-for-inference"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[280, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[280, "gpu-specific-optimizations"]], "Enable Tensor cores": [[280, "enable-tensor-cores"]], "Use CUDA Graphs": [[280, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[280, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[280, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[280, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[280, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[280, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[280, "distributed-optimizations"]], "Use efficient data-parallel backend": [[280, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[280, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[280, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[280, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[281, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[281, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[281, "save-model-a"]], "4. Load into model B": [[281, "load-into-model-b"]], "What is a state_dict in PyTorch": [[282, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[282, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[282, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[283, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[283, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[283, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[283, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[283, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[285, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[286, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[288, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[288, "usage-example"]], "Train FP32": [[288, "train-fp32"]], "Train BF16": [[288, "train-bf16"]], "Inference FP32": [[288, "inference-fp32"]], "Inference BF16": [[288, "inference-bf16"]], "Compile Time Caching Configuration": [[289, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[289, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[289, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[289, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[289, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[289, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[289, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[289, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[289, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[290, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[290, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[290, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[290, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[290, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[291, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[291, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[292, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[292, "advanced-usage"]], "Composability": [[292, "composability"]], "Wrapping Triton kernels with triton_op": [[292, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[292, "adding-training-support"]], "Adding a CPU Fallback": [[292, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[292, "adding-a-flopcounter-formula"]], "Limitations": [[292, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[293, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[293, "description"]], "Preventing recompilation": [[293, "preventing-recompilation"]], "Measuring performance gains": [[293, "measuring-performance-gains"]], "Crashing sooner": [[293, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[294, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[294, "model-compilation"]], "Model Inference in Python": [[294, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[294, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[295, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[295, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[295, "video-classification"]], "Error: Static batch size": [[295, "error-static-batch-size"]], "Solution": [[295, "solution"], [295, "id1"], [295, "id2"], [295, "id3"]], "Automatic Speech Recognition": [[295, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[295, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[295, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[295, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[295, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[295, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[296, "beta-using-torch-logs-python-api-with-torch-compile"]], "TorchScript for Deployment": [[297, "torchscript-for-deployment"]], "What is TorchScript?": [[297, "what-is-torchscript"]], "How to Export Your Model": [[297, "how-to-export-your-model"]], "Loading TorchScript Models in C++": [[297, "loading-torchscript-models-in-c"]], "Building and Running Your C++ Inference Engine": [[297, "building-and-running-your-c-inference-engine"]], "Important Resources": [[297, "important-resources"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[298, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[298, "what-you-will-learn"]], "Introduction of the Optimizations": [[298, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[298, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[298, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[298, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[298, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[298, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[298, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[299, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[299, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[299, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})