Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/super_resolution_with_onnxruntime", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/Intro_to_TorchScript_tutorial", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "distributed/home", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_conv_bn_fuser", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/python_extension_autoload", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/torchscript_freezing", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/super_resolution_with_onnxruntime.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/Intro_to_TorchScript_tutorial.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "distributed/home.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_conv_bn_fuser.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/python_extension_autoload.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/torchscript_freezing.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Loading a TorchScript Model in C++", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime", "Dynamic Parallelism in TorchScript", "Extending TorchScript with Custom C++ Classes", "Extending TorchScript with Custom C++ Operators", "Semi-Supervised Learning using USB built upon PyTorch", "Introduction to TorchScript", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Distributed and Parallel Training Tutorials", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Convolution/Batch Norm fuser in FX", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "PyTorch Prototype Recipes", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "Model Freezing in TorchScript", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "Distributed Optimizer with TorchScript support", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "PyTorch Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "TorchScript for Deployment", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 67, 68, 69, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 243, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "ha": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 46, 47, 48, 51, 54, 55, 67, 72, 79, 80, 87, 89, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 116, 119, 120, 123, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 155, 156, 158, 160, 161, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 177, 178, 179, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 198, 199, 202, 205, 206, 207, 208, 209, 211, 213, 215, 216, 218, 219, 220, 226, 227, 230, 232, 233, 236, 237, 245, 247, 248, 252, 259, 261, 262, 267, 268, 273, 274, 276, 277, 279, 280, 281], "been": [0, 1, 3, 5, 7, 9, 15, 16, 19, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 46, 55, 73, 79, 80, 87, 89, 92, 93, 94, 95, 97, 102, 108, 112, 114, 123, 125, 126, 129, 132, 135, 140, 142, 143, 144, 147, 148, 149, 151, 153, 155, 156, 160, 161, 163, 164, 165, 168, 171, 172, 173, 174, 178, 182, 183, 184, 185, 186, 188, 189, 190, 193, 195, 196, 202, 205, 206, 209, 211, 215, 216, 220, 226, 232, 233, 236, 237, 243, 247, 259, 260, 268, 276, 277, 280], "deprec": [0, 6, 9, 10, 26, 46, 123, 125, 126, 128, 129, 132, 134, 135, 147, 160, 163, 168, 181, 183, 189, 196, 233, 238, 254, 255, 256, 257, 268], "redirect": [0, 9, 29, 30, 31, 32, 33, 34, 46, 63, 64, 80, 81, 82, 83, 84, 85, 93, 123, 125, 126, 129, 147, 151, 160, 163, 168, 182, 185, 188, 191, 196, 202, 203, 204, 212, 220, 224, 233, 239, 240, 241, 242, 244, 254, 255, 256, 257, 268], "3": [0, 2, 3, 4, 6, 7, 9, 15, 18, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 39, 40, 46, 47, 56, 57, 63, 64, 67, 68, 72, 73, 79, 80, 81, 82, 83, 84, 85, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 123, 124, 125, 126, 129, 132, 133, 134, 136, 140, 141, 142, 143, 147, 148, 149, 151, 155, 157, 158, 160, 161, 162, 163, 164, 166, 168, 171, 172, 173, 175, 176, 177, 178, 181, 182, 185, 186, 187, 188, 189, 190, 192, 193, 195, 197, 199, 201, 202, 203, 204, 211, 212, 216, 218, 220, 222, 223, 224, 226, 230, 231, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 251, 254, 255, 256, 257, 259, 262, 268, 270, 274, 276, 277, 279], "second": [0, 1, 4, 5, 6, 7, 9, 10, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 57, 63, 64, 67, 68, 69, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 123, 124, 125, 126, 127, 129, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 171, 173, 174, 178, 179, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 197, 198, 199, 202, 203, 204, 206, 207, 208, 209, 211, 212, 219, 220, 221, 224, 226, 227, 230, 234, 237, 239, 240, 241, 242, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 267, 268, 273, 274, 275, 276, 278, 280], "click": [1, 13, 14, 15, 17, 19, 23, 24, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 243, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "here": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 69, 71, 72, 73, 76, 77, 79, 85, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 176, 177, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 194, 198, 199, 201, 206, 207, 208, 209, 210, 211, 213, 216, 219, 221, 226, 229, 230, 232, 234, 235, 236, 237, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 272, 273, 274, 275, 276, 277, 278, 280], "download": [1, 5, 7, 13, 14, 15, 17, 19, 22, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 132, 133, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 172, 173, 174, 176, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 198, 199, 201, 206, 207, 208, 209, 211, 219, 221, 222, 226, 234, 236, 237, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 270, 272, 273, 274, 275, 276, 278], "full": [1, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 17, 19, 22, 23, 25, 27, 28, 35, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 170, 171, 173, 174, 175, 178, 179, 181, 183, 187, 189, 190, 192, 193, 195, 197, 198, 199, 206, 207, 208, 209, 211, 213, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 273, 274, 275, 276, 278, 279, 280], "exampl": [1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 65, 67, 68, 69, 71, 72, 73, 76, 77, 86, 87, 88, 90, 92, 97, 98, 99, 101, 102, 103, 104, 105, 107, 108, 112, 113, 114, 116, 117, 119, 122, 124, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 194, 195, 198, 199, 201, 206, 207, 208, 209, 211, 213, 216, 218, 219, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 243, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 276, 277, 278, 279, 281], "author": [1, 4, 6, 12, 13, 14, 15, 18, 19, 22, 27, 39, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 79, 86, 87, 89, 91, 98, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 148, 149, 153, 154, 155, 157, 158, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 187, 189, 193, 194, 195, 197, 199, 200, 201, 210, 213, 215, 216, 221, 222, 225, 226, 228, 229, 230, 231, 234, 235, 246, 251, 252, 259, 262, 267, 271, 272, 273, 274, 275, 276, 277, 278], "vincent": [1, 15, 149, 167, 173], "moen": [1, 15, 149, 167, 173], "separ": [1, 4, 6, 7, 10, 17, 23, 25, 26, 28, 37, 54, 57, 89, 94, 101, 102, 103, 104, 112, 119, 136, 150, 155, 157, 165, 167, 176, 179, 186, 192, 194, 206, 232, 247, 262, 272, 275, 278], "rl": [1, 131, 173, 174, 175, 180], "algorithm": [1, 6, 7, 11, 12, 13, 35, 40, 45, 54, 57, 61, 73, 86, 92, 95, 97, 103, 105, 106, 107, 108, 112, 120, 131, 133, 136, 138, 142, 148, 149, 157, 167, 170, 173, 176, 181, 195, 213, 225, 226, 232, 245, 249, 262], "variou": [1, 4, 10, 16, 44, 51, 53, 54, 55, 87, 89, 92, 97, 101, 109, 112, 119, 121, 138, 148, 154, 156, 171, 173, 176, 177, 186, 190, 193, 197, 199, 208, 211, 223, 230, 234, 261, 265, 271, 274, 277], "piec": [1, 6, 10, 15, 89, 97, 112, 172, 173, 177, 186, 192, 194], "assembl": [1, 10, 54, 97], "script": [1, 6, 7, 11, 13, 14, 15, 17, 19, 22, 23, 24, 25, 27, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 65, 67, 68, 69, 71, 72, 73, 76, 77, 79, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 197, 198, 199, 206, 207, 208, 209, 211, 219, 221, 222, 226, 232, 234, 235, 236, 243, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 273, 274, 275, 276, 278, 279], "collect": [1, 5, 7, 12, 15, 16, 21, 22, 24, 40, 47, 49, 54, 60, 65, 79, 97, 102, 103, 106, 111, 131, 132, 133, 136, 146, 149, 154, 170, 174, 177, 189, 190, 195, 197, 216, 229, 230, 231, 243, 261, 262, 266], "final": [1, 7, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 45, 47, 51, 54, 57, 79, 89, 92, 94, 97, 99, 102, 103, 104, 109, 112, 114, 117, 119, 121, 127, 131, 132, 133, 134, 136, 138, 139, 140, 142, 143, 148, 154, 155, 156, 157, 161, 164, 166, 169, 171, 173, 174, 175, 176, 177, 179, 183, 184, 189, 190, 194, 195, 197, 199, 206, 209, 213, 216, 219, 232, 237], "function": [1, 3, 4, 5, 6, 7, 8, 10, 11, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 37, 41, 42, 44, 45, 47, 53, 54, 56, 58, 60, 65, 66, 69, 71, 72, 73, 86, 87, 94, 95, 97, 101, 102, 108, 111, 113, 114, 116, 117, 119, 121, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 148, 149, 150, 153, 154, 155, 157, 158, 164, 165, 167, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 200, 206, 207, 208, 209, 213, 216, 218, 221, 222, 225, 226, 232, 235, 236, 237, 243, 246, 248, 249, 259, 261, 263, 266, 269, 271, 274, 275, 276, 278, 279, 281], "ar": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 60, 61, 65, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 245, 246, 247, 249, 251, 252, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281], "state": [1, 4, 6, 10, 11, 12, 15, 19, 25, 41, 42, 48, 54, 57, 58, 60, 92, 95, 97, 99, 103, 104, 105, 109, 112, 120, 121, 132, 133, 139, 140, 142, 144, 146, 149, 150, 152, 157, 164, 166, 171, 173, 174, 175, 176, 177, 179, 183, 189, 197, 198, 209, 215, 216, 228, 229, 232, 234, 245, 246, 251, 264, 266], "contain": [1, 2, 5, 7, 10, 11, 13, 15, 16, 19, 23, 24, 25, 26, 28, 36, 37, 41, 45, 51, 54, 55, 60, 71, 72, 73, 86, 89, 94, 95, 99, 102, 103, 108, 109, 112, 113, 120, 121, 127, 131, 132, 133, 137, 138, 139, 144, 146, 149, 165, 169, 171, 173, 174, 175, 177, 178, 179, 181, 183, 184, 186, 189, 190, 192, 193, 194, 197, 198, 209, 216, 218, 222, 227, 237, 243, 246, 249, 251, 259, 261, 262, 264, 276, 277, 280], "trainabl": [1, 7, 72, 104, 106, 190], "paramet": [1, 5, 6, 11, 12, 13, 15, 16, 18, 19, 22, 23, 25, 27, 28, 35, 37, 38, 39, 42, 44, 45, 47, 48, 51, 53, 54, 56, 57, 71, 72, 79, 89, 92, 94, 97, 103, 104, 106, 108, 111, 112, 116, 117, 119, 120, 127, 130, 131, 132, 133, 134, 136, 138, 139, 140, 144, 146, 148, 149, 150, 152, 155, 156, 157, 158, 161, 164, 165, 166, 177, 178, 181, 183, 184, 186, 189, 190, 199, 206, 213, 214, 216, 219, 225, 227, 228, 229, 232, 234, 235, 236, 237, 243, 246, 250, 251, 252, 253, 258, 259, 260, 264, 265, 266, 270, 274, 280, 281], "tutori": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 41, 46, 47, 48, 49, 50, 56, 58, 60, 61, 65, 79, 80, 81, 82, 83, 84, 85, 86, 88, 92, 95, 96, 99, 101, 103, 105, 107, 108, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 126, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 166, 167, 168, 169, 170, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 190, 191, 195, 196, 197, 198, 199, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 233, 234, 235, 245, 246, 250, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 266, 268, 277, 278, 279, 280, 281], "guid": [1, 6, 10, 19, 26, 65, 86, 89, 117, 131, 132, 148, 158, 172, 180, 183, 189, 190, 199, 213, 216, 234, 243, 245, 247, 250, 258, 266, 280], "you": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 39, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 71, 72, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 195, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 221, 222, 223, 225, 227, 228, 229, 230, 231, 232, 235, 236, 243, 246, 247, 248, 249, 251, 252, 260, 262, 263, 264, 265, 266, 267, 271, 272, 274, 275, 277, 278, 279, 281], "through": [1, 3, 5, 6, 7, 10, 11, 14, 15, 16, 18, 22, 24, 25, 26, 27, 28, 35, 36, 40, 41, 47, 51, 54, 57, 59, 60, 79, 88, 90, 92, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 112, 113, 114, 116, 117, 120, 124, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 143, 148, 150, 153, 154, 155, 156, 157, 158, 161, 164, 166, 167, 169, 170, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 198, 199, 200, 201, 206, 208, 213, 216, 221, 227, 228, 229, 235, 236, 237, 246, 247, 252, 260, 265, 277, 280], "from": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 28, 35, 37, 40, 41, 42, 44, 48, 51, 53, 54, 56, 57, 58, 60, 67, 68, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 113, 116, 117, 119, 120, 124, 127, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 187, 189, 193, 194, 195, 197, 199, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 222, 227, 228, 229, 231, 232, 234, 235, 236, 237, 243, 246, 247, 249, 250, 252, 258, 259, 260, 261, 262, 264, 266, 272, 273, 274, 276, 277, 279, 280, 281], "ground": [1, 15, 48, 79, 192], "up": [1, 3, 5, 6, 7, 10, 11, 15, 17, 19, 21, 22, 23, 24, 25, 26, 35, 37, 40, 54, 57, 60, 65, 75, 78, 86, 89, 94, 95, 97, 98, 99, 102, 104, 105, 106, 108, 109, 111, 112, 114, 119, 131, 132, 133, 134, 135, 136, 139, 140, 144, 145, 146, 148, 149, 150, 154, 155, 161, 164, 166, 167, 169, 172, 173, 174, 175, 176, 179, 181, 183, 184, 187, 189, 190, 193, 200, 211, 213, 214, 216, 219, 223, 227, 228, 230, 231, 232, 236, 247, 252, 262, 265, 266, 276, 277, 278, 280, 281], "us": [1, 4, 5, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 24, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 51, 53, 54, 56, 57, 59, 60, 61, 62, 65, 67, 68, 69, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 116, 120, 124, 127, 130, 131, 133, 135, 136, 137, 138, 139, 140, 143, 145, 148, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 167, 169, 171, 172, 173, 174, 179, 180, 181, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 206, 207, 209, 211, 213, 214, 215, 216, 218, 219, 221, 223, 225, 226, 228, 232, 234, 235, 236, 246, 247, 248, 249, 250, 253, 258, 259, 261, 264, 265, 266, 267, 269, 271, 272, 273, 275, 277], "To": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 26, 35, 36, 40, 41, 42, 45, 51, 54, 55, 56, 62, 69, 77, 86, 87, 89, 92, 95, 101, 103, 104, 105, 106, 108, 109, 111, 112, 113, 116, 120, 121, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 152, 155, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 183, 184, 186, 189, 190, 193, 195, 197, 199, 200, 201, 206, 208, 209, 210, 214, 216, 218, 222, 230, 231, 235, 236, 237, 243, 246, 247, 249, 251, 252, 259, 260, 261, 262, 263, 264, 265, 270, 274, 276, 277, 278, 280], "aim": [1, 7, 104, 107, 135, 164, 174, 177, 209, 237], "we": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 67, 68, 69, 72, 73, 79, 86, 87, 89, 92, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 243, 245, 247, 249, 251, 252, 253, 259, 260, 261, 263, 264, 265, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "focus": [1, 3, 23, 95, 104, 107, 170, 179, 190, 237], "which": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 60, 61, 65, 67, 68, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 154, 155, 156, 158, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 198, 199, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 223, 226, 227, 228, 229, 230, 231, 232, 234, 237, 243, 245, 246, 247, 248, 249, 251, 252, 259, 261, 262, 263, 264, 265, 267, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281], "i": [1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 67, 68, 69, 72, 76, 77, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 119, 120, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 158, 161, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 222, 224, 225, 226, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 270, 271, 272, 274, 275, 276, 278, 280], "rel": [1, 6, 7, 95, 103, 127, 137, 156, 161, 177, 179, 193, 200, 237, 266], "straightforward": [1, 6, 7, 18, 19, 54, 94, 97, 102, 104, 105, 155, 167, 189, 193, 266], "deep": [1, 7, 13, 14, 28, 39, 51, 54, 57, 73, 76, 77, 97, 98, 99, 102, 104, 108, 110, 111, 120, 130, 131, 139, 140, 141, 142, 146, 155, 156, 157, 165, 171, 174, 179, 186, 190, 223, 225, 226, 237, 243, 249, 261, 262, 267, 280], "determinist": [1, 12, 15, 134, 149, 174, 261, 262], "gradient": [1, 4, 7, 11, 12, 14, 15, 17, 18, 28, 40, 47, 48, 51, 54, 57, 61, 65, 67, 68, 69, 72, 76, 77, 94, 97, 99, 102, 103, 104, 105, 106, 108, 112, 120, 127, 131, 132, 133, 136, 137, 139, 141, 143, 144, 146, 148, 152, 156, 157, 164, 171, 173, 175, 176, 177, 180, 184, 186, 190, 206, 221, 229, 232, 245, 250, 258, 266, 281], "simpl": [1, 3, 4, 5, 6, 7, 10, 13, 16, 18, 19, 22, 24, 25, 26, 27, 28, 51, 54, 56, 59, 61, 71, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 113, 116, 120, 121, 130, 131, 132, 137, 138, 141, 143, 148, 150, 155, 156, 161, 166, 167, 169, 171, 173, 175, 176, 177, 178, 180, 181, 183, 187, 189, 190, 195, 210, 213, 216, 223, 225, 226, 229, 231, 234, 236, 237, 247, 251, 260, 261, 262, 264, 274, 277, 278, 281], "continu": [1, 6, 23, 24, 54, 58, 79, 89, 92, 97, 102, 104, 109, 112, 131, 134, 135, 136, 140, 144, 148, 154, 173, 177, 179, 183, 187, 197, 198, 206, 208, 209, 216, 230, 247, 249, 252, 262, 263, 264, 265, 267], "control": [1, 5, 10, 11, 15, 24, 26, 28, 35, 37, 40, 47, 70, 74, 87, 89, 94, 104, 114, 115, 116, 117, 124, 131, 133, 134, 135, 137, 138, 148, 152, 165, 173, 174, 175, 187, 215, 230, 243, 247, 266, 267, 269], "It": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 45, 47, 48, 49, 51, 54, 56, 57, 79, 80, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 116, 121, 127, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 161, 164, 165, 166, 167, 171, 174, 175, 177, 179, 181, 182, 183, 185, 186, 188, 189, 190, 192, 193, 194, 195, 197, 211, 216, 218, 221, 227, 228, 229, 231, 232, 247, 248, 260, 262, 265, 270, 272, 274, 276, 277, 279, 280], "consist": [1, 3, 4, 7, 15, 16, 25, 27, 28, 35, 36, 37, 40, 47, 104, 106, 112, 134, 136, 144, 153, 154, 157, 161, 164, 173, 174, 178, 179, 183, 190, 193, 194, 195, 197, 208, 209, 226, 247, 252, 262], "learn": [1, 4, 5, 7, 14, 15, 17, 19, 20, 23, 24, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 49, 51, 54, 56, 57, 58, 59, 60, 61, 65, 73, 76, 77, 79, 86, 88, 90, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 121, 122, 124, 131, 132, 133, 135, 138, 139, 140, 141, 144, 145, 146, 148, 149, 155, 156, 158, 162, 164, 165, 166, 169, 171, 172, 176, 179, 180, 181, 184, 186, 189, 190, 192, 193, 195, 198, 199, 206, 207, 208, 209, 210, 211, 214, 215, 216, 219, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 237, 243, 245, 251, 259, 262, 266, 267, 270, 271, 272, 275, 277, 279, 281], "parametr": [1, 2, 19, 131, 173, 180, 216], "an": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 69, 71, 73, 79, 86, 87, 89, 91, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 119, 120, 127, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 192, 193, 194, 195, 198, 199, 200, 201, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 221, 222, 223, 225, 227, 228, 229, 231, 232, 234, 235, 236, 237, 243, 245, 246, 247, 248, 249, 250, 252, 253, 258, 259, 261, 262, 264, 266, 267, 269, 271, 274, 275, 276, 277, 278, 279], "action": [1, 22, 99, 103, 108, 112, 132, 133, 157, 171, 173, 174, 175, 176, 177, 183, 195, 252, 261, 266, 277], "pair": [1, 7, 51, 54, 57, 95, 103, 139, 140, 142, 166, 173, 174, 179, 183, 192, 194, 226, 243, 261], "output": [1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 26, 28, 35, 36, 40, 44, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 124, 127, 132, 133, 134, 136, 137, 139, 140, 141, 146, 148, 149, 150, 152, 153, 155, 156, 158, 161, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 184, 186, 187, 189, 192, 193, 194, 195, 197, 199, 201, 210, 211, 213, 216, 222, 223, 225, 227, 230, 234, 235, 236, 245, 247, 249, 252, 253, 260, 262, 270, 278, 279, 281], "maxim": [1, 15, 57, 79, 86, 104, 106, 138, 157, 174, 187, 262, 280], "given": [1, 4, 7, 10, 11, 13, 15, 17, 19, 23, 24, 25, 26, 28, 35, 37, 40, 44, 45, 47, 53, 54, 56, 57, 60, 79, 86, 89, 95, 99, 103, 104, 107, 108, 111, 112, 121, 133, 139, 140, 148, 150, 152, 156, 157, 158, 166, 171, 173, 174, 176, 177, 179, 187, 189, 190, 192, 198, 209, 216, 232, 235, 247, 253, 262, 273, 277, 281], "certain": [1, 5, 6, 7, 11, 12, 16, 54, 60, 95, 108, 130, 133, 136, 137, 142, 152, 156, 158, 173, 178, 187, 189, 190, 197, 206, 209, 211, 245, 249, 273, 274, 277, 280], "what": [1, 2, 3, 4, 6, 10, 15, 17, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 47, 49, 50, 58, 59, 60, 65, 79, 91, 92, 95, 97, 99, 102, 103, 105, 106, 108, 109, 111, 113, 117, 122, 124, 131, 133, 135, 136, 137, 138, 140, 141, 144, 145, 148, 149, 157, 158, 164, 169, 171, 173, 174, 175, 178, 184, 186, 189, 190, 192, 193, 195, 198, 208, 215, 225, 228, 246, 247, 248, 249, 250, 251, 258, 261, 262, 266, 277], "how": [1, 2, 4, 5, 6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 37, 40, 41, 42, 47, 48, 49, 51, 54, 55, 56, 57, 60, 61, 62, 79, 86, 89, 91, 92, 94, 95, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 127, 130, 131, 135, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 157, 158, 161, 162, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 216, 219, 223, 226, 228, 230, 234, 235, 237, 245, 246, 247, 250, 251, 252, 258, 259, 261, 262, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280], "write": [1, 4, 5, 8, 10, 11, 17, 20, 24, 25, 26, 48, 54, 65, 68, 101, 105, 106, 107, 108, 112, 120, 122, 127, 131, 135, 137, 138, 143, 144, 146, 149, 152, 153, 155, 158, 161, 165, 167, 170, 173, 176, 177, 179, 183, 186, 187, 189, 193, 197, 198, 209, 213, 217, 221, 222, 229, 246, 247, 248, 249, 253, 262, 277], "custom": [1, 5, 7, 10, 12, 19, 20, 54, 57, 68, 70, 74, 95, 112, 119, 122, 131, 134, 138, 149, 157, 167, 173, 176, 180, 186, 187, 190, 193, 194, 213, 216, 218, 234, 236, 237, 243, 246, 250, 259, 262, 266, 270, 273, 274], "its": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 28, 35, 36, 40, 45, 47, 51, 54, 56, 57, 58, 60, 72, 79, 86, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 119, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 149, 150, 152, 154, 155, 157, 158, 164, 165, 169, 171, 173, 174, 175, 176, 177, 179, 183, 184, 187, 189, 190, 199, 208, 209, 211, 215, 216, 218, 222, 223, 229, 231, 236, 243, 246, 247, 249, 251, 252, 259, 262, 263, 264, 265, 281], "includ": [1, 2, 3, 4, 5, 6, 7, 10, 15, 16, 17, 25, 26, 27, 28, 40, 41, 44, 53, 54, 58, 60, 65, 73, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 112, 114, 116, 117, 119, 136, 138, 139, 140, 141, 143, 144, 146, 148, 149, 155, 157, 167, 169, 170, 171, 173, 176, 179, 183, 184, 187, 189, 190, 192, 193, 197, 199, 206, 208, 210, 213, 215, 222, 227, 229, 230, 232, 234, 235, 236, 237, 243, 245, 246, 247, 249, 252, 259, 262, 272, 274, 275, 279, 280], "design": [1, 6, 7, 15, 19, 27, 28, 57, 61, 79, 89, 95, 111, 112, 140, 146, 149, 167, 173, 174, 175, 177, 178, 183, 184, 189, 194, 195, 206, 207, 208, 213, 216, 221, 223, 235, 247, 249, 262, 270, 274, 277, 280], "effici": [1, 6, 11, 13, 16, 19, 23, 26, 28, 35, 54, 56, 79, 86, 102, 104, 108, 111, 132, 133, 136, 138, 146, 148, 149, 156, 161, 171, 173, 177, 178, 183, 186, 190, 197, 200, 209, 210, 211, 216, 217, 228, 247, 251, 270, 274, 280], "store": [1, 5, 6, 7, 18, 19, 22, 25, 26, 35, 36, 37, 41, 42, 44, 47, 53, 56, 58, 72, 92, 94, 101, 102, 105, 106, 108, 111, 112, 114, 120, 135, 137, 138, 140, 148, 149, 155, 157, 158, 165, 167, 169, 170, 171, 173, 174, 175, 176, 177, 179, 189, 190, 195, 199, 209, 210, 216, 232, 234, 252, 261, 262, 271, 272], "them": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 19, 21, 22, 26, 28, 35, 37, 40, 47, 48, 51, 53, 54, 56, 58, 60, 65, 72, 79, 92, 94, 95, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 116, 117, 120, 121, 131, 133, 134, 136, 138, 139, 140, 142, 143, 148, 149, 150, 154, 155, 156, 161, 164, 165, 166, 167, 171, 172, 174, 175, 176, 177, 186, 187, 189, 192, 193, 195, 199, 208, 210, 211, 215, 216, 218, 226, 235, 236, 237, 246, 247, 251, 259, 261, 262, 266, 271, 272, 280], "trajectori": [1, 15, 149, 173, 174], "transit": [1, 15, 89, 91, 105, 149, 167, 174], "assum": [1, 2, 5, 7, 10, 11, 15, 16, 22, 24, 25, 39, 47, 48, 56, 59, 79, 94, 97, 98, 104, 105, 107, 109, 112, 117, 136, 137, 139, 140, 148, 149, 165, 171, 173, 176, 178, 179, 192, 208, 209, 211, 229, 251, 252, 259, 261, 277], "have": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 62, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 221, 222, 223, 226, 228, 229, 230, 231, 232, 234, 235, 236, 243, 246, 247, 248, 249, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 274, 275, 276, 277, 279, 280, 281], "complet": [1, 5, 6, 7, 16, 24, 28, 39, 89, 92, 94, 97, 105, 106, 108, 117, 131, 133, 135, 136, 138, 139, 141, 143, 148, 167, 169, 171, 172, 173, 176, 186, 187, 192, 197, 199, 208, 209, 213, 245, 262, 276, 277, 279], "ppo": [1, 131, 180], "give": [1, 2, 6, 7, 12, 15, 19, 26, 28, 40, 49, 51, 54, 55, 57, 79, 94, 95, 97, 99, 104, 106, 108, 109, 111, 112, 121, 140, 144, 150, 153, 154, 155, 156, 157, 166, 172, 176, 179, 183, 186, 187, 189, 190, 193, 207, 211, 216, 232, 235, 247, 279], "compon": [1, 6, 7, 10, 11, 15, 23, 28, 57, 89, 99, 104, 108, 121, 131, 138, 139, 141, 149, 153, 157, 173, 177, 181, 183, 187, 189, 193, 211, 223, 272, 279], "depend": [1, 6, 7, 10, 12, 24, 25, 26, 51, 55, 57, 79, 86, 89, 94, 95, 101, 102, 104, 105, 109, 112, 131, 136, 138, 139, 142, 143, 148, 149, 152, 153, 154, 156, 157, 167, 170, 172, 173, 176, 183, 187, 193, 199, 208, 214, 222, 223, 225, 235, 247, 248, 253, 259, 262, 267, 279, 280], "tensordict": [1, 15, 149, 157, 167, 173], "nn": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 18, 19, 21, 22, 24, 25, 28, 40, 41, 42, 47, 48, 49, 51, 54, 60, 70, 73, 74, 79, 92, 94, 97, 103, 106, 111, 114, 116, 119, 122, 127, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 146, 149, 152, 153, 158, 161, 165, 166, 169, 173, 174, 175, 176, 177, 178, 181, 184, 186, 187, 189, 190, 194, 195, 207, 210, 211, 216, 218, 225, 227, 228, 229, 231, 234, 235, 236, 237, 243, 246, 249, 250, 252, 253, 258, 260, 262, 263, 264, 266, 267, 270, 279, 281], "tensordictmodul": [1, 149, 173], "although": [1, 13, 18, 47, 54, 105, 106, 111, 112, 114, 117, 135, 137, 157, 165, 167, 176, 187, 189, 219, 235], "should": [1, 2, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 35, 47, 48, 54, 55, 56, 57, 58, 60, 73, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 127, 131, 133, 134, 135, 137, 138, 141, 143, 146, 148, 149, 150, 154, 157, 158, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 184, 186, 187, 189, 190, 192, 197, 198, 199, 201, 206, 207, 208, 213, 215, 221, 222, 228, 229, 235, 243, 246, 247, 252, 260, 261, 262, 265, 266, 273, 277, 279, 280], "suffici": [1, 7, 54, 57, 104, 105, 127, 144, 146, 164, 167, 189], "transpar": [1, 13, 95, 106, 149, 176, 222, 230, 236, 271], "understood": [1, 4, 5, 17, 274], "without": [1, 5, 6, 7, 10, 11, 15, 17, 19, 23, 26, 35, 54, 58, 60, 79, 99, 102, 104, 105, 116, 131, 132, 134, 136, 137, 140, 141, 148, 152, 154, 156, 157, 158, 164, 167, 170, 171, 172, 173, 174, 175, 178, 183, 186, 189, 198, 206, 208, 209, 211, 215, 216, 226, 228, 231, 236, 246, 251, 253, 259, 262, 272, 273, 275, 281], "understand": [1, 2, 4, 5, 7, 8, 16, 26, 47, 48, 57, 62, 86, 89, 94, 96, 97, 98, 99, 101, 102, 103, 105, 108, 112, 113, 117, 127, 131, 134, 137, 138, 139, 140, 143, 148, 152, 155, 167, 179, 186, 189, 190, 198, 207, 210, 228, 231, 243, 245, 260, 264, 267, 271, 272, 274, 276, 277, 280], "class": [1, 2, 5, 6, 7, 10, 11, 14, 16, 22, 24, 26, 27, 28, 35, 37, 39, 40, 41, 42, 48, 51, 54, 57, 58, 69, 71, 79, 87, 89, 95, 97, 99, 101, 102, 103, 106, 107, 111, 112, 114, 117, 120, 121, 127, 131, 132, 133, 134, 138, 139, 140, 141, 143, 144, 146, 148, 149, 154, 155, 157, 158, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 184, 186, 189, 192, 194, 197, 206, 207, 208, 210, 218, 227, 228, 229, 231, 232, 235, 237, 243, 245, 247, 249, 261, 265, 267, 277], "do": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 42, 51, 54, 55, 56, 57, 59, 67, 68, 73, 89, 92, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 120, 121, 124, 131, 132, 136, 137, 138, 139, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 161, 164, 165, 167, 170, 171, 172, 173, 174, 177, 179, 184, 186, 189, 190, 192, 193, 195, 197, 199, 207, 208, 209, 215, 216, 218, 219, 221, 229, 232, 237, 243, 246, 247, 248, 251, 259, 260, 261, 262, 263, 265, 266, 274, 275, 276, 279], "sota": 1, "implement": [1, 2, 3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 19, 23, 27, 36, 37, 39, 47, 49, 51, 54, 56, 60, 62, 65, 67, 68, 69, 71, 72, 73, 76, 77, 89, 94, 97, 103, 111, 112, 113, 120, 130, 131, 134, 136, 137, 139, 141, 143, 148, 149, 150, 152, 155, 156, 157, 158, 161, 166, 167, 169, 171, 173, 174, 177, 180, 183, 189, 190, 192, 193, 194, 195, 197, 200, 207, 209, 210, 211, 213, 215, 216, 222, 223, 228, 232, 235, 236, 237, 247, 251, 259, 262, 270, 271, 273, 274, 277, 280], "rather": [1, 14, 26, 28, 54, 57, 73, 79, 89, 99, 102, 104, 111, 112, 121, 131, 140, 142, 155, 165, 166, 167, 173, 186, 189, 193, 197, 199, 206, 223, 247, 262, 271, 275], "provid": [1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 48, 54, 56, 57, 60, 61, 79, 86, 87, 89, 92, 94, 95, 97, 102, 103, 104, 105, 106, 112, 113, 114, 116, 117, 120, 121, 130, 131, 133, 135, 136, 137, 138, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 167, 171, 172, 173, 175, 176, 178, 183, 186, 187, 189, 190, 192, 193, 197, 208, 209, 214, 216, 218, 221, 223, 229, 230, 232, 234, 235, 236, 237, 243, 245, 246, 247, 249, 251, 252, 260, 261, 262, 267, 272, 275, 276, 277, 280], "high": [1, 2, 6, 7, 16, 22, 26, 28, 48, 54, 57, 58, 60, 62, 65, 86, 89, 99, 106, 111, 114, 119, 131, 132, 133, 136, 138, 141, 142, 148, 180, 183, 184, 186, 189, 190, 200, 209, 213, 214, 227, 232, 261, 262, 274, 279, 280, 281], "level": [1, 2, 4, 6, 7, 17, 19, 22, 23, 26, 28, 48, 54, 58, 60, 62, 65, 72, 99, 107, 114, 120, 131, 132, 133, 136, 141, 144, 146, 148, 152, 153, 155, 158, 162, 178, 179, 180, 183, 186, 187, 189, 190, 193, 213, 214, 216, 227, 230, 231, 232, 237, 271, 281], "illustr": [1, 22, 36, 48, 51, 61, 127, 136, 137, 138, 150, 167, 174, 184, 186, 192, 208, 209, 231, 243, 245, 252, 259], "": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 62, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 206, 208, 209, 211, 214, 215, 216, 218, 221, 223, 225, 227, 228, 229, 230, 231, 232, 234, 235, 245, 246, 247, 249, 251, 252, 259, 260, 261, 262, 264, 265, 266, 267, 271, 272, 274, 279, 280, 281], "librari": [1, 3, 4, 5, 6, 7, 8, 10, 13, 15, 17, 21, 23, 25, 26, 28, 37, 41, 48, 55, 56, 62, 65, 92, 95, 112, 116, 117, 131, 135, 138, 142, 143, 154, 167, 169, 170, 172, 173, 177, 183, 190, 193, 197, 201, 210, 220, 222, 223, 231, 235, 236, 243, 266, 267, 274, 276], "featur": [1, 5, 7, 11, 12, 13, 15, 22, 25, 26, 37, 41, 45, 54, 55, 56, 57, 86, 87, 89, 94, 97, 99, 102, 104, 105, 111, 112, 116, 120, 131, 132, 137, 141, 149, 155, 156, 157, 164, 167, 170, 172, 173, 177, 178, 184, 187, 189, 192, 193, 200, 209, 210, 211, 213, 214, 215, 216, 221, 222, 223, 227, 232, 234, 235, 243, 245, 249, 251, 259, 261, 262, 265, 266, 267, 271, 274, 277], "context": [1, 2, 6, 10, 15, 18, 19, 47, 54, 79, 94, 99, 111, 112, 119, 130, 131, 136, 141, 152, 165, 167, 173, 176, 177, 178, 179, 183, 187, 193, 198, 200, 210, 214, 216, 222, 227, 230, 246, 248, 251, 252, 253, 262, 275, 277, 280], "bash": [1, 21, 23, 157, 174, 243], "pip3": [1, 21, 55, 133, 149, 167, 173, 174, 183, 190, 199], "instal": [1, 4, 6, 7, 10, 19, 23, 26, 27, 39, 55, 56, 58, 60, 62, 92, 98, 101, 112, 116, 132, 133, 136, 139, 140, 144, 145, 148, 149, 152, 154, 157, 162, 167, 170, 173, 174, 175, 179, 183, 186, 187, 192, 197, 198, 199, 215, 222, 235, 243, 245, 247, 249, 252, 261, 263, 264, 265, 267, 274, 279, 280], "mujoco": [1, 149, 173], "glfw": 1, "cuda": [1, 5, 7, 10, 11, 12, 13, 16, 19, 21, 22, 26, 27, 36, 41, 44, 47, 48, 49, 58, 59, 60, 67, 68, 77, 79, 87, 92, 102, 106, 112, 119, 120, 121, 127, 131, 132, 133, 134, 135, 136, 139, 142, 144, 145, 146, 148, 158, 164, 165, 169, 170, 174, 175, 176, 177, 178, 181, 183, 186, 187, 190, 195, 197, 198, 199, 200, 210, 216, 225, 226, 228, 229, 231, 234, 246, 247, 248, 252, 266, 272, 275, 276, 277, 281], "avail": [1, 2, 3, 4, 6, 7, 11, 13, 16, 19, 21, 22, 23, 24, 25, 26, 35, 36, 37, 40, 41, 42, 44, 47, 48, 53, 54, 55, 56, 57, 58, 67, 79, 92, 95, 97, 99, 102, 103, 104, 108, 112, 114, 120, 127, 133, 137, 139, 148, 149, 152, 157, 158, 167, 171, 172, 173, 174, 177, 178, 179, 183, 186, 189, 190, 192, 197, 213, 214, 216, 221, 227, 229, 236, 243, 245, 247, 248, 249, 262, 263, 264, 265, 267, 276, 278, 279], "seri": [1, 7, 16, 26, 57, 58, 59, 60, 61, 86, 96, 99, 102, 103, 130, 131, 135, 139, 140, 144, 145, 154, 162, 171, 173, 179, 193, 208, 235, 280], "easili": [1, 6, 13, 22, 27, 36, 49, 65, 79, 95, 102, 103, 104, 112, 119, 120, 121, 133, 136, 138, 139, 146, 148, 153, 154, 155, 161, 171, 173, 174, 177, 186, 187, 189, 192, 195, 199, 213, 214, 218, 228, 229, 231, 237, 247, 264], "reusabl": [1, 7, 28], "swappabl": 1, "signatur": [1, 6, 10, 11, 15, 16, 26, 117, 148, 165, 176, 189, 234], "main": [1, 3, 5, 6, 7, 12, 18, 22, 25, 26, 40, 57, 58, 60, 92, 104, 117, 120, 132, 133, 139, 144, 148, 155, 167, 174, 175, 176, 177, 181, 189, 190, 192, 193, 199, 200, 221, 222, 228, 236, 237, 243, 262, 279, 281], "characterist": [1, 15, 47, 141, 154, 156, 157, 172, 178, 189, 277], "thei": [1, 3, 5, 6, 7, 10, 11, 13, 15, 17, 18, 22, 23, 24, 26, 28, 36, 37, 44, 48, 53, 54, 57, 60, 79, 86, 89, 94, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 133, 137, 138, 139, 140, 143, 146, 148, 149, 155, 156, 158, 164, 165, 173, 174, 175, 177, 179, 186, 189, 190, 193, 194, 201, 206, 207, 208, 209, 211, 218, 219, 223, 229, 231, 236, 247, 251, 252, 260, 261, 264, 265], "copi": [1, 6, 7, 13, 21, 25, 26, 39, 44, 48, 49, 55, 60, 79, 86, 94, 98, 103, 104, 119, 121, 124, 131, 132, 137, 142, 146, 148, 149, 153, 154, 157, 165, 176, 183, 186, 189, 195, 197, 213, 222, 227, 228, 234, 235, 251, 262], "loss_modul": 1, "whatev": [1, 10, 25, 26, 97, 102, 103, 106, 108, 112, 121, 243], "need": [1, 3, 4, 5, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 65, 67, 68, 71, 86, 87, 92, 95, 97, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 121, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 154, 155, 156, 157, 158, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 194, 197, 198, 199, 206, 210, 211, 215, 216, 218, 222, 227, 228, 229, 231, 232, 234, 235, 236, 237, 243, 246, 247, 249, 252, 259, 260, 261, 262, 263, 264, 265, 267, 271, 275, 276, 277, 279], "follow": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 39, 40, 44, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 79, 86, 87, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 121, 124, 127, 131, 132, 133, 134, 136, 137, 138, 141, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 158, 162, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 178, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 200, 207, 209, 210, 211, 213, 215, 216, 218, 221, 222, 229, 231, 232, 235, 236, 243, 246, 249, 251, 252, 253, 259, 260, 267, 270, 271, 272, 274, 276, 277, 279, 280], "convent": [1, 15, 57, 112, 121, 149, 186, 193, 232, 247], "torch": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 36, 37, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 65, 67, 68, 71, 77, 79, 89, 92, 94, 95, 97, 101, 102, 103, 104, 106, 109, 111, 114, 116, 117, 119, 120, 122, 127, 131, 132, 133, 134, 135, 136, 140, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 190, 192, 194, 195, 197, 199, 200, 206, 207, 209, 210, 211, 214, 215, 216, 217, 218, 219, 222, 223, 226, 227, 228, 229, 231, 232, 235, 236, 237, 243, 248, 249, 250, 252, 253, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 279, 281], "receiv": [1, 5, 7, 15, 18, 60, 92, 102, 108, 120, 148, 167, 169, 173, 175, 176, 177, 187, 190, 197, 246, 249, 262], "input": [1, 2, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 18, 23, 24, 25, 26, 28, 35, 36, 39, 40, 44, 47, 48, 49, 51, 53, 54, 61, 65, 67, 68, 69, 71, 72, 73, 76, 77, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 130, 132, 133, 136, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 152, 155, 156, 157, 158, 161, 164, 166, 169, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 192, 194, 195, 199, 209, 211, 213, 216, 219, 221, 222, 223, 225, 227, 229, 234, 235, 236, 237, 245, 246, 249, 252, 253, 265, 271, 275, 277, 279, 280], "all": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 40, 41, 44, 45, 47, 48, 49, 51, 54, 55, 56, 57, 58, 60, 61, 65, 79, 86, 89, 94, 95, 97, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 158, 161, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 206, 207, 209, 211, 213, 214, 215, 216, 218, 221, 222, 227, 230, 234, 236, 237, 243, 245, 247, 249, 251, 259, 260, 261, 263, 264, 265, 266, 267, 271, 272, 274, 275, 277, 278, 279, 280, 281], "necessari": [1, 4, 5, 6, 7, 10, 11, 13, 16, 21, 22, 26, 27, 42, 48, 57, 58, 60, 89, 92, 102, 103, 105, 112, 121, 132, 133, 136, 142, 146, 157, 169, 175, 176, 177, 183, 189, 190, 194, 195, 208, 211, 213, 215, 246, 262, 267, 275], "inform": [1, 2, 4, 5, 6, 8, 10, 11, 15, 17, 23, 25, 26, 28, 35, 49, 54, 58, 79, 86, 92, 94, 99, 101, 102, 104, 108, 109, 111, 121, 132, 137, 138, 139, 140, 146, 148, 149, 152, 153, 154, 157, 172, 173, 174, 176, 178, 179, 183, 184, 186, 187, 189, 190, 192, 194, 197, 198, 199, 209, 211, 213, 218, 221, 222, 223, 229, 230, 231, 243, 246, 247, 261, 262, 264, 265, 275, 278, 279, 280], "return": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 26, 28, 36, 37, 40, 41, 44, 49, 51, 54, 56, 57, 79, 86, 94, 95, 102, 103, 104, 106, 108, 109, 112, 114, 117, 119, 121, 132, 133, 134, 136, 140, 141, 143, 146, 148, 149, 152, 155, 157, 158, 161, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 181, 183, 184, 186, 187, 189, 190, 192, 194, 200, 201, 206, 208, 210, 213, 215, 216, 221, 222, 225, 227, 228, 229, 231, 234, 235, 236, 237, 243, 245, 247, 249, 252, 261, 272, 275, 277, 279], "replay_buff": 1, "sampl": [1, 4, 7, 10, 36, 37, 40, 41, 44, 48, 51, 53, 54, 56, 57, 60, 65, 92, 97, 99, 101, 102, 104, 114, 121, 127, 131, 132, 139, 142, 148, 156, 157, 164, 165, 173, 174, 175, 177, 180, 186, 189, 192, 193, 211, 221, 225, 245, 252, 261, 262, 275], "loss_dict": 1, "instanc": [1, 5, 6, 7, 12, 13, 15, 24, 25, 26, 28, 36, 42, 49, 58, 59, 60, 65, 86, 92, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 113, 120, 132, 133, 137, 138, 141, 144, 145, 146, 149, 155, 157, 167, 169, 173, 175, 176, 177, 187, 215, 218, 234, 235, 236, 243, 246, 252, 260, 261, 262, 267, 277, 279, 280, 281], "written": [1, 4, 5, 6, 7, 10, 11, 15, 17, 25, 26, 28, 89, 101, 107, 112, 113, 143, 149, 154, 161, 165, 166, 169, 178, 183, 186, 197, 198, 199, 206, 234, 236, 260, 272, 274], "under": [1, 5, 6, 10, 21, 22, 26, 35, 51, 54, 55, 57, 59, 61, 65, 101, 104, 106, 119, 120, 134, 136, 137, 141, 148, 156, 157, 165, 167, 171, 177, 183, 184, 192, 194, 198, 207, 209, 227, 229, 230, 232, 237, 243, 246, 271, 274], "loss_": 1, "smth": 1, "where": [1, 3, 4, 5, 7, 10, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 35, 37, 51, 54, 56, 65, 68, 72, 87, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 120, 131, 133, 136, 138, 139, 140, 143, 145, 146, 148, 150, 155, 158, 161, 164, 165, 166, 167, 169, 172, 173, 174, 175, 176, 177, 178, 179, 184, 187, 189, 190, 192, 193, 194, 195, 197, 199, 206, 209, 210, 216, 228, 231, 232, 234, 243, 246, 247, 249, 259, 260, 261, 265, 266, 277, 280], "string": [1, 4, 10, 16, 25, 26, 54, 56, 102, 114, 138, 139, 140, 149, 171, 173, 179, 186, 190, 197, 243, 247, 261], "describ": [1, 5, 6, 7, 10, 11, 15, 16, 18, 22, 23, 24, 25, 26, 42, 44, 53, 54, 57, 65, 79, 97, 104, 114, 117, 124, 130, 148, 161, 169, 173, 174, 177, 183, 186, 189, 190, 214, 218, 231, 234, 247, 280], "addit": [1, 2, 4, 6, 10, 12, 16, 19, 22, 55, 60, 79, 95, 102, 104, 109, 112, 114, 119, 133, 136, 137, 139, 146, 148, 150, 153, 155, 158, 171, 175, 176, 179, 184, 187, 189, 193, 206, 207, 208, 209, 213, 214, 215, 216, 222, 228, 232, 235, 236, 247, 252, 262, 273, 274, 276, 277, 280], "kei": [1, 4, 7, 10, 12, 15, 16, 54, 86, 107, 111, 114, 119, 121, 124, 133, 134, 135, 138, 149, 157, 167, 172, 173, 175, 178, 179, 183, 184, 186, 189, 190, 193, 195, 211, 215, 216, 225, 226, 234, 236, 251, 260, 262, 263, 273, 274], "mai": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 24, 25, 26, 28, 40, 54, 55, 57, 72, 79, 89, 94, 95, 97, 99, 102, 106, 113, 117, 120, 121, 132, 135, 136, 137, 138, 141, 142, 143, 148, 149, 150, 152, 155, 156, 161, 164, 165, 167, 172, 173, 176, 179, 183, 186, 187, 189, 193, 194, 197, 208, 211, 216, 218, 223, 225, 229, 231, 247, 252, 262, 265, 272, 274, 275, 277], "metric": [1, 19, 92, 101, 102, 104, 119, 133, 183, 186, 192, 216, 237, 243, 247, 260], "log": [1, 21, 40, 54, 55, 57, 58, 79, 101, 103, 105, 106, 109, 111, 112, 132, 135, 138, 145, 172, 173, 175, 177, 181, 183, 184, 186, 189, 190, 210, 226, 230, 237, 266, 272, 278, 280], "dure": [1, 3, 10, 13, 15, 21, 22, 28, 35, 36, 40, 41, 42, 54, 57, 67, 68, 89, 94, 97, 99, 102, 103, 104, 106, 111, 112, 113, 120, 121, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 146, 149, 153, 154, 155, 161, 165, 172, 173, 174, 175, 177, 183, 187, 189, 192, 197, 198, 201, 210, 213, 214, 218, 222, 229, 232, 236, 243, 252, 259, 260, 267], "reason": [1, 6, 7, 10, 15, 16, 17, 19, 26, 28, 35, 57, 86, 94, 97, 104, 106, 109, 112, 121, 127, 137, 142, 148, 155, 173, 178, 179, 189, 190, 197, 199, 208, 216, 229, 247, 250, 251, 258, 266, 276], "independ": [1, 26, 54, 111, 112, 156, 157, 161, 176, 206, 215, 234], "let": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 36, 40, 47, 48, 49, 51, 54, 56, 57, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 127, 134, 136, 138, 143, 146, 148, 149, 150, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 195, 199, 201, 206, 207, 211, 216, 225, 229, 231, 234, 235, 245, 247, 249, 251, 252, 259, 260, 261, 262, 265, 267, 276, 277, 279], "user": [1, 3, 6, 15, 19, 21, 22, 25, 27, 28, 45, 48, 54, 55, 86, 87, 89, 95, 104, 108, 117, 124, 133, 134, 135, 136, 139, 140, 146, 153, 155, 158, 167, 175, 177, 178, 179, 181, 183, 186, 189, 190, 192, 193, 194, 195, 206, 207, 208, 209, 214, 215, 216, 223, 227, 228, 229, 230, 231, 232, 234, 236, 237, 243, 252, 266, 267, 269, 271, 272, 273, 280], "differ": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 26, 27, 35, 40, 44, 51, 53, 54, 56, 57, 65, 77, 79, 86, 87, 89, 92, 95, 97, 99, 102, 103, 104, 105, 106, 111, 112, 114, 131, 132, 133, 134, 136, 138, 139, 140, 142, 145, 146, 148, 150, 154, 155, 156, 158, 161, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 193, 194, 197, 199, 200, 206, 207, 208, 209, 210, 211, 216, 218, 222, 228, 229, 230, 231, 232, 234, 235, 243, 247, 250, 252, 258, 260, 261, 262, 266, 267, 272, 275, 277, 280, 281], "set": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 28, 35, 40, 42, 47, 48, 51, 53, 54, 55, 57, 58, 60, 65, 67, 68, 72, 79, 86, 87, 91, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 116, 120, 121, 127, 131, 132, 133, 134, 136, 139, 140, 141, 144, 145, 146, 148, 149, 155, 157, 164, 165, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 206, 208, 210, 211, 213, 215, 216, 222, 223, 228, 229, 231, 235, 236, 237, 243, 247, 248, 251, 259, 261, 263, 265, 272, 278, 280], "sum": [1, 2, 4, 5, 6, 8, 12, 15, 17, 21, 22, 24, 36, 40, 47, 54, 57, 86, 94, 95, 105, 106, 108, 132, 133, 134, 140, 141, 143, 148, 156, 174, 175, 176, 177, 181, 183, 187, 189, 190, 207, 225, 227, 228, 229, 234, 237, 247, 265, 281], "can": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 72, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 221, 222, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "simpli": [1, 3, 5, 6, 7, 10, 14, 22, 24, 26, 47, 48, 54, 58, 89, 97, 108, 111, 120, 121, 135, 136, 138, 140, 143, 148, 155, 156, 164, 170, 171, 173, 174, 175, 176, 179, 181, 183, 184, 187, 189, 190, 193, 194, 195, 197, 207, 215, 218, 221, 229, 236, 247, 261, 263, 264, 265], "done": [1, 4, 5, 6, 7, 10, 11, 15, 18, 19, 22, 23, 24, 25, 26, 28, 40, 54, 59, 86, 89, 99, 102, 104, 105, 106, 112, 114, 132, 133, 136, 137, 140, 142, 149, 150, 154, 155, 157, 158, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 184, 186, 189, 190, 197, 199, 216, 218, 232, 236, 251, 262, 276, 279], "via": [1, 3, 4, 6, 7, 8, 18, 19, 21, 23, 25, 26, 42, 59, 60, 79, 89, 104, 131, 132, 133, 136, 138, 148, 149, 156, 165, 172, 173, 178, 184, 186, 187, 189, 190, 192, 193, 198, 201, 210, 213, 216, 227, 231, 232, 235, 236, 237, 243, 251, 259, 260, 262, 266, 271, 274], "loss_val": 1, "item": [1, 2, 7, 11, 12, 16, 40, 44, 54, 72, 79, 103, 120, 121, 124, 132, 133, 134, 139, 140, 148, 149, 158, 172, 173, 175, 176, 177, 181, 184, 186, 189, 194, 234, 237, 246, 262], "startswith": [1, 87, 158], "parent": [1, 4, 15, 231], "As": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 22, 23, 24, 25, 26, 28, 42, 47, 54, 55, 57, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 114, 120, 121, 132, 133, 134, 135, 136, 137, 138, 146, 148, 149, 152, 153, 154, 155, 156, 157, 164, 165, 167, 169, 171, 173, 174, 175, 176, 177, 178, 183, 186, 189, 190, 192, 193, 194, 199, 209, 211, 215, 223, 227, 230, 235, 237, 243, 247, 251, 262, 267, 274, 279, 280, 281], "mani": [1, 2, 5, 6, 7, 11, 15, 16, 17, 19, 21, 26, 28, 35, 36, 40, 41, 54, 56, 57, 69, 73, 79, 86, 94, 95, 97, 99, 102, 104, 106, 107, 108, 112, 114, 116, 120, 133, 136, 138, 142, 148, 150, 156, 158, 161, 166, 167, 173, 175, 176, 179, 187, 189, 190, 193, 208, 216, 221, 236, 237, 245, 246, 247, 249, 262, 267, 274, 280], "other": [1, 6, 7, 10, 11, 12, 15, 19, 22, 24, 25, 26, 28, 35, 36, 39, 44, 48, 51, 53, 54, 57, 58, 60, 61, 62, 72, 73, 79, 86, 87, 92, 94, 95, 97, 102, 104, 106, 108, 109, 111, 112, 120, 121, 124, 132, 134, 135, 136, 139, 140, 142, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 161, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 184, 187, 189, 190, 192, 193, 194, 197, 199, 206, 207, 208, 209, 211, 216, 218, 229, 231, 246, 247, 249, 251, 252, 259, 260, 261, 262, 263, 264, 265, 267, 271, 272, 273, 274, 275, 279, 281], "expect": [1, 4, 5, 6, 7, 11, 12, 15, 23, 25, 26, 49, 51, 54, 56, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 113, 121, 127, 135, 138, 142, 146, 149, 156, 157, 164, 165, 171, 172, 173, 174, 175, 176, 178, 186, 189, 190, 192, 194, 197, 213, 230, 236, 243, 245, 246, 247, 252, 259, 262, 275, 277, 281], "ani": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 25, 26, 35, 45, 47, 49, 51, 54, 56, 58, 60, 94, 97, 99, 102, 104, 105, 107, 108, 111, 112, 114, 116, 121, 130, 132, 134, 136, 137, 139, 141, 143, 144, 148, 150, 152, 153, 154, 157, 158, 164, 165, 166, 167, 169, 172, 173, 174, 176, 177, 181, 183, 186, 189, 190, 198, 200, 206, 207, 208, 209, 210, 213, 216, 218, 223, 225, 226, 228, 229, 231, 232, 234, 243, 246, 249, 251, 253, 259, 261, 265, 271, 272, 274, 275, 276, 278, 280], "similar": [1, 3, 4, 6, 10, 11, 12, 15, 16, 22, 25, 26, 44, 53, 54, 86, 87, 95, 97, 99, 102, 104, 105, 111, 112, 117, 120, 136, 139, 143, 148, 149, 165, 173, 175, 176, 177, 178, 179, 183, 184, 186, 189, 192, 194, 198, 206, 207, 208, 209, 210, 211, 235, 246, 247, 261, 262, 271, 277, 281], "structur": [1, 5, 6, 7, 10, 15, 20, 21, 22, 23, 24, 25, 26, 36, 41, 42, 44, 53, 54, 57, 58, 89, 94, 97, 99, 103, 104, 105, 109, 114, 121, 131, 141, 144, 150, 154, 157, 158, 165, 166, 171, 173, 177, 184, 186, 187, 192, 209, 214, 221, 260, 274, 276], "format": [1, 6, 13, 19, 22, 23, 26, 28, 45, 56, 103, 112, 116, 121, 131, 132, 133, 135, 148, 154, 155, 172, 175, 177, 180, 181, 183, 184, 186, 190, 192, 206, 208, 209, 216, 223, 232, 236, 237, 245, 247, 266, 279], "make": [1, 4, 5, 6, 7, 10, 11, 13, 15, 21, 22, 25, 26, 36, 40, 41, 45, 47, 48, 49, 54, 55, 56, 58, 59, 60, 62, 72, 79, 92, 94, 97, 99, 101, 102, 103, 104, 106, 107, 108, 110, 111, 112, 113, 116, 117, 121, 124, 127, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 146, 148, 149, 153, 154, 155, 156, 157, 164, 165, 167, 170, 171, 173, 174, 175, 176, 177, 179, 184, 186, 187, 189, 190, 192, 193, 195, 197, 199, 206, 207, 208, 209, 211, 221, 227, 229, 230, 231, 232, 235, 236, 245, 246, 247, 251, 253, 260, 261, 262, 266, 271, 272, 274, 277, 279], "possibl": [1, 2, 4, 5, 6, 7, 8, 10, 11, 15, 16, 19, 25, 26, 94, 95, 99, 102, 105, 108, 116, 134, 137, 141, 142, 143, 149, 150, 152, 154, 156, 157, 167, 172, 173, 175, 176, 179, 187, 189, 190, 192, 193, 197, 211, 216, 218, 223, 232, 234, 236, 237, 246, 251, 262, 274, 280], "re": [1, 4, 5, 6, 7, 8, 11, 15, 18, 22, 24, 25, 26, 27, 39, 41, 44, 48, 53, 54, 55, 79, 95, 97, 99, 101, 102, 103, 104, 105, 112, 120, 127, 137, 139, 140, 149, 150, 152, 156, 161, 164, 166, 167, 172, 173, 174, 175, 176, 179, 189, 190, 192, 198, 199, 206, 218, 221, 229, 231, 246, 247, 251, 261, 262], "across": [1, 4, 6, 10, 12, 15, 18, 21, 23, 27, 44, 54, 57, 59, 60, 61, 86, 95, 102, 104, 114, 130, 132, 133, 134, 136, 144, 145, 146, 148, 150, 157, 167, 169, 171, 174, 176, 177, 189, 190, 195, 226, 229, 231, 234, 245, 260, 262, 263, 265, 266, 271, 275, 277, 280, 281], "modal": [1, 167, 245], "complex": [1, 7, 26, 28, 36, 37, 55, 71, 72, 94, 95, 99, 104, 114, 120, 121, 130, 132, 146, 161, 165, 167, 175, 177, 184, 187, 189, 190, 197, 211, 219, 230, 231, 253, 263, 274], "read": [1, 2, 6, 7, 8, 15, 22, 25, 26, 41, 51, 54, 56, 79, 97, 108, 109, 112, 121, 127, 130, 133, 134, 135, 137, 138, 139, 140, 141, 148, 153, 155, 164, 167, 172, 173, 174, 176, 179, 181, 184, 187, 193, 198, 246, 247, 277, 280], "multipl": [1, 4, 6, 10, 11, 12, 15, 17, 18, 19, 21, 22, 23, 26, 44, 49, 53, 54, 58, 59, 60, 61, 65, 69, 86, 92, 94, 95, 99, 102, 103, 104, 108, 112, 120, 130, 132, 134, 136, 137, 138, 139, 140, 146, 148, 150, 155, 157, 167, 169, 172, 173, 175, 176, 177, 179, 183, 184, 186, 187, 189, 190, 193, 195, 197, 199, 210, 211, 216, 223, 229, 234, 235, 246, 247, 252, 261, 262, 263, 266, 276, 280], "entri": [1, 5, 12, 15, 26, 58, 108, 111, 119, 121, 144, 149, 155, 171, 173, 175, 183, 189, 197, 208, 209, 211, 215, 227, 264, 271], "In": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 41, 42, 44, 47, 49, 53, 54, 55, 56, 57, 58, 60, 61, 62, 68, 72, 79, 86, 87, 89, 91, 92, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 119, 120, 121, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 219, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 245, 246, 247, 249, 251, 252, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "word": [1, 7, 11, 12, 15, 48, 54, 79, 86, 95, 99, 104, 105, 107, 109, 110, 121, 131, 139, 140, 148, 162, 164, 165, 171, 177, 179, 190, 207, 209, 211, 277], "allow": [1, 2, 5, 6, 7, 10, 11, 12, 13, 15, 22, 25, 26, 27, 28, 35, 36, 37, 47, 54, 55, 56, 57, 58, 86, 87, 89, 92, 94, 95, 99, 102, 104, 106, 108, 109, 111, 112, 113, 114, 120, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 146, 148, 149, 153, 157, 158, 161, 164, 165, 167, 170, 171, 173, 174, 175, 177, 178, 179, 181, 186, 187, 189, 190, 192, 193, 195, 197, 200, 206, 207, 211, 213, 222, 227, 231, 232, 234, 243, 246, 247, 252, 259, 260, 261, 271, 280], "u": [1, 4, 6, 7, 10, 11, 12, 15, 17, 19, 22, 23, 26, 28, 35, 37, 48, 51, 54, 56, 57, 73, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 111, 112, 117, 120, 133, 136, 139, 142, 144, 148, 149, 150, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 172, 173, 174, 176, 179, 184, 186, 187, 189, 190, 193, 199, 206, 207, 209, 211, 213, 216, 221, 225, 232, 234, 245, 247, 249, 251, 259, 261, 275], "oblivi": [1, 173], "type": [1, 4, 5, 6, 7, 10, 11, 15, 21, 22, 23, 24, 25, 26, 40, 44, 53, 54, 55, 56, 79, 86, 89, 95, 97, 98, 101, 103, 108, 112, 114, 117, 130, 132, 133, 136, 138, 150, 155, 158, 166, 167, 170, 171, 173, 175, 176, 177, 178, 183, 186, 187, 189, 193, 194, 206, 210, 213, 218, 223, 227, 228, 229, 232, 234, 236, 237, 243, 245, 259, 260, 262, 263, 270, 273, 280], "being": [1, 3, 4, 5, 6, 7, 11, 13, 15, 19, 23, 24, 26, 51, 54, 57, 86, 95, 103, 104, 105, 106, 108, 112, 114, 127, 133, 136, 138, 142, 148, 149, 165, 167, 169, 171, 173, 174, 176, 187, 189, 190, 207, 208, 211, 216, 218, 228, 236, 247, 251, 262, 276, 280], "run": [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 51, 53, 56, 57, 61, 62, 65, 67, 68, 69, 71, 72, 73, 76, 77, 86, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 187, 190, 192, 193, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 221, 222, 223, 228, 229, 230, 231, 232, 235, 236, 243, 245, 246, 247, 248, 249, 251, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 276, 277, 278, 280], "elementari": [1, 2], "onli": [1, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 21, 22, 23, 25, 26, 35, 42, 47, 48, 49, 51, 54, 58, 60, 61, 79, 86, 92, 94, 97, 99, 102, 104, 105, 106, 111, 112, 119, 121, 124, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 158, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 194, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 215, 218, 221, 222, 225, 226, 227, 231, 232, 234, 243, 246, 247, 252, 259, 262, 263, 264, 267, 271, 274, 275, 277, 280, 281], "those": [1, 4, 5, 6, 7, 8, 11, 12, 15, 19, 35, 42, 47, 92, 94, 102, 105, 111, 112, 117, 135, 136, 137, 139, 150, 154, 164, 169, 170, 171, 177, 179, 184, 186, 189, 190, 199, 207, 216, 218, 221, 222, 223, 229, 237, 243, 246, 247, 261, 271, 274, 276, 280], "keep": [1, 4, 7, 11, 12, 15, 26, 35, 44, 47, 54, 56, 57, 79, 86, 89, 97, 99, 102, 104, 106, 108, 109, 112, 120, 121, 131, 132, 133, 134, 135, 136, 137, 140, 145, 146, 149, 155, 161, 167, 177, 179, 189, 190, 193, 247, 262, 281], "didact": [1, 148], "ll": [1, 4, 5, 6, 7, 10, 11, 17, 19, 22, 23, 25, 26, 36, 37, 39, 44, 53, 54, 55, 81, 82, 83, 84, 92, 94, 95, 97, 99, 101, 102, 103, 105, 112, 114, 134, 139, 140, 146, 148, 149, 150, 152, 156, 161, 164, 166, 172, 173, 174, 176, 179, 184, 189, 190, 193, 199, 206, 208, 210, 216, 225, 226, 234, 247, 273, 278], "displai": [1, 2, 6, 7, 13, 37, 48, 95, 101, 103, 119, 127, 142, 179, 183, 227, 230, 246, 247, 260], "each": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 26, 27, 28, 35, 36, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 56, 57, 58, 60, 61, 65, 69, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 116, 119, 120, 121, 127, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 154, 156, 157, 158, 161, 164, 165, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 189, 190, 192, 193, 195, 197, 198, 200, 206, 209, 211, 216, 226, 227, 230, 231, 232, 234, 236, 237, 243, 245, 246, 247, 249, 251, 252, 253, 259, 260, 261, 262, 264, 265, 277, 278, 280, 281], "popul": [1, 25, 35, 47, 54, 92, 102, 103, 133, 149, 157, 173, 175, 197, 226, 232, 234, 261, 272], "later": [1, 3, 4, 5, 6, 7, 12, 17, 26, 35, 44, 51, 54, 79, 92, 95, 99, 104, 108, 109, 112, 121, 132, 133, 135, 136, 140, 141, 143, 148, 150, 152, 153, 154, 155, 156, 157, 161, 166, 169, 173, 174, 177, 178, 179, 184, 186, 189, 190, 193, 195, 197, 198, 201, 206, 215, 225, 226, 228, 230, 234, 243, 246, 247, 248, 251, 259, 262, 267, 271, 272, 273, 274, 276, 277, 278], "stage": [1, 15, 18, 99, 112, 169, 200, 210, 222, 227, 228, 234], "start": [1, 5, 6, 7, 12, 18, 19, 21, 22, 26, 27, 28, 35, 39, 47, 48, 54, 55, 57, 58, 59, 60, 65, 79, 92, 94, 95, 98, 99, 102, 103, 104, 107, 108, 112, 113, 114, 117, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 148, 155, 156, 157, 164, 165, 167, 172, 174, 175, 176, 179, 183, 184, 186, 187, 189, 190, 192, 195, 197, 199, 201, 208, 213, 216, 217, 227, 228, 232, 235, 243, 247, 250, 252, 258, 260, 265, 266, 269, 271, 272, 274, 281], "solv": [1, 7, 15, 54, 56, 104, 111, 127, 165, 173, 175, 177, 208, 247, 251, 262], "task": [1, 7, 14, 15, 19, 24, 27, 40, 41, 54, 103, 104, 105, 111, 119, 127, 130, 131, 132, 139, 149, 165, 167, 173, 174, 179, 181, 186, 192, 216, 247, 252, 261, 262, 271, 277, 280], "strategi": [1, 6, 19, 21, 27, 57, 86, 131, 140, 148, 155, 156, 166, 167, 175, 176, 216, 223, 228, 230, 231, 232, 237, 262], "predict": [1, 22, 23, 36, 39, 40, 41, 42, 47, 48, 54, 57, 67, 68, 71, 72, 73, 76, 77, 79, 94, 95, 97, 99, 103, 104, 105, 109, 111, 112, 136, 138, 139, 140, 150, 156, 157, 167, 174, 179, 184, 190, 192, 216, 235, 245, 249, 266, 277, 279], "henc": [1, 15, 19, 44, 47, 53, 86, 132, 137, 146, 158, 161, 167, 170, 173, 175, 177, 190, 216, 235, 236, 247, 277], "our": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 18, 19, 22, 23, 24, 25, 26, 28, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 65, 67, 68, 69, 71, 72, 73, 79, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 117, 119, 120, 127, 131, 132, 133, 135, 138, 139, 140, 141, 143, 144, 145, 149, 152, 154, 155, 156, 157, 158, 161, 165, 166, 167, 169, 171, 173, 174, 175, 176, 178, 179, 181, 184, 186, 187, 189, 190, 192, 193, 194, 195, 199, 201, 206, 207, 208, 209, 215, 216, 219, 221, 226, 228, 229, 232, 234, 235, 245, 247, 261, 266, 267, 272, 273, 281], "two": [1, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 35, 37, 40, 41, 44, 45, 47, 53, 54, 55, 57, 62, 79, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 119, 120, 127, 132, 133, 138, 139, 141, 142, 143, 145, 146, 148, 149, 152, 154, 155, 156, 157, 158, 161, 165, 166, 167, 169, 170, 171, 173, 174, 175, 177, 178, 179, 186, 190, 192, 193, 194, 195, 197, 199, 200, 207, 209, 211, 213, 216, 218, 219, 223, 227, 231, 232, 234, 235, 237, 243, 247, 249, 251, 252, 259, 261, 262, 263, 266, 272, 274, 276, 279, 280, 281], "constructor": [1, 7, 11, 12, 13, 24, 25, 26, 28, 71, 73, 89, 99, 103, 120, 132, 133, 146, 167, 170, 171, 173, 175, 177, 209, 218, 246, 247], "both": [1, 2, 5, 6, 7, 10, 11, 12, 13, 15, 18, 22, 23, 24, 25, 26, 27, 28, 37, 54, 56, 57, 65, 79, 86, 89, 95, 102, 103, 104, 111, 112, 119, 120, 133, 134, 136, 138, 142, 145, 146, 148, 152, 153, 155, 156, 158, 161, 167, 171, 173, 175, 176, 177, 178, 179, 189, 190, 192, 193, 194, 199, 200, 206, 209, 210, 227, 228, 229, 231, 235, 236, 237, 243, 245, 246, 247, 259, 261, 271, 272, 277, 279, 280], "compat": [1, 5, 6, 7, 10, 12, 19, 55, 101, 102, 108, 113, 135, 141, 149, 178, 187, 189, 190, 215, 218, 232, 276, 277, 279], "comput": [1, 3, 4, 6, 7, 10, 12, 13, 14, 17, 18, 19, 22, 23, 24, 26, 27, 28, 40, 44, 48, 51, 53, 54, 56, 57, 58, 62, 65, 67, 68, 69, 72, 76, 77, 79, 87, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 112, 114, 116, 120, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 155, 157, 164, 165, 166, 167, 169, 171, 172, 173, 174, 176, 178, 179, 183, 186, 187, 189, 190, 192, 193, 195, 197, 199, 210, 211, 214, 216, 218, 221, 222, 223, 225, 226, 232, 234, 235, 243, 246, 247, 249, 251, 253, 261, 274, 277, 279, 280], "fit": [1, 7, 11, 12, 23, 65, 92, 111, 120, 132, 133, 134, 136, 146, 167, 177, 190, 246, 280], "gener": [1, 5, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 58, 67, 68, 69, 71, 72, 73, 76, 77, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 122, 124, 127, 131, 136, 137, 139, 141, 142, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 171, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 216, 219, 221, 223, 226, 228, 229, 234, 235, 236, 237, 243, 245, 246, 248, 249, 251, 252, 253, 259, 260, 261, 263, 264, 265, 266, 267, 272, 273, 274, 275, 276, 277, 278, 280], "crucial": [1, 2, 13, 15, 26, 86, 108, 149, 167, 173, 190, 262], "convert_to_funct": 1, "extract": [1, 6, 23, 54, 57, 79, 101, 104, 127, 131, 139, 140, 152, 155, 166, 173, 179, 187, 189, 192, 227, 232, 234, 249], "convert": [1, 6, 11, 13, 22, 23, 25, 26, 36, 37, 44, 45, 48, 54, 56, 57, 60, 79, 97, 99, 102, 104, 112, 114, 116, 121, 131, 134, 139, 140, 172, 173, 175, 176, 181, 184, 190, 199, 206, 207, 209, 210, 211, 213, 214, 229, 232, 236, 245, 259, 262, 266], "strictli": [1, 102, 173], "speak": [1, 10, 47, 102, 137, 148, 262], "one": [1, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 19, 21, 22, 24, 25, 26, 28, 35, 37, 39, 44, 45, 49, 51, 53, 54, 56, 57, 60, 61, 65, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 108, 109, 111, 112, 117, 120, 121, 124, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 189, 190, 192, 194, 197, 198, 199, 206, 207, 208, 210, 211, 216, 221, 228, 229, 230, 231, 232, 247, 249, 251, 252, 262, 263, 265, 266, 274, 275, 276, 277, 280, 281], "perfectli": [1, 15], "howev": [1, 4, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 23, 25, 26, 28, 35, 42, 49, 51, 54, 56, 57, 79, 89, 92, 104, 105, 120, 127, 136, 137, 141, 142, 143, 148, 149, 150, 154, 158, 164, 167, 170, 171, 174, 175, 176, 177, 178, 179, 184, 186, 187, 189, 190, 194, 200, 201, 207, 208, 211, 216, 221, 223, 229, 230, 234, 235, 247, 251, 259, 261, 262, 267, 274, 277, 280], "encourag": [1, 7, 22, 99, 174, 179, 186], "usag": [1, 3, 4, 5, 12, 14, 16, 24, 26, 40, 86, 94, 119, 131, 132, 134, 137, 148, 149, 155, 156, 169, 173, 175, 177, 178, 180, 183, 193, 195, 199, 201, 210, 211, 223, 228, 236, 243, 246, 260, 262, 266, 275, 279, 280], "doe": [1, 2, 4, 6, 7, 10, 14, 15, 16, 17, 22, 25, 26, 28, 35, 45, 47, 51, 76, 77, 79, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 111, 112, 114, 117, 120, 121, 127, 132, 133, 134, 135, 141, 143, 146, 148, 149, 153, 156, 157, 158, 164, 165, 167, 169, 172, 173, 174, 176, 177, 178, 179, 183, 184, 187, 189, 190, 192, 193, 197, 198, 199, 207, 208, 209, 218, 221, 228, 232, 243, 246, 247, 251, 259, 261, 262, 274, 276, 280], "often": [1, 5, 6, 7, 11, 15, 19, 44, 54, 79, 92, 94, 95, 97, 102, 104, 106, 108, 111, 112, 120, 121, 136, 137, 138, 140, 157, 165, 189, 190, 197, 211, 216, 219, 225, 228, 232, 246, 261, 262], "same": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 19, 22, 23, 24, 25, 26, 28, 35, 36, 42, 44, 47, 48, 54, 56, 57, 58, 60, 69, 77, 79, 89, 92, 94, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 146, 148, 150, 152, 155, 156, 157, 158, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 193, 194, 195, 198, 200, 206, 207, 208, 209, 211, 216, 228, 229, 243, 246, 247, 252, 254, 255, 256, 257, 259, 262, 265, 271, 272, 275, 276, 279, 280, 281], "usual": [1, 6, 7, 10, 17, 22, 26, 47, 95, 97, 99, 101, 102, 106, 107, 109, 111, 112, 127, 136, 137, 140, 142, 143, 146, 148, 149, 155, 158, 164, 167, 171, 173, 181, 189, 193, 221, 246, 251, 252, 262, 280], "former": [1, 6, 139, 140, 179], "some": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 23, 25, 26, 28, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 67, 72, 79, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 117, 119, 120, 121, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 161, 164, 166, 167, 169, 171, 173, 174, 176, 177, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 195, 197, 199, 206, 207, 208, 209, 211, 213, 215, 216, 218, 219, 221, 229, 232, 236, 237, 246, 247, 249, 251, 252, 253, 261, 262, 263, 267, 274, 275, 277, 280], "lag": [1, 173], "absolut": [1, 7, 11, 86, 106, 171, 174, 261], "dilut": 1, "move": [1, 5, 6, 8, 13, 26, 29, 30, 31, 32, 33, 34, 36, 41, 44, 47, 51, 53, 79, 80, 93, 94, 106, 112, 132, 133, 134, 136, 145, 146, 149, 151, 164, 165, 167, 170, 174, 176, 177, 181, 182, 183, 185, 188, 192, 202, 205, 207, 222, 227, 228, 229, 235, 247, 261, 262], "averag": [1, 3, 22, 54, 57, 65, 86, 92, 95, 97, 103, 104, 112, 132, 135, 140, 148, 166, 174, 177, 179, 181, 183, 247, 262], "These": [1, 6, 10, 12, 13, 15, 19, 22, 23, 24, 28, 42, 47, 54, 57, 60, 65, 86, 92, 99, 107, 109, 111, 112, 119, 127, 148, 157, 173, 176, 178, 179, 186, 189, 190, 193, 199, 213, 216, 235, 247, 261, 262, 271, 272, 274], "associ": [1, 4, 6, 7, 10, 11, 36, 37, 55, 86, 95, 143, 152, 167, 171, 178, 186, 190, 198, 207, 216, 218, 249, 259, 262, 276], "One": [1, 2, 4, 5, 6, 7, 11, 12, 16, 24, 26, 54, 56, 79, 86, 94, 99, 102, 104, 105, 106, 108, 132, 133, 134, 135, 136, 137, 140, 146, 148, 150, 153, 164, 165, 167, 181, 184, 187, 189, 190, 192, 193, 197, 208, 221, 228, 229, 237, 247, 253, 259, 261, 262, 277], "advantag": [1, 3, 7, 15, 19, 26, 54, 89, 102, 105, 112, 130, 133, 134, 137, 148, 149, 165, 167, 173, 187, 193, 209, 216, 228, 229, 236, 243, 262, 272, 276], "match": [1, 5, 6, 11, 15, 19, 22, 23, 25, 56, 72, 97, 102, 104, 112, 114, 117, 120, 121, 150, 153, 155, 158, 164, 166, 173, 176, 187, 189, 207, 209, 216, 235, 236, 246, 249, 253, 263, 280], "exactli": [1, 6, 10, 11, 13, 19, 28, 35, 47, 56, 57, 97, 108, 111, 112, 114, 120, 149, 155, 165, 189, 190, 216], "current": [1, 4, 6, 7, 10, 11, 12, 13, 15, 16, 22, 25, 26, 36, 40, 41, 44, 54, 57, 67, 79, 86, 95, 104, 112, 116, 120, 127, 132, 133, 135, 137, 138, 139, 140, 148, 149, 152, 157, 158, 166, 167, 169, 171, 173, 174, 175, 176, 177, 178, 179, 183, 189, 190, 193, 194, 197, 206, 208, 209, 211, 229, 232, 235, 252, 262, 271, 274], "configur": [1, 5, 6, 7, 15, 21, 22, 23, 25, 26, 27, 54, 55, 86, 95, 103, 133, 136, 144, 146, 153, 155, 164, 173, 176, 183, 186, 190, 199, 201, 210, 227, 235, 236, 237, 262, 266, 267, 272, 274, 277, 280], "pessimist": [1, 173], "bound": [1, 26, 54, 121, 134, 138, 155, 173, 174, 183, 189, 190, 192, 193, 199, 246, 247, 252, 262, 280], "pai": [1, 11, 49, 54, 135, 262, 275], "attent": [1, 11, 49, 54, 99, 131, 135, 136, 139, 140, 162, 180, 181, 195, 199, 211, 214, 274], "create_target_param": 1, "keyword": [1, 6, 171, 173, 186, 251, 259], "argument": [1, 2, 4, 5, 6, 7, 10, 15, 17, 24, 25, 26, 35, 41, 44, 47, 48, 53, 56, 60, 73, 86, 94, 95, 99, 101, 102, 104, 106, 109, 111, 113, 119, 120, 121, 132, 133, 140, 145, 146, 148, 149, 150, 155, 156, 166, 167, 169, 170, 171, 173, 175, 176, 177, 178, 183, 186, 187, 189, 190, 194, 195, 197, 208, 210, 221, 222, 227, 230, 234, 246, 247, 251, 252, 259, 260, 262, 263, 274, 280], "below": [1, 2, 4, 5, 7, 11, 12, 13, 15, 18, 21, 22, 23, 26, 27, 37, 42, 44, 47, 49, 53, 56, 57, 58, 59, 60, 61, 62, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 134, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 152, 155, 158, 164, 170, 173, 174, 175, 176, 177, 178, 183, 184, 186, 187, 189, 190, 192, 193, 197, 199, 200, 201, 207, 208, 209, 210, 211, 213, 215, 218, 219, 226, 227, 228, 229, 230, 232, 234, 235, 237, 243, 246, 247, 251, 252, 267, 270, 271, 274, 275, 276, 277, 280, 281], "tell": [1, 17, 21, 26, 73, 92, 94, 97, 99, 103, 111, 112, 120, 138, 139, 149, 150, 152, 164, 174, 175, 177, 179, 189, 247, 252], "creat": [1, 2, 5, 6, 7, 11, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 39, 42, 44, 45, 47, 48, 51, 53, 55, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 89, 94, 95, 97, 99, 101, 103, 104, 105, 107, 109, 111, 113, 114, 117, 120, 121, 124, 131, 133, 134, 135, 136, 141, 143, 146, 148, 149, 152, 153, 157, 158, 162, 165, 166, 167, 169, 170, 172, 173, 174, 176, 177, 179, 183, 184, 186, 187, 189, 190, 192, 193, 195, 198, 199, 201, 206, 209, 211, 213, 218, 222, 225, 226, 228, 229, 231, 234, 235, 243, 246, 247, 249, 252, 253, 259, 260, 263, 264, 265, 266, 267, 274, 276, 277, 279, 281], "If": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 21, 24, 25, 26, 27, 35, 36, 39, 41, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 65, 67, 79, 86, 92, 94, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 124, 127, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 150, 152, 155, 156, 158, 164, 165, 166, 167, 170, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 206, 207, 209, 210, 211, 215, 216, 218, 221, 222, 223, 228, 229, 232, 236, 237, 243, 245, 246, 248, 251, 252, 259, 260, 261, 262, 263, 265, 267, 274, 275, 280], "fals": [1, 2, 4, 7, 11, 12, 15, 22, 23, 26, 40, 42, 47, 60, 67, 68, 79, 86, 87, 94, 103, 108, 114, 120, 121, 127, 132, 133, 134, 136, 142, 152, 155, 158, 164, 165, 167, 172, 175, 176, 181, 184, 186, 187, 189, 194, 197, 200, 207, 208, 210, 213, 215, 216, 222, 225, 234, 235, 236, 237, 246, 259, 262, 263, 270, 277, 280, 281], "see": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 17, 19, 21, 22, 23, 24, 26, 27, 28, 36, 40, 41, 44, 48, 49, 51, 53, 54, 55, 56, 57, 60, 65, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 119, 121, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 157, 158, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 206, 208, 209, 210, 213, 214, 215, 216, 218, 219, 221, 222, 223, 226, 229, 230, 231, 232, 234, 235, 238, 243, 245, 246, 247, 252, 259, 260, 261, 262, 263, 264, 265, 271, 272, 273, 275, 276, 278, 279, 280], "target_actor_network_param": 1, "attribut": [1, 7, 12, 15, 25, 28, 35, 47, 51, 58, 79, 86, 89, 99, 111, 112, 117, 137, 149, 152, 158, 165, 169, 171, 189, 211, 214, 219, 223, 246, 265, 266, 277], "still": [1, 6, 7, 10, 11, 12, 13, 15, 16, 19, 21, 22, 23, 26, 51, 57, 79, 92, 94, 102, 104, 108, 112, 114, 119, 121, 133, 139, 140, 141, 146, 148, 149, 152, 153, 154, 158, 164, 167, 177, 187, 189, 190, 194, 195, 199, 200, 206, 208, 210, 216, 228, 229, 231, 235, 261, 262, 275, 281], "access": [1, 6, 7, 11, 15, 19, 22, 26, 36, 37, 55, 72, 79, 92, 94, 97, 99, 102, 103, 104, 109, 112, 120, 121, 131, 133, 137, 144, 148, 153, 165, 167, 172, 174, 176, 186, 189, 198, 206, 207, 209, 210, 213, 216, 228, 231, 243, 261, 265, 271], "just": [1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 19, 22, 24, 25, 26, 28, 35, 48, 49, 51, 54, 55, 56, 57, 58, 61, 76, 77, 79, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 121, 127, 132, 133, 136, 138, 139, 140, 146, 149, 155, 156, 161, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 184, 186, 187, 189, 190, 192, 199, 200, 208, 216, 229, 231, 232, 236, 247, 248, 249, 261, 262, 265, 267, 280], "detach": [1, 2, 7, 12, 35, 79, 94, 102, 108, 135, 161, 166, 195], "version": [1, 3, 4, 5, 6, 7, 10, 11, 13, 15, 23, 25, 26, 28, 95, 97, 99, 102, 103, 112, 113, 114, 116, 117, 132, 133, 137, 148, 149, 150, 152, 156, 158, 165, 167, 169, 170, 171, 172, 173, 181, 183, 184, 186, 190, 192, 193, 197, 198, 199, 201, 206, 215, 222, 234, 235, 236, 237, 246, 247, 251, 261, 267, 272, 276, 279], "q": [1, 47, 54, 131, 136, 157, 178, 186, 216], "base": [1, 6, 7, 11, 12, 15, 18, 19, 21, 23, 26, 27, 28, 37, 48, 54, 62, 79, 89, 92, 94, 95, 99, 103, 104, 106, 114, 119, 121, 130, 131, 132, 133, 134, 135, 138, 139, 141, 149, 157, 167, 169, 170, 171, 174, 176, 179, 183, 184, 186, 189, 190, 192, 195, 200, 208, 210, 213, 214, 215, 216, 227, 235, 246, 259, 261, 262, 266, 272, 276, 277], "empir": [1, 161, 173], "bootstrap": [1, 149], "td": 1, "0": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 60, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 86, 89, 90, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 190, 192, 193, 194, 195, 197, 198, 199, 200, 206, 207, 209, 210, 211, 215, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 245, 246, 247, 248, 249, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281], "low": [1, 4, 5, 6, 7, 15, 17, 23, 27, 28, 54, 57, 72, 86, 99, 106, 120, 131, 139, 183, 189, 193, 213, 236, 237, 261], "varianc": [1, 7, 22, 101, 173], "bia": [1, 2, 6, 7, 22, 47, 51, 72, 79, 106, 112, 120, 121, 132, 141, 142, 149, 156, 171, 173, 177, 178, 181, 193, 194, 210, 211, 216, 259], "mean": [1, 2, 4, 6, 7, 11, 13, 15, 22, 26, 28, 40, 51, 54, 56, 57, 72, 79, 86, 89, 94, 97, 99, 102, 103, 104, 105, 106, 108, 111, 119, 120, 121, 133, 136, 138, 139, 142, 146, 148, 158, 165, 167, 172, 173, 174, 176, 177, 179, 181, 183, 184, 186, 189, 190, 198, 206, 208, 211, 215, 221, 222, 223, 225, 229, 234, 247, 251, 252, 261, 262, 267, 277, 280], "obtain": [1, 27, 35, 40, 54, 72, 92, 112, 114, 120, 138, 139, 142, 148, 156, 166, 173, 174, 176, 183, 186, 192, 198, 252, 276], "reward": [1, 5, 15, 149, 157, 173, 174, 175, 177], "noth": [1, 26, 79, 97, 112, 143, 167, 177, 183, 194, 279], "els": [1, 5, 6, 10, 12, 21, 22, 26, 28, 51, 54, 56, 79, 92, 94, 103, 111, 113, 133, 134, 140, 148, 158, 169, 170, 175, 176, 177, 181, 184, 186, 187, 189, 195, 200, 210, 216, 227, 231, 232, 234, 246, 277, 279, 281], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 35, 36, 39, 40, 45, 47, 54, 56, 57, 58, 60, 68, 72, 79, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 162, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 181, 186, 187, 190, 193, 195, 197, 199, 200, 201, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 219, 222, 223, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 246, 251, 253, 260, 262, 270, 271, 276, 277, 279, 280, 281], "case": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 23, 25, 26, 28, 35, 42, 47, 54, 56, 65, 72, 79, 86, 89, 94, 95, 101, 102, 104, 105, 106, 108, 109, 111, 112, 117, 120, 121, 130, 132, 133, 134, 136, 137, 138, 141, 142, 143, 148, 149, 150, 152, 155, 156, 158, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 195, 199, 206, 208, 209, 210, 211, 213, 215, 216, 218, 221, 222, 229, 232, 236, 245, 246, 247, 252, 253, 259, 261, 265, 267, 272, 274, 275, 277, 280], "whole": [1, 3, 28, 48, 51, 99, 112, 121, 131, 135, 148, 171, 173, 179, 190, 207, 221, 267], "sequenc": [1, 6, 7, 13, 24, 26, 44, 53, 54, 71, 72, 99, 105, 107, 110, 111, 120, 121, 131, 139, 140, 149, 162, 165, 173, 178, 180, 193, 195, 199, 211, 214, 221, 225, 226, 231, 234, 246, 252, 262], "upcom": 1, "intermedi": [1, 28, 80, 94, 99, 102, 131, 144, 152, 155, 156, 157, 164, 167, 180, 188, 190, 193, 216, 247, 253, 279], "lambda": [1, 6, 25, 112, 141, 172, 175, 189, 216, 234, 246, 247], "also": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 40, 41, 44, 47, 51, 53, 54, 56, 57, 58, 59, 65, 72, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 119, 120, 121, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 149, 152, 154, 155, 156, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 195, 197, 201, 206, 207, 208, 209, 215, 216, 218, 219, 221, 222, 223, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 246, 247, 248, 251, 252, 259, 260, 261, 262, 264, 265, 267, 271, 272, 273, 275, 276, 278, 279, 280, 281], "compromis": 1, "easi": [1, 2, 6, 7, 26, 27, 37, 48, 49, 56, 72, 94, 95, 102, 104, 106, 133, 134, 136, 138, 148, 153, 156, 161, 165, 169, 173, 183, 189, 190, 200, 216, 221, 236, 247, 261, 277], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 8, 25, 26, 176], "defin": [1, 2, 6, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 35, 40, 41, 42, 45, 47, 49, 57, 66, 69, 71, 72, 73, 79, 89, 92, 94, 99, 101, 103, 105, 106, 111, 112, 114, 117, 121, 131, 132, 133, 137, 139, 141, 144, 148, 149, 150, 153, 154, 157, 161, 164, 166, 167, 174, 175, 176, 178, 181, 183, 184, 187, 189, 193, 197, 206, 213, 215, 216, 225, 228, 229, 232, 234, 235, 236, 237, 250, 251, 252, 258, 259, 266, 267, 269, 273, 275, 276, 277, 281], "default": [1, 3, 4, 6, 7, 10, 11, 12, 16, 19, 22, 23, 24, 27, 35, 40, 44, 47, 49, 54, 56, 57, 60, 67, 68, 86, 97, 99, 101, 102, 106, 108, 113, 117, 120, 127, 131, 132, 133, 134, 135, 136, 139, 148, 149, 150, 152, 153, 155, 158, 164, 167, 170, 172, 175, 176, 177, 181, 183, 184, 186, 187, 189, 190, 193, 194, 195, 197, 200, 209, 210, 213, 215, 218, 222, 223, 228, 229, 232, 235, 236, 243, 247, 250, 251, 252, 258, 260, 262, 265, 267, 270, 271, 272, 275, 277, 280, 281], "take": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 36, 37, 44, 47, 48, 51, 53, 54, 55, 56, 57, 72, 79, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 117, 120, 121, 127, 135, 136, 137, 138, 139, 140, 141, 143, 146, 148, 154, 156, 157, 164, 167, 172, 173, 174, 175, 176, 177, 179, 183, 184, 186, 187, 189, 190, 192, 193, 195, 199, 201, 206, 209, 211, 213, 216, 221, 228, 229, 232, 235, 236, 237, 247, 248, 249, 252, 259, 261, 262, 263, 264, 265, 267, 272, 277, 279, 280], "simplest": [1, 7, 26, 35, 51, 94, 102, 106, 149, 173, 179, 262], "show": [1, 6, 11, 12, 17, 19, 21, 22, 25, 27, 48, 56, 57, 65, 79, 86, 87, 89, 92, 94, 95, 97, 99, 102, 103, 112, 117, 119, 132, 135, 138, 139, 140, 142, 143, 146, 149, 155, 158, 167, 170, 172, 174, 175, 177, 181, 183, 184, 186, 187, 189, 190, 193, 194, 206, 216, 226, 227, 228, 229, 231, 232, 236, 243, 246, 247, 252, 260, 261, 262, 267, 276, 277, 280, 281], "chang": [1, 2, 6, 7, 11, 12, 13, 15, 22, 24, 25, 26, 27, 35, 44, 47, 53, 55, 56, 57, 58, 60, 86, 87, 89, 92, 94, 95, 97, 98, 103, 104, 105, 107, 108, 109, 114, 121, 131, 132, 135, 136, 138, 139, 141, 144, 145, 148, 149, 152, 155, 156, 157, 164, 165, 167, 170, 171, 175, 181, 183, 186, 187, 189, 190, 193, 199, 200, 208, 210, 211, 213, 215, 222, 223, 226, 227, 228, 229, 234, 236, 237, 246, 247, 250, 258, 259, 260, 262, 263, 270, 275, 276, 277, 278, 280], "instruct": [1, 7, 22, 26, 27, 39, 95, 98, 101, 103, 139, 140, 149, 152, 169, 171, 173, 175, 177, 179, 222, 223, 235, 236, 243, 245, 262, 266, 279, 280], "queri": [1, 15, 25, 54, 97, 102, 121, 135, 176, 178, 192, 193, 195, 211], "correspond": [1, 2, 3, 4, 6, 7, 10, 11, 13, 15, 16, 36, 37, 41, 47, 54, 60, 86, 94, 95, 99, 101, 106, 109, 119, 121, 132, 137, 138, 141, 155, 164, 169, 171, 173, 176, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 198, 209, 215, 237, 245, 251, 252, 262, 266, 280], "make_value_estim": 1, "central": [1, 10, 79, 94, 102, 103, 109, 111, 144, 265], "quit": [1, 7, 19, 26, 54, 79, 137, 148, 164, 173, 177, 189, 190, 206, 216, 228, 231, 234, 247, 261], "weight": [1, 2, 3, 5, 6, 7, 13, 14, 15, 19, 22, 23, 27, 35, 36, 47, 48, 54, 67, 68, 70, 72, 73, 74, 76, 77, 79, 94, 97, 99, 102, 103, 104, 106, 107, 109, 112, 121, 127, 131, 132, 139, 141, 142, 144, 149, 150, 153, 155, 156, 158, 164, 165, 166, 171, 173, 174, 177, 179, 181, 183, 186, 190, 193, 194, 199, 210, 213, 216, 218, 228, 232, 235, 237, 249, 259, 264, 265, 270, 277, 279], "when": [1, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 21, 23, 24, 25, 26, 28, 35, 37, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 57, 58, 60, 65, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 108, 111, 112, 113, 116, 117, 119, 120, 121, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 145, 146, 148, 149, 152, 154, 155, 157, 158, 161, 164, 165, 167, 170, 171, 173, 174, 175, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 197, 199, 206, 209, 210, 211, 213, 215, 216, 218, 219, 222, 223, 226, 227, 229, 230, 231, 235, 243, 246, 247, 249, 251, 252, 253, 259, 261, 262, 263, 265, 266, 271, 272, 274, 275, 277, 280, 281], "must": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 25, 26, 36, 37, 54, 57, 79, 89, 94, 95, 102, 105, 111, 116, 117, 121, 133, 146, 148, 149, 150, 152, 167, 173, 176, 183, 186, 187, 189, 190, 194, 197, 198, 206, 207, 209, 211, 218, 221, 227, 230, 251, 253, 259, 262, 274], "sure": [1, 5, 6, 7, 10, 11, 12, 15, 22, 25, 42, 56, 62, 92, 97, 101, 103, 104, 105, 111, 117, 121, 132, 136, 140, 141, 146, 148, 149, 154, 167, 173, 175, 186, 190, 207, 209, 221, 227, 236, 245, 246, 251, 260, 262, 271, 272, 274], "out": [1, 2, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 19, 23, 24, 25, 26, 27, 28, 35, 39, 40, 44, 45, 47, 48, 49, 53, 54, 56, 57, 63, 64, 65, 79, 81, 82, 83, 84, 85, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 107, 109, 112, 116, 119, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 146, 148, 149, 150, 154, 155, 156, 158, 164, 167, 170, 171, 172, 173, 175, 176, 177, 179, 183, 184, 186, 189, 190, 193, 195, 197, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 221, 222, 223, 224, 231, 236, 237, 239, 240, 241, 242, 244, 245, 250, 252, 258, 259, 262, 266, 272, 275, 276, 277, 280], "graph": [1, 6, 11, 15, 17, 23, 25, 26, 28, 51, 54, 67, 69, 72, 76, 77, 86, 89, 91, 94, 105, 107, 113, 116, 117, 120, 131, 137, 139, 143, 153, 154, 155, 156, 158, 176, 177, 183, 184, 186, 193, 194, 200, 201, 222, 223, 232, 234, 236, 237, 249, 260, 267, 271, 272, 276, 278, 279], "otherwis": [1, 4, 10, 11, 22, 26, 36, 41, 54, 60, 67, 79, 86, 89, 102, 112, 120, 121, 127, 132, 137, 143, 146, 149, 155, 156, 158, 164, 173, 174, 176, 187, 190, 216, 221, 222, 227, 261, 275, 280], "mix": [1, 10, 16, 65, 119, 158, 213, 236, 237, 250, 258, 266], "For": [1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 72, 79, 86, 87, 92, 95, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 121, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 149, 150, 153, 154, 155, 157, 158, 165, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 211, 213, 215, 216, 218, 222, 223, 225, 226, 228, 229, 230, 231, 232, 234, 235, 236, 237, 243, 245, 246, 247, 249, 251, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 278, 279, 280, 281], "hold_out_param": 1, "now": [1, 2, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 40, 41, 47, 48, 49, 51, 54, 55, 56, 57, 60, 79, 89, 92, 93, 94, 95, 101, 102, 103, 104, 106, 108, 111, 112, 114, 117, 120, 127, 131, 133, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 153, 154, 155, 156, 157, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 195, 199, 201, 206, 207, 211, 213, 215, 216, 218, 221, 226, 228, 229, 232, 248, 249, 259, 260, 261, 264, 272, 279], "reli": [1, 3, 4, 7, 10, 15, 26, 42, 54, 94, 111, 137, 157, 164, 167, 171, 173, 189, 201, 208, 210, 223, 227, 262], "miss": [1, 56, 121, 141, 146, 149, 183, 187, 195, 207, 246, 261, 263, 280], "glue": [1, 177], "cost": [1, 6, 15, 54, 104, 106, 119, 132, 133, 136, 137, 141, 161, 183, 189, 228, 248, 262, 275, 276], "deliv": [1, 223, 236, 274], "most": [1, 2, 5, 6, 12, 15, 19, 25, 26, 28, 35, 39, 47, 54, 56, 57, 79, 92, 94, 95, 97, 99, 102, 106, 108, 109, 112, 119, 120, 121, 127, 130, 132, 136, 137, 138, 140, 142, 143, 148, 154, 155, 157, 158, 164, 167, 172, 173, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 193, 208, 209, 210, 216, 228, 236, 237, 245, 252, 259, 261, 262, 267, 271, 275, 277, 280], "first": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 45, 48, 49, 54, 55, 56, 57, 58, 60, 65, 72, 73, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 106, 108, 109, 111, 112, 117, 119, 120, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 161, 164, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 179, 183, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 201, 206, 208, 209, 211, 216, 219, 221, 227, 228, 229, 231, 232, 235, 237, 246, 247, 249, 251, 252, 259, 262, 267, 272, 274, 275, 276, 277, 280], "taken": [1, 7, 10, 15, 22, 25, 28, 86, 87, 99, 149, 164, 173, 186, 189, 199, 213, 253, 276], "care": [1, 4, 6, 15, 24, 79, 92, 94, 104, 143, 148, 167, 173, 177, 193, 206, 228, 247, 248, 261], "condit": [1, 15, 54, 60, 102, 109, 113, 132, 148, 165, 167, 187, 189, 215, 218, 232], "remaind": [1, 97, 152], "cheetah": 1, "goal": [1, 7, 15, 16, 48, 54, 57, 65, 79, 89, 104, 137, 138, 148, 149, 154, 173, 175, 177, 197, 206, 237], "half": [1, 10, 19, 127, 158, 169, 216, 246, 281], "fast": [1, 6, 7, 19, 21, 24, 54, 94, 112, 132, 136, 146, 161, 167, 173, 178, 186, 190, 193, 197, 199, 214, 216, 261], "dm_control": 1, "gym": [1, 15, 131, 149, 157, 173, 174, 175, 177, 193], "env": [1, 21, 135, 145, 148, 149, 173, 174, 175, 177, 195, 197, 222, 247, 261, 277], "gymenv": [1, 173], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 10, 19, 22, 28, 35, 44, 47, 67, 68, 86, 92, 94, 102, 108, 111, 112, 113, 120, 133, 136, 138, 148, 150, 152, 154, 155, 164, 171, 174, 183, 189, 197, 200, 207, 209, 211, 216, 222, 228, 229, 234, 243, 249, 252, 262, 267, 271, 272, 274, 277, 280], "disabl": [1, 12, 16, 103, 132, 133, 141, 157, 161, 172, 176, 178, 183, 187, 199, 206, 207, 208, 209, 215, 222, 229, 246, 271, 280], "render": [1, 7, 86, 95, 101, 157, 167, 173], "easier": [1, 19, 21, 26, 27, 55, 56, 105, 112, 132, 138, 155, 164, 175, 179, 184, 199, 206, 209, 216, 221, 229, 232, 247, 261, 274], "than": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 19, 22, 26, 28, 48, 53, 54, 55, 57, 58, 65, 71, 73, 79, 86, 89, 94, 97, 99, 102, 104, 105, 106, 108, 111, 112, 114, 120, 121, 127, 131, 132, 133, 135, 138, 140, 142, 145, 146, 148, 150, 155, 156, 157, 161, 164, 165, 166, 167, 172, 173, 174, 175, 183, 184, 186, 187, 190, 192, 193, 197, 199, 206, 211, 216, 219, 222, 223, 247, 251, 262, 263, 266, 271, 277, 280], "imag": [1, 22, 26, 36, 37, 39, 45, 47, 51, 54, 56, 57, 62, 79, 86, 92, 95, 97, 99, 102, 103, 104, 112, 131, 136, 141, 150, 157, 158, 164, 166, 174, 181, 183, 184, 190, 192, 211, 213, 222, 223, 231, 245, 249, 260, 263, 264, 266, 279], "focu": [1, 4, 7, 11, 21, 95, 104, 106, 116, 133, 136, 137, 173, 175, 177, 179, 189, 199, 207, 237], "pass": [1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 22, 25, 26, 28, 35, 36, 37, 40, 41, 42, 47, 48, 54, 56, 57, 58, 61, 67, 68, 69, 76, 77, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 112, 113, 120, 121, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 148, 149, 150, 152, 154, 157, 158, 161, 165, 166, 169, 171, 173, 174, 175, 176, 177, 179, 180, 181, 183, 186, 187, 189, 190, 193, 194, 195, 199, 206, 209, 218, 226, 227, 229, 230, 232, 234, 235, 246, 247, 251, 252, 253, 259, 262, 265, 281], "pixel": [1, 23, 36, 45, 48, 79, 99, 102, 104, 149, 158, 181, 186, 277], "from_pixel": 1, "true": [1, 2, 4, 5, 6, 7, 11, 12, 13, 16, 17, 22, 25, 26, 27, 35, 37, 40, 42, 47, 51, 54, 56, 67, 68, 79, 86, 92, 94, 97, 102, 103, 108, 113, 114, 116, 119, 120, 121, 127, 132, 133, 134, 135, 136, 138, 141, 142, 143, 146, 148, 149, 152, 155, 158, 165, 172, 175, 176, 177, 178, 181, 183, 184, 186, 187, 189, 192, 193, 194, 195, 197, 200, 207, 208, 209, 210, 213, 215, 216, 222, 227, 228, 229, 234, 236, 237, 252, 259, 265, 267, 270, 274, 279, 280, 281], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 10, 18, 19, 26, 51, 56, 60, 95, 101, 103, 104, 105, 113, 132, 133, 138, 139, 140, 148, 149, 174, 175, 176, 177, 179, 181, 184, 186, 192, 216, 225, 226, 252, 277], "either": [1, 2, 4, 5, 6, 7, 10, 17, 22, 26, 48, 54, 77, 92, 103, 104, 112, 114, 116, 121, 127, 133, 136, 146, 149, 158, 171, 174, 175, 176, 183, 187, 189, 193, 209, 211, 215, 216, 219, 232, 236, 237, 243, 246, 252, 259, 262, 274, 279], "backend": [1, 6, 7, 12, 15, 21, 23, 27, 28, 58, 60, 130, 131, 138, 141, 145, 146, 149, 158, 172, 173, 180, 183, 187, 189, 190, 195, 201, 210, 214, 215, 223, 227, 235, 243, 246, 266, 273, 277], "consid": [1, 4, 7, 11, 12, 15, 26, 35, 42, 54, 72, 79, 86, 120, 132, 134, 143, 146, 148, 158, 161, 164, 165, 167, 170, 175, 179, 183, 187, 189, 190, 192, 197, 206, 207, 208, 210, 221, 228, 251, 252, 253, 272], "abov": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 23, 25, 26, 47, 48, 54, 56, 57, 69, 71, 72, 79, 86, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 120, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 152, 155, 156, 157, 158, 161, 164, 165, 166, 167, 169, 171, 173, 175, 176, 177, 178, 183, 186, 187, 189, 190, 192, 194, 195, 197, 199, 201, 206, 207, 208, 209, 210, 215, 228, 229, 230, 231, 232, 235, 236, 237, 243, 245, 247, 251, 252, 259, 260, 271, 277, 280], "dm": [1, 140], "want": [1, 2, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 22, 24, 25, 26, 27, 35, 36, 37, 40, 42, 47, 48, 51, 54, 56, 57, 65, 67, 68, 71, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 127, 135, 136, 137, 138, 148, 149, 150, 152, 154, 156, 158, 161, 165, 167, 169, 171, 172, 173, 176, 178, 179, 181, 186, 187, 189, 190, 192, 193, 206, 208, 213, 214, 221, 229, 230, 237, 243, 246, 247, 251, 259, 261, 263, 274, 276], "modifi": [1, 3, 7, 11, 12, 15, 22, 41, 45, 47, 48, 57, 79, 104, 105, 114, 136, 139, 148, 154, 155, 170, 173, 175, 179, 189, 193, 194, 195, 219, 259, 275, 277], "represent": [1, 5, 11, 15, 26, 28, 47, 57, 89, 95, 99, 101, 104, 106, 109, 111, 113, 114, 116, 131, 138, 153, 154, 157, 179, 183, 184, 189, 190, 193, 211, 214, 219, 232, 247, 259, 261, 276, 279], "more": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 19, 22, 23, 24, 25, 28, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 61, 65, 71, 79, 89, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 119, 120, 121, 127, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 154, 157, 161, 164, 165, 167, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 184, 186, 187, 189, 190, 192, 193, 194, 197, 199, 206, 207, 208, 209, 211, 213, 214, 216, 219, 221, 222, 223, 227, 229, 230, 231, 232, 235, 236, 237, 243, 245, 251, 259, 261, 262, 267, 272, 274, 275, 276, 277, 278, 279, 280, 281], "friendli": [1, 5, 16, 26, 232, 246], "append": [1, 10, 15, 18, 21, 22, 24, 54, 79, 102, 119, 121, 133, 140, 148, 171, 173, 175, 176, 177, 179, 184, 216, 232, 234, 280], "special": [1, 11, 21, 25, 26, 44, 53, 79, 97, 99, 106, 108, 111, 112, 117, 137, 149, 158, 170, 171, 183, 186, 211, 213, 218, 229, 259, 262, 277], "torchr": 1, "transformedenv": [1, 15, 173], "common": [1, 5, 7, 10, 11, 15, 17, 19, 22, 40, 41, 48, 54, 56, 65, 86, 97, 102, 104, 106, 108, 111, 113, 121, 127, 131, 136, 146, 154, 157, 165, 167, 171, 172, 173, 178, 186, 189, 190, 192, 208, 211, 216, 232, 237, 247, 248, 261, 262, 263, 266, 267, 273], "rescal": [1, 56, 192, 199], "heurist": [1, 86, 197, 235, 274], "multipli": [1, 4, 6, 13, 22, 53, 54, 94, 95, 97, 102, 112, 153, 179, 261, 273], "5": [1, 2, 3, 6, 7, 12, 19, 26, 39, 40, 49, 54, 57, 69, 79, 86, 89, 92, 97, 99, 101, 103, 106, 109, 111, 116, 119, 120, 121, 132, 133, 140, 142, 146, 148, 155, 158, 172, 175, 176, 177, 181, 186, 189, 190, 192, 193, 197, 201, 215, 216, 218, 221, 223, 225, 231, 234, 235, 236, 237, 243, 260, 267, 270, 279], "interfac": [1, 4, 5, 6, 7, 15, 16, 23, 25, 26, 28, 54, 102, 112, 138, 145, 148, 173, 186, 190, 200, 236, 243, 277], "between": [1, 6, 7, 10, 12, 13, 15, 18, 19, 22, 24, 25, 26, 36, 44, 51, 53, 54, 69, 77, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 105, 106, 109, 111, 112, 120, 131, 132, 134, 136, 138, 148, 149, 154, 158, 161, 167, 169, 171, 174, 176, 177, 178, 179, 184, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 200, 206, 207, 209, 213, 214, 216, 228, 230, 246, 247, 248, 252, 262, 267, 277, 278, 281], "simul": [1, 19, 21, 22, 99, 141, 173, 216, 231], "work": [1, 2, 4, 5, 6, 7, 8, 13, 15, 17, 19, 21, 23, 24, 25, 26, 28, 39, 40, 47, 54, 55, 56, 57, 60, 61, 65, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 111, 112, 113, 116, 131, 137, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 156, 164, 165, 166, 167, 170, 171, 172, 173, 175, 177, 178, 179, 183, 186, 189, 190, 192, 193, 197, 199, 206, 207, 208, 209, 216, 218, 219, 221, 222, 223, 228, 231, 235, 236, 246, 247, 252, 259, 261, 262, 267, 270, 271, 274, 277], "doubl": [1, 2, 4, 6, 7, 26, 40, 94, 101, 112, 119, 131, 142, 149, 157, 166, 173, 184, 235, 246], "precis": [1, 5, 10, 11, 16, 23, 65, 137, 142, 143, 158, 167, 173, 184, 190, 213, 235, 236, 237, 250, 258, 266, 267], "number": [1, 4, 6, 7, 12, 13, 16, 21, 22, 24, 26, 37, 40, 45, 48, 56, 57, 58, 60, 69, 86, 89, 92, 94, 97, 99, 104, 106, 108, 111, 112, 119, 120, 121, 132, 133, 135, 136, 137, 138, 139, 145, 146, 148, 149, 150, 152, 155, 156, 161, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 183, 186, 187, 190, 192, 197, 199, 209, 210, 211, 221, 222, 225, 229, 235, 247, 249, 252, 261, 262, 272, 278, 280], "presum": 1, "singl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 16, 19, 21, 23, 24, 25, 26, 41, 44, 47, 51, 56, 58, 59, 60, 61, 65, 89, 92, 94, 95, 99, 101, 102, 103, 104, 106, 112, 131, 132, 133, 134, 136, 139, 141, 142, 143, 144, 145, 146, 148, 149, 156, 157, 161, 166, 167, 169, 173, 174, 175, 176, 177, 179, 183, 186, 187, 189, 190, 193, 194, 195, 197, 199, 211, 216, 221, 229, 235, 247, 261, 262, 277, 280], "ones": [1, 2, 4, 5, 7, 12, 15, 17, 22, 24, 99, 102, 104, 148, 150, 154, 165, 166, 167, 169, 170, 173, 174, 183, 189, 193, 194, 207, 218, 232, 236, 261, 277], "goe": [1, 5, 6, 26, 56, 102, 105, 106, 131, 135, 143, 156, 170, 173, 176, 190], "wai": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 23, 24, 25, 28, 35, 39, 41, 44, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 71, 76, 79, 86, 92, 94, 95, 97, 98, 102, 105, 106, 108, 111, 112, 114, 116, 117, 121, 130, 132, 136, 137, 138, 139, 143, 145, 146, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 169, 171, 173, 175, 176, 178, 181, 184, 189, 190, 192, 193, 194, 195, 199, 207, 208, 209, 211, 214, 218, 229, 232, 245, 248, 252, 253, 259, 262, 274], "repres": [1, 4, 6, 11, 13, 14, 21, 23, 24, 28, 36, 47, 54, 56, 57, 65, 67, 79, 86, 89, 94, 95, 97, 99, 103, 104, 111, 113, 114, 116, 119, 120, 132, 133, 134, 136, 138, 139, 141, 149, 152, 154, 157, 158, 173, 174, 177, 179, 186, 189, 190, 192, 193, 197, 206, 211, 247, 249, 259, 261], "doubletofloat": [1, 173], "in_kei": [1, 15, 149, 173], "list": [1, 4, 6, 7, 10, 12, 13, 15, 16, 18, 22, 23, 24, 27, 37, 41, 44, 48, 51, 53, 54, 55, 57, 72, 79, 92, 95, 99, 102, 108, 109, 111, 113, 114, 116, 117, 120, 137, 140, 148, 158, 165, 167, 172, 175, 176, 177, 179, 183, 184, 186, 187, 189, 190, 200, 208, 211, 213, 216, 222, 227, 231, 232, 234, 245, 247, 251, 252, 266, 271, 277, 280], "refer": [1, 4, 5, 6, 7, 8, 10, 14, 16, 19, 24, 25, 26, 27, 28, 35, 41, 65, 79, 86, 89, 94, 95, 102, 104, 106, 108, 109, 111, 113, 114, 116, 117, 119, 121, 132, 133, 134, 136, 137, 140, 141, 145, 146, 148, 155, 164, 167, 171, 173, 175, 176, 177, 183, 186, 189, 190, 192, 193, 197, 201, 206, 209, 213, 215, 216, 235, 237, 245, 246, 247, 249, 251, 252, 259, 262, 272, 274, 277, 279, 280], "float": [1, 4, 6, 7, 10, 12, 22, 26, 40, 56, 79, 97, 102, 108, 111, 119, 132, 133, 136, 138, 148, 158, 170, 171, 175, 177, 181, 189, 190, 192, 194, 197, 199, 200, 208, 209, 210, 222, 232, 234, 235, 237, 246, 252, 259], "while": [1, 2, 3, 5, 6, 7, 12, 13, 14, 15, 19, 22, 24, 26, 37, 40, 54, 57, 60, 86, 95, 102, 113, 114, 119, 130, 131, 133, 134, 135, 137, 138, 141, 144, 146, 148, 149, 155, 156, 158, 164, 167, 171, 172, 173, 176, 177, 178, 179, 181, 187, 189, 190, 193, 194, 197, 199, 206, 207, 208, 209, 210, 211, 213, 216, 228, 246, 247, 251, 252, 259, 267, 271, 274, 277], "in_keys_inv": [1, 15], "befor": [1, 3, 4, 6, 7, 10, 11, 12, 13, 15, 18, 22, 23, 25, 26, 28, 35, 40, 42, 47, 48, 49, 51, 54, 56, 57, 60, 65, 79, 89, 94, 95, 99, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 119, 120, 121, 127, 131, 133, 134, 136, 138, 139, 141, 146, 148, 149, 152, 155, 157, 162, 164, 165, 167, 169, 171, 172, 173, 175, 176, 177, 179, 183, 184, 187, 189, 190, 192, 194, 197, 206, 207, 209, 215, 228, 231, 246, 247, 249, 251, 260, 262, 263, 264, 265, 267, 271, 272, 274, 275, 280, 281], "concaten": [1, 15, 44, 53, 54, 108, 109, 136, 140, 174], "cattensor": 1, "leav": [1, 10, 17, 19, 35, 47, 54, 56, 58, 89, 94, 138, 164, 165, 172, 216, 235, 259], "constant": [1, 2, 7, 26, 28, 44, 53, 86, 92, 94, 102, 106, 114, 135, 149, 165, 174, 184, 187, 189, 210, 216, 234, 262], "significantli": [1, 22, 109, 130, 136, 142, 167, 187, 199, 213, 219, 253, 272, 280], "speed": [1, 6, 7, 11, 15, 22, 23, 35, 37, 40, 53, 54, 89, 94, 97, 98, 104, 112, 130, 131, 133, 134, 136, 139, 144, 149, 150, 155, 158, 167, 172, 173, 175, 178, 187, 193, 199, 200, 213, 214, 219, 223, 227, 228, 232, 247, 260, 262, 266, 276, 277, 280], "throughput": [1, 133, 167, 262, 280], "choos": [1, 10, 11, 13, 16, 54, 57, 60, 65, 69, 92, 95, 106, 116, 120, 121, 135, 136, 140, 146, 148, 157, 165, 172, 173, 174, 179, 183, 186, 190, 192, 195, 199, 201, 227, 243, 246, 252, 267], "whether": [1, 7, 10, 11, 12, 15, 25, 54, 57, 94, 95, 97, 101, 102, 104, 112, 114, 121, 143, 148, 154, 157, 164, 167, 173, 175, 183, 184, 186, 189, 194, 209, 247, 252, 262, 263], "individu": [1, 6, 7, 13, 24, 28, 36, 54, 89, 94, 95, 99, 120, 134, 136, 138, 142, 166, 167, 171, 176, 179, 184, 187, 189, 190, 193, 194, 243, 246, 247, 262, 272], "approach": [1, 4, 5, 6, 7, 8, 25, 26, 28, 42, 61, 95, 112, 116, 121, 135, 139, 144, 165, 166, 167, 173, 174, 176, 179, 187, 189, 192, 197, 206, 209, 210, 213, 221, 237, 247, 259, 266, 267], "parallelenv": [1, 173], "num_work": [1, 48, 56, 92, 132, 133, 181, 183, 184, 262], "4": [1, 2, 3, 4, 6, 7, 10, 13, 17, 18, 20, 24, 26, 27, 39, 40, 49, 56, 58, 59, 60, 67, 68, 69, 79, 92, 95, 97, 99, 101, 102, 103, 105, 106, 108, 111, 112, 120, 131, 132, 133, 135, 141, 142, 144, 145, 148, 149, 155, 157, 158, 164, 169, 171, 174, 175, 176, 177, 181, 186, 187, 189, 190, 192, 193, 195, 197, 199, 201, 209, 214, 223, 228, 231, 235, 260, 267, 271, 272, 277, 280], "leverag": [1, 7, 54, 79, 104, 117, 121, 131, 133, 136, 146, 148, 156, 192, 200, 210, 214, 215, 230, 231, 232, 234, 262, 263, 266, 276, 280], "vector": [1, 2, 5, 6, 7, 13, 15, 25, 26, 35, 54, 57, 86, 94, 95, 99, 101, 102, 104, 106, 108, 109, 111, 112, 139, 140, 141, 149, 152, 166, 170, 179, 190, 200, 210, 221, 223, 235, 236, 262, 274, 279], "capabl": [1, 3, 12, 16, 19, 54, 79, 136, 158, 167, 178, 183, 216, 223, 225, 226, 234, 246, 262], "pytorch": [1, 2, 4, 10, 12, 15, 17, 19, 20, 21, 24, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 49, 53, 54, 56, 57, 58, 60, 61, 63, 64, 66, 70, 74, 75, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 94, 95, 104, 105, 110, 112, 113, 115, 116, 121, 122, 124, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 161, 162, 164, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 189, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 231, 232, 234, 239, 241, 242, 245, 246, 247, 248, 251, 254, 255, 256, 257, 258, 259, 261, 267, 271, 272, 273, 274, 276, 277, 278, 279, 280, 281], "adopt": [1, 23, 27, 65, 164, 170, 176, 215, 237], "frame_skip": [1, 173], "frame": [1, 7, 149, 157, 172, 173, 183, 197, 277], "count": [1, 7, 12, 22, 25, 40, 48, 54, 86, 106, 148, 149, 173, 177, 179, 183, 186, 230], "frames_per_batch": [1, 173], "total_fram": [1, 173], "adjust": [1, 15, 22, 35, 40, 41, 47, 57, 79, 94, 97, 103, 136, 138, 139, 161, 175, 262], "total": [1, 6, 12, 13, 14, 15, 17, 18, 19, 20, 23, 24, 27, 28, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 87, 89, 90, 92, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 121, 122, 124, 127, 133, 135, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 172, 173, 174, 176, 178, 179, 180, 181, 183, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 217, 219, 221, 226, 227, 234, 235, 237, 245, 246, 247, 248, 249, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 273, 274, 275, 276, 278, 280], "rais": [1, 10, 12, 17, 22, 79, 113, 135, 136, 137, 140, 155, 158, 172, 173, 187, 189, 228, 232, 262, 275, 277], "skip": [1, 5, 6, 11, 15, 19, 22, 26, 47, 105, 121, 143, 152, 157, 175, 177, 183, 187, 189, 193, 214, 215, 216, 227, 247, 252, 265, 280], "unchang": [1, 10, 87, 94], "seem": [1, 48, 57, 137, 139, 149, 167, 169, 190, 247], "like": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 21, 23, 24, 25, 26, 28, 36, 37, 40, 41, 44, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 65, 72, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 124, 127, 130, 131, 132, 136, 137, 138, 140, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 158, 161, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 178, 179, 183, 184, 186, 189, 190, 192, 193, 194, 200, 207, 208, 209, 213, 214, 215, 216, 221, 222, 223, 229, 230, 231, 232, 235, 236, 237, 243, 245, 246, 247, 248, 249, 252, 261, 262, 271, 272, 273, 274, 275, 277, 279, 280], "cheat": [1, 102, 131, 179], "compar": [1, 6, 11, 16, 19, 22, 23, 26, 40, 48, 87, 95, 102, 104, 109, 112, 117, 127, 132, 134, 135, 136, 138, 148, 154, 155, 156, 158, 161, 164, 166, 167, 171, 173, 174, 175, 177, 179, 183, 186, 187, 189, 193, 195, 198, 199, 200, 206, 214, 216, 223, 227, 228, 234, 235, 236, 251, 260, 261, 262, 266, 275, 276, 280], "dataset": [1, 7, 19, 27, 35, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 54, 57, 58, 60, 62, 79, 95, 99, 104, 106, 122, 127, 130, 131, 132, 133, 138, 139, 140, 144, 148, 150, 166, 167, 172, 176, 178, 179, 181, 183, 184, 186, 190, 213, 216, 236, 237, 238, 249, 262, 266, 270, 277], "10m": 1, "element": [1, 6, 7, 13, 19, 22, 41, 44, 53, 54, 79, 94, 95, 99, 102, 106, 108, 109, 111, 131, 137, 148, 155, 161, 165, 173, 186, 189, 192, 207, 208, 209, 211, 216, 247, 249, 262], "2": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 36, 39, 40, 47, 54, 56, 57, 58, 60, 67, 68, 72, 73, 79, 92, 94, 95, 97, 102, 103, 104, 105, 106, 108, 111, 113, 116, 117, 120, 121, 124, 127, 131, 132, 133, 134, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 155, 156, 158, 162, 164, 166, 171, 172, 173, 174, 175, 176, 177, 178, 181, 186, 187, 189, 190, 193, 195, 197, 198, 199, 200, 201, 206, 211, 214, 215, 218, 222, 223, 225, 226, 227, 230, 231, 232, 234, 235, 236, 237, 246, 248, 251, 259, 262, 267, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "anoth": [1, 4, 5, 6, 10, 12, 15, 23, 24, 26, 28, 35, 44, 47, 53, 54, 57, 67, 79, 89, 97, 99, 102, 103, 105, 109, 112, 119, 120, 121, 131, 140, 141, 142, 143, 145, 148, 149, 152, 153, 165, 167, 171, 173, 175, 176, 177, 178, 179, 187, 189, 190, 192, 194, 199, 222, 245, 247, 252, 262, 263, 280], "actual": [1, 3, 6, 7, 10, 12, 14, 15, 16, 22, 24, 25, 26, 28, 35, 42, 54, 56, 57, 79, 89, 97, 104, 105, 108, 111, 117, 131, 134, 137, 138, 139, 142, 146, 148, 153, 154, 164, 167, 173, 179, 183, 184, 187, 189, 190, 198, 199, 206, 208, 221, 247, 273], "ratio": [1, 56, 86, 104, 155, 167, 173, 183, 192], "interact": [1, 6, 7, 15, 54, 56, 95, 101, 102, 138, 141, 143, 157, 173, 176, 181, 184, 187, 189, 190, 230, 274], "nutshel": [1, 208], "cautiou": 1, "about": [1, 4, 5, 6, 7, 10, 11, 15, 16, 19, 22, 23, 24, 25, 26, 39, 40, 41, 44, 47, 54, 57, 58, 59, 60, 62, 76, 77, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 131, 133, 135, 138, 139, 140, 143, 145, 146, 148, 150, 153, 154, 155, 156, 164, 166, 167, 172, 173, 174, 175, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 197, 198, 199, 207, 208, 209, 214, 215, 216, 219, 228, 230, 231, 232, 250, 251, 258, 259, 261, 264, 266, 272, 276, 277], "deal": [1, 6, 48, 54, 56, 57, 97, 104, 112, 120, 121, 133, 156, 167, 173, 189, 190, 230, 237, 264], "lead": [1, 4, 6, 7, 15, 17, 54, 57, 79, 86, 92, 104, 112, 139, 141, 143, 149, 167, 189, 208, 221, 228, 259, 262, 267, 280], "bias": [1, 36, 47, 99, 104, 121, 178, 193, 259, 264, 265], "comparison": [1, 19, 24, 87, 95, 102, 103, 104, 105, 132, 155, 156, 195, 199, 206, 208, 211, 213, 216, 261], "scale": [1, 7, 22, 36, 45, 56, 61, 79, 99, 101, 104, 114, 130, 131, 132, 133, 135, 146, 148, 149, 157, 169, 173, 174, 180, 181, 190, 194, 195, 199, 230, 231, 237, 246, 262, 267, 274, 279], "help": [1, 4, 6, 10, 11, 16, 19, 21, 22, 25, 26, 35, 36, 47, 54, 57, 72, 86, 92, 95, 104, 105, 108, 109, 111, 112, 121, 130, 131, 132, 133, 138, 145, 146, 149, 150, 155, 156, 161, 164, 170, 173, 174, 175, 176, 177, 178, 179, 186, 187, 189, 190, 197, 199, 207, 208, 209, 211, 213, 215, 216, 221, 225, 227, 228, 229, 231, 232, 234, 237, 243, 245, 246, 247, 249, 260, 262, 263, 266, 272, 274, 275, 278, 280], "signal": [1, 47, 95, 97, 173, 175, 252, 261], "magnitud": [1, 19, 94, 171, 190, 216, 246], "truncat": [1, 102, 119, 155, 173, 216], "A": [1, 6, 7, 10, 12, 13, 15, 19, 24, 25, 28, 35, 36, 37, 41, 44, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 71, 72, 73, 76, 77, 79, 86, 87, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 113, 120, 121, 130, 131, 133, 137, 138, 139, 140, 143, 144, 148, 150, 154, 158, 164, 165, 166, 173, 174, 175, 176, 178, 179, 180, 181, 184, 186, 187, 189, 190, 193, 197, 198, 210, 211, 215, 216, 229, 235, 236, 247, 251, 259, 262, 264, 272, 274, 277, 279, 280], "thousand": [1, 111, 130, 136, 139, 149, 179, 186], "500": [1, 7, 27, 56, 140, 158, 169, 174, 177, 181, 247], "good": [1, 2, 5, 6, 7, 23, 24, 48, 55, 57, 97, 101, 102, 104, 111, 114, 131, 132, 138, 148, 149, 155, 161, 172, 174, 178, 180, 184, 186, 189, 190, 192, 193, 210, 243, 247, 262, 267, 280], "statist": [1, 57, 97, 103, 131, 142, 153, 154, 171, 173, 179, 183, 184, 186, 237, 247], "arbitrari": [1, 6, 10, 15, 17, 35, 77, 95, 104, 109, 133, 150, 157, 166, 184, 187, 193, 252, 253], "random": [1, 7, 15, 18, 22, 23, 24, 28, 44, 47, 48, 49, 51, 53, 56, 57, 67, 68, 69, 76, 77, 79, 95, 97, 101, 108, 109, 112, 113, 114, 119, 120, 127, 132, 133, 138, 140, 141, 146, 148, 150, 157, 161, 164, 165, 171, 173, 174, 175, 177, 179, 184, 187, 227, 234, 247, 249, 253, 262], "standard": [1, 6, 10, 23, 26, 28, 44, 48, 53, 57, 79, 86, 92, 95, 97, 104, 105, 106, 112, 114, 116, 117, 148, 172, 181, 187, 189, 190, 192, 199, 211, 249, 262], "deviat": [1, 79, 86, 97, 104], "observationnorm": [1, 173], "init_stat": 1, "purpos": [1, 6, 23, 24, 25, 62, 79, 89, 94, 99, 103, 120, 132, 137, 138, 140, 148, 149, 153, 154, 155, 164, 169, 172, 173, 176, 177, 183, 187, 190, 197, 199, 207, 210, 229, 237, 259, 262, 267, 271], "get": [1, 2, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 37, 39, 47, 48, 49, 54, 55, 56, 57, 60, 61, 65, 79, 87, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 119, 120, 121, 127, 130, 131, 133, 135, 136, 138, 139, 140, 141, 148, 150, 153, 154, 156, 164, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 179, 181, 183, 184, 186, 189, 190, 192, 197, 198, 199, 201, 206, 213, 215, 216, 217, 222, 223, 227, 228, 232, 235, 243, 247, 252, 262, 265, 266, 267, 277, 279, 280, 281], "summari": [1, 86, 111, 138, 149, 167, 173, 183, 189, 260, 261], "dummi": [1, 4, 10, 17, 23, 89, 97, 103, 146, 150, 156, 166, 169, 170, 190, 213, 229, 237, 277, 279], "over": [1, 4, 5, 6, 7, 11, 12, 15, 17, 19, 21, 22, 23, 25, 26, 36, 37, 40, 41, 44, 48, 51, 53, 54, 55, 56, 57, 58, 60, 79, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 112, 119, 120, 131, 132, 133, 134, 135, 136, 139, 141, 145, 146, 148, 150, 153, 154, 155, 156, 157, 158, 161, 166, 171, 173, 174, 175, 176, 177, 178, 179, 183, 184, 186, 187, 189, 190, 192, 193, 195, 199, 210, 216, 221, 235, 246, 262, 265, 275, 276], "earlier": [1, 5, 6, 7, 25, 26, 79, 97, 99, 102, 105, 106, 109, 112, 132, 134, 136, 149, 164, 167, 173, 179, 189, 246, 247], "turn": [1, 5, 6, 7, 10, 15, 16, 22, 23, 26, 28, 45, 54, 95, 99, 102, 119, 140, 149, 156, 164, 165, 167, 171, 175, 179, 190, 200, 207, 208, 210, 232, 279], "seen": [1, 11, 12, 21, 22, 48, 51, 54, 56, 99, 102, 104, 109, 111, 112, 119, 149, 166, 176, 187, 189, 190, 210, 247, 274], "requir": [1, 2, 4, 5, 6, 7, 10, 11, 13, 15, 16, 17, 21, 22, 23, 25, 26, 27, 28, 39, 45, 47, 54, 55, 56, 57, 60, 65, 87, 89, 92, 94, 98, 103, 111, 112, 116, 117, 132, 136, 138, 140, 142, 143, 145, 146, 148, 149, 150, 152, 153, 156, 161, 164, 165, 166, 167, 169, 172, 173, 175, 176, 177, 178, 179, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 201, 207, 208, 209, 213, 218, 221, 223, 225, 226, 228, 229, 231, 235, 236, 237, 246, 248, 249, 251, 252, 259, 261, 262, 267, 271, 272, 273, 274, 275, 278], "select": [1, 4, 6, 11, 26, 55, 86, 92, 101, 104, 112, 114, 158, 171, 174, 175, 177, 183, 184, 187, 189, 197, 201, 208, 210, 214, 216, 222, 235, 252, 262, 272, 274], "recal": [1, 7, 26, 57, 94, 102, 105, 111, 146, 173, 184, 207, 208, 209, 259, 261], "wrap": [1, 4, 6, 7, 11, 18, 25, 28, 37, 41, 49, 92, 97, 106, 108, 109, 114, 119, 132, 134, 137, 142, 146, 149, 153, 157, 167, 173, 176, 177, 186, 189, 190, 198, 225, 226, 229, 230, 243, 246, 252, 281], "flow": [1, 5, 6, 15, 24, 26, 28, 35, 47, 57, 70, 74, 89, 101, 104, 114, 115, 116, 117, 131, 134, 173, 174, 183, 187, 198, 213, 262, 266], "handl": [1, 6, 10, 11, 17, 26, 54, 57, 58, 89, 99, 102, 112, 113, 117, 131, 132, 139, 150, 162, 166, 167, 169, 171, 172, 173, 176, 177, 178, 186, 187, 189, 190, 206, 208, 211, 221, 223, 228, 229, 236, 245, 251, 252, 261, 277, 280], "specifi": [1, 4, 5, 6, 7, 10, 12, 17, 19, 22, 23, 25, 26, 27, 37, 41, 56, 57, 86, 92, 94, 95, 97, 99, 102, 103, 108, 113, 120, 132, 133, 134, 135, 136, 138, 139, 143, 149, 150, 152, 170, 171, 173, 176, 177, 181, 183, 186, 189, 194, 195, 206, 207, 208, 209, 211, 213, 214, 216, 221, 222, 227, 237, 251, 252, 260, 262, 263, 271, 274, 276, 277, 279, 280], "scenario": [1, 5, 7, 15, 113, 114, 116, 117, 121, 127, 137, 167, 174, 177, 189, 197, 210, 235, 259, 263, 280], "tensordictsequenti": [1, 149], "valueoper": 1, "automat": [1, 2, 4, 6, 7, 10, 11, 16, 25, 28, 36, 38, 39, 41, 44, 47, 49, 50, 51, 53, 58, 62, 65, 101, 103, 105, 112, 120, 124, 131, 132, 133, 134, 136, 137, 138, 143, 153, 155, 158, 167, 169, 173, 174, 177, 180, 181, 183, 186, 189, 190, 195, 197, 215, 223, 227, 228, 229, 232, 235, 236, 237, 243, 248, 250, 251, 252, 258, 261, 262, 266, 274], "out_kei": [1, 15, 149, 173], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 5, 6, 7, 8, 10, 20, 25, 26, 35, 51, 94, 95, 97, 99, 106, 131, 139, 148, 149, 173, 178, 184, 187, 189, 192, 232, 237, 245, 247, 249, 265, 272], "present": [1, 7, 10, 21, 25, 40, 86, 87, 104, 113, 165, 170, 171, 174, 175, 177, 186, 187, 189, 192, 211, 262, 281], "origin": [1, 6, 7, 10, 13, 15, 19, 22, 23, 26, 35, 54, 57, 79, 92, 95, 102, 104, 109, 113, 114, 134, 136, 137, 139, 140, 161, 162, 165, 166, 167, 171, 174, 186, 187, 189, 194, 199, 200, 209, 213, 216, 234, 236, 237, 243, 277], "paper": [1, 6, 13, 18, 19, 57, 79, 124, 133, 136, 173, 174, 176, 178, 179, 181, 190, 193, 211, 216], "found": [1, 4, 5, 6, 7, 11, 18, 25, 26, 28, 54, 55, 95, 104, 134, 138, 140, 146, 148, 149, 153, 154, 158, 167, 176, 177, 178, 186, 189, 211, 222, 236, 243, 262, 277], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 18, 22, 23, 24, 26, 48, 54, 56, 57, 58, 79, 89, 94, 95, 97, 104, 105, 106, 108, 109, 111, 112, 114, 127, 134, 135, 136, 138, 139, 140, 141, 143, 144, 148, 149, 153, 154, 164, 165, 167, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 184, 186, 187, 189, 190, 192, 193, 194, 199, 206, 207, 208, 223, 225, 227, 228, 229, 243, 247, 251, 252, 253, 265, 267, 275, 277, 281], "lazi": 1, "materi": [1, 132, 136, 156, 190, 193, 198, 206, 218, 253, 259], "abl": [1, 3, 4, 5, 6, 7, 15, 16, 19, 26, 35, 36, 54, 67, 79, 89, 97, 104, 105, 107, 111, 112, 120, 127, 138, 142, 143, 144, 145, 148, 149, 150, 155, 157, 158, 164, 166, 173, 176, 184, 187, 189, 190, 192, 193, 197, 208, 216, 223, 234, 249, 259, 265, 274, 277], "devic": [1, 3, 4, 7, 10, 11, 12, 15, 17, 18, 19, 21, 22, 23, 26, 28, 44, 47, 48, 49, 53, 54, 55, 57, 58, 60, 61, 65, 68, 77, 79, 92, 102, 104, 106, 114, 120, 130, 131, 132, 134, 136, 138, 139, 145, 146, 148, 149, 155, 158, 164, 167, 169, 171, 172, 173, 176, 177, 181, 183, 190, 192, 194, 195, 197, 198, 200, 201, 213, 215, 216, 218, 225, 226, 228, 229, 231, 234, 235, 236, 247, 250, 252, 253, 258, 259, 263, 265, 266, 272, 273, 274, 276, 277, 278, 281], "achiev": [1, 3, 4, 7, 15, 19, 22, 27, 35, 48, 54, 61, 86, 92, 104, 131, 134, 137, 142, 148, 149, 155, 164, 165, 167, 171, 173, 174, 183, 190, 193, 194, 198, 199, 216, 219, 227, 235, 262, 266, 274, 276, 280], "oper": [1, 5, 7, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 35, 36, 41, 47, 49, 51, 54, 56, 65, 67, 68, 77, 86, 87, 89, 97, 98, 102, 104, 105, 106, 111, 112, 113, 114, 115, 116, 119, 120, 131, 132, 134, 135, 136, 137, 139, 141, 143, 148, 149, 150, 152, 153, 155, 156, 158, 161, 166, 169, 170, 172, 173, 175, 179, 183, 184, 186, 187, 189, 190, 193, 199, 206, 207, 210, 213, 214, 216, 219, 221, 222, 229, 230, 232, 234, 235, 236, 243, 245, 246, 247, 249, 252, 253, 261, 265, 266, 272, 273, 274, 277, 280, 281], "practic": [1, 6, 7, 12, 23, 26, 40, 42, 51, 54, 56, 57, 94, 95, 97, 102, 104, 106, 112, 113, 120, 124, 127, 131, 136, 137, 144, 149, 155, 158, 165, 171, 173, 174, 189, 193, 206, 207, 211, 247, 248, 251, 262, 267, 276, 277, 280], "small": [1, 3, 6, 7, 19, 21, 23, 24, 26, 27, 28, 47, 48, 51, 62, 79, 94, 97, 99, 101, 102, 104, 106, 107, 109, 114, 120, 127, 132, 133, 135, 138, 139, 140, 142, 154, 164, 165, 167, 172, 173, 174, 177, 179, 181, 186, 190, 192, 197, 199, 206, 216, 235, 246, 247, 249, 262, 277, 278], "fake": [1, 7, 19, 22, 28, 51, 57, 164, 189, 211, 216], "spec": [1, 117, 149, 173, 177, 189, 194, 247], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 5, 13, 57, 91, 104, 134, 140, 155, 156, 157, 158, 161, 183, 186, 197], "ou": 1, "nois": [1, 7, 13, 57, 79, 230, 261], "reach": [1, 11, 19, 57, 65, 104, 139, 146, 148, 157, 158, 173, 177, 189, 216, 237, 247], "minimum": [1, 4, 86, 134, 173, 177, 208], "iter": [1, 3, 5, 7, 12, 13, 15, 27, 35, 36, 40, 41, 47, 48, 51, 57, 58, 60, 89, 92, 94, 95, 97, 99, 103, 105, 112, 114, 121, 138, 140, 141, 144, 146, 149, 153, 155, 173, 174, 175, 176, 177, 181, 183, 184, 187, 190, 192, 226, 243, 246, 260, 262, 265, 275, 277, 281], "reset": [1, 22, 40, 97, 102, 112, 127, 140, 149, 173, 174, 175, 177, 183, 187, 200, 237, 278], "develop": [1, 3, 4, 5, 6, 10, 11, 13, 16, 24, 25, 26, 27, 28, 86, 89, 95, 108, 112, 114, 116, 141, 148, 158, 170, 177, 183, 187, 193, 194, 199, 200, 201, 206, 209, 210, 219, 229, 230, 232, 234, 236, 237, 250, 262, 279], "tight": [1, 113, 114, 116, 117], "per": [1, 4, 6, 7, 10, 12, 22, 104, 111, 131, 133, 139, 140, 142, 146, 148, 149, 156, 158, 164, 169, 171, 177, 178, 179, 180, 183, 184, 186, 189, 190, 192, 195, 197, 198, 206, 221, 223, 227, 228, 229, 232, 237, 247, 251, 261, 271, 280, 281], "sync": [1, 11, 12, 18, 60, 131, 132, 133, 134, 135, 157, 190], "natur": [1, 6, 7, 19, 21, 26, 27, 28, 49, 79, 99, 104, 112, 138, 139, 149, 167, 176, 186, 208, 211, 216, 223], "resourc": [1, 58, 79, 92, 114, 116, 132, 146, 148, 164, 173, 183, 186, 197, 232, 234, 247, 262, 267, 270, 280], "alloc": [1, 7, 21, 24, 25, 26, 44, 53, 60, 102, 142, 148, 164, 167, 183, 189, 190, 211, 218, 229, 251, 252, 281], "gpu": [1, 3, 5, 13, 19, 21, 22, 23, 44, 47, 51, 53, 54, 55, 57, 58, 59, 61, 62, 65, 68, 77, 86, 87, 97, 98, 102, 103, 104, 106, 114, 120, 124, 127, 130, 131, 132, 133, 134, 136, 137, 139, 144, 145, 146, 148, 149, 150, 155, 158, 161, 164, 166, 169, 173, 174, 176, 177, 178, 186, 187, 192, 195, 197, 198, 200, 201, 213, 214, 216, 217, 222, 223, 225, 228, 229, 232, 243, 246, 247, 252, 265, 266, 272, 274], "worker": [1, 7, 12, 18, 56, 57, 97, 130, 132, 133, 135, 148, 158, 173, 176, 177, 183, 227, 232, 262], "so": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 48, 51, 54, 56, 57, 58, 69, 72, 79, 87, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 119, 120, 127, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 153, 155, 156, 157, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 183, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 206, 208, 209, 210, 211, 216, 218, 222, 232, 234, 235, 236, 243, 246, 247, 251, 261, 262, 265, 266, 275, 276, 277, 280, 281], "syncdatacollector": [1, 173], "process": [1, 4, 5, 6, 7, 12, 13, 15, 16, 18, 19, 21, 23, 25, 26, 27, 28, 37, 40, 41, 45, 51, 54, 55, 56, 57, 61, 65, 79, 86, 89, 94, 95, 97, 99, 103, 104, 112, 113, 114, 121, 124, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 144, 145, 148, 149, 154, 155, 157, 158, 166, 167, 172, 174, 176, 177, 178, 179, 183, 186, 189, 190, 197, 198, 199, 210, 213, 214, 215, 216, 219, 223, 227, 228, 229, 231, 237, 247, 249, 251, 252, 261, 262, 263, 265, 266, 271, 276, 277, 278, 280, 281], "offer": [1, 4, 8, 12, 15, 17, 21, 41, 45, 47, 58, 65, 94, 95, 106, 133, 134, 136, 150, 152, 155, 156, 167, 190, 193, 229, 232, 245, 247, 252, 261, 262, 267, 280], "multiasyncdatacollector": [1, 173], "rollout": [1, 173], "asynchron": [1, 24, 130, 131, 135, 138, 170, 173, 177, 252, 266], "manner": [1, 6, 10, 15, 22, 35, 94, 112, 173, 186, 190, 232], "therebi": [1, 200, 206, 211, 277], "decoupl": [1, 37, 165], "factori": [1, 7, 102, 108, 207, 208, 248, 251], "empti": [1, 4, 6, 7, 10, 15, 22, 24, 26, 102, 140, 155, 158, 172, 179, 183, 186, 189, 193, 198, 218, 222, 252, 261], "maximum": [1, 12, 54, 86, 99, 109, 138, 140, 149, 155, 173, 178, 179, 210, 262], "non": [1, 2, 3, 6, 10, 12, 15, 22, 25, 36, 54, 56, 58, 59, 61, 86, 89, 99, 102, 104, 105, 107, 111, 112, 121, 133, 134, 138, 142, 143, 148, 149, 152, 156, 158, 161, 171, 175, 178, 179, 183, 187, 190, 193, 199, 206, 213, 218, 229, 247, 259, 263, 276, 280], "termin": [1, 15, 26, 58, 92, 173, 174, 176, 177, 186, 222], "max_frames_per_traj": [1, 173], "effect": [1, 6, 7, 10, 12, 17, 26, 60, 79, 86, 95, 99, 102, 104, 112, 117, 136, 139, 140, 146, 150, 164, 166, 167, 171, 174, 178, 179, 186, 190, 208, 221, 228, 230, 246, 262, 267, 276], "regist": [1, 8, 17, 25, 40, 47, 51, 99, 117, 119, 121, 131, 133, 134, 136, 146, 152, 164, 165, 173, 189, 197, 198, 223, 232, 236, 243, 246, 253, 264], "new": [1, 2, 4, 5, 6, 7, 8, 10, 13, 15, 17, 25, 26, 27, 28, 34, 35, 39, 44, 47, 49, 53, 54, 55, 57, 60, 66, 79, 81, 82, 83, 84, 86, 89, 101, 102, 103, 104, 106, 109, 111, 116, 117, 119, 121, 127, 131, 132, 133, 134, 135, 137, 141, 149, 152, 153, 155, 157, 164, 165, 166, 167, 170, 171, 173, 174, 175, 178, 179, 183, 186, 189, 190, 192, 194, 197, 198, 200, 201, 206, 211, 214, 221, 222, 223, 232, 243, 252, 259, 262, 263, 266, 268], "stepcount": [1, 149, 173], "infer": [1, 3, 7, 8, 10, 11, 22, 23, 24, 25, 26, 42, 44, 53, 54, 95, 97, 99, 103, 104, 108, 111, 112, 114, 131, 134, 137, 138, 141, 142, 153, 155, 173, 175, 186, 187, 189, 192, 210, 211, 213, 214, 216, 219, 222, 223, 229, 237, 243, 249, 250, 264, 266, 267, 274, 277, 280], "manual": [1, 4, 6, 10, 13, 17, 25, 26, 37, 51, 54, 58, 73, 76, 77, 102, 104, 112, 120, 121, 134, 143, 149, 150, 165, 166, 167, 169, 189, 190, 211, 223, 227, 231, 234, 243, 246, 262, 280], "around": [1, 6, 7, 12, 26, 27, 37, 41, 54, 60, 95, 97, 99, 102, 104, 127, 131, 140, 150, 155, 156, 161, 166, 179, 183, 184, 189, 190, 198, 206, 207, 235, 253], "1m": [1, 140, 149, 173, 195], "outer": [1, 7, 133, 156], "loop": [1, 3, 5, 6, 10, 12, 18, 22, 24, 28, 39, 41, 48, 51, 54, 56, 57, 79, 89, 94, 97, 101, 104, 112, 120, 132, 134, 138, 139, 141, 150, 155, 156, 157, 164, 166, 167, 176, 177, 184, 190, 216, 235, 247, 252, 262, 265], "equal": [1, 5, 11, 94, 102, 104, 137, 158, 171, 173, 174, 186, 189, 197, 209, 232, 277, 280], "length": [1, 13, 15, 54, 57, 94, 95, 99, 111, 112, 114, 136, 140, 173, 178, 179, 190, 193, 195, 208, 211, 214, 216, 221, 232, 266, 276], "sub": [1, 7, 23, 28, 94, 119, 136, 141, 169, 173, 177, 183, 187, 190, 231, 271, 280], "shape": [1, 4, 5, 17, 19, 26, 35, 44, 47, 53, 54, 56, 57, 72, 89, 94, 97, 104, 105, 108, 111, 119, 120, 133, 136, 139, 140, 141, 150, 152, 156, 158, 166, 173, 183, 186, 190, 192, 193, 199, 209, 211, 216, 218, 235, 243, 247, 250, 252, 258, 266, 271, 272, 274, 275, 277], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 35, 36, 40, 41, 45, 47, 48, 49, 54, 61, 68, 76, 79, 86, 89, 92, 94, 97, 99, 102, 103, 104, 105, 106, 111, 112, 121, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 148, 149, 152, 153, 156, 157, 161, 167, 169, 170, 173, 174, 175, 177, 180, 181, 184, 186, 187, 189, 190, 192, 193, 195, 198, 199, 200, 206, 207, 211, 213, 214, 216, 218, 223, 225, 227, 231, 232, 234, 236, 243, 246, 247, 248, 250, 251, 252, 258, 261, 265, 266, 267, 270, 274, 276, 277, 278, 279], "assess": [1, 167, 190], "mode": [1, 5, 13, 23, 40, 42, 47, 54, 56, 57, 60, 79, 86, 89, 91, 95, 101, 103, 121, 131, 133, 141, 142, 143, 149, 153, 155, 157, 158, 161, 169, 175, 178, 179, 180, 181, 184, 186, 187, 189, 193, 194, 197, 213, 214, 229, 232, 235, 237, 247, 262, 266, 269, 276, 277, 280], "dedic": [1, 11, 60, 102, 176, 177, 245, 246, 281], "frequenc": [1, 87, 138], "everi": [1, 2, 7, 10, 11, 15, 16, 19, 21, 22, 27, 35, 36, 37, 41, 47, 48, 51, 54, 56, 57, 60, 65, 94, 97, 99, 101, 102, 103, 127, 136, 137, 139, 140, 142, 148, 149, 152, 158, 164, 165, 166, 167, 171, 173, 174, 175, 177, 179, 183, 184, 187, 189, 190, 211, 216, 225, 248, 260, 262, 273, 281], "10": [1, 3, 5, 7, 10, 12, 19, 22, 26, 36, 37, 40, 45, 47, 48, 49, 54, 56, 58, 79, 87, 92, 97, 103, 114, 119, 121, 132, 133, 135, 140, 141, 146, 148, 150, 158, 172, 175, 176, 177, 178, 179, 181, 183, 184, 186, 189, 190, 193, 194, 197, 199, 201, 214, 216, 218, 222, 225, 227, 228, 231, 234, 235, 237, 243, 247, 249, 252, 260, 261, 277], "come": [1, 6, 7, 11, 19, 22, 23, 25, 26, 45, 56, 57, 79, 89, 92, 94, 99, 102, 104, 105, 117, 121, 132, 136, 138, 148, 149, 155, 164, 165, 167, 170, 173, 178, 187, 189, 190, 193, 199, 216, 237, 247, 272, 281], "flavor": [1, 4, 6, 26], "priorit": [1, 211, 262], "error": [1, 4, 5, 6, 7, 10, 11, 12, 13, 17, 25, 40, 41, 47, 51, 54, 55, 58, 72, 94, 97, 99, 102, 104, 108, 112, 116, 117, 120, 133, 135, 137, 143, 164, 170, 173, 174, 187, 190, 193, 197, 199, 206, 215, 231, 236, 247, 259, 262, 265, 275, 279], "higher": [1, 22, 23, 48, 53, 58, 86, 94, 95, 99, 104, 106, 120, 132, 133, 139, 140, 143, 152, 156, 172, 173, 174, 183, 184, 186, 189, 190, 213, 219, 221, 223, 226, 231, 234], "likelihood": [1, 40, 54, 99, 106, 112], "regular": [1, 5, 6, 7, 10, 11, 22, 26, 27, 104, 112, 124, 139, 140, 156, 165, 166, 167, 181, 190, 193, 206, 208, 211, 213, 236, 262, 274], "circular": [1, 197, 215], "compos": [1, 4, 6, 7, 8, 11, 17, 19, 22, 24, 28, 65, 79, 97, 99, 103, 106, 131, 132, 148, 152, 153, 161, 166, 172, 173, 176, 178, 180, 181, 184, 186, 193, 231, 236, 237, 249, 252, 267, 270, 272], "pick": [1, 7, 22, 48, 105, 139, 174, 179, 232, 243, 261, 266, 272], "tensor": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 54, 56, 62, 65, 66, 68, 69, 71, 72, 73, 75, 78, 79, 89, 94, 95, 96, 98, 99, 101, 103, 104, 106, 109, 112, 113, 114, 117, 119, 121, 131, 132, 133, 134, 140, 141, 142, 143, 146, 148, 149, 150, 152, 155, 156, 158, 161, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 189, 190, 192, 195, 197, 198, 199, 200, 201, 206, 207, 208, 214, 216, 217, 218, 219, 221, 222, 227, 230, 231, 232, 234, 235, 236, 245, 246, 247, 249, 250, 251, 252, 253, 258, 261, 264, 265, 266, 271, 274, 279], "physic": [1, 15, 111, 167, 251, 262, 280], "memori": [1, 5, 6, 7, 10, 11, 18, 19, 21, 22, 24, 25, 26, 40, 44, 53, 54, 56, 60, 92, 99, 102, 103, 104, 107, 110, 112, 114, 121, 131, 132, 133, 134, 136, 144, 148, 149, 155, 156, 157, 161, 171, 176, 178, 180, 183, 186, 189, 190, 192, 193, 195, 197, 198, 199, 206, 209, 211, 216, 223, 227, 236, 246, 247, 251, 253, 266, 271, 281], "map": [1, 7, 13, 36, 54, 57, 95, 97, 99, 104, 109, 111, 121, 134, 139, 149, 150, 156, 164, 165, 166, 173, 174, 177, 186, 189, 192, 216, 221, 227, 229, 234, 251, 261, 262, 264], "arrai": [1, 7, 35, 36, 47, 48, 51, 56, 65, 76, 77, 89, 94, 95, 102, 111, 112, 114, 119, 120, 139, 140, 157, 172, 179, 181, 186, 209, 245], "desir": [1, 4, 6, 10, 13, 15, 18, 54, 56, 57, 79, 86, 104, 121, 134, 148, 153, 171, 181, 183, 186, 189, 195, 197, 199, 207, 218, 243, 246, 249, 277, 280], "hyperparamet": [1, 7, 15, 19, 57, 112, 121, 122, 131, 138, 139, 206, 211, 264], "temporari": [1, 6, 138], "directori": [1, 5, 6, 7, 13, 25, 26, 37, 54, 56, 57, 92, 101, 104, 121, 124, 127, 138, 139, 140, 155, 179, 183, 186, 197, 199, 229, 237, 243, 260, 271, 280], "disk": [1, 5, 26, 28, 37, 97, 101, 114, 121, 149, 167, 197, 198, 247, 251, 252, 260, 271, 272], "along": [1, 5, 6, 7, 10, 15, 19, 24, 26, 35, 36, 44, 47, 53, 54, 58, 59, 60, 61, 87, 94, 95, 97, 98, 99, 101, 102, 103, 104, 108, 109, 112, 113, 127, 132, 133, 139, 140, 144, 145, 149, 164, 171, 174, 176, 184, 186, 189, 190, 195, 208, 213, 214, 216, 218, 276], "dimens": [1, 6, 7, 13, 15, 21, 23, 24, 36, 44, 51, 53, 54, 95, 97, 99, 101, 108, 109, 111, 112, 131, 136, 139, 149, 150, 158, 166, 172, 173, 175, 189, 190, 195, 207, 211, 214, 221, 246, 262, 277], "feed": [1, 7, 13, 22, 48, 51, 54, 97, 99, 103, 104, 107, 109, 114, 121, 136, 139, 140, 146, 157, 174, 179, 184, 229, 249, 265], "adapt": [1, 2, 15, 19, 27, 92, 97, 114, 138, 195, 216, 247], "divid": [1, 10, 11, 12, 13, 15, 16, 22, 89, 104, 106, 135, 148, 165, 167, 177, 277, 280], "yield": [1, 7, 12, 13, 19, 22, 24, 40, 42, 102, 121, 136, 137, 175, 177, 193, 199, 209, 216, 235, 237, 262], "regard": [1, 7, 12, 15, 26, 121, 155, 156, 173, 183, 190, 276], "200": [1, 7, 149, 158, 177, 199, 235], "random_crop_len": 1, "25": [1, 25, 26, 79, 94, 103, 104, 119, 127, 132, 140, 176, 186, 199, 234, 235, 247, 252], "balanc": [1, 7, 21, 146, 183, 190, 243], "choic": [1, 4, 5, 7, 10, 17, 92, 138, 140, 148, 167, 190, 225, 262], "heterogen": [1, 214], "figur": [1, 10, 13, 15, 25, 54, 56, 79, 86, 97, 104, 131, 135, 136, 138, 140, 149, 155, 167, 175, 183, 184, 186, 189], "dataflow": 1, "8": [1, 3, 6, 7, 19, 22, 26, 40, 79, 92, 99, 103, 109, 119, 120, 133, 136, 140, 142, 146, 153, 155, 158, 169, 172, 181, 183, 186, 189, 190, 195, 197, 199, 201, 216, 222, 223, 227, 228, 229, 230, 231, 232, 234, 235, 237, 246, 252, 262, 280, 281], "1000": [1, 2, 22, 47, 101, 103, 127, 132, 133, 137, 155, 173, 184, 216, 227, 243, 247, 261], "known": [1, 4, 5, 6, 13, 19, 94, 136, 148, 152, 154, 171, 174, 179, 189, 190, 197, 216, 223, 247, 261, 272], "utd": 1, "64": [1, 6, 7, 16, 19, 21, 22, 26, 37, 40, 41, 47, 79, 92, 102, 109, 112, 132, 133, 136, 149, 150, 166, 172, 175, 176, 181, 190, 195, 210, 216, 221, 223, 234, 235, 237, 247, 252, 267], "reproduc": [1, 13, 57, 79, 97, 102, 104, 155, 173, 174, 177, 187, 235, 247, 262], "realiz": [1, 19, 216], "sever": [1, 2, 3, 4, 11, 12, 16, 18, 22, 25, 28, 35, 41, 45, 49, 51, 57, 58, 59, 79, 104, 106, 133, 139, 145, 148, 157, 164, 165, 167, 170, 173, 175, 176, 183, 184, 187, 189, 193, 208, 213, 235, 236, 247, 261, 271, 272, 280], "qnet": 1, "ve": [1, 6, 7, 10, 19, 24, 25, 28, 49, 51, 55, 94, 95, 97, 99, 102, 103, 112, 131, 137, 149, 154, 156, 164, 166, 167, 176, 184, 189, 190, 199, 206, 208, 209, 210, 216, 228, 229, 247], "becaus": [1, 2, 4, 5, 6, 7, 10, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 35, 37, 42, 44, 47, 48, 51, 53, 54, 56, 57, 60, 61, 79, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 112, 113, 114, 117, 121, 127, 133, 134, 137, 139, 142, 143, 146, 149, 152, 156, 157, 158, 161, 166, 167, 171, 175, 177, 179, 181, 183, 187, 189, 192, 193, 199, 206, 208, 216, 219, 221, 225, 234, 235, 247, 259, 262, 264, 265, 277], "_must_": 1, "off": [1, 10, 18, 22, 24, 27, 35, 47, 54, 56, 99, 102, 121, 132, 138, 139, 155, 164, 173, 175, 176, 177, 186, 206, 228, 266, 279], "dictat": [1, 15], "introduc": [1, 12, 16, 18, 19, 24, 25, 26, 27, 36, 39, 59, 92, 95, 104, 106, 119, 120, 131, 133, 135, 141, 146, 155, 158, 164, 175, 177, 178, 179, 186, 187, 189, 190, 198, 200, 201, 206, 208, 209, 210, 213, 216, 219, 221, 223, 227, 228, 236, 259, 262, 277, 278, 280], "outdat": 1, "trick": [1, 4, 7, 11, 54, 102, 143, 148, 156], "multi": [1, 6, 7, 15, 21, 51, 54, 57, 58, 59, 61, 65, 94, 95, 99, 102, 106, 131, 133, 134, 136, 144, 145, 146, 149, 173, 175, 178, 180, 183, 192, 211, 229, 231, 262, 280], "altern": [1, 7, 11, 26, 53, 54, 109, 127, 132, 150, 154, 158, 170, 173, 179, 183, 186, 187, 193, 199, 209, 210, 229, 259, 262, 278], "hack": [1, 206, 259], "find": [1, 2, 4, 5, 6, 7, 10, 11, 19, 25, 26, 35, 37, 44, 53, 79, 86, 87, 89, 92, 97, 99, 102, 105, 108, 112, 131, 132, 135, 139, 140, 148, 152, 153, 155, 165, 174, 177, 179, 183, 189, 190, 206, 207, 208, 209, 210, 216, 237, 243, 245, 247, 260], "well": [1, 3, 4, 5, 6, 7, 10, 11, 12, 22, 23, 25, 26, 37, 44, 48, 53, 54, 58, 86, 89, 92, 95, 97, 104, 106, 108, 112, 114, 121, 127, 132, 133, 134, 137, 138, 139, 142, 143, 148, 149, 152, 153, 164, 165, 167, 169, 172, 175, 176, 177, 178, 179, 183, 184, 186, 187, 190, 192, 206, 207, 208, 211, 218, 228, 229, 231, 236, 243, 247, 251, 259, 261, 264, 272, 273, 274, 277, 278, 280], "despit": [1, 79, 141, 146], "fact": [1, 3, 4, 6, 7, 10, 13, 15, 22, 25, 26, 35, 44, 79, 94, 95, 97, 99, 102, 104, 106, 111, 137, 165, 173, 174, 184, 189, 190, 193], "part": [1, 3, 6, 7, 10, 11, 14, 15, 16, 18, 23, 26, 40, 47, 49, 54, 57, 79, 92, 94, 95, 99, 105, 107, 111, 112, 113, 131, 133, 136, 137, 139, 140, 143, 144, 148, 149, 154, 155, 162, 164, 165, 173, 179, 189, 190, 195, 197, 199, 200, 206, 208, 210, 214, 232, 237, 243, 245, 246, 259, 261, 267, 271, 274, 277], "made": [1, 7, 11, 16, 22, 28, 56, 57, 92, 95, 102, 104, 133, 135, 137, 148, 149, 167, 179, 184, 186, 189, 209, 214, 245, 262], "thank": [1, 22, 54, 112, 138, 139, 140, 148, 179, 193], "hardupd": 1, "softupd": [1, 149], "appropri": [1, 7, 10, 54, 95, 112, 138, 146, 165, 176, 184, 190, 193, 198, 213, 235, 236, 246], "locat": [1, 4, 7, 34, 37, 44, 53, 86, 95, 97, 111, 119, 148, 167, 173, 183, 192, 197, 229, 243, 252, 262, 271], "adam": [1, 7, 12, 14, 40, 51, 57, 73, 103, 106, 120, 134, 148, 164, 174, 175, 177, 225, 226, 228, 229, 234, 281], "pretti": [1, 18, 24, 48, 102, 119, 120, 156, 177, 221], "plot": [1, 7, 56, 57, 79, 86, 94, 138, 149, 167, 174, 175, 181, 184, 186], "alreadi": [1, 2, 4, 5, 6, 7, 11, 12, 16, 25, 26, 94, 97, 102, 104, 105, 112, 136, 138, 146, 158, 164, 167, 169, 172, 173, 178, 184, 190, 208, 210, 215, 227, 231, 232, 235, 236, 247, 249, 262, 263, 264, 265, 267, 281], "mention": [1, 4, 6, 7, 11, 12, 16, 18, 57, 79, 89, 102, 104, 105, 121, 132, 136, 148, 149, 167, 174, 176, 183, 186, 189, 193, 229, 243, 251, 259, 271, 280], "greater": [1, 12, 54, 57, 95, 120, 137, 222, 280], "concret": [1, 6, 7, 10, 12, 94, 167, 173, 189, 206], "takeawai": [1, 124, 193, 262], "further": [1, 5, 6, 7, 10, 22, 24, 26, 51, 79, 92, 99, 104, 112, 136, 148, 153, 155, 167, 171, 173, 186, 187, 189, 199, 211, 213, 214, 215, 228, 232, 236, 251, 270], "might": [1, 4, 6, 10, 11, 16, 17, 18, 28, 35, 42, 48, 55, 56, 57, 58, 94, 97, 102, 104, 105, 109, 111, 114, 117, 119, 134, 143, 144, 145, 146, 148, 153, 154, 156, 165, 167, 174, 177, 178, 179, 183, 187, 189, 190, 192, 193, 197, 199, 206, 215, 222, 231, 247, 248, 252, 259, 262, 267, 277, 280], "dispatch": [1, 4, 6, 16, 131, 134, 170, 193, 223, 235, 243, 246, 273], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 26, 27, 28, 54, 89, 94, 112, 114, 121, 131, 133, 134, 144, 193, 213, 229, 247], "runnable_code_remov": [1, 13, 14, 15, 17, 19, 23, 25, 26, 27, 28, 35, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 57, 67, 68, 69, 71, 72, 73, 76, 77, 89, 92, 94, 95, 97, 98, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 137, 138, 139, 142, 149, 150, 152, 153, 154, 155, 156, 157, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 183, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 245, 246, 247, 248, 249, 251, 252, 253, 259, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "minut": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 135, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 172, 173, 174, 178, 179, 181, 183, 184, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "002": [1, 14, 15, 17, 20, 28, 35, 36, 37, 41, 42, 43, 44, 45, 47, 49, 51, 52, 53, 72, 74, 76, 77, 78, 92, 94, 99, 100, 102, 105, 109, 110, 111, 112, 117, 118, 122, 124, 133, 137, 138, 139, 142, 149, 150, 154, 157, 161, 164, 165, 166, 171, 173, 174, 179, 180, 206, 207, 209, 217, 226, 248, 251, 253, 258, 259, 267, 269, 273, 274, 275, 276, 278], "python": [1, 3, 5, 7, 11, 13, 14, 15, 16, 19, 20, 21, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 61, 62, 67, 68, 69, 71, 72, 73, 76, 77, 79, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 131, 132, 133, 137, 138, 139, 140, 141, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 172, 173, 174, 176, 178, 179, 181, 183, 187, 189, 190, 192, 193, 195, 197, 198, 199, 200, 206, 207, 208, 209, 211, 213, 214, 215, 219, 221, 226, 229, 230, 231, 232, 234, 236, 237, 243, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 273, 274, 275, 277, 279, 280], "sourc": [1, 3, 6, 7, 11, 12, 13, 14, 15, 17, 18, 19, 23, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 133, 136, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 170, 171, 173, 174, 175, 177, 178, 179, 181, 183, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 206, 207, 208, 209, 211, 214, 219, 221, 222, 226, 234, 236, 237, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "coding_ddpg": [1, 20], "py": [1, 4, 6, 7, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 25, 26, 27, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 169, 170, 171, 173, 174, 176, 178, 179, 180, 181, 183, 187, 189, 190, 192, 193, 195, 197, 198, 199, 206, 207, 208, 209, 211, 215, 217, 219, 221, 222, 226, 230, 231, 234, 237, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 273, 274, 275, 276, 277, 278, 280], "jupyt": [1, 13, 14, 15, 17, 19, 23, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "notebook": [1, 13, 14, 15, 17, 19, 21, 23, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "ipynb": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "galleri": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "sphinx": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 178, 179, 181, 183, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 219, 221, 226, 234, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 267, 273, 274, 275, 276, 278], "The": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 41, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 71, 72, 73, 77, 79, 86, 87, 89, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 171, 172, 173, 174, 175, 176, 177, 178, 181, 183, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 246, 247, 249, 251, 252, 259, 260, 261, 262, 265, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281], "packag": [2, 4, 6, 7, 19, 21, 25, 26, 27, 48, 51, 56, 62, 65, 72, 73, 92, 103, 104, 106, 112, 116, 120, 127, 130, 131, 132, 133, 146, 148, 154, 170, 172, 174, 177, 181, 183, 186, 187, 215, 216, 231, 236, 245, 249, 252, 261, 265, 266, 277, 279], "build": [2, 7, 15, 22, 23, 28, 35, 37, 38, 39, 40, 41, 42, 44, 45, 51, 54, 65, 72, 73, 92, 94, 95, 96, 97, 98, 101, 102, 103, 105, 111, 112, 119, 120, 124, 130, 131, 139, 140, 148, 149, 152, 162, 164, 166, 167, 173, 174, 175, 176, 177, 180, 189, 190, 197, 201, 211, 214, 221, 236, 247, 249, 261, 262, 274, 277], "highli": [2, 6, 7, 11, 21, 54, 92, 179, 190, 221, 262], "dynam": [2, 5, 6, 7, 10, 13, 15, 16, 22, 23, 25, 26, 28, 35, 47, 58, 69, 94, 104, 107, 110, 113, 120, 121, 131, 141, 158, 171, 173, 194, 199, 236, 237, 246, 250, 262, 266, 269, 272, 274, 277], "neural": [2, 6, 14, 15, 19, 20, 23, 35, 38, 39, 41, 47, 50, 52, 54, 56, 62, 72, 79, 94, 95, 97, 99, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 120, 127, 131, 138, 139, 140, 141, 142, 149, 162, 171, 173, 174, 176, 179, 180, 181, 184, 186, 210, 213, 214, 216, 223, 235, 236, 243, 250, 258, 262, 266, 267], "network": [2, 3, 6, 10, 13, 14, 15, 19, 22, 23, 24, 28, 35, 38, 39, 40, 41, 42, 47, 50, 52, 54, 56, 62, 72, 73, 79, 94, 95, 97, 99, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 120, 127, 131, 137, 138, 141, 142, 145, 146, 161, 162, 165, 167, 171, 176, 180, 183, 184, 186, 197, 210, 213, 214, 216, 223, 235, 236, 237, 243, 250, 253, 258, 262, 266, 267], "api": [2, 4, 6, 8, 9, 10, 11, 12, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 36, 37, 39, 41, 44, 45, 53, 61, 86, 95, 116, 119, 121, 131, 132, 133, 135, 136, 137, 138, 141, 146, 148, 154, 155, 156, 160, 166, 168, 169, 175, 176, 177, 183, 187, 189, 190, 192, 194, 195, 198, 199, 210, 213, 214, 219, 221, 227, 228, 229, 230, 231, 236, 237, 245, 247, 248, 252, 261, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "explor": [2, 7, 10, 15, 24, 26, 49, 54, 79, 117, 131, 138, 143, 149, 155, 157, 164, 167, 169, 173, 174, 178, 179, 190, 193, 197, 210, 230, 245, 266, 271, 274, 277, 280], "note": [2, 4, 5, 6, 7, 10, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 35, 47, 48, 49, 51, 54, 55, 57, 79, 89, 94, 95, 97, 99, 102, 103, 106, 107, 108, 109, 111, 112, 117, 119, 121, 127, 132, 133, 134, 136, 137, 142, 143, 145, 146, 148, 150, 152, 153, 155, 156, 158, 164, 166, 167, 170, 171, 175, 176, 177, 178, 183, 184, 186, 187, 189, 190, 192, 193, 194, 197, 198, 206, 207, 208, 209, 211, 216, 218, 219, 221, 223, 227, 228, 229, 231, 232, 252, 261, 264, 267, 271, 272, 273, 274, 280, 281], "pleas": [2, 4, 5, 6, 7, 8, 10, 11, 17, 22, 23, 25, 26, 48, 49, 51, 56, 63, 64, 85, 92, 132, 133, 136, 146, 148, 150, 152, 153, 154, 155, 158, 164, 166, 170, 175, 176, 177, 181, 183, 186, 187, 189, 190, 192, 193, 194, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 221, 222, 224, 229, 231, 235, 236, 237, 239, 240, 241, 242, 243, 244, 246, 248, 277, 280], "differenti": [2, 6, 7, 15, 21, 28, 38, 39, 44, 50, 51, 62, 94, 120, 131, 149, 166, 174, 180, 181, 208], "requires_grad": [2, 4, 7, 10, 35, 40, 47, 51, 67, 68, 79, 94, 102, 108, 112, 120, 127, 141, 143, 158, 195, 216, 251, 265], "track": [2, 6, 10, 15, 36, 40, 47, 57, 86, 94, 99, 101, 102, 103, 106, 108, 112, 120, 133, 135, 140, 141, 145, 149, 153, 177, 179, 183, 215, 230, 252, 260, 265, 276, 277], "auto": [2, 3, 6, 7, 10, 11, 13, 25, 60, 132, 133, 155, 170, 189, 190, 200, 210, 222, 234, 236, 237, 247, 261, 280], "x": [2, 4, 6, 7, 13, 21, 22, 23, 24, 25, 26, 28, 35, 40, 44, 47, 51, 53, 54, 56, 57, 67, 68, 71, 72, 73, 76, 77, 79, 89, 94, 97, 99, 102, 103, 104, 105, 106, 108, 112, 114, 120, 121, 132, 134, 136, 137, 139, 140, 141, 143, 146, 148, 156, 158, 165, 167, 169, 170, 172, 175, 176, 177, 181, 184, 186, 187, 189, 192, 194, 199, 200, 201, 210, 211, 213, 216, 227, 228, 229, 231, 234, 235, 236, 237, 243, 247, 260, 261, 272, 274, 277], "std": [2, 5, 6, 7, 13, 16, 22, 25, 26, 56, 79, 97, 104, 170, 172, 177, 181, 186, 200, 206, 236, 247, 279], "cout": [2, 5, 7, 25, 26, 279], "endl": [2, 7, 25, 26], "cpufloattyp": [2, 5, 7, 26], "y": [2, 6, 21, 23, 25, 26, 35, 40, 44, 45, 47, 53, 56, 57, 67, 68, 71, 72, 73, 76, 77, 79, 86, 89, 94, 99, 102, 103, 104, 105, 108, 109, 112, 120, 133, 137, 158, 169, 170, 183, 186, 187, 189, 200, 201, 208, 210, 227, 260, 261, 272, 274], "wa": [2, 3, 4, 5, 6, 12, 17, 19, 23, 25, 26, 28, 48, 56, 57, 79, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 112, 114, 117, 121, 132, 136, 138, 141, 146, 148, 157, 161, 164, 165, 166, 167, 169, 171, 172, 173, 174, 177, 178, 179, 184, 189, 190, 193, 199, 208, 209, 216, 229, 243, 246, 247, 252, 254, 255, 256, 257, 277, 280], "result": [2, 4, 5, 6, 7, 10, 11, 13, 15, 19, 22, 23, 24, 26, 27, 28, 35, 40, 42, 44, 47, 48, 56, 68, 86, 87, 92, 94, 95, 97, 102, 103, 104, 108, 112, 113, 117, 120, 121, 124, 133, 134, 135, 136, 137, 140, 146, 148, 149, 152, 153, 155, 156, 157, 158, 161, 166, 167, 170, 171, 172, 174, 175, 176, 177, 178, 184, 186, 187, 189, 192, 193, 194, 195, 197, 199, 207, 208, 209, 210, 211, 218, 219, 222, 225, 227, 228, 234, 235, 237, 249, 251, 252, 259, 261, 262, 266, 267, 271, 272, 274, 275, 276, 279, 280, 281], "grad_fn": [2, 5, 28, 35, 47, 51, 94, 108, 137, 143], "name": [2, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 35, 55, 56, 57, 86, 105, 111, 112, 114, 117, 119, 121, 131, 133, 136, 138, 141, 146, 149, 155, 158, 162, 165, 169, 170, 171, 173, 174, 175, 176, 178, 179, 180, 183, 186, 187, 190, 192, 197, 213, 215, 216, 219, 222, 229, 231, 235, 236, 237, 247, 251, 252, 261, 263, 276, 279, 280], "addbackward1": 2, "z": [2, 6, 26, 57, 89, 102, 108, 158, 189, 208], "27": [2, 40, 56, 155, 177, 199, 234, 235, 247, 276], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 35, 108], "exist": [2, 5, 7, 10, 11, 12, 17, 19, 25, 26, 28, 51, 57, 58, 65, 71, 79, 87, 89, 102, 108, 120, 131, 141, 148, 153, 171, 172, 177, 178, 179, 181, 183, 186, 187, 189, 193, 206, 207, 209, 215, 216, 227, 228, 230, 232, 246, 247, 259, 262], "flag": [2, 4, 6, 15, 26, 47, 94, 108, 165, 179, 189, 214, 251, 261, 267, 280], "place": [2, 6, 7, 12, 15, 21, 25, 26, 44, 47, 49, 53, 57, 89, 95, 99, 101, 106, 108, 112, 114, 133, 138, 146, 148, 150, 164, 166, 167, 173, 179, 186, 187, 189, 190, 193, 195, 206, 213, 221, 227, 229, 234, 251, 259, 261, 262], "randn": [2, 4, 6, 7, 13, 26, 108, 114, 121, 141, 146, 175, 177, 200, 201, 210, 213, 221, 227, 247, 260, 277, 281], "b": [2, 4, 6, 7, 19, 21, 24, 26, 35, 40, 47, 67, 68, 79, 87, 94, 102, 103, 106, 109, 111, 112, 119, 120, 137, 139, 140, 155, 156, 158, 172, 174, 181, 187, 189, 190, 193, 197, 201, 210, 216, 247, 252, 272], "sumbackward0": 2, "backprop": [2, 47, 108, 112, 139, 157], "scalar": [2, 6, 15, 16, 26, 35, 47, 54, 57, 67, 94, 97, 102, 108, 120, 184, 189, 222, 234], "backward": [2, 3, 4, 7, 10, 12, 13, 14, 16, 17, 18, 22, 28, 35, 40, 47, 49, 51, 57, 67, 68, 76, 77, 79, 94, 95, 97, 103, 108, 109, 112, 120, 127, 131, 132, 136, 137, 140, 144, 146, 148, 152, 156, 161, 166, 169, 175, 176, 177, 180, 181, 183, 184, 189, 190, 193, 225, 226, 227, 228, 229, 232, 234, 236, 237, 246, 252, 260, 262, 265, 270, 274, 276, 281], "equival": [2, 5, 6, 12, 25, 26, 35, 47, 94, 106, 120, 134, 152, 166, 169, 174, 176, 186, 189, 190, 193, 200, 206, 208, 211, 216, 262, 278, 279], "print": [2, 5, 6, 7, 12, 15, 21, 22, 24, 25, 26, 28, 36, 40, 41, 48, 49, 54, 56, 57, 58, 79, 89, 92, 94, 97, 99, 102, 103, 104, 106, 111, 112, 113, 114, 116, 121, 132, 133, 134, 135, 140, 141, 142, 145, 146, 148, 149, 153, 155, 158, 165, 169, 170, 172, 175, 176, 177, 179, 181, 184, 187, 189, 190, 193, 194, 197, 201, 206, 208, 215, 216, 222, 225, 227, 228, 229, 230, 231, 234, 235, 236, 237, 246, 247, 252, 253, 262, 264, 278, 279, 281], "d": [2, 4, 6, 7, 10, 22, 25, 41, 57, 65, 67, 68, 94, 95, 97, 99, 102, 106, 111, 112, 120, 133, 136, 138, 140, 142, 146, 148, 156, 157, 164, 169, 183, 186, 189, 193, 209, 231, 236, 275], "dx": [2, 68, 106, 120, 143], "grad": [2, 4, 7, 13, 17, 35, 47, 51, 67, 79, 94, 108, 112, 120, 132, 137, 140, 141, 143, 146, 148, 152, 156, 161, 164, 175, 176, 177, 193, 206, 221, 226, 232, 234, 246, 265], "5000": [2, 103, 140, 247], "got": [2, 16, 22, 60, 95, 102, 105, 106, 108, 112, 146, 158, 170, 176, 189, 277], "matrix": [2, 6, 7, 13, 19, 26, 35, 44, 47, 53, 86, 94, 97, 99, 102, 105, 106, 108, 111, 112, 119, 136, 139, 140, 156, 161, 165, 178, 179, 181, 186, 189, 190, 193, 209, 211, 216, 221, 235, 236, 237, 243, 249, 262, 266, 276], "explan": [2, 57, 184, 251], "arriv": [2, 7, 16, 26, 133, 146, 175, 262], "valu": [2, 4, 5, 6, 7, 13, 15, 21, 22, 23, 24, 25, 26, 28, 35, 36, 40, 44, 45, 47, 51, 53, 54, 55, 60, 67, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 136, 137, 138, 141, 145, 146, 148, 154, 157, 169, 170, 174, 175, 176, 177, 178, 179, 183, 186, 187, 190, 193, 195, 197, 206, 207, 208, 209, 211, 213, 214, 219, 226, 232, 234, 246, 247, 252, 259, 260, 271, 280, 281], "section": [2, 4, 5, 6, 7, 10, 12, 16, 21, 22, 24, 26, 36, 37, 39, 40, 41, 42, 44, 47, 48, 51, 55, 56, 57, 79, 95, 98, 102, 103, 104, 105, 106, 109, 111, 112, 117, 134, 137, 141, 142, 148, 155, 157, 161, 167, 174, 175, 177, 183, 186, 189, 190, 192, 193, 194, 207, 208, 218, 223, 226, 234, 236, 243, 246, 247, 251, 262, 272, 276], "look": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 21, 23, 25, 26, 28, 37, 42, 44, 47, 48, 51, 53, 54, 55, 56, 57, 60, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 121, 127, 132, 134, 136, 137, 138, 143, 148, 149, 150, 158, 161, 164, 167, 171, 172, 173, 176, 177, 178, 179, 183, 184, 186, 189, 190, 192, 193, 200, 206, 209, 211, 213, 230, 234, 235, 236, 247, 249, 252, 260, 261, 263, 264, 265, 267, 272, 276], "jacobian": [2, 47, 94, 131, 152, 180, 221], "product": [2, 3, 5, 7, 44, 47, 53, 89, 94, 106, 114, 131, 133, 148, 152, 169, 179, 180, 190, 195, 221, 266, 274], "norm": [2, 15, 19, 22, 57, 99, 104, 131, 136, 165, 169, 171, 180, 186, 193, 216], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 235], "4944": 2, "v": [2, 19, 21, 22, 35, 47, 57, 58, 60, 94, 101, 103, 108, 109, 111, 133, 136, 152, 158, 174, 176, 183, 184, 193, 198, 199, 208, 214, 216, 235, 275], "0001": [2, 22, 92, 155, 237], "kfloat": [2, 3, 4, 200, 222], "102": 2, "4000": [2, 97, 103, 261], "1024": [2, 6, 21, 24, 86, 104, 135, 158, 225, 234, 247], "0000": [2, 26, 216], "stop": [2, 5, 6, 26, 35, 56, 92, 94, 108, 140, 158, 164, 173, 175, 179, 183, 197, 252], "histori": [2, 35, 44, 51, 53, 94, 102, 108, 140, 141, 171], "put": [2, 6, 7, 10, 13, 15, 18, 36, 49, 54, 56, 89, 97, 99, 102, 131, 132, 133, 148, 149, 165, 173, 174, 176, 177, 186], "nogradguard": [2, 279], "block": [2, 4, 6, 7, 10, 11, 13, 19, 22, 25, 26, 35, 36, 51, 54, 86, 94, 108, 113, 132, 135, 136, 148, 149, 155, 167, 169, 175, 176, 177, 178, 183, 186, 195, 199, 210, 216, 223, 227, 262, 267], "pow": [2, 6, 206, 234], "no_grad": [2, 22, 35, 40, 47, 94, 103, 106, 108, 109, 112, 120, 132, 133, 140, 157, 172, 176, 181, 184, 189, 210, 213, 218, 232, 234, 236, 262, 270, 279], "Or": [2, 24, 26, 141, 164, 177, 194, 222], "content": [2, 4, 6, 15, 26, 28, 55, 61, 101, 102, 103, 121, 128, 137, 146, 148, 167, 172, 173, 177, 179, 187, 189, 197, 238, 247, 261, 276, 277], "eq": [2, 22, 26, 54, 132, 176, 181, 189, 237, 252], "bool": [2, 12, 15, 16, 26, 170, 186, 194, 210, 216, 280], "is_leaf": 2, "detach_": [2, 177], "register_hook": [2, 141], "retain_grad": 2, "doc": [2, 4, 5, 7, 8, 54, 67, 79, 94, 102, 103, 104, 116, 119, 120, 127, 134, 145, 148, 153, 154, 167, 175, 177, 186, 189, 211, 221, 243, 246, 260, 275, 276], "applic": [2, 3, 12, 13, 15, 16, 26, 37, 54, 65, 95, 99, 104, 114, 127, 130, 131, 132, 137, 138, 142, 146, 154, 164, 167, 171, 175, 177, 186, 189, 199, 208, 215, 222, 227, 228, 229, 234, 235, 237, 243, 262, 266, 276, 280], "calcul": [2, 13, 19, 35, 40, 47, 48, 54, 57, 61, 79, 86, 89, 92, 94, 95, 97, 103, 104, 112, 139, 140, 157, 174, 175, 177, 178, 179, 186, 190, 193, 195, 208, 216, 231, 237, 265], "penalti": [2, 165, 172, 246], "h": [2, 4, 5, 6, 7, 10, 11, 25, 26, 28, 54, 56, 103, 136, 155, 158, 169, 170, 192, 234, 236, 261, 279, 280], "model": [2, 3, 6, 10, 12, 15, 18, 20, 25, 26, 27, 35, 37, 38, 39, 44, 45, 47, 48, 51, 53, 57, 58, 59, 61, 67, 69, 71, 72, 73, 91, 92, 94, 96, 98, 102, 105, 106, 107, 108, 110, 112, 115, 116, 117, 119, 120, 122, 130, 131, 132, 138, 139, 140, 141, 142, 145, 148, 152, 153, 155, 156, 162, 164, 165, 166, 173, 174, 175, 176, 177, 178, 180, 187, 189, 190, 193, 195, 197, 199, 200, 210, 211, 214, 215, 216, 217, 221, 223, 227, 228, 229, 230, 231, 232, 235, 246, 250, 251, 253, 258, 259, 260, 265, 266, 267, 270, 272, 274, 275, 280, 281], "linear": [2, 6, 7, 12, 18, 19, 22, 28, 40, 44, 47, 49, 51, 53, 72, 79, 97, 102, 103, 107, 114, 119, 120, 121, 127, 132, 134, 136, 139, 140, 141, 146, 155, 156, 165, 169, 175, 176, 177, 179, 181, 184, 189, 193, 194, 199, 206, 210, 211, 213, 216, 218, 223, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 243, 246, 251, 253, 259, 260, 264, 267, 281], "loss": [2, 3, 6, 7, 12, 15, 18, 19, 20, 22, 35, 41, 44, 47, 53, 69, 71, 72, 73, 76, 77, 79, 92, 94, 97, 101, 106, 111, 112, 120, 121, 131, 132, 133, 134, 139, 141, 148, 157, 158, 166, 169, 174, 176, 177, 179, 181, 183, 184, 190, 216, 232, 236, 237, 260, 270, 281], "target": [2, 3, 5, 7, 15, 18, 21, 22, 25, 26, 40, 48, 51, 54, 60, 79, 95, 102, 104, 106, 109, 111, 112, 117, 132, 140, 148, 149, 155, 164, 166, 167, 169, 170, 172, 174, 175, 176, 177, 179, 181, 184, 186, 187, 189, 192, 194, 213, 222, 236, 237, 243, 247, 249, 270, 279], "mseloss": [2, 13, 40, 51, 146, 175, 228, 229, 260, 281], "grad_output": [2, 10, 11], "ones_lik": [2, 102], "create_graph": [2, 143], "gradient_penalti": 2, "dim": [2, 5, 6, 12, 24, 36, 79, 97, 102, 103, 132, 134, 140, 158, 169, 171, 172, 175, 176, 177, 181, 184, 186, 195, 207, 208, 222, 235, 237, 277, 279], "add": [2, 4, 5, 7, 8, 10, 11, 13, 15, 16, 17, 19, 22, 24, 25, 26, 40, 48, 51, 55, 79, 89, 92, 99, 102, 103, 106, 109, 117, 124, 131, 132, 133, 136, 140, 141, 142, 148, 149, 153, 154, 155, 156, 164, 166, 167, 170, 172, 173, 175, 176, 177, 179, 183, 189, 193, 195, 199, 200, 206, 208, 215, 216, 222, 229, 232, 234, 247, 249, 252, 266, 274, 278], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 5, 6, 7, 17, 23, 35, 51, 57, 65, 86, 89, 92, 94, 95, 99, 101, 102, 103, 108, 121, 127, 131, 146, 148, 149, 152, 154, 155, 176, 177, 178, 181, 183, 186, 187, 189, 192, 194, 198, 208, 213, 221, 222, 229, 236, 237, 262, 271, 272, 274, 275, 278, 279], "link": [2, 5, 6, 7, 11, 13, 25, 26, 39, 41, 57, 86, 98, 112, 114, 124, 148, 152, 208, 210, 222, 236, 277], "ad": [2, 6, 7, 11, 16, 21, 25, 26, 27, 28, 35, 40, 54, 55, 58, 79, 87, 89, 94, 97, 99, 101, 102, 103, 106, 108, 121, 132, 133, 139, 140, 141, 146, 149, 152, 156, 161, 164, 170, 174, 178, 179, 189, 192, 215, 236, 237, 259, 261, 264, 275], "subclass": [2, 6, 7, 15, 19, 28, 36, 37, 71, 94, 97, 99, 112, 120, 131, 134, 138, 149, 171, 176, 184, 192, 208, 211, 216, 235, 245, 246, 250, 258, 266, 274, 279], "encod": [2, 15, 44, 45, 51, 53, 99, 107, 110, 133, 138, 140, 149, 165, 173, 177, 186, 193, 199, 216, 246, 277], "method": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 22, 24, 26, 28, 35, 36, 42, 44, 48, 51, 54, 56, 60, 79, 87, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 112, 113, 121, 130, 131, 135, 138, 139, 143, 146, 149, 152, 153, 154, 155, 156, 157, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 184, 186, 187, 189, 190, 193, 206, 210, 213, 216, 228, 229, 237, 245, 246, 249, 260, 261, 262, 267, 277, 280], "forward": [2, 3, 5, 10, 11, 12, 13, 15, 16, 18, 22, 25, 26, 28, 35, 36, 40, 41, 47, 49, 51, 54, 57, 61, 67, 68, 69, 76, 77, 79, 89, 94, 97, 99, 102, 103, 104, 105, 106, 107, 109, 112, 113, 114, 120, 121, 127, 131, 132, 133, 136, 137, 139, 140, 142, 143, 144, 146, 148, 153, 161, 164, 165, 166, 169, 171, 174, 175, 176, 177, 179, 180, 181, 183, 184, 186, 187, 189, 190, 194, 210, 222, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 243, 246, 249, 252, 253, 262, 277, 279, 281], "detail": [2, 4, 6, 7, 10, 11, 13, 16, 17, 18, 23, 25, 26, 28, 37, 40, 47, 48, 49, 57, 58, 79, 86, 87, 89, 99, 102, 103, 113, 117, 132, 134, 136, 138, 140, 142, 144, 146, 153, 155, 161, 164, 177, 178, 181, 183, 184, 187, 189, 190, 194, 195, 197, 206, 207, 208, 209, 213, 215, 221, 223, 226, 230, 234, 235, 236, 243, 245, 246, 247, 251, 261, 262, 272, 277], "namespac": [2, 4, 7, 10, 11, 25, 26, 36, 112, 117, 170, 187, 194, 211, 279], "inherit": [2, 12, 16, 25, 41, 56, 89, 97, 102, 103, 106, 154, 157, 173, 186, 192, 197, 208, 211, 232, 277], "linearfunct": 2, "public": [2, 10, 11, 16, 134, 170], "static": [2, 4, 10, 11, 15, 24, 94, 152, 153, 170, 189, 190, 199, 237, 262], "option": [2, 4, 6, 7, 10, 11, 12, 20, 26, 39, 48, 50, 52, 56, 58, 86, 92, 94, 95, 98, 99, 102, 104, 117, 119, 130, 131, 134, 135, 138, 144, 149, 150, 155, 158, 167, 169, 171, 172, 186, 187, 189, 190, 197, 199, 227, 232, 234, 246, 247, 252, 262, 266, 270, 271, 272, 275, 276, 278], "autogradcontext": [2, 10, 11], "ctx": [2, 4, 6, 10, 11, 21, 143, 227], "save_for_backward": [2, 4, 6, 143], "mm": [2, 6, 200, 222, 223], "t": [2, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 19, 22, 24, 25, 26, 28, 35, 39, 40, 44, 47, 48, 51, 55, 57, 58, 60, 65, 79, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 120, 121, 127, 132, 133, 137, 143, 149, 150, 152, 154, 155, 156, 157, 158, 161, 164, 166, 167, 171, 172, 173, 174, 175, 177, 178, 179, 184, 186, 187, 189, 190, 193, 194, 195, 197, 199, 206, 207, 208, 210, 216, 221, 222, 225, 226, 232, 234, 235, 243, 246, 247, 249, 261, 262, 263, 264, 265, 273, 274, 275, 277, 278, 279, 280], "unsqueez": [2, 15, 51, 72, 102, 120, 166, 172, 175, 177, 184, 222], "expand_a": [2, 22], "tensor_list": [2, 10, 11, 148], "save": [2, 4, 5, 7, 12, 13, 22, 23, 26, 35, 36, 37, 38, 39, 40, 44, 45, 48, 53, 54, 55, 57, 79, 92, 101, 103, 104, 122, 127, 131, 132, 134, 136, 138, 142, 155, 156, 169, 171, 175, 176, 177, 179, 180, 183, 186, 190, 197, 217, 222, 236, 237, 249, 250, 251, 252, 260, 261, 262, 264, 265, 266, 267, 272, 276, 279], "get_saved_vari": 2, "grad_input": [2, 143], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 13, 16, 19, 23, 25, 27, 28, 48, 49, 57, 79, 89, 105, 106, 109, 111, 112, 117, 124, 131, 132, 146, 164, 169, 170, 171, 173, 174, 175, 177, 179, 183, 195, 215, 216, 227, 231, 259], "appli": [2, 3, 5, 6, 7, 10, 11, 15, 16, 19, 22, 26, 28, 35, 36, 45, 56, 57, 72, 79, 86, 89, 94, 97, 99, 102, 104, 106, 120, 131, 132, 134, 139, 141, 142, 143, 146, 148, 150, 153, 156, 157, 158, 161, 164, 165, 166, 169, 171, 173, 175, 176, 177, 179, 181, 186, 189, 190, 192, 193, 195, 197, 199, 206, 207, 211, 216, 218, 221, 223, 225, 229, 230, 231, 232, 236, 245, 259, 262, 267, 270, 271, 274, 276, 278], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 5, 6, 7, 11, 12, 15, 20, 22, 25, 26, 35, 36, 37, 40, 41, 47, 54, 56, 57, 79, 94, 95, 97, 99, 102, 104, 108, 112, 120, 121, 127, 131, 137, 139, 140, 142, 148, 152, 154, 167, 170, 175, 176, 177, 178, 180, 181, 183, 184, 186, 189, 195, 211, 228, 229, 232, 236, 237, 247, 259, 261, 262, 264, 266, 267, 277], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 13, 19, 21, 26, 35, 57, 87, 89, 94, 99, 102, 104, 106, 108, 112, 124, 138, 141, 145, 146, 150, 158, 165, 173, 174, 176, 178, 179, 189, 190, 193, 198, 206, 216, 221, 234, 243, 247, 251, 252, 259, 277, 280], "todoubl": 2, "On": [2, 5, 6, 7, 10, 22, 24, 25, 26, 98, 102, 112, 127, 133, 146, 148, 158, 165, 171, 175, 176, 187, 190, 192, 193, 214, 216, 219, 235, 243, 246, 262, 280], "easiest": [2, 6, 26, 39, 98, 112, 156, 173, 189, 262], "your": [2, 4, 7, 8, 10, 12, 13, 16, 17, 19, 20, 21, 22, 25, 26, 28, 35, 36, 39, 41, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 71, 79, 86, 92, 94, 95, 98, 99, 102, 103, 106, 108, 109, 111, 113, 114, 116, 117, 120, 121, 122, 124, 131, 132, 133, 134, 137, 139, 142, 143, 144, 145, 146, 148, 149, 152, 154, 156, 157, 158, 162, 164, 165, 167, 170, 171, 172, 173, 176, 177, 178, 181, 183, 184, 186, 187, 189, 190, 193, 197, 200, 201, 210, 214, 215, 216, 218, 221, 222, 225, 230, 232, 245, 246, 247, 252, 260, 261, 263, 264, 265, 266, 267, 274, 275, 276, 277], "tabl": [2, 18, 24, 111, 119, 131, 133, 148, 155, 176, 177, 183, 189, 190, 235, 247, 252], "set_data": 2, "data": [2, 3, 4, 6, 8, 12, 13, 15, 18, 19, 21, 23, 24, 25, 26, 27, 35, 36, 39, 40, 44, 45, 47, 50, 51, 52, 53, 56, 65, 76, 77, 79, 86, 89, 94, 95, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 114, 120, 121, 130, 131, 137, 138, 144, 148, 149, 150, 153, 154, 155, 156, 157, 158, 161, 162, 164, 166, 167, 169, 172, 174, 175, 176, 177, 187, 192, 193, 198, 199, 207, 209, 210, 211, 213, 214, 216, 221, 222, 223, 229, 230, 231, 232, 235, 236, 237, 243, 245, 246, 247, 251, 252, 253, 259, 260, 266, 267, 270, 276, 277, 281], "output_nr": 2, "after": [2, 3, 6, 7, 11, 13, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 35, 36, 37, 44, 47, 49, 51, 54, 57, 58, 92, 94, 95, 99, 104, 105, 106, 109, 111, 112, 114, 121, 131, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 148, 149, 150, 155, 157, 158, 164, 165, 167, 169, 170, 171, 172, 173, 174, 176, 177, 179, 181, 183, 184, 189, 190, 192, 194, 213, 215, 216, 218, 219, 222, 229, 246, 247, 251, 252, 259, 260, 262, 272, 274, 276, 281], "file": [2, 4, 6, 7, 10, 11, 16, 20, 22, 23, 24, 25, 26, 43, 52, 55, 56, 57, 60, 74, 78, 86, 87, 90, 92, 94, 95, 100, 108, 110, 112, 118, 119, 122, 124, 133, 137, 139, 140, 146, 148, 155, 164, 167, 170, 172, 180, 183, 186, 189, 192, 195, 198, 200, 201, 209, 210, 211, 215, 217, 222, 223, 229, 230, 231, 236, 237, 246, 247, 251, 252, 258, 260, 261, 263, 266, 269, 271, 272, 276, 277, 279, 280], "bug": [2, 6, 11, 26, 101, 155, 193, 197, 200, 210, 277], "report": [2, 11, 19, 26, 57, 79, 92, 94, 97, 99, 103, 131, 135, 155, 167, 175, 177, 178, 197, 200, 210, 216, 252, 274], "github": [2, 3, 5, 7, 11, 12, 18, 22, 25, 26, 27, 54, 58, 59, 60, 65, 117, 131, 132, 133, 135, 136, 142, 144, 145, 146, 148, 150, 152, 153, 154, 157, 158, 166, 169, 170, 175, 176, 177, 183, 186, 192, 194, 195, 198, 199, 200, 210, 221, 222, 223, 229, 231, 236, 237, 245, 277], "issu": [2, 5, 6, 7, 10, 22, 23, 25, 26, 56, 133, 134, 145, 150, 153, 154, 155, 158, 166, 167, 172, 183, 187, 189, 190, 193, 197, 198, 199, 200, 206, 208, 210, 211, 215, 221, 223, 229, 230, 243, 246, 248, 259, 277], "fix": [2, 15, 19, 23, 26, 27, 35, 54, 55, 56, 57, 104, 137, 174, 175, 199, 216, 243, 261, 262, 275], "soon": [2, 6, 57, 158, 164, 228, 236], "overview": [2, 6, 7, 12, 58, 60, 97, 130, 131, 139, 140, 146, 148, 153, 170, 173, 175, 176, 177, 179, 183, 193, 206, 207, 209, 214, 217, 223, 225], "alwai": [2, 3, 4, 5, 7, 15, 18, 21, 22, 25, 26, 45, 57, 97, 99, 103, 109, 111, 112, 134, 135, 136, 137, 142, 148, 149, 167, 172, 173, 174, 175, 177, 189, 190, 192, 206, 210, 223, 275], "problem": [2, 5, 7, 12, 15, 16, 21, 25, 26, 54, 56, 57, 105, 107, 111, 112, 120, 127, 138, 149, 153, 155, 156, 165, 173, 175, 177, 183, 187, 190, 206, 208, 223, 247, 248, 251, 262, 277, 280], "question": [2, 5, 6, 7, 10, 11, 19, 25, 26, 54, 95, 133, 148, 154, 179, 190, 207, 216, 223, 247], "forum": [2, 5, 6, 7, 25, 26, 48, 153, 154, 223], "touch": [2, 5, 7, 15, 25, 26, 223], "view": [3, 11, 12, 15, 16, 18, 22, 28, 55, 58, 60, 61, 65, 79, 86, 95, 101, 102, 103, 108, 111, 112, 114, 120, 121, 132, 135, 136, 138, 144, 145, 146, 148, 153, 155, 169, 170, 175, 176, 177, 178, 179, 181, 184, 195, 197, 211, 222, 226, 229, 230, 231, 234, 243, 245, 253, 260, 278], "edit": [3, 7, 12, 13, 18, 22, 23, 53, 55, 65, 135, 136, 146, 148, 154, 155, 169, 170, 172, 175, 176, 177, 195, 199, 229, 231], "code": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 35, 36, 37, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 207, 208, 209, 210, 211, 215, 216, 219, 221, 223, 226, 227, 229, 230, 231, 232, 234, 236, 237, 245, 246, 247, 248, 249, 251, 252, 253, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 273, 274, 275, 276, 277, 278, 279, 281], "prerequisit": [3, 4, 17, 58, 60, 61, 107, 124, 133, 135, 136, 141, 144, 145, 146, 148, 149, 158, 169, 170, 175, 176, 177, 186, 190, 193, 195, 198, 215, 228, 229, 231, 262], "frontend": [3, 4, 11, 88, 90, 131, 200, 211, 214, 236, 237, 270], "semant": [3, 4, 7, 25, 54, 72, 102, 107, 109, 110, 120, 134, 148, 189, 190, 208, 209, 211, 214, 217, 221], "11": [3, 6, 7, 12, 19, 21, 26, 40, 103, 119, 132, 133, 152, 172, 177, 181, 186, 187, 190, 230, 231, 234, 235, 247, 252, 279], "nvidia": [3, 6, 19, 55, 142, 148, 158, 187, 216, 231, 246, 262, 266], "toolkit": [3, 26, 107, 153, 157, 167, 189, 260], "releas": [3, 4, 5, 7, 11, 19, 23, 26, 55, 114, 119, 121, 132, 133, 137, 153, 164, 176, 178, 183, 216, 227, 228, 235, 236, 237, 252, 262, 267, 277], "greatli": [3, 7, 54, 94, 112, 174], "reduc": [3, 7, 12, 19, 22, 37, 40, 47, 61, 97, 99, 103, 104, 119, 132, 133, 134, 136, 138, 139, 142, 144, 146, 148, 156, 157, 158, 164, 167, 171, 172, 175, 177, 181, 183, 186, 187, 190, 195, 200, 216, 219, 230, 246, 247, 250, 251, 266, 269, 271, 272, 280, 281], "cpu": [3, 4, 6, 7, 10, 11, 12, 15, 16, 21, 22, 23, 26, 36, 41, 44, 47, 48, 53, 54, 57, 67, 77, 79, 86, 87, 92, 102, 104, 106, 112, 114, 119, 120, 127, 131, 132, 134, 135, 136, 139, 146, 148, 158, 165, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 186, 190, 192, 197, 198, 200, 213, 214, 218, 222, 227, 228, 232, 234, 235, 246, 247, 248, 251, 252, 259, 266, 277], "overhead": [3, 6, 7, 11, 19, 61, 86, 119, 132, 133, 136, 141, 146, 156, 158, 167, 172, 175, 177, 178, 183, 187, 193, 197, 199, 200, 211, 216, 228, 247, 252, 262, 273, 280], "increas": [3, 6, 7, 21, 22, 23, 27, 40, 41, 48, 79, 86, 87, 92, 95, 104, 112, 132, 133, 134, 136, 138, 139, 140, 144, 153, 164, 167, 172, 183, 190, 199, 211, 230, 235, 245, 246, 247, 261, 262, 265, 266, 267, 280], "mostli": [3, 11, 22, 89, 94, 104, 139, 177, 179, 194], "util": [3, 4, 6, 11, 16, 22, 25, 26, 27, 28, 37, 40, 41, 48, 54, 56, 58, 60, 79, 86, 97, 101, 103, 112, 119, 120, 121, 127, 131, 132, 133, 134, 136, 139, 141, 148, 152, 153, 155, 156, 158, 165, 167, 169, 170, 172, 173, 176, 178, 179, 181, 183, 184, 186, 187, 192, 198, 211, 213, 216, 218, 222, 225, 228, 229, 232, 234, 236, 237, 243, 245, 246, 260, 261, 266, 269, 270, 272, 274, 276, 280], "deploy": [3, 5, 28, 104, 138, 200, 213, 236, 266, 276], "import": [3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 40, 47, 51, 54, 55, 56, 57, 58, 79, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 109, 112, 114, 116, 121, 124, 132, 133, 134, 135, 136, 140, 141, 142, 143, 146, 148, 149, 152, 153, 154, 158, 164, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 183, 184, 187, 189, 190, 194, 195, 197, 200, 201, 206, 208, 209, 210, 211, 213, 215, 216, 218, 222, 223, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 237, 243, 247, 259, 260, 261, 262, 267, 270, 272, 277, 278, 280, 281], "appear": [3, 12, 15, 25, 28, 111, 189, 243], "won": [3, 6, 11, 47, 112, 120, 132, 143, 152, 161, 166, 173, 189, 190, 210, 246], "heart": [3, 54, 235], "veri": [3, 4, 5, 6, 7, 10, 15, 16, 21, 22, 24, 25, 26, 27, 28, 44, 49, 51, 53, 54, 69, 79, 89, 95, 99, 106, 108, 112, 120, 127, 132, 136, 137, 139, 164, 165, 174, 175, 177, 178, 179, 181, 183, 184, 190, 192, 206, 208, 243, 252, 261, 275], "time": [3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 19, 22, 24, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 65, 67, 68, 69, 71, 72, 73, 76, 77, 79, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 120, 121, 124, 127, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 164, 165, 166, 167, 171, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 197, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 216, 219, 221, 222, 226, 227, 228, 229, 234, 235, 243, 245, 246, 247, 248, 249, 250, 251, 253, 259, 260, 262, 263, 264, 265, 266, 273, 274, 275, 276, 278, 279], "tool": [3, 7, 10, 15, 24, 28, 56, 86, 92, 94, 95, 99, 103, 105, 120, 132, 146, 148, 149, 155, 167, 175, 178, 183, 184, 186, 193, 197, 230, 243, 251, 274, 280], "compil": [3, 5, 7, 8, 10, 11, 17, 19, 24, 25, 28, 89, 105, 131, 148, 154, 180, 189, 199, 200, 211, 214, 223, 232, 236, 247, 250, 252, 261, 262, 266, 269, 270, 277, 279], "boost": [3, 104, 106, 155, 156, 199, 210, 214, 223, 232, 236, 237], "would": [3, 4, 5, 6, 7, 10, 15, 17, 18, 21, 22, 23, 24, 25, 26, 28, 35, 47, 54, 58, 60, 79, 92, 94, 97, 99, 102, 104, 108, 111, 112, 117, 121, 127, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 149, 153, 154, 155, 156, 158, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 179, 186, 187, 189, 190, 192, 193, 197, 198, 208, 209, 214, 221, 223, 229, 231, 232, 243, 271, 272, 276, 280], "demonstr": [3, 4, 15, 17, 18, 19, 23, 24, 25, 28, 42, 47, 55, 62, 86, 89, 95, 97, 103, 113, 117, 130, 131, 132, 133, 135, 136, 137, 142, 143, 146, 150, 152, 153, 154, 155, 158, 161, 167, 169, 170, 173, 175, 176, 177, 178, 183, 186, 189, 190, 193, 194, 195, 197, 198, 199, 200, 208, 210, 211, 213, 215, 216, 218, 219, 226, 228, 229, 231, 234, 235, 237, 246, 247, 251, 252, 265, 266, 271, 273, 274, 275, 276, 278, 280, 281], "mnist": [3, 7, 37, 48, 51, 79, 97, 101, 103, 130, 131, 132, 138, 142, 148, 150, 166, 176, 181, 184, 237, 249, 266], "libtorch": [3, 4, 7, 25, 26, 222, 236, 266, 279], "counterpart": [3, 19, 155, 189, 216, 231, 236], "syntax": [3, 26, 28, 53, 88, 90, 91, 121, 131, 247], "step": [3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 26, 35, 39, 40, 47, 48, 51, 54, 57, 65, 79, 86, 89, 94, 97, 103, 104, 105, 106, 112, 114, 117, 130, 131, 132, 133, 134, 139, 140, 141, 142, 144, 146, 148, 149, 155, 157, 161, 165, 167, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 189, 190, 194, 197, 198, 199, 201, 210, 211, 213, 216, 218, 222, 225, 226, 228, 229, 232, 234, 236, 237, 243, 246, 259, 260, 262, 270, 276, 281], "depict": [3, 101, 190], "chunk": [3, 6, 60, 148, 164, 167, 169, 195], "batch": [3, 6, 7, 18, 19, 22, 23, 24, 37, 40, 41, 42, 49, 51, 54, 56, 57, 58, 60, 61, 79, 86, 92, 94, 95, 97, 101, 102, 103, 104, 109, 112, 121, 127, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 148, 149, 150, 157, 158, 161, 164, 166, 167, 169, 172, 173, 174, 176, 177, 178, 180, 181, 183, 184, 186, 187, 190, 192, 193, 195, 199, 208, 211, 214, 216, 221, 237, 246, 247], "data_load": [3, 7, 22], "optim": [3, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 26, 28, 35, 36, 37, 38, 39, 42, 44, 45, 47, 51, 54, 58, 60, 65, 69, 70, 71, 74, 79, 86, 89, 92, 94, 97, 101, 104, 105, 113, 117, 121, 127, 131, 132, 133, 136, 141, 142, 144, 146, 148, 149, 150, 153, 154, 155, 157, 158, 165, 166, 167, 171, 172, 173, 174, 175, 176, 179, 180, 181, 183, 184, 186, 187, 189, 192, 193, 199, 201, 206, 211, 213, 214, 216, 219, 222, 223, 228, 229, 234, 236, 237, 246, 247, 251, 259, 260, 263, 266, 267, 269, 270, 271, 274, 276, 277, 279], "zero_grad": [3, 7, 22, 40, 51, 79, 94, 103, 112, 132, 133, 134, 140, 146, 148, 164, 175, 177, 181, 184, 190, 228, 229, 236, 237, 260, 265, 270], "nll_loss": [3, 79, 132, 148, 176, 181, 237], "updat": [3, 7, 11, 12, 13, 14, 15, 18, 19, 22, 24, 26, 40, 47, 48, 54, 56, 57, 73, 86, 94, 104, 106, 111, 112, 113, 120, 121, 131, 132, 133, 134, 138, 142, 146, 149, 158, 164, 173, 174, 176, 177, 183, 190, 193, 206, 215, 216, 223, 225, 229, 232, 234, 237, 246, 259, 264, 281], "captur": [3, 5, 7, 25, 26, 28, 57, 94, 113, 114, 116, 131, 132, 152, 186, 187, 189, 190, 193, 197, 200, 247, 277], "But": [3, 7, 10, 11, 23, 48, 49, 57, 79, 95, 102, 108, 111, 137, 146, 158, 164, 165, 166, 174, 189, 192, 206, 209, 221, 237, 247], "slightli": [3, 6, 15, 26, 133, 148, 149, 167, 172, 179, 209, 247, 262], "prealloc": 3, "reus": [3, 11, 69, 112, 120, 143, 152, 165, 174, 190, 262, 266, 267, 280], "tensoropt": [3, 200], "floatcuda": 3, "dtype": [3, 4, 10, 11, 15, 16, 17, 56, 102, 108, 114, 134, 143, 158, 169, 181, 189, 194, 195, 198, 200, 209, 222, 234, 236, 246, 259, 270, 272], "longcuda": 3, "klong": 3, "zero": [3, 7, 12, 19, 22, 35, 40, 45, 51, 54, 79, 94, 95, 97, 99, 102, 103, 111, 112, 132, 133, 140, 148, 149, 161, 165, 167, 170, 171, 175, 177, 179, 184, 206, 208, 209, 215, 216, 237, 246, 250, 252, 258, 261, 262, 266, 277, 281], "ktrainbatchs": 3, "28": [3, 7, 19, 37, 40, 79, 99, 101, 112, 140, 150, 166, 181, 184, 216, 234, 235, 237, 247, 261], "copy_": [3, 44, 53, 119, 134, 155, 175, 181, 251, 259], "training_step": 3, "call": [3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 42, 44, 45, 47, 48, 49, 51, 54, 56, 57, 58, 60, 71, 79, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 111, 112, 117, 119, 120, 121, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 152, 153, 154, 155, 157, 158, 161, 164, 165, 166, 167, 169, 170, 171, 173, 175, 176, 177, 178, 179, 181, 183, 186, 189, 190, 197, 200, 215, 216, 221, 222, 223, 226, 228, 229, 230, 232, 234, 235, 246, 247, 248, 249, 251, 252, 260, 261, 262, 265, 272, 273, 274, 275, 277, 280], "void": [3, 4, 6, 7, 16, 25, 26, 155, 170, 200, 210, 234, 247, 252, 261], "net": [3, 7, 22, 48, 49, 51, 54, 57, 79, 89, 92, 97, 101, 102, 104, 132, 148, 161, 172, 176, 181, 183, 184, 237, 249], "stream": [3, 16, 86, 102, 105, 134, 167, 172, 200, 234, 236], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 24, 75, 78, 119, 183, 187, 211, 219, 234, 235, 247, 252], "side": [3, 23, 56, 57, 86, 111, 150, 158, 164, 166, 167, 170, 174, 175, 181, 183, 243], "prepar": [3, 12, 19, 22, 28, 48, 56, 57, 72, 73, 101, 109, 120, 121, 150, 164, 169, 170, 173, 175, 213, 214, 216, 227, 252, 266], "cach": [3, 141, 155, 183, 193, 199, 210, 262, 266, 275, 280], "cubla": [3, 247], "cudnn": [3, 6, 139, 142, 149, 158, 246], "warmupstream": 3, "int": [3, 4, 5, 6, 7, 12, 21, 22, 25, 26, 56, 58, 60, 132, 133, 135, 146, 148, 155, 169, 170, 175, 176, 177, 183, 187, 189, 192, 195, 197, 210, 222, 231, 236, 279, 280], "num_warmup_it": 3, "success": [3, 7, 15, 26, 79, 108, 138, 155, 179, 222, 243], "replac": [3, 4, 7, 22, 27, 47, 60, 62, 95, 106, 112, 113, 117, 119, 127, 131, 132, 134, 148, 152, 158, 171, 177, 179, 183, 189, 192, 195, 199, 208, 211, 220, 236, 247, 277], "replai": [3, 15, 28, 157], "spin": [3, 97], "ordinari": 3, "epoch": [3, 7, 18, 22, 37, 40, 41, 57, 58, 60, 92, 97, 101, 104, 106, 112, 121, 127, 132, 133, 134, 138, 139, 148, 158, 164, 173, 177, 181, 184, 192, 237, 260], "59584": 3, "60000": [3, 40, 103, 140, 148, 181], "3921": 3, "test": [3, 10, 22, 23, 25, 26, 27, 37, 40, 41, 54, 87, 89, 95, 97, 103, 104, 106, 107, 113, 114, 124, 131, 132, 133, 139, 148, 150, 152, 155, 158, 167, 172, 176, 179, 181, 184, 187, 189, 197, 199, 214, 221, 234, 235, 236, 237, 247, 279], "2051": 3, "accuraci": [3, 19, 22, 23, 27, 40, 41, 48, 97, 103, 104, 112, 130, 131, 132, 133, 134, 138, 161, 171, 172, 176, 181, 184, 186, 213, 216, 235, 246, 260, 265, 266], "938": [3, 7, 158], "1826": 3, "1273": 3, "960": [3, 56, 122], "1796": 3, "1012": [3, 158], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 7, 12, 22, 26, 39, 40, 54, 89, 95, 97, 99, 102, 103, 111, 113, 117, 119, 121, 142, 143, 148, 155, 158, 170, 171, 172, 175, 177, 181, 186, 187, 189, 193, 199, 201, 216, 231, 234, 235, 237, 246, 274, 275, 276, 279, 280], "0511": 3, "0704": 3, "977": [3, 158, 235], "7": [3, 6, 7, 19, 21, 22, 25, 26, 39, 40, 56, 89, 103, 119, 127, 132, 133, 140, 148, 157, 158, 172, 181, 186, 187, 190, 195, 198, 199, 201, 210, 218, 222, 223, 225, 226, 231, 234, 235, 237, 246, 273, 277], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 6, 7, 19, 21, 22, 26, 37, 40, 47, 54, 79, 92, 97, 103, 111, 112, 119, 121, 155, 165, 172, 175, 181, 184, 186, 190, 201, 216, 222, 234, 235, 236, 237, 247, 249, 252, 270], "0669": 3, "0544": 3, "984": [3, 235], "0219": 3, "0517": [3, 181], "983": 3, "real": [3, 7, 15, 23, 35, 41, 57, 59, 94, 104, 105, 106, 107, 111, 131, 132, 139, 140, 148, 149, 164, 170, 174, 179, 187, 189, 190, 197, 208, 211, 235, 247], "0m44": 3, "287": 3, "018": 3, "sy": [3, 21, 22, 58, 60, 146, 148, 170, 225, 234], "0m1": 3, "116": [3, 197], "produc": [3, 5, 6, 7, 12, 25, 26, 28, 72, 104, 113, 120, 138, 141, 149, 150, 152, 154, 156, 158, 167, 173, 174, 179, 186, 189, 190, 194, 213, 222, 229, 246, 262, 267], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 216], "0520": 3, "0710": 3, "0935": 3, "0666": [3, 26], "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 155], "0m7": 3, "048": [3, 223], "0m0": 3, "619": 3, "gain": [3, 6, 19, 86, 183, 195, 214, 216], "six": [3, 173, 181], "kind": [3, 6, 7, 22, 26, 40, 48, 51, 54, 79, 95, 103, 105, 109, 121, 131, 280], "larg": [3, 4, 6, 7, 8, 13, 17, 18, 19, 21, 26, 40, 44, 54, 65, 92, 95, 99, 101, 104, 109, 111, 112, 114, 120, 127, 130, 131, 132, 133, 135, 138, 142, 146, 148, 150, 161, 167, 169, 173, 174, 176, 177, 178, 186, 187, 190, 192, 195, 197, 208, 216, 218, 225, 231, 235, 246, 252, 253, 262, 267], "improv": [3, 6, 7, 10, 11, 19, 22, 23, 24, 27, 40, 54, 61, 97, 102, 104, 112, 117, 130, 131, 132, 133, 134, 135, 136, 139, 142, 153, 158, 165, 174, 178, 179, 186, 187, 193, 197, 198, 199, 210, 214, 216, 223, 225, 227, 232, 234, 236, 246, 247, 260, 262, 270, 274], "due": [3, 6, 7, 19, 21, 25, 57, 86, 89, 102, 113, 117, 132, 136, 141, 146, 164, 165, 176, 187, 193, 197, 199, 208, 213, 216, 218, 226, 230, 232, 237, 277, 280], "size": [3, 4, 6, 7, 10, 12, 13, 15, 19, 21, 22, 23, 24, 26, 35, 36, 40, 41, 45, 47, 48, 49, 51, 54, 56, 57, 60, 86, 92, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 121, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 148, 149, 150, 155, 156, 157, 158, 161, 164, 166, 167, 170, 172, 173, 174, 175, 176, 179, 181, 183, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 206, 209, 211, 214, 216, 228, 229, 230, 232, 236, 246, 247, 251, 253, 260, 261, 262, 266, 281], "larger": [3, 10, 13, 79, 86, 94, 104, 112, 116, 121, 131, 132, 133, 136, 138, 144, 153, 167, 174, 177, 179, 183, 186, 187, 199, 211, 219, 228, 229, 235, 247, 267], "heavi": [3, 7, 54, 104, 108], "less": [3, 6, 7, 8, 10, 17, 22, 61, 86, 99, 104, 105, 112, 116, 127, 133, 138, 149, 152, 164, 167, 173, 174, 175, 183, 184, 187, 189, 190, 193, 197, 199, 231, 247, 251], "impact": [3, 13, 19, 40, 92, 104, 149, 167, 175, 178, 199, 216, 245, 280, 281], "smaller": [3, 40, 56, 99, 104, 111, 112, 132, 136, 173, 175, 186, 219, 247, 251, 267], "nevertheless": [3, 6, 22, 26, 158, 173], "richard": 4, "zou": 4, "integr": [4, 7, 11, 15, 17, 26, 39, 92, 113, 117, 119, 131, 138, 141, 169, 183, 184, 187, 193, 194, 210, 214, 215, 222, 228, 235, 243, 245, 259, 264, 274, 280], "opcheck": [4, 17], "basic": [4, 10, 12, 16, 17, 18, 26, 27, 35, 36, 37, 40, 41, 42, 44, 45, 54, 59, 61, 62, 77, 81, 84, 91, 94, 97, 98, 99, 102, 104, 107, 111, 112, 113, 114, 116, 117, 120, 131, 136, 139, 142, 155, 162, 169, 173, 178, 190, 193, 207, 211, 228, 229, 247, 260, 266, 271, 272, 276, 277], "program": [4, 5, 6, 21, 24, 25, 26, 28, 65, 99, 105, 107, 108, 111, 131, 136, 139, 154, 167, 169, 176, 187, 195, 197, 201, 215, 229, 247, 262, 276, 277, 279, 280], "amd": [4, 6], "rocm": [4, 6, 183], "modif": [4, 15, 16, 22, 23, 24, 92, 105, 112, 142, 148, 171, 173, 176, 181, 184, 189, 193, 261, 267, 277], "e": [4, 5, 6, 7, 8, 10, 11, 12, 17, 21, 25, 26, 28, 35, 36, 41, 47, 48, 54, 56, 57, 65, 79, 89, 92, 94, 97, 99, 102, 104, 107, 111, 112, 121, 127, 131, 132, 134, 135, 136, 138, 139, 140, 143, 145, 146, 148, 150, 153, 158, 165, 166, 170, 171, 175, 177, 179, 183, 187, 189, 193, 194, 208, 209, 211, 213, 214, 218, 221, 222, 227, 231, 232, 234, 236, 247, 249, 252, 261, 262, 264, 265, 279], "g": [4, 6, 7, 8, 10, 11, 12, 15, 17, 21, 26, 28, 47, 54, 56, 57, 65, 92, 94, 97, 99, 102, 104, 106, 107, 111, 127, 131, 132, 134, 138, 139, 140, 146, 148, 150, 155, 164, 166, 170, 173, 175, 177, 179, 183, 187, 189, 193, 194, 200, 209, 213, 214, 221, 222, 231, 234, 247, 252, 261, 262], "etc": [4, 8, 11, 17, 48, 49, 51, 54, 56, 73, 97, 99, 102, 105, 106, 107, 108, 112, 121, 136, 167, 171, 173, 174, 179, 189, 190, 193, 208, 213, 227, 232, 235, 236, 247, 249, 262, 264], "wish": [4, 6, 7, 8, 17, 26, 57, 79, 95, 102, 121, 135, 161, 166, 176, 186, 190, 194, 207, 229, 246, 275], "bring": [4, 8, 95, 135, 167, 173, 183, 186, 190, 199, 209, 221, 232, 252, 262, 280], "bless": 4, "path": [4, 5, 6, 7, 21, 22, 25, 26, 37, 54, 55, 56, 57, 58, 79, 86, 92, 94, 97, 102, 103, 104, 105, 112, 121, 132, 133, 140, 155, 170, 186, 187, 193, 197, 198, 199, 206, 213, 222, 223, 228, 229, 234, 243, 247, 259, 261, 262, 263, 279, 280], "fuse": [4, 6, 19, 22, 131, 155, 172, 180, 193, 194, 199, 210, 216, 222, 234, 266], "subsystem": [4, 8, 17, 189, 274], "def": [4, 5, 6, 7, 10, 12, 15, 21, 22, 24, 25, 26, 40, 56, 58, 60, 79, 89, 103, 114, 121, 132, 133, 134, 135, 136, 140, 141, 143, 146, 148, 155, 158, 165, 169, 170, 175, 176, 177, 181, 184, 186, 194, 195, 200, 201, 206, 210, 213, 215, 216, 218, 225, 227, 228, 229, 231, 232, 234, 235, 237, 243, 247, 260, 272, 277, 281], "mymuladd": 4, "end": [4, 5, 6, 7, 10, 15, 17, 19, 22, 25, 26, 28, 35, 47, 54, 57, 59, 65, 86, 89, 94, 95, 97, 99, 102, 104, 109, 112, 120, 131, 133, 135, 136, 138, 140, 142, 148, 149, 155, 157, 164, 169, 172, 174, 175, 177, 179, 181, 183, 184, 187, 189, 190, 195, 199, 206, 215, 216, 236, 237, 246, 247, 252, 259, 262, 266, 276, 281], "bind": [4, 5, 7, 8, 11, 26, 131, 135, 198, 262, 280], "precompil": 4, "instead": [4, 5, 6, 7, 8, 10, 11, 17, 19, 22, 23, 25, 26, 28, 35, 48, 49, 54, 56, 57, 58, 68, 94, 97, 102, 103, 105, 106, 111, 112, 119, 120, 127, 132, 133, 134, 137, 138, 140, 143, 144, 148, 153, 154, 156, 157, 158, 161, 164, 170, 171, 172, 175, 176, 177, 179, 181, 183, 184, 186, 187, 189, 190, 192, 193, 194, 199, 206, 208, 209, 210, 211, 216, 221, 222, 229, 232, 235, 238, 243, 253, 267, 273, 275, 281], "cpp_extens": [4, 6, 11, 26, 170, 247], "extens": [4, 7, 8, 16, 20, 25, 26, 57, 95, 121, 131, 134, 141, 143, 148, 186, 200, 206, 208, 214, 235, 237, 247, 250, 258, 266, 273], "ahead": [4, 6, 25, 40, 97, 141, 164, 184, 189, 194, 229, 262, 276, 279], "setuptool": [4, 11, 170, 183], "load_inlin": [4, 26, 247], "setup": [4, 6, 7, 11, 18, 22, 25, 39, 57, 58, 60, 132, 133, 138, 146, 164, 170, 177, 197, 199, 208, 209, 215, 221, 222, 228, 229, 231, 247, 261], "extension_cpp": 4, "ext_modul": [4, 6, 11, 26, 170], "cppextens": [4, 6, 11, 26, 170], "muladd": 4, "cpp": [4, 5, 6, 7, 10, 25, 26, 130, 131, 155, 210, 214, 236, 261, 276, 279], "py_limited_api": 4, "min": [4, 22, 57, 86, 99, 104, 127, 148, 170, 173, 175, 177, 186, 189, 277], "expos": [4, 6, 7, 10, 25, 26, 103, 134, 177, 190, 215, 222, 262], "stabl": [4, 5, 23, 29, 30, 31, 32, 33, 54, 67, 79, 104, 105, 116, 120, 127, 135, 151, 172, 182, 183, 185, 220, 237, 246], "limit": [4, 5, 7, 11, 12, 16, 19, 22, 42, 54, 65, 79, 113, 132, 136, 139, 149, 150, 157, 158, 166, 167, 179, 187, 189, 190, 199, 216, 228, 247, 259], "subset": [4, 15, 24, 26, 89, 92, 97, 101, 104, 116, 127, 148, 170, 186, 208, 209, 235, 247, 279], "extra_compile_arg": [4, 11], "cxx": [4, 5, 7, 25, 26, 201, 222, 236], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 54, 104, 173, 183, 214], "cmdclass": [4, 6, 11, 26, 170], "build_ext": [4, 6, 11, 26, 170], "buildextens": [4, 6, 11, 26, 170], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 170], "cpython": [4, 6, 26, 261], "agnost": [4, 6, 248], "pure": [4, 5, 6, 7, 11, 26, 131, 139, 143, 150, 166, 189, 192, 200, 210], "agnostic": 4, "minim": [4, 7, 11, 13, 19, 26, 40, 57, 67, 68, 71, 72, 73, 76, 77, 79, 86, 94, 106, 111, 112, 120, 131, 133, 138, 145, 155, 169, 174, 187, 190, 206, 213, 216, 262, 265, 267], "oldest": 4, "hexcod": 4, "throughout": [4, 13, 28, 57, 109, 148, 164, 167, 173, 184, 208, 259], "environ": [4, 5, 6, 7, 8, 12, 17, 20, 21, 25, 28, 39, 60, 86, 89, 95, 98, 101, 114, 124, 131, 132, 133, 136, 141, 145, 146, 148, 155, 167, 169, 170, 174, 175, 176, 177, 187, 189, 190, 193, 195, 197, 210, 215, 222, 223, 227, 228, 229, 230, 231, 232, 235, 243, 245, 247, 261, 262, 271, 276, 278, 279, 280, 281], "unknown": 4, "behavior": [4, 10, 11, 12, 13, 15, 25, 28, 40, 54, 56, 99, 109, 112, 113, 149, 154, 155, 158, 164, 167, 181, 187, 189, 207, 208, 218, 251, 262, 273, 275, 280], "runnabl": [4, 138, 155, 190, 265], "three": [4, 7, 11, 13, 15, 16, 37, 40, 56, 57, 68, 79, 86, 89, 94, 95, 101, 102, 105, 112, 117, 120, 121, 131, 135, 136, 139, 140, 158, 162, 165, 167, 170, 173, 177, 178, 179, 181, 183, 184, 190, 197, 199, 209, 210, 243, 252, 279], "line": [4, 5, 6, 7, 10, 13, 17, 24, 25, 26, 54, 55, 56, 60, 61, 86, 97, 101, 102, 103, 104, 106, 112, 119, 138, 139, 140, 146, 148, 154, 155, 172, 174, 176, 177, 179, 183, 184, 187, 189, 197, 200, 201, 206, 208, 228, 229, 231, 236, 237, 251, 260, 262, 277, 278, 279, 280], "specif": [4, 6, 7, 10, 11, 12, 19, 21, 22, 25, 26, 28, 37, 41, 48, 60, 79, 86, 92, 94, 95, 97, 99, 101, 103, 106, 107, 108, 112, 113, 114, 116, 117, 121, 124, 132, 133, 136, 139, 140, 142, 148, 149, 155, 167, 169, 171, 173, 175, 176, 177, 178, 179, 183, 184, 189, 190, 192, 193, 194, 207, 210, 211, 213, 215, 216, 222, 223, 227, 228, 229, 235, 236, 243, 245, 252, 259, 261, 266, 271, 274, 276, 280, 281], "verifi": [4, 7, 23, 89, 94, 102, 117, 124, 143, 150, 152, 153, 156, 158, 171, 172, 190, 192, 198, 222, 235, 236, 243, 279], "met": [4, 15, 132, 167], "crash": [4, 7, 197], "wors": [4, 22], "silent": [4, 17, 155, 187, 259], "incorrect": [4, 17, 57, 94, 97, 137, 143, 167, 187], "avoid": [4, 6, 18, 48, 92, 101, 104, 132, 133, 134, 136, 142, 146, 148, 158, 161, 164, 173, 175, 187, 189, 198, 199, 206, 207, 211, 214, 215, 216, 218, 228, 246, 247, 251, 252, 259, 271, 280], "unstabl": 4, "libtorch_python": 4, "particular": [4, 5, 6, 7, 10, 12, 26, 37, 48, 56, 86, 87, 92, 94, 95, 97, 99, 111, 136, 138, 139, 141, 148, 150, 161, 166, 169, 176, 186, 189, 192, 193, 194, 206, 207, 209, 211, 251, 262, 271], "aten": [4, 6, 10, 11, 16, 26, 117, 119, 155, 183, 189, 200, 210, 213, 234, 235, 236, 243, 252, 261], "strongli": [4, 16, 149, 165, 193], "recommend": [4, 5, 7, 8, 10, 11, 16, 21, 22, 23, 26, 65, 86, 95, 101, 112, 116, 131, 134, 140, 146, 162, 172, 179, 183, 189, 190, 192, 193, 195, 197, 208, 213, 214, 223, 228, 235, 236, 243, 251, 260, 261, 262, 279], "ascertain": [4, 198], "compliant": [4, 192, 228, 229], "safe": [4, 22, 26, 104, 167], "guarante": [4, 11, 104, 145, 148, 158, 167, 171, 176, 177, 189, 207, 277], "better": [4, 6, 7, 15, 19, 22, 24, 37, 40, 41, 48, 57, 61, 94, 97, 99, 101, 104, 111, 112, 116, 119, 131, 134, 135, 138, 139, 140, 141, 155, 156, 157, 164, 166, 167, 173, 174, 179, 183, 184, 186, 189, 195, 199, 206, 207, 216, 223, 247, 262, 270, 280], "wild": 4, "west": 4, "There": [4, 5, 7, 10, 11, 15, 16, 19, 25, 26, 28, 35, 51, 79, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 127, 130, 140, 141, 145, 149, 150, 154, 156, 158, 161, 164, 166, 169, 172, 173, 176, 177, 179, 189, 190, 191, 192, 193, 194, 197, 208, 216, 247, 249, 254, 255, 256, 257, 261, 262, 265, 268, 271, 276, 278, 280], "caveat": [4, 146, 175, 197, 247, 251], "yourself": [4, 5, 6, 7, 10, 26, 39, 97, 108, 131, 157, 190], "truli": [4, 7, 54, 157], "relev": [4, 5, 7, 15, 58, 105, 107, 111, 124, 133, 136, 171, 186, 189, 198, 262, 264, 271, 277], "third": [4, 7, 10, 13, 17, 25, 26, 57, 67, 68, 69, 71, 72, 73, 76, 77, 99, 102, 109, 120, 131, 135, 143, 170, 179, 206, 221], "intend": [4, 6, 7, 10, 13, 26, 94, 104, 132, 136, 155, 158, 178, 187, 189, 193, 206, 227, 249, 262, 272], "influenc": [4, 7, 57, 99, 167, 280], "accordingli": [4, 5, 11, 21, 25, 149, 164, 175, 186, 223], "command": [4, 5, 6, 7, 15, 26, 55, 95, 101, 103, 116, 124, 131, 134, 145, 146, 167, 170, 173, 175, 176, 177, 179, 183, 184, 186, 192, 195, 197, 201, 229, 231, 235, 236, 252, 260, 262, 276, 277, 278, 279], "consequ": [4, 136, 167, 174, 189], "properli": [4, 10, 11, 15, 26, 55, 60, 104, 143, 146, 148, 158, 164, 165, 173, 175, 176, 177, 179, 193, 206, 208, 218, 259], "could": [4, 5, 6, 7, 10, 11, 12, 26, 57, 92, 94, 99, 104, 105, 106, 108, 109, 111, 114, 119, 132, 133, 136, 137, 140, 148, 158, 164, 167, 173, 174, 175, 176, 177, 179, 183, 184, 186, 189, 192, 194, 206, 208, 210, 213, 221, 229, 230, 231, 232, 236, 237, 243, 251, 252, 280], "outsid": [4, 11, 15, 16, 26, 49, 131, 134, 136, 142, 183, 186, 189, 206, 259, 267, 275], "cannot": [4, 6, 7, 12, 15, 21, 25, 26, 54, 65, 86, 102, 113, 117, 120, 121, 134, 135, 143, 146, 148, 149, 158, 167, 173, 187, 189, 199, 219, 221, 234, 274], "mymuladd_cpu": 4, "const": [4, 5, 6, 7, 10, 11, 16, 25, 26, 155, 170, 200, 210, 234, 236, 247, 261, 279], "torch_check": [4, 6, 10], "torch_internal_assert": [4, 10], "devicetyp": [4, 10, 16], "a_contig": 4, "contigu": [4, 6, 10, 36, 158, 210, 262], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 10, 26, 200], "b_ptr": 4, "result_ptr": [4, 10], "int64_t": [4, 7, 10, 26, 210, 234], "numel": [4, 10, 158, 175, 206, 261], "order": [4, 5, 7, 8, 12, 13, 16, 17, 19, 23, 25, 35, 36, 37, 48, 49, 54, 55, 60, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 92, 94, 95, 97, 102, 112, 113, 114, 116, 117, 119, 120, 131, 132, 134, 137, 138, 140, 143, 146, 148, 154, 155, 156, 158, 170, 171, 176, 179, 181, 186, 187, 189, 190, 192, 193, 194, 195, 208, 211, 216, 221, 232, 234, 251, 261, 271, 272, 280], "torch_librari": [4, 5, 7, 8, 10, 17, 25, 26, 236, 279], "ensur": [4, 6, 10, 11, 12, 13, 15, 16, 22, 25, 40, 41, 54, 58, 61, 68, 104, 112, 113, 119, 120, 121, 132, 145, 146, 148, 152, 167, 169, 173, 174, 176, 178, 186, 187, 190, 198, 200, 210, 215, 218, 228, 247, 249, 259, 265, 274, 279, 280], "awar": [4, 79, 94, 102, 136, 138, 148, 149, 158, 178, 189, 206, 274], "top": [4, 6, 7, 10, 19, 22, 23, 25, 26, 39, 55, 56, 57, 86, 87, 95, 98, 101, 103, 104, 112, 136, 148, 172, 177, 178, 183, 184, 187, 192, 213, 216, 235, 243, 245, 279], "project": [4, 5, 6, 7, 26, 57, 94, 101, 121, 136, 170, 174, 179, 184, 211, 236, 237, 243, 266, 279, 281], "schema": [4, 11, 23, 26], "mutat": [4, 10, 11, 17, 120, 150, 166, 167, 189, 221, 226, 234], "m": [4, 5, 6, 7, 10, 11, 15, 16, 22, 25, 26, 35, 47, 54, 94, 99, 103, 108, 112, 132, 133, 140, 155, 156, 158, 170, 172, 175, 177, 210, 216, 218, 229, 235, 243, 262, 280], "torch_library_impl": [4, 10, 11, 16], "impl": [4, 10, 11, 16, 261], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 22, 37, 56, 172, 184, 216], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 13, 104, 186, 194, 252], "256": [4, 7, 19, 22, 56, 92, 136, 137, 157, 179, 189, 216, 223, 234, 235, 252], "faketensor": [4, 17, 189, 198], "kernel": [4, 6, 7, 8, 10, 14, 17, 19, 21, 26, 87, 99, 102, 112, 117, 131, 134, 139, 150, 155, 158, 165, 166, 167, 178, 179, 180, 183, 187, 189, 190, 193, 199, 200, 201, 210, 213, 216, 220, 223, 232, 243, 247, 249, 251, 252, 262, 266, 269, 272, 277], "meta": [4, 17, 21, 134, 136, 138, 150, 166, 173, 189, 190, 218, 253, 259, 266], "abstract": [4, 6, 12, 15, 37, 56, 65, 92, 102, 103, 107, 112, 120, 136, 138, 148, 153, 167, 170, 173, 190, 230, 231], "metadata": [4, 11, 17, 19, 25, 141, 173, 184, 189, 198, 216, 251], "correct": [4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 22, 40, 47, 48, 51, 54, 68, 79, 89, 92, 94, 95, 97, 99, 102, 103, 105, 106, 112, 120, 132, 133, 137, 142, 149, 155, 158, 165, 173, 175, 176, 179, 181, 183, 184, 190, 195, 198, 211, 231, 237, 246, 259, 277], "stride": [4, 6, 7, 17, 22, 57, 79, 95, 99, 132, 142, 155, 158, 181, 186, 189, 194, 198, 209, 251], "register_fak": [4, 17], "though": [4, 7, 11, 26, 51, 79, 94, 102, 104, 105, 127, 142, 143, 150, 154, 166, 173, 184, 189, 190, 199, 206, 236, 247, 261], "definit": [4, 6, 7, 10, 11, 23, 25, 28, 42, 51, 72, 79, 89, 106, 120, 131, 154, 165, 174, 178, 207, 237, 261, 262], "load": [4, 6, 19, 21, 22, 23, 24, 26, 27, 35, 36, 38, 39, 40, 44, 45, 47, 51, 56, 57, 60, 79, 92, 97, 102, 103, 105, 112, 114, 122, 131, 132, 134, 139, 155, 158, 164, 167, 169, 173, 183, 184, 186, 189, 190, 192, 197, 199, 200, 215, 216, 217, 222, 228, 234, 236, 237, 246, 250, 258, 259, 261, 266, 267, 276, 277], "strive": 4, "load_librari": [4, 25, 26], "next": [4, 5, 6, 7, 10, 12, 13, 15, 16, 18, 19, 22, 23, 25, 26, 37, 47, 54, 56, 58, 60, 61, 86, 89, 94, 97, 99, 102, 103, 104, 105, 109, 112, 114, 121, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 145, 149, 150, 154, 155, 157, 161, 164, 166, 167, 174, 175, 176, 177, 179, 181, 183, 184, 189, 190, 195, 199, 201, 208, 209, 216, 219, 232, 235, 236, 243, 251, 252, 267, 272], "_c": [4, 79, 135, 197, 234], "_": [4, 6, 12, 13, 15, 16, 22, 24, 38, 44, 53, 54, 57, 96, 102, 103, 105, 112, 115, 116, 134, 135, 139, 148, 158, 161, 173, 175, 177, 184, 195, 213, 225, 227, 234, 235, 246, 251, 277, 281], "_check": 4, "empty_lik": [4, 102, 158, 206], "formula": [4, 11, 17, 104, 152, 173], "matter": [4, 6, 186, 206, 208, 225, 246], "wrong": [4, 57, 79, 106, 139, 155, 187], "hold": [4, 6, 15, 18, 21, 51, 67, 68, 69, 71, 72, 73, 92, 112, 120, 132, 133, 134, 139, 145, 164, 174, 175, 177, 251, 259, 262], "happen": [4, 10, 24, 26, 28, 35, 36, 37, 40, 47, 57, 94, 97, 99, 102, 104, 106, 112, 114, 133, 134, 136, 143, 146, 148, 167, 171, 175, 183, 184, 189, 190, 199, 230, 247, 251, 262, 265, 275, 277], "modul": [4, 6, 13, 14, 15, 18, 21, 22, 24, 25, 26, 27, 36, 40, 41, 42, 45, 48, 49, 51, 54, 58, 60, 65, 70, 72, 74, 79, 94, 95, 97, 102, 103, 106, 111, 114, 116, 121, 122, 127, 131, 132, 133, 134, 136, 137, 140, 141, 142, 146, 148, 153, 154, 155, 158, 161, 164, 166, 169, 170, 172, 173, 175, 176, 177, 178, 181, 184, 186, 187, 189, 193, 194, 197, 199, 200, 210, 213, 214, 215, 216, 219, 222, 227, 228, 229, 230, 231, 235, 236, 237, 243, 247, 249, 250, 252, 258, 262, 264, 266, 267, 279, 280], "initi": [4, 7, 10, 12, 15, 18, 21, 22, 23, 24, 25, 26, 28, 36, 37, 40, 47, 54, 60, 68, 76, 77, 79, 95, 97, 102, 103, 104, 106, 109, 111, 112, 119, 120, 121, 127, 132, 133, 136, 139, 140, 149, 150, 153, 155, 158, 164, 167, 169, 171, 172, 174, 175, 176, 177, 179, 181, 183, 187, 190, 193, 195, 197, 209, 214, 219, 222, 228, 229, 231, 235, 243, 245, 247, 251, 259, 262, 267, 279], "pybind11_modul": [4, 6, 170], "notic": [4, 6, 10, 15, 24, 25, 26, 28, 35, 47, 48, 57, 79, 89, 94, 97, 102, 104, 106, 121, 143, 148, 155, 157, 165, 166, 173, 183, 187, 189, 193, 206, 208, 265, 277, 279], "pybind11": [4, 6, 10, 25, 26, 170, 247], "promis": [4, 112, 210], "With": [4, 5, 10, 11, 16, 18, 19, 21, 22, 24, 44, 53, 57, 79, 89, 94, 95, 101, 108, 134, 136, 143, 146, 148, 155, 161, 164, 169, 175, 176, 177, 178, 179, 180, 195, 199, 200, 216, 223, 226, 227, 228, 231, 232, 243, 245, 251, 259, 262, 276, 279, 280, 281], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 106, 164, 167, 190, 193], "sai": [4, 5, 6, 7, 17, 27, 47, 56, 102, 106, 108, 111, 134, 137, 150, 156, 164, 171, 183, 199], "not_agnost": 4, "csrc": [4, 6, 25, 26, 170], "extension_bad": 4, "__init__": [4, 5, 6, 7, 12, 15, 22, 24, 25, 36, 40, 41, 56, 58, 79, 97, 99, 103, 106, 114, 121, 132, 139, 140, 141, 146, 148, 169, 171, 175, 176, 177, 181, 184, 186, 194, 210, 215, 218, 227, 228, 229, 231, 232, 235, 237, 243, 249, 251, 277], "successfulli": [4, 5, 7, 25, 55, 114, 135, 138, 148, 155, 169, 176, 189, 190, 208, 222, 234, 235, 249, 263, 264, 265, 279], "extern": [4, 56, 104, 121, 138, 154, 155, 200, 210, 234, 262], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 16, 25], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 197, 243], "interpret": [4, 6, 7, 26, 28, 61, 86, 89, 95, 111, 131, 140, 141, 179, 187, 189, 200, 214, 232, 247, 250, 258, 261, 266, 277, 280], "global": [4, 6, 7, 28, 54, 61, 92, 136, 164, 169, 176, 181, 189, 215, 216, 225, 227, 230, 232, 234, 248, 259, 261, 262], "variabl": [4, 5, 6, 7, 10, 23, 25, 26, 35, 54, 86, 92, 94, 102, 105, 106, 108, 112, 124, 141, 145, 148, 155, 169, 175, 178, 189, 190, 193, 197, 199, 201, 208, 210, 211, 215, 221, 222, 223, 235, 243, 271, 278, 280], "pymodule_cr": 4, "entir": [4, 6, 7, 15, 18, 21, 22, 28, 51, 54, 58, 104, 106, 109, 112, 127, 131, 132, 133, 139, 141, 142, 153, 164, 166, 169, 171, 173, 177, 179, 189, 190, 206, 207, 208, 229, 246, 251, 253, 262, 266, 267, 277], "statement": [4, 10, 24, 28, 35, 47, 49, 113, 179, 189, 215, 246, 248], "trigger": [4, 134, 146, 155, 167, 175, 177, 262], "challeng": [4, 15, 108, 109, 113, 132, 135, 136, 148, 153, 165, 174, 186, 229, 230, 231, 247, 266], "shift": [4, 173], "toward": [4, 22, 54, 104, 140, 174], "trivial": [4, 15, 56, 61, 102, 137, 190, 218, 230], "pathlib": [4, 112, 133, 186], "so_fil": 4, "__file__": [4, 6, 170, 247], "glob": [4, 140], "assert": [4, 6, 12, 21, 22, 56, 114, 134, 141, 146, 155, 176, 178, 184, 189, 195, 197, 216, 225, 234, 272], "len": [4, 22, 40, 56, 60, 79, 103, 112, 114, 127, 132, 133, 134, 140, 148, 175, 176, 181, 184, 186, 216, 231, 232, 237], "f": [4, 6, 10, 12, 13, 17, 21, 22, 25, 35, 40, 47, 51, 58, 60, 79, 94, 103, 106, 112, 114, 121, 132, 133, 135, 136, 137, 146, 148, 155, 156, 169, 170, 172, 175, 176, 177, 181, 184, 186, 195, 197, 200, 216, 221, 225, 227, 228, 229, 231, 232, 234, 235, 237, 243, 247, 279, 281], "register_autograd": [4, 17, 274], "prefer": [4, 5, 7, 10, 17, 58, 156, 161, 170, 173, 187, 190, 197, 210, 246, 274], "directli": [4, 5, 6, 7, 10, 12, 13, 15, 17, 23, 25, 26, 28, 36, 44, 53, 57, 89, 92, 94, 95, 102, 113, 114, 116, 117, 134, 135, 136, 141, 143, 144, 156, 167, 172, 173, 177, 179, 190, 197, 199, 208, 209, 218, 222, 227, 229, 232, 237, 280], "_backward": 4, "saved_tensor": [4, 6, 143], "grad_a": 4, "grad_b": 4, "none": [4, 12, 15, 16, 21, 22, 54, 56, 92, 94, 104, 112, 114, 132, 133, 134, 148, 150, 155, 158, 166, 169, 176, 186, 189, 194, 213, 216, 218, 223, 228, 229, 231, 232, 234, 260, 272], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 8, 12, 17, 28, 106, 107, 156, 169, 173, 231, 274], "had": [4, 7, 26, 51, 56, 94, 97, 102, 109, 112, 114, 120, 164, 165, 174, 184, 236, 243, 259], "own": [4, 6, 7, 10, 11, 12, 15, 18, 19, 21, 26, 28, 36, 37, 54, 57, 68, 79, 92, 94, 95, 97, 112, 117, 119, 120, 131, 132, 133, 134, 140, 141, 142, 146, 155, 164, 165, 171, 172, 173, 176, 177, 179, 186, 187, 189, 190, 192, 193, 194, 197, 199, 216, 228, 230, 232, 247, 259], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 13, 17, 54, 57, 79, 94, 95, 97, 124, 131, 134, 152, 158, 164, 167, 169, 171, 172, 186, 187, 190, 193, 208, 231, 265], "mathemat": [4, 11, 14, 17, 47, 53, 68, 94, 97, 99, 108, 148, 173, 189], "plan": [4, 5, 7, 8, 11, 21, 121, 133, 136, 186, 190, 209, 222], "gradcheck": [4, 17, 142, 143, 152, 262], "sample_input": [4, 121], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 5, 7, 22, 26, 40, 86, 89, 92, 102, 119, 132, 138, 139, 140, 146, 148, 149, 158, 164, 171, 175, 177, 181, 183, 216, 234, 237, 247, 252, 261, 277, 281], "14": [4, 7, 25, 26, 27, 79, 97, 132, 140, 155, 181, 186, 193, 235, 236, 237, 247, 252, 280], "123": [4, 56, 177, 235], "reference_muladd": 4, "extend": [4, 5, 6, 7, 10, 22, 27, 57, 92, 113, 114, 115, 116, 131, 132, 140, 149, 172, 176, 177, 186, 190, 194, 197, 200, 214, 236, 237, 262, 267, 271, 273], "arg": [4, 21, 22, 24, 56, 58, 60, 79, 108, 121, 132, 133, 146, 148, 154, 158, 174, 175, 176, 177, 181, 186, 187, 189, 200, 225, 227, 228, 229, 232, 234, 236, 277, 281], "assert_clos": [4, 114], "check": [4, 5, 6, 7, 10, 14, 15, 16, 22, 23, 25, 26, 28, 39, 40, 41, 44, 47, 48, 49, 54, 55, 57, 60, 63, 64, 79, 85, 89, 94, 97, 99, 102, 103, 104, 105, 108, 112, 114, 119, 131, 132, 133, 134, 135, 138, 139, 146, 148, 149, 152, 155, 158, 166, 167, 171, 172, 173, 176, 186, 187, 189, 190, 192, 193, 201, 203, 204, 209, 210, 211, 212, 213, 215, 222, 224, 229, 235, 236, 239, 240, 241, 242, 243, 244, 246, 252, 270, 272, 276, 277, 279], "undefin": [4, 148, 193, 206, 207, 208], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 158, 261], "caus": [4, 13, 16, 24, 25, 79, 86, 94, 102, 112, 137, 155, 167, 172, 175, 179, 183, 186, 189, 190, 197, 206, 215, 243, 248, 262, 275, 280], "incompat": [4, 5, 135, 189, 277], "went": [4, 57, 99, 102, 141, 155], "fairli": [4, 6, 104, 112, 148, 164, 174, 193], "longer": [5, 13, 24, 25, 28, 57, 63, 64, 94, 106, 112, 120, 134, 137, 141, 155, 164, 171, 174, 175, 187, 189, 190, 203, 204, 210, 211, 212, 219, 222, 224, 226, 232, 239, 240, 241, 242, 244, 247, 262, 279], "activ": [5, 6, 7, 11, 13, 15, 16, 19, 22, 24, 25, 28, 36, 57, 63, 64, 86, 94, 95, 97, 104, 106, 112, 133, 136, 141, 144, 148, 156, 164, 171, 172, 183, 193, 194, 195, 200, 201, 203, 204, 212, 213, 216, 219, 223, 224, 232, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 252, 262, 279], "primari": [5, 6, 7, 16, 153, 167, 200, 210, 211, 222, 230, 261, 262, 280], "languag": [5, 6, 7, 24, 26, 27, 28, 48, 54, 99, 105, 107, 109, 131, 136, 138, 139, 140, 162, 177, 179, 195, 200, 223, 234, 235, 262, 267, 272, 274, 277, 279], "suitabl": [5, 10, 45, 144, 148, 186, 261], "eas": [5, 6, 89, 102, 103, 133, 193, 236, 251, 266], "situat": [5, 16, 26, 28, 40, 94, 102, 134, 142, 143, 146, 148, 190, 192, 199], "properti": [5, 6, 7, 12, 15, 24, 26, 28, 35, 44, 53, 94, 97, 102, 108, 111, 138, 158, 165, 179, 189, 207, 236, 246, 247, 259, 264, 279], "unfavor": 5, "latter": [5, 6, 7, 138, 175], "land": [5, 17, 26, 131, 141, 157, 193, 208, 236, 281], "latenc": [5, 7, 19, 131, 136, 138, 145, 155, 167, 172, 187, 190, 216, 235, 271, 272, 280], "strict": [5, 114, 121, 186, 207, 236, 263], "even": [5, 6, 7, 10, 11, 15, 18, 24, 26, 28, 47, 48, 56, 79, 94, 97, 99, 102, 111, 112, 121, 132, 133, 136, 141, 143, 146, 153, 154, 156, 165, 167, 173, 175, 178, 186, 189, 190, 193, 199, 206, 208, 209, 219, 235, 247, 262, 263], "java": 5, "rust": 5, "go": [5, 12, 13, 14, 15, 18, 21, 22, 24, 25, 26, 28, 44, 53, 56, 94, 95, 97, 102, 103, 105, 108, 109, 112, 113, 114, 116, 117, 127, 131, 133, 137, 145, 148, 150, 153, 154, 156, 169, 172, 174, 176, 179, 184, 189, 190, 192, 194, 198, 199, 206, 229, 247, 260, 261, 279], "paragraph": [5, 7, 26], "outlin": [5, 6, 7, 26, 167, 190], "journei": [5, 7, 57], "enabl": [5, 6, 7, 10, 12, 15, 16, 18, 21, 22, 26, 27, 37, 51, 60, 61, 86, 94, 102, 104, 116, 121, 132, 133, 135, 136, 138, 141, 142, 143, 146, 148, 155, 158, 167, 169, 171, 172, 173, 183, 184, 186, 189, 190, 194, 198, 199, 206, 208, 210, 211, 214, 215, 223, 228, 229, 230, 232, 235, 236, 243, 246, 252, 259, 266, 267, 271, 272, 273, 275, 276, 280, 281], "vanilla": [5, 6, 7, 26, 54, 69, 106, 120, 186, 193, 206, 281], "eager": [5, 11, 26, 89, 91, 141, 155, 158, 178, 187, 189, 190, 193, 213, 225, 234, 237, 262, 275, 277], "discuss": [5, 6, 7, 10, 11, 16, 18, 26, 48, 79, 94, 97, 99, 103, 108, 109, 132, 133, 141, 148, 153, 154, 155, 161, 167, 169, 187, 193, 197, 206, 207, 208, 209, 251, 272, 274], "littl": [5, 19, 28, 57, 97, 104, 106, 112, 149, 173, 175, 177, 178, 181, 183, 216], "effort": [5, 15, 54, 56, 57, 117, 261], "mechan": [5, 6, 7, 12, 15, 16, 27, 35, 54, 61, 103, 131, 143, 154, 165, 179, 181, 183, 189, 213, 214, 232, 236, 237, 243, 271, 272], "evalu": [5, 7, 13, 19, 22, 23, 27, 40, 42, 79, 94, 95, 101, 103, 104, 114, 121, 141, 156, 161, 169, 174, 176, 184, 187, 189, 192, 216, 237, 277], "onc": [5, 6, 7, 10, 11, 12, 15, 18, 19, 23, 24, 25, 26, 28, 35, 37, 40, 56, 57, 61, 86, 95, 97, 101, 102, 103, 104, 105, 109, 114, 144, 149, 158, 164, 165, 171, 172, 173, 174, 176, 179, 183, 184, 189, 190, 198, 199, 211, 216, 230, 234, 236, 243, 246, 247, 262, 276, 277], "record": [5, 7, 10, 22, 23, 26, 28, 35, 47, 54, 112, 121, 131, 132, 133, 141, 142, 143, 164, 173, 174, 176, 177, 189, 214, 237, 252, 277], "explicit": [5, 7, 24, 26, 131, 134, 158, 167, 177, 189, 193, 207, 215, 243, 246, 266, 269, 274], "pars": [5, 6, 26, 54, 56, 111, 132, 133, 138, 197, 247], "subject": [5, 12, 15, 26, 132, 152, 179, 189, 210, 211, 213, 221, 222, 223, 227, 234, 247, 276], "constraint": [5, 7, 13, 19, 21, 89, 106, 131, 136, 138, 165, 173, 186, 190, 195, 197, 216, 228, 246, 247, 259, 277], "impos": [5, 248, 259], "guidanc": [5, 10, 135, 246, 280], "offici": [5, 86, 117, 135, 148, 174, 187, 189, 236], "jit": [5, 7, 10, 16, 22, 24, 25, 28, 89, 116, 153, 187, 219, 222, 223, 232, 234, 236, 247, 252, 267, 274, 276, 277, 279], "scriptmodul": [5, 25, 26, 28, 89, 219, 279], "embed": [5, 18, 24, 26, 54, 99, 105, 107, 109, 110, 121, 131, 133, 134, 136, 169, 176, 177, 179, 184, 193, 195, 230], "torchvis": [5, 11, 13, 22, 37, 39, 40, 41, 45, 47, 48, 55, 62, 79, 92, 95, 97, 98, 101, 103, 104, 127, 131, 132, 133, 154, 164, 172, 175, 176, 180, 181, 183, 184, 186, 187, 199, 213, 222, 236, 237, 252, 260, 262, 265, 270, 276, 277, 279], "resnet18": [5, 47, 158, 172, 183, 186, 213, 276, 279], "normal": [5, 7, 10, 12, 13, 22, 23, 24, 40, 42, 45, 54, 56, 57, 79, 89, 95, 97, 99, 103, 104, 106, 111, 120, 121, 127, 132, 140, 142, 148, 149, 165, 167, 172, 175, 176, 178, 179, 181, 184, 186, 187, 190, 193, 199, 207, 232, 236, 237, 262, 270, 275], "rand": [5, 6, 7, 16, 24, 89, 102, 103, 143, 194, 195, 216, 222, 225, 228, 229, 234, 235, 236, 243, 262, 270, 272, 279], "224": [5, 13, 22, 23, 56, 104, 172, 181, 186, 213, 222, 236, 270, 277, 279, 280], "traced_script_modul": 5, "ident": [5, 7, 19, 60, 89, 94, 102, 103, 112, 120, 136, 145, 153, 161, 181, 184, 189, 209, 216, 247], "2698": 5, "0381": 5, "4023": 5, "3010": 5, "0448": 5, "slicebackward": 5, "circumst": [5, 6, 167, 246], "emploi": [5, 104, 179, 183, 193, 228], "form": [5, 7, 13, 16, 19, 26, 45, 51, 54, 57, 65, 105, 112, 114, 137, 140, 155, 179, 186, 193, 199, 211, 216, 218, 228, 229, 243, 262, 272, 280], "mymodul": [5, 7, 218, 227], "self": [5, 6, 7, 10, 11, 12, 15, 16, 22, 24, 25, 27, 28, 37, 40, 54, 56, 58, 60, 79, 103, 106, 112, 114, 119, 120, 121, 131, 132, 136, 140, 141, 146, 148, 155, 157, 165, 169, 175, 176, 177, 181, 183, 184, 186, 189, 193, 194, 210, 218, 227, 228, 229, 231, 232, 235, 237, 243, 252, 259, 267, 277], "n": [5, 6, 7, 13, 19, 22, 25, 26, 35, 40, 47, 56, 65, 76, 77, 86, 89, 94, 99, 102, 104, 112, 120, 132, 133, 134, 146, 148, 156, 157, 158, 161, 169, 171, 175, 176, 177, 179, 181, 184, 189, 190, 192, 197, 199, 210, 216, 221, 236, 262, 279], "super": [5, 6, 7, 12, 21, 22, 23, 24, 25, 28, 40, 79, 103, 114, 121, 132, 135, 140, 141, 146, 157, 169, 175, 176, 177, 181, 184, 186, 194, 210, 218, 227, 228, 229, 231, 235, 237, 243, 277], "mv": 5, "my_modul": 5, "sm": [5, 183], "exclud": [5, 10, 47, 134, 187, 213, 252], "doesn": [5, 8, 10, 11, 14, 17, 19, 28, 65, 106, 108, 111, 112, 137, 156, 158, 167, 171, 186, 187, 189, 194, 199, 206, 216, 221, 225, 226, 234, 261, 262, 273, 277, 278, 280], "support": [5, 7, 12, 15, 16, 18, 19, 21, 22, 25, 26, 27, 35, 41, 51, 56, 61, 63, 64, 79, 87, 89, 94, 95, 96, 97, 98, 99, 102, 103, 104, 113, 114, 115, 116, 119, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 152, 155, 158, 165, 167, 169, 170, 171, 172, 173, 175, 176, 177, 183, 186, 187, 189, 192, 194, 197, 198, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 222, 223, 224, 225, 226, 227, 229, 234, 235, 236, 237, 239, 240, 241, 242, 244, 245, 247, 252, 262, 266, 271, 273, 276, 277, 278, 280], "yet": [5, 7, 11, 12, 21, 26, 55, 79, 94, 97, 102, 116, 117, 141, 148, 167, 176, 179, 190, 194, 211, 229, 232, 236, 277], "ignor": [5, 22, 56, 104, 109, 111, 121, 170, 186, 189, 192, 194, 207, 208, 211, 246, 252, 263, 275], "readi": [5, 7, 11, 18, 25, 26, 54, 95, 97, 103, 105, 106, 111, 112, 131, 133, 148, 161, 169, 170, 173, 175, 176, 177, 190, 192, 252, 277], "hand": [5, 6, 7, 10, 15, 19, 21, 26, 79, 102, 105, 111, 112, 140, 148, 166, 167, 187, 189, 190, 207, 216, 228, 229, 267], "shown": [5, 7, 10, 19, 22, 23, 24, 57, 94, 102, 112, 134, 136, 138, 155, 157, 174, 175, 177, 178, 183, 186, 187, 190, 197, 207, 208, 209, 215, 216, 229, 235, 236, 243, 276, 277, 278, 280, 281], "filenam": [5, 7, 119, 140, 186, 197, 246], "traced_resnet_model": 5, "pt": [5, 7, 25, 26, 58, 121, 132, 133, 134, 222, 236, 237, 272, 279], "my_module_model": 5, "left": [5, 19, 35, 47, 51, 54, 56, 57, 68, 89, 94, 101, 102, 106, 111, 120, 121, 148, 157, 161, 173, 174, 176, 178, 183, 184, 216, 243, 266], "realm": [5, 7], "cross": [5, 10, 14, 23, 48, 57, 97, 99, 103, 136, 138, 262, 265, 280], "sphere": 5, "distribut": [5, 6, 7, 15, 16, 22, 57, 79, 92, 97, 102, 103, 104, 106, 111, 131, 132, 133, 134, 135, 136, 138, 144, 145, 158, 164, 170, 173, 175, 183, 193, 195, 197, 213, 214, 218, 227, 230, 231, 247, 266, 280, 281], "encompass": 5, "share": [5, 6, 7, 11, 12, 21, 25, 26, 44, 53, 60, 70, 74, 92, 104, 108, 131, 133, 137, 146, 148, 149, 157, 167, 173, 176, 177, 189, 197, 229, 236, 247, 251, 261, 271, 276, 280], "header": [5, 6, 7, 10, 25, 26, 170, 247], "cmake": [5, 7, 222, 236, 279], "futur": [5, 21, 24, 25, 54, 112, 117, 119, 132, 152, 157, 164, 170, 174, 175, 176, 177, 194, 209, 228, 235, 264, 275], "begin": [5, 6, 7, 12, 13, 19, 22, 25, 26, 28, 35, 47, 54, 55, 57, 60, 79, 89, 94, 97, 109, 111, 133, 136, 162, 164, 174, 176, 183, 184, 190, 208, 216, 234, 246, 247, 249, 252, 263, 264, 265, 267], "iostream": [5, 6, 7, 25, 26, 236], "argc": [5, 25, 26, 236, 279], "char": [5, 25, 26, 155, 236, 279], "argv": [5, 25, 26, 58, 60, 236, 279], "cerr": [5, 25, 26, 236, 279], "app": [5, 26, 114, 131, 228, 229, 236, 266], "export": [5, 8, 10, 20, 24, 26, 51, 89, 94, 115, 116, 131, 145, 146, 155, 178, 180, 187, 210, 215, 223, 235, 246, 262, 266], "try": [5, 7, 13, 15, 16, 19, 22, 24, 25, 26, 28, 40, 44, 48, 51, 53, 54, 57, 58, 65, 79, 94, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 119, 135, 138, 139, 140, 141, 149, 153, 155, 157, 158, 161, 164, 167, 169, 170, 171, 173, 174, 179, 183, 187, 189, 193, 195, 199, 207, 216, 232, 235, 236, 246, 247, 259, 260, 277, 279, 280], "deseri": [5, 7, 26, 121, 279], "catch": [5, 10, 12, 25, 187, 189, 236, 275, 279], "c10": [5, 10, 11, 16, 25, 170, 200, 210, 235, 236, 247, 261, 279], "ok": [5, 111, 135, 175], "accept": [5, 6, 23, 45, 92, 94, 104, 109, 136, 138, 152, 156, 161, 166, 167, 173, 176, 183, 186, 194, 218, 221, 227, 235, 252, 262], "proce": [5, 12, 28, 104, 106, 155, 189, 197, 262], "examin": [5, 12, 25, 28, 86, 94, 95, 101, 103, 104, 148, 154, 167, 190], "moment": [5, 7, 12, 194, 209, 222, 234], "cmakelist": [5, 7, 25, 26, 236, 279], "txt": [5, 6, 7, 25, 26, 54, 139, 140, 155, 172, 179, 230, 236, 279], "cmake_minimum_requir": [5, 7, 25, 26, 236, 279], "fatal_error": [5, 7, 25, 26, 236, 279], "custom_op": [5, 17, 117, 274, 279], "find_packag": [5, 7, 25, 26, 236, 279], "add_execut": [5, 7, 25, 26, 236, 279], "target_link_librari": [5, 7, 25, 26, 236, 279], "set_properti": [5, 7, 236, 279], "cxx_standard": [5, 7, 236, 279], "17": [5, 7, 24, 26, 40, 97, 103, 119, 155, 181, 189, 219, 234, 235, 247], "last": [5, 7, 12, 15, 22, 26, 36, 47, 54, 57, 58, 79, 87, 89, 92, 97, 99, 102, 103, 106, 109, 114, 127, 131, 136, 137, 140, 148, 149, 155, 164, 173, 174, 175, 177, 178, 179, 180, 184, 189, 192, 206, 209, 213, 236, 246, 262, 266, 277], "thing": [5, 6, 7, 10, 16, 17, 24, 25, 26, 28, 35, 47, 48, 51, 54, 89, 92, 94, 97, 102, 103, 104, 105, 106, 108, 109, 111, 112, 131, 134, 136, 137, 138, 143, 144, 145, 148, 149, 154, 155, 158, 165, 172, 173, 181, 189, 199, 215, 228, 247, 265], "grab": [5, 7, 8, 57, 101, 172, 177], "latest": [5, 7, 9, 11, 15, 23, 92, 95, 120, 121, 131, 133, 141, 148, 160, 168, 172, 173, 176, 179, 181, 186, 187], "page": [5, 7, 8, 11, 17, 25, 26, 55, 59, 65, 93, 112, 119, 120, 131, 139, 141, 167, 177, 183, 189, 190, 223, 228, 233, 236, 262, 275], "websit": [5, 7, 95, 174, 243, 245], "unzip": [5, 7, 22, 55, 186, 192, 276], "archiv": [5, 6, 7, 28, 158, 189, 276], "folder": [5, 7, 22, 26, 55, 57, 86, 87, 95, 97, 133, 184, 192, 197, 222], "bin": [5, 7, 25, 26, 97, 148, 200, 236, 243, 276], "lib": [5, 6, 7, 11, 21, 25, 26, 155, 181, 197, 236, 261, 277, 280], "against": [5, 17, 25, 26, 40, 41, 48, 99, 101, 114, 135, 148, 158, 173, 193, 227, 236, 247], "window": [5, 6, 7, 23, 48, 56, 99, 111, 114, 131, 146, 176, 183, 192, 214, 222, 243, 262], "debug": [5, 7, 10, 22, 28, 65, 105, 131, 137, 174, 180, 189, 200, 214, 230, 247, 261, 271], "abi": [5, 6, 7, 25, 26, 222, 236], "laid": 5, "within": [5, 6, 15, 21, 24, 26, 65, 89, 94, 95, 101, 112, 113, 114, 119, 136, 141, 143, 153, 155, 165, 171, 174, 176, 186, 187, 190, 193, 198, 200, 209, 210, 211, 215, 222, 231, 235, 247, 253, 262, 271, 273, 276, 280], "mkdir": [5, 7, 26, 183, 186], "cd": [5, 7, 25, 26, 183, 192, 222, 243], "dcmake_prefix_path": [5, 7, 25, 26, 236, 279], "config": [5, 7, 11, 19, 23, 92, 132, 134, 138, 141, 172, 194, 198, 199, 200, 210, 216, 234, 236, 237, 259, 267, 271, 274, 277], "someth": [5, 6, 7, 12, 15, 22, 26, 28, 48, 92, 97, 102, 106, 108, 148, 155, 172, 179, 189, 193, 221, 247, 261], "root": [5, 6, 7, 15, 25, 26, 35, 37, 40, 47, 56, 57, 97, 105, 134, 142, 149, 155, 176, 177, 181, 197, 236, 243, 260, 270], "4b5a67132e81": 5, "identif": [5, 7, 25, 26, 236], "gnu": [5, 6, 7, 25, 26, 236, 262, 280], "usr": [5, 7, 21, 25, 26, 148, 181, 236], "cc": [5, 7, 25, 26, 47, 222, 234, 236], "detect": [5, 7, 12, 13, 21, 25, 26, 57, 99, 131, 172, 180, 183, 187, 189, 236, 249, 262, 275, 280], "info": [5, 6, 7, 25, 26, 86, 135, 145, 148, 157, 186, 189, 223, 236, 237], "pthread": [5, 6, 7, 25, 26, 236], "pthread_creat": [5, 7, 25, 26, 236], "thread": [5, 6, 7, 10, 24, 25, 26, 57, 119, 134, 135, 146, 167, 172, 175, 176, 177, 232, 236, 243, 247, 252, 261, 262, 280], "scan": [5, 7, 25, 26, 97, 99, 186, 189], "50": [5, 7, 19, 22, 24, 25, 26, 57, 58, 97, 112, 140, 149, 158, 171, 174, 177, 181, 192, 213, 216, 219, 234, 235, 237, 262], "cmakefil": [5, 7, 25, 26], "dir": [5, 7, 25, 26, 86, 101, 138, 158, 197, 261, 271], "o": [5, 6, 7, 12, 21, 22, 25, 26, 54, 55, 56, 58, 60, 104, 132, 133, 135, 140, 146, 148, 161, 164, 167, 169, 170, 172, 175, 176, 177, 186, 195, 197, 198, 215, 216, 227, 228, 229, 231, 234, 247, 251, 281], "100": [5, 7, 22, 24, 25, 26, 40, 53, 79, 103, 106, 132, 135, 140, 141, 146, 155, 158, 172, 173, 174, 177, 181, 184, 186, 210, 216, 231, 235, 237, 247, 261, 272], "suppli": [5, 7, 108, 158, 172], "binari": [5, 7, 23, 25, 26, 54, 57, 102, 114, 148, 158, 187, 207, 214, 227, 236, 276], "1d": [5, 72, 99, 120, 221, 262], "4d": [5, 51, 158], "path_to_model": 5, "coupl": [5, 15, 39, 54, 98, 102, 103, 111, 133, 136, 143, 149, 150, 164, 167, 184, 189, 219, 262], "awai": [5, 6, 7, 26, 51, 99, 101, 105, 106, 108, 173, 174, 175, 190, 209, 230], "ivalu": [5, 26, 170, 222, 236, 279], "push_back": [5, 25, 26, 236, 279], "totensor": [5, 22, 26, 40, 56, 79, 97, 103, 132, 148, 172, 176, 181, 184, 186, 222, 236, 237, 270, 279], "slice": [5, 6, 44, 53, 109, 112, 171, 193, 211, 222, 231, 261], "eras": [5, 28], "http": [5, 7, 21, 22, 27, 28, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 79, 80, 81, 82, 83, 84, 85, 88, 96, 101, 104, 107, 114, 115, 116, 117, 120, 127, 132, 139, 140, 142, 151, 152, 153, 154, 158, 164, 166, 172, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 199, 202, 205, 207, 209, 219, 220, 221, 222, 237, 245, 246, 247, 250, 251, 254, 255, 256, 257, 260, 277], "org": [5, 7, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 79, 80, 81, 82, 83, 84, 85, 88, 96, 99, 101, 103, 104, 107, 115, 116, 120, 127, 139, 140, 151, 152, 153, 154, 164, 172, 179, 182, 183, 185, 187, 188, 189, 190, 199, 202, 205, 207, 209, 214, 219, 220, 221, 222, 237, 243, 246, 250, 251, 254, 255, 256, 257, 279], "cppdoc": [5, 7], "pariti": [5, 193], "manipul": [5, 44, 45, 97, 101, 120, 134, 154, 164], "five": 5, "ideal": [5, 7, 15, 37, 94, 97, 102, 104, 167, 179, 189, 223, 272], "previous": [5, 6, 10, 23, 35, 89, 108, 112, 141, 152, 153, 169, 171, 173, 174, 175, 183, 189, 206, 221, 259, 266, 276], "kcuda": [5, 7, 200], "live": [5, 7, 11, 16, 102, 131, 137, 167, 176, 177, 209, 232], "hopefulli": [5, 7, 55, 56, 79, 89, 106, 121, 263], "equip": [5, 6, 143, 149, 206, 280], "concept": [5, 7, 12, 25, 39, 40, 60, 98, 107, 108, 112, 120, 124, 131, 138, 157, 167, 175, 178, 179, 190, 197, 200, 210, 252, 261, 280], "close": [5, 7, 15, 19, 22, 26, 57, 94, 99, 102, 104, 105, 133, 138, 164, 184, 216, 260, 262], "Of": [5, 15, 26, 104, 108, 112, 137, 148, 184, 207, 209, 243, 276], "cours": [5, 7, 15, 19, 22, 26, 58, 94, 95, 102, 104, 107, 108, 111, 112, 137, 148, 184, 216, 243], "did": [5, 7, 10, 17, 22, 26, 28, 48, 57, 94, 97, 99, 102, 114, 135, 148, 152, 165, 173, 176, 179, 190, 197, 247], "cover": [5, 6, 8, 15, 16, 18, 21, 25, 28, 37, 51, 102, 107, 117, 124, 131, 133, 138, 148, 169, 170, 173, 176, 177, 184, 187, 189, 208, 210, 211, 227, 235, 236, 246, 254, 255, 256, 257, 260, 261, 262, 273, 280], "insid": [5, 6, 7, 11, 18, 21, 25, 26, 36, 40, 49, 134, 136, 183, 187, 192, 210, 216, 221, 223], "shortli": [5, 175], "master": [5, 18, 22, 54, 132, 142, 148, 153, 154, 158, 176, 177, 192, 194, 197, 214, 222, 227, 236], "html": [5, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 79, 80, 81, 82, 83, 84, 88, 96, 104, 107, 115, 116, 120, 124, 127, 151, 153, 154, 182, 185, 186, 188, 189, 202, 205, 207, 209, 219, 220, 246, 250, 251, 254, 255, 256, 257], "peter": 6, "goldsborough": 6, "newest": [6, 10, 23, 26, 114], "date": [6, 7, 10, 11, 26, 79, 81, 82, 83, 84, 85, 133, 176, 236, 259, 276], "plethora": 6, "relat": [6, 12, 15, 57, 94, 95, 102, 103, 108, 111, 131, 136, 155, 165, 189, 193, 210, 247, 262], "algebra": [6, 15, 44, 53, 97, 102, 106, 235], "wrangl": 6, "novel": [6, 95, 195], "research": [6, 7, 19, 22, 26, 28, 54, 57, 79, 89, 95, 102, 106, 124, 148, 161, 166, 171, 186, 216, 232, 277], "power": [6, 7, 26, 47, 54, 62, 69, 79, 92, 94, 97, 104, 106, 112, 120, 131, 132, 138, 146, 148, 155, 157, 161, 170, 171, 172, 179, 186, 199, 209, 234, 247, 274, 280], "spare": [6, 7], "deriv": [6, 7, 11, 17, 19, 26, 28, 35, 40, 44, 47, 53, 94, 102, 106, 108, 109, 111, 120, 137, 139, 143, 152, 156, 216, 262], "express": [6, 8, 17, 26, 94, 97, 99, 102, 105, 116, 124, 136, 189, 193, 208, 213, 234], "realli": [6, 10, 26, 28, 48, 94, 99, 102, 105, 106, 111, 120, 122, 131, 137, 184, 206, 208, 221, 247], "frequent": [6, 25, 26, 35, 86, 111, 120, 132, 208, 236, 275], "expens": [6, 19, 44, 104, 119, 177, 189, 199, 216, 252, 261, 275], "few": [6, 7, 10, 11, 16, 22, 24, 25, 26, 51, 56, 61, 89, 94, 95, 97, 102, 104, 106, 107, 108, 109, 111, 121, 130, 133, 134, 137, 139, 140, 141, 146, 148, 149, 165, 167, 172, 173, 176, 179, 187, 190, 193, 194, 199, 207, 208, 209, 226, 229, 232, 236, 237, 246, 261, 262, 263, 271], "plausibl": 6, "address": [6, 13, 21, 25, 27, 86, 99, 131, 135, 148, 167, 175, 176, 189, 190, 193, 215, 230, 237, 259, 266, 280], "nativ": [6, 7, 10, 16, 17, 23, 26, 60, 92, 116, 117, 131, 133, 136, 149, 169, 177, 193, 194, 195, 199, 206, 209, 232, 235, 236, 252, 261, 262, 266], "much": [6, 7, 10, 11, 13, 15, 19, 22, 26, 28, 40, 57, 61, 94, 95, 104, 105, 106, 111, 112, 121, 133, 137, 138, 153, 156, 157, 164, 167, 172, 173, 176, 177, 179, 183, 184, 187, 189, 190, 197, 199, 206, 209, 216, 243, 246, 247, 251, 260, 262, 263, 266, 267, 280], "boilerpl": [6, 7, 22, 48, 106, 184, 206], "degre": [6, 40, 68, 99, 120, 138, 179, 183, 195, 209], "organ": [6, 10, 15, 26, 56, 97, 121, 139, 195, 247, 280], "tackl": [6, 119], "decid": [6, 7, 10, 11, 19, 21, 57, 65, 92, 94, 174, 189, 190, 209, 214, 216, 265], "contribut": [6, 57, 65, 86, 95, 102, 158, 183], "upstream": [6, 236, 262], "rest": [6, 7, 15, 48, 127, 134, 149, 154, 173, 175, 176, 190, 193, 208, 259], "walk": [6, 7, 11, 16, 18, 25, 26, 27, 28, 47, 59, 94, 107, 112, 124, 130, 131, 137, 155, 157, 176, 194, 199, 200, 201, 213, 246, 260], "chase": 6, "someon": [6, 179], "fire": [6, 146], "don": [6, 7, 10, 11, 17, 24, 47, 48, 57, 58, 60, 79, 92, 99, 102, 105, 106, 109, 112, 117, 121, 127, 137, 143, 154, 156, 157, 164, 167, 173, 174, 177, 178, 189, 190, 206, 207, 208, 226, 232, 234, 243, 246, 274, 275], "dai": [6, 136, 190, 259], "head": [6, 8, 19, 24, 39, 87, 99, 119, 136, 146, 178, 192, 211, 216], "straight": [6, 7, 26, 179], "recurr": [6, 48, 54, 105, 109, 131, 139, 140, 162, 165, 179, 180], "unit": [6, 7, 28, 54, 99, 102, 132, 133, 156, 167, 171, 173, 174, 179, 186, 189, 193, 249, 262], "superior": [6, 135, 210], "art": [6, 48, 57, 95, 97, 99, 171, 245], "lstm": [6, 48, 54, 99, 107, 110, 139, 140, 177], "lack": [6, 16, 86, 95, 206, 230], "forget": [6, 7, 112, 121, 187], "gate": [6, 54, 99, 193, 259], "exponenti": [6, 54, 94, 102, 106, 108, 165, 174, 199], "elu": [6, 213], "intern": [6, 10, 11, 12, 16, 25, 41, 42, 54, 61, 72, 99, 104, 120, 131, 132, 134, 138, 148, 183, 197, 206, 214, 219, 223, 228, 261], "never": [6, 94, 105, 106, 107, 111, 137, 171, 181], "lltm": 6, "long": [6, 7, 11, 23, 26, 54, 55, 86, 92, 99, 102, 106, 107, 108, 110, 112, 133, 135, 137, 140, 149, 154, 155, 165, 169, 174, 177, 183, 190, 193, 195, 197, 200, 247, 261, 262, 265, 275], "term": [6, 7, 16, 44, 57, 65, 79, 94, 95, 99, 103, 106, 107, 108, 110, 119, 133, 135, 136, 161, 171, 173, 189, 190, 193, 199, 209, 218, 253, 280], "signific": [6, 7, 22, 57, 86, 95, 133, 135, 139, 142, 154, 155, 156, 158, 164, 167, 173, 178, 183, 187, 190, 197, 219, 229, 230, 231, 235, 237, 246, 247, 262, 274], "enough": [6, 7, 19, 24, 26, 54, 86, 97, 108, 112, 120, 137, 142, 172, 189, 197, 216, 228, 235, 246], "lstmcell": 6, "cell": [6, 24, 26, 28, 55, 94, 95, 97, 99, 102, 103, 119, 167, 174, 178, 186, 190, 199, 262], "plain": [6, 7, 26, 54, 112, 134, 139, 140, 179, 192, 259, 261], "input_featur": [6, 277], "state_s": 6, "candid": [6, 155], "reset_paramet": [6, 134], "stdv": 6, "math": [6, 11, 89, 94, 108, 140, 161, 172, 234, 262], "sqrt": [6, 89, 112, 193, 206, 218, 234], "uniform_": [6, 7, 177, 218], "old_h": 6, "old_cel": 6, "cat": [6, 23, 24, 44, 48, 53, 95, 97, 105, 108, 140, 155, 177, 179, 184, 192, 245], "gate_weight": 6, "split": [6, 10, 21, 22, 23, 24, 49, 54, 57, 89, 92, 97, 101, 103, 131, 139, 140, 146, 169, 173, 176, 177, 179, 190, 192, 227, 243], "combin": [6, 11, 24, 40, 60, 65, 92, 94, 97, 99, 104, 105, 108, 111, 112, 130, 131, 132, 137, 139, 140, 142, 150, 161, 167, 171, 174, 177, 179, 189, 190, 193, 200, 211, 230, 231, 237, 247, 262], "input_g": 6, "sigmoid": [6, 7, 57, 99, 194, 262], "output_g": 6, "tanh": [6, 7, 57, 99, 106, 173, 262], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 24, 54, 95, 99, 104, 105, 109, 112, 136, 138, 139, 140, 149, 153, 177, 178, 179, 245], "new_h": [6, 56], "batch_siz": [6, 7, 15, 22, 23, 37, 40, 54, 56, 57, 60, 79, 92, 103, 132, 133, 134, 136, 148, 174, 175, 176, 181, 183, 184, 186, 190, 210, 216, 236, 237, 246, 270, 277], "rnn": [6, 24, 28, 49, 54, 99, 131, 149, 162, 165, 176, 179, 180, 262], "new_c": 6, "intel": [6, 148, 155, 158, 213, 215, 222, 266], "mkl": [6, 155, 210, 252, 280], "nnpack": 6, "why": [6, 7, 10, 12, 15, 17, 28, 48, 57, 89, 95, 104, 106, 111, 121, 124, 143, 146, 155, 164, 179, 187, 189, 190, 207, 209, 247, 276, 277], "room": [6, 104, 167, 235], "obviou": [6, 189, 247], "knowledg": [6, 54, 57, 79, 106, 107, 122, 124, 131, 155, 157], "know": [6, 7, 10, 12, 21, 22, 25, 26, 35, 47, 54, 76, 77, 79, 97, 99, 102, 106, 108, 111, 112, 120, 137, 139, 140, 143, 148, 149, 150, 155, 157, 158, 161, 166, 167, 169, 173, 174, 175, 179, 184, 189, 190, 192, 194, 207, 237, 247, 273], "execut": [6, 7, 10, 12, 16, 18, 20, 23, 24, 25, 26, 28, 35, 36, 42, 43, 47, 49, 52, 55, 74, 78, 86, 90, 94, 97, 100, 102, 105, 110, 113, 117, 118, 122, 130, 131, 134, 135, 137, 138, 141, 148, 149, 154, 155, 158, 167, 170, 173, 174, 176, 177, 178, 180, 187, 189, 193, 195, 197, 200, 210, 217, 219, 222, 223, 227, 235, 243, 246, 258, 261, 269, 272, 276, 277, 279, 280], "involv": [6, 10, 16, 19, 22, 26, 28, 39, 42, 55, 89, 94, 95, 102, 105, 108, 114, 121, 130, 137, 139, 145, 157, 164, 177, 179, 189, 197, 198, 199, 211, 216, 253, 262, 267, 274, 277], "launch": [6, 7, 24, 58, 65, 135, 138, 145, 146, 175, 176, 177, 178, 183, 195, 222, 235, 237, 247, 252, 262, 280], "amount": [6, 22, 28, 79, 86, 121, 136, 146, 167, 171, 187, 190, 199, 252, 262], "becom": [6, 7, 12, 24, 27, 57, 79, 89, 95, 104, 136, 143, 156, 158, 167, 183, 184, 190, 197, 200, 211, 225, 232, 235, 246, 280], "furthermor": [6, 22, 104, 150, 156, 184, 200, 230, 247], "itself": [6, 12, 26, 35, 36, 47, 86, 89, 99, 102, 104, 108, 109, 112, 117, 121, 136, 137, 139, 143, 148, 157, 173, 176, 177, 179, 190, 232, 246, 252, 276], "slow": [6, 7, 10, 40, 132, 134, 167, 190, 193, 252, 262], "down": [6, 10, 11, 12, 22, 36, 37, 55, 86, 92, 94, 99, 101, 106, 112, 132, 149, 155, 156, 157, 176, 181, 184, 189, 197, 206, 261, 262], "therefor": [6, 7, 16, 22, 54, 56, 104, 121, 130, 139, 146, 158, 161, 167, 170, 171, 176, 177, 189, 201, 208, 209, 222, 246, 280], "rewrit": [6, 24, 49, 141, 165, 189, 221, 222], "group": [6, 12, 21, 22, 27, 54, 65, 87, 99, 102, 119, 130, 131, 132, 133, 134, 135, 140, 142, 144, 146, 148, 155, 169, 183, 190, 192, 193, 197, 228, 229, 231, 232, 234, 247, 277, 280, 281], "profit": 6, "fewer": [6, 12, 142, 156], "visibl": [6, 25, 26, 48, 92, 101, 186], "translat": [6, 26, 28, 54, 114, 116, 117, 131, 139, 140, 161, 162, 180, 208, 262, 277], "benefit": [6, 7, 19, 21, 47, 89, 92, 133, 135, 152, 158, 164, 167, 178, 193, 199, 216, 232, 235, 236, 246, 262, 273, 280], "massiv": [6, 28, 48, 108, 111, 190, 236], "parallel": [6, 7, 12, 18, 21, 48, 50, 52, 54, 56, 60, 79, 92, 97, 121, 131, 138, 144, 148, 161, 173, 176, 177, 190, 197, 210, 214, 228, 229, 230, 232, 234, 246, 252, 280, 281], "lltm_cpp": 6, "conveni": [6, 10, 15, 25, 26, 48, 51, 54, 95, 108, 112, 137, 140, 150, 156, 170, 173, 197, 207, 209, 229, 236, 246, 247, 261], "wrapper": [6, 7, 10, 60, 112, 121, 132, 133, 143, 149, 157, 173, 186, 190, 198, 214, 228, 229, 274], "include_dir": [6, 11, 170], "include_path": 6, "manag": [6, 25, 36, 47, 54, 65, 94, 112, 119, 130, 134, 136, 141, 144, 145, 146, 165, 178, 183, 187, 190, 198, 228, 229, 230, 231, 232, 246, 247, 248, 251, 252, 253, 262, 275, 280], "And": [6, 7, 11, 17, 25, 26, 27, 28, 57, 95, 108, 114, 139, 143, 155, 156, 158, 161, 172, 183, 184, 187, 189, 247, 261], "overal": [6, 22, 54, 99, 132, 133, 148, 167, 174, 186, 189, 190, 235, 247, 262], "d_sigmoid": 6, "bit": [6, 16, 26, 28, 56, 72, 97, 102, 119, 120, 149, 172, 173, 179, 190, 199, 206, 223, 237, 247], "datatyp": [6, 26, 44, 53, 77, 97, 102, 119, 236, 246], "Its": [6, 104, 106, 211], "inspect": [6, 26, 94, 104, 117, 133, 134, 138, 154, 178, 181, 187, 189, 190, 232, 247, 276], "dispos": 6, "nvcc": 6, "hit": [6, 22, 79, 136, 183], "workaround": [6, 26, 89, 143, 152, 277], "logic": [6, 7, 12, 19, 26, 40, 45, 89, 105, 113, 131, 132, 138, 145, 169, 171, 176, 177, 186, 216, 218, 229, 232, 280], "sigmoidalphablendforwardcuda": 6, "open": [6, 39, 41, 55, 92, 95, 97, 98, 101, 103, 111, 114, 116, 131, 133, 140, 148, 150, 154, 164, 166, 179, 181, 183, 186, 193, 201, 222, 236, 237, 243], "port": [6, 18, 135, 148, 176, 190, 197, 243, 271], "lltm_forward": 6, "addmm": [6, 7, 119, 155, 222, 223, 235, 252], "transpos": [6, 7, 13, 44, 53, 54, 56, 57, 103, 155, 181, 184, 211, 222, 277], "alpha": [6, 7, 16, 140, 157, 186, 206, 234], "respect": [6, 8, 17, 18, 35, 37, 39, 40, 41, 47, 54, 56, 57, 67, 68, 94, 95, 106, 108, 120, 124, 136, 137, 149, 152, 155, 156, 166, 167, 173, 177, 179, 183, 190, 195, 227, 259, 264, 274, 280], "ultim": [6, 22, 54, 57, 89, 206, 223], "plop": [6, 26], "autograd": [6, 8, 13, 16, 17, 18, 24, 28, 36, 37, 39, 40, 41, 42, 44, 45, 50, 51, 52, 62, 66, 72, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108, 112, 131, 139, 140, 143, 146, 155, 156, 161, 166, 174, 175, 176, 179, 180, 189, 221, 227, 232, 243, 246, 262, 274, 279], "nice": [6, 54, 112, 164, 166, 189, 190, 193], "dig": [6, 95, 106, 178, 189], "deeper": [6, 12, 13, 41, 95, 102, 104, 106, 154, 155, 178, 189, 226, 234, 279], "interest": [6, 7, 11, 15, 19, 23, 26, 28, 48, 54, 56, 92, 94, 95, 104, 106, 113, 114, 116, 117, 127, 133, 138, 156, 164, 165, 173, 181, 189, 192, 193, 216, 221, 247, 261, 264, 265], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 13, 22, 26, 40, 51, 57, 79, 99, 103, 106, 112, 114, 121, 132, 146, 155, 172, 175, 176, 177, 181, 184, 210, 213, 228, 229, 230, 231, 235, 236, 237, 246, 262], "exp": [6, 105, 106, 143, 208], "d_elu": 6, "mask": [6, 19, 95, 99, 119, 131, 149, 165, 171, 178, 186, 192, 199, 206, 207, 209, 211, 214, 216, 236, 277], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 22, 79, 132, 176, 181, 237], "d_x": 6, "d_old_h": 6, "d_input": 6, "span": [6, 19, 105, 146, 183, 216, 243], "four": [6, 15, 21, 25, 89, 97, 99, 102, 120, 133, 148, 169, 184, 193, 213, 277], "torch_extension_nam": [6, 170], "macro": [6, 7, 10, 16, 26], "maintain": [6, 11, 15, 25, 35, 36, 37, 47, 54, 79, 99, 104, 109, 131, 135, 144, 148, 157, 174, 177, 189, 215, 222, 228, 246, 281], "mismatch": [6, 104, 189, 197], "nasti": [6, 259], "hard": [6, 7, 10, 16, 24, 37, 106, 138, 167, 171, 189, 247, 271], "At": [6, 7, 10, 15, 16, 19, 23, 26, 47, 51, 54, 55, 89, 92, 109, 112, 120, 132, 133, 136, 149, 152, 157, 173, 174, 175, 178, 179, 183, 206, 209, 216, 222, 252, 259, 262, 276], "point": [6, 7, 10, 11, 12, 15, 19, 21, 22, 23, 25, 26, 47, 51, 54, 55, 56, 57, 58, 86, 89, 94, 97, 99, 102, 104, 105, 107, 108, 109, 111, 112, 120, 132, 134, 136, 137, 138, 143, 144, 146, 154, 157, 161, 167, 173, 175, 179, 184, 186, 189, 190, 197, 199, 206, 208, 209, 215, 216, 237, 250, 258, 260, 262, 266, 273, 277], "bdist_egg": 6, "egg_info": [6, 26], "egg": [6, 26], "pkg": [6, 26], "dependency_link": [6, 26], "top_level": [6, 26], "manifest": [6, 26, 208], "bdist": 6, "linux": [6, 7, 21, 23, 25, 26, 114, 136, 146, 148, 172, 183, 192, 222, 236, 262, 280], "x86_64": [6, 21, 26], "install_lib": 6, "temp": [6, 22, 26, 141, 271], "gcc": [6, 26, 155, 210], "local": [6, 7, 10, 18, 21, 22, 25, 26, 39, 54, 55, 65, 94, 98, 105, 113, 121, 124, 133, 134, 136, 138, 146, 148, 164, 171, 175, 176, 177, 179, 181, 190, 195, 197, 198, 227, 232, 246, 249, 262, 271, 272, 280, 281], "miniconda": [6, 21, 26], "compiler_compat": [6, 26], "wl": [6, 25, 26], "sysroot": [6, 26], "wsign": [6, 26], "dndebug": [6, 26], "fwrapv": [6, 26], "o3": [6, 26, 247], "wall": [6, 26, 105, 154, 247], "wstrict": [6, 26], "prototyp": [6, 11, 12, 16, 26, 37, 189, 190, 200, 202, 210, 211, 217, 221, 222, 227, 234], "fpic": [6, 26], "python3": [6, 21, 25, 26, 181, 183, 197, 235, 261, 277], "site": [6, 8, 21, 25, 26, 55, 57, 154, 179, 252, 261, 277], "th": [6, 15, 26, 56, 106, 111, 148, 157], "thc": [6, 26], "7m": [6, 26, 40], "dtorch_api_include_extension_h": [6, 26], "dtorch_extension_nam": [6, 26], "d_glibcxx_use_cxx11_abi": [6, 26], "cc1plu": [6, 26], "warn": [6, 22, 26, 56, 155, 186, 206, 207, 208, 209, 232, 247, 252, 261], "valid": [6, 23, 26, 27, 40, 54, 92, 99, 101, 103, 104, 116, 119, 121, 127, 132, 133, 138, 139, 142, 143, 167, 170, 186, 189, 192, 207, 208, 216, 247, 272, 275], "objc": [6, 26], "l": [6, 13, 15, 26, 47, 56, 57, 94, 106, 140, 173, 174, 189, 197, 247, 276], "rpath": [6, 26], "37m": [6, 26], "stub": 6, "loader": [6, 7, 27, 41, 48, 103, 112, 173, 176, 192, 247], "byte": [6, 189, 190, 198, 277], "37": [6, 19, 40, 119, 172, 177, 216, 234, 235, 252], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 22, 26, 86, 131, 164, 173, 187, 189, 261, 277], "__pycache__": 6, "dist": [6, 12, 21, 132, 133, 135, 146, 148, 169, 170, 176, 181, 195, 197, 228, 229, 231, 281], "py3": 6, "remov": [6, 19, 22, 54, 57, 58, 87, 112, 117, 119, 124, 134, 137, 146, 153, 155, 164, 172, 178, 179, 186, 187, 189, 190, 193, 199, 206, 207, 211, 216, 232, 247, 261], "everyth": [6, 17, 47, 92, 102, 104, 106, 138, 139, 143, 149, 172, 173, 174, 175, 179, 184, 190, 198, 227], "pth": [6, 22, 26, 79, 121, 186, 199, 229, 236, 237, 277], "finish": [6, 7, 18, 26, 49, 97, 146, 175, 177, 184, 213, 227, 228, 243, 249, 262], "ubuntu": [6, 7, 183, 280], "16": [6, 19, 22, 26, 92, 97, 99, 103, 104, 114, 121, 146, 149, 158, 172, 177, 181, 184, 186, 189, 192, 199, 210, 216, 228, 229, 234, 235, 247, 252, 276, 277], "04": [6, 103, 183, 201, 235, 247], "recent": [6, 54, 109, 119, 135, 136, 148, 155, 161, 165, 174, 183, 277, 280], "maco": [6, 7, 114, 148, 186, 262], "clang": [6, 201, 222], "worst": 6, "resolv": [6, 26, 104, 153, 158, 189, 208, 230, 277], "symbol": [6, 28, 153, 247, 261, 277], "linker": [6, 26], "pycapsul": [6, 26], "builtin": [6, 170, 247, 261], "arg0": 6, "arg1": [6, 176], "arg2": [6, 176], "arg3": 6, "arg4": 6, "citizen": [6, 26, 206, 208], "lltmfunction": 6, "staticmethod": [6, 143, 175, 186], "benchmark": [6, 16, 19, 27, 37, 119, 131, 138, 155, 156, 167, 172, 178, 187, 193, 199, 210, 211, 213, 216, 234, 236, 237, 252, 258, 261, 262, 266, 272, 277, 280], "measur": [6, 13, 24, 40, 86, 94, 95, 97, 99, 104, 111, 132, 135, 154, 156, 167, 173, 174, 178, 181, 187, 199, 210, 219, 227, 235, 246, 247, 252, 261, 266, 267, 276], "durat": [6, 87, 170, 174, 183, 197], "32": [6, 21, 22, 24, 56, 60, 79, 92, 97, 99, 102, 104, 109, 114, 119, 132, 140, 158, 161, 166, 169, 172, 176, 177, 180, 181, 183, 186, 189, 190, 195, 210, 234, 235, 237, 247], "128": [6, 7, 25, 56, 57, 60, 79, 92, 104, 132, 136, 139, 140, 148, 150, 172, 175, 176, 177, 190, 193, 223, 227, 236, 247, 261, 270], "rang": [6, 7, 12, 13, 15, 21, 22, 24, 40, 45, 48, 56, 57, 58, 79, 86, 92, 95, 103, 104, 112, 113, 114, 116, 117, 132, 133, 134, 135, 138, 140, 148, 169, 172, 175, 177, 179, 181, 183, 184, 189, 192, 194, 195, 197, 199, 200, 216, 225, 227, 228, 231, 234, 235, 237, 243, 245, 246, 252, 260, 262, 274, 277, 280, 281], "100000": [6, 140, 247], "3f": [6, 22, 216], "wrote": [6, 26, 187, 192], "post": [6, 7, 12, 23, 54, 104, 132, 133, 134, 138, 158, 181, 190, 195, 237, 245], "my": [6, 24, 55, 105, 111, 193, 219], "machin": [6, 7, 21, 23, 24, 28, 39, 41, 45, 48, 54, 55, 56, 58, 59, 60, 61, 65, 79, 92, 94, 95, 98, 114, 116, 131, 132, 133, 138, 144, 145, 146, 148, 154, 166, 167, 172, 176, 177, 178, 179, 190, 192, 197, 219, 225, 234, 235, 243, 260, 262, 271, 272, 277, 280], "506": 6, "480": [6, 252], "444": 6, "694": 6, "349": [6, 97], "335": [6, 158, 177, 281], "443": [6, 177, 252], "523": 6, "speedup": [6, 19, 24, 48, 120, 131, 150, 155, 166, 193, 199, 210, 211, 216, 235, 262, 267, 276], "30": [6, 7, 22, 49, 86, 103, 106, 131, 133, 135, 140, 158, 171, 175, 177, 216, 234, 247, 252], "albeit": [6, 15], "major": [6, 11, 12, 22, 99, 102, 111, 127, 135, 155, 164, 178, 187, 190, 209, 232, 234, 235, 267, 274, 281], "particularli": [6, 14, 19, 58, 112, 165, 179, 210, 216, 262], "engin": [6, 7, 15, 23, 35, 47, 92, 94, 132, 141, 167, 172, 177, 186, 189, 190, 192, 197, 221, 223, 236, 277], "correspondingli": 6, "big": [6, 57, 99, 105, 111, 120, 134, 140, 150, 164, 173, 179, 186], "win": [6, 164], "No": [6, 7, 58, 117, 134, 155, 194, 226, 274], "cuda_devic": 6, "creation": [6, 7, 11, 102, 209, 218, 251], "is_avail": [6, 7, 13, 79, 92, 102, 158, 169, 170, 174, 176, 181, 195, 215, 277], "synchron": [6, 12, 18, 60, 61, 86, 132, 134, 146, 148, 173, 175, 176, 183, 187, 197, 198, 227, 228, 243, 246, 247, 275, 281], "1e6": [6, 22, 225, 234, 281], "1e5": 6, "again": [6, 7, 24, 28, 48, 55, 94, 95, 99, 101, 102, 104, 105, 112, 113, 137, 142, 148, 149, 164, 175, 177, 179, 183, 186, 187, 190, 198, 199, 215, 247], "187": [6, 247], "719": 6, "410": [6, 158], "815": 6, "149": 6, "802": [6, 155], "393": 6, "458": [6, 79, 122, 155], "That": [6, 7, 19, 26, 47, 48, 49, 54, 94, 95, 97, 102, 106, 108, 109, 111, 112, 114, 136, 139, 146, 152, 154, 156, 158, 161, 164, 173, 174, 178, 183, 189, 190, 192, 206, 207, 209, 216, 261, 266], "great": [6, 54, 114, 120, 121, 208, 247, 264], "pull": [6, 24, 95, 102, 103, 154, 215], "dive": [6, 7, 12, 26, 41, 141, 146, 155, 210, 261], "elabor": [6, 7, 136, 155, 175], "fly": [6, 15, 26, 56, 105, 173, 193], "background": [6, 7, 26, 36, 79, 101, 172, 184, 186, 192, 272, 273], "tmp": [6, 26, 155, 186, 197, 200, 234, 271, 272], "torch_extens": 6, "emit": [6, 7, 105, 189], "ninja": 6, "verbos": [6, 26, 145, 186, 189, 223, 230], "complic": [6, 15, 105, 106, 111, 112, 120, 138, 189, 221, 231, 246, 247], "techniqu": [6, 18, 19, 22, 24, 54, 65, 104, 105, 111, 113, 131, 136, 142, 143, 144, 154, 162, 165, 167, 169, 171, 177, 186, 190, 193, 199, 206, 211, 216, 219, 262, 277, 280], "fine": [6, 7, 19, 22, 54, 56, 94, 105, 130, 137, 148, 155, 172, 183, 187, 190, 206, 216, 246, 247, 261, 262, 280], "system": [6, 7, 10, 11, 13, 15, 16, 25, 26, 28, 60, 104, 131, 134, 138, 148, 165, 167, 172, 173, 175, 187, 189, 190, 197, 222, 223, 228, 249, 262, 271, 280], "increment": [6, 12, 89, 108, 112, 148, 174], "thu": [6, 7, 10, 11, 22, 23, 24, 26, 35, 42, 54, 89, 92, 104, 112, 133, 150, 164, 167, 179, 210, 218, 232, 243, 247, 252, 262, 280], "didn": [6, 10, 25, 95, 114, 154, 175, 221], "prospect": 6, "pointwis": [6, 10, 153, 158, 234, 262, 266], "declar": [6, 7, 14, 26, 79], "best": [6, 7, 10, 26, 40, 42, 47, 57, 65, 79, 92, 103, 114, 117, 119, 121, 127, 131, 144, 148, 150, 155, 166, 167, 172, 175, 177, 181, 189, 193, 199, 210, 216, 235, 236, 237, 252, 261, 262, 265, 266, 272, 274, 280], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": [6, 158], "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 226], "cuda_runtim": 6, "templat": [6, 10, 25, 26, 122, 148, 155, 210, 237], "typenam": 6, "scalar_t": [6, 155], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 21, 28, 40, 44, 47, 53, 57, 58, 92, 94, 108, 134, 135, 136, 145, 149, 158, 177, 178, 181, 189, 209, 211, 215, 243, 262], "zeros_lik": [6, 102, 175, 232], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 11, 12, 15, 26, 36, 54, 67, 68, 86, 94, 95, 97, 99, 101, 105, 106, 111, 117, 119, 120, 138, 139, 149, 155, 171, 173, 174, 176, 183, 184, 186, 190, 197, 206, 208, 209, 223, 245, 247, 277, 279], "runtim": [6, 10, 15, 20, 21, 24, 26, 28, 44, 55, 86, 89, 94, 97, 98, 102, 116, 117, 119, 131, 135, 136, 141, 142, 154, 164, 167, 169, 183, 187, 189, 190, 199, 201, 210, 222, 223, 225, 234, 235, 246, 247, 252, 265, 266, 273], "back": [6, 7, 10, 11, 15, 16, 22, 23, 25, 26, 35, 48, 51, 56, 79, 92, 94, 102, 104, 108, 112, 114, 119, 134, 137, 158, 164, 167, 173, 175, 176, 177, 179, 186, 187, 189, 190, 193, 206, 211, 229, 259, 262, 274, 275], "determin": [6, 7, 10, 12, 19, 22, 44, 53, 95, 97, 102, 103, 104, 105, 108, 111, 114, 135, 136, 138, 150, 164, 165, 166, 171, 187, 189, 190, 197, 211, 215, 216, 247, 252, 253, 262], "conceptu": [6, 7, 35, 47, 54, 120, 261], "switch": [6, 10, 16, 22, 101, 102, 121, 164, 190, 222, 235, 246, 248, 252, 265], "scalartyp": 6, "messag": [6, 17, 54, 94, 117, 141, 148, 186, 189, 223, 280], "alia": [6, 11, 102], "instanti": [6, 7, 11, 15, 24, 25, 28, 37, 42, 56, 57, 69, 71, 89, 97, 104, 112, 114, 120, 138, 170, 171, 174, 186, 218, 234, 251], "retriev": [6, 7, 15, 18, 24, 35, 37, 54, 137, 138, 169, 173, 175, 176, 190, 243, 280], "at_dispatch_all_typ": 6, "sens": [6, 10, 13, 15, 104, 111, 112, 150, 167, 184], "routin": [6, 7, 26, 190], "convolut": [6, 7, 10, 13, 14, 23, 57, 95, 97, 102, 104, 112, 121, 127, 131, 158, 161, 171, 180, 181, 189, 222, 223, 235, 236, 243, 246, 249, 252, 253, 264, 265, 276], "harder": [6, 104, 199], "ourselv": [6, 7, 40, 54, 142, 173], "grid": [6, 56, 101, 103, 112, 127, 181, 184, 200], "fill": [6, 7, 15, 97, 111, 112, 139, 149, 207, 208], "matric": [6, 13, 19, 26, 28, 44, 53, 94, 108, 156, 165, 216, 223], "2048": [6, 21, 104], "heard": 6, "introductori": 6, "ever": [6, 7, 26, 137, 146, 189, 251], "__restrict__": [6, 210], "size_t": 6, "column": [6, 21, 26, 94, 102, 106, 108, 119, 136, 139, 155, 156, 161, 183, 186, 190, 207, 208, 209, 252], "index": [6, 7, 16, 37, 44, 45, 48, 53, 54, 56, 79, 87, 102, 103, 105, 106, 108, 109, 111, 112, 119, 132, 137, 138, 139, 140, 148, 165, 169, 175, 179, 181, 183, 186, 187, 189, 190, 199, 211, 221, 234, 280], "gates_row": 6, "primarili": [6, 86, 176, 187, 230, 246, 262], "imagin": [6, 94, 102, 105, 111, 143, 148, 164, 165, 179, 190, 247, 259], "giant": [6, 179], "million": [6, 127, 133, 149], "serial": [6, 7, 11, 26, 28, 41, 42, 112, 121, 131, 189, 198, 243, 247, 276], "faster": [6, 7, 10, 13, 22, 54, 61, 79, 99, 102, 104, 112, 121, 131, 133, 135, 145, 146, 149, 150, 156, 158, 166, 167, 175, 179, 187, 192, 197, 210, 219, 246, 247, 261, 262, 263, 266, 280], "right": [6, 7, 10, 11, 13, 15, 23, 26, 35, 39, 44, 47, 53, 54, 57, 68, 86, 94, 99, 101, 104, 106, 108, 111, 120, 139, 148, 157, 161, 164, 173, 174, 175, 178, 179, 183, 186, 192, 193, 221, 235, 243], "inde": [6, 15, 17, 104, 142, 156, 167, 173, 178, 187, 190, 208, 209, 247], "ineffici": [6, 86, 190, 211], "readabl": [6, 28, 37, 56, 95, 102, 105, 140, 183, 197, 247, 261], "especi": [6, 8, 19, 22, 54, 57, 79, 95, 102, 133, 135, 146, 154, 161, 164, 167, 189, 193, 199, 207, 216, 237], "dimension": [6, 36, 44, 51, 53, 54, 57, 65, 76, 77, 94, 99, 101, 102, 104, 107, 108, 109, 111, 120, 136, 141, 158, 171, 178, 179, 184, 186, 190, 209, 223, 231], "row": [6, 21, 26, 56, 79, 94, 99, 102, 106, 108, 109, 111, 112, 134, 136, 138, 139, 156, 175, 190, 207, 209, 221, 243], "arithmet": [6, 22, 44, 97, 102, 167], "fortun": [6, 7, 11, 16, 26, 92, 148, 149, 247], "foo": [6, 24, 25, 176, 201, 215, 218, 261], "12": [6, 26, 40, 43, 97, 103, 119, 132, 133, 155, 175, 181, 184, 194, 199, 216, 234, 235, 237, 247, 269], "foo_a": 6, "trace": [6, 10, 11, 17, 23, 24, 35, 47, 94, 101, 119, 131, 141, 153, 155, 161, 167, 178, 183, 189, 190, 197, 210, 214, 219, 230, 236, 266, 273, 274, 278], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 54, 155, 173, 175, 177, 210, 227], "integ": [6, 7, 10, 45, 97, 102, 106, 108, 111, 138, 171, 189, 192, 199, 209, 223, 252], "fundament": [6, 54, 96, 99, 108, 111, 120, 131, 157, 167, 189, 190, 207, 229, 261], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 11, 19, 132, 189, 216], "packedaccessor32": 6, "variant": [6, 54, 97, 99, 101, 103, 136, 142, 172, 178, 190, 193, 195, 234], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 19, 61, 146, 167, 172, 174, 187, 192, 199, 200, 211, 216], "host": [6, 21, 39, 59, 86, 98, 105, 132, 133, 136, 146, 148, 167, 169, 176, 177, 183, 231, 232, 252, 262, 271], "reshap": [6, 7, 13, 22, 56, 99, 102, 111, 112, 169, 211, 222, 237], "pattern": [6, 19, 24, 99, 101, 136, 148, 153, 155, 165, 176, 206, 208, 213, 216, 218, 231, 236], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "hassl": [6, 7], "entail": [6, 189], "simpler": [6, 112, 134, 136, 142, 152, 165, 221, 247], "hope": [6, 28, 54, 157, 164, 187, 193, 235], "fastest": [6, 178, 272], "129": [6, 119], "431": 6, "304": [6, 54], "641": [6, 158], "faq": [6, 25, 26], "blog": [6, 132, 133, 139, 144, 193, 235, 245], "framework": [7, 11, 27, 28, 39, 57, 94, 106, 107, 120, 130, 131, 167, 169, 175, 178, 186, 193, 197, 213, 223, 227, 232, 237, 277], "sit": [7, 113, 114, 116, 117, 165], "atop": 7, "substanti": [7, 138, 167], "codebas": [7, 11, 15], "foundat": [7, 139, 173, 186, 190], "underli": [7, 10, 15, 26, 44, 53, 65, 79, 102, 104, 121, 138, 150, 155, 166, 176, 189, 197, 208, 209, 211, 231, 232, 262], "popular": [7, 72, 79, 104, 120, 138, 148, 149, 190, 193, 199, 210, 236, 237, 266, 277], "stochast": [7, 40, 51, 57, 69, 94, 97, 103, 112, 120, 148, 173, 174], "descent": [7, 40, 47, 51, 69, 94, 97, 103, 112, 120, 148, 190, 199, 265], "digit": [7, 51, 97, 112, 131, 132, 133, 186, 277], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 103, 144, 148], "lightn": [7, 138], "talk": [7, 10, 54, 57, 60, 97, 108, 167, 173, 176, 189, 190], "cppcon": 7, "2018": 7, "quick": [7, 19, 36, 53, 94, 104, 106, 109, 111, 131, 133, 146, 150, 156, 166, 190, 199, 216, 247, 250, 258, 266, 279], "humor": 7, "sweep": [7, 178], "philosophi": 7, "ecosystem": [7, 117, 141], "descript": [7, 55, 132, 133, 155, 173, 175, 176, 177, 178, 186, 189, 213, 247, 262, 277, 278], "embark": 7, "excit": [7, 25, 26, 154, 164], "team": [7, 117, 138, 174, 186, 193], "job": [7, 49, 57, 58, 59, 65, 86, 104, 135, 138, 144, 145, 146, 148, 169, 214], "reinforc": [7, 15, 103, 131, 157, 175, 176, 180], "game": [7, 48, 57, 157, 277], "tractabl": [7, 105], "multithread": [7, 47, 61, 119, 167, 232, 243, 247, 280], "lock": [7, 15, 28, 61, 148, 167, 175, 176, 228, 232], "gil": [7, 61, 146, 232], "multiprocess": [7, 12, 15, 37, 41, 56, 58, 60, 61, 132, 133, 146, 148, 173, 176, 177, 197, 227, 228, 229, 232, 280, 281], "scalabl": [7, 131, 135, 138, 190, 206, 223, 235, 236, 262, 280], "shortcom": [7, 208], "neuroevolut": 7, "owner": [7, 175, 176, 177], "anyth": [7, 14, 17, 48, 76, 77, 97, 99, 102, 105, 108, 109, 111, 112, 120, 172, 193, 199, 243, 259, 260, 277], "serv": [7, 40, 62, 65, 89, 97, 104, 109, 120, 131, 146, 154, 157, 170, 176, 177, 190, 198, 208, 227, 230, 234, 246, 247, 261, 271], "web": [7, 114, 243], "server": [7, 18, 28, 130, 131, 135, 146, 170, 177, 194, 229, 232, 236, 243, 271, 277, 280], "3d": [7, 65, 99, 101, 108, 109, 169, 186, 262], "graphic": [7, 178, 222], "photo": [7, 95], "softwar": [7, 170, 183, 197, 222], "remain": [7, 92, 94, 104, 134, 135, 148, 153, 164, 167, 171, 179, 194, 195, 197, 199, 208, 211, 262], "forth": [7, 112], "retain": [7, 44, 53, 102, 121], "intuit": [7, 57, 79, 97, 102, 106, 121, 155, 179, 186, 189, 207, 243, 259], "tradit": [7, 57, 104, 106, 156, 176, 189, 190, 193, 197, 210], "experi": [7, 11, 104, 105, 133, 135, 148, 157, 167, 170, 173, 174, 178, 179, 181, 186, 187, 189, 190, 193, 199, 206, 214, 215, 221, 227, 230, 246, 261, 263, 271, 277, 278, 280], "compet": [7, 138, 167], "meant": [7, 8, 12, 89, 94, 99, 133, 190, 197, 208, 262, 279], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 79, 133, 142, 167, 173, 174, 210, 231, 247], "core": [7, 10, 11, 12, 49, 105, 106, 107, 120, 121, 131, 136, 148, 149, 155, 158, 167, 172, 183, 189, 197, 214, 243, 246, 261, 280], "principl": [7, 10, 109, 111, 138], "curiou": [7, 150, 164, 166, 226], "tri": [7, 21, 57, 94, 105, 111, 174, 189, 222, 246, 277], "experienc": [7, 89], "ask": [7, 19, 25, 26, 95, 97, 99, 140, 149, 167, 173, 189, 190, 215, 216, 247], "rememb": [7, 48, 57, 79, 109, 112, 119, 121, 156, 157, 164, 167, 179, 190, 193, 247], "dot": [7, 15, 35, 57, 109, 111, 131, 156, 179, 180, 195, 221, 247, 274], "colon": [7, 186], "zip": [7, 21, 54, 55, 57, 114, 121, 140, 175, 177, 184, 186, 192, 216, 232, 234, 276], "free": [7, 11, 22, 25, 26, 28, 40, 47, 54, 79, 89, 104, 113, 114, 116, 117, 121, 133, 134, 138, 148, 153, 154, 157, 158, 164, 167, 173, 175, 179, 183, 189, 232, 261], "too": [7, 11, 15, 22, 48, 68, 72, 86, 92, 97, 99, 104, 105, 111, 112, 119, 120, 134, 136, 146, 164, 167, 171, 174, 175, 177, 179, 189, 206, 261, 275], "cu90": 7, "url": [7, 22, 183, 187, 190, 199, 260], "wget": [7, 21, 192, 199], "nightli": [7, 21, 152, 187, 192, 197, 199, 214, 221, 237, 277], "dep": 7, "tini": [7, 132, 164, 277], "ey": [7, 23, 26, 167], "fledg": 7, "visual": [7, 15, 28, 47, 57, 79, 86, 87, 97, 103, 131, 133, 137, 138, 143, 154, 173, 183, 186, 200, 201, 208, 230, 252, 260, 266], "studio": [7, 201], "qmake": 7, "makefil": 7, "feel": [7, 11, 22, 40, 47, 54, 104, 113, 114, 116, 117, 121, 133, 153, 154, 155, 157, 158, 164, 183, 189], "comfort": 7, "box": [7, 10, 11, 12, 17, 19, 45, 79, 131, 134, 138, 141, 143, 148, 172, 175, 183, 189, 192, 193, 216, 221, 223, 236, 243, 245, 277], "cmake_prefix_path": [7, 25, 26], "invok": [7, 10, 25, 26, 28, 104, 146, 148, 152, 154, 155, 167, 170, 176, 177, 200, 208, 219, 223, 243, 259, 270, 274, 280], "agre": [7, 26, 281], "break": [7, 10, 11, 12, 17, 22, 36, 37, 56, 86, 94, 99, 113, 121, 134, 135, 140, 141, 164, 175, 177, 187, 195, 206, 276], "unexpect": [7, 56, 208, 262], "pwd": [7, 243], "fa350df05ecf": 7, "home": [7, 44, 53, 206, 222, 233], "enter": [7, 54, 133, 146, 148], "ran": [7, 111, 135, 173, 176, 178, 190, 247], "me": [7, 19, 54, 164, 179, 216], "besid": [7, 26, 97, 111, 165, 175, 237, 245, 262], "encapsul": [7, 40, 51, 99, 103, 141, 164, 175], "buffer": [7, 15, 48, 51, 121, 133, 134, 142, 146, 150, 152, 157, 161, 164, 165, 166, 167, 171, 174, 189, 190, 195, 197, 198, 218, 222, 228, 251, 264, 265], "nest": [7, 15, 36, 47, 97, 102, 131, 134, 153, 173, 175, 177, 178, 214, 217], "similarli": [7, 13, 25, 56, 87, 95, 102, 134, 137, 138, 139, 155, 156, 164, 167, 169, 194, 198, 209, 229], "w": [7, 35, 40, 47, 51, 56, 79, 109, 111, 133, 158, 177, 183, 189, 192, 199, 210], "register_paramet": [7, 218], "reflect": [7, 10, 26, 44, 53, 97, 102, 173, 189], "magic": [7, 106, 140, 148, 156], "assign": [7, 25, 45, 49, 51, 58, 95, 99, 102, 104, 105, 106, 109, 111, 113, 134, 148, 165, 173, 190, 231, 243, 259, 262, 280], "behind": [7, 10, 19, 26, 49, 86, 104, 106, 112, 120, 142, 174, 194, 207, 209, 214, 216, 218], "scene": [7, 26, 112, 120, 218, 277], "another_bia": 7, "recurs": [7, 18, 48, 134, 141, 187, 218, 260], "0808": 7, "8613": 7, "2017": [7, 79], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": 7, "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 186], "1230": 7, "0516": 7, "aptli": [7, 14], "register_modul": 7, "dropout": [7, 22, 23, 40, 42, 54, 79, 99, 103, 112, 121, 132, 136, 138, 140, 149, 175, 177, 179, 181, 211, 216, 237, 279], "conv2d": [7, 13, 22, 48, 51, 57, 79, 97, 103, 112, 114, 121, 132, 142, 158, 172, 176, 181, 184, 189, 194, 213, 223, 236, 237, 243, 252, 262], "subtleti": [7, 209], "bodi": [7, 155], "upon": [7, 20, 54, 61, 127, 148, 152, 179, 184, 187, 193, 197, 245, 262], "tree": [7, 11, 16, 25, 54, 105, 111, 142, 214, 230], "p": [7, 21, 22, 54, 72, 79, 99, 105, 111, 112, 120, 132, 133, 140, 142, 148, 153, 158, 161, 164, 175, 176, 177, 192, 216, 222, 223, 227, 232, 234], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": [7, 26], "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 276], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": 7, "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 12, 22, 40, 43, 47, 51, 103, 118, 119, 122, 148, 177, 180, 181, 193, 201, 225, 234, 235, 237, 276, 281], "6861": 7, "1166": 7, "45": [7, 138, 140, 155, 177, 234, 235], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 36, 190], "ordereddict": [7, 192], "13": [7, 26, 97, 119, 177, 181, 186, 193, 234, 235, 243], "48": [7, 19, 155, 158, 184, 216, 234, 235, 252], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": [7, 234], "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": 7, "8060": 7, "topic": [7, 54, 65, 79, 95, 102, 113, 114, 116, 117, 124, 130, 191, 220, 232, 254, 255, 256, 257, 268], "devour": 7, "menu": [7, 55], "pipelin": [7, 18, 65, 112, 131, 173, 186, 192, 197], "briefli": [7, 40, 65, 131, 136, 173, 187, 193, 223], "who": [7, 54, 79, 104, 107, 135, 148, 164, 189, 229, 243, 247, 272, 276], "heap": 7, "referenc": [7, 177], "lower": [7, 15, 19, 55, 79, 86, 99, 101, 131, 133, 134, 135, 138, 146, 152, 155, 164, 165, 173, 174, 178, 184, 186, 189, 190, 193, 194, 209, 216, 261, 262, 277], "heavili": [7, 167, 179, 199], "ergonom": 7, "far": [7, 15, 23, 25, 51, 54, 68, 94, 97, 99, 102, 104, 105, 106, 120, 137, 148, 164, 171, 174, 179, 189, 190, 193, 206, 247], "stack": [7, 10, 15, 16, 24, 25, 44, 53, 97, 119, 131, 136, 150, 157, 161, 167, 170, 175, 179, 183, 184, 186, 190, 193, 197], "shared_ptr": [7, 25], "cognit": 7, "think": [7, 25, 26, 48, 57, 72, 95, 97, 105, 106, 108, 109, 111, 120, 154, 156, 173, 176, 178, 190, 193, 209, 221], "everywher": [7, 102, 111], "make_shar": 7, "stai": [7, 86, 135, 136, 141, 173, 174, 175], "shorten": [7, 26], "wait": [7, 18, 24, 86, 135, 140, 146, 148, 149, 167, 170, 175, 176, 177, 183, 186, 190, 197, 228, 234, 251, 252, 262], "hell": 7, "lot": [7, 10, 11, 16, 22, 24, 56, 94, 105, 112, 132, 134, 148, 161, 176, 179, 183, 187, 190, 199, 206, 246, 247, 261], "came": [7, 57, 207], "scheme": [7, 21, 103, 104, 131, 190, 206, 213, 218, 251, 259], "hide": [7, 142, 173, 221], "reserv": [7, 11, 16, 183, 198], "simplifi": [7, 11, 15, 27, 112, 139, 146, 169, 179, 186, 192, 197, 206, 209, 213, 214, 231], "linearimpl": 7, "torch_modul": 7, "brief": [7, 27, 86, 94, 105, 173, 190, 193], "typedef": 7, "among": [7, 10, 25, 58, 86, 92, 103, 136, 171, 183, 245, 280], "holder": 7, "arrow": [7, 47, 136], "resembl": [7, 13, 26, 105, 144, 174], "extra": [7, 10, 61, 97, 102, 104, 108, 109, 112, 116, 134, 139, 140, 142, 149, 152, 165, 173, 179, 186, 187, 192, 236, 252, 261, 262], "netimpl": 7, "subtl": [7, 102, 246], "deserv": 7, "construct": [7, 15, 23, 24, 25, 28, 35, 51, 57, 69, 71, 89, 104, 120, 127, 131, 134, 140, 143, 149, 150, 156, 162, 166, 173, 174, 176, 179, 190, 192, 193, 211, 214, 218, 221, 235, 237, 246, 249, 264, 281], "tricki": [7, 19, 143, 153, 189, 190, 216], "nullptr": [7, 200], "familiar": [7, 10, 11, 25, 39, 40, 44, 48, 53, 58, 59, 61, 89, 97, 98, 102, 103, 105, 107, 112, 121, 131, 133, 137, 144, 145, 148, 157, 169, 176, 189, 215, 243, 247, 261], "pythonista": 7, "disadvantag": [7, 121], "said": [7, 26, 28, 157, 164, 173, 174, 206, 207], "introduct": [7, 12, 17, 19, 50, 52, 58, 59, 60, 61, 62, 88, 89, 94, 99, 106, 107, 110, 113, 114, 115, 117, 122, 131, 141, 144, 145, 155, 180, 193, 208, 216, 236, 247, 262, 266, 274, 277, 279], "sooner": [7, 133], "technic": [7, 26, 148, 149, 164, 190, 206, 225, 226, 234], "henceforth": 7, "recap": [7, 51, 174, 209, 251], "adversari": [7, 48, 103, 122, 131], "architectur": [7, 19, 28, 36, 57, 61, 79, 89, 99, 104, 105, 131, 133, 136, 138, 144, 150, 161, 167, 169, 171, 178, 184, 186, 187, 193, 210, 213, 216, 236, 243, 246, 262], "repositori": [7, 11, 59, 87, 124, 133, 136, 148, 169, 170, 177, 178, 179, 192, 197, 222], "distinct": [7, 19, 24, 57, 86, 102, 111, 133, 177, 184, 189, 190, 216, 277], "transform": [7, 13, 19, 20, 22, 23, 26, 27, 28, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 54, 57, 79, 92, 94, 95, 97, 102, 103, 119, 122, 130, 131, 132, 134, 148, 149, 150, 152, 153, 155, 157, 161, 164, 165, 172, 176, 179, 180, 183, 184, 186, 192, 195, 199, 211, 213, 216, 232, 235, 236, 237, 247, 249, 259, 261, 262, 267, 270, 274, 277], "probabl": [7, 10, 25, 36, 54, 57, 79, 95, 99, 102, 104, 105, 108, 111, 132, 137, 138, 140, 172, 174, 181, 184, 186, 211, 235], "judg": 7, "closer": [7, 94, 104, 174], "feedback": [7, 22, 133, 153, 154, 157, 158, 198, 214, 234], "authent": 7, "theori": [7, 54, 57, 94, 104, 137, 167], "delic": 7, "tandem": [7, 273], "indistinguish": 7, "fool": [7, 54, 79], "excel": [7, 56, 184, 228], "realist": [7, 24, 193, 211], "2d": [7, 36, 57, 99, 112, 134, 139, 153, 175, 186, 190, 231], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 51, 79, 99, 103, 114, 121, 132, 166, 171, 176, 181, 184, 237], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 79, 99, 103, 114, 121, 132, 176, 181, 184, 237], "pad": [7, 22, 54, 99, 142, 178, 193, 208, 211, 216, 262], "batch_norm2": 7, "conv3": 7, "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 22, 57, 112, 142, 154, 194, 262], "dcgangener": 7, "chosen": [7, 23, 25, 95, 99, 135, 174, 187, 246, 247, 277], "student": [7, 104], "harm": [7, 104], "discoveri": [7, 189], "fed": [7, 13, 41, 54, 57, 186, 190], "soylent": 7, "regularli": [7, 58], "channel": [7, 11, 13, 22, 24, 47, 48, 57, 95, 97, 99, 102, 104, 112, 131, 136, 171, 180, 184, 192, 227, 236, 249, 262], "moduleopt": 7, "linearopt": 7, "leaki": [7, 57], "squash": [7, 149, 157], "sequenti": [7, 13, 22, 40, 54, 72, 99, 111, 120, 149, 153, 165, 181, 211, 218, 221, 225, 234, 235, 262, 280, 281], "orient": [7, 181], "layer": [7, 10, 11, 12, 13, 14, 16, 18, 19, 22, 23, 35, 40, 41, 42, 47, 51, 54, 57, 60, 65, 72, 79, 92, 94, 97, 101, 102, 103, 104, 106, 112, 120, 121, 127, 131, 132, 133, 134, 138, 139, 140, 141, 149, 158, 165, 169, 171, 172, 173, 176, 177, 179, 181, 189, 190, 192, 195, 199, 210, 213, 216, 225, 226, 227, 230, 234, 235, 245, 246, 249, 251, 253, 259, 263, 264, 267, 279], "conv2dopt": 7, "leakyrelu": [7, 57], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 69, 120, 143], "knob": [7, 280], "sampler": [7, 22, 37, 60, 103, 132, 133, 173, 181], "collat": [7, 56], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 12, 21, 54, 57, 58, 60, 65, 132, 146, 148, 175, 176, 177, 197, 227, 228, 229, 281], "concurr": [7, 119, 136, 138, 167, 195, 228, 262, 280], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 184, 186], "label": [7, 37, 40, 41, 45, 47, 48, 56, 57, 79, 92, 94, 95, 97, 101, 102, 103, 106, 111, 119, 127, 133, 136, 139, 146, 167, 172, 175, 179, 184, 190, 192, 216, 237, 243, 247, 249, 252, 266, 277, 281], "field": [7, 11, 12, 15, 16, 36, 54, 99, 109, 111, 148, 164, 175, 183, 189, 192, 197, 208, 232], "rebuild": [7, 247], "danc": [7, 13], "generator_optim": 7, "adamopt": 7, "2e": [7, 94], "beta": [7, 20, 23, 114, 131, 180, 209, 266, 269], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 103, 120, 209, 214, 217], "lbfg": [7, 13], "rmsprop": [7, 40, 51, 73, 106, 120], "sgd": [7, 22, 40, 47, 48, 51, 71, 73, 92, 103, 106, 112, 120, 121, 146, 148, 175, 176, 177, 181, 184, 236, 237, 260, 264, 265, 270], "exhaust": [7, 12, 189], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 246], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 183], "g_loss": 7, "printf": 7, "r": [7, 12, 15, 22, 40, 47, 51, 56, 79, 89, 105, 131, 155, 156, 157, 158, 161, 174, 175, 177, 186, 192, 221, 236, 247, 262, 280], "2ld": 7, "3ld": 7, "4f": [7, 132, 133, 140, 181], "batches_per_epoch": 7, "uniformli": [7, 92, 174, 262], "robust": [7, 54, 58, 59, 79, 102, 135, 174, 235], "smooth": [7, 104, 113, 186], "propag": [7, 11, 18, 35, 40, 47, 49, 51, 57, 104, 108, 109, 112, 143, 152, 158, 173, 262], "repeat": [7, 15, 21, 22, 26, 94, 139, 140, 173, 183, 189, 195, 206, 227, 234, 252, 261, 267], "spiel": 7, "progress": [7, 10, 16, 27, 57, 58, 101, 103, 149, 179, 184, 197, 210, 229], "observ": [7, 15, 22, 51, 56, 86, 103, 127, 132, 133, 138, 141, 149, 157, 158, 164, 167, 173, 174, 175, 177, 178, 179, 187, 193, 194, 209, 213, 219, 225, 235, 246, 247, 253, 259, 266, 267, 278, 281], "meaning": [7, 54, 104, 158, 197], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 133, 177, 235, 247, 261], "3652": 7, "6626": 7, "400": [7, 121, 247, 261, 277], "8057": 7, "2795": [7, 247], "3531": 7, "4452": 7, "600": [7, 158, 174, 279], "3501": 7, "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 39, 48, 86, 104, 105, 106, 111, 112, 120, 136, 164, 174, 179, 197, 232, 237], "onto": [7, 10, 15, 18, 21, 48, 99, 101, 102, 131, 149, 164, 176, 177, 190, 197, 218, 262], "somewher": [7, 26, 99, 105, 106, 121], "kcpu": [7, 200, 222], "whose": [7, 86, 89, 94, 95, 104, 111, 133, 137, 158, 167, 186, 245, 247], "insert": [7, 13, 19, 22, 99, 177, 189, 194, 213, 216], "op": [7, 11, 12, 16, 24, 25, 26, 53, 86, 117, 131, 132, 133, 134, 136, 141, 142, 146, 148, 155, 158, 172, 183, 193, 194, 199, 200, 207, 208, 210, 211, 218, 223, 227, 234, 237, 246, 251, 266], "previou": [7, 12, 15, 16, 18, 19, 25, 26, 40, 54, 58, 60, 102, 103, 104, 112, 117, 127, 133, 134, 135, 139, 140, 143, 144, 145, 149, 157, 164, 167, 169, 171, 173, 174, 175, 177, 178, 179, 183, 184, 186, 187, 189, 190, 216, 223, 247, 253, 262, 277], "resid": [7, 104, 167], "downstream": [7, 186], "portabl": [7, 272], "augment": [7, 27, 56, 112, 127, 131, 181, 189, 192], "period": [7, 54, 57, 135, 138, 157, 183, 197], "middl": 7, "procedur": [7, 26, 51, 130, 174, 181], "restor": [7, 79, 121, 146, 158, 264], "session": [7, 23, 104, 114], "essenti": [7, 11, 15, 17, 35, 54, 105, 106, 108, 131, 141, 148, 162, 167, 174, 189, 213, 218, 237, 280], "interv": [7, 15, 94, 138, 177], "kcheckpointeveri": 7, "str": [7, 21, 22, 25, 87, 133, 169, 173, 176, 186, 189, 219, 232, 280], "checkpoint_count": 7, "counter": [7, 12, 54, 57, 79, 141, 148, 274], "bump": 7, "beta1": [7, 57, 234], "krestorefromcheckpoint": 7, "intermediari": [7, 137], "xxx": [7, 16, 56], "matplotlib": [7, 13, 37, 56, 57, 62, 79, 94, 95, 97, 101, 103, 140, 174, 179, 181, 184, 186], "argpars": [7, 132, 133, 175, 176, 177], "pyplot": [7, 13, 56, 79, 103, 112, 140, 181, 184, 186], "plt": [7, 13, 56, 79, 103, 140, 179, 181, 184, 186], "parser": [7, 105, 132, 133, 175, 176, 177], "argumentpars": [7, 132, 133, 175, 176, 177], "add_argu": [7, 132, 133, 175, 176, 177], "png": [7, 56, 131, 192], "parse_arg": [7, 132, 133, 175, 176, 177], "sample_fil": 7, "mul": [7, 141, 155, 189, 222, 234, 247, 261], "uint8": [7, 192], "numpi": [7, 13, 17, 20, 22, 45, 48, 56, 62, 75, 77, 78, 79, 94, 103, 112, 114, 119, 131, 143, 172, 177, 181, 184, 186, 187, 206, 214, 216, 245, 261, 277], "axi": [7, 24, 56, 86, 108, 109, 139, 167, 171, 186], "subplot": [7, 56, 79, 181], "imshow": [7, 13, 56, 79, 103, 181, 184, 186], "cmap": [7, 79, 103, 184], "grai": [7, 79, 157], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "57": [7, 19, 40, 119, 140, 155, 234, 252], "4953": 7, "0195": 7, "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 103, 114, 121, 127, 177, 184, 252], "8084": 7, "hoorai": [7, 28], "ball": 7, "court": 7, "digest": [7, 261], "necess": [7, 54, 101], "broad": [7, 62, 95, 103], "space": [7, 15, 25, 54, 57, 79, 94, 95, 99, 104, 105, 109, 111, 138, 149, 157, 164, 167, 173, 174, 177, 179, 183, 184, 186, 190, 193, 198], "consult": [7, 164, 245], "stuck": [7, 214], "whenev": [7, 25, 58, 71, 102, 105, 106, 223, 265], "rate": [7, 40, 47, 57, 92, 97, 99, 103, 104, 106, 127, 132, 133, 138, 139, 157, 174, 176, 190, 192, 197, 232, 260, 262], "vmap": [8, 10, 131, 152, 156, 161, 166, 214, 217], "oppos": [8, 25, 54, 57, 127, 148, 156, 161, 176, 247], "treat": [8, 17, 94, 111, 166, 175, 187, 189, 190, 219], "opaqu": [8, 17, 26, 261, 274], "callabl": [8, 17, 24, 45, 56, 112, 183, 187, 189, 245, 274], "aotinductor": [8, 189, 266, 274, 277], "toe": 8, "registr": [8, 10, 11, 16, 17, 25, 26, 236, 237, 243], "pybind": 8, "ed": [8, 276], "respons": [10, 12, 18, 21, 54, 94, 95, 103, 112, 131, 136, 142, 146, 148, 175, 176, 179, 187, 189, 225, 227, 245], "nontrivi": 10, "cut": [10, 169, 189], "concern": [10, 24, 106, 190, 206, 232, 237], "rule": [10, 25, 35, 47, 51, 94, 102, 109, 137, 150, 156, 165, 166, 173, 174, 189, 246], "convers": [10, 54, 94, 102, 158, 179, 206, 232, 234, 259], "highest": [10, 22, 48, 54, 101, 135, 140, 174, 186, 187, 262], "prioriti": [10, 135], "transfer": [10, 20, 25, 48, 56, 104, 112, 121, 122, 131, 148, 167, 172, 176, 183, 192, 198, 222, 248, 263], "redispatch": 10, "unlik": [10, 13, 19, 95, 102, 104, 120, 137, 152, 153, 158, 179, 189, 215, 216, 274, 280], "style": [10, 136, 169, 189, 192, 229], "abid": [10, 57], "myop": 10, "myadd": [10, 11], "myadd_cpu": 10, "self_": 10, "other_": 10, "self_ptr": 10, "other_ptr": 10, "myadd_cuda": 10, "boundari": [10, 134, 173, 271], "myops_cpu": 10, "myops_cuda": 10, "subdivid": 10, "xla": [10, 11, 16, 259], "torch_xla": [10, 11], "useabl": 10, "behav": [10, 17, 23, 102, 112, 158, 165, 175, 243], "autogradnotimplementedfallback": 10, "notimpl": 10, "node": [10, 21, 23, 26, 35, 47, 51, 58, 59, 60, 61, 65, 67, 94, 101, 105, 114, 117, 120, 130, 133, 134, 135, 139, 141, 144, 145, 146, 154, 155, 176, 179, 189, 195, 200, 213, 231, 234, 262, 280], "preserv": [10, 19, 25, 28, 102, 131, 134, 158, 171, 207, 213, 216, 259, 264], "require_grad": 10, "ness": 10, "pin": [10, 103, 137, 167, 262], "lost": [10, 19, 158, 216], "alias": [10, 11, 189], "adinplaceorview": 10, "bookkeep": [10, 247], "autogradnotimplementedinplaceorviewfallback": 10, "logi": 10, "annot": [10, 11, 21, 24, 25, 26, 37, 56, 106, 117, 186, 187, 189, 232, 247], "guess": [10, 40, 47, 54, 57, 139, 179], "twist": 10, "constitut": [10, 15], "hood": [10, 22, 54, 57, 59, 61, 65, 120, 136, 137, 156, 157, 167, 177, 209, 227, 230, 232], "singleton": [10, 176], "findschemaorthrow": 10, "decltyp": [10, 234], "qualifi": [10, 25, 229], "overload": [10, 25], "typic": [10, 12, 15, 22, 24, 37, 47, 51, 53, 59, 60, 86, 97, 105, 106, 111, 134, 136, 138, 142, 144, 155, 164, 167, 173, 176, 186, 187, 189, 190, 234, 235, 236, 237, 246, 248, 262, 267, 277, 280], "cast": [10, 19, 21, 77, 119, 133, 134, 167, 189, 216, 246], "lookup": [10, 18, 111, 141, 177], "typo": 10, "myaddfunct": [10, 11], "autononvariabletypemod": [10, 11], "myadd_autograd": [10, 11], "except": [10, 12, 19, 26, 44, 47, 53, 54, 57, 95, 99, 102, 106, 109, 113, 127, 134, 135, 139, 150, 152, 156, 158, 166, 170, 179, 189, 198, 211, 214, 216, 218, 221, 222, 236, 271, 277], "raii": 10, "guard": [10, 146, 226, 234], "infinit": 10, "overflow": [10, 54, 199, 246], "send": [10, 11, 12, 13, 48, 49, 65, 79, 92, 148, 157, 167, 169, 170, 175, 176, 177, 190, 227, 252], "consider": [10, 11, 23, 132, 189, 190, 277], "handler": [10, 186, 259], "autogradcpu": 10, "autogradcuda": 10, "pythondispatch": 10, "_python_dispatch": 10, "isn": [10, 94, 105, 152, 167, 172, 184, 189, 190, 208, 247, 249, 263, 264], "glorifi": 10, "add_cpu": 10, "add_cuda": 10, "unsupport": [10, 113, 117, 131, 187, 189, 277], "decentr": 10, "importantli": [10, 22, 26, 143, 164, 167, 206, 247], "parti": [10, 17, 25, 26, 134, 135, 170], "aspect": [10, 16, 56, 79, 148, 192, 247], "patch": [10, 11, 174], "dispatchkei": [10, 11], "varieti": [10, 27, 36, 54, 94, 95, 99, 103, 112, 121, 140, 167, 193, 209, 280], "fallback": [10, 11, 16, 113, 193], "opt": [10, 25, 112, 138, 158, 170, 176, 177, 183, 199, 218, 225], "amp": [10, 16, 65, 134, 158, 210, 223, 236, 266, 270], "incom": [10, 97, 183], "float16": [10, 16, 133, 158, 223, 246], "float32": [10, 15, 26, 114, 133, 134, 158, 172, 177, 195, 200, 210, 234, 246, 259], "matmul": [10, 26, 136, 155, 189, 199, 216, 221, 223, 235, 246], "impair": 10, "converg": [10, 40, 54, 57, 68, 103, 104, 120, 121, 136, 148, 165, 174, 179, 226, 246, 263, 266], "hypothet": 10, "autocast_mod": 10, "mymatmul_autocast": 10, "excludedispatchkeyguard": 10, "no_autocast": 10, "mymatmul": 10, "cached_cast": 10, "khalf": 10, "elig": [10, 262], "polici": [10, 16, 131, 132, 134, 157, 174, 175, 177, 180, 280], "mixtur": [10, 234], "meanwhil": [10, 137, 155, 207, 236], "float64": 10, "unaffect": [10, 104], "forc": [10, 15, 19, 26, 54, 99, 114, 131, 179, 187, 193, 206, 208, 216, 246, 262, 271], "fallthrough": 10, "occur": [10, 12, 17, 22, 26, 28, 58, 86, 104, 155, 158, 167, 175, 176, 183, 186, 189, 190, 197, 199, 230, 252, 273], "fall": [10, 16, 95, 165, 174, 275], "unfortun": [10, 26, 28, 120, 148, 189], "aren": [10, 143, 149, 189, 190, 208, 262, 265], "dri": [10, 183], "reduct": [10, 102, 132, 133, 134, 137, 142, 164, 170, 181, 183, 186, 193, 206, 208, 214, 246, 262], "gemm": [10, 155, 210, 235], "unless": [10, 23, 44, 53, 102, 106, 113, 173, 189, 199, 221, 251], "categori": [10, 11, 22, 79, 86, 95, 102, 127, 139, 140, 183, 189], "promote_typ": 10, "widest": 10, "safest": 10, "my_multiple_input_op_autocast": 10, "t0": [10, 133, 225, 234, 247], "t1": [10, 247], "optimist": 10, "exec_typ": 10, "my_multiple_input_op": 10, "myadd_autocast": 10, "gymnast": 10, "invoc": [10, 28, 154, 175, 243, 267, 273], "stabil": [10, 104, 174], "41478": 10, "repo": [11, 16, 21, 22, 59, 86, 131, 144, 148, 167, 175, 176, 190, 198, 199, 237], "mainten": [11, 186], "solut": [11, 19, 57, 113, 121, 131, 155, 166, 167, 186, 187, 190, 208, 211, 216, 230, 247, 262, 266, 272], "pr": [11, 184, 193, 236, 261], "propos": [11, 27, 136, 149, 165, 206, 208, 230], "request": [11, 28, 35, 47, 92, 102, 112, 133, 165, 172, 175, 176, 181, 200, 208, 209, 210, 215, 227, 228, 232], "hardwar": [11, 16, 19, 23, 44, 53, 55, 102, 104, 114, 139, 148, 150, 156, 158, 166, 167, 170, 171, 190, 193, 199, 216, 223, 235, 236, 237, 248, 262, 270, 274, 277], "googl": [11, 19, 24, 27, 28, 39, 54, 57, 101, 131, 148, 149, 173, 174, 183, 190, 280], "tpu": [11, 170, 265], "chip": 11, "layout": [11, 19, 136, 193, 206, 209, 214, 216, 231, 262], "spars": [11, 18, 99, 106, 111, 131, 149, 171, 190, 193, 208, 214, 217, 259], "quantiz": [11, 104, 127, 131, 164, 217, 223, 250, 259, 266], "enforc": [11, 15, 25, 138, 165, 206, 207], "mainli": [11, 15, 16, 21, 155, 183, 187, 213, 237, 276], "haven": [11, 26, 92, 94, 97, 102, 105, 109, 111, 150, 154, 166, 232], "identifi": [11, 19, 37, 58, 60, 79, 86, 87, 95, 112, 119, 145, 157, 158, 162, 171, 176, 189, 192, 197, 209, 216, 230, 277], "carri": [11, 15, 54, 57, 94, 102, 104, 108, 144, 149, 158, 179, 251], "privateuse1": [11, 131, 215], "autogradprivateuse1": [11, 16], "privateuse2": [11, 16], "autogradprivateuse2": [11, 16], "privateuse3": [11, 16], "autogradprivateuse3": [11, 16], "tensorimpl": [11, 16, 247, 261], "storag": [11, 16, 17, 103, 108, 121, 137, 149, 150, 158, 167, 173, 183, 197, 206, 208, 209, 214, 217, 218, 228, 229, 246, 251, 259], "dispatchkeyset": [11, 16], "k": [11, 13, 22, 86, 95, 105, 136, 158, 175, 176, 178, 197, 210, 216], "caffe2": [11, 89], "typemeta": 11, "data_typ": [11, 108], "opaquetensorimpl": 11, "tweak": [11, 54, 265], "overrid": [11, 16, 56, 97, 106, 135, 154, 158, 170, 186, 266, 273], "vulkan": [11, 214], "submit": [11, 236], "src": [11, 12, 117, 148, 170, 222, 261], "registrationdeclar": 11, "snippet": [11, 24, 132, 133, 135, 141, 148, 155, 170, 178, 195, 198, 206, 210, 215, 231, 246, 251, 262, 266], "ab": [11, 187, 223, 252], "abs_": 11, "abs_out": 11, "absolute_": 11, "absolute_out": 11, "angl": [11, 15, 111], "angle_out": 11, "sgn": 11, "uniqu": [11, 19, 54, 58, 60, 105, 106, 107, 109, 111, 133, 145, 176, 179, 190, 192, 206, 216, 277], "boolean": [11, 116, 149, 189], "impli": [11, 104, 109, 189, 228, 251, 261, 274], "schema_my_op1": 11, "my_op1": 11, "schema_my_op2": 11, "my_op2": 11, "schema_my_op2_backward": 11, "my_op2_backward": 11, "zoom": [11, 86, 101, 138, 183, 186], "1600": [11, 247, 261], "grow": [11, 54, 106, 135, 137, 144, 228], "unrealist": 11, "classifi": [11, 13, 22, 27, 36, 47, 50, 51, 52, 57, 62, 79, 86, 92, 97, 99, 104, 121, 127, 131, 134, 140, 157, 162, 179, 180, 192, 193, 245, 266, 277], "accompani": 11, "comment": [11, 148, 164, 179, 206, 221, 236, 237, 248], "sacrif": [11, 171], "max_pool2d": [11, 79, 114, 132, 176, 181, 222, 237, 252], "worri": [11, 57, 106, 143, 146, 164, 177, 231], "my_op": [11, 26], "squeez": [11, 15, 79, 102, 184, 199], "max": [11, 12, 22, 54, 57, 79, 86, 99, 132, 138, 148, 173, 181, 184, 186, 189, 193, 199, 211, 214, 216, 262, 277, 280, 281], "op_backward": 11, "proper": [11, 35, 133, 136, 146, 158, 173, 177, 186, 190, 206, 262], "rare": [11, 16, 54, 127, 167, 179, 262], "assumpt": [11, 15, 79, 104, 111, 112, 161, 167], "myadd_schema": 11, "train": [11, 13, 18, 19, 21, 23, 26, 35, 39, 40, 41, 45, 47, 50, 51, 52, 56, 59, 61, 62, 65, 67, 68, 69, 71, 72, 73, 76, 77, 79, 86, 89, 95, 96, 98, 99, 102, 104, 105, 107, 109, 111, 112, 114, 120, 131, 132, 134, 135, 138, 141, 142, 146, 158, 159, 161, 162, 165, 166, 169, 170, 172, 175, 176, 177, 178, 180, 183, 186, 187, 189, 192, 195, 197, 198, 208, 216, 223, 225, 226, 228, 229, 230, 231, 232, 246, 249, 252, 260, 263, 264, 266, 267, 277, 279, 281], "my_add": 11, "_xlac": 11, "torch_xla_sourc": 11, "library_dir": 11, "extra_link_arg": 11, "make_relative_rpath": 11, "seamlessli": [11, 15, 58, 136, 190, 193, 247, 272], "nm": [11, 236], "torchvsion": 11, "adhoc": 11, "unbox": 11, "potenti": [11, 15, 28, 79, 94, 105, 133, 135, 141, 167, 176, 187, 189, 192, 197, 213, 214, 232, 272, 274], "wiki": [11, 152, 158], "suit": [11, 95, 119, 173, 210, 235], "ship": [11, 48, 97], "delet": [11, 87, 137, 146, 164, 169, 177, 186, 199], "old": [11, 22, 121, 134, 135, 171, 181, 183, 211], "until": [11, 54, 86, 94, 133, 135, 139, 140, 148, 149, 155, 164, 167, 173, 175, 176, 177, 183, 195, 206, 227, 247], "interrupt": [11, 58, 92, 179], "quarterli": 11, "cadenc": 11, "join": [11, 21, 44, 53, 54, 55, 56, 58, 103, 130, 132, 139, 140, 146, 148, 175, 176, 177, 197, 227, 228, 229, 247, 281], "announc": 11, "slack": [11, 48], "com": [11, 21, 22, 27, 28, 54, 117, 132, 139, 140, 142, 152, 153, 154, 158, 166, 179, 186, 192, 194, 199, 221, 222, 245, 247, 277], "Not": [11, 146, 172, 281], "search": [11, 21, 54, 131, 138, 155, 171, 189, 199, 280], "instantiate_device_type_test": 11, "testtorchdevicetyp": 11, "testviewop": 11, "testtensordeviceop": 11, "testtypepromot": 11, "__reduce_ex__": 11, "monkei": 11, "direct": [11, 26, 28, 35, 47, 51, 57, 79, 94, 95, 97, 103, 111, 138, 148, 152, 157, 161, 165, 179, 198, 199, 209, 228, 232, 266, 275], "suppos": [11, 25, 104, 105, 106, 111, 132, 187, 192, 194, 215, 232, 236], "vice": [11, 26, 44, 53], "versa": [11, 26, 44, 53], "Such": [11, 12, 94], "seamless": [11, 190, 214, 230], "coverag": [11, 152, 156, 158, 211, 213, 246], "comprehens": [11, 24, 27, 44, 53, 95, 117, 155, 189, 234, 261, 262], "refactor": [11, 121, 144], "codegen": [11, 155, 234], "dev": [11, 106, 141, 172, 183, 186, 187, 214, 243, 246], "andrew": [12, 194], "gu": 12, "shard": [12, 130, 131, 144, 195, 227, 229, 230, 231, 266], "saw": [12, 15, 24, 26, 40, 54, 97, 99, 102, 106, 108, 152, 153, 156, 157], "skeleton": [12, 15, 259], "implicitli": [12, 47, 54, 94, 132, 143, 178, 189, 243], "schedul": [12, 86, 92, 103, 127, 132, 133, 134, 146, 169, 174, 183, 192, 252, 262, 266, 269, 280], "rank": [12, 18, 21, 49, 58, 60, 86, 131, 132, 133, 134, 135, 146, 148, 169, 170, 175, 176, 177, 190, 195, 197, 227, 228, 229, 231, 280, 281], "commun": [12, 16, 21, 60, 131, 132, 133, 134, 136, 138, 144, 145, 146, 169, 170, 173, 175, 176, 177, 183, 186, 189, 190, 195, 197, 201, 214, 230, 231, 262, 266], "particip": [12, 99, 145, 176, 246, 262], "hang": [12, 60, 140], "persist": [12, 25, 42, 228, 246], "facilit": [12, 15, 54, 95, 102, 104, 121, 131, 134, 136, 149, 211, 215, 262], "earli": [12, 26, 57, 92, 146, 148, 167, 194, 208, 234], "shadow": 12, "hook": [12, 134, 136, 141, 146, 171, 180, 234, 253], "mp": [12, 16, 36, 41, 44, 58, 60, 67, 79, 102, 120, 127, 131, 132, 133, 146, 148, 175, 176, 177, 227, 228, 229, 281], "ddp": [12, 18, 58, 59, 65, 131, 132, 133, 134, 136, 145, 183, 231, 281], "nccl": [12, 21, 58, 60, 86, 132, 133, 135, 136, 146, 148, 183, 190, 195, 197, 228, 229, 231], "world_siz": [12, 18, 21, 58, 60, 132, 133, 135, 146, 148, 169, 170, 175, 176, 177, 195, 197, 227, 228, 229, 231, 281], "num_input": 12, "master_addr": [12, 21, 58, 60, 132, 135, 146, 148, 170, 175, 176, 177, 197, 227, 228, 229, 281], "localhost": [12, 21, 58, 60, 101, 132, 135, 146, 170, 175, 176, 177, 183, 184, 190, 227, 228, 229, 231, 260, 271, 281], "master_port": [12, 21, 58, 60, 132, 135, 146, 148, 170, 175, 176, 177, 197, 227, 228, 229, 281], "29500": [12, 21, 148, 170, 175, 176, 177, 227, 281], "init_process_group": [12, 18, 21, 58, 60, 132, 133, 135, 146, 148, 169, 170, 195, 197, 228, 229, 231, 281], "device_id": [12, 60, 121, 133, 134, 146, 281], "nproc": [12, 58, 60, 132, 146, 175, 177, 195, 227, 228, 229, 281], "__name__": [12, 56, 58, 60, 132, 133, 135, 146, 148, 158, 169, 175, 176, 177, 195, 227, 228, 229, 234, 243, 281], "__main__": [12, 56, 58, 60, 132, 133, 146, 148, 169, 175, 176, 177, 195, 227, 228, 229, 234, 243, 247, 281], "arbitrarili": [12, 54, 104, 253], "prior": [12, 16, 22, 55, 57, 94, 99, 104, 146, 157, 171, 184, 193, 227, 229], "togeth": [12, 19, 24, 28, 36, 42, 54, 56, 65, 89, 97, 99, 102, 103, 104, 108, 112, 132, 134, 142, 146, 149, 150, 167, 175, 177, 179, 186, 193, 216, 232, 261, 274], "lr": [12, 22, 40, 51, 57, 92, 97, 103, 112, 121, 127, 132, 133, 134, 146, 148, 155, 157, 174, 175, 176, 177, 181, 184, 225, 228, 229, 232, 234, 236, 237, 260, 266, 269, 270, 281], "notabl": [12, 22, 92, 259], "addition": [12, 13, 40, 86, 137, 138, 146, 167, 189, 192, 197, 215, 228, 229, 271, 280], "divide_by_initial_world_s": 12, "world": [12, 15, 21, 26, 41, 59, 94, 102, 106, 136, 148, 154, 157, 170, 174, 175, 176, 189, 190, 197, 211, 228, 229, 231, 235], "nonetheless": [12, 104], "mind": [12, 44, 54, 57, 89, 104, 145, 161], "preliminari": [12, 148], "delv": [12, 155, 274], "insight": [12, 79, 86, 148, 178, 247, 261], "join_hook": 12, "kwarg": [12, 24, 121, 134, 154, 158, 173, 176, 189, 190, 210, 218, 225, 232, 234, 277], "join_devic": 12, "join_process_group": 12, "processgroup": [12, 18, 21, 65, 130, 131, 136, 177, 190, 197, 231, 262], "throw_on_early_termin": 12, "explain": [12, 13, 19, 23, 26, 47, 51, 57, 79, 95, 106, 112, 135, 136, 155, 187, 189, 200, 210, 213, 216, 252, 272, 277], "joinconfig": 12, "_join_config": 12, "main_hook": 12, "repeatedli": [12, 99, 173, 177, 198], "post_hook": 12, "is_last_join": 12, "broadcast": [12, 72, 112, 120, 134, 146, 148, 170, 189, 261, 281], "vacuou": 12, "contextlib": [12, 56, 181, 186], "nullcontext": 12, "conform": [12, 186], "interleav": [12, 195], "syncbatchnorm": [12, 60], "__exit__": 12, "heartbeat": 12, "notify_join_context": 12, "serializ": 12, "fulli": [12, 13, 15, 16, 23, 24, 25, 39, 65, 86, 92, 97, 98, 99, 112, 127, 130, 131, 138, 141, 144, 158, 161, 174, 176, 178, 183, 208, 216, 223, 229, 234, 236, 249], "proceed": [12, 51, 104, 117, 167], "overlap": [12, 24, 61, 132, 133, 134, 139, 144, 146, 167, 183, 186, 195, 262], "moreov": [12, 167, 206, 236, 247], "permit": [12, 246], "customiz": [12, 149], "idea": [12, 26, 27, 79, 89, 104, 106, 107, 108, 111, 120, 136, 142, 149, 155, 165, 174, 177, 179, 206, 221, 227, 232, 243, 247, 262, 280, 281], "counterjoinhook": 12, "sync_max_count": 12, "all_reduc": [12, 65, 132, 133, 148, 170, 197, 230], "get_rank": [12, 134, 146, 148], "process_group": [12, 197, 231], "common_rank": 12, "find_common_rank": 12, "max_count": 12, "clone": [12, 25, 26, 59, 102, 139, 143, 144, 148, 155, 158, 169, 195, 277], "__call__": [12, 56, 158, 171], "meth": [12, 15], "to_consid": 12, "reduceop": [12, 132, 133, 148], "device_count": [12, 58, 60, 92, 102, 132, 146, 228, 229, 231], "highlight": [12, 54, 89, 113, 124, 133, 134, 178, 183, 187, 189, 190, 227, 236, 237, 274], "alexi": 13, "jacq": 13, "winston": 13, "her": [13, 170], "leon": 13, "gati": 13, "alexand": [13, 213], "ecker": 13, "matthia": 13, "bethg": 13, "artist": 13, "distanc": [13, 67, 68, 71, 72, 73, 76, 77, 94, 104, 120], "d_c": 13, "d_": [13, 103], "indispens": [13, 173], "pil": [13, 23, 45, 56, 172, 186, 192], "pretrain": [13, 23, 27, 47, 79, 95, 111, 127, 131, 172, 179, 186, 213, 222, 236, 237, 276, 277, 279], "resiz": [13, 22, 23, 51, 56, 57, 149, 236, 270], "unabl": [13, 17, 26, 150, 166, 189, 208], "caff": 13, "picasso": 13, "jpg": [13, 37, 56, 57, 95], "reconvert": 13, "f_": [13, 173], "xl": [13, 235], "w_": [13, 111], "cl": [13, 201], "c": [13, 16, 17, 21, 22, 24, 28, 47, 56, 67, 68, 89, 94, 95, 101, 102, 104, 111, 120, 131, 133, 140, 141, 143, 148, 155, 158, 167, 172, 177, 178, 186, 187, 189, 190, 197, 201, 210, 234, 237, 243, 246, 247, 259, 260, 266, 276], "squar": [13, 40, 51, 56, 67, 68, 71, 72, 73, 76, 77, 94, 99, 102, 104, 120, 142, 143, 157, 165, 174, 178, 194], "contentloss": 13, "recomput": [13, 104, 142, 144, 165, 262], "act": [13, 47, 54, 94, 99, 102, 138, 149, 171, 174, 176, 189, 190], "gram": 13, "g_": 13, "hat": [13, 109], "counteract": 13, "pool": [13, 21, 57, 99, 103, 104, 112, 121, 184, 190], "tend": [13, 19, 94, 99, 104, 199, 216], "almost": [13, 22, 109, 111, 132, 136, 149, 172, 189, 199], "sl": 13, "19": [13, 19, 26, 40, 103, 155, 174, 181, 189, 199, 200, 216, 235, 252], "vgg": 13, "child": [13, 119, 183, 231], "connect": [13, 51, 92, 97, 99, 111, 127, 131, 135, 136, 148, 152, 154, 161, 171, 172, 174, 193, 197, 231, 249], "eval": [13, 19, 22, 23, 40, 42, 54, 79, 103, 112, 121, 132, 133, 142, 153, 176, 179, 181, 186, 213, 216, 222, 236, 237, 270, 277, 279], "485": [13, 22, 56, 104, 172, 181], "456": [13, 22, 56, 104, 172, 181], "406": [13, 22, 56, 104, 172, 181], "229": [13, 22, 56, 104, 172, 181], "225": [13, 22, 56, 104, 119, 172, 181], "vgg19": [13, 158], "maxpool2d": [13, 51, 103, 121, 154, 181, 184], "align": [13, 131, 178, 179, 198, 207, 234, 243], "depth": [13, 47, 57, 61, 94, 97, 102, 108, 137, 155, 189, 225, 262], "immedi": [13, 21, 24, 44, 53, 57, 99, 102, 109, 148, 164, 175, 176, 183, 199], "white": [13, 17, 19, 79, 99, 112, 184, 186, 216], "input_img": 13, "content_img": 13, "bfg": 13, "closur": [13, 189, 232], "reevalu": 13, "exce": [13, 79, 142, 190], "sphinx_gallery_thumbnail_numb": 13, "003": [13, 20, 48, 52, 54, 57, 89, 90, 97, 100, 101, 104, 106, 108, 110, 122, 127, 152, 155, 156, 167, 178, 180, 187, 189, 192, 193, 199, 208, 217], "neural_style_tutori": [13, 20], "paszk": [14, 148, 174], "dziedzic": 14, "shall": [14, 51, 57], "learnabl": [14, 51, 71, 120, 121, 131, 218, 264], "badfftfunct": 14, "literatur": [14, 174], "confusingli": 14, "correl": [14, 86, 99, 112, 155], "filter": [14, 27, 54, 87, 95, 104, 137, 179, 190, 197, 261], "flip": [14, 24, 156], "wrt": [14, 143], "numpy_extensions_tutori": [14, 20], "freeli": 15, "inspir": [15, 148, 156, 161, 178, 221], "v1": [15, 19, 158, 174, 175, 177, 216, 227, 247], "openai": [15, 131, 157, 173, 174, 175, 177, 277], "farama": [15, 173], "gymnasium": [15, 173, 174], "stateless": [15, 25, 150, 152], "encount": [15, 54, 133, 141, 155, 187, 189, 190, 193, 215, 262, 271, 277], "undertaken": 15, "broader": [15, 28], "wider": [15, 156], "acquaint": 15, "set_se": 15, "avenu": [15, 89], "backpropag": [15, 40, 41, 47, 51, 54, 79, 94, 105, 106, 107, 109, 111, 112, 120, 137, 157, 190], "_set_se": 15, "torqu": 15, "upward": 15, "posit": [15, 95, 99, 106, 131, 165, 173, 174, 178, 179, 186, 189, 193, 197, 216, 245, 280], "angular": 15, "stand": [15, 89, 94, 112, 157, 193, 209], "equat": [15, 57, 174, 249, 253], "motion": 15, "veloc": [15, 174], "theta": [15, 79, 106, 173, 181], "_t": [15, 157], "sin": [15, 17, 67, 68, 71, 72, 73, 76, 77, 94, 102, 120, 201, 262, 272], "theta_t": 15, "dt": 15, "rad": 15, "sec": [15, 132], "gravit": 15, "mass": 15, "accord": [15, 16, 27, 35, 102, 103, 121, 155, 157, 169, 171, 174, 178, 186, 209, 218, 223, 271], "theta_": [15, 157], "001": [15, 56, 103, 121, 146, 175, 184, 234, 236, 270], "deleg": [15, 24, 131, 222], "privat": [15, 16, 26, 135, 170, 171, 206], "merg": [15, 25, 49, 95, 99, 172, 186, 236], "is_shar": 15, "new_th": 15, "plu": [15, 106, 140], "new_thdot": 15, "neg": [15, 24, 40, 54, 95, 99, 105, 106, 112, 113, 155, 167, 171, 173, 234, 245], "discourag": [15, 44, 53, 173], "possibli": [15, 57, 134, 173, 189, 197, 272], "omit": [15, 26, 94, 119, 134, 155, 173, 193, 252, 259, 261], "agent": [15, 131, 174, 175, 177, 180, 181], "param": [15, 22, 56, 121, 132, 133, 134, 143, 146, 148, 150, 152, 166, 176, 177, 194, 206, 232, 234, 259, 281], "mandatori": [15, 152, 173], "domain": [15, 27, 37, 41, 54, 55, 79, 103, 117, 131, 173, 211, 262], "accur": [15, 22, 79, 92, 97, 119, 138, 154, 167, 177, 187, 208, 213, 275], "lazili": [15, 164], "costli": [15, 137, 262], "observation_spec": [15, 173], "compositespec": 15, "dictionari": [15, 41, 42, 54, 86, 111, 114, 121, 140, 164, 166, 173, 175, 176, 179, 186, 190, 198, 251, 264, 266], "action_spec": [15, 173], "reward_spec": [15, 173], "done_spec": 15, "input_spec": [15, 173], "state_spec": 15, "output_spec": 15, "neither": [15, 102, 194, 280], "shortcut": 15, "tensorspec": 15, "irrelev": [15, 170], "incorpor": [15, 104, 113, 131, 149, 178], "pseudo": [15, 27], "_make_spec": 15, "pendulumenv": 15, "gen_param": 15, "batch_lock": 15, "homonym": [15, 167], "check_env_spec": [15, 173], "rand_step": 15, "randomli": [15, 48, 56, 57, 76, 77, 92, 97, 99, 120, 140, 157, 174, 179, 190], "invers": [15, 102, 198, 207, 227], "showcas": [15, 26, 69, 133, 134, 161, 164, 190, 200, 214], "thdot": 15, "summar": [15, 54, 56, 112, 124, 130, 133, 138, 183, 189], "_apply_transform": 15, "_call": 15, "inv": 15, "_inv_apply_transform": 15, "eventu": [15, 135, 142, 149], "out_keys_inv": 15, "unitari": 15, "sine": [15, 120], "cosin": [15, 235], "raw": [15, 26, 36, 48, 54, 72, 86, 120, 197, 275], "del_kei": 15, "mdp": 15, "gather": [15, 60, 95, 101, 103, 132, 134, 136, 146, 148, 149, 154, 173, 195, 214, 221, 246], "unexplor": 15, "abil": [15, 26, 102, 112, 121, 136, 137, 148, 181, 184, 187, 193, 208, 222], "recreat": [15, 35, 47], "clip": [15, 54, 79, 173, 181], "scratch": [15, 35, 47, 54, 58, 104, 105, 121, 124, 127, 131, 180, 197, 263, 266], "advanc": [16, 19, 20, 22, 26, 47, 92, 107, 110, 113, 114, 116, 117, 130, 131, 134, 146, 167, 186, 190, 193, 206, 209, 210, 213, 214, 216, 217, 221, 230, 232, 236, 237, 262, 266, 280], "verif": [16, 176], "rapid": [16, 94, 209], "manufactur": 16, "imposs": [16, 97, 105, 164, 221], "simultan": [16, 25, 28, 35, 47, 61, 131, 138, 148, 167, 172, 262], "began": 16, "enhanc": [16, 95, 135, 139, 167, 181, 201, 210, 215, 223, 232, 262, 277, 280], "rapidli": 16, "wrapper_custom_tensor_add": 16, "torch_fn": 16, "custom_cpu_fallback": 16, "operatorhandl": 16, "hint": [16, 21, 94, 104, 105, 109, 117, 137, 148, 175, 183, 189, 234], "cpu_fallback": 16, "cppfunction": 16, "makefromboxedfunct": 16, "cumtomselufunct": 16, "selu": 16, "wrapper_autogradcumstom__selu": 16, "wrapper_autogradcustom__selu": 16, "autocastprivateuse1": 16, "autocast": [16, 210, 216, 223, 236, 270], "kernel_privateuseon": 16, "makefallthrough": 16, "backendmodul": 16, "_register_device_modul": 16, "backend_nam": 16, "get_amp_supported_dtyp": 16, "is_autocast_en": 16, "get_autocast_dtyp": 16, "set_autocast_dtyp": 16, "set_autocast_en": 16, "generatorimpl": 16, "builder": [16, 189], "register_generator_privateuse1": 16, "customgeneratorimpl": 16, "make_custom_gener": 16, "deviceindex": 16, "device_index": 16, "make_gener": 16, "make_cumstom_gener": 16, "event": [16, 25, 86, 119, 132, 133, 175, 187, 197, 252, 260, 275], "deviceguard": 16, "deviceguardimplinterfac": 16, "c10_register_guard_impl": 16, "customguardimpl": 16, "backend_meta_": 16, "extrameta": 16, "backendmeta": 16, "custombackendmetadata": 16, "unordered_map": 16, "tensorbackendmetaregistri": 16, "for_seri": 16, "for_deseri": 16, "expand": [16, 94, 108, 114, 155, 162, 184, 211, 228, 277], "timer": [16, 57, 179, 216, 225, 234, 250, 258], "ascend": [16, 57, 87, 215], "npu": [16, 213, 215], "meet": [16, 55, 57, 218, 237, 247], "usabl": [16, 121, 149, 153, 197, 263], "compli": 16, "habit": 16, "torch_npu": [16, 215], "exclus": [16, 26, 171], "rename_privateuse1_backend": 16, "register_privateuse1_backend": 16, "unsupported_dtyp": 16, "quint8": [16, 194], "generate_methods_for_privateuse1_backend": 16, "for_tensor": 16, "for_modul": 16, "for_storag": 16, "is_npu": 16, "perhap": [17, 79, 139, 171, 229], "prevent": [17, 40, 54, 60, 112, 119, 137, 140, 146, 155, 157, 167, 189, 190, 215, 246, 247, 262, 267, 280], "induc": [17, 171, 197], "bad": [17, 92, 137, 199, 262], "fullgraph": [17, 141, 187, 225, 274], "uncom": [17, 54, 56, 68, 77, 97, 101, 108, 112, 120, 169, 174], "cropped_img": 17, "img": [17, 56, 95, 103, 131, 184, 186], "black": [17, 79, 86, 99, 112, 131, 136, 138, 175, 179], "aka": [17, 156, 158, 167, 193, 236, 276], "mutates_arg": 17, "led": 17, "past": [17, 54, 55, 103, 108, 189, 193], "exercis": [17, 22, 48, 148, 246], "reader": [17, 109, 148, 193, 261], "region": [17, 95, 102, 138, 154, 181, 186, 192, 243, 246, 250, 262, 266, 269, 273, 275], "unus": [17, 155, 170], "forgot": [17, 197], "python_custom_op": [17, 20], "pritam": 18, "damania": 18, "yi": [18, 189, 276], "wang": [18, 27, 114, 116, 117, 155, 157, 197], "distributeddataparallel": [18, 60, 61, 65, 130, 132, 133, 134, 148, 170, 177, 246, 281], "paradigm": [18, 19, 65, 104, 120, 130, 176, 177, 216], "dens": [18, 19, 190, 193, 206, 211, 216], "fc": [18, 47, 157, 218], "replic": [18, 21, 61, 65, 131, 132, 136, 144, 146, 148, 176, 177, 190, 231], "trainer": [18, 27, 60, 138, 144, 175, 176, 177, 216, 229], "hybrid": [18, 88, 90, 231], "pipedream": 18, "embeddingbag": [18, 21], "drive": [18, 28, 57, 94, 97, 99, 131, 157, 167, 206, 227], "respond": [18, 95, 157, 176], "amongst": [18, 190, 207], "themselv": [18, 99, 190, 208], "remotemodul": 18, "kick": [18, 35, 47, 164, 175, 176, 177], "remot": [18, 65, 130, 138, 175, 176, 177, 183, 227, 232, 243, 271, 280], "hybridmodel": 18, "allreduc": [18, 86, 132, 136, 146, 170, 197, 262], "firstli": [18, 117, 155, 174], "tcp": [18, 60, 135, 144, 145, 148, 227], "init_method": [18, 146, 148, 195], "_run_train": [18, 177], "rpc_async": [18, 175, 177], "exit": [18, 152, 175, 176, 177, 197, 225, 226, 234, 273, 278, 280], "conflict": [18, 155, 189], "remote_emb_modul": 18, "rref": [18, 175, 176, 227, 232], "distributedoptim": [18, 176, 177, 227, 232], "remote_paramet": 18, "cannnot": 18, "crossentropyloss": [18, 22, 40, 103, 106, 136, 169, 177, 184, 236, 270], "get_next_batch": [18, 175, 177], "jess": [19, 216], "cai": [19, 216], "seek": [19, 89, 95, 216, 230], "grain": [19, 37, 94, 133, 148, 183, 187, 216, 246, 247, 261], "2n": [19, 216], "degrad": [19, 79, 216], "sparsifi": [19, 131, 171, 216], "answer": [19, 40, 95, 99, 106, 148, 154, 164, 179, 189, 190, 216], "tune": [19, 22, 40, 86, 104, 112, 122, 130, 131, 132, 138, 141, 172, 199, 210, 213, 216, 237, 250, 258, 261, 266, 280], "recov": [19, 132, 133, 146, 158, 216], "nearli": [19, 112, 184, 216, 247], "f1": [19, 187, 216], "86": [19, 40, 56, 155, 172, 177, 193, 216, 234, 235, 247], "92": [19, 103, 216, 235, 247], "3x": [19, 68, 120, 216, 223, 246, 262], "beginn": [19, 38, 49, 50, 81, 82, 83, 84, 88, 96, 98, 107, 115, 120, 122, 131, 216, 219, 254, 255, 256, 257], "to_sparse_semi_structur": [19, 216], "motiv": [19, 79, 135, 155, 176, 194, 200, 207, 208, 211, 216], "affect": [19, 95, 99, 103, 104, 143, 167, 169, 216, 262], "swap": [19, 56, 106, 136, 167, 173, 193, 199, 211, 216, 259], "compress": [19, 95, 171, 206, 209, 213, 216, 237], "arrang": [19, 120, 216], "drawback": [19, 111, 189, 216, 228, 229], "2020": [19, 216], "amper": [19, 133, 161, 166, 216, 246], "cutlass": [19, 210, 216], "cusparselt": [19, 216], "milder": [19, 216], "account": [19, 55, 112, 149, 164, 167, 179, 184, 193, 213, 216, 276], "retrain": [19, 216], "sweet": [19, 216], "spot": [19, 97, 101, 102, 139, 216], "2x": [19, 23, 89, 131, 143, 164, 216, 235], "theoret": [19, 57, 167, 206, 216, 267], "granular": [19, 133, 155, 190, 216, 252, 262, 280], "fp16": [19, 133, 158, 199, 210, 216], "resnet": [19, 47, 48, 95, 137, 183, 216, 262], "imagenet": [19, 48, 56, 95, 127, 172, 216], "76": [19, 56, 158, 177, 193, 216, 234, 247], "resnext": [19, 216], "101_32x8d": [19, 216], "79": [19, 155, 216, 234, 247, 252], "xception": [19, 216], "ssd": [19, 216, 262], "rn50": [19, 216], "coco2017": [19, 216], "bbap": [19, 216], "24": [19, 22, 103, 122, 155, 172, 193, 216, 235, 247], "maskrcnn": [19, 216], "fairseq": [19, 216], "en": [19, 24, 152, 179, 186, 216], "de": [19, 21, 25, 179, 216], "wmt14": [19, 216], "bleu": [19, 216], "squad": [19, 216], "91": [19, 177, 216, 235, 247], "workflow": [19, 22, 39, 86, 91, 92, 113, 131, 132, 190, 209, 214, 216, 266], "perspect": [19, 26, 108, 173, 216, 280], "subproblem": [19, 216], "bmatrix": [19, 109, 216], "handoff": [19, 216], "anticip": [19, 216], "area": [19, 95, 99, 184, 192, 199, 209, 216, 245], "colab": [19, 21, 27, 28, 39, 44, 53, 98, 101, 112, 131, 148, 149, 156, 173, 174, 186, 190], "pip": [19, 23, 27, 55, 86, 95, 101, 114, 116, 157, 172, 174, 183, 186, 187, 192, 197, 199, 213, 222, 235, 237, 245, 247, 249, 252, 260, 263, 264, 265, 267, 274, 280], "panda": [19, 56, 79, 186], "hug": [19, 155], "face": [19, 48, 56, 57, 79, 155, 277], "token": [19, 54, 111, 133, 136, 140, 169, 178, 179, 193, 216, 262, 277], "val": [19, 22, 25, 133, 172, 216], "segment": [19, 131, 193, 199, 216], "text": [19, 37, 48, 57, 79, 89, 95, 105, 106, 108, 109, 111, 130, 131, 133, 139, 140, 148, 162, 167, 173, 174, 179, 183, 186, 193, 216, 243, 245, 277], "wikipedia": [19, 152, 216], "articl": [19, 37, 216], "score": [19, 54, 95, 105, 109, 111, 119, 178, 179, 192, 193, 195, 216, 245, 277], "fair": [19, 104, 211, 216], "lowest": [19, 132, 171, 216], "l1": [19, 92, 171, 216], "ao": [19, 22, 194, 199, 213, 216], "satisfi": [19, 138, 216, 218, 262], "anytim": [19, 216], "pruner": [19, 216], "update_mask": [19, 216], "shot": [19, 175, 216, 277], "wouldn": [19, 111, 132, 149, 216], "squash_mask": [19, 216], "quickstart": [19, 35, 36, 37, 38, 39, 40, 42, 44, 45, 131, 216], "28x": [19, 216], "amen": [19, 216], "spent": [19, 86, 178, 183, 216, 247, 252, 267], "delta": [19, 155, 174, 216, 247, 261], "exact": [19, 104, 121, 142, 178, 189, 193, 197, 216, 225], "78": [19, 216, 234, 247], "53": [19, 158, 181, 216, 234, 235, 252], "44": [19, 40, 155, 177, 216], "09": [19, 54, 155, 177, 180, 216, 235], "93": [19, 119, 177, 181, 216, 235, 247, 252], "49": [19, 140, 158, 177, 216, 247], "15": [19, 26, 27, 40, 49, 79, 97, 99, 103, 127, 140, 181, 184, 186, 192, 216, 219, 234, 235, 247, 252], "54": [19, 158, 234, 247], "71x": 19, "35": [19, 40, 79, 136, 140, 158, 219, 234, 235, 237], "74": [19, 177, 234, 235, 247, 252], "23x": 19, "72": [19, 172, 234, 247, 252], "71": [19, 22, 24, 40, 56, 155, 177, 234], "59": [19, 103, 172, 186, 234, 247, 252], "41": [19, 132, 172, 234, 247, 252], "22x": 19, "286": [19, 158, 186, 216], "65": [19, 40, 56, 103, 140, 177, 192, 193, 234, 247], "247": [19, 177], "63": [19, 40, 234, 252], "14x": 19, "46": [19, 140, 155, 158, 172, 234], "02x": 19, "ye": [19, 55, 164, 274], "47": [19, 40, 92, 158, 234, 235, 247, 252], "68": [19, 40, 56, 79, 155, 234, 247], "18x": [19, 216], "36": [19, 172, 180, 181, 234, 235], "13x": 19, "159": 19, "22": [19, 79, 122, 155, 158, 177, 234, 235, 247], "142": [19, 79, 235], "23": [19, 155, 177, 234, 235, 247, 252, 261], "12x": [19, 193], "sparsesemistructuredtensor": [19, 216], "000": [19, 20, 22, 23, 27, 37, 39, 43, 67, 68, 69, 71, 73, 74, 95, 98, 100, 113, 116, 118, 119, 121, 122, 138, 153, 157, 158, 159, 180, 183, 184, 186, 190, 198, 211, 217, 219, 221, 245, 246, 247, 249, 252, 258, 260, 261, 262, 263, 264, 265], "semi_structured_spars": [19, 20], "00": [20, 40, 43, 52, 74, 78, 79, 90, 97, 100, 103, 110, 118, 119, 122, 155, 177, 180, 181, 186, 199, 201, 217, 235, 252, 258, 269], "012": [20, 52, 217], "mb": [20, 22, 43, 52, 74, 78, 90, 100, 110, 118, 119, 122, 132, 180, 217, 252, 258, 269, 281], "torchrl": [20, 131, 149, 157, 180], "ddpg": [20, 131], "pendulum": [20, 131, 173], "scipi": [20, 48, 131, 143, 187], "acceler": [20, 36, 41, 44, 53, 54, 55, 62, 65, 67, 79, 104, 116, 120, 127, 131, 139, 158, 167, 211, 214, 217, 223, 226, 235, 236, 262], "bert": [20, 99, 131, 132, 213, 214], "semi": [20, 131, 193, 214], "sparsiti": [20, 111, 131, 171, 193, 206, 208, 214, 217], "onnx": [20, 89, 131], "super_resolution_with_onnxruntim": [20, 23], "supervis": [20, 106, 131, 181, 186], "usb": [20, 131, 172], "usb_semisup_learn": [20, 27], "embeddingplann": [21, 131], "conda": [21, 26, 86, 95, 101, 148, 155, 197, 199, 214, 237, 245, 260, 261, 280], "cudatoolkit": 21, "sudo": [21, 183, 222], "rm": [21, 227], "miniconda3": [21, 25, 261], "py37_4": 21, "sh": [21, 146, 222, 243], "anaconda": [21, 86, 95, 148, 260], "chmod": 21, "fbgemm": [21, 22, 190, 194], "ipython": [21, 119], "cp": [21, 195, 222], "restart": [21, 26, 95, 101, 145, 174], "newli": [21, 127, 148, 232], "python37": 21, "dynload": 21, "enviro": 21, "spmd": [21, 136, 229], "mimic": [21, 22, 104, 199, 206], "launcher": 21, "embeddingbagcollect": 21, "bag": [21, 39, 103, 184, 190], "ebc": [21, 190], "4096": [21, 190, 235], "parameterconstraint": 21, "placement": [21, 134, 213, 280], "evenli": [21, 94], "intra": [21, 24, 103, 133, 136, 231], "interconnect": [21, 249], "nvlink": [21, 136, 227], "data_parallel": 21, "planner": 21, "embedding_typ": 21, "embeddingcomputekernel": 21, "shardingtyp": 21, "dict": [21, 54, 56, 158, 164, 173, 189, 192, 228, 229, 232, 234, 246, 251], "large_table_cnt": 21, "small_table_cnt": 21, "large_t": 21, "embeddingbagconfig": 21, "large_table_": 21, "embedding_dim": [21, 99], "num_embed": 21, "feature_nam": 21, "large_table_feature_": 21, "poolingtyp": 21, "small_tabl": 21, "small_table_": 21, "small_table_feature_": 21, "gen_constraint": 21, "sharding_typ": 21, "table_wis": 21, "large_table_constraint": 21, "small_table_constraint": 21, "mimick": 21, "single_rank_execut": 21, "embeddingbagcollectionshard": [21, 190], "model_parallel": 21, "embeddingshardingplann": 21, "topologi": [21, 190, 229, 231, 236, 243], "moduleshard": 21, "shardingenv": 21, "init_distributed_single_host": 21, "pyre": 21, "fixm": 21, "set_devic": [21, 58, 60, 132, 133, 146, 195, 200, 228, 229, 231, 234], "compute_devic": 21, "pg": [21, 197], "sharder": [21, 190], "shardingplan": 21, "collective_plan": 21, "sharded_model": 21, "from_process_group": 21, "spmd_sharing_simul": 21, "get_context": [21, 148], "exitcod": 21, "factor": [21, 23, 99, 127, 167, 174, 175, 187, 190, 199, 228], "medium": [21, 135, 192, 262], "large_table_0": 21, "parametershard": 21, "compute_kernel": 21, "batched_fus": 21, "sharding_spec": 21, "enumerableshardingspec": 21, "shardmetadata": 21, "shard_offset": 21, "shard_siz": 21, "large_table_1": 21, "small_table_0": 21, "small_table_1": 21, "finer": [21, 37, 252], "halv": [21, 119], "row_wis": 21, "512": [21, 40, 133, 169, 189, 216, 223, 236, 247, 252], "imbal": [21, 262], "vertic": [21, 24], "column_wis": 21, "unfortu": 21, "batched_dens": 21, "raghuraman": 22, "krishnamoorthi": 22, "seth": [22, 39], "weidman": 22, "jerri": 22, "zhang": [22, 228, 229, 231], "decreas": [22, 41, 54, 79, 87, 104, 112, 136, 139, 190, 209], "mobilenetv2": [22, 214], "np": [22, 56, 79, 103, 105, 172, 177, 181, 184, 186, 207, 216, 261, 277], "dataload": [22, 35, 36, 38, 39, 40, 41, 42, 44, 45, 48, 49, 57, 60, 79, 92, 104, 122, 132, 133, 139, 148, 167, 169, 176, 181, 183, 184, 186, 213, 236, 237, 238, 250, 262, 270], "filterwarn": [22, 56, 186], "deprecationwarn": 22, "seed": [22, 57, 79, 97, 104, 132, 133, 148, 174, 175, 177], "manual_se": [22, 79, 102, 132, 133, 148, 174, 175, 195, 216, 281], "191009": 22, "floatfunct": 22, "quantstub": 22, "dequantstub": 22, "relu6": 22, "_make_divis": 22, "divisor": 22, "min_valu": 22, "tf": [22, 101], "divis": [22, 102, 189, 234], "tensorflow": [22, 101, 105, 107, 120], "blob": [22, 26, 117, 132, 153, 183, 194, 222], "slim": [22, 120], "mobilenet": [22, 131, 172], "new_v": 22, "round": [22, 117, 133, 175, 247, 261], "convbnrelu": 22, "in_plan": 22, "out_plan": 22, "kernel_s": [22, 79, 132, 181, 194, 237], "momentum": [22, 47, 48, 69, 73, 92, 97, 103, 112, 120, 121, 142, 148, 175, 184, 190, 194, 232, 236, 237, 264, 265, 270], "inplac": [22, 79, 132, 216], "invertedresidu": 22, "inp": [22, 176, 181, 189, 210, 230], "oup": 22, "expand_ratio": 22, "hidden_dim": [22, 99], "use_res_connect": 22, "pw": 22, "dw": 22, "conv": [22, 57, 99, 142, 153, 154, 158, 176, 243, 252], "skip_add": 22, "num_class": [22, 175, 184, 186, 192], "width_mult": 22, "inverted_residual_set": 22, "round_nearest": 22, "v2": [22, 104, 124, 149, 172, 190, 215, 223, 228, 234], "width": [22, 47, 48, 51, 99, 102, 138, 161, 186, 192, 277], "input_channel": 22, "last_channel": 22, "1280": [22, 192], "96": [22, 155, 158, 177, 181, 235], "160": [22, 177, 186, 247, 252], "320": [22, 181, 237], "valueerror": [22, 232, 277], "invert": [22, 131, 173, 207], "residu": [22, 136], "output_channel": 22, "quant": [22, 194], "dequant": [22, 194, 199, 237], "isinst": [22, 56, 79, 134, 158, 200, 216], "init": [22, 25, 26, 135, 215, 218], "kaiming_normal_": 22, "fan_out": 22, "zeros_": 22, "elif": [22, 158, 169, 232, 234], "ones_": 22, "normal_": 22, "bn": [22, 142, 154, 194], "numer": [22, 23, 44, 54, 76, 77, 102, 104, 105, 114, 120, 134, 138, 195, 216, 246, 262], "fuse_model": 22, "is_qat": [22, 194], "fuse_modul": 22, "fuse_modules_qat": 22, "averagemet": 22, "fmt": 22, "avg": [22, 40, 235, 252], "__str__": [22, 190], "fmtstr": 22, "__dict__": [22, 213, 259], "topk": [22, 140, 237, 279], "maxk": 22, "pred": [22, 40, 112, 132, 136, 176, 181, 184, 237], "correct_k": 22, "mul_": [22, 232], "criterion": [22, 51, 140, 177, 179, 184, 236, 260, 270], "neval_batch": 22, "top1": [22, 237], "acc": [22, 79, 186], "2f": [22, 132, 172, 175, 177], "top5": [22, 279], "cnt": [22, 79], "acc1": 22, "acc5": 22, "load_model": 22, "model_fil": 22, "state_dict": [22, 42, 54, 58, 60, 92, 103, 132, 133, 134, 146, 171, 187, 228, 229, 236, 246, 249, 250, 258, 259, 263, 266], "weights_onli": [22, 42, 79, 121, 134, 146, 186, 237], "load_state_dict": [22, 42, 58, 79, 92, 103, 121, 134, 146, 186, 228, 229, 237, 246, 250, 258, 263], "print_size_of_model": 22, "getsiz": 22, "data_path": [22, 92], "prepare_data_load": 22, "randomresizedcrop": [22, 56], "randomhorizontalflip": [22, 56], "dataset_test": 22, "centercrop": 22, "train_sampl": 22, "randomsampl": 22, "test_sampl": 22, "sequentialsampl": 22, "train_batch_s": 22, "data_loader_test": 22, "eval_batch_s": 22, "pre": [22, 37, 105, 131, 133, 136, 148, 172, 186, 190, 192, 193, 199, 210, 229, 232, 272, 280], "saved_model_dir": 22, "float_model_fil": 22, "mobilenet_pretrained_float": 22, "scripted_float_model_fil": 22, "mobilenet_quantization_script": 22, "scripted_quantized_model_fil": 22, "mobilenet_quantization_scripted_quant": 22, "float_model": [22, 213], "fusion": [22, 86, 131, 154, 155, 190, 199, 210, 232, 236, 262, 266, 269, 278], "baselin": [22, 24, 27, 95, 104, 186, 199, 216, 247, 261], "un": [22, 102, 179], "num_eval_batch": 22, "sophist": [22, 120, 173], "num_calibration_batch": 22, "mymodel": [22, 194], "estim": [22, 51, 56, 57, 99, 138, 173, 174, 179, 190, 199, 247, 267], "qconfig": [22, 194], "default_qconfig": 22, "calibr": [22, 167, 194, 213, 237], "56": [22, 158, 172, 181, 216, 234, 247, 252, 280], "4x": [22, 133], "x86": [22, 194, 210, 223], "basi": [22, 133], "histogram": [22, 260], "per_channel_quantized_model": 22, "get_default_qconfig": 22, "67": [22, 40, 119, 155, 194, 234, 235], "qat": [22, 194], "int8": [22, 172, 190, 199, 210, 223, 237], "train_one_epoch": [22, 103], "ntrain_batch": 22, "avgloss": 22, "5f": 22, "start_tim": 22, "global_avg": 22, "qat_model": 22, "get_default_qat_qconfig": 22, "prepare_qat": 22, "freez": [22, 47, 127, 214, 217, 236], "num_train_batch": 22, "nepoch": 22, "disable_observ": 22, "intrins": [22, 194], "freeze_bn_stat": 22, "quantized_model": [22, 213], "confirm": [22, 23, 92, 95, 112, 113, 133, 156, 175, 279], "allud": [22, 79], "run_benchmark": 22, "img_load": 22, "elaps": [22, 132, 179], "num_batch": [22, 40, 148], "enumer": [22, 40, 56, 92, 103, 132, 134, 136, 172, 176, 181, 183, 184, 216, 236, 237, 270], "num_imag": 22, "0f": [22, 181, 237], "macbook": [22, 179], "pro": [22, 98], "61": [22, 119, 158, 216, 234, 235], "welcom": 22, "dynamo_export": 23, "torchdynamo": [23, 131, 141, 189, 201, 213], "technologi": [23, 65, 104, 131, 148, 193, 232, 266], "torchscript": [23, 114, 116, 122, 131, 153, 190, 214, 217, 252, 266], "platform": [23, 26, 114, 146, 148, 183, 223, 235, 243, 262, 270, 279, 280], "mac": [23, 222], "prove": 23, "onnxruntim": [23, 114, 116], "resolut": [23, 99, 186], "video": [23, 40, 47, 48, 58, 60, 61, 94, 95, 97, 99, 101, 102, 103, 124, 130, 131, 144, 145, 183], "wide": [23, 36, 65, 94, 99, 112, 135, 136, 139, 140, 148, 170, 179, 199, 232, 245, 262], "superresolut": 23, "shi": 23, "et": [23, 27, 54, 57, 79, 148, 171, 179], "al": [23, 27, 54, 57, 79, 171, 179], "upscal": 23, "ycbcr": 23, "ordinarili": [23, 246], "torch_model": [23, 114], "batchnorm": [23, 57, 60, 121, 153, 158, 213, 262, 264], "ax": [23, 56, 106, 109, 131, 179, 180, 184], "dynamic_ax": 23, "torch_out": 23, "super_resolut": 23, "modelproto": 23, "bundl": [23, 272], "ml": [23, 39, 79, 102, 104, 130, 131, 138, 190, 214, 234, 235], "proto": 23, "checker": [23, 114], "check_model": [23, 114], "onnx_model": [23, 114], "rtol": 23, "1e": [23, 40, 92, 99, 134, 142, 175, 177, 194, 195, 216, 234], "03": [23, 40, 97, 100, 176, 177, 180, 186, 195, 234, 235, 261], "atol": [23, 195, 216], "05": [23, 24, 40, 79, 133, 177, 180, 194, 235], "contact": [23, 133, 221], "pronounc": [23, 167], "famou": [23, 27, 79], "preprocess": [23, 56, 104, 112, 131, 139, 179, 186], "224x224": [23, 95, 172], "cb": 23, "cr": 23, "grayscal": [23, 37, 149, 157], "blue": [23, 47, 133, 136, 243], "red": [23, 136, 141, 184, 243], "chroma": 23, "sensit": [23, 104, 144, 152, 190], "human": [23, 54, 79, 95, 140, 157, 179, 186, 197], "mobil": [23, 63, 64, 104, 194, 201, 203, 204, 212, 214, 222, 224, 241, 242, 250, 266], "deploi": [23, 59, 114, 131, 138, 145, 171, 172], "cloud": [23, 39, 59, 98, 112, 114, 280], "inferenc": [23, 42], "azur": [23, 183], "servic": [23, 54, 172, 236, 267, 280], "inter": [24, 131, 136, 145, 161, 193, 231, 262], "workload": [24, 26, 104, 119, 130, 131, 134, 145, 146, 183, 190, 201, 210, 228, 231, 232, 235, 236, 266, 280], "fragment": [24, 262], "fork": [24, 174, 280], "fn": [24, 141, 148, 152, 155, 158, 187, 200, 225, 234, 272, 275], "fut": [24, 175, 177], "x_normal": 24, "x_parallel": 24, "async": [24, 175, 177, 190, 228, 262], "sort": [24, 28, 99, 105, 109, 119, 172, 193, 252, 262], "parlanc": 24, "revers": [24, 47, 54, 94, 134, 152, 161, 165, 172, 179, 190], "bidirectionalrecurrentlstm": 24, "cell_f": 24, "input_s": [24, 140, 197], "hidden_s": [24, 54, 140], "cell_b": 24, "output_f": 24, "x_rev": 24, "output_b": 24, "output_b_rev": 24, "lstmensembl": 24, "n_model": 24, "modulelist": [24, 165], "demo": [24, 28, 49, 131, 170, 183, 235], "took": [24, 94, 148, 154, 164, 178, 187, 197, 275], "future_f": 24, "stuff": 24, "worth": [24, 26, 57, 164, 167, 176], "profil": [24, 86, 122, 131, 132, 167, 178, 180, 210, 235, 247, 250, 258, 262, 266], "chrome": [24, 94, 167, 178, 183, 252], "prof": [24, 178, 235, 252], "export_chrome_trac": [24, 178], "json": [24, 119, 167, 178, 183, 230, 252, 276], "navig": [24, 65, 183, 184, 243], "button": [24, 55, 57, 114, 183, 243], "timelin": [24, 164, 183, 243], "horizont": [24, 131, 266, 269], "opportun": [24, 89, 114, 149, 190, 232], "breviti": [24, 26, 193, 206, 259], "intro": [24, 38, 39, 43, 60, 106, 107, 130, 149, 184, 226, 234], "tracer": [24, 169], "member": [25, 71, 120, 214, 215], "portion": [25, 86, 164, 167, 169, 171, 197, 235, 243, 261], "custom_class": 25, "mystackclass": 25, "customclasshold": 25, "stack_": 25, "push": [25, 57, 79, 99, 104, 156, 199, 221], "pop": [25, 99, 216], "pop_back": 25, "intrusive_ptr": [25, 170, 247, 261], "make_intrus": [25, 170], "elem": [25, 259], "smart": [25, 189], "class_": 25, "my_class": 25, "contructor": 25, "yourclass": 25, "ref": 25, "unari": 25, "add_librari": [25, 26], "cmake_cxx_standard": 25, "custom_class_project": 25, "rh": 25, "devtoolset": 25, "torchbind_tutori": 25, "j": [25, 26, 35, 47, 79, 94, 103, 104, 105, 109, 134, 179, 197], "libcustom_class": 25, "hi": [25, 157, 211], "mom": 25, "scripted_foo": 25, "filesystem": [25, 97, 148, 198], "treatment": [25, 186, 208, 209], "cpp_inference_exampl": 25, "foobarbaz": 25, "tostr": 25, "add_subdirectori": [25, 26], "drill": [25, 94, 261], "75": [25, 26, 104, 127, 132, 140, 234], "momfoobarbaz": 25, "incred": 25, "make_custom_class": 25, "tocustomclass": 25, "iscustomclass": 25, "export_attr": 25, "runtimeerror": [25, 135, 140, 170, 172, 277], "__torch__": 25, "def_pickl": 25, "pushivalueimpl": 25, "pickler": 25, "__getstate__": 25, "__setstate__": 25, "pickl": [25, 42, 92, 112, 121, 164, 197, 247], "salient": 25, "wherea": [25, 112, 141, 184, 186, 199, 207, 208], "confus": [25, 26, 112, 139, 152, 186, 190, 199, 207, 208, 209], "manipulate_inst": 25, "trycustomop": 25, "bar": [25, 54, 86, 176, 186, 187, 218, 243], "relax": [25, 165, 277], "standalon": [25, 58, 195, 246, 274], "blend": [25, 26], "smoothli": [25, 26], "subsequ": [26, 79, 95, 104, 121, 132, 139, 149, 175, 177, 179, 187, 197, 199, 262, 265, 271, 280], "resort": 26, "emb": [26, 109, 111, 177], "opencv": [26, 48], "vision": [26, 27, 41, 48, 56, 95, 99, 122, 131, 158, 164, 214, 245, 277, 279], "mat": 26, "warpperspect": 26, "warp_perspect": 26, "warp": 26, "image_mat": 26, "cv": [26, 27, 211], "col": 26, "cv_32fc1": 26, "warp_mat": 26, "output_mat": 26, "dsize": 26, "output_tensor": 26, "from_blob": 26, "ptr": 26, "short": [26, 28, 86, 99, 102, 105, 107, 110, 130, 140, 148, 165, 167, 173, 179, 181, 189, 262, 265], "opencv2": 26, "hpp": [26, 170], "alongsid": [26, 152, 184, 186, 190, 246], "goodi": 26, "hardcod": [26, 142, 189], "strikingli": 26, "flat": [26, 134], "scope": [26, 99, 102, 108, 119, 137, 141, 189, 243, 267], "dealloc": [26, 183, 262], "invalid": [26, 207, 208, 209, 232, 247, 262], "quot": [26, 127], "metaprogram": 26, "experiment": [26, 132, 138, 153, 177, 194, 195, 197, 200, 213, 237, 260, 262], "target_compile_featur": 26, "cxx_std_14": 26, "opencv_cor": 26, "opencv_imgproc": 26, "libwarp_perspect": 26, "sensat": 26, "0x7f618fc6fa50": 26, "3218": 26, "4611": 26, "4636": 26, "3746": 26, "0978": 26, "5005": 26, "3245": 26, "0169": 26, "4458": 26, "1862": 26, "1692": 26, "noteworthi": [26, 235], "frozen": [26, 35, 47, 134, 157, 210, 219], "prim": 26, "revel": 26, "drop": [26, 55, 99, 101, 114, 144, 164, 177, 199, 235], "26": [26, 40, 103, 155, 157, 158, 172, 177, 181, 234, 235], "restrict": [26, 28, 54, 89, 148, 183, 187, 189, 194, 221], "script_method": [26, 89], "42": [26, 79, 140, 174, 177, 234, 247], "tensortobool": 26, "block0": 26, "block1": 26, "21": [26, 40, 103, 119, 140, 172, 234, 235, 247, 252, 261], "sent": [26, 148, 167, 175, 189, 227], "wire": 26, "dlopen": 26, "example_app": 26, "cxx_range_for": 26, "throw": [26, 94, 102, 135, 175], "errorreport": 26, "mayb": [26, 108, 111, 150, 189, 214], "subdirectori": [26, 57, 192], "prefix": [26, 133, 137, 141, 149, 183, 187, 189, 197, 199, 247, 261, 280, 281], "inconveni": [26, 206], "altogeth": [26, 161, 208], "nb": [26, 103, 221], "impress": [26, 155, 189], "opencv_photo": 26, "happi": [26, 153, 154], "4125": 26, "8262": 26, "5345": 26, "6111": [26, 247], "3997": 26, "4683": 26, "5969": 26, "0850": 26, "0698": 26, "4597": 26, "0926": 26, "5727": 26, "9319": 26, "4834": 26, "1747": 26, "0162": 26, "9521": 26, "6269": 26, "lastli": [26, 92, 131, 164, 189], "driver": [26, 97, 183], "infrastructur": [26, 65], "vener": 26, "beforehand": [26, 161], "is_python_modul": 26, "extra_ldflag": 26, "lopencv_cor": 26, "lopencv_imgproc": 26, "approxim": [26, 54, 95, 133, 142, 154, 157, 161, 171, 174, 235, 249, 262], "0x7f3e0f840b10": 26, "op_sourc": 26, "cpp_sourc": [26, 247], "rout": [26, 141, 155, 189], "quirki": 26, "with_opt": 26, "no_python_abi_suffix": 26, "bottom": [26, 105, 183, 186, 189, 243], "suffix": [26, 44, 53, 86, 155], "tag": [26, 56, 99, 107, 111, 189, 198, 251, 260], "0x7ff51c5b7bd0": 26, "hao": 27, "chen": [27, 189], "unifi": [27, 131, 142, 230, 245, 277], "ssl": 27, "modular": [27, 37, 121, 187, 264], "fixmatch": 27, "defixmatch": 27, "speech": [27, 79, 99, 105, 107, 111, 131, 140, 262], "light": [27, 28, 57, 97, 101, 102, 142, 245], "vit": [27, 277], "strong": [27, 105, 189, 209, 277], "unlabel": [27, 102], "confid": [27, 57, 95, 97, 103, 106, 138, 173, 174, 184, 246], "threshold": [27, 54, 86, 138, 173, 177, 186, 235, 262], "statu": [27, 135, 138, 141, 177, 189, 276], "absorb": 27, "gaussian": [27, 57, 138, 173], "overcom": [27, 113], "quantiti": [27, 104, 131, 136, 156, 161, 166], "qualiti": [27, 157, 179], "trade": [27, 138, 164, 210], "afford": 27, "nlp": [27, 97, 99, 106, 109, 111, 124, 131, 180, 211, 246, 262], "audio": [27, 37, 48, 131, 151, 182, 185], "semilearn": 27, "get_dataset": 27, "get_data_load": 27, "weak": 27, "get_net_build": 27, "get_algorithm": 27, "get_config": 27, "hyper": [27, 178, 280], "87": [27, 103, 119, 177, 210, 235, 247], "lb_imb_ratio": 27, "ulb_imb_ratio": 27, "microsoft": [27, 39, 116, 117, 183, 201], "kihyuk": 27, "sohn": 27, "yidong": 27, "jame": [28, 154], "reed": [28, 154], "jamesre": 28, "fb": 28, "michael": [28, 105, 225, 226, 234, 246, 273, 278], "suo": 28, "rev2": 28, "hierarchi": 28, "3x4": 28, "my_cel": 28, "redefin": 28, "mycel": 28, "succinctli": [28, 165], "mydecisiong": 28, "tape": 28, "rewind": 28, "tracedmodul": [28, 89], "ir": [28, 155, 232, 272], "commonli": [28, 45, 54, 73, 92, 99, 104, 120, 169, 172, 179, 183, 194, 232, 236, 253, 262, 267], "acquir": [28, 102, 121, 171, 173, 177], "traced_cel": 28, "laden": 28, "submodul": [28, 54, 89, 99, 113, 134, 165, 178, 215, 218], "branch": [28, 94, 113, 189, 192, 222, 236], "nowher": 28, "faithfulli": [28, 113, 206], "analysi": [28, 92, 94, 103, 131, 132, 154, 155, 178, 183, 186, 189, 195, 199, 243, 261, 277], "decis": [28, 94, 107, 110, 149, 167, 189, 206, 207, 209, 223, 262, 272, 278], "inlin": [28, 57, 94, 97, 101, 103, 141, 153, 155, 206, 210, 214, 219, 267], "freestand": 28, "neurip": 28, "1hiicg6jrkbnr5hvk2": 28, "vnmi88vi9puzej": 28, "intro_to_torchscript_tutori": [28, 122, 219], "audio_data_augmentation_tutori": [29, 31], "audio_datasets_tutori": 30, "audio_feature_extractions_tutori": 32, "audio_io_tutori": 33, "frac": [35, 47, 68, 89, 94, 105, 106, 108, 111, 120, 137, 143, 148, 173, 174, 193], "partial": [35, 47, 92, 94, 108, 121, 132, 133, 134, 136, 137, 141, 149, 156, 195, 232, 236, 263, 266], "leaf": [35, 47, 94, 187], "retain_graph": [35, 141], "surround": [35, 167], "mark": [35, 54, 136, 141, 158, 174, 175, 189, 208, 243], "acycl": [35, 47], "dag": 35, "chain": [35, 47, 94, 102, 106, 107, 134, 142, 155, 175, 208], "accumul": [35, 47, 51, 54, 57, 94, 97, 108, 143, 157, 164, 174, 175, 176, 177, 246, 265], "vec": [35, 47, 94, 210], "langl": 35, "x_1": [35, 108, 161], "x_n": [35, 57], "rangl": 35, "y_1": [35, 108], "y_m": 35, "ccc": [35, 47, 94], "y_": [35, 47, 94, 105], "x_": [35, 47, 94], "cdot": [35, 47, 57, 94, 111, 137], "vdot": [35, 47, 94], "ddot": [35, 47, 94], "v_1": 35, "v_m": 35, "life": [35, 104, 139, 140, 228], "autogradqs_tutori": [35, 38, 43, 81], "compris": [36, 37, 57, 121], "fashionmnist": [36, 37, 39, 40, 41, 45, 103, 184], "mtia": [36, 41, 44, 67, 79, 102, 120, 127], "xpu": [36, 41, 44, 67, 79, 102, 120, 127, 236, 252], "neuralnetwork": [36, 40], "minibatch": [36, 37, 101, 112, 139, 150, 166, 169], "28x28": [36, 112, 184, 249], "784": [36, 101, 112, 150, 184], "nonlinear": 36, "phenomena": 36, "seq_modul": 36, "logit": [36, 40, 104, 235], "infti": [36, 174], "parameter": [36, 216], "preview": 36, "buildmodel_tutori": [36, 38, 43], "messi": 37, "primit": [37, 41, 120, 131, 136, 156, 167, 190, 193, 197, 223], "fashion": [37, 54, 101, 103, 116, 133, 136, 138, 176, 181, 184, 186, 187, 190, 236], "zalando": 37, "60": [37, 114, 133, 139, 140, 158, 172, 177, 179, 184, 189, 234, 235, 252], "internet": [37, 172], "target_transform": [37, 41, 45], "training_data": [37, 40, 109], "img_dir": 37, "csv": [37, 54, 56, 133], "annotations_fil": 37, "tshirt1": 37, "tshirt2": 37, "ankleboot999": 37, "decode_imag": 37, "img_label": 37, "tupl": [37, 44, 53, 56, 86, 97, 99, 102, 104, 109, 111, 114, 158, 174, 189, 192, 195, 209, 261, 279], "reshuffl": 37, "overfit": [37, 97, 112, 121, 140], "train_featur": 37, "train_label": 37, "shuffl": [37, 41, 56, 60, 79, 97, 103, 112, 132, 133, 148, 172, 176, 181, 183, 184, 195, 237], "data_tutori": [37, 38, 43], "quickstart_tutori": [38, 41, 43], "tensorqs_tutori": [38, 43, 44, 84], "tensor_tutori": [38, 50, 52, 53], "transforms_tutori": [38, 43, 45], "autograd_tutori": [38, 47, 50, 52], "optimization_tutori": [38, 40, 43], "saveloadrun_tutori": [38, 42, 43], "sphx_glr_beginner_basics_autogradqs_tutori": [38, 43], "sphx_glr_beginner_basics_buildmodel_tutori": [38, 43], "sphx_glr_beginner_basics_intro": [38, 43], "sphx_glr_beginner_basics_saveloadrun_tutori": [38, 43], "sphx_glr_beginner_basics_transforms_tutori": [38, 43], "sphx_glr_beginner_basics_data_tutori": [38, 43], "sphx_glr_beginner_basics_quickstart_tutori": [38, 43], "sphx_glr_beginner_basics_tensorqs_tutori": [38, 43], "sphx_glr_beginner_basics_optimization_tutori": [38, 43], "suraj": [39, 58, 59, 60, 61, 119, 144, 145, 157], "subramanian": [39, 58, 59, 60, 61, 119, 144, 145, 157], "juarez": 39, "cassi": 39, "breviu": 39, "dmitri": 39, "soshnikov": 39, "ari": 39, "bornstein": 39, "belong": [39, 139, 190], "shirt": [39, 103, 184], "trouser": [39, 103, 184], "pullov": [39, 103, 184], "dress": [39, 103, 184], "coat": [39, 103, 184], "sandal": [39, 103, 184], "sneaker": [39, 103, 184], "ankl": [39, 103, 184], "boot": [39, 103, 172, 184], "favorit": [39, 98, 148, 154], "id": [39, 86, 98, 141, 146, 175, 176, 177, 186, 189, 190, 216, 228, 229, 234, 280], "walkthrough": [40, 47, 53, 86, 119], "3blue1brown": [40, 47], "test_data": 40, "train_dataload": 40, "test_dataload": 40, "flatten": [40, 51, 72, 79, 104, 112, 114, 120, 132, 136, 176, 189, 235], "linear_relu_stack": [40, 235], "4m": [40, 103], "5k": [40, 103], "364kb": 40, "197k": 40, "747kb": 40, "492k": 40, "28mb": 40, "57m": 40, "06": [40, 103, 235], "05mb": 40, "83m": [40, 103], "02": [40, 57, 100, 103, 122, 155, 177, 201, 235], "33": [40, 56, 172, 177, 234, 235, 247], "78m": [40, 199], "18": [40, 117, 119, 139, 140, 155, 172, 177, 181, 199, 234, 235, 247, 276], "4mb": [40, 103], "6m": 40, "3mb": [40, 181], "8m": 40, "5mb": [40, 79, 103], "82": [40, 172, 235, 252], "29": [40, 103, 172, 177, 247], "326kb": 40, "42m": [40, 103], "751kb": 40, "459k": 40, "19mb": 40, "64m": 40, "29mb": 40, "80m": 40, "98mb": 40, "11mb": 40, "15k": [40, 103], "51": [40, 158, 177, 181, 234, 235], "unpredict": [40, 94, 146], "learning_r": [40, 51, 104, 140], "jump": [40, 79, 109, 113, 114, 116, 117, 157, 272], "untrain": 40, "dissimilar": [40, 102, 111], "regress": [40, 112, 181, 247, 260], "nllloss": [40, 106, 140], "classif": [40, 48, 57, 79, 92, 95, 97, 102, 103, 104, 106, 127, 131, 132, 140, 172, 181, 192, 193, 222, 265], "logsoftmax": [40, 140], "loss_fn": [40, 103, 146, 169, 175, 228, 229, 281], "deposit": [40, 47], "train_loop": 40, "test_loop": 40, "unnecessari": [40, 186, 189, 193, 227, 265, 280], "7f": 40, "5d": 40, "test_loss": [40, 132, 181], "argmax": [40, 109, 132, 176, 235, 237], "1f": [40, 184], "8f": 40, "308426": 40, "286681": 40, "6464": 40, "273398": 40, "12864": 40, "262932": 40, "19264": 40, "248030": 40, "25664": 40, "209689": 40, "32064": 40, "218528": 40, "38464": 40, "182116": 40, "44864": 40, "170706": 40, "51264": 40, "142963": 40, "57664": 40, "138739": 40, "146670": 40, "131625": 40, "074963": 40, "087108": 40, "036946": 40, "960961": 40, "990538": 40, "906877": 40, "905357": 40, "832480": 40, "839121": 40, "868677": 40, "835463": 40, "723347": 40, "763086": 40, "657326": 40, "604079": 40, "625700": 40, "536668": 40, "558286": 40, "458857": 40, "482622": 40, "546320": 40, "513127": 40, "372890": 40, "440542": 40, "333411": 40, "323863": 40, "339804": 40, "271600": 40, "302106": 40, "211281": 40, "235678": 40, "307970": 40, "290023": 40, "132115": 40, "235234": 40, "122540": 40, "135357": 40, "161344": 40, "101684": 40, "137946": 40, "060634": 40, "079176": 40, "144800": 40, "145564": 40, "970797": 40, "104859": 40, "990042": 40, "006260": 40, "047485": 40, "991116": 40, "027982": 40, "964008": 40, "66": [40, 132, 234, 235, 247], "976405": 40, "028881": 40, "049998": 40, "858233": 40, "016639": 40, "905308": 40, "913967": 40, "971407": 40, "918100": 40, "950897": 40, "898178": 40, "905503": 40, "942665": 40, "982705": 40, "776758": 40, "953337": 40, "848193": 40, "845937": 40, "916932": 40, "868609": 40, "894938": 40, "850525": 40, "854097": 40, "876074": 40, "932027": 40, "715641": 40, "905758": 40, "807142": 40, "794631": 40, "875507": 40, "833904": 40, "852925": 40, "814091": 40, "70": [40, 56, 140, 158, 177, 216, 234, 247], "815000": 40, "822855": 40, "891509": 40, "668365": 40, "868823": 40, "775701": 40, "755139": 40, "841981": 40, "808440": 40, "820399": 40, "784968": 40, "783965": 40, "warmstart": [40, 250, 258, 266], "483": [40, 43], "torchtext": [41, 55, 97, 103, 131], "torchaudio": [41, 55, 97, 103, 131, 133, 172, 183, 199], "cifar": [41, 48, 97, 184], "coco": [41, 192], "conduct": [41, 95, 155, 170, 199], "unpickl": [42, 121, 197], "fail": [42, 94, 102, 113, 121, 155, 158, 167, 172, 174, 178, 187, 189, 197, 214, 215, 236, 246, 277], "inconsist": [42, 121, 155], "legaci": [42, 135], "checkpoint": [42, 54, 92, 134, 144, 164, 169, 198, 199, 236, 246, 250, 258, 264, 266], "tip": [42, 57, 98, 111, 184, 250, 258, 266], "498": 43, "beginner_bas": 43, "ndarrai": [44, 45, 53, 56, 102, 186], "elimin": [44, 114, 119, 142, 150, 155, 156, 172, 189, 193, 211, 215, 232], "overridden": [44, 53, 149, 251], "1200": [44, 247], "breez": [44, 53], "subtli": [44, 53], "y1": [44, 192, 260], "y2": 44, "y3": 44, "wise": [44, 53, 79, 102, 106, 136, 148, 155, 158, 161, 189, 190, 262, 276], "z1": [44, 155], "z2": 44, "z3": 44, "aggreg": [44, 47, 97, 119, 157, 186, 207, 252], "operand": [44, 94, 189], "denot": [44, 106, 109, 190, 206, 207, 211], "t_": [44, 53], "problemat": [44, 53, 155, 165, 262], "hot": [45, 54, 79, 99, 111, 139, 140, 149, 179], "floattensor": [45, 102], "intens": [45, 89, 155, 167, 223, 280], "scatter_": [45, 175], "prop": 47, "proportion": [47, 164], "travers": [47, 177, 237], "height": [47, 51, 99, 102, 186, 192, 243, 277], "3a": [47, 172], "9a": 47, "2b": 47, "dq": 47, "bf": 47, "external_grad": 47, "finetun": [47, 131, 137, 164, 180], "unfrozen": 47, "exclusionari": 47, "autodiff": [47, 131, 156], "pillow": [48, 97], "librosa": 48, "cython": 48, "nltk": 48, "spaci": 48, "viz": [48, 95], "huge": [48, 106, 111, 120, 136, 146, 149], "airplan": [48, 97, 104], "automobil": [48, 97, 104], "bird": [48, 97], "deer": [48, 97], "dog": [48, 97, 104, 192, 245], "frog": [48, 97], "hors": [48, 97], "truck": [48, 97, 104], "3x32x32": 48, "color": [48, 56, 57, 95, 97, 99, 101, 102, 138, 157, 158, 172, 184, 186, 192], "32x32": [48, 51, 97, 104, 114, 184], "extrem": [48, 111, 158, 190], "pilimag": 48, "brokenpipeerror": 48, "fun": [48, 54, 113, 114, 116, 117, 173], "entropi": [48, 57, 97, 99, 103, 136, 265], "learnt": 48, "truth": [48, 79, 114, 192, 214], "okai": 48, "wasn": [48, 105, 108, 189], "energi": [48, 54], "chanc": [48, 54, 104, 157], "hmmm": 48, "plai": [48, 54, 57, 104, 106, 131, 173, 180, 280], "chat": [48, 54, 179], "cifar10_tutori": [48, 50, 52], "sung": 49, "kim": 49, "jenni": 49, "kang": 49, "mytensor": 49, "my_tensor": [49, 121], "parallelli": 49, "getitem": 49, "cnn": [49, 104, 131, 161, 165, 166, 181, 186, 192, 236], "capsul": 49, "monitor": [49, 112, 148], "output_s": [49, 56, 140, 197], "former_torchi": 49, "parallelism_tutori": 49, "data_parallel_tutori": [49, 50, 52, 83], "neural_networks_tutori": [50, 51, 52], "gentl": [50, 52, 61, 62, 130], "glimps": 51, "convnet": [51, 95, 149, 157, 176], "lenet": [51, 79, 97, 101, 103, 171, 237], "mini": [51, 54, 57, 101, 109, 112, 166, 172, 184, 237], "nsampl": 51, "nchannel": 51, "least": [51, 79, 102, 121, 138, 140, 146, 157, 167, 172, 179, 189, 229, 232, 247, 281], "clear": [51, 56, 79, 94, 105, 106, 111, 137, 141, 155, 167, 177, 186, 200, 208, 234, 247], "sub_": 51, "nesterov": [51, 121], "beginner_blitz": 52, "matthew": [54, 91, 121], "inkawhich": [54, 57, 79, 89, 91, 121], "movi": [54, 55, 95], "cornel": [54, 55], "dialog": [54, 55], "corpu": [54, 55], "artifici": [54, 104, 249], "intellig": 54, "onlin": [54, 149, 157, 173, 176], "helpdesk": 54, "bot": 54, "predefin": [54, 104, 112, 149, 237, 262], "compani": 54, "IT": 54, "teach": [54, 57, 104, 179], "boom": 54, "hello": [54, 106, 164], "am": [54, 108, 140, 179], "hospit": 54, "lawyer": 54, "friend": [54, 164], "arrest": 54, "kid": 54, "sorri": 54, "san": 54, "francisco": [54, 112], "goodby": 54, "luong": [54, 179], "jointli": [54, 179], "acknowledg": [54, 148], "borrow": [54, 177], "yuan": 54, "kuei": 54, "wu": [54, 135, 195, 200, 210], "ywk991112": 54, "sean": [54, 139, 140, 179], "robertson": [54, 139, 140, 179], "spro": 54, "floydhub": 54, "textutil": 54, "__": [54, 67, 79, 104, 120, 127, 186], "reformat": 54, "rich": [54, 243], "charact": [54, 111, 131, 144, 162, 173, 179, 180], "220": [54, 177], "579": [54, 158], "exchang": [54, 114, 116, 133, 148, 179, 183], "292": [54, 92], "035": 54, "617": 54, "713": [54, 97], "utter": [54, 55], "divers": 54, "variat": [54, 103, 112, 143, 193, 206, 219, 247, 261], "formal": [54, 206, 229], "sentiment": 54, "datafil": 54, "tab": [54, 101, 103, 179, 184, 243], "sentenc": [54, 99, 105, 106, 109, 111, 140, 148, 179, 193, 211], "jsonl": [54, 55], "loadlinesandconvers": 54, "lineid": 54, "characterid": 54, "conversationid": 54, "movieid": 54, "extractsentencepair": 54, "formatted_movie_lin": 54, "unescap": 54, "delimit": 54, "busi": [54, 140, 280], "vocabulari": [54, 97, 99, 111, 136, 139, 211, 262], "implicit": [54, 94, 134, 189, 243, 262], "discret": [54, 236], "voc": 54, "addword": 54, "addsent": 54, "infrequ": 54, "unicod": [54, 139, 140, 179], "ascii": [54, 111, 139, 140, 179], "unicodetoascii": [54, 140], "letter": [54, 139, 140, 179], "lowercas": [54, 112, 179], "punctuat": [54, 179], "normalizestr": 54, "aid": [54, 121, 190, 251], "max_length": [54, 140, 216], "filterpair": 54, "stackoverflow": [54, 139, 140, 179, 247], "518232": [54, 139, 140, 179], "2809427": [54, 139, 140, 179], "tactic": 54, "benefici": [54, 99, 130, 174, 210, 215, 262, 265, 280], "soften": 54, "difficulti": [54, 173], "min_count": 54, "massag": 54, "accommod": 54, "shorter": [54, 56, 112, 179, 183, 206], "eos_token": 54, "english": [54, 106, 109, 139, 140, 162, 179], "indexesfromsent": 54, "zeropad": 54, "inputvar": 54, "outputvar": 54, "pad_token": 54, "batch2traindata": 54, "bunch": [54, 139, 140, 243, 276], "aforement": [54, 86, 104, 193, 237, 272], "brain": 54, "sutskev": 54, "discov": [54, 117, 148, 176, 193, 215], "accomplish": [54, 57, 139, 148, 161, 218, 231, 247, 261], "jeddy92": 54, "io": [54, 56, 101, 131, 140, 175, 178, 186, 214, 266], "ts_seq2seq_intro": 54, "invent": [54, 57, 173], "cho": 54, "2014": [54, 57], "bidirect": [54, 149], "gru": [54, 99, 139, 140, 179], "colah": 54, "2015": [54, 104], "fp": [54, 92, 131, 161], "unpack": [54, 222], "pack_padded_sequ": 54, "pad_packed_sequ": 54, "input_seq": 54, "input_length": [54, 133], "n_layer": [54, 169], "num_direct": 54, "sole": [54, 183], "combat": [54, 111], "bahdanau": [54, 179], "groundwork": 54, "h_t": [54, 109], "attn": [54, 179], "softmax": [54, 99, 104, 109, 111, 112, 139, 140, 172, 175, 177, 184, 193, 211, 235, 279], "unidirect": 54, "input_step": 54, "last_hidden": 54, "encoder_output": 54, "num_word": 54, "masknllloss": 54, "clever": [54, 106], "teacher": [54, 104, 131, 179], "teacher_forcing_ratio": [54, 179], "instabl": [54, 179], "craft": [54, 79, 111, 140], "explod": [54, 99], "essenc": [54, 108], "nan": [54, 207, 234], "overshoot": 54, "steep": 54, "cliff": 54, "goodfellow": [54, 57, 79], "2016": 54, "www": [54, 179, 192], "deeplearningbook": 54, "sos_token": 54, "realiti": [54, 57, 79, 108, 112, 178, 261], "tie": 54, "trainit": [54, 179], "n_iter": [54, 140], "explanatori": 54, "lift": [54, 221], "tarbal": 54, "NOT": [54, 89, 121, 141, 143, 144, 146, 164], "decoder_output": 54, "greedysearchdecod": 54, "searcher": 54, "evaluateinput": 54, "press": [54, 57], "gracefulli": [54, 58, 176, 229], "prompt": [54, 55, 199, 277], "regardless": [54, 102, 103, 156, 167, 176], "attn_model": 54, "concat": [54, 108], "loadfilenam": 54, "save_dir": [54, 186], "model_nam": [54, 133, 213, 216, 236], "corpus_nam": [54, 55], "encoder_n_lay": 54, "decoder_n_lay": 54, "_checkpoint": [54, 133], "tar": [54, 121], "checkpoint_it": 54, "folk": 54, "congratul": [54, 117, 137, 139, 190, 249, 263, 264, 265], "tailor": [54, 148, 167, 190, 280], "cool": [54, 57, 164, 166, 221], "chatbot_tutori": [54, 122], "wen": [55, 187, 189, 275], "uninstal": 55, "reinstal": 55, "torchdata": 55, "chatbot": [55, 122], "browser": [55, 101, 103, 114, 183, 230], "subfold": 55, "visit": [55, 199, 237], "in_": 55, "_colab": 55, "_name": 55, "mount": [55, 197], "gdrive": 55, "upload": [55, 230], "rerun": [55, 141, 164], "evolv": [55, 155, 161], "t4": 55, "sasank": [56, 127], "chilamkurthi": [56, 127], "scikit": 56, "pd": [56, 186], "skimag": 56, "ion": [56, 181], "exitstack": [56, 181], "0x7fe95313f940": 56, "facial": 56, "pose": [56, 230, 231], "landmark": 56, "dlib": 56, "image_nam": 56, "part_0_x": 56, "part_0_i": 56, "part_1_x": 56, "part_1_i": 56, "part_2_x": 56, "part_67_x": 56, "part_67_i": 56, "0805personali01": 56, "83": [56, 235, 261], "98": [56, 155, 177, 181, 235], "84": [56, 103, 114, 119, 121, 157, 184], "134": 56, "1084239450_e76e00b7e7": 56, "236": 56, "257": [56, 247], "312": [56, 158, 277], "person": [56, 190, 192], "img_nam": 56, "landmarks_fram": 56, "read_csv": 56, "face_landmark": 56, "iloc": 56, "asarrai": 56, "34": [56, 119, 172, 235, 247, 252, 261], "97": [56, 155, 177, 181, 235], "show_landmark": 56, "scatter": [56, 132, 134, 146, 148, 186], "marker": [56, 140, 189], "paus": [56, 175], "imread": 56, "__len__": [56, 112, 139, 148, 192], "__getitem__": [56, 112, 139, 148, 192], "facelandmarksdataset": 56, "csv_file": 56, "root_dir": 56, "is_tensor": 56, "tolist": [56, 189, 216], "face_dataset": 56, "fig": [56, 184], "tight_layout": [56, 79], "set_titl": [56, 181, 184], "324": [56, 158], "215": [56, 186], "333": [56, 158], "250": [56, 158, 177, 252], "258": [56, 158], "434": 56, "290": [56, 177], "randomcrop": 56, "crop": [56, 97, 138, 181, 192], "tsfm": 56, "transformed_sampl": 56, "edg": [56, 99, 114, 120, 131, 154, 183, 194, 249, 277], "new_w": 56, "randint": [56, 57, 134, 140, 158, 169, 236], "from_numpi": [56, 175, 177], "safer": [56, 247], "stick": [56, 148, 158], "tsfrm": 56, "transformed_dataset": 56, "lose": [56, 58, 102, 104, 157, 190], "collate_fn": 56, "show_landmarks_batch": 56, "sample_batch": 56, "images_batch": 56, "landmarks_batch": 56, "im_siz": 56, "grid_border_s": 56, "make_grid": [56, 103, 181, 184], "titl": [56, 79, 139, 167, 179, 186], "indent": [56, 158, 247], "i_batch": 56, "4th": [56, 169, 223], "ioff": [56, 181], "imagefold": [56, 57, 97], "ant": [56, 127], "xxy": 56, "jpeg": 56, "xxz": 56, "bee": [56, 127], "nsdf3": 56, "asd932_": 56, "data_transform": 56, "hymenoptera_dataset": 56, "hymenoptera_data": 56, "dataset_load": 56, "data_loading_tutori": [56, 122], "nathan": [57, 79, 89, 91], "celebr": [57, 131], "pictur": [57, 79, 134, 136, 179], "thorough": 57, "shed": [57, 245], "spend": [57, 86, 164, 247, 252], "sake": [57, 149, 171, 174, 263, 264], "ian": 57, "constantli": [57, 79, 174], "outsmart": 57, "equilibrium": 57, "perfect": [57, 94, 146, 208], "notat": [57, 79], "chw": [57, 172], "3x64x64": 57, "thought": [57, 87, 207, 261], "latent": [57, 111], "p_": 57, "p_g": 57, "minimax": 57, "logd": 57, "underset": 57, "mathbb": [57, 89, 161, 174], "sim": 57, "radford": 57, "unsupervis": 57, "drawn": [57, 112, 173], "rgb": [57, 97, 104, 157, 172, 186], "volum": [57, 132], "manualse": 57, "10000": [57, 79, 97, 103, 140, 169, 177, 181, 247, 261], "dataroot": 57, "image_s": [57, 277], "spatial": [57, 95, 97, 99, 131, 180, 192], "64x64": 57, "nc": [57, 210], "nz": 57, "ngf": 57, "ndf": 57, "num_epoch": 57, "0002": 57, "ngpu": 57, "celeb": 57, "img_align_celeba": 57, "celeba": 57, "188242": 57, "173822": 57, "284702": 57, "537394": 57, "stdev": 57, "weights_init": 57, "reiniti": 57, "criteria": 57, "netg": 57, "netd": 57, "critic": [57, 89, 134, 145, 167, 195, 228, 232, 261], "downsampl": [57, 97, 157], "promot": 57, "healthi": 57, "bceloss": 57, "ell": [57, 179], "l_1": 57, "l_n": 57, "quad": [57, 174], "y_n": 57, "bce": 57, "gt": [57, 119], "fixed_nois": 57, "establish": 57, "Be": [57, 94], "somewhat": [57, 167], "collaps": 57, "ganhack": 57, "secondli": 57, "loss_d": 57, "loss_g": 57, "versu": [57, 79, 131, 139, 223], "anim": [57, 97], "music": 57, "dcgan_faces_tutori": [57, 122], "mingpt": [58, 59, 60, 61, 144, 145], "aw": [58, 60, 132, 144, 145, 266], "p3": [58, 59, 60, 68, 120, 144, 145], "8xlarg": [58, 60], "youtub": [58, 59, 60, 61, 94, 95, 97, 99, 101, 102, 103, 131, 144, 145], "failur": [58, 113, 145, 146, 155, 189, 197, 226, 277], "disrupt": [58, 197, 275], "suscept": [58, 231], "elast": [58, 133, 146, 231], "attempt": [58, 94, 102, 106, 133, 167, 189, 197, 223, 251, 275], "minutia": 58, "multinod": [58, 144, 190], "load_snapshot": 58, "snapshot_path": 58, "train_step": 58, "should_checkpoint": 58, "save_snapshot": 58, "membership": [58, 145], "intervent": [58, 104, 272], "diff": [58, 60, 86, 131, 247, 261], "multigpu": [58, 60, 145], "multigpu_torchrun": 58, "envvari": 58, "ddp_setup": [58, 60], "12355": [58, 60, 132, 146, 228, 229], "local_rank": [58, 133, 145, 146, 169, 197], "gpu_id": [58, 60, 145], "_save_snapshot": 58, "model_st": 58, "epochs_run": 58, "_load_snapshot": 58, "max_epoch": 58, "_run_epoch": [58, 60], "total_epoch": [58, 60], "save_everi": [58, 60], "nproc_per_nod": [58, 133, 134, 146, 169, 197, 231], "migrat": [58, 60, 262], "fault": [59, 60, 61, 92, 144, 145, 167], "toler": [59, 60, 61, 92, 94, 144, 145], "cluster": [59, 101, 133, 138, 144, 145, 146, 148, 229, 231, 271], "torchrun": [59, 65, 133, 134, 144, 145, 169, 195, 197, 231], "amazon": 59, "ec2": [59, 132], "gentli": 59, "gpt": [59, 132, 144, 145, 169], "stat": [60, 133, 141, 173, 183, 190, 252, 261], "replica": [60, 61, 65, 132, 134, 146, 148, 281], "convert_sync_batchnorm": 60, "single_gpu": 60, "mytraindataset": 60, "distributedsampl": [60, 61, 132, 133], "destroy_process_group": [60, 132, 133, 135, 146, 169, 195, 228, 229], "excess": [60, 86, 136, 187, 236, 246], "train_data": 60, "train_dataset": [60, 104, 133, 216, 236, 270], "set_epoch": [60, 132, 133], "b_sz": 60, "_run_batch": 60, "ckp": 60, "_save_checkpoint": 60, "load_train_obj": 60, "prepare_dataload": 60, "shorthand": 60, "ring": [61, 136, 195], "older": [61, 119, 120, 150, 166, 167, 174, 199], "destroi": [61, 94, 152], "soumith": [62, 148], "chintala": [62, 148], "scientif": [62, 99, 102, 120], "cifar10": [62, 92, 97, 183, 236, 265, 270], "executorch": [63, 64, 131, 203, 204, 212, 220, 222, 224, 239, 240, 241, 242, 244, 277], "Will": [65, 134], "constabl": [65, 134], "categor": [65, 86, 101, 149, 175, 177, 190], "fsdp": [65, 134, 136, 144, 228, 229, 231], "tp": [65, 197, 231], "pp": 65, "dtensor": [65, 136, 230, 266], "devicemesh": [65, 136, 266], "reshard": [65, 134, 229], "mesh": [65, 130, 134, 136, 231], "recip": [65, 119, 131, 205, 222, 225, 227, 230, 232, 234, 243, 245, 246, 247, 248, 249, 251, 252, 259, 263, 264, 265, 267, 269, 271, 272, 273, 274, 275, 276, 277, 279, 281], "c10d": [65, 146, 170, 197, 262], "all_gath": [65, 132, 133, 148, 170], "p2p": 65, "isend": [65, 148], "guidelin": [65, 262], "fullyshardeddataparallel": [65, 132, 133, 134, 136, 228, 229, 231], "torchtitan": [65, 169, 195], "polynomi": [67, 68, 69, 71, 72, 73, 76, 77, 120], "pi": [67, 68, 71, 72, 73, 76, 77, 94, 131, 174, 234], "euclidean": [67, 68, 71, 72, 73, 76, 77, 94, 104, 120], "polynomial_autograd": 67, "bx": [68, 120, 234], "cx": [68, 106, 120], "p_3": [68, 120], "5x": [68, 120], "legendr": [68, 120], "polynomial_custom_funct": 68, "strang": [69, 89, 120], "fifth": [69, 120], "tough": [69, 120], "dynamic_net": [69, 74], "polynomial_modul": [71, 74], "2000": [72, 97, 103, 104, 120, 184, 186, 189, 197, 247, 281], "flaten": [72, 120], "mse": [72, 99, 104, 120], "polynomial_nn": [72, 74], "polynomial_optim": [73, 74], "beginner_examples_nn": 74, "polynomial_numpi": [76, 78], "biggest": [77, 197], "polynomial_tensor": [77, 78], "004": 78, "beginner_examples_tensor": 78, "appreci": [79, 105], "overlook": [79, 247], "secur": [79, 183], "vulner": 79, "surpris": [79, 165], "impercept": 79, "perturb": [79, 95], "drastic": [79, 189, 276], "overarch": 79, "misclassif": 79, "alter": [79, 121, 199, 253, 264], "har": 79, "remark": [79, 187], "mathbf": 79, "nabla_": [79, 106], "007": 79, "misclassifi": 79, "gibbon": 79, "clearli": [79, 138, 197, 206, 207], "pretrained_model": [79, 186], "lenet_mnist_model": [79, 237], "0x7fea05161070": 79, "dropout1": [79, 132, 176], "dropout2": [79, 132, 176], "fc1": [79, 103, 114, 121, 132, 150, 176, 181, 184, 237], "9216": [79, 132, 176], "fc2": [79, 103, 114, 121, 132, 176, 181, 184, 237], "log_softmax": [79, 99, 112, 132, 176, 181, 237], "test_load": [79, 104, 132, 176, 181, 237], "1307": [79, 132, 148, 176, 181, 237], "3081": [79, 132, 148, 176, 181, 237], "current_acceler": 79, "map_loc": [79, 121, 134, 146, 186, 246, 251], "91m": [79, 181], "128mb": 79, "9k": [79, 181], "1mb": 79, "65m": [79, 181, 199], "209mb": 79, "54k": [79, 181], "in_featur": [79, 132, 194, 210, 216, 218, 253], "out_featur": [79, 132, 194, 210, 216], "fgsm_attack": 79, "clean": [79, 132, 133, 139, 146, 164, 169, 190, 195, 206], "data_grad": 79, "_imag": 79, "_grad": 79, "sign_data_grad": 79, "perturbed_imag": 79, "clamp": [79, 222], "denorm": 79, "strength": [79, 184], "_data": 79, "adv_exampl": 79, "init_pr": 79, "bother": 79, "datagrad": 79, "data_denorm": 79, "perturbed_data": 79, "reappli": [79, 275], "perturbed_data_norm": 79, "final_pr": 79, "adv_ex": 79, "adv": 79, "final_acc": 79, "ttest": 79, "ep": [79, 142, 177, 189, 194, 206, 216, 234, 277], "ex": [79, 201, 216, 243], "9912": 79, "9605": 79, "8743": 79, "7108": 79, "4874": 79, "2710": 79, "271": 79, "1420": 79, "trend": [79, 87, 183], "curv": [79, 183, 184], "linearli": 79, "figsiz": [79, 184], "ytick": [79, 184], "arang": [79, 184, 234, 260], "xtick": [79, 184], "xlabel": [79, 186], "ylabel": [79, 186], "lunch": 79, "BUT": [79, 108], "percept": 79, "tradeoff": [79, 131, 137, 138, 148, 173, 267], "evid": [79, 135], "fontsiz": 79, "orig": [79, 153], "defend": 79, "nip": 79, "defens": 79, "competit": [79, 150, 166, 280], "defenc": 79, "dirti": 79, "fgsm_tutori": [79, 122], "torchvision_tutori": [80, 180, 192], "nn_tutori": [82, 112, 122], "blitz": [83, 114, 139, 140, 179, 184], "anupam": [86, 87], "bhatnagar": [86, 87], "holistictraceanalysi": 86, "env_nam": [86, 173], "deactiv": 86, "trace_dir": 86, "trace_analysi": 86, "traceanalysi": 86, "engag": [86, 214], "datafram": [86, 138, 186], "time_spent_df": 86, "get_temporal_breakdown": 86, "enqueu": 86, "slowdown": [86, 133, 137], "consecut": [86, 140, 149, 157, 167, 172, 186, 280], "insuffici": [86, 174], "delai": [86, 146, 175, 190], "stall": [86, 197, 280], "gap": [86, 89], "nanosecond": 86, "consecutive_kernel_delai": 86, "get_idle_time_breakdown": 86, "idle_time_df": 86, "show_idle_interval_stat": 86, "percentag": [86, 171, 211], "visualize_pctg": 86, "comm": 86, "comp": 86, "mem": [86, 119, 252], "proport": [86, 164], "pie": [86, 164], "chart": [86, 101, 274], "kernel_type_metrics_df": 86, "kernel_metrics_df": 86, "get_gpu_kernel_breakdown": 86, "bottleneck": [86, 119, 133, 136, 145, 164, 167, 175, 183, 187, 225, 243], "plotli": [86, 95, 138], "hover": [86, 138, 172], "pan": 86, "num_kernel": [86, 234], "duration_ratio": 86, "preced": [86, 94, 102, 142, 149, 153, 213], "lab": [86, 184, 199], "image_render": 86, "jupyterlab": 86, "gpu_kernel_breakdown": 86, "tflop": 86, "oversubscrib": 86, "unresolv": [86, 208], "extent": [86, 102], "overlap_df": 86, "get_comm_comp_overlap": 86, "h2d": [86, 227], "d2h": [86, 227], "d2d": 86, "memcpi": 86, "memset": 86, "outstand": 86, "generate_trace_with_count": 86, "_with_count": 86, "screenshot": [86, 243], "get_memory_bw_summari": 86, "get_queue_length_summari": 86, "get_memory_bw_time_seri": 86, "get_queue_length_time_seri": 86, "mem_bw_summari": 86, "queue_len_summari": 86, "mem_bw_seri": 86, "queue_len_seri": 86, "get_queue_length_seri": 86, "25th": 86, "50th": 86, "75th": 86, "percentil": 86, "cudalaunchkernel": 86, "cudamemcpyasync": 86, "cudamemsetasync": 86, "kernel_info_df": 86, "get_cuda_kernel_launch_stat": 86, "outlier": [86, 174], "microsecond": [86, 156, 178, 247], "cutoff": 86, "runtime_cutoff": 86, "launch_delay_cutoff": 86, "occasion": [87, 176, 179], "hta": [87, 183], "tracediff": 87, "cumul": [87, 174], "compare_trac": 87, "ops_diff": 87, "absent": 87, "visualize_counts_diff": 87, "visualize_duration_diff": 87, "ten": [87, 97, 101, 104], "df": 87, "compare_traces_output": 87, "sort_valu": 87, "diff_count": 87, "largest": [87, 112, 186], "diff_dur": 87, "differer": 87, "overshadow": 87, "profilerstep": [87, 155], "loc": [87, 173, 246], "trace_diff_demo": 87, "learning_hybrid_frontend_through_example_tutori": [88, 89, 90], "hybrid_frontend": 88, "introduction_to_hybrid_frontend_tutori": 88, "shini": 89, "enjoi": [89, 157], "aquaint": 89, "bridg": [89, 230], "refin": [89, 189], "gradual": [89, 164], "proven": [89, 209], "resouc": 89, "consumpt": [89, 97, 99, 101, 103, 119, 133, 136, 138, 155, 167, 171, 183, 262, 266, 281], "discrep": [89, 213], "interwork": 89, "intrus": [89, 164], "decor": [89, 94, 117, 130, 141, 157, 175, 187, 262, 275], "broken": [89, 108], "epsilon": [89, 142, 149, 173, 174], "biggl": 89, "lfloor": 89, "prod_": 89, "biggr": 89, "rfloor": 89, "hline": 89, "190": [89, 177, 186, 247], "4377": 89, "59051": 89, "accomod": [89, 144], "beginner_hybrid_frontend": 90, "dramat": [92, 112], "industri": [92, 95], "slight": [92, 135, 143, 235, 248], "trial": [92, 138, 246], "train_cifar": 92, "data_dir": [92, 133], "l2": [92, 99, 171], "get_checkpoint": 92, "as_directori": 92, "checkpoint_dir": [92, 228, 229], "pkl": 92, "rb": 92, "checkpoint_st": 92, "start_epoch": 92, "net_state_dict": 92, "optimizer_state_dict": [92, 121, 228, 229, 236], "80": [92, 138, 139, 140, 158, 177, 234, 277], "luckili": [92, 155, 189, 190, 208, 247], "trainload": [92, 184], "fraction": [92, 247], "checkpoint_data": 92, "tempfil": [92, 146, 234], "temporarydirectori": 92, "wb": 92, "dump": [92, 155, 223, 230], "from_directori": 92, "val_loss": [92, 133], "val_step": 92, "wast": [92, 183, 211, 214, 218, 247, 251, 253, 267], "loguniform": [92, 247], "ashaschedul": 92, "functool": [92, 132, 133], "gpus_per_tri": 92, "resources_per_tri": 92, "num_sampl": [92, 133], "checkpoint_at_end": 92, "000668163": 92, "31479": 92, "0977": 92, "0331514": 92, "31605": 92, "0983": 92, "000150295": 92, "30755": 92, "1023": 92, "0128248": 92, "66912": 92, "4391": 92, "00464561": 92, "7316": 92, "3463": 92, "00031556": 92, "19409": 92, "1736": 92, "00574329": 92, "85679": 92, "3368": 92, "00325652": 92, "30272": 92, "0984": 92, "000342987": 92, "76044": 92, "003734": 92, "53101": 92, "4761": 92, "0037339984519545164": 92, "5310075663924216": 92, "4737": 92, "hyperparameter_tuning_tutori": [92, 122], "tensorboard": [94, 95, 96, 97, 98, 99, 102, 103, 131, 138, 180, 250, 252, 258, 266], "rigidli": 94, "sign": [94, 165], "contextu": 94, "nudg": [94, 97, 103], "calculu": 94, "linspac": 94, "next_funct": 94, "machineri": [94, 247], "co": [94, 111, 201, 252, 262], "ins": [94, 187], "ideal_output": 94, "layer2": 94, "blow": 94, "b1": 94, "b2": 94, "temporarili": 94, "enable_grad": 94, "sin_": 94, "handi": [94, 97, 112, 148, 157, 184], "bake": [94, 153], "hessian": [94, 131, 180, 221], "twice": [94, 112, 143, 167, 199, 235, 247, 252, 281], "jvp": [94, 152, 156], "vjp": [94, 156, 161, 221], "vhp": [94, 131, 180], "hvp": [94, 131, 180], "autogradyt_tutori": [94, 96, 100], "latin": 95, "increasingli": [95, 193], "ai": [95, 106, 107, 112, 132, 138, 157, 179, 197, 210, 223, 229, 236, 245, 262], "review": [95, 144, 162, 189, 206, 207, 209, 215, 222, 236, 267], "neuron": [95, 104, 245], "analag": 95, "ablat": 95, "permut": [95, 104, 158, 172, 186, 234], "valuabl": [95, 104, 179, 211, 234], "certainli": [95, 154, 207, 209], "attr": [95, 158, 170, 223], "widget": 95, "toolset": 95, "flask": 95, "renam": [95, 194], "virtual": [95, 167, 170, 201, 251], "recogn": [95, 99, 170, 249], "visualize_image_attr": 95, "integrated_gradi": 95, "strongest": [95, 97, 99, 103], "visualize_image_attr_multipl": 95, "heat": [95, 172], "upsampl": 95, "interpol": 95, "layerattribut": 95, "teapot": 95, "trilobit": 95, "fossil": 95, "attributionvisu": 95, "imagefeatur": 95, "heatmap": 95, "captumyt": [95, 100], "introyt": 96, "introyt1_tutori": [96, 97, 100], "tensors_deeper_tutori": [96, 100, 102], "modelsyt_tutori": [96, 99, 100], "tensorboardyt_tutori": [96, 100, 101], "trainingyt_tutori": 96, "captumyt_tutori": 96, "captum": [96, 250, 258, 266], "sphx_glr_beginner_introyt_introyt_index": [96, 100], "sphx_glr_beginner_introyt_modelsyt_tutori": [96, 100], "sphx_glr_beginner_introyt_autogradyt_tutori": [96, 100], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [96, 100], "sphx_glr_beginner_introyt_captumyt": [96, 100], "sphx_glr_beginner_introyt_introyt1_tutori": [96, 100], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [96, 100], "sphx_glr_beginner_introyt_trainingyt": [96, 100], "5x3": 97, "helpfulli": 97, "prng": 97, "r3": 97, "r1": 97, "r2": 97, "trigonometr": [97, 102], "singular": [97, 165, 178, 276], "decomposit": [97, 114, 117, 134, 155], "diagram": [97, 174], "earliest": 97, "explos": 97, "handwritten": [97, 132], "abridg": 97, "c1": [97, 155], "s2": [97, 189], "c3": 97, "s4": [97, 189], "f5": 97, "f6": 97, "artifact": [97, 144, 189, 271, 272, 276], "gist": 97, "tile": [97, 101, 103, 186, 216, 223], "hasn": 97, "shouldn": [97, 171], "center": [97, 99, 103, 174, 183, 262], "concatdataset": 97, "trainset": [97, 184], "50000": [97, 140], "4914": 97, "4822": 97, "4465": 97, "2470": 97, "2435": 97, "2616": 97, "rotat": [97, 101, 181, 184], "vehicl": [97, 177], "told": [97, 173], "strip": [97, 140, 216, 261], "ingredi": 97, "inner": [97, 167, 173], "235": [97, 119], "940": 97, "6000": [97, 103], "8000": [97, 103, 261], "573": 97, "507": 97, "12000": [97, 103], "442": 97, "378": 97, "364": 97, "319": [97, 235, 252], "284": [97, 177], "267": 97, "monoton": 97, "descend": 97, "memor": 97, "roughli": [97, 105, 120, 133, 146, 155, 262], "brad": 98, "heintz": 98, "introyt_index": [98, 100], "lin": 99, "nearbi": 99, "lenet5": 99, "1x32x32": 99, "liken": 99, "5x5": 99, "3x5": 99, "presenc": [99, 187, 189, 245], "6x28x28": 99, "2x2": 99, "6x14x14": 99, "sought": 99, "3x3": 99, "16x12x12": 99, "16x6x6": 99, "576": 99, "instrument": [99, 154, 266], "dna": 99, "nucleotid": 99, "moder": 99, "beyond": [99, 102, 108, 170, 171, 262], "tagger": [99, 105], "noun": 99, "verb": 99, "vocab_s": [99, 134, 169, 236], "tagset_s": 99, "decod": [99, 105, 133, 169, 177, 178, 193, 199, 246, 277], "transformerencod": [99, 193], "transformerdecod": [99, 193], "subcompon": [99, 187], "transformerencoderlay": [99, 178, 193], "transformerdecoderlay": [99, 169, 193], "twin": 99, "maxpool": 99, "quadrant": 99, "6x6": 99, "vanish": [99, 106], "offset": [99, 190, 198, 216, 228], "neighborhood": 99, "sometim": [99, 102, 120, 137, 143, 145, 146, 149, 156, 174, 177, 179, 189, 199, 208, 209, 262], "suffer": [99, 183, 232], "steepest": 99, "feasibl": [99, 132, 134], "hardtanh": 99, "092": 100, "beginner_introyt": 100, "trainingyt": [100, 103], "080": [100, 103], "garment": 101, "tb": [101, 277], "gfile": 101, "tensorflow_stub": 101, "add_imag": [101, 184], "summarywrit": [101, 103, 184, 260], "flush": [101, 103, 246, 260], "log_dir": [101, 138, 184], "logdir": [101, 183, 184, 260], "6006": [101, 183, 184, 260], "efficaci": 101, "add_graph": [101, 184], "add_embed": [101, 184], "projector": 101, "toggl": [101, 198, 281], "night": [101, 184], "icon": 101, "dark": [101, 186], "upack": 102, "attach": [102, 174, 280], "terminologi": [102, 108], "likewis": [102, 164], "fctori": 102, "assur": [102, 167], "random1": 102, "random3": 102, "random2": 102, "random4": 102, "rng": [102, 148], "_like": [102, 158], "rand_lik": 102, "int16": 102, "cue": 102, "intent": [102, 207, 229], "subtract": [102, 104, 262], "2x4": 102, "1x4": 102, "honor": 102, "3rd": [102, 134, 141, 223, 236], "2nd": [102, 109, 134, 141, 176], "hundr": [102, 130, 136, 186, 190], "bitwis": [102, 246], "inventori": [102, 103], "occupi": [102, 243], "discard": [102, 132, 133, 183, 252, 261], "underscor": 102, "add_": [102, 140, 189, 206, 222, 232], "deepli": 102, "nor": [102, 148, 194, 206, 280], "mid": 102, "someplac": 102, "ram": [102, 133, 167, 190, 251], "colloqui": 102, "fragil": 102, "robustli": [102, 116], "whichev": 102, "thrown": [102, 209, 222], "226": 102, "zeroth": 102, "bracket": [102, 194], "rescu": 102, "squeeze_": 102, "unsqueeze_": [102, 140], "radic": 102, "parenthes": 102, "comma": 102, "convinc": [102, 164], "kinship": 102, "autom": [103, 120, 138, 154, 158, 186], "outcom": [103, 138, 197], "datetim": [103, 133, 135, 197], "training_set": 103, "validation_set": 103, "training_load": 103, "validation_load": 103, "366kb": 103, "229k": 103, "38": [103, 119, 177, 234, 235, 261], "685kb": 103, "885k": 103, "47mb": 103, "90m": 103, "07mb": 103, "55m": 103, "0mb": [103, 281], "0m": [103, 140], "5m": 103, "73": [103, 155, 177, 216, 234, 247], "2m": [103, 140], "9mb": 103, "325kb": 103, "363kb": 103, "950k": 103, "20mb": 103, "65mb": 103, "13mb": 103, "52": [103, 140, 158, 234, 235], "saniti": [103, 138, 173, 186, 279], "matplotlib_imshow": [103, 184], "one_channel": [103, 184], "unnorm": [103, 184], "npimg": [103, 184], "grei": [103, 184], "datait": [103, 184], "img_grid": [103, 184], "garmentclassifi": 103, "fc3": [103, 114, 121, 184], "dummy_output": 103, "dummy_label": 103, "7096e": 103, "6511e": 103, "9853e": 103, "7426e": 103, "3815e": 103, "4996e": 103, "8159e": 103, "7450e": 103, "0699e": 103, "9504e": 103, "1731e": 103, "5051e": 103, "9320e": 103, "1221e": 103, "6278e": 103, "4918e": 103, "6619e": 103, "9788e": 103, "5166e": 103, "3414e": 103, "6355e": 103, "6388e": 103, "8627e": 103, "1619e": 103, "3877e": 103, "6482e": 103, "1397e": 103, "4762e": 103, "5628e": 103, "3482e": 103, "1509e": 103, "7537e": 103, "4740e": 103, "9319e": 103, "3129e": 103, "5345e": 103, "2183e": 103, "8052e": 103, "5338e": 103, "2121e": 103, "468005657196045": 103, "chose": [103, 172], "epoch_index": 103, "tb_writer": 103, "running_loss": [103, 184], "last_loss": 103, "999": [103, 184, 234], "tb_x": 103, "add_scalar": [103, 184, 260], "timestamp": [103, 140, 154, 243], "strftime": [103, 133], "writer": [103, 139, 153, 172, 173, 184, 197, 228, 260], "fashion_trainer_": 103, "epoch_numb": 103, "best_vloss": 103, "1_000_000": 103, "avg_loss": 103, "running_vloss": 103, "vdata": 103, "vinput": 103, "vlabel": 103, "voutput": 103, "vloss": 103, "avg_vloss": 103, "model_path": 103, "model_": 103, "7094140766710042": 103, "8224327693916857": 103, "3000": [103, 184, 189, 277], "6905376927000471": 103, "6305256826812401": 103, "5912880565025843": 103, "5434004904045724": 103, "7000": 103, "5428710282784887": 103, "492645130865043": 103, "9000": 103, "4970582515529823": 103, "47655393795168494": 103, "11000": 103, "4509054211906623": 103, "4590087406618986": 103, "13000": 103, "4330916518960148": 103, "14000": 103, "4281971388887614": 103, "15000": [103, 140], "41440798447062843": 103, "405300498008728": 103, "40158096435841434": 103, "3791455752673792": 103, "37428761507105085": 103, "35948155302068335": 103, "3694915734322276": 103, "3894753213417425": 103, "38158510391935124": 103, "3754916428308934": 103, "3595696913249412": 103, "33789596830931257": 103, "33514031790851734": 103, "3514271968089743": 103, "34782296097552173": 103, "3354636997773778": 103, "3540857965218311": 103, "34471189975738525": 103, "32645406626269685": 103, "3229147284083447": 103, "30670405420700264": 103, "31105989654301086": 103, "3115314541794942": 103, "3137467616261274": 103, "3322441794984479": 103, "31636629479980183": 103, "32938109840275137": 103, "31599978240931526": 103, "30243822201463627": 103, "32374693909108465": 103, "31269716772704487": 103, "3030358657728648": 103, "32823406080090173": 103, "34128162264823914": 103, "29251575683878034": 103, "28749050338392046": 103, "2867415074771707": 103, "2968961599658505": 103, "2981828885099021": 103, "28969504934954693": 103, "28813674396352146": 103, "30220221076101006": 103, "28896263539842765": 103, "2989291563830484": 103, "298399606389572": 103, "2819870618153846": 103, "2834788308685693": 103, "3000387858817703": 103, "2987690887150184": 103, "3287886679172516": 103, "25637272632458735": 103, "27056012604673013": 103, "26951619138430394": 103, "2846984729801115": 103, "275826266204087": 103, "2708724702633317": 103, "2870426646245578": 103, "2786462137742965": 103, "27742262037132603": 103, "27568532466554463": 103, "26876090058241425": 103, "2566808167126419": 103, "2688435595145747": 103, "28702692813931574": 103, "2879725503162435": 103, "31628426909446716": 103, "saved_model": 103, "alexandro": 104, "chariton": 104, "computation": [104, 186], "lightweight": [104, 131, 171, 246], "drone": 104, "phone": [104, 114], "4gb": [104, 164, 172], "3072": [104, 158, 216], "satur": [104, 246], "held": [104, 139, 176], "greedi": [104, 149, 174], "num_images_to_keep": 104, "50_000": 104, "test_dataset": 104, "10_000": 104, "extractor": [104, 186], "train_load": [104, 132, 133, 176, 181, 183, 236, 237, 270], "detriment": 104, "conclud": [104, 143, 148, 189], "interven": [104, 189], "soft": [104, 174], "mistaken": 104, "alon": [104, 121, 136, 179, 184], "exploit": [104, 157, 179], "meaningfulli": 104, "temperatur": 104, "smoother": 104, "soft_target_loss_weight": 104, "ce_loss_weight": 104, "train_knowledge_distil": 104, "ce": [104, 179], "coeffici": 104, "convei": 104, "naiv": [104, 137, 156, 166, 178, 211], "rational": 104, "capac": [104, 144, 173, 186, 262], "cosineembeddingloss": 104, "obvious": [104, 108, 177], "somehow": [104, 111, 190], "hidden_represent": 104, "hidden_representation_s": 104, "avg_pool1d": 104, "modifiedlightnnregressor": 104, "cosineloss": 104, "wiggl": 104, "hinton": 104, "vinyal": 104, "dean": 104, "workshop": 104, "romero": 104, "balla": 104, "kahou": 104, "chassang": 104, "gatta": 104, "bengio": 104, "fitnet": 104, "thin": [104, 198], "confer": 104, "knowledge_distillation_tutori": [104, 122], "kit": 105, "dynet": [105, 107], "opposit": [105, 167, 207], "theano": [105, 107], "kera": [105, 107, 120], "difficult": [105, 156, 165, 179, 190, 208, 221, 234], "constitu": 105, "green": [105, 133, 136, 184], "fat": 105, "exception": 105, "entiti": [105, 111, 190, 264, 265], "recognit": [105, 131, 223, 262], "ner": 105, "sound": [105, 108, 120], "scari": 105, "viterbi": [105, 109], "sum_": [105, 111, 174], "psi_i": 105, "sum_i": 105, "partit": [105, 131, 136, 141, 148, 229, 262], "emiss": 105, "timestep": [105, 109, 139, 140, 174], "textbf": 105, "psi_": 105, "y_i": [105, 109], "rightarrow": [105, 148, 174], "x_i": [105, 106], "tran": [105, 186], "h_i": [105, 109], "collin": 105, "robert": [105, 106, 108, 109, 111], "guthri": [105, 106, 108, 109, 111], "prepare_sequ": 105, "anywai": [105, 108, 167], "gold": [105, 179], "perceptron": 105, "score_sent": 105, "advanced_tutori": [105, 107, 110], "workhors": 106, "2x5": 106, "acx": 106, "ac": [106, 186], "sigma": [106, 173], "plenti": 106, "peopl": [106, 107, 127], "shy": 106, "linearit": 106, "sum_j": 106, "x_j": 106, "unseen": [106, 111], "eta": 106, "vari": [106, 134, 142, 157, 167, 179, 187, 189, 193, 208, 211, 225, 246], "spanish": [106, 139, 140], "bow": 106, "vocab": [106, 109, 136], "word_to_ix": [106, 109, 111], "bowclassifi": 106, "creo": 106, "bigger": [106, 139, 140, 172, 186], "deep_learning_tutori": [106, 107, 110], "russel": 107, "norvig": 107, "book": 107, "rip": 107, "pytorch_tutori": [107, 108, 110], "word_embeddings_tutori": [107, 110, 111], "lexic": [107, 110], "sequence_models_tutori": [107, 109, 110], "bi": [107, 110], "crf": [107, 110], "2x2x2": 108, "complain": [108, 189], "x_2": [108, 161], "vagu": 108, "programm": [108, 111], "x_0": 108, "overbrac": [108, 109, 111], "y_0": 108, "z_0": 108, "z_1": 108, "y_2": 108, "z_2": 108, "gloss": 108, "new_z": 108, "NO": 108, "forgotten": 108, "classic": [109, 112, 158, 165, 181, 259], "markov": 109, "myriad": 109, "cow": 109, "q_": [109, 111, 157], "1st": [109, 132, 134, 141], "unfamiliar": 109, "w_1": 109, "w_m": 109, "w_i": [109, 111], "_i": 109, "_1": 109, "_m": 109, "_j": 109, "ah_i": 109, "affin": [109, 142, 181, 194, 262, 280], "affix": [109, 111], "bear": 109, "ly": 109, "adverb": 109, "c_w": 109, "x_w": 109, "po": [109, 186], "013": 110, "beginner_nlp": 110, "capit": 111, "enorm": [111, 186], "notion": 111, "mathematician": 111, "physicist": 111, "role": [111, 171, 177, 190, 280], "orthograph": 111, "linguist": 111, "hypothesi": 111, "coffe": 111, "phi": 111, "gave": 111, "pain": 111, "earth": 111, "herself": 111, "longtensor": [111, 140, 175, 177], "ith": [111, 211], "shakespear": [111, 178], "sonnet": 111, "word_i": 111, "context_s": 111, "beauti": 111, "cbow": 111, "probabilist": [111, 173], "percent": 111, "q_w": 111, "raw_text": 111, "dedupl": 111, "jeremi": 112, "howard": [112, 157, 169, 170], "rachel": 112, "thoma": 112, "ingham": 112, "elegantli": [112, 249], "concis": 112, "trail": 112, "signifi": 112, "xavier": [112, 113], "initialis": 112, "prewritten": 112, "talli": 112, "debugg": 112, "set_trac": 112, "logist": 112, "cross_entropi": [112, 136], "clearer": [112, 184], "uppercas": 112, "zero_": [112, 170, 177, 181], "prone": [112, 141, 193, 231], "gone": [112, 137, 190], "xb": 112, "faciallandmarkdataset": 112, "tensordataset": 112, "x_train": 112, "y_train": 112, "start_i": 112, "end_i": 112, "yb": 112, "train_d": 112, "cleaner": [112, 206, 208, 214], "train_dl": 112, "phase": [112, 148, 177, 252, 278], "loss_batch": 112, "rid": [112, 113, 134, 156, 232, 277], "avgpool2d": 112, "adaptiveavgpool2d": [112, 149], "lucki": [112, 171], "rent": 112, "hour": [112, 277], "mnist_sampl": 112, "fastai": 112, "practition": [112, 148, 209], "dupr\u00e9": 113, "circumv": 113, "forwardwithcontrolflowtest": 113, "modelwithcontrolflowtest": 113, "mlp": [113, 136, 150, 190], "unexpectedli": [113, 243], "succe": [113, 116, 189], "assertionerror": [113, 155], "dynamo": [113, 114, 116, 141, 155, 200, 277, 278], "identity2": 113, "fx": [113, 114, 131, 155, 180, 189, 190, 194, 201, 237, 271], "imperfect": 113, "faith": 113, "pitfal": [113, 189], "necessarili": [113, 114, 116, 117, 141, 143, 167, 189], "export_control_flow_model_to_onnx_tutori": [113, 115, 118], "ti": [114, 116, 117], "tai": [114, 116, 117], "justin": [114, 117, 120], "chu": [114, 117], "thiago": [114, 116], "crepaldi": [114, 116], "gamut": 114, "supercomput": 114, "constrain": [114, 138, 165], "onnxscript": [114, 116, 117], "upgrad": [114, 116, 165, 172, 183, 214], "imageclassifiermodel": 114, "example_input": [114, 194, 213], "onnx_program": 114, "fold": [114, 153, 190, 213], "redund": [114, 117, 149], "onnxprogram": [114, 117], "protobuf": 114, "image_classifier_model": 114, "drag": [114, 164, 183, 184, 230], "onnx_input": 114, "ort_sess": 114, "inferencesess": 114, "cpuexecutionprovid": 114, "onnxruntime_input": 114, "input_arg": 114, "input_valu": 114, "get_input": [114, 234], "onnxruntime_output": 114, "251502": 114, "2657369": 114, "4870586": 114, "0116289": 114, "27910343": 114, "401127": 114, "7608013": 114, "175537": 114, "9179763": 114, "62940055": 114, "1424676": 114, "76623887": 114, "10370053": 114, "78320324": 114, "7781626": 114, "4606739": 114, "6862345": 114, "5856026": 114, "03522826": 114, "23368974": 114, "50921446": 114, "934393": 114, "2675003": 114, "7890529": 114, "8155137": 114, "0480105": 114, "78507394": 114, "5085298": 114, "5623024": 114, "112968": 114, "2027836": 114, "59176564": 114, "1399639": 114, "2972262": 114, "1743544": 114, "261005": 114, "torch_output": 114, "03818495": 114, "01343064": 114, "08193006": 114, "02756699": 114, "04502583": 114, "15152723": 114, "03055248": 114, "03002886": 114, "06153454": 114, "0065061": 114, "467": [114, 118], "export_simple_model_to_onnx_tutori": [114, 115, 118], "intro_onnx": [115, 116, 118], "onnx_registry_tutori": [115, 117, 118], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [115, 118], "sphx_glr_beginner_onnx_intro_onnx": [115, 118], "sphx_glr_beginner_onnx_onnx_registry_tutori": [115, 118], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [115, 118], "consum": [116, 119, 137, 155, 167, 173, 175, 177, 178, 252, 262, 279], "exportedprogram": [116, 117, 121, 189, 276, 277], "newer": [116, 147, 158, 164, 166, 191, 220, 254, 255, 256, 257, 262], "__version__": [116, 172, 222], "registri": 117, "_op": 117, "opoverload": 117, "opset": 117, "native_funct": 117, "yaml": [117, 144, 237], "custom_translation_t": 117, "node_add_0": 117, "input_i": 117, "input_x": 117, "gelu": [117, 213], "op_typ": 117, "mylibrari": 117, "add_and_round_op": 117, "469": 118, "beginner_onnx": 118, "quicker": 119, "record_funct": [119, 155, 235, 252], "incur": [119, 136, 197, 227, 228, 262], "investig": [119, 158, 171, 186, 187, 189, 261], "with_stack": [119, 183], "key_averag": [119, 235], "group_by_stack_n": 119, "traceback": [119, 155, 277], "sort_bi": [119, 235, 252], "193a910735e8": 119, "stacktrac": 119, "88": [119, 177], "212": 119, "953": 119, "mnt": [119, 148], "xarfus": 119, "au": 119, "07": [119, 133, 235, 252, 261], "715": 119, "848m": 119, "350": 119, "151u": 119, "293": [119, 158], "342u": 119, "095u": 119, "931": 119, "footprint": [119, 132, 133, 134, 144, 164, 235, 246, 281], "006": 119, "476": 119, "338": 119, "759m": 119, "as_strid": [119, 155], "281": [119, 158], "808u": 119, "275": 119, "721u": 119, "_local": 119, "268": 119, "650u": [119, 252], "_scalar_dens": 119, "347": 119, "argwher": 119, "nonzero": [119, 262], "089m": 119, "402m": 119, "491m": 119, "119": 119, "441": 119, "587u": 119, "_numpi": 119, "395": [119, 177], "602u": 119, "801m": 119, "rpc": [119, 131, 232, 266], "johnson": 120, "brows": 120, "utf": [120, 140], "modern": [120, 167, 187, 190], "50x": 120, "hairi": 120, "thankfulli": 120, "wave": 120, "tflearn": 120, "burden": [120, 179, 262], "facil": 121, "running_mean": [121, 264], "themodelclass": 121, "param_tensor": 121, "var_nam": 121, "param_group": [121, 226, 232, 234], "dampen": 121, "weight_decai": [121, 232, 234], "4675713712": 121, "4675713784": 121, "4675714000": 121, "4675714072": 121, "4675714216": 121, "4675714288": 121, "4675714432": 121, "4675714504": 121, "4675714648": 121, "4675714720": 121, "_use_new_zipfile_seri": 121, "best_model_st": 121, "deepcopi": 121, "pt2": [121, 189, 225, 226, 231, 234, 276], "simplemodel": 121, "exported_program": [121, 277], "saved_exported_program": 121, "model_state_dict": [121, 134, 228, 229, 236], "theoptimizerclass": 121, "modela_state_dict": 121, "modela": 121, "modelb_state_dict": 121, "modelb": 121, "optimizera_state_dict": 121, "optimizera": 121, "optimizerb_state_dict": 121, "optimizerb": 121, "themodelaclass": 121, "themodelbclass": 121, "theoptimizeraclass": 121, "theoptimizerbclass": 121, "gan": [121, 131, 165], "ensembl": [121, 131, 180], "remap": 121, "overwrit": 121, "saving_loading_model": [121, 122, 254, 255, 256, 257], "439": [122, 252], "distil": [122, 131, 237], "dcgan": [122, 131], "transfer_learning_tutori": [122, 127], "rai": [122, 131], "template_tutori": [122, 124], "firstnam": 124, "lastnam": 124, "gallery_pattern": 124, "neural_style_transfer_tutori": 124, "_build": 124, "beginner_sourc": 124, "link1": [124, 133], "link2": [124, 133], "cs231n": 127, "licens": [127, 181], "bsd": [127, 181], "todai": [127, 190, 208, 234], "lr_schedul": [127, 132, 133], "num_ftr": 127, "class_nam": [127, 186], "decai": [127, 149, 174, 232], "checkout": [127, 222], "spread": [130, 186], "demand": [130, 197], "distributeddata": 130, "uneven": 130, "huggingfac": [130, 132, 133, 193, 216, 277], "hf": 130, "t5": 130, "async_execut": [130, 131, 175], "dataparallel": [130, 131, 137, 246, 262], "plug": [130, 170, 181], "foreach_map": [131, 266, 269], "inductor": [131, 141, 180, 189, 199, 201, 210, 213, 214, 234, 272, 274, 278], "bite": [131, 266], "non_block": [131, 180], "pin_memori": [131, 132, 133, 180, 262], "slide": [131, 262], "tiatoolbox": 131, "resampl": 131, "waveform": 131, "wav2vec2": 131, "dqn": [131, 180], "cartpol": [131, 149, 174, 177], "v0": [131, 157, 174, 192], "proxim": [131, 173], "mario": [131, 165, 180], "_static": 131, "thumbnail": [131, 186], "holist": 131, "fuser": [131, 180], "nchw": [131, 158, 236], "raspberri": 131, "nerur": 131, "netork": 131, "exploresever": 131, "func": [131, 150, 152, 156, 161, 166, 221, 273, 277], "tangent": [131, 152, 180], "plugin": [131, 183], "orthogon": [131, 165], "symmetr": [131, 165, 213], "prune": [131, 165, 180, 214, 237], "snapshot": [131, 144, 189], "torchx": 131, "scaled_dot_product_attent": [131, 178, 193, 195], "paral": 131, "fsdp2": [131, 132], "fully_shard": [131, 134], "fsdp1": [131, 132], "libuv": 131, "tcpstore": [131, 146], "sdk": 131, "v3": 131, "camera": [131, 172], "xnnpack": [131, 194], "metal": 131, "shader": 131, "android": [131, 214, 266], "deeplab": 131, "fp32": [131, 133, 144, 158, 178, 190, 194, 199, 210, 223, 234, 237], "torchrec": [131, 180], "distributedmodelparallel": 131, "sheet": 131, "hamid": [132, 133], "shojanazeri": [132, 133], "yanli": [132, 133], "zhao": [132, 133], "shen": [132, 146, 170, 175, 177], "li": [132, 140, 146, 148, 167, 170, 175, 177, 187], "1t": [132, 144], "courtesi": 132, "patrick": 132, "hu": 132, "reduce_scatt": [132, 133, 136], "possess": [132, 199, 251], "toi": [132, 146, 153, 177, 189, 190, 229, 259], "fsdp_mnist": 132, "size_based_auto_wrap_polici": 132, "default_auto_wrap_polici": 132, "fsdp_auto_wrap_polici": 132, "auto_wrap_polici": [132, 133, 134], "steplr": [132, 133], "fully_sharded_data_parallel": [132, 228, 229], "cpuoffload": [132, 134], "backwardprefetch": [132, 133], "enable_wrap": [132, 133], "cleanup": [132, 133, 146, 228, 229], "ddp_loss": 132, "batch_idx": [132, 181, 236, 237, 270], "tloss": [132, 181, 237], "6f": [132, 181, 237], "view_a": [132, 176, 181, 237], "fsdp_main": [132, 133], "dataset1": 132, "dataset2": 132, "sampler1": [132, 133], "num_replica": [132, 133], "sampler2": [132, 133], "train_kwarg": [132, 133], "test_kwarg": [132, 133], "test_batch_s": [132, 133], "cuda_kwarg": [132, 133], "my_auto_wrap_polici": 132, "min_num_param": 132, "init_start_ev": [132, 133], "enable_tim": [132, 133], "init_end_ev": [132, 133], "adadelta": 132, "step_siz": [132, 133, 234], "gamma": [132, 133, 157, 174, 175, 177], "elapsed_tim": 132, "save_model": [132, 133], "barrier": [132, 133, 135, 146, 148, 195], "mnist_cnn": 132, "metavar": [132, 133, 175, 177], "store_tru": [132, 133], "110": [132, 177, 247], "85": [132, 140, 235, 247, 252], "40": [132, 140, 157, 158, 177, 179, 193, 200, 210, 216, 234, 235, 247, 276], "67462890625sec": 132, "_fsdp_wrapped_modul": 132, "flattenparamswrapp": 132, "_fpw_modul": 132, "peak": [132, 134, 142, 164, 172, 193, 195, 199, 228, 274, 280, 281], "g4dn": 132, "xlarg": 132, "allgath": [132, 133, 136, 170, 262], "seal": 132, "20000": [132, 140], "89130859375sec": 132, "auto_wrap": 132, "offload": [132, 133, 134, 235, 243], "cpu_offload": [132, 134], "offload_param": [132, 134], "dpp": 132, "ddp_mnist": 132, "39": [132, 140, 177, 193, 235, 247], "77766015625sec": 132, "wright": 133, "rohan": [133, 176], "varma": [133, 176], "wikihow": 133, "p4dn": 133, "a100": [133, 137, 166, 187, 193, 199, 216], "pressur": [133, 228], "fdsp": 133, "xxl": 133, "billion": [133, 136], "3b": [133, 172], "wikihowal": 133, "wikihowsep": 133, "summarization_dataset": 133, "t5_train": 133, "autotoken": [133, 216], "gpt2tokenizerfast": 133, "t5token": 133, "t5forconditionalgener": 133, "modeling_t5": 133, "t5block": 133, "checkpoint_wrapp": 133, "checkpointimpl": 133, "apply_activation_checkpointing_wrapp": 133, "mixedprecis": 133, "shardingstrategi": [133, 231], "fullstatedictconfig": 133, "statedicttyp": [133, 228, 229], "transformer_auto_wrap_polici": 133, "tqdm": [133, 149, 173, 216], "setup_model": 133, "from_pretrain": [133, 216, 236, 277], "get_date_of_run": 133, "2022": [133, 201], "08": [133, 155, 177, 195, 234, 235, 237, 247, 276], "31": [133, 140, 155, 234, 235, 247, 252, 261], "12_pm": 133, "date_of_run": 133, "s_": [133, 174], "format_metrics_to_gb": 133, "gigabyt": 133, "metric_num": 133, "g_gigabyt": 133, "ndigit": 133, "fsdp_loss": 133, "inner_pbar": 133, "colour": 133, "desc": [133, 197], "r0": 133, "input_id": [133, 136, 216, 277], "source_id": 133, "attention_mask": [133, 277], "source_mask": 133, "target_id": 133, "train_accuraci": 133, "val_load": 133, "load_dataset": [133, 216, 277], "type_path": 133, "output_length": 133, "print_text": 133, "1500": [133, 247], "150": [133, 177], "val_dataset": 133, "t5_auto_wrap_polici": 133, "transformer_layer_cl": 133, "sharding_strategi": [133, 134, 231], "shard_grad_op": [133, 134], "zero2": 133, "full_shard": [133, 134], "zero3": 133, "bf16_readi": 133, "is_bf16_support": 133, "loosevers": 133, "is_nccl_avail": [133, 195], "mp_polici": [133, 134], "bfsixteen": 133, "mixed_precis": [133, 134], "current_devic": [133, 246], "adamw": [133, 174], "best_val_loss": 133, "inf": [133, 189, 208, 211, 234], "curr_val_loss": 133, "file_save_nam": 133, "time_of_run": 133, "dur": 133, "train_acc_track": 133, "val_acc_track": 133, "training_start_tim": 133, "track_memori": 133, "mem_alloc_track": 133, "mem_reserved_track": 133, "run_valid": 133, "zone": 133, "memory_alloc": 133, "memory_reserv": 133, "save_polici": 133, "offload_to_cpu": 133, "rank0_onli": 133, "state_dict_typ": 133, "full_state_dict": [133, 134], "cpu_stat": 133, "currepoch": 133, "save_nam": 133, "store_fals": 133, "nnode": [133, 146, 169, 195, 197], "transfom": 133, "mhsa": 133, "ffn": [133, 193], "bfloat16": [133, 134, 195, 199, 210, 223, 246, 259, 270], "v100": [133, 187], "fpsixteen": 133, "param_dtyp": [133, 134], "reduce_dtyp": [133, 134], "buffer_dtyp": [133, 134], "fp32_polici": 133, "grad_bf16": 133, "oom": [133, 164, 246], "freed": [133, 164], "backward_pr": [133, 134], "backward_prefetch": [133, 134], "backward_post": [133, 134], "wei": 134, "feng": [134, 157, 170], "yifan": 134, "mao": 134, "unshard": [134, 190, 195], "recordstream": 134, "float8": 134, "nf4": 134, "qlora": 134, "eg": 134, "fsdpmodul": 134, "fsdptransform": 134, "tok_embed": [134, 136, 169], "fsdptransformerblock": 134, "joint": [134, 272], "to_loc": 134, "clip_grad_norm_": 134, "seq_len": 134, "queu": [134, 228], "set_modules_to_forward_prefetch": 134, "set_modules_to_backward_prefetch": 134, "perf": [134, 216], "layers_to_prefetch": 134, "num_to_forward_prefetch": 134, "num_to_backward_prefetch": 134, "upcast": 134, "model_arg": [134, 169], "fsdp_kwarg": 134, "mixedprecisionpolici": 134, "max_norm": 134, "resum": [134, 187, 229, 266, 277], "distributed_tensor": 134, "distribute_tensor": 134, "mmap": 134, "full_sd": 134, "meta_sharded_sd": 134, "sharded_sd": 134, "param_nam": [134, 259], "full_tensor": 134, "sharded_meta_param": 134, "sharded_tensor": 134, "device_mesh": [134, 136, 195, 231], "full_param": 134, "cpu_state_dict": 134, "sharded_param": 134, "del": [134, 169, 200, 234], "set_model_state_dict": 134, "broadcast_from_rank0": 134, "statedictopt": 134, "get_model_state_dict": 134, "set_optimizer_state_dict": 134, "get_optimizer_state_dict": 134, "modulewrappolici": 134, "transformerblock": [134, 136], "param_init_fn": 134, "itertool": [134, 177], "to_empti": [134, 218, 259], "sublay": 134, "reshard_after_forward": 134, "hybrid_shard": [134, 231], "_hybrid_shard_zero2": 134, "offload_polici": 134, "cpuoffloadpolici": 134, "cast_forward_input": 134, "cast_root_forward_input": 134, "output_dtyp": [134, 194, 197], "sync_module_st": 134, "rank0": [134, 175, 177, 197], "forward_prefetch": 134, "fsdp_modul": 134, "limit_all_gath": 134, "use_orig_param": [134, 136], "no_sync": [134, 262], "set_requires_gradient_sync": 134, "ignored_param": 134, "ignored_st": 134, "xilun": [135, 195], "roll": 135, "1k": [135, 136], "98304": 135, "96k": 135, "perf_count": 135, "logger": [135, 186], "getlogg": [135, 186], "var": 135, "preset": [135, 213], "env_rank": 135, "env_world_s": 135, "env_master_addr": 135, "env_master_port": 135, "23456": [135, 148], "tcp_store": 135, "is_mast": 135, "time_elaps": 135, "client": 135, "timeout": [135, 146, 170, 197], "store_based_barri": 135, "timedelta": [135, 197], "diststoreerror": 135, "_diststoreerror": 135, "_store_based_barri": 135, "group_nam": 135, "rendezvous_count": 135, "default_pg_timeout": 135, "logging_interv": 135, "store_kei": 135, "store_based_barrier_kei": 135, "worker_count": 135, "last_worker_kei": 135, "last_work": 135, "num_workers_join": 135, "tcpstore_test": 135, "number_run": 135, "spectrum": 135, "listen_fd": 135, "socket": [135, 148, 155, 262, 280], "listen_sock": 135, "af_inet": 135, "sock_stream": 135, "addr": [135, 197], "getsocknam": 135, "master_listen_fd": 135, "notimplementederror": 135, "gloo": [135, 146, 148, 170, 183, 190, 281], "vairabl": 135, "plane": 135, "notifi": [135, 175], "wanchao": [136, 231], "liang": [136, 231], "tianyu": 136, "liu": 136, "megatron": 136, "lm": [136, 227], "sp": 136, "parallelstyl": 136, "parallelize_modul": 136, "foward": 136, "aris": [136, 189, 193, 199, 208, 277], "exceed": [136, 173], "domin": [136, 158, 186, 219], "ballpark": 136, "flop": [136, 190, 274], "llm": [136, 169, 210], "trillion": [136, 144], "month": 136, "llama": [136, 193, 213], "70b": 136, "2k": 136, "llama2": 136, "colwiseparallel": 136, "rowwiseparallel": 136, "sequenceparallel": 136, "rmsnormpython": 136, "preparemoduleinput": 136, "preparemoduleoutput": 136, "init_device_mesh": [136, 195, 231], "tp_mesh": [136, 231], "feedforward": 136, "swiglu": 136, "w2": 136, "silu": 136, "w1": 136, "w3": 136, "colwis": 136, "rowwis": 136, "parallelize_plan": 136, "layer_tp_plan": 136, "feed_foward": 136, "feed_forward": 136, "wq": 136, "wk": 136, "wv": 136, "wo": 136, "tp_plan": 136, "draft": [136, 148], "num_head": 136, "layer_id": [136, 169], "transformer_block": 136, "attn_lay": 136, "n_head": [136, 169], "n_kv_head": 136, "input_layout": 136, "output_layout": 136, "attention_norm": 136, "ffn_norm": 136, "desired_input_layout": 136, "yellow": 136, "loss_parallel": 136, "use_local_output": 136, "seq": 136, "dp": [136, 197], "mesh_2d": [136, 231], "submesh": 136, "dp_mesh": 136, "model_tp": 136, "model_2d": 136, "broadli": 137, "torchviz": [137, 143], "orang": [137, 172], "_save": 137, "kept": [137, 197], "_saved_self": 137, "_saved_oth": 137, "cycl": [137, 183, 223, 247, 252], "thumb": [137, 156, 173, 246], "pack_hook": 137, "unpack_hook": 137, "silli": 137, "harmless": 137, "debat": 137, "__repr__": [137, 247], "152": 137, "48gb": 137, "5gb": 137, "6x": 137, "leak": 137, "autograd_saved_tensors_hooks_tutori": [137, 180], "david": 138, "eriksson": 138, "balandat": 138, "methodologi": [138, 232, 236], "laptop": 138, "sustain": [138, 228], "studi": [138, 171, 186], "botorch": 138, "bayesian": 138, "mnist_train_na": [138, 159, 180], "appdef": 138, "kubernet": 138, "local_cwd": 138, "fetch": [138, 140, 175, 176, 177, 190, 272], "proxi": [138, 206, 209, 247, 267], "tensorboardcurvemetr": 138, "curve_nam": 138, "lower_is_bett": 138, "favor": [138, 161, 173, 189], "multiobjectiveoptimizationconfig": 138, "94": [138, 235, 252], "generationstrategi": 138, "scheduleropt": 138, "max_pending_tri": 138, "pareto": 138, "frontier": 138, "surrog": 138, "uncertainti": 138, "95": [138, 140, 177, 194, 235], "num_param": 138, "val_acc": 138, "contour": 138, "hidden_size_1": 138, "kiuk": 138, "chung": 138, "tristan": [138, 172], "rice": [138, 172], "ax_multiobjective_nas_tutori": [138, 159, 180], "surnam": 139, "spell": 139, "lua": [139, 140, 179], "unreason": [139, 140], "roman": 139, "alphabet": 139, "n_letter": [139, 140], "line_length": 139, "all_lett": [139, 140], "linetotensor": 139, "namesdataset": 139, "20074": 139, "charrnn": 139, "58": [139, 158, 216, 234, 237], "label_from_output": 139, "histor": [139, 140], "all_loss": [139, 140], "minu": [139, 183], "bright": 139, "incorrectli": 139, "chines": [139, 140], "korean": [139, 140], "italian": [139, 140], "greek": [139, 140], "poorli": 139, "gender": 139, "subreddit": 139, "char_rnn_classification_tutori": [139, 180], "russian": 140, "ru": 140, "rovakov": 140, "uantov": 140, "shavakov": 140, "german": 140, "ger": 140, "gerren": 140, "ereng": 140, "rosher": 140, "spa": 140, "salla": 140, "parer": 140, "allan": 140, "chi": 140, "chan": 140, "iun": 140, "unicodedata": 140, "ascii_lett": 140, "eo": [140, 179], "findfil": 140, "nfd": 140, "mn": 140, "readlin": 140, "some_fil": [140, 146], "category_lin": 140, "all_categori": 140, "splitext": 140, "basenam": 140, "n_categori": 140, "n\u00e9\u00e0l": 140, "arab": 140, "czech": 140, "dutch": 140, "french": [140, 162, 179], "irish": 140, "japanes": 140, "polish": 140, "portugues": 140, "scottish": 140, "vietnames": 140, "neal": 140, "o2o": 140, "muscl": [140, 186], "fuzz": 140, "chao": 140, "i2h": 140, "i2o": 140, "input_combin": 140, "output_combin": 140, "inithidden": 140, "randomchoic": 140, "randomtrainingpair": 140, "abcd": 140, "categorytensor": 140, "inputtensor": [140, 170, 222], "targettensor": 140, "letter_index": 140, "randomtrainingexampl": 140, "category_tensor": 140, "input_line_tensor": 140, "target_line_tensor": 140, "contrast": [140, 146, 166, 167, 189, 206], "0005": 140, "timesinc": 140, "floor": 140, "print_everi": 140, "plot_everi": 140, "total_loss": 140, "8335": 140, "7239": 140, "0297": 140, "4303": 140, "25000": 140, "9492": 140, "30000": [140, 148], "3930": 140, "35000": 140, "5965": 140, "40000": [140, 247], "2923": 140, "45000": 140, "1925": 140, "0881": 140, "55000": 140, "55": [140, 158, 234, 247, 280], "7778": 140, "7007": 140, "65000": [140, 261], "4836": 140, "70000": 140, "3920": 140, "75000": 140, "1075": 140, "80000": 140, "8752": 140, "3m": 140, "85000": 140, "3505": 140, "90000": [140, 247], "90": [140, 177, 235], "1789": 140, "95000": 140, "0682": 140, "2836": 140, "line2d": 140, "0x7fe9c970cf70": 140, "output_nam": 140, "start_lett": 140, "topv": 140, "topi": 140, "abc": [140, 186], "roverik": 140, "uakinovev": 140, "shilishin": 140, "gerter": 140, "er": 140, "rour": 140, "sertara": 140, "para": 140, "alara": 140, "hai": 140, "fiction": 140, "countri": 140, "citi": 140, "676": [140, 180], "char_rnn_generation_tutori": [140, 180], "simon": 141, "fan": [141, 172], "torch_log": [141, 189, 210, 266, 267, 269, 277], "_dynamo": [141, 155, 187, 189, 234, 267, 277], "compiled_autograd": 141, "intercept": 141, "bytecod": [141, 187], "aotdispatch": 141, "rewritten": 141, "compiled_autograd_verbos": 141, "stderr": 141, "aot0_": 141, "aot0_view_2": 141, "view_2": 141, "aot": [141, 155, 234, 274], "unoptim": [141, 187], "aot_eag": [141, 155], "graph_break": [141, 277], "unique_graph": 141, "call_hook": 141, "div": [141, 155, 206, 234], "adjac": 142, "dilat": 142, "track_running_statist": 142, "denomin": 142, "nenadmarku": [142, 153], "bulk": 142, "fusedconvbn": 142, "geforc": 142, "rtx": 142, "3070": 142, "56gb": 142, "unfus": 142, "68gb": 142, "shallow": [142, 149], "custom_function_conv_bn_tutori": [142, 180], "grad_out": 143, "finit": [143, 161], "differenc": 143, "magnifi": 143, "gradgradcheck": [143, 262], "grad_x": 143, "make_dot": 143, "dout": 143, "ouptut": 143, "sinh": 143, "cosh": 143, "expx": 143, "expnegx": 143, "_grad_out_exp": 143, "_grad_out_negexp": 143, "sinhbad": 143, "cube_backward": 143, "cubebackward": 143, "cube_forward": 143, "cube_backward_backward": 143, "sav_grad_out": 143, "cube_backward_backward_grad_out": 143, "cube": 143, "dgrad_out": 143, "reachabl": [144, 145, 148], "2xlarg": [144, 145], "hydra": 144, "slurm": [144, 145, 146, 148], "char_dataset": 144, "gpt2_train_cfg": 144, "bucket": [144, 262], "aggress": 144, "rendezv": [145, 170], "nccl_debug": 145, "diagnos": 145, "nccl_socket_ifnam": 145, "eth0": 145, "joe": 146, "zhu": [146, 155], "chirag": [146, 197], "pandya": [146, 197], "clarifi": 146, "filestor": 146, "libtmp": 146, "toymodel": [146, 228, 229, 231], "net1": [146, 228, 229, 230, 231], "net2": [146, 228, 229, 230, 231], "demo_bas": 146, "ddp_model": [146, 281], "run_demo": 146, "demo_fn": 146, "caution": 146, "straggler": [146, 183], "inevit": 146, "spike": [146, 172], "AND": 146, "recoveri": 146, "torchelast": 146, "demo_checkpoint": 146, "checkpoint_path": 146, "gettempdir": 146, "toympmodel": 146, "dev0": 146, "dev1": 146, "output_devic": 146, "demo_model_parallel": 146, "mp_model": 146, "ddp_mp_model": 146, "n_gpu": 146, "elastic_ddp": 146, "rdzv_id": [146, 231], "rdzv_backend": 146, "rdzv_endpoint": [146, 231], "29400": [146, 231], "scontrol": 146, "hostnam": 146, "slurm_nodelist": 146, "srun": 146, "torchrun_script": 146, "s\u00e9b": 148, "arnold": 148, "sysadmin": 148, "coordin": [148, 181, 192, 199, 209, 280], "pdsh": 148, "clustershel": 148, "init_process": 148, "127": [148, 194], "set_start_method": 148, "ip": 148, "recv": [148, 169, 177], "irecv": 148, "dst": 148, "req": 148, "behaviour": 148, "fanci": 148, "baidu": 148, "deepspeech": 148, "facebook": 148, "communc": 148, "new_group": [148, 169, 231], "commut": 148, "band": 148, "bor": 148, "bxor": 148, "premul_sum": 148, "scatter_list": 148, "gather_list": 148, "all_to_al": 148, "output_tensor_list": 148, "input_tensor_list": 148, "random_split": 148, "data_idx": 148, "datapartition": 148, "1234": 148, "data_len": 148, "part_len": 148, "partition_dataset": 148, "get_world_s": 148, "bsz": 148, "partition_s": 148, "train_set": [148, 183], "ceil": 148, "epoch_loss": 148, "average_gradi": 148, "voil\u00e0": 148, "send_buff": 148, "recv_buff": 148, "accum": [148, 210], "send_req": 148, "bandwidth": [148, 183, 190, 214, 235], "subsect": 148, "mpi": 148, "eleg": 148, "smi": [148, 246], "mvapich2": 148, "ipc": [148, 183], "recompil": [148, 187, 226, 267, 271, 272], "requisit": 148, "forg": [148, 237, 280], "openmpi": 148, "mpirun": 148, "myscript": 148, "handshak": 148, "superflu": 148, "everybodi": 148, "readili": 148, "race": [148, 232], "fcntl": 148, "nf": [148, 197], "sharedfil": 148, "everyon": 148, "unclear": [148, 189], "natalia": 148, "gimelshein": 148, "actor": 149, "carrier": [149, 173], "step_mdp": 149, "brought": [149, 167, 173, 189], "84x84": 149, "accessori": [149, 172], "inittrack": 149, "stamp": 149, "is_init": 149, "tensordictprim": 149, "primer": [149, 209], "disappear": 149, "lstmmodul": 149, "backbon": [149, 186], "flank": 149, "assist": [149, 231], "tensordictmodulebas": 149, "batch_first": 149, "make_tensordict_prim": 149, "qvaluemodul": 149, "action_valu": 149, "qvalueactor": 149, "set_recurrent_mod": 149, "uniniti": [149, 218], "dqnloss": 149, "delay_valu": 149, "lazymemmapstorag": 149, "dqn_with_rnn_tutori": [149, 180], "tradition": [150, 218], "pretend": [150, 166], "stack_module_st": 150, "functional_cal": [150, 161, 166], "num_model": 150, "front": [150, 171, 189], "in_dim": [150, 166, 221], "weren": [150, 166], "forced_alignment_tutori": 151, "incomplet": [152, 167], "eagerli": [152, 164, 189, 275], "primal": 152, "dual": 152, "dual_level": 152, "fresh": [152, 246], "check_forward_ad": 152, "check_backward_ad": 152, "check_undefined_grad": 152, "check_batched_grad": 152, "functorch": 152, "downsid": [152, 167], "reformul": [152, 161], "ft": 152, "make_functional_with_buff": 152, "analog": [152, 189, 190, 208, 209], "consolid": [152, 175, 190], "dual_numb": 152, "forward_ad_usag": [152, 180], "horac": 153, "he": [153, 157, 179], "clariti": 153, "simplif": 153, "conclus": 153, "hear": [153, 154], "tracker": [153, 154], "fx_conv_bn_fus": [153, 180], "longest": 154, "nicer": 154, "tabul": [154, 187, 197, 274], "ca": 154, "graphmodul": [154, 194], "symbolic_trac": 154, "profilinginterpret": 154, "clock": [154, 247], "51393": 154, "fx_profiling_tutori": [154, 180], "xuan": 155, "liao": 155, "haozh": 155, "jiong": [155, 200, 210], "gong": [155, 200, 210], "weihan": 155, "intricaci": 155, "troubleshoot": 155, "pinpoint": [155, 189, 230], "narrow": [155, 189, 197, 211], "torch_compile_debug": 155, "xx": 155, "_inductor": [155, 189, 200, 210, 234, 276], "model___20": 155, "torchinductor_root": 155, "rx": 155, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 155, "fx_graph_runn": 155, "fx_graph_transform": 155, "ir_pre_fus": 155, "ir_post_fus": 155, "output_cod": [155, 210, 234, 278], "triton": [155, 187, 201, 210, 234, 266, 269, 271, 276], "gv": 155, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 155, "tmp2": [155, 210, 234], "tmp1": [155, 210, 234], "exc": [155, 277], "backendcompilerfail": 155, "cppcompileerror": 155, "xg": 155, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 155, "unsign": [155, 247], "max_propagate_nan": 155, "tmp3": [155, 210, 234], "tmp0": [155, 210, 234], "deduct": 155, "substitut": [155, 156, 164], "deduc": 155, "in_ptr0": [155, 234], "in_ptr1": [155, 234], "out_ptr0": 155, "pragma": [155, 210], "ivdep": [155, 210], "i0": 155, "static_cast": [155, 210, 234], "0l": [155, 210, 234], "8390l": 155, "1l": [155, 200, 210], "i1": 155, "8l": 155, "buf0": [155, 200], "schedulernod": 155, "computedbuff": 155, "memorydep": 155, "c0": 155, "67120": 155, "unmet_depend": 155, "met_depend": 155, "arg0_1": [155, 200, 234], "8390": 155, "arg1_1": [155, 234], "nodeus": 155, "can_inplac": 155, "buf0_loop_bodi": 155, "var_rang": 155, "z0": 155, "index0": 155, "index1": 155, "get_index": 155, "get_index_1": 155, "load_1": 155, "get_index_2": 155, "minifi": 155, "dead": 155, "minif": 155, "allclos": [155, 195, 216, 234], "tol": 155, "test_script": 155, "expected_result": 155, "actual_result": 155, "torchdynamo_repro_aft": 155, "torchdynamo_repro_level": 155, "mobilebertforquestionansw": 155, "xeon": [155, 158, 223, 236, 266], "platinum": 155, "8358": 155, "60ghz": 155, "kmp_blocktim": [155, 262, 280], "kmp_set": 155, "kmp_affin": [155, 262, 280], "compact": [155, 262, 280], "ld_preload": [155, 262, 280], "conda_prefix": [155, 247], "dirnam": [155, 170, 243], "libiomp5": [155, 262, 280], "libjemalloc": [155, 280], "malloc_conf": [155, 280], "oversize_threshold": [155, 280], "background_thread": [155, 280], "metadata_thp": [155, 280], "dirty_decay_m": 155, "muzzy_decay_m": 155, "numactl": [155, 262, 280], "bench": 155, "eager_t": 155, "num_it": 155, "inductor_t": 155, "1023553796113": 155, "339": 155, "95180135127157": 155, "359459053287382": 155, "355x": 155, "enable_kernel_profil": 155, "370": 155, "814m": 155, "362": 155, "89": [155, 177, 252], "161": 155, "276m": 155, "363": 155, "121": [155, 252], "416m": 155, "488": [155, 247], "154m": 155, "194": 155, "clamp_min": [155, 235], "81": [155, 235], "444m": 155, "bmm": [155, 211, 223, 247], "258m": [155, 235], "810": 155, "920m": 155, "447m": 155, "_softmax": 155, "087m": 155, "376": 155, "888m": 155, "77": [155, 234], "430m": 155, "502m": 155, "161m": 155, "850": 155, "377m": 155, "386": [155, 177, 252], "index_select": 155, "000u": [155, 252], "986": 155, "420m": 155, "703": 155, "656": [155, 281], "963": 155, "864m": 155, "_mkl_linear": [155, 210], "231": [155, 247, 252], "573m": [155, 252], "992m": 155, "336": [155, 252], "642m": 155, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 155, "915": 155, "911": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 155, "901": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 155, "899": [155, 279], "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 155, "898": [155, 279], "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 155, "895": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 155, "893": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 155, "892": [155, 172, 247, 279], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 155, "891": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 155, "890": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 155, "889": 155, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 155, "graph_0_cpp_fused_": 155, "63x": 155, "cblas_sgemm_comput": 155, "339m": 155, "94x": 155, "cpp_fused__mkl_linear_add_mul_relu_151": 155, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 155, "bottl": [155, 228], "neck": [155, 228], "780875144992024": 155, "9588955780491233": 155, "0286805751604735": 155, "smallest": [155, 171], "solid": 155, "analyt": 155, "hotspot": [155, 243], "phenomenon": 155, "inductor_debug_cpu": [155, 180], "annoi": 156, "jax": [156, 161, 221], "argnum": 156, "millisecond": [156, 170, 262], "get_perf": 156, "rigor": 156, "taller": 156, "hessiani": 156, "overwhelm": 156, "jacobians_hessian": [156, 180], "yuansong": 157, "steven": 157, "guo": 157, "cheatsheet": 157, "companion": 157, "bro": 157, "ne": [157, 179, 252], "emul": 157, "tube": 157, "mushroom": 157, "screen": [157, 174, 243], "next_stat": [157, 174], "240": [157, 177, 252], "pipe": 157, "sky": 157, "grayscaleobserv": 157, "resizeobserv": 157, "skipfram": 157, "framestack": 157, "movement": 157, "exploration_r": 157, "marionet": 157, "ddqn": 157, "_e": 157, "argmax_": 157, "td_target": 157, "td_t": 157, "td_e": 157, "leftarrow": 157, "nabla": 157, "episod": [157, 174, 175, 177], "mario_rl_tutori": [157, 180], "vitali": 158, "fedyunin": 158, "densest": 158, "4x4": 158, "10x3x16x16": 158, "768": [158, 216], "memory_format": [158, 222, 223, 232, 236], "channels_last": [158, 223, 236], "contiguous_format": 158, "minor": [158, 177, 184, 236, 237], "ambigu": [158, 207, 208], "n1hw": 158, "contrari": [158, 167, 171], "restrid": 158, "special_x": 158, "unintend": 158, "7603": 158, "apex": 158, "main_amp": 158, "resnet50": [158, 172, 175, 236, 270], "o2": 158, "opt_level": 158, "keep_batchnorm_fp32": 158, "nonetyp": 158, "loss_scal": 158, "cast_model_typ": 158, "patch_torch_funct": 158, "master_weight": 158, "125": [158, 252], "866": 158, "230": [158, 177, 186], "949": 158, "6735125184": 158, "6735": 158, "prec": 158, "259": 158, "562": 158, "773": 158, "481": 158, "355": 158, "693": 158, "6968704462": 158, "6852": 158, "461": 158, "775": 158, "089": 158, "433": 158, "965": 158, "7877287269": 158, "7194": 158, "833": 158, "771": 158, "710": 158, "487": 158, "8285319805": 158, "7467": 158, "260": [158, 177], "380": 158, "770": 158, "090": 158, "525": 158, "908": 158, "7370464802": 158, "7447": 158, "360": 158, "623": 158, "555": 158, "728": 158, "7592862844": 158, "7472": 158, "917": 158, "345": [158, 192], "774": 158, "746": [158, 247], "115": [158, 235], "9698858261": 158, "9218": 158, "597": 158, "659": 158, "2505953312": 158, "0879": 158, "767": 158, "785": 158, "7579724789": 158, "7580": 158, "198": 158, "482": 158, "135": [158, 172, 247], "414": 158, "716": [158, 235, 247], "7007197738": 158, "7293": 158, "387": 158, "1010": 158, "516": 158, "7113101482": 158, "7233": 158, "667": 158, "197": 158, "340": 158, "1013": 158, "023": 158, "588": 158, "8943189979": 158, "7661": 158, "541": 158, "7113249302": 158, "9551": 158, "1011": 158, "163": 158, "683": 158, "574": 158, "8537774086": 158, "7716": 158, "279": 158, "453": 158, "7595844269": 158, "3413": 158, "429": 158, "269": 158, "827": 158, "743": 158, "883": 158, "8196096420": 158, "4011": 158, "volta": [158, 246, 262], "alexnet": 158, "mnasnet0_5": 158, "mnasnet0_75": 158, "mnasnet1_0": 158, "mnasnet1_3": 158, "mobilenet_v2": [158, 172, 192, 222], "resnet101": 158, "resnet152": 158, "resnet34": 158, "resnext50_32x4d": 158, "shufflenet_v2_x0_5": [158, 172], "shufflenet_v2_x1_0": [158, 172], "shufflenet_v2_x1_5": [158, 172], "shufflenet_v2_x2_0": [158, 172], "squeezenet1_0": 158, "squeezenet1_1": 158, "vgg11": 158, "vgg11_bn": 158, "vgg13": 158, "vgg13_bn": 158, "vgg16": 158, "vgg16_bn": 158, "vgg19_bn": 158, "wide_resnet101_2": 158, "wide_resnet50_2": 158, "ic": 158, "lake": [158, 236], "densenet121": 158, "densenet161": 158, "densenet169": 158, "googlenet": [158, 172], "inception_v3": [158, 172], "resnext101_32x8d": [158, 172], "spite": 158, "contains_cl": 158, "print_input": 158, "check_wrapp": 158, "check_cl": 158, "was_cl": 158, "old_attr": 158, "getattr": 158, "exclude_funct": 158, "has_nam": 158, "__class__": [158, 259], "setattr": 158, "nc11": 158, "369": [158, 180], "memory_format_tutori": [158, 180], "year": [161, 165, 193], "j_": 161, "diagon": 161, "asymptot": 161, "i_o": 161, "i_": 161, "e_o": 161, "textrm": 161, "_o": 161, "tensorfloat": 161, "sacrific": 161, "empirical_ntk_ntk_vp": 161, "luck": [161, 164, 190], "neural_tangent_kernel": [161, 180], "homepag": [163, 196], "ooz": 164, "_might_": 164, "2p": 164, "ephemer": 164, "memory_viz": 164, "devot": 164, "bat": [164, 201], "2gb": [164, 172], "6gb": 164, "foreach": [164, 234], "reveal": [164, 178, 187, 245, 247], "silver": 164, "bullet": 164, "sizabl": [164, 167], "tantamount": 164, "eat": 164, "lora": 164, "unlock": [164, 213, 232], "vit_l_16": 164, "neat": 164, "lrschedul": [164, 266], "slate": 164, "woohoo": 164, "apart": 164, "shrunk": 164, "0gb": 164, "optimizer_step_in_backward_tutori": [164, 180], "lezcano": 165, "surprisingli": 165, "ill": 165, "frobeniu": 165, "spectral": 165, "lipschitz": 165, "x\u1d40": 165, "upper": [165, 178, 189, 252], "triangular": 165, "reimplement": [165, 171, 189], "skew": [165, 183, 252], "unparametr": 165, "linearsymmetr": 165, "moduledict": [165, 169, 216], "parametrizationlist": [165, 216], "inbuilt": 165, "caylei": 165, "spd": 165, "right_invers": 165, "remove_parametr": 165, "parametri": 165, "leave_parametr": 165, "privaci": [166, 171], "sample_grad": 166, "compute_loss": 166, "ft_compute_grad": 166, "0th": [166, 171, 178, 211], "25x": [166, 186, 216], "opacu": 166, "per_sample_grad": [166, 180], "cpu_tensor": 167, "cuda_tensor": [167, 262], "erron": 167, "carefulli": [167, 262], "distinguish": [167, 177, 184], "isol": [167, 187], "illus": 167, "anywher": 167, "cudastreamsynchron": 167, "dma": 167, "volterra": 167, "tesla": 167, "h100": [167, 187], "t3_cuda": 167, "belief": [167, 189], "brand": 167, "cudahostalloc": 167, "cudamemcpi": 167, "doubt": 167, "interestingli": 167, "tick": 167, "__whenev": 167, "memory__": 167, "corrupt": 167, "garbag": 167, "reliabl": [167, 247], "annihil": 167, "legitim": 167, "notori": 167, "inher": [167, 189, 190, 229], "blockag": 167, "afterward": [167, 189, 198], "non_blocking_pin": 167, "ration": 167, "outweigh": [167, 235], "perman": [167, 171], "shuttl": 167, "expedit": 167, "advers": 167, "bu": 167, "monopol": 167, "pinmem_nonblock": [167, 180], "huang": [169, 170, 195, 228, 229], "microbatch": 169, "micro": 169, "educ": [169, 193], "dataclass": 169, "modelarg": 169, "witout": 169, "layernorm": [169, 193, 216], "splitpoint": 169, "pipelinestag": 169, "schedulegpip": 169, "pp_group": 169, "stage_index": 169, "num_stag": 169, "init_distribut": 169, "peer": [169, 281], "manual_model_split": 169, "split_spec": 169, "mirror": 169, "build_stag": 169, "gpipe": 169, "1f1b": 169, "interleaved1f1b": 169, "loopedbf": 169, "num_microbatch": 169, "example_input_microbatch": 169, "tracer_model_split": 169, "tokenwise_loss_fn": 169, "n_microbatch": 169, "pipelining_tutori": 169, "tian": 170, "si": 170, "zeroredundancyoptim": [170, 266], "processgroupnccl": 170, "processgroupgloo": 170, "processgroupmpi": 170, "ucc": 170, "oneccl": [170, 262], "trainum": 170, "emerg": 170, "backenddummi": 170, "chrono": 170, "outputtensor": [170, 222], "allgatheropt": 170, "allreduceopt": 170, "workdummi": 170, "optyp": 170, "recvanysourc": 170, "future_": 170, "iscomplet": 170, "issuccess": 170, "kunsettimeout": 170, "getfutur": 170, "outputtensorvec": 170, "listtyp": 170, "tensortyp": 170, "markcomplet": 170, "createbackenddummi": 170, "backenddummyconstructor": 170, "__attribute__": 170, "register_backend": 170, "cpp_function": [170, 247], "libraries_dir": 170, "abspath": 170, "dummy_collect": 170, "michela": 171, "paganini": 171, "biolog": 171, "batteri": 171, "subnetwork": 171, "lotteri": 171, "ticket": 171, "destruct": [171, 280], "0a0": [171, 222], "8e8a5e0": 171, "lecun": 171, "1998": 171, "unprun": 171, "basepruningmethod": 171, "adequ": [171, 173], "weight_orig": 171, "_orig": 171, "intact": [171, 175, 259], "weight_mask": 171, "_mask": 171, "forward_pre_hook": 171, "l1_unstructur": 171, "bias_orig": 171, "bias_mask": 171, "pruningcontain": 171, "compute_mask": 171, "ln_structur": 171, "undo": 171, "reassign": 171, "global_unstructur": 171, "apply_mask": 171, "unstructur": 171, "preprun": 171, "pruning_typ": 171, "pruning_tutori": [171, 180], "sink": 172, "5v": 172, "sd": 172, "card": [172, 178], "8gb": 172, "arm": [172, 235], "64bit": 172, "aarch64": 172, "arm64": [172, 222], "raspberrypi": 172, "raspios_arm64": 172, "rpi": 172, "sdcard": 172, "start_x": 172, "128m": 172, "gpu_mem": 172, "commment": 172, "camera_auto_detect": 172, "v4l2": 172, "reboot": 172, "video4linux2": 172, "video0": 172, "picamera": 172, "36fp": 172, "30fp": 172, "framer": 172, "cv2": 172, "cap": [172, 173, 183], "videocaptur": 172, "cap_prop_frame_width": 172, "cap_prop_frame_height": 172, "cap_prop_fp": 172, "bgr": 172, "ret": [172, 175], "input_tensor": [172, 181], "input_batch": 172, "qnnpack": [172, 194], "mobilenet_v3_larg": 172, "109": 172, "233": [172, 177], "885": [172, 235], "204": [172, 235, 247], "195": [172, 177], "132": 172, "prequant": 172, "20fp": 172, "cap_v4l2": 172, "last_log": 172, "frame_count": 172, "ui": [172, 183, 243, 260, 266], "htop": 172, "mug": 172, "allevi": 172, "set_num_thread": 172, "repetit": [173, 247], "maximis": 173, "clipppoloss": 173, "theta_k": 173, "pi_": 173, "lingua": 173, "franca": 173, "sub_batch_s": 173, "deepmind": [173, 181], "interchang": 173, "panel": [173, 183], "transmit": 173, "gymwrapp": 173, "loos": 173, "supplementari": 173, "stringent": 173, "n_step": [173, 175, 177], "mu_": 173, "d_ob": 173, "d_action": 173, "mu": [173, 186], "normalparamextractor": 173, "probabilisticactor": 173, "tanhnorm": 173, "discount": [173, 174, 175], "amort": [173, 175], "datacollector": 173, "multisyncdatacollector": 173, "refil": 173, "replaybuff": 173, "gae": 173, "value_target": 173, "videorecord": 173, "reinforcement_ppo": [173, 180], "tower": 174, "cart": 174, "pole": 174, "upright": 174, "classic_control": 174, "action_spac": 174, "observation_spac": 174, "decorrel": 174, "replaymemori": 174, "cyclic": 174, "formul": 174, "r_": 174, "t_0": 174, "r_t": 174, "uncertain": 174, "tempor": 174, "max_a": 174, "univers": [174, 186], "obei": 174, "bellman": 174, "huber": 174, "noisi": [174, 247, 261], "mathcal": 174, "le": [174, 179], "mathrm": 174, "select_act": [174, 175, 177], "eps_start": 174, "eps_end": 174, "eps_decai": 174, "plot_dur": 174, "underneath": [174, 189], "tau": 174, "optimize_model": 174, "s_t": 174, "a_t": 174, "num_episod": [174, 175], "target_net": 174, "reinforcement_q_learn": [174, 180], "calle": [175, 176, 227], "unblock": 175, "idl": [175, 183, 252], "callback": 175, "update_and_fetch_model": 175, "future_model": 175, "batch_update_s": 175, "batchupdateparameterserv": 175, "curr_update_s": 175, "get_model": 175, "ps_rref": 175, "local_valu": [175, 176], "setti": 175, "set_result": 175, "rpc_sync": [175, 176, 177, 227], "image_w": 175, "image_h": 175, "one_hot_indic": 175, "random_": 175, "get_worker_info": [175, 177], "543": 175, "num": 175, "affine1": [175, 177], "affine2": [175, 177], "action_scor": [175, 177], "govern": 175, "select_action_batch": 175, "run_episod": [175, 177], "agent_rref": [175, 177], "ep_reward": [175, 177], "num_step": 175, "start_step": 175, "curr_reward": 175, "prob": [175, 177, 184], "saved_log_prob": [175, 177], "rob": 175, "ob_rref": [175, 177], "running_reward": [175, 177], "ob_rank": [175, 177], "ob_info": [175, 177], "observer_nam": [175, 177], "future_act": 175, "pending_st": 175, "select_acion": 175, "ob_id": [175, 177], "log_prob": [175, 177], "stitch": [175, 176], "oberv": [175, 177], "wait_al": 175, "policy_loss": [175, 177], "passiv": [175, 177], "run_work": [175, 176, 177, 227], "n_episod": 175, "print_log": 175, "init_rpc": [175, 176, 177, 227], "agent_nam": [175, 177], "i_episod": [175, 177], "last_reward": [175, 177], "tlast": [175, 177], "taverag": [175, 177], "shutdown": [175, 176, 177, 227], "tik": [175, 227], "tok": [175, 227], "dist_autograd": [176, 177], "num_gpu": 176, "dropout2d": [176, 181, 237], "next_devic": 176, "caller": [176, 227], "call_method": 176, "remote_method": 176, "foo_inst": 176, "parameterserv": 176, "input_devic": 176, "intention": [176, 177, 227], "miscellan": 176, "get_dist_gradi": 176, "get_gradi": 176, "get_param_rref": 176, "cid": 176, "cpu_grad": 176, "k_cpu": 176, "v_cpu": 176, "paramt": 176, "param_rref": [176, 177], "run_parameter_serv": 176, "param_serv": 176, "global_lock": 176, "get_parameter_serv": 176, "parameter_serv": 176, "shut": 176, "offlin": 176, "trainernet": 176, "param_server_rref": 176, "get_global_param_rref": 176, "paramat": 176, "remote_param": [176, 177], "model_output": 176, "run_training_loop": 176, "nueral": 176, "context_id": [176, 177], "get_accuraci": 176, "correct_sum": 176, "trainer_": 176, "traffic": 176, "listen": 176, "subprocess": [176, 247, 262], "rpc_parameter_serv": 176, "solver": 177, "formatter_class": 177, "argumentdefaultshelpformatt": 177, "log_interv": 177, "99": [177, 181], "report_reward": 177, "_max_episode_step": 177, "lifetim": 177, "finfo": 177, "reward_threshold": 177, "finish_episod": 177, "min_reward": 177, "surpass": 177, "ob": 177, "ctrl": 177, "475": 177, "62": [177, 216, 234], "111": [177, 247, 279, 280], "131": 177, "130": [177, 235], "137": 177, "140": 177, "104": 177, "170": [177, 192], "126": 177, "180": [177, 189, 235, 247], "213": 177, "322": [177, 235], "165": 177, "272": [177, 235], "210": 177, "168": [177, 280], "184": 177, "208": [177, 186, 245], "270": [177, 186], "405": 177, "280": 177, "464": 177, "3163778435275": 177, "embeddingt": 177, "destin": [177, 227], "rnnmodel": 177, "ntoken": 177, "ninp": 177, "nhid": 177, "nlayer": 177, "emb_table_rref": 177, "decoder_rref": 177, "_remote_method": 177, "rremot": 177, "_parameter_rref": 177, "parameter_rref": [177, 227], "run_train": 177, "nindic": 177, "driss": 178, "guessou": 178, "multiheadattent": 178, "flashattent": 178, "flash": [178, 199], "andrej": 178, "karpathi": 178, "nanogpt": 178, "causalselfattent": 178, "mine": 178, "166": 178, "616": 178, "726": 178, "amaz": 178, "compiled_causal_attention_trac": 178, "concentr": 178, "6090": 178, "49m": 178, "3273": 178, "17m": 178, "commit": [178, 214, 223], "ae3a8d5": 178, "causal_upper_left": 178, "causal_lower_right": 178, "is_caus": [178, 193, 195], "causalbia": 178, "corner": 178, "attn_scor": 178, "sdpa_kernel": [178, 195], "scaled_dot_product_attention_tutori": [178, 180], "il": 179, "est": [179, 183], "peindr": 179, "tableau": 179, "paint": 179, "pourquoi": 179, "pa": 179, "essay": 179, "vin": 179, "delicieux": 179, "delici": 179, "wine": 179, "poet": 179, "romancier": 179, "she": 179, "novelist": 179, "vou": 179, "trop": 179, "maigr": 179, "skinni": 179, "condens": [179, 261], "unfold": 179, "phrase": 179, "tatoeba": 179, "eng": 179, "manyth": 179, "anki": 179, "fra": 179, "cold": [179, 250, 266, 269, 271], "froid": 179, "dozen": 179, "trim": [179, 261], "lang": 179, "word2index": 179, "index2word": 179, "word2count": 179, "apostroph": 179, "je": 179, "sui": 179, "noir": 179, "attn_appli": 179, "exhibit": 179, "coher": 179, "grammar": 179, "wander": 179, "freedom": 179, "plot_loss": 179, "judgement": 179, "matshow": 179, "iot": 179, "word2vec": 179, "glove": 179, "autoencod": 179, "seq2seq_translation_tutori": [179, 180], "776": 180, "spatial_transformer_tutori": [180, 181], "669": [180, 181], "torch_compile_tutori": [180, 187], "torch_export_tutori": [180, 188, 189], "sdpa": [180, 193, 195], "sphx_glr_intermediate_transformer_building_block": 180, "transformer_building_block": [180, 193], "na": 180, "sphx_glr_intermediate_mnist_train_na": 180, "tensorboard_profiler_tutori": [180, 183], "torchrec_intro_tutori": [180, 190], "ghassen": 181, "hamrouni": 181, "geometr": 181, "invari": [181, 207], "0x7fe98fb98670": 181, "urllib": 181, "build_open": 181, "addhead": 181, "mozilla": 181, "install_open": 181, "127mb": 181, "129mb": 181, "7mb": 181, "boil": 181, "affine_grid": 181, "grid_sampl": 181, "conv2_drop": [181, 237], "regressor": 181, "fc_loc": 181, "size_averag": 181, "ntest": 181, "convert_image_np": 181, "visualize_stn": 181, "transformed_input_tensor": 181, "in_grid": 181, "out_grid": 181, "axarr": 181, "5082": 181, "userwarn": 181, "align_corn": 181, "5015": 181, "317159": 181, "32000": 181, "796068": 181, "_reduct": 181, "2609": 181, "9278": 181, "470083": 181, "410970": 181, "1356": 181, "9594": 181, "276799": 181, "367420": 181, "1028": 181, "9676": 181, "225360": 181, "145283": 181, "0867": 181, "9730": 181, "080382": 181, "143120": 181, "0690": 181, "9781": 181, "273685": 181, "120360": 181, "0623": 181, "9826": 181, "073194": 181, "107552": 181, "1046": 181, "9685": 181, "408098": 181, "088317": 181, "0912": 181, "9746": 181, "109425": 181, "171145": 181, "0670": 181, "9793": 181, "179002": 181, "189358": 181, "0521": 181, "9844": 181, "152409": 181, "060972": 181, "0497": 181, "9847": 181, "316607": 181, "132019": 181, "057659": 181, "111035": 181, "0970": 181, "9717": 181, "131477": 181, "071789": 181, "0395": [181, 216], "9875": 181, "063256": 181, "059231": 181, "0602": 181, "9815": 181, "106208": 181, "045340": 181, "0895": 181, "9738": 181, "224050": 181, "235750": 181, "9809": 181, "076930": 181, "032871": 181, "0406": 181, "9883": 181, "162577": 181, "221333": 181, "0449": 181, "9863": 181, "119356": 181, "090628": 181, "0401": 181, "speech_recognition_pipeline_tutori": 182, "perfetto": 183, "warmup": [183, 193, 219, 225, 226, 234, 235, 252, 275, 276], "on_trace_readi": [183, 252], "tensorboard_trace_handl": 183, "record_shap": [183, 252], "profile_memori": [183, 252], "torch_tb_profil": 183, "safari": 183, "pytorch_profil": 183, "breakdown": 183, "dropdown": 183, "callstack": 183, "multiprocessor": 183, "occup": 183, "tooltip": 183, "toolbar": 183, "keyboard": 183, "mous": 183, "resnet18_4work": 183, "76m": 183, "132m": 183, "torchtbprofil": 183, "memory_demo_1_10": 183, "gpu0": 183, "children": [183, 252], "distributed_bert": 183, "docker": 183, "profiler_tutori": 183, "test_cifar10": 183, "vi": 183, "hub": 183, "kfd": 183, "sys_ptrac": 183, "seccomp": 183, "unconfin": 183, "shm": [183, 227], "8g": 183, "apt": [183, 186, 280], "libjpeg": 183, "whl": [183, 187, 190, 199], "rocm5": 183, "scp": 183, "testset": 184, "testload": 184, "plot_classes_pr": 184, "fashion_mnist_experiment_1": 184, "four_fashion_mnist_imag": 184, "refresh": [184, 190], "select_n_random": 184, "datapoint": 184, "perm": 184, "randperm": 184, "class_label": [184, 186], "label_img": 184, "thoroughli": 184, "images_to_prob": 184, "preds_tensor": 184, "el": 184, "add_subplot": 184, "add_figur": 184, "global_step": [184, 260], "scroll": 184, "test_siz": 184, "class_prob": 184, "class_probs_batch": 184, "test_prob": 184, "test_label": 184, "add_pr_curve_tensorboard": 184, "class_index": 184, "tensorboard_truth": 184, "tensorboard_prob": 184, "add_pr_curv": 184, "poke": 184, "tacotron2_pipeline_tutori": 185, "wsi": 186, "tissu": 186, "surgeri": 186, "biopsi": 186, "scanner": 186, "pathologist": 186, "diseas": 186, "cancer": 186, "microscop": 186, "tumor": 186, "growth": [186, 209], "patient": 186, "000x100": 186, "25x0": 186, "micron": 186, "pyramid": 186, "magnif": 186, "sketch": 186, "histoencod": 186, "jopo666": 186, "openjpeg": 186, "openslid": 186, "pixman": 186, "qq": 186, "libopenjp2": 186, "libpixman": 186, "echo": 186, "brew": 186, "__future__": [186, 251, 259], "hashandl": 186, "nopython": 186, "shutil": 186, "zipfil": 186, "mpl": 186, "cm": 186, "sklearn": 186, "accuracy_scor": 186, "confusion_matrix": 186, "patch_predictor": 186, "iopatchpredictorconfig": 186, "misc": 186, "download_data": 186, "grab_files_from_dir": 186, "overlay_prediction_mask": 186, "wsicor": 186, "wsiread": 186, "rcparam": 186, "dpi": 186, "facecolor": 186, "on_gpu": 186, "suppress": 186, "overli": 186, "suppress_console_output": 186, "redirect_stderr": 186, "stringio": 186, "abnorm": [186, 243], "global_save_dir": 186, "rmdir": 186, "dir_path": 186, "is_dir": 186, "rmtree": 186, "kather": 186, "100k": 186, "wsi_path": 186, "sample_wsi": 186, "sv": 186, "patches_path": 186, "kather100k": 186, "weights_path": 186, "dc": 186, "warwick": 186, "uk": 186, "tcga": 186, "3l": 186, "aa1b": 186, "01z": 186, "dx1": 186, "8923a151": 186, "a690": 186, "40b7": 186, "9e5a": 186, "fcbedfc2394f": 186, "extractal": 186, "pc": 186, "label_list": 186, "patch_list": 186, "dataset_path": 186, "image_ext": 186, "tif": 186, "label_dict": 186, "glass": 186, "mucosa": 186, "deb": 186, "debri": 186, "tum": 186, "colorect": 186, "adenocarcinoma": 186, "epithelium": 186, "adi": 186, "adipos": 186, "muc": 186, "mucu": 186, "stroma": 186, "lym": 186, "lymphocyt": 186, "dataset_class_path": 186, "patch_list_single_class": 186, "file_typ": 186, "299": 186, "211": [186, 235, 252], "176": 186, "178": 186, "209": 186, "232": [186, 247], "modelabc": 186, "tia": 186, "toolbox": 186, "readthedoc": 186, "_autosummari": 186, "models_abc": 186, "preproc_func": 186, "predictor": [186, 277], "pretrained_weight": 186, "cnnmodel": 186, "fromarrai": 186, "conf": [186, 237], "df_cm": 186, "993000": 186, "000000": 186, "00000": 186, "988636": 186, "011364": 186, "991304": 186, "008696": 186, "996503": 186, "003497": 186, "004808": 186, "990385": 186, "988764": 186, "011236": 186, "996296": 186, "003704": 186, "004785": 186, "985646": 186, "004310": 186, "99569": 186, "input_resolut": 186, "patch_input_shap": 186, "stride_shap": 186, "wsi_ioconfig": 186, "mpp": 186, "return_prob": 186, "ioconfig": 186, "greatest": [186, 246], "merge_predict": 186, "wsi_output": 186, "wsi_predict": 186, "overlai": 186, "overlay_patch_predict": 186, "overview_resolut": 186, "overview_unit": 186, "wsi_overview": 186, "slide_thumbnail": 186, "label_color_dict": 186, "get_cmap": 186, "set1": 186, "pred_map": 186, "label_info": 186, "return_ax": 186, "histologi": 186, "pohjonen": 186, "joona": 186, "helsinki": 186, "umap": 186, "semantic_segmentor": 186, "deepfeatureextractor": 186, "iosegmentorconfig": 186, "histoencwrapp": 186, "histoenc": 186, "feat_extract": 186, "extract_featur": 186, "num_block": 186, "avg_pool": 186, "infer_batch": 186, "batch_data": 186, "img_patches_devic": 186, "inference_mod": [186, 216], "create_encod": 186, "prostate_medium": 186, "662": 186, "446": 186, "605": 186, "169": [186, 235], "155": 186, "output_resolut": 186, "patch_output_shap": 186, "auto_generate_mask": 186, "otsu": 186, "num_loader_work": 186, "num_postproc_work": 186, "wsi_featur": 186, "umap_reduc": 186, "n_neighbor": 186, "n_compon": 186, "manhattan": 186, "random_st": 186, "fit_transform": 186, "npy": 186, "feat": 186, "5mpp": 186, "4mpp": 186, "histolog": 186, "william": [187, 189, 275], "devel": 187, "elsewher": 187, "torchinductor": [187, 200, 201, 210, 262, 271], "torchtriton": 187, "cu117": 187, "opt_mod": 187, "mod": [187, 189, 219, 277], "complex_funct": 187, "complex_conjug": 187, "outer_funct": 187, "_orig_": 187, "dashboard": [187, 260], "struggl": 187, "fn1": 187, "fn2": 187, "f2": 187, "disallow": 187, "zhengxu": 189, "angela": [189, 276], "pian": 189, "pawakapan": 189, "synonym": 189, "dynamic_shap": [189, 277], "graph_signatur": 189, "range_constraint": 189, "stronger": [189, 277], "safeti": [189, 277], "cond": 189, "predic": 189, "true_fn": 189, "false_fn": 189, "while_loop": 189, "associative_scan": 189, "adher": [189, 218], "x0": [189, 192, 210, 234], "x1": [189, 192, 210, 234], "s0": 189, "s1": 189, "x2": [189, 234], "x3": [189, 234], "s3": 189, "s5": 189, "proof": 189, "_log": [189, 234, 278], "set_log": [189, 234], "spit": 189, "create_symbol": 189, "int_oo": 189, "2841": 189, "runtime_assert": 189, "ncreate_symbol": 189, "nruntime_assert": 189, "dynamic_shapes_tutori": 189, "_subclass": [189, 277], "fake_impl": 189, "845": [189, 279], "infer_s": [189, 261], "torchdynamo_extended_debug_guard_ad": 189, "_meta_registr": 189, "2127": 189, "meta_mm": 189, "aliv": 189, "attract": 189, "friction": 189, "believ": [189, 207], "stanc": [189, 275], "constraintviol": 189, "unrel": [189, 275], "univari": 189, "diverg": [189, 206, 208, 247], "unbind": 189, "unback": 189, "nomenclatur": 189, "absenc": [189, 230, 245], "u0": 189, "unhint": 189, "is_compil": 189, "invas": 189, "bypass": [189, 210], "offend": 189, "smarter": 189, "prevail": 189, "prohibit": 189, "_check_is_s": 189, "guard_size_oblivi": 189, "starter": 189, "guardondatadependentsymnod": 189, "_schema": 189, "is_mut": 189, "export_for_train": 189, "run_decomposit": 189, "mutabl": 189, "conv1d": [189, 223, 262], "cond_pred": 189, "tensorrt": [189, 194], "pt2_path": 189, "aoti_compile_and_packag": [189, 276], "compiler_aot_inductor": 189, "aoti_compil": 189, "aoti_load_packag": [189, 276], "cu121": [190, 199], "fbgemm_gpu": 190, "torchmetr": 190, "cardin": 190, "relationship": 190, "hash": 190, "conjunct": [190, 197, 198, 262], "ctr": 190, "dlrm": [190, 262], "embedding_collect": 190, "embedding_bag_collect": 190, "vast": [190, 209], "collis": [190, 261], "80g": 190, "embeddingcollect": 190, "jaggedtensor": 190, "keyedjaggedtensor": 190, "keyedtensor": 190, "product_t": 190, "user_t": 190, "id_list_featur": 190, "id_score_list_featur": 190, "id_list_feature_offset": 190, "q1": 190, "product_jt": 190, "user_jt": 190, "q2": 190, "reread": 190, "to_dict": 190, "congrat": 190, "pat": 190, "grasp": 190, "scarc": [190, 228], "hbm": 190, "gb": [190, 193], "shardedembeddingbagcollect": 190, "incredibli": 190, "ton": 190, "everytim": 190, "await": 190, "input_dist": 190, "tbe": 190, "output_dist": 190, "twpooledembeddingshard": 190, "kjt": 190, "canon": 190, "dmp": 190, "hyperoptim": 190, "combinedoptim": 190, "keyedoptim": 190, "in_backward_optimizer_filt": 190, "fused_optim": 190, "fused_param": 190, "apply_optimizer_in_backward": 190, "ampl": 190, "loadabl": 190, "criteo": 190, "1tb": 190, "penn": 192, "fudan": 192, "databas": [192, 271, 272], "pedestrian": 192, "keypoint": 192, "tv_tensor": 192, "boundingbox": 192, "y0": 192, "image_id": 192, "iscrowd": 192, "pycocotool": 192, "gautamchitni": 192, "git": [192, 199], "cocoapi": 192, "cocodataset": 192, "pythonapi": 192, "get_height_and_width": 192, "ci": 192, "upenn": 192, "edu": 192, "jshi": 192, "ped_html": 192, "pennfudanp": 192, "pedmask": 192, "fudanped00001_mask": 192, "fudanped00002_mask": 192, "fudanped00003_mask": 192, "fudanped00004_mask": 192, "pngimag": 192, "fudanped00001": 192, "fudanped00002": 192, "fudanped00003": 192, "fudanped00004": 192, "tvtensor": 192, "zoo": 192, "fasterrcnn": 192, "rpn": 192, "anchor": 192, "featmap_nam": 192, "rcnn": 192, "train2017": 192, "mikayla": [193, 251, 259], "gawarecki": [193, 251, 259], "jag": [193, 211], "famili": [193, 235, 280], "xformer": 193, "torchtun": 193, "rag": [193, 211], "ux": [193, 211, 213], "key_padding_mask": 193, "qk": 193, "premis": 193, "rmsnorm": 193, "sinusoid": 193, "rotari": [193, 195], "alibi": 193, "threefold": 193, "query_padding_mask": 193, "mha": [193, 207], "nestedtensor": [193, 211, 214, 217], "cleanli": [193, 225, 226, 234, 273, 278], "zipf": [193, 211], "attn_mask": 193, "padded_tim": 193, "03454": 193, "padded_peak_memori": 193, "nested_tim": 193, "00612": 193, "nested_peak_memori": 193, "padded_bw_tim": 193, "09337": 193, "padded_bw_peak_mem": 193, "nested_bw_tim": 193, "01452": 193, "nested_bw_peak_mem": 193, "144": [193, 235], "out_proj": 193, "000244140625": 193, "packed_proj": 193, "001556396484375": 193, "001953125": 193, "causal": 193, "trust": 193, "ragged": 193, "alibi_mod": 193, "block_mask": 193, "create_nested_block_mask": 193, "e_q": 193, "e_tot": 193, "05x": 193, "swish": 193, "08x": [193, 235], "kv": [193, 195], "lucidrain": 193, "navit": 193, "visiontransform": 193, "readm": 194, "prepare_fx": 194, "convert_fx": 194, "default_weight_observ": 194, "get_default_qconfig_map": 194, "minmaxobserv": 194, "backend_config": 194, "backendpatternconfig": 194, "dtypewithconstraint": 194, "observationtyp": 194, "quantize_fx": 194, "fp32_linear": 194, "quant1": 194, "dequant1": 194, "quant2": 194, "dequant2": 194, "fp32_conv_relu": 194, "quint8_with_constraint": 194, "quant_min_lower_bound": 194, "quant_max_upper_bound": 194, "scale_min_lower_bound": 194, "weighted_int8_dtype_config": 194, "input_dtyp": [194, 197], "weight_dtyp": 194, "qint8": 194, "bias_dtyp": 194, "fuse_conv2d_relu": 194, "convrelu2d": 194, "linear_config": 194, "set_pattern": 194, "set_observation_typ": 194, "output_use_different_observer_as_input": 194, "add_dtype_config": 194, "set_root_modul": 194, "set_qat_modul": 194, "set_reference_quantized_modul": 194, "conv_relu_config": 194, "set_fused_modul": 194, "set_fuser_method": 194, "fused_conv_relu_config": 194, "my_backend": 194, "set_backend_pattern_config": 194, "quant_max": 194, "activation_observ": 194, "with_arg": 194, "quant_min": 194, "qconfig_map": 194, "set_object_typ": 194, "use_bn": 194, "quantizedlinear": 194, "012136868201196194": 194, "zero_point": 194, "qscheme": 194, "per_tensor_affin": 194, "quantizedconvrelu2d": 194, "0029353597201406956": 194, "linear_input_scale_0": 194, "linear_input_zero_point_0": 194, "quantize_per_tensor": [194, 237], "dequantize_2": 194, "015307803638279438": 194, "track_running_stat": 194, "dequantize_1": 194, "get_fbgemm_backend_config": 194, "get_qnnpack_backend_config": 194, "get_native_backend_config": 194, "union": 194, "md": 194, "rfc": [194, 207, 210, 215], "0019": 194, "chien": [195, 228, 229], "chin": [195, 228, 229], "llama3": 195, "freq_ci": 195, "context_parallel": 195, "buffer_seq_dim": 195, "miscalcul": 195, "set_rotate_method": 195, "sdpbackend": 195, "sdpa_exampl": 195, "nhead": 195, "qkv_len": 195, "8192": [195, 247], "flash_attent": 195, "cudnn_attent": 195, "qkv": 195, "cp_sdpa_exampl": 195, "_attent": 195, "context_parallel_unshard": 195, "context_parallel_sdpa_exampl": 195, "device_typ": [195, 270], "mesh_shap": 195, "mesh_dim_nam": [195, 231], "cp_qkv": 195, "cp_out": 195, "alltoal": [195, 262], "junji": 197, "impedi": 197, "starvat": 197, "deadlock": 197, "indefinit": 197, "diagnost": 197, "flight_record": 197, "torch_nccl_trace_buffer_s": 197, "torch_nccl_dump_on_timeout": 197, "torch_nccl_debug_info_temp_fil": 197, "nccl_trace_rank_": 197, "torch_nccl_trace_cpp_stack": 197, "torch_symbolize_mod": 197, "torch_nccl_enable_tim": 197, "dladdr": 197, "addr2lin": 197, "debuginfowrit": 197, "registerwrit": 197, "_distributed_c10d": [197, 234], "_dump_nccl_trac": 197, "includecollect": 197, "includestacktrac": 197, "onlyact": 197, "pg_config": 197, "default_pg": 197, "pg_statu": 197, "last_enqueued_collect": 197, "last_started_collect": 197, "last_completed_collect": 197, "test_short_pickl": 197, "test_c10d_nccl": 197, "3647": 197, "spawn_main": 197, "record_id": 197, "pg_id": 197, "collective_seq_id": 197, "p2p_seq_id": 197, "op_id": 197, "profiling_nam": 197, "time_created_n": 197, "1724779239936775119": 197, "time_discovered_started_n": 197, "time_discovered_completed_n": 197, "1724779239975811724": 197, "retir": 197, "timeout_m": 197, "600000": 197, "is_p2p": 197, "fr_trace": 197, "use_distribut": 197, "torchfrtrac": 197, "culprit": 197, "recod": 197, "trace_": 197, "trace_0": 197, "trace_1": 197, "bounc": 198, "gd": 198, "cufil": 198, "4kb": 198, "storage_align": 198, "gdsfile": 198, "skip_data": 198, "faketensormod": 198, "gds_register_buff": 198, "cufilebufregist": 198, "save_storag": 198, "cufilewrit": 198, "load_storag": 198, "cufileread": 198, "gpu_direct_storag": [198, 217], "hdcharl": 199, "pg509": 199, "330": 199, "myenv": 199, "facebookresearch": 199, "vit_h": 199, "dl": [199, 223, 237], "fbaipublicfil": 199, "segment_anyth": 199, "sam_vit_h_4b8939": 199, "sam_checkpoint_base_path": 199, "image_encod": 199, "instant": 199, "protect": 199, "bf16": [199, 210, 223, 235], "43m": 199, "17gb": 199, "7x": 199, "186": [199, 235], "16m": 199, "95m": 199, "24gb": 199, "autotun": [199, 214, 262, 271, 272, 274], "int4": 199, "int8_dynamic_activation_int8_weight": 199, "int8_weight_onli": 199, "int4_weight_onli": 199, "apply_dynamic_qu": 199, "apply_weight_only_int8_qu": 199, "int8_dynamic_activ": 199, "04m": 199, "58gb": 199, "int32": [199, 234], "force_fuse_int_mm_with_mul": 199, "37gb": 199, "unquant": 199, "epilogu": [199, 210], "enlarg": 199, "39gb": 199, "10x": [199, 223], "appl": 199, "677": 199, "28m": 199, "729": 199, "gpu_quantization_torchao_tutori": [199, 217], "chunyuan": [200, 210], "bao": [200, 276], "cpp_wrapper": 200, "opt_fn": 200, "assert_size_strid": [200, 234], "empty_strid": [200, 222, 234, 252], "cpp_fused_add_lift_fresh_0": 200, "c_void_p": [200, 234], "constant0": 200, "inductor_entry_cpp": 200, "19l": 200, "cppwrappercodecach": 200, "cpp_wrapper_src": 200, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 200, "_wrap_func": 200, "args_tensor": 200, "constants_tensor": 200, "_deviceguard": [200, 234], "lift_fresh": 200, "stream0": [200, 234], "get_cuda_stream": 200, "triton_poi_fused_add_lift_fresh_0": 200, "run_intermediate_hook": [200, 234], "cudaguard": 200, "device_guard": 200, "loadkernel": 200, "torchinductor_us": 200, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 200, "cubin": [200, 272, 276], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 200, "cudeviceptr": 200, "var_0": 200, "reinterpret_cast": 200, "var_1": 200, "var_2": 200, "var_3": 200, "kernel_args_var_0": 200, "cudastream_t": 200, "getcurrentcudastream": 200, "launchkernel": 200, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 200, "zhaoqiong": 201, "zheng": 201, "xu": 201, "han": 201, "msvc": 201, "desktop": 201, "checkmark": 201, "cmd": 201, "vc": 201, "auxiliari": [201, 223], "vcvars64": 201, "opt_foo1": 201, "9074e": 201, "3994e": 201, "3894e": 201, "2630e": 201, "3060e": 201, "1833e": 201, "4016e": 201, "1905e": 201, "0637e": 201, "3648e": 201, "3728e": 201, "2863e": 201, "6888e": 201, "5442e": 201, "6790e": 201, "2025e": 201, "2647e": 201, "2684e": 201, "2483e": 201, "2845e": 201, "7747e": 201, "2028e": 201, "1431e": 201, "7196e": 201, "5304e": 201, "1945e": 201, "6654e": 201, "7376e": 201, "3644e": 201, "3600e": 201, "0157e": 201, "7200e": 201, "0146e": 201, "8175e": 201, "4057e": 201, "8119e": 201, "2853e": 201, "2773e": 201, "5082e": 201, "4615e": 201, "4140e": 201, "2130e": 201, "0762e": 201, "3914e": 201, "1122e": 201, "6895e": 201, "8852e": 201, "3310e": 201, "4101e": 201, "8318e": 201, "2355e": 201, "9290e": 201, "3707e": 201, "3754e": 201, "3768e": 201, "8970e": 201, "1171e": 201, "9944e": 201, "2553e": 201, "3394e": 201, "3428e": 201, "8400e": 201, "1756e": 201, "0654e": 201, "7973e": 201, "4019e": 201, "1886e": 201, "9194e": 201, "3632e": 201, "1811e": 201, "1615e": 201, "6622e": 201, "2089e": 201, "2011e": 201, "0659e": 201, "0892e": 201, "1932e": 201, "3888e": 201, "3898e": 201, "3218e": 201, "4139e": 201, "4000e": 201, "1192e": 201, "0175e": 201, "6432e": 201, "0498e": 201, "4115e": 201, "3212e": 201, "0964e": 201, "0127e": 201, "7244e": 201, "2799e": 201, "3595e": 201, "0907e": 201, "7191e": 201, "4062e": 201, "3672e": 201, "8502e": 201, "5216e": 201, "6046e": 201, "icx": 201, "win64": 201, "inductor_window": 202, "mobile_interpret": 205, "1369": 206, "weed": 206, "state_sum": 206, "addcmul_": 206, "addcdiv_": 206, "clr": 206, "_make_spars": 206, "grad_indic": 206, "sparse_coo_tensor": [206, 209], "coalesc": [206, 246], "_indic": 206, "grad_valu": 206, "_valu": 206, "sparse_mask": [206, 209], "std_valu": 206, "sqrt_": 206, "state_sum2": 206, "masked_grad": 206, "get_data": [206, 208], "std2": 206, "masked_tensor": [206, 208, 209], "to_spars": [206, 209], "param2": [206, 218], "glanc": [206, 259], "dodg": 206, "make_spars": 206, "brittl": 206, "argu": 206, "densif": 206, "csc": [206, 209], "bsr": [206, 209], "bsc": 206, "conflat": 206, "disentangl": 206, "purposefulli": 206, "relianc": 206, "unreli": [206, 208], "maskedarrai": [206, 214], "maskedtensor_adagrad": [206, 217], "maskedtensor_overview": [207, 208, 209, 217], "Their": [207, 209], "unspecifi": [207, 208, 209, 214], "intersect": 207, "logical_or": 207, "to_tensor": [207, 208], "mt0": 207, "get_mask": [207, 208], "mt1": 207, "revisit": 207, "ma": 207, "masked_arrai": 207, "mask0": 207, "mask1": 207, "necessit": 207, "maskedtensor_advanced_semant": [207, 217], "as_masked_tensor": 208, "as_tensor": 208, "afterthought": 208, "born": 208, "recur": 208, "inabl": 208, "10729": 208, "troubl": 208, "52248": 208, "frustrat": 208, "4132": 208, "67180": 208, "longstand": 208, "unsaf": 208, "61474": 208, "nanmax": 208, "nanmin": 208, "lend": 208, "substructur": 209, "sparse_coo": 209, "sparse_csr": 209, "ndim": 209, "nse": 209, "int64": 209, "sparse_tensor_data": 209, "sparse_tensor_mask": 209, "dense_masked_tensor": 209, "to_sparse_coo": 209, "to_sparse_csr": 209, "nuanc": 209, "crow_indic": 209, "col_indic": 209, "nnz": 209, "to_dens": 209, "is_spars": 209, "is_sparse_coo": 209, "is_sparse_csr": 209, "mt": 209, "mt2": 209, "surfac": 209, "synergi": 209, "invest": 209, "maskedtensor_spars": [209, 217], "lesli": 210, "fang": 210, "onednn": [210, 223, 235, 236, 243], "torchinductor_max_autotune_gemm_backend": 210, "upfront": [210, 251], "torchinductor_freez": 210, "log_autotuning_result": 210, "amp_en": 210, "outperform": 210, "linear_unari": 210, "64x16": 210, "32x16": 210, "cpp_packed_gemm_0": 210, "2142": 210, "_linear_pointwis": 210, "2441": 210, "mkldnn": [210, 223, 235], "anymor": [210, 260], "cpp_fused__to_copy_relu_1": 210, "async_compil": [210, 234], "cpp_pybind": [210, 234], "kernel_micro_gemm_amx_kernel_32_2": 210, "amxstat": 210, "amx_stat": 210, "lda": 210, "ldb": 210, "ldc": 210, "uint8_t": 210, "tilecfg_row": 210, "kernel_micro_gemm": 210, "constexpr": [210, 234], "num_thread": [210, 247], "64l": 210, "omp": [210, 280], "tid": 210, "omp_get_thread_num": 210, "mc_block_id": 210, "num_mc_blocks_per_thread": 210, "n_block_start": 210, "n_block_end": 210, "nc_block": 210, "kc": 210, "k_block_start": 210, "k_block_end": 210, "kc_block": 210, "nci": 210, "nc_block_end": 210, "m_end": 210, "m_start": 210, "16l": 210, "div_floor_integ": 210, "n_end": 210, "n_start": 210, "loadu": 210, "local_acc_buf": 210, "nr": 210, "tmp4": [210, 234], "tmp5": [210, 234], "tmp6": [210, 234], "tmp7": [210, 234], "tmp8": [210, 234], "32l": 210, "invalu": 211, "nt": 211, "poss": 211, "irregularli": 211, "legal": 211, "semnat": 211, "law": 211, "daniil": 213, "lyakhov": 213, "aamir": 213, "nazir": 213, "suslov": 213, "yamini": 213, "nimmagadda": 213, "kozlov": 213, "openvinoquant": 213, "quantize_pt2": 213, "prepare_pt2": 213, "convert_pt2": 213, "traced_b": 213, "disable_patch": 213, "exported_model": 213, "asymmetr": 213, "prelu": 213, "quantizationpreset": 213, "model_typ": 213, "modeltyp": 213, "ignored_scop": 213, "layer_1": 213, "layer_2": 213, "layer_3": 213, "ignoredscop": 213, "regex": 213, "layer_": 213, "subgraph": 213, "target_devic": 213, "cpu_spr": 213, "targetdevic": 213, "prepared_model": 213, "fold_quant": 213, "optimized_model": 213, "smoothquant": 213, "biascorrect": 213, "calibration_load": 213, "transform_fn": 213, "data_item": 213, "calibration_dataset": 213, "smooth_quant": 213, "fast_bias_correct": 213, "pypi": [214, 237], "optimizi": 214, "nnapi": 214, "autovector": [214, 221], "maskedtensor": [214, 217], "coo": 214, "csr": 214, "flight": 214, "flightrecord": 214, "autoload": 214, "gpudirect": [214, 217], "yuanhao": 215, "ji": 215, "effortless": 215, "gaudi": 215, "hpu": 215, "huawei": 215, "torch_device_backend_autoload": 215, "torch_foo": 215, "_autoload": 215, "entry_point": 215, "habana_framework": 215, "__autoload": 215, "device_backend": 215, "is_load": 215, "entrypoint": 215, "_force_cutlass": 216, "2560": 216, "10240": 216, "dense_output": 216, "dense_t": 216, "stmt": [216, 225, 234, 247], "blocked_autorang": [216, 225, 234, 247], "median": [216, 247, 261], "1e3": 216, "sparse_output": 216, "sparse_t": 216, "80gb": 216, "870m": 216, "630m": 216, "382x": 216, "weightnormsparsifi": 216, "preprocess_validation_funct": 216, "384": [216, 277], "only_second": 216, "return_overflowing_token": 216, "return_offsets_map": 216, "sample_map": 216, "overflow_to_sample_map": 216, "example_id": 216, "sample_idx": 216, "sequence_id": 216, "offset_map": 216, "preprocess_train_funct": 216, "start_posit": 216, "end_posit": 216, "start_char": 216, "answer_start": 216, "end_char": 216, "context_start": 216, "context_end": 216, "compute_metr": 216, "start_logit": 216, "end_logit": 216, "n_best": 216, "max_answer_length": 216, "example_to_featur": 216, "defaultdict": 216, "predicted_answ": 216, "feature_index": 216, "start_index": 216, "argsort": 216, "end_index": 216, "logit_scor": 216, "best_answ": 216, "prediction_text": 216, "theoretical_answ": 216, "measure_execution_tim": 216, "dataset_for_model": 216, "remove_column": 216, "set_format": 216, "batch_size_to_time_sec": 216, "column_nam": 216, "p50": 216, "automodelforquestionansw": 216, "squad_dataset": 216, "tokenized_squad_dataset": 216, "data_col": 216, "datacollatorwithpad": 216, "hyperparam": 216, "training_arg": 216, "trainingargu": 216, "num_train_epoch": 216, "lr_scheduler_typ": 216, "per_device_train_batch_s": 216, "per_device_eval_batch_s": 216, "eval_dataset": 216, "fp16_baselin": 216, "fp16_time": 216, "cuda_fp16": 216, "exact_match": 216, "53358561967833": 216, "9280493093186": 216, "927572380751371": 216, "607915310189128": 216, "18846387788653": 216, "91255673766136": 216, "sparsity_level": 216, "elemen": 216, "sparse_block_shap": 216, "zeros_per_block": 216, "sparse_config": 216, "tensor_fqn": 216, "fqn": [216, 228, 229], "named_modul": 216, "paramter": 216, "bertoutput": 216, "parametrizedlinear": 216, "fakespars": 216, "elementwise_affin": 216, "59602649006622": 216, "51610004515979": 216, "set_printopt": [216, 247], "edgeitem": 216, "0237": 216, "0130": 216, "0462": 216, "0272": 216, "0436": 216, "0492": 216, "0844": 216, "0340": 216, "0302": 216, "0350": 216, "0303": 216, "0175": 216, "0529": 216, "0327": 216, "0213": 216, "0258": 216, "0239": 216, "0380": 216, "0562": 216, "0432": 216, "0598": 216, "0262": 216, "0227": 216, "0244": 216, "0921": 216, "0784": 216, "0761": 216, "0225": 216, "0684": 216, "0344": 216, "metrics_spars": 216, "sparse_perf": 216, "43897824030275": 216, "48718950090766": 216, "621004460379481": 216, "368514601141214": 216, "702805917710066": 216, "244": [216, 243], "19364519417286": 216, "87x": 216, "torchao": 217, "torchscript_freez": [217, 219], "vmap_recip": [217, 221], "uniform": [218, 280], "orthogonal_": 218, "skip_init": 218, "param1": 218, "kaiming_uniform_": 218, "register_buff": 218, "some_buff": 218, "intial": 218, "0107": 219, "0048": 219, "42368": 221, "unsuccessfulli": 221, "rummag": 221, "shenanigin": 221, "8304": 221, "23475": 221, "performantli": 221, "7786": 221, "batch_of_sampl": 221, "grad_sampl": 221, "ivan": 222, "kobzarev": 222, "use_vulkan": 222, "vulkan_wrapp": 222, "use_vulkan_wrapp": 222, "libvulkan": 222, "vulkansdk": 222, "lunarg": 222, "vulkan_sdk": 222, "vulkan_sdk_root": 222, "install_vulkan": 222, "pytorch_root": 222, "use_vulkan_shaderc_runtim": 222, "macosx_deployment_target": 222, "41237a4": 222, "android_abi": 222, "v8a": 222, "build_android": 222, "pytorch_android": 222, "aar": 222, "build_pytorch_android": 222, "script_model": 222, "mobilenet2": 222, "32bit": 222, "mobile_optim": 222, "optimize_for_mobil": 222, "script_model_vulkan": 222, "optimization_blocklist": 222, "mobileoptimizertyp": 222, "vulkan_automatic_gpu_transf": 222, "is_vulkan_avail": 222, "tensor_vulkan": 222, "tensor_output_vulkan": 222, "tensor_output": 222, "_adaptive_avg_pool2d": 222, "_cat": 222, "avg_pool2d": 222, "hardtanh_": 222, "relu_": 222, "transpose_": 222, "upsample_nearest2d": 222, "floatbuff": 222, "allocatefloatbuff": 222, "fromblob": 222, "mmodul": 222, "test_app": 222, "testapp": 222, "mainact": 222, "l133": 222, "apploc": 222, "asset": 222, "gradl": 222, "installmbvulkanlocalbasedebug": 222, "mbq": 222, "swiftshad": 222, "googlesourc": 222, "tmul": 223, "gen": 223, "processor": [223, 236, 262, 266, 280], "avx": [223, 236], "vnni": [223, 236], "024": 223, "conv3d": [223, 262], "conv_transpose1d": 223, "conv_transpose2d": 223, "conv_transpose3d": 223, "baddbmm": 223, "addbmm": 223, "onednn_verbos": 223, "verbose_on": 223, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 223, "openmp": [223, 243], "nthr": 223, "isa": 223, "prim_templ": 223, "prop_kind": 223, "memory_descriptor": 223, "problem_desc": 223, "exec_tim": 223, "exec": 223, "reorder": [223, 235, 243, 262], "undef": 223, "src_f32": 223, "f0": 223, "dst_f32": 223, "scratchpad": 223, "2561": 223, "avx512_core_amx_bf16": 223, "forward_train": 223, "src_bf16": 223, "acdb": 223, "wei_bf16": 223, "abcd16b16a2b": 223, "bia_f32": 223, "dst_bf16": 223, "alg": 223, "convolution_direct": 223, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 223, "628906": 223, "brg": 223, "avx512_core_amx_int8": 223, "src_s8": 223, "wei_s8": 223, "ba16a64b4a": 223, "dst_s8": 223, "1x30522": 223, "30522x768": 223, "1x768": 223, "66382": 223, "lazo": [225, 226, 234, 273, 278], "get_device_cap": [225, 234], "benchmark_torch_function_in_microsecond": [225, 234], "eager_runtim": [225, 234], "compiled_runtim": [225, 234], "747": 225, "2437149845064u": 225, "392": 225, "07384741178u": 225, "linearlr": 226, "compiling_optimizer_lr_schedul": [226, 269], "set_device_map": 227, "worker0": 227, "worker1": 227, "payload": [227, 259], "infiniband": 227, "cma": 227, "comm_mod": [227, 230], "pend": [227, 260], "current_stream": 227, "tensorpiperpcbackendopt": 227, "num_worker_thread": 227, "rpc_backend_opt": 227, "34x": 227, "3145179748535156": 227, "06867480278015137": 227, "luca": [228, 229], "pasqualin": [228, 229], "iri": [228, 229, 231], "rodrigo": [228, 229], "kumpera": [228, 229], "async_sav": 228, "checkpoint_size_per_rank": 228, "number_of_rank": 228, "pageabl": 228, "get_state_dict": [228, 229], "set_state_dict": [228, 229], "appstat": [228, 229], "protocol": [228, 229], "load_stat_dict": [228, 229], "sharded_state_dict": [228, 229], "optim_state_dict": [228, 229], "run_fsdp_checkpoint_save_exampl": [228, 229], "checkpoint_futur": 228, "checkpoint_id": [228, 229], "_step": 228, "attack": 228, "storagewrit": 228, "cached_state_dict": 228, "storage_writ": 228, "adddition": 229, "run_fsdp_checkpoint_load_exampl": 229, "run_checkpoint_load_exampl": 229, "format_util": 229, "torch_to_dcp": 229, "dcp_to_torch": 229, "dcp_to_torch_sav": 229, "torch_save_to_dcp": 229, "torch_save_checkpoint_dir": 229, "torch_save_checkpoint": 229, "_new": 229, "anshul": 230, "sinha": 230, "distributedtensor": 230, "interoper": 230, "mlpmodul": 230, "generate_comm_debug_tracing_t": 230, "noise_level": 230, "log_comm_debug_tracing_table_to_fil": 230, "file_nam": [230, 277], "transformer_operation_log": 230, "generate_json_dump": 230, "c10d_function": 230, "comm_mode_features_exampl": 230, "effortlessli": 231, "homogen": 231, "num_node_devic": 231, "shard_rank_list": 231, "shard_group": 231, "current_shard_group": 231, "current_replicate_group": 231, "shard_factor": 231, "replicate_group_rank": 231, "replicate_group": 231, "2d_setup": 231, "thru": 231, "get_group": 231, "mesh_dim": 231, "2d_setup_with_device_mesh": 231, "meshshap": 231, "mesh_3d": 231, "hsdp_mesh": 231, "tp_group": 231, "quasi": 232, "hyperbol": 232, "qhm": 232, "qhm_updat": 232, "dp_list": 232, "momentum_buffer_list": 232, "nu": 232, "weight_decay_typ": 232, "d_p": 232, "momentum_buff": 232, "polymorph": 232, "functionalqhm": 232, "params_with_grad": 232, "preserve_format": 232, "functional_optim_map": 232, "remote_params_list": 232, "dist_optim": 232, "_foreach": 234, "horizton": 234, "model_copi": 234, "output_copi": 234, "_higher_order_op": 234, "exp_avg": [234, 281], "exp_avg_sq": [234, 281], "update_exp_avg_sq": 234, "beta2": 234, "addcmul": 234, "update_param": 234, "bias_correction1": 234, "bias_correction2": 234, "denom": 234, "foreach_map_adam": 234, "updated_step": 234, "_foreach_copy_": 234, "hop": 234, "exp_avgs_upd": 234, "lerp": 234, "exp_avgs_sq_upd": 234, "params_upd": 234, "opt_eag": 234, "opt_eager_copi": 234, "compiled_adam": 234, "eager_p": 234, "compile_p": 234, "v0710": 234, "942000": 234, "23544": 234, "2104": 234, "__output_cod": 234, "0_infer": 234, "ctype": 234, "c_long": 234, "c_int": 234, "cmath": 234, "nanj": 234, "maybe_profil": 234, "memory_plan": 234, "_align": 234, "asynccompil": 234, "select_algorithm": 234, "extern_kernel": 234, "multi_kernel": 234, "multikernelcal": 234, "_cuda_getcurrentrawstream": 234, "get_raw_stream": 234, "tl": 234, "triton_heurist": 234, "start_graph": 234, "end_graph": 234, "inductor_op": 234, "_quantiz": 234, "empty_strided_cpu": 234, "_empty_strided_cpu": 234, "empty_strided_cuda": 234, "_empty_strided_cuda": 234, "empty_strided_xpu": 234, "_empty_strided_xpu": 234, "reinterpret_tensor": 234, "_reinterpret_tensor": 234, "alloc_from_pool": 234, "_alloc_from_pool": 234, "empty_strided_p2p": 234, "_symmetricmemori": 234, "torchinductor_ci": 234, "ej": 234, "cejr7t4zzqo7llcoxga7clgyc6gs3676lsm4dvilpfw64kudp2n": 234, "unsort": 234, "triton_for_fused_0": 234, "triton_help": 234, "libdevic": 234, "tl_math": 234, "autotunehint": 234, "reductionhint": 234, "tilehint": 234, "deviceproperti": 234, "num_warp": 234, "triton_meta": 234, "in_ptr2": 234, "in_ptr3": 234, "in_ptr4": 234, "in_ptr5": 234, "in_ptr6": 234, "in_ptr7": 234, "in_ptr8": 234, "in_ptr9": 234, "in_ptr10": 234, "in_ptr11": 234, "in_ptr12": 234, "in_ptr13": 234, "in_ptr14": 234, "in_ptr15": 234, "in_ptr16": 234, "in_ptr17": 234, "in_ptr18": 234, "in_ptr19": 234, "in_ptr20": 234, "in_ptr21": 234, "in_ptr22": 234, "in_ptr23": 234, "in_ptr24": 234, "in_ptr25": 234, "in_ptr26": 234, "in_ptr27": 234, "in_ptr28": 234, "in_ptr29": 234, "in_ptr30": 234, "in_ptr31": 234, "in_ptr32": 234, "in_ptr33": 234, "in_ptr34": 234, "in_ptr35": 234, "in_ptr36": 234, "in_ptr37": 234, "in_ptr38": 234, "in_ptr39": 234, "in_ptr40": 234, "in_ptr41": 234, "in_ptr42": 234, "in_ptr43": 234, "in_ptr44": 234, "in_ptr45": 234, "in_ptr46": 234, "in_ptr47": 234, "in_ptr48": 234, "in_ptr49": 234, "out_ptr6": 234, "out_ptr7": 234, "out_ptr8": 234, "out_ptr15": 234, "out_ptr16": 234, "out_ptr17": 234, "out_ptr24": 234, "out_ptr25": 234, "out_ptr26": 234, "out_ptr33": 234, "out_ptr34": 234, "out_ptr35": 234, "out_ptr42": 234, "out_ptr43": 234, "out_ptr44": 234, "out_ptr51": 234, "out_ptr52": 234, "out_ptr53": 234, "out_ptr60": 234, "out_ptr61": 234, "out_ptr62": 234, "out_ptr69": 234, "out_ptr70": 234, "out_ptr71": 234, "out_ptr78": 234, "out_ptr79": 234, "out_ptr80": 234, "out_ptr87": 234, "out_ptr88": 234, "out_ptr89": 234, "multi_processor_count": 234, "regs_per_multiprocessor": 234, "65536": 234, "max_threads_per_multi_processor": 234, "1536": 234, "warp_siz": 234, "tt": 234, "43": [234, 235, 247], "69": [234, 247], "inductor_meta": 234, "grid_typ": 234, "sequentialcombokernelgrid": 234, "combo_grid_meta": 234, "min_block": 234, "default_config": 234, "xblock": 234, "no_x_dim_0": 234, "xnumel_0": 234, "1048576": 234, "no_x_dim_1": 234, "xnumel_1": 234, "no_x_dim_2": 234, "xnumel_2": 234, "no_x_dim_3": 234, "xnumel_3": 234, "no_x_dim_4": 234, "xnumel_4": 234, "no_x_dim_5": 234, "xnumel_5": 234, "no_x_dim_6": 234, "xnumel_6": 234, "no_x_dim_7": 234, "xnumel_7": 234, "no_x_dim_8": 234, "xnumel_8": 234, "no_x_dim_9": 234, "xnumel_9": 234, "kernel_nam": 234, "mutated_arg_nam": 234, "backend_hash": 234, "1e2c16421d4c3dba4ad92bfc4278a3cb24c43deda6ee7ff9e3fbb1dbb80802db": 234, "are_deterministic_algorithms_en": 234, "assert_indirect_index": 234, "autotune_local_cach": 234, "autotune_pointwis": 234, "autotune_remote_cach": 234, "force_disable_cach": 234, "dynamic_scale_rblock": 234, "max_autotun": [234, 276], "max_autotune_pointwis": 234, "min_split_scan_rblock": 234, "spill_threshold": 234, "store_cubin": 234, "pid": 234, "program_id": 234, "num_xblocks_0": 234, "cdiv": 234, "num_xblocks_1": 234, "num_xblocks_2": 234, "num_xblocks_3": 234, "num_xblocks_4": 234, "num_xblocks_5": 234, "num_xblocks_6": 234, "num_xblocks_7": 234, "num_xblocks_8": 234, "num_xblocks_9": 234, "pid_offset": 234, "xnumel": 234, "r0_numel": 234, "xoffset": 234, "xindex": 234, "xmask": 234, "int1": 234, "tmp11": 234, "tmp18": 234, "tmp20": 234, "09999999999999998": 234, "tmp9": 234, "tmp10": 234, "tmp12": 234, "tmp13": 234, "tmp14": 234, "0010000000000000009": 234, "tmp15": 234, "tmp16": 234, "tmp17": 234, "tmp19": 234, "tmp21": 234, "tmp22": 234, "tmp23": 234, "tmp24": 234, "tmp25": 234, "tmp26": 234, "tmp27": 234, "tmp28": 234, "tmp29": 234, "tmp30": 234, "tmp31": 234, "tmp32": 234, "tmp33": 234, "tmp34": 234, "tmp35": 234, "tmp36": 234, "tmp37": 234, "tmp38": 234, "tmp39": 234, "tmp40": 234, "tmp41": 234, "tmp47": 234, "tmp48": 234, "tmp53": 234, "tmp60": 234, "tmp62": 234, "tmp42": 234, "tmp43": 234, "tmp44": 234, "tmp45": 234, "tmp46": 234, "tmp49": 234, "tmp50": 234, "tmp51": 234, "tmp52": 234, "tmp54": 234, "tmp55": 234, "tmp56": 234, "tmp57": 234, "tmp58": 234, "tmp59": 234, "tmp61": 234, "tmp63": 234, "tmp64": 234, "tmp65": 234, "tmp66": 234, "tmp67": 234, "tmp68": 234, "tmp69": 234, "tmp70": 234, "tmp71": 234, "tmp72": 234, "tmp73": 234, "tmp74": 234, "tmp75": 234, "tmp76": 234, "tmp77": 234, "tmp78": 234, "tmp79": 234, "tmp80": 234, "tmp81": 234, "tmp82": 234, "tmp83": 234, "tmp89": 234, "tmp90": 234, "tmp95": 234, "tmp102": 234, "tmp104": 234, "tmp84": 234, "tmp85": 234, "tmp86": 234, "tmp87": 234, "tmp88": 234, "tmp91": 234, "tmp92": 234, "tmp93": 234, "tmp94": 234, "tmp96": 234, "tmp97": 234, "tmp98": 234, "tmp99": 234, "tmp100": 234, "tmp101": 234, "tmp103": 234, "tmp105": 234, "tmp106": 234, "tmp107": 234, "tmp108": 234, "tmp109": 234, "tmp110": 234, "tmp111": 234, "tmp112": 234, "tmp113": 234, "tmp114": 234, "tmp115": 234, "tmp116": 234, "tmp117": 234, "tmp118": 234, "tmp119": 234, "tmp120": 234, "tmp121": 234, "tmp122": 234, "tmp123": 234, "tmp124": 234, "tmp125": 234, "tmp131": 234, "tmp132": 234, "tmp137": 234, "tmp144": 234, "tmp146": 234, "tmp126": 234, "tmp127": 234, "tmp128": 234, "tmp129": 234, "tmp130": 234, "tmp133": 234, "tmp134": 234, "tmp135": 234, "tmp136": 234, "tmp138": 234, "tmp139": 234, "tmp140": 234, "tmp141": 234, "tmp142": 234, "tmp143": 234, "tmp145": 234, "tmp147": 234, "tmp148": 234, "tmp149": 234, "tmp150": 234, "tmp151": 234, "tmp152": 234, "tmp153": 234, "tmp154": 234, "tmp155": 234, "tmp156": 234, "tmp157": 234, "tmp158": 234, "tmp159": 234, "tmp160": 234, "tmp161": 234, "tmp162": 234, "tmp163": 234, "tmp164": 234, "tmp165": 234, "tmp166": 234, "tmp167": 234, "x4": 234, "tmp173": 234, "tmp174": 234, "tmp179": 234, "tmp186": 234, "tmp188": 234, "tmp168": 234, "tmp169": 234, "tmp170": 234, "tmp171": 234, "tmp172": 234, "tmp175": 234, "tmp176": 234, "tmp177": 234, "tmp178": 234, "tmp180": 234, "tmp181": 234, "tmp182": 234, "tmp183": 234, "tmp184": 234, "tmp185": 234, "tmp187": 234, "tmp189": 234, "tmp190": 234, "tmp191": 234, "tmp192": 234, "tmp193": 234, "tmp194": 234, "tmp195": 234, "tmp196": 234, "tmp197": 234, "tmp198": 234, "tmp199": 234, "tmp200": 234, "tmp201": 234, "tmp202": 234, "tmp203": 234, "tmp204": 234, "tmp205": 234, "tmp206": 234, "tmp207": 234, "tmp208": 234, "tmp209": 234, "x5": 234, "tmp215": 234, "tmp216": 234, "tmp221": 234, "tmp228": 234, "tmp230": 234, "tmp210": 234, "tmp211": 234, "tmp212": 234, "tmp213": 234, "tmp214": 234, "tmp217": 234, "tmp218": 234, "tmp219": 234, "tmp220": 234, "tmp222": 234, "tmp223": 234, "tmp224": 234, "tmp225": 234, "tmp226": 234, "tmp227": 234, "tmp229": 234, "tmp231": 234, "tmp232": 234, "tmp233": 234, "tmp234": 234, "tmp235": 234, "tmp236": 234, "tmp237": 234, "tmp238": 234, "tmp239": 234, "tmp240": 234, "tmp241": 234, "tmp242": 234, "tmp243": 234, "tmp244": 234, "tmp245": 234, "tmp246": 234, "tmp247": 234, "tmp248": 234, "tmp249": 234, "tmp250": 234, "tmp251": 234, "x6": 234, "tmp257": 234, "tmp258": 234, "tmp263": 234, "tmp270": 234, "tmp272": 234, "tmp252": 234, "tmp253": 234, "tmp254": 234, "tmp255": 234, "tmp256": 234, "tmp259": 234, "tmp260": 234, "tmp261": 234, "tmp262": 234, "tmp264": 234, "tmp265": 234, "tmp266": 234, "tmp267": 234, "tmp268": 234, "tmp269": 234, "tmp271": 234, "tmp273": 234, "tmp274": 234, "tmp275": 234, "tmp276": 234, "tmp277": 234, "tmp278": 234, "tmp279": 234, "tmp280": 234, "tmp281": 234, "tmp282": 234, "tmp283": 234, "tmp284": 234, "tmp285": 234, "tmp286": 234, "tmp287": 234, "tmp288": 234, "tmp289": 234, "tmp290": 234, "tmp291": 234, "tmp292": 234, "tmp293": 234, "x7": 234, "tmp299": 234, "tmp300": 234, "tmp305": 234, "tmp312": 234, "tmp314": 234, "tmp294": 234, "tmp295": 234, "tmp296": 234, "tmp297": 234, "tmp298": 234, "tmp301": 234, "tmp302": 234, "tmp303": 234, "tmp304": 234, "tmp306": 234, "tmp307": 234, "tmp308": 234, "tmp309": 234, "tmp310": 234, "tmp311": 234, "tmp313": 234, "tmp315": 234, "tmp316": 234, "tmp317": 234, "tmp318": 234, "tmp319": 234, "tmp320": 234, "tmp321": 234, "tmp322": 234, "tmp323": 234, "tmp324": 234, "tmp325": 234, "tmp326": 234, "tmp327": 234, "tmp328": 234, "tmp329": 234, "tmp330": 234, "tmp331": 234, "tmp332": 234, "tmp333": 234, "tmp334": 234, "tmp335": 234, "x8": 234, "tmp341": 234, "tmp342": 234, "tmp347": 234, "tmp354": 234, "tmp356": 234, "tmp336": 234, "tmp337": 234, "tmp338": 234, "tmp339": 234, "tmp340": 234, "tmp343": 234, "tmp344": 234, "tmp345": 234, "tmp346": 234, "tmp348": 234, "tmp349": 234, "tmp350": 234, "tmp351": 234, "tmp352": 234, "tmp353": 234, "tmp355": 234, "tmp357": 234, "tmp358": 234, "tmp359": 234, "tmp360": 234, "tmp361": 234, "tmp362": 234, "tmp363": 234, "tmp364": 234, "tmp365": 234, "tmp366": 234, "tmp367": 234, "tmp368": 234, "tmp369": 234, "tmp370": 234, "tmp371": 234, "tmp372": 234, "tmp373": 234, "tmp374": 234, "tmp375": 234, "tmp376": 234, "tmp377": 234, "x9": 234, "tmp383": 234, "tmp384": 234, "tmp389": 234, "tmp396": 234, "tmp398": 234, "tmp378": 234, "tmp379": 234, "tmp380": 234, "tmp381": 234, "tmp382": 234, "tmp385": 234, "tmp386": 234, "tmp387": 234, "tmp388": 234, "tmp390": 234, "tmp391": 234, "tmp392": 234, "tmp393": 234, "tmp394": 234, "tmp395": 234, "tmp397": 234, "tmp399": 234, "tmp400": 234, "tmp401": 234, "tmp402": 234, "tmp403": 234, "tmp404": 234, "tmp405": 234, "tmp406": 234, "tmp407": 234, "tmp408": 234, "tmp409": 234, "tmp410": 234, "tmp411": 234, "tmp412": 234, "tmp413": 234, "tmp414": 234, "tmp415": 234, "tmp416": 234, "tmp417": 234, "tmp418": 234, "tmp419": 234, "device_str": 234, "cpp_fused__foreach_copy_1": 234, "cpicxudqmdsjh5cm4klbtbrvy2cxwr7whxl3md2zzdjdf3orvfdf": 234, "out_ptr1": 234, "out_ptr3": 234, "out_ptr5": 234, "out_ptr9": 234, "out_ptr11": 234, "out_ptr13": 234, "out_ptr19": 234, "arg2_1": 234, "arg3_1": 234, "arg4_1": 234, "arg5_1": 234, "arg6_1": 234, "arg7_1": 234, "arg8_1": 234, "arg9_1": 234, "arg10_1": 234, "arg11_1": 234, "arg12_1": 234, "arg13_1": 234, "arg14_1": 234, "arg15_1": 234, "arg16_1": 234, "arg17_1": 234, "arg18_1": 234, "arg19_1": 234, "arg20_1": 234, "arg21_1": 234, "arg22_1": 234, "arg23_1": 234, "arg24_1": 234, "arg25_1": 234, "arg26_1": 234, "arg27_1": 234, "arg28_1": 234, "arg29_1": 234, "arg30_1": 234, "arg31_1": 234, "arg32_1": 234, "arg33_1": 234, "arg34_1": 234, "arg35_1": 234, "arg36_1": 234, "arg37_1": 234, "arg38_1": 234, "arg39_1": 234, "arg40_1": 234, "arg41_1": 234, "arg42_1": 234, "arg43_1": 234, "arg44_1": 234, "arg45_1": 234, "arg46_1": 234, "arg47_1": 234, "arg48_1": 234, "arg49_1": 234, "benchmark_compiled_modul": 234, "rand_strid": 234, "print_perform": 234, "wrapper_benchmark": 234, "compiled_module_main": 234, "992000": 234, "2115": 234, "cbxwuspm7iljtlkypwgm5a6rrandaew4wqmdmng4lzas4ogomxpw": 234, "i0710": 234, "536000": 234, "374000": 234, "1_infer": 234, "424000": 234, "c655isihixkazmceuwbfqagiscwkui2zsppjfrucnr3s5l4gahqw": 234, "466000": 234, "1213": 234, "1524350013478u": 234, "754": 234, "0603007526483u": 234, "780": [234, 269], "sunita": 235, "nadamp": 235, "graviton3": 235, "sve": 235, "simd": 235, "graviton2": 235, "bla": 235, "acl": 235, "c7g": 235, "bfloa16": 235, "r7g": 235, "m7g": 235, "4vcpu": 235, "profileract": [235, 252], "myneuralnetwork": 235, "11008": 235, "pred_probab": 235, "y_pred": 235, "set_grad_en": 235, "mymodel_infer": 235, "self_cpu_time_tot": [235, 252], "813": 235, "255m": 235, "177": 235, "032m": 235, "160u": 235, "162": [235, 247], "054m": 235, "540": 235, "180u": 235, "738m": 235, "201": 235, "955m": 235, "985": 235, "282m": 235, "421m": 235, "043m": 235, "810u": 235, "356m": 235, "179": 235, "388m": 235, "896": 235, "940u": 235, "mmla": 235, "torchbench": 235, "dnnl_default_fpmath_mod": 235, "943": 235, "052": 235, "507m": 235, "167": [235, 280], "653m": 235, "838": 235, "265u": 235, "107": 235, "593m": 235, "358": 235, "643u": 235, "167m": 235, "262": 235, "911m": 235, "060": 235, "533m": 235, "414m": 235, "892m": 235, "307u": 235, "281m": 235, "934m": 235, "849": [235, 247], "670u": 235, "fastmath": 235, "821": 235, "914": 235, "713m": 235, "244m": 235, "711": 235, "220u": 235, "322m": 235, "307": 235, "740u": 235, "094": 235, "495m": 235, "921": 235, "736m": 235, "131m": 235, "441m": 235, "803u": 235, "942m": 235, "186m": 235, "720": 235, "930u": 235, "848": 235, "944": 235, "148m": 235, "141": [235, 247], "309m": 235, "706": 235, "545u": 235, "916m": 235, "720u": 235, "431m": 235, "471m": 235, "951": 235, "170m": 235, "027m": 235, "243m": 235, "143u": 235, "928m": 235, "143": [235, 280], "237m": 235, "185u": 235, "47x": 235, "till": 235, "torch_mkldnn_matmul_min_dim": 235, "958": 235, "612m": 235, "124m": 235, "620u": 235, "951m": 235, "170u": 235, "423m": 235, "034": 235, "691m": 235, "988": 235, "628m": 235, "520m": 235, "945m": 235, "817u": 235, "382m": 235, "136": 235, "910u": 235, "781": 235, "604m": 235, "295": 235, "437m": 235, "477m": 235, "516m": 235, "558": 235, "387u": 235, "708m": 235, "499m": 235, "788": 235, "627m": 235, "982m": 235, "385m": 235, "617u": 235, "932m": 235, "297": 235, "369m": 235, "487m": 235, "038m": 235, "060m": 235, "300u": 235, "013m": 235, "106": 235, "710u": 235, "521m": 235, "750m": 235, "216": 235, "475m": 235, "033m": 235, "110u": 235, "285m": 235, "345m": 235, "725u": 235, "margin": 235, "thp_mem_alloc_en": 235, "321": 235, "069m": 235, "568m": 235, "613m": 235, "602m": 235, "682": 235, "007u": 235, "777m": 235, "697": 235, "082m": 235, "329": 235, "097m": 235, "547m": 235, "325": 235, "115m": 235, "626m": 235, "avx512": 236, "amx": [236, 237], "xmx": 236, "claus": [236, 237, 281], "nhwc": 236, "cooper": 236, "roialign": 236, "intel_extension_for_pytorch": [236, 270], "ipex": [236, 266, 270], "bertmodel": 236, "seq_length": 236, "check_trac": 236, "cache_en": 236, "memoryformat": 236, "channelslast": 236, "intel_ext_pt_cpu": 236, "libpytorch_path": 236, "ldd": 236, "workspac": 236, "cmake_have_libc_pthread": 236, "0x00007f3cf98e0000": 236, "libc10": 236, "0x00007f3cf985a000": 236, "libintel": 236, "ext": 236, "0x00007f3cf70fc000": 236, "libtorch_cpu": [236, 261], "0x00007f3ce16ac000": 236, "libdnnl_graph": 236, "0x00007f3cde954000": 236, "mitig": [237, 262], "fc1_drop": 237, "pytorch_fx": 237, "accuracy_criterion": 237, "neural_compressor": 237, "calib_dataload": 237, "eval_dataload": 237, "q_model": 237, "top1metr": 237, "quant_aware_train": 237, "training_func": 237, "q_func": 237, "dummy_dataset": 237, "dummydataset": 237, "2021": 237, "linearrelu": 237, "best_configur": 237, "best_model_weight": 237, "int8_model": 237, "gui": [243, 266], "emit_itt": 243, "8080": 243, "path_of_launch": 243, "iteration_n": 243, "range_push": 243, "range_pop": 243, "oneapi": 243, "brown": 243, "percerntag": 243, "jitter": [243, 247], "enrich": 243, "queue": [243, 262], "ittsampl": 243, "292820": 243, "unmark": 243, "iteration_": 243, "basefold": 243, "bash_sourc": 243, "gradcam": 245, "283": 245, "occlus": 245, "deconvolut": 245, "guidedbackprop": 245, "deeplift": 245, "gradientshap": 245, "forward_func": 245, "pictori": 245, "textual": 245, "distractor": 245, "visualize_text": 245, "imdb_torchtext_interpret": 245, "gilbert": 245, "tanner": 245, "gilberttann": 245, "captum_recip": [245, 250, 258], "carilli": 246, "ture": 246, "kepler": 246, "maxwel": 246, "pascal": 246, "modest": 246, "in_siz": 246, "out_siz": 246, "num_lay": 246, "underflow": 246, "scaler": 246, "unscal": 246, "unscale_": 246, "rough": 246, "binary_cross_entropy_with_logit": 246, "suspect": 246, "docstr": 246, "subregion": 246, "backtrac": 246, "torch_show_cpp_stacktrac": 246, "amp_recip": [246, 250, 258], "tediou": 247, "mistak": 247, "mul_sum": 247, "0x7fb10400d0f0": 247, "batched_dot_mul_sum": 247, "379": 247, "0x7fb103d67048": 247, "batched_dot_bmm": 247, "sub_label": 247, "0x7fb103d54080": 247, "118": 247, "0x7fb16935d2e8": 247, "2775": 247, "0x7fb10400d080": 247, "181": 247, "min_run_tim": [247, 261], "274": 247, "748": 247, "432": [247, 252], "22657": 247, "11899": 247, "609": 247, "23098": 247, "27246": 247, "267073": 247, "118823": 247, "189": 247, "2782": 247, "7471": 247, "11874": 247, "173": 247, "7264": 247, "27824": 247, "100060": 247, "121499": 247, "188": 247, "2773": 247, "12833": 247, "6295": 247, "27062": 247, "71804": 247, "120365": 247, "103": 247, "2804": 247, "6764": 247, "11871": 247, "6640": 247, "27592": 247, "73003": 247, "120083": 247, "callgrindstat": [247, 261], "trip": [247, 261], "batched_dot": 247, "36000": 247, "stark": 247, "fuzzer": 247, "10000000": 247, "k0": 247, "k1": 247, "discontigu": 247, "725": 247, "383": 247, "1468": 247, "5039": 247, "2140": 247, "1296": 247, "41000": 247, "1598": 247, "310": 247, "519": 247, "763": 247, "1082": 247, "473": 247, "16384": 247, "12642115": 247, "4800": 247, "20400": 247, "110000": 247, "400000": 247, "493": 247, "1100": [247, 261], "2440": 247, "870": 247, "2030": 247, "495": 247, "23600": 247, "24000": [247, 261], "62374": 247, "240372": 247, "16000": 247, "40156": 247, "2670": 247, "opac": 247, "complementari": 247, "insensit": 247, "environment": 247, "cpp_lib": 247, "batched_dot_src": 247, "extra_cflag": 247, "extra_include_path": 247, "getenv": 247, "batched_dot_mul_sum_v0": 247, "batched_dot_mul_sum_v1": 247, "module_import_str": 247, "67631": 247, "importlib": 247, "spec_from_file_loc": 247, "repr": 247, "module_from_spec": 247, "exec_modul": 247, "textwrap": 247, "pretty_print": 247, "t_baselin": 247, "stats_v0": 247, "collect_callgrind": 247, "stats_v1": 247, "as_standard": [247, 261], "denois": 247, "cancel": [247, 262], "ing": 247, "wrap_pybind_function_impl_": 247, "linewidth": 247, "valgrind_wrapp": [247, 261], "timer_interfac": [247, 261], "0x7fb0f06e7630": 247, "2392671": 247, "4367": 247, "rel_with_deb_info": [247, 261], "0x7fb10400d208": 247, "2378978": 247, "functioncount": [247, 261], "0x7fb1000ab358": 247, "0x000000000020d9e0": 247, "0x000000000020db10": 247, "integer_sequ": 247, "0ul": 247, "1ul": 247, "5200": 247, "undefinedtensorimpl": 247, "reset_": 247, "5935": 247, "0x000000000022c0e0": 247, "13693": 247, "changing_default_devic": [248, 258], "subsidiari": [249, 263, 264], "neighbor": 249, "sharp": 249, "blurri": 249, "defining_a_neural_network": [249, 250, 258], "what_is_state_dict": [250, 258, 264], "saving_and_loading_models_for_infer": 250, "custom_dataset_transforms_load": 250, "dynamic_quant": 250, "warmstarting_model_using_parameters_from_a_different_model": [250, 258, 263], "zeroing_out_gradi": [250, 258, 265], "mobile_perf": 250, "regional_compil": [250, 267, 269], "syntaxerror": [250, 258], "undesir": 251, "unload": 251, "somemodul": 251, "overwritten": [251, 265, 280], "param_in_model": 251, "param_in_state_dict": 251, "set_swap_module_params_on_convers": [251, 259], "swap_tensor": [251, 258], "module_load_state_dict_tip": [251, 258], "shivam": 252, "raikundalia": 252, "model_infer": 252, "_fork": 252, "509m": 252, "503m": 252, "931m": 252, "597m": 252, "700m": 252, "585m": 252, "_convolut": 252, "450m": 252, "mkldnn_convolut": 252, "838m": 252, "114m": 252, "556m": 252, "batch_norm": 252, "693m": 252, "734": 252, "_batch_norm_impl_index": 252, "482m": 252, "724": 252, "100u": 252, "native_batch_norm": 252, "229m": 252, "109m": 252, "705": 252, "450u": 252, "332": 252, "631m": 252, "286u": 252, "668m": 252, "292m": 252, "988u": 252, "549m": 252, "dnn": 252, "group_by_input_shap": 252, "008m": 252, "956m": 252, "909m": 252, "834m": 252, "332m": 252, "303m": 252, "273m": 252, "233m": 252, "751m": 252, "occurr": 252, "666m": 252, "484m": 252, "_convolution_nogroup": 252, "thnn_conv2d": 252, "thnn_conv2d_forward": 252, "im2col_kernel": 252, "844m": 252, "sgemm_32x32x32_nn": 252, "206m": 252, "sgemm_32x32x32_nn_vec": 252, "093m": 252, "015m": 252, "567m": 252, "871m": 252, "560u": 252, "convolution_overrid": 252, "gen_conv": 252, "216u": 252, "640u": 252, "632u": 252, "conv_reord": 252, "880u": 252, "448u": 252, "712": 252, "486m": 252, "max_pool2d_with_indic": 252, "kb": 252, "572": 252, "resize_": 252, "masked_select": 252, "112": [252, 277, 280], "122": 252, "064m": 252, "viewer": 252, "_conv_forward": 252, "1051": 252, "_call_impl": 252, "016m": 252, "659m": 252, "skip_first": 252, "step_num": 252, "profiler_recip": [252, 258], "reasoning_about_shap": [253, 258], "009": 258, "recipes_recip": 258, "tensorboard_with_pytorch": [258, 260], "timer_quick_start": [258, 261], "tuning_guid": [258, 262], "hereaft": 259, "__slots__": 259, "pertin": 259, "__torch_dispatch__": [259, 277], "new_param": 259, "myquantizedlinearweight": 259, "__setattr__": 259, "module_load": 259, "__torch_function__": 259, "param_kei": 259, "scalar_valu": 260, "walltim": 260, "train_model": 260, "tfevent": 260, "OR": 260, "timeit": 261, "0x7f1929a38ed0": 261, "iqr": 261, "424": 261, "0x7f192b019ed0": 261, "unsurprisingli": 261, "0x7f1929a35850": 261, "563600": 261, "tensormethod": 261, "ab_ref": 261, "0x7f192a6dfd90": 261, "47264": 261, "_int_fre": 261, "25963": 261, "_int_malloc": 261, "19900": 261, "tensorit": 261, "tensoriteratorconfig": 261, "18000": 261, "__tls_get_addr": 261, "13500": 261, "malloc": [261, 262, 280], "11300": 261, "smallvector": 261, "10345": 261, "_int_memalign": 261, "9200": 261, "iteratorbas": 261, "get_strid": 261, "173472": 261, "0x7f192995d750": 261, "118200": 261, "tensoriter": 261, "20900": 261, "15900": 261, "15100": 261, "cpualloc": 261, "12500": 261, "352327": 261, "a0": 261, "b0": 261, "a1": 261, "a127": 261, "pickleabl": 261, "broadcasting_stat": 261, "17600": 261, "tensoriteratorbas": 261, "compute_strid": 261, "12700": 261, "allocate_or_resize_output": 261, "10200": 261, "smallvectorimpl": 261, "7400": 261, "6200": 261, "invert_perm": 261, "6064": 261, "5100": 261, "reorder_dimens": 261, "4300": 261, "compatible_strid": 261, "check_tensor_options_and_extract_memory_format": 261, "__memcmp_avx2_movb": 261, "empty_cpu": 261, "1300": 261, "2400": 261, "6100": 261, "compute_fast_setup_typ": 261, "22600": 261, "fast_set_up": 261, "58091": 261, "580": 261, "0x7f19299544d0": 261, "compute_shap": 261, "2300": 261, "coalesce_dimens": 261, "promin": 261, "__add__": 261, "__sub__": 261, "dice": 261, "szymon": 262, "migacz": 262, "set_to_non": 262, "elementwis": [262, 278], "anomali": 262, "detect_anomali": 262, "set_detect_anomali": 262, "emit_nvtx": 262, "nth": 262, "cpunodebind": 262, "membind": 262, "pytorch_script": 262, "omp_num_thread": [262, 280], "thrash": 262, "gomp_cpu_affin": 262, "omp_proc_bind": 262, "omp_schedul": 262, "libgomp": [262, 280], "sleep": 262, "jemalloc": [262, 280], "tcmalloc": [262, 280], "emphas": 262, "ccl": 262, "set_float32_matmul_precis": 262, "judgment": 265, "itt": 266, "vtune": 266, "set_stanc": [266, 269], "usecas": 266, "torchcompil": 266, "prebuilt": 266, "torchscipt": 266, "pod": 266, "andriod": 266, "run_cpu": 266, "graviton": 266, "compressor": 266, "tensorpip": 266, "dcp": 266, "commdebugmod": 266, "animesh": 267, "jain": 267, "startup": 267, "inline_inbuilt_nn_modul": 267, "graph_cod": 267, "strateg": 267, "796": 269, "torch_compiler_set_stance_tutori": [269, 275], "torch_compile_torch_function_mod": [269, 273], "torch_compile_user_defined_triton_kernel_tutori": [269, 274], "sphx_glr_recipes_torch_export_aoti_python": 269, "torch_export_aoti_python": [269, 276], "compile_model": 270, "resnet50_weight": 270, "weights_prepack": 270, "oguz": [271, 272, 274], "ulgen": [271, 272, 274], "sam": [271, 277], "larsen": 271, "fxgraphcach": [271, 272], "aotautogradcach": [271, 272], "redi": [271, 272], "usernam": 271, "aotautograd": [271, 272], "fxgraph": 271, "torchinductor_": 271, "torchinductor_myusernam": [271, 272], "triton_cache_dir": 271, "torchinductor_redis_host": 271, "torchinductor_redis_port": 271, "6379": 271, "cachebench": 272, "onward": 272, "save_cache_artifact": 272, "load_cache_artifact": 272, "artifact_byt": 272, "cache_info": 272, "pgo": 272, "tritoncach": 272, "inductorcach": 272, "autotuningcach": 272, "torchinductor_cache_dir": 272, "basetorchfunctionmod": 273, "flopcountermod": 274, "wrap_triton": 274, "footgun": 274, "register_kernel": 274, "register_flop_formula": 274, "flop_count": 274, "mysin": 274, "force_eag": 275, "eager_on_recompil": 275, "fail_on_recompil": 275, "torch.export": 276, "torch._inductor.aoti_compile_and_packag": 276, "aot_compil": 276, "torch._export.aoti_load_packag": 276, "ankith": [276, 277], "gunap": [276, 277], "_export": 276, "aot_load": 276, "runner": 276, "archive_format": 276, "10088": 276, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 276, "17160": 276, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 276, "16616": 276, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 276, "17776": 276, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 276, "10856": 276, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 276, "14608": 276, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 276, "11376": 276, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 276, "10984": 276, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 276, "14736": 276, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 276, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 276, "11624": 276, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 276, "15632": 276, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 276, "25472": 276, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 276, "139389": 276, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 276, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 276, "47195424": 276, "47523148": 276, "jordi": 277, "ramon": 277, "marco": 277, "carranza": 277, "mvit": 277, "whisper": 277, "blip": 277, "sam2": 277, "timm": 277, "multiscal": 277, "kinet": 277, "mvit_v1_b_weight": 277, "mvit_v1_b": 277, "224x224x3": 277, "input_fram": 277, "num_clip": 277, "print_exc": 277, "batch_dim": 277, "asr": 277, "transcrib": 277, "spoken": 277, "680k": 277, "whisperprocessor": 277, "whisperforconditionalgener": 277, "decoder_input_id": 277, "decoder_start_token_id": 277, "internaltorchdynamoerror": 277, "attributeerror": 277, "dynamiccach": 277, "key_cach": 277, "non_strict": 277, "proxytensor": 277, "gameplai": 277, "gamer": 277, "salesforc": 277, "blip_decod": 277, "caption_input": 277, "model_url": 277, "googleapi": 277, "sfr": 277, "model_base_capfilt_larg": 277, "exportdb": 277, "bos_token_id": 277, "anaconda3": 277, "functional_tensor": 277, "545": 277, "outs_unwrap": 277, "_op_dk": 277, "sam2imagepredictor": 277, "_predict": 277, "unnorm_coord": 277, "unnorm_box": 277, "mask_input": 277, "multimask_output": 277, "return_logit": 277, "image_predict": 277, "sam2_image_predictor": 277, "359": 277, "exporthelp": 277, "model_to_export": 277, "aoti": 277, "repl": 279, "r18": 279, "r18_script": 279, "dummy_input": 279, "unscripted_output": 279, "unscript": 279, "scripted_output": 279, "unscripted_top5": 279, "scripted_top5": 279, "463": 279, "731": 279, "msg_without_backtrac": 279, "output_sm": 279, "softmaxfuncopt": 279, "top5_tensor": 279, "ndone": 279, "418": 279, "644": 279, "cpulongtyp": 279, "exposit": 279, "preload": 280, "tunabl": 280, "taskset": 280, "uma": 280, "lscpu": 280, "9480": 280, "223": 280, "vendor": 280, "genuineintel": 280, "node0": 280, "node1": 280, "cento": 280, "yum": 280, "libiomp": 280, "perftool": 280, "gperftool": 280, "libjemalloc2": 280, "ninstanc": 280, "ncore": 280, "program_arg": 280, "iomp": 280, "prepend": 280, "core_id": 280, "dafault": 280, "ncores_per_inst": 280, "libtcmalloc": 280, "preliminarili": 280, "deepspe": 281, "marian": 281, "oftentim": 281, "print_peak_memori": 281, "max_memory_alloc": 281, "use_zero": 281, "optimizer_class": 281, "992": 281, "1361": 281, "3453": 281, "6123046875": 281, "1697": 281}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 23, 113, 114, 115, 116, 117], "live": 0, "tutori": [0, 39, 42, 54, 55, 57, 59, 62, 91, 98, 104, 124, 127, 130, 131, 133, 165, 171, 173, 174, 181, 188, 189, 192, 193, 194, 200, 236, 237, 276], "torchrl": [1, 15, 173], "object": [1, 106, 138, 192], "code": [1, 2, 8, 15, 25, 39, 40, 59, 98, 200, 206, 222, 243], "ddpg": 1, "loss": [1, 13, 40, 48, 51, 54, 57, 99, 103, 104, 105, 136, 140, 149, 173, 246, 265], "overview": [1, 19, 65, 113, 117, 124, 141, 149, 155, 178, 190, 197, 208, 228, 237, 262], "prerequisit": [1, 40, 104, 113, 117, 172, 197, 200, 210, 213, 230, 234, 252, 267, 271, 272, 274, 275, 276, 277], "import": [1, 13, 49, 60, 92, 186, 249, 252, 263, 264, 265, 279], "setup": [1, 19, 21, 26, 92, 112, 141, 148, 149, 161, 169, 172, 183, 184, 194, 195, 216, 225, 226, 234, 249, 252, 263, 264, 265, 267, 278], "lossmodul": 1, "The": [1, 7, 8, 92, 94, 103, 137, 169, 170, 179, 193, 243], "__init__": [1, 37], "method": [1, 16, 25, 148, 161, 192, 209, 259], "valu": [1, 149, 165, 173, 189], "estim": [1, 157], "actor": 1, "put": [1, 157, 172, 192], "thing": [1, 15], "togeth": [1, 15, 136, 157, 164, 172, 192, 246], "forward": [1, 6, 7, 24, 119, 134, 141, 152, 156, 192, 193], "call": [1, 187], "environ": [1, 15, 26, 58, 135, 149, 157, 173, 186, 199, 201], "transform": [1, 9, 15, 45, 46, 56, 99, 128, 129, 133, 136, 156, 166, 168, 169, 173, 178, 181, 193], "parallel": [1, 9, 24, 49, 59, 61, 65, 130, 132, 133, 134, 136, 146, 147, 160, 168, 169, 195, 231, 262], "execut": [1, 5, 15, 21, 114, 169, 175, 183, 252, 262], "normal": [1, 48, 173, 265], "observ": 1, "stat": 1, "build": [1, 4, 5, 6, 11, 25, 26, 36, 99, 106, 153, 154, 170, 193, 220, 222, 265, 279], "model": [1, 5, 7, 9, 13, 19, 21, 22, 23, 24, 28, 36, 40, 41, 42, 49, 54, 60, 65, 79, 80, 89, 95, 97, 99, 101, 103, 104, 109, 111, 113, 114, 121, 123, 127, 128, 133, 134, 136, 137, 144, 146, 149, 150, 154, 157, 158, 160, 161, 168, 169, 171, 172, 179, 181, 183, 184, 186, 192, 194, 213, 219, 222, 225, 226, 234, 236, 237, 241, 242, 243, 245, 249, 252, 256, 257, 262, 263, 264, 276, 277, 279], "explor": [1, 5, 21], "data": [1, 7, 9, 22, 29, 37, 41, 48, 49, 54, 55, 57, 59, 60, 61, 92, 99, 102, 112, 127, 132, 133, 134, 136, 139, 140, 146, 173, 179, 181, 183, 184, 186, 189, 190, 197, 208, 238, 249, 262, 263, 264, 265], "collector": [1, 149, 173], "evalu": [1, 54, 127, 137, 138, 139, 179, 246], "your": [1, 5, 6, 11, 15, 37, 65, 97, 101, 112, 119, 163, 192, 199, 231, 249, 279], "record": [1, 183, 197], "replai": [1, 149, 173, 174], "buffer": [1, 149, 173, 262], "storag": [1, 198, 277], "batch": [1, 10, 15, 142, 153, 156, 175, 235, 262, 277], "size": [1, 277], "modul": [1, 5, 7, 16, 28, 71, 89, 99, 112, 119, 120, 149, 152, 165, 171, 190, 218, 251, 259, 277], "construct": [1, 21, 60, 208, 209], "target": [1, 157, 262], "network": [1, 7, 36, 48, 51, 57, 92, 106, 109, 139, 140, 149, 157, 173, 174, 179, 181, 193, 246, 249, 263, 264, 265], "updat": [1, 51, 157, 175, 218], "optim": [1, 40, 41, 48, 57, 73, 103, 106, 112, 114, 120, 134, 138, 164, 177, 190, 225, 226, 232, 235, 262, 264, 265, 268, 280, 281], "time": [1, 20, 23, 43, 52, 74, 78, 86, 90, 100, 110, 118, 119, 122, 172, 180, 217, 252, 258, 261, 267, 269, 271, 272], "train": [1, 3, 4, 7, 9, 12, 15, 17, 22, 27, 36, 37, 48, 54, 57, 58, 60, 92, 94, 97, 101, 103, 106, 121, 127, 130, 133, 136, 137, 139, 140, 144, 145, 148, 149, 157, 164, 168, 173, 174, 179, 181, 184, 190, 213, 236, 237, 262, 265, 270, 274], "polici": [1, 15, 133, 149, 173], "experi": [1, 15, 16, 138, 194], "result": [1, 3, 49, 57, 79, 114, 119, 138, 139, 143, 173, 179, 181, 183, 190, 216, 243, 245, 247], "conclus": [1, 2, 3, 4, 6, 7, 15, 16, 17, 19, 22, 24, 25, 26, 54, 86, 104, 113, 114, 117, 124, 135, 136, 141, 149, 154, 155, 157, 158, 164, 167, 169, 173, 178, 187, 189, 190, 193, 195, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 215, 216, 219, 223, 226, 228, 229, 230, 231, 234, 235, 251, 259, 262, 267, 271, 272, 273, 274, 275, 276, 277, 278, 280], "next": [1, 48, 57, 79, 172, 173], "step": [1, 5, 124, 164, 169, 170, 172, 173, 183, 193, 247, 249, 252, 263, 264, 265, 267], "autograd": [2, 4, 10, 11, 35, 47, 67, 68, 81, 94, 120, 137, 141, 152, 177], "c": [2, 3, 4, 5, 6, 7, 8, 10, 11, 25, 26, 200, 222, 236, 261, 279], "frontend": [2, 7, 89, 91], "basic": [2, 7, 24, 28, 38, 39, 141, 146, 152, 167, 170, 175, 187, 189, 219, 235, 274], "oper": [2, 4, 6, 8, 10, 11, 17, 25, 26, 44, 53, 94, 108, 117, 167, 194, 208, 209, 211, 223, 262], "comput": [2, 15, 20, 35, 43, 47, 52, 74, 78, 86, 90, 100, 108, 110, 111, 118, 122, 127, 156, 161, 180, 217, 245, 258, 262, 269], "higher": 2, "order": [2, 262], "gradient": [2, 13, 35, 79, 95, 134, 166, 208, 246, 262, 265], "us": [2, 3, 6, 7, 9, 12, 13, 14, 23, 25, 26, 27, 28, 39, 47, 55, 58, 87, 112, 113, 114, 117, 119, 121, 126, 132, 134, 141, 142, 144, 146, 147, 149, 150, 152, 166, 168, 170, 175, 176, 177, 178, 183, 184, 186, 198, 201, 204, 208, 210, 222, 224, 227, 229, 230, 231, 237, 243, 245, 251, 252, 260, 262, 263, 274, 276, 278, 280, 281], "custom": [2, 4, 6, 8, 11, 15, 16, 17, 25, 26, 37, 56, 71, 117, 120, 126, 127, 130, 142, 143, 152, 170, 171, 189, 192, 231, 232], "function": [2, 13, 16, 22, 35, 40, 48, 51, 57, 68, 79, 89, 92, 99, 103, 104, 105, 106, 112, 120, 142, 143, 152, 156, 161, 166, 171, 173, 234, 247, 252, 262, 265, 273], "translat": [2, 123, 129, 179], "from": [2, 8, 22, 23, 25, 47, 55, 112, 114, 121, 139, 140, 144, 162, 179, 186, 190, 192, 251, 263], "python": [2, 4, 6, 8, 17, 25, 26, 89, 170, 222, 276, 278], "cuda": [3, 4, 6, 8, 55, 86, 167, 227, 262], "graph": [3, 35, 47, 101, 108, 114, 141, 187, 189, 213, 262, 277], "pytorch": [3, 5, 6, 7, 8, 11, 13, 16, 22, 23, 27, 28, 47, 50, 55, 59, 62, 65, 67, 68, 69, 71, 72, 73, 77, 85, 93, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 111, 114, 117, 119, 120, 131, 148, 158, 167, 172, 183, 186, 190, 193, 194, 196, 204, 213, 214, 222, 223, 224, 233, 235, 236, 237, 238, 240, 243, 244, 249, 250, 252, 253, 260, 262, 263, 264, 265, 266, 270], "api": [3, 5, 7, 65, 94, 134, 152, 158, 164, 170, 197, 200, 222, 243, 262, 278], "get": [3, 5, 11, 36, 86, 111, 132, 134, 146, 155, 163, 177, 211, 229, 230, 231, 236, 237], "start": [3, 86, 101, 132, 134, 146, 163, 177, 211, 229, 230, 231, 236, 237, 261, 267, 280], "set": [4, 92, 135, 138, 186, 194, 197, 199, 201, 225, 226, 234, 262, 271], "up": [4, 76, 120, 138, 186, 192, 194, 199, 201, 225, 226, 234, 235, 261], "system": 4, "defin": [4, 7, 10, 22, 25, 36, 48, 51, 54, 68, 104, 113, 120, 138, 169, 173, 186, 192, 194, 247, 249, 261, 263, 264, 265, 274], "op": [4, 6, 10, 189, 273], "ad": [4, 10, 17, 92, 184, 190, 246, 274], "backend": [4, 10, 11, 16, 135, 148, 155, 170, 194, 213, 222, 262, 270, 280], "implement": [4, 10, 25, 26, 40, 57, 79, 105, 117, 142, 165, 170, 175, 176, 178, 206, 208, 218, 234], "an": [4, 11, 15, 23, 48, 109, 111, 117, 121, 137, 149, 173, 190, 197, 226, 251, 280], "regist": [4, 7, 10, 11, 16, 26], "torch": [4, 5, 35, 47, 85, 99, 108, 112, 113, 121, 139, 141, 146, 171, 178, 187, 188, 189, 193, 198, 201, 208, 213, 221, 225, 234, 246, 247, 251, 259, 267, 272, 273, 274, 275, 276, 277, 278, 280], "compil": [4, 6, 26, 141, 155, 178, 187, 190, 193, 201, 210, 213, 225, 226, 234, 267, 271, 272, 273, 274, 275, 276, 278], "support": [4, 10, 11, 17, 92, 101, 117, 178, 209, 218, 232, 274], "hybrid": [4, 89, 91], "registr": 4, "test": [4, 11, 15, 17, 48, 79, 92, 142, 153, 192, 222, 249, 261], "creat": [4, 8, 14, 37, 41, 49, 54, 102, 106, 108, 112, 138, 139, 140, 154, 161, 171, 262], "mutabl": [4, 17], "load": [5, 7, 13, 25, 28, 37, 41, 42, 48, 54, 58, 104, 121, 127, 144, 146, 179, 181, 198, 229, 238, 247, 249, 251, 254, 255, 256, 262, 263, 264, 265, 279], "torchscript": [5, 24, 25, 26, 28, 187, 219, 232, 236, 279], "1": [5, 22, 48, 89, 114, 135, 161, 169, 170, 183, 184, 189, 192, 194, 213, 247, 249, 252, 261, 263, 264, 265], "convert": [5, 28, 158, 194, 203, 212], "script": [5, 26, 28, 58, 89, 163, 268, 280], "via": [5, 16, 197], "trace": [5, 26, 28, 86, 87, 89, 113, 154, 187, 220, 243, 252, 277], "annot": 5, "2": [5, 19, 22, 48, 49, 89, 114, 135, 161, 169, 170, 183, 184, 192, 194, 213, 216, 247, 249, 252, 261, 263, 264, 265], "serial": [5, 16, 25, 171], "file": [5, 37, 54, 114, 121, 144, 179, 197, 257], "3": [5, 22, 48, 49, 89, 114, 135, 169, 170, 183, 184, 194, 213, 247, 249, 252, 261, 263, 264, 265], "A": [5, 26, 47, 50, 62, 94, 95, 105, 142, 167, 243, 246, 255, 261, 263], "minim": [5, 104], "applic": [5, 7, 148, 170, 224, 259], "depend": [5, 114, 116, 178, 189, 190], "libtorch": 5, "4": [5, 19, 22, 48, 89, 114, 170, 172, 183, 184, 194, 213, 216, 247, 249, 252, 261, 263, 264, 265], "5": [5, 22, 48, 114, 183, 184, 194, 247, 252, 261, 265], "help": [5, 183], "extens": [6, 11, 14, 130, 170, 215, 223, 226, 236, 259, 270], "motiv": [6, 7, 89, 206], "exampl": [6, 14, 17, 24, 25, 79, 83, 89, 94, 95, 106, 109, 111, 120, 121, 137, 193, 197, 200, 210, 215, 236, 270, 275, 280], "write": [6, 7, 15, 56, 148, 184, 192, 206, 232], "setuptool": [6, 26], "pass": [6, 12, 119, 135, 141, 153, 164, 249], "backward": [6, 11, 24, 133, 134, 141, 142, 143, 164], "bind": [6, 25], "perform": [6, 119, 135, 150, 154, 155, 158, 166, 172, 178, 183, 201, 210, 228, 235, 237, 240, 262, 275, 280], "comparison": [6, 23, 142, 146, 166, 187], "gpu": [6, 7, 48, 49, 60, 83, 92, 121, 167, 183, 190, 199, 204, 236, 262], "devic": [6, 13, 16, 36, 121, 133, 222, 227, 248, 251, 254, 262], "jit": [6, 11, 26, 113, 172], "mix": [6, 28, 133, 134, 144, 246, 262], "accessor": 6, "integr": [6, 8, 16, 95], "neural": [7, 13, 36, 48, 51, 92, 112, 157, 161, 237, 249, 263, 264, 265], "paramet": [7, 14, 36, 40, 41, 49, 99, 121, 171, 173, 175, 176, 218, 247, 262, 263], "submodul": 7, "travers": 7, "hierarchi": [7, 243], "run": [7, 23, 25, 39, 49, 54, 55, 58, 59, 60, 79, 89, 98, 104, 138, 146, 183, 186, 189, 225, 226, 234, 252, 260, 279], "mode": [7, 21, 22, 152, 156, 210, 236, 273], "ownership": 7, "dcgan": [7, 57], "what": [7, 11, 12, 16, 19, 48, 57, 61, 62, 94, 112, 121, 143, 150, 166, 167, 197, 216, 221, 226, 227, 230, 231, 232, 243, 264, 276, 279, 280, 281], "wa": 7, "gan": [7, 57], "agan": 7, "gener": [7, 16, 57, 79, 121, 138, 140, 247, 255, 262], "discrimin": [7, 57, 105], "loop": [7, 15, 40, 103, 149, 173, 174], "move": [7, 25, 102], "checkpoint": [7, 60, 121, 133, 146, 157, 228, 229, 251, 255, 262], "recov": 7, "state": [7, 134, 281], "inspect": [7, 141, 165, 171, 184, 246], "imag": [7, 13, 23, 48, 63, 64, 101, 114, 127, 172, 186, 277], "author": [8, 28, 114], "manual": 8, "when": [8, 136, 143, 144, 208, 276], "should": [8, 61, 136], "i": [8, 12, 16, 33, 48, 57, 61, 62, 112, 121, 143, 144, 150, 164, 166, 193, 208, 221, 223, 227, 230, 231, 232, 243, 246, 264, 277, 279, 281], "why": [8, 58, 61, 136, 137, 208, 211, 230, 231], "distribut": [9, 12, 18, 21, 58, 59, 60, 61, 65, 86, 130, 146, 147, 148, 169, 176, 177, 190, 228, 229, 232, 262], "pipelin": [9, 147, 168, 169], "dispatch": [10, 11, 178], "schema": 10, "For": [10, 94, 256], "do": [10, 48, 94, 143, 158], "need": [10, 94, 193], "In": [10, 94, 102, 257], "place": [10, 94, 102], "view": [10, 183], "go": [10, 48, 57, 79, 186, 193], "beyond": 10, "autocast": [10, 246], "tracer": 10, "extend": [11, 25, 26, 117, 171, 193], "new": [11, 16, 68, 105, 120, 142], "": [11, 17, 108, 157, 207], "kei": [11, 277], "full": [11, 40, 92], "list": 11, "kernel": [11, 16, 86, 161, 234, 235, 274], "against": 11, "nativ": [11, 224], "compat": 11, "known": 11, "issu": 11, "addit": [11, 124, 131, 167, 169, 183, 197], "note": [11, 105, 245], "futur": [11, 16], "work": [11, 12, 16, 41, 132, 133, 134, 136, 158, 215, 229], "stai": 11, "touch": 11, "uneven": 12, "input": [12, 57, 60, 79, 143, 190, 193, 247, 262], "join": 12, "context": [12, 195], "manag": [12, 167], "requir": [12, 19, 114, 137, 171, 216, 227, 232, 243, 277, 279, 281], "distributeddataparallel": [12, 146, 262], "zeroredundancyoptim": [12, 281], "keyword": 12, "argument": 12, "how": [12, 16, 39, 132, 133, 134, 136, 164, 201, 215, 227, 229, 231, 232, 243, 249, 260, 279, 281], "doe": [12, 19, 137, 216], "joinabl": 12, "joinhook": 12, "make": [12, 105, 224], "toi": 12, "class": [12, 15, 25, 36, 56, 104, 165, 190], "transfer": [13, 127], "introduct": [13, 27, 28, 47, 57, 65, 86, 93, 95, 96, 97, 98, 101, 102, 103, 108, 116, 135, 165, 167, 169, 183, 186, 187, 190, 191, 195, 200, 201, 206, 209, 210, 213, 218, 222, 223, 249, 252, 263, 264, 265, 271, 272, 280], "underli": 13, "principl": [13, 209], "packag": [13, 82], "select": [13, 149, 195, 220], "content": [13, 120, 235], "style": [13, 193], "descent": 13, "numpi": [14, 44, 53, 76, 102, 120, 207], "scipi": 14, "less": 14, "parametr": [14, 165, 171], "pendulum": 15, "effect": 15, "action": [15, 149], "_step": 15, "reset": 15, "simul": 15, "_reset": 15, "metadata": [15, 16], "env": 15, "_spec": 15, "spec": 15, "shape": [15, 42, 102, 189, 253], "reproduc": 15, "seed": [15, 102], "wrap": [15, 17, 112, 133, 192, 261, 274], "envbas": 15, "our": [15, 21, 142, 148, 153, 164, 249, 263, 264, 265], "rollout": 15, "simpl": [15, 49, 94, 114, 154, 179, 246, 252], "facilit": 16, "privateuse1": 16, "guard": [16, 189], "deseri": [16, 25], "other": [16, 21, 99, 101, 103, 167, 183], "improv": [16, 119, 183, 213, 235], "user": [16, 85, 222, 274], "renam": 16, "name": [16, 139, 140, 189], "properti": 16, "relat": [16, 42, 186, 259], "pil": 17, "crop": 17, "combin": [18, 136, 146], "dataparallel": [18, 49, 61, 92, 121, 146], "rpc": [18, 130, 147, 175, 176, 177, 196, 227, 233], "framework": [18, 176, 177], "beta": [19, 22, 152, 153, 154, 178, 212, 225, 226, 235, 239, 273, 276, 278], "acceler": [19, 102, 112, 163, 193, 198, 216], "bert": [19, 216], "semi": [19, 27, 216], "structur": [19, 216], "sparsiti": [19, 209, 216], "problem": [19, 216], "solv": [19, 216], "intro": [19, 216], "establish": 19, "baselin": 19, "prune": [19, 171, 216], "spars": [19, 206, 209, 216], "infer": [19, 46, 121, 127, 172, 190, 235, 236, 246, 256, 262, 270, 276, 279], "torchrec": [21, 190, 191], "shard": [21, 65, 132, 133, 134, 136, 190, 281], "instal": [21, 86, 95, 114, 172, 190, 201, 213, 237, 260], "embed": [21, 101, 111, 190], "distributedmodelparallel": [21, 190], "multiprocess": 21, "tabl": [21, 120], "wise": 21, "static": [22, 105, 277], "quantiz": [22, 172, 190, 194, 199, 213, 237], "eager": 22, "architectur": 22, "helper": [22, 209, 234], "dataset": [22, 30, 37, 49, 56, 97, 101, 103, 112, 126, 192, 265], "loader": [22, 92], "imagenet": 22, "post": [22, 213], "awar": [22, 237], "speedup": [22, 187, 246], "option": [23, 35, 47, 49, 114, 124, 192, 213, 222, 249, 280], "export": [23, 113, 114, 117, 121, 188, 189, 213, 276, 277, 279], "runtim": [23, 114, 262, 276, 280], "between": [23, 146, 208], "dynam": [24, 105, 189, 275], "syntax": [24, 89, 219], "appli": [24, 65, 136, 213, 215, 280], "ensembl": [24, 150], "bidirect": 24, "lstm": [24, 105, 109, 149], "layer": [24, 36, 95, 99, 136, 142, 193, 262], "asid": 24, "visual": [24, 37, 95, 101, 114, 127, 164, 179, 181, 184, 243, 245], "project": [25, 193], "With": [25, 183], "cmake": [25, 26], "save": [25, 28, 41, 42, 58, 60, 114, 121, 133, 137, 143, 144, 146, 157, 164, 198, 228, 229, 246, 247, 254, 255, 256, 257, 263], "To": [25, 65], "ivalu": 25, "take": 25, "return": [25, 137], "bound": 25, "appendix": [26, 209], "more": [26, 35, 94, 102, 137, 155, 156, 175, 183, 228, 247, 249, 252, 260, 263, 264, 265], "wai": [26, 166], "supervis": 27, "learn": [27, 38, 39, 50, 62, 89, 105, 106, 107, 120, 127, 130, 157, 167, 173, 174, 175, 177, 183, 197, 247, 249, 252, 260, 263, 264, 265, 276, 280], "usb": 27, "built": [27, 194], "upon": 27, "freematch": 27, "softmatch": 27, "cifar": [27, 104], "10": [27, 104, 164], "onli": [27, 236, 237], "40": 27, "label": [27, 186], "specif": [27, 186, 262], "imbalanc": 27, "algorithm": [27, 174], "further": [28, 35, 36, 37, 40, 45, 47, 58, 60, 61, 113, 114, 116, 117, 119, 124, 127, 144, 145, 149, 193, 194, 206, 208, 209, 262], "read": [28, 35, 36, 37, 40, 45, 47, 58, 60, 61, 113, 114, 116, 117, 119, 124, 144, 145, 149, 186, 194, 206, 208, 209, 243, 262], "audio": [29, 30, 31, 32, 33, 34], "augment": [29, 31, 86, 109, 262], "featur": [31, 32, 95, 109, 127, 133, 183, 186, 190, 236, 237], "extract": [32, 186], "o": 33, "resampl": 34, "automat": [35, 108, 152, 246, 277], "differenti": [35, 47, 108, 152], "tensor": [35, 44, 53, 67, 77, 84, 97, 102, 108, 120, 130, 136, 137, 139, 164, 178, 193, 209, 211, 226, 259, 262, 277], "disabl": [35, 262], "track": [35, 143, 184], "jacobian": [35, 156, 161], "product": [35, 156, 161, 178], "nn": [36, 71, 72, 82, 89, 99, 112, 120, 121, 128, 129, 171, 193, 251, 259, 277], "flatten": 36, "linear": [36, 99, 106, 112], "relu": [36, 194], "sequenti": [36, 112], "softmax": [36, 106, 208], "dataload": [37, 56, 97, 103, 112], "iter": [37, 54, 56, 171], "__len__": 37, "__getitem__": 37, "prepar": [37, 54, 139, 140, 179, 183, 194, 206, 207, 208, 222, 241, 242], "through": [37, 56, 89, 194, 249], "thi": [39, 62, 133, 164, 193, 215], "guid": [39, 134, 167, 262], "hyperparamet": [40, 92, 173, 174], "quickstart": 41, "weight": [42, 51, 57, 69, 120], "initi": [44, 53, 57, 58, 134, 135, 146, 148, 157, 165, 211, 218, 249, 263, 264], "attribut": [44, 53, 95, 245], "bridg": [44, 53, 102], "arrai": [44, 53], "totensor": 45, "lambda": 45, "fast": [46, 79, 235], "better": [46, 201, 210], "gentl": 47, "background": [47, 167], "usag": [47, 141, 142, 152, 164, 167, 187, 189, 222, 235, 237, 270, 274], "vector": [47, 150, 156, 161], "calculu": 47, "exclus": 47, "dag": 47, "classifi": [48, 106, 114, 139, 186], "about": [48, 253], "cifar10": 48, "convolut": [48, 99, 142, 149, 153, 262], "multipl": [48, 121, 171, 257], "where": [48, 57, 79, 186, 208], "dummi": 49, "8": [49, 247, 261], "summari": [49, 133, 178, 244], "deep": [50, 62, 105, 106, 107], "60": [50, 62], "minut": [50, 62], "blitz": [50, 62], "backprop": 51, "chatbot": 54, "preprocess": [54, 126, 157, 172], "format": [54, 114, 158, 197, 229, 262], "trim": 54, "seq2seq": [54, 179], "encod": [54, 111, 179], "decod": [54, 179], "procedur": 54, "mask": [54, 193, 208], "singl": [54, 160], "greedi": 54, "my": 54, "text": [54, 125, 126, 185], "googl": 55, "colab": 55, "version": [55, 161], "drive": 55, "enabl": [55, 134, 195, 197, 200, 262], "compos": [56, 156, 274], "afterword": 56, "torchvis": [56, 80, 192], "adversari": [57, 79], "fault": 58, "toler": 58, "torchrun": [58, 146], "grace": 58, "restart": 58, "process": [58, 60, 146, 169, 170, 175], "group": [58, 60, 170], "provid": 58, "variabl": [58, 135, 262], "snapshot": [58, 164], "trainer": 58, "constructor": [58, 262], "resum": [58, 121, 246], "video": [59, 172, 277], "section": 59, "multi": [60, 83, 92, 138], "ddp": [60, 61, 130, 144, 146, 262], "job": [60, 197, 252], "you": [61, 101, 136, 167, 193, 197, 245, 276, 280], "prefer": 61, "over": 61, "dp": 61, "goal": 62, "segment": [63, 64, 192, 277], "deeplabv3": [63, 64], "android": [63, 205, 220, 222, 224, 239, 241], "io": [64, 204, 205, 220, 239, 242], "primit": 65, "commun": [65, 86, 92, 148, 227], "launcher": 65, "scale": [65, 136, 145, 178], "develop": 65, "control": [69, 113, 120, 178, 189, 262, 275, 280], "flow": [69, 113, 120, 189, 277], "share": [69, 120], "warm": [76, 120], "threat": 79, "sign": 79, "attack": 79, "under": 79, "fgsm": 79, "accuraci": [79, 92, 155, 237], "v": [79, 156, 167, 207], "epsilon": 79, "sampl": [79, 140, 166, 243], "finetun": [80, 127, 192], "former": 85, "holist": [86, 87], "analysi": [86, 87], "hta": 86, "tempor": 86, "breakdown": 86, "idl": 86, "durat": 86, "overlap": 86, "counter": 86, "memori": [86, 109, 119, 137, 142, 158, 164, 167, 174, 228, 235, 252, 262, 280], "bandwidth": 86, "queue": 86, "length": [86, 262], "launch": [86, 169, 243], "statist": 86, "diff": 87, "inform": [89, 155], "part": [89, 109], "pure": 89, "top": 89, "level": [89, 94, 109, 139, 140], "tune": [92, 133, 235, 262], "rai": 92, "configur": [92, 138, 243, 271], "search": 92, "space": 92, "youtub": [93, 96, 98], "seri": [93, 98], "fundament": 94, "we": 94, "turn": [94, 139], "off": 94, "On": 94, "profil": [94, 119, 154, 155, 183, 196, 233, 243, 252], "advanc": [94, 105, 133, 148, 183, 207, 223, 246, 274], "topic": [94, 148, 246], "detail": [94, 218], "high": [94, 178], "understand": 95, "captum": [95, 245], "first": [95, 113, 165], "occlus": 95, "gradcam": 95, "insight": 95, "common": [99, 141, 277], "type": [99, 102, 190, 246, 277], "recurr": [99, 149], "manipul": [99, 102], "activ": [99, 103, 210], "tensorboard": [101, 183, 184, 260], "befor": [101, 186, 245], "show": 101, "scalar": [101, 260], "resourc": [101, 103, 131, 167, 169, 279], "random": [102, 105], "math": [102, 235], "logic": 102, "brief": 102, "broadcast": 102, "alter": 102, "copi": [102, 167], "chang": [102, 248], "number": 102, "dimens": [102, 235], "per": [103, 166], "epoch": 103, "knowledg": 104, "distil": 104, "util": [104, 171, 174, 193, 223, 247, 259, 262, 273], "cross": [104, 193], "entropi": 104, "cosin": 104, "intermedi": [104, 143, 262], "regressor": 104, "decis": 105, "bi": 105, "crf": 105, "versu": 105, "toolkit": 105, "condit": 105, "field": 105, "discuss": 105, "exercis": [105, 109, 111, 124, 139, 140, 179], "tag": [105, 109], "block": [106, 193, 247], "affin": 106, "map": 106, "non": [106, 167, 189, 226, 262], "probabl": 106, "compon": [106, 155], "logist": 106, "regress": 106, "bag": [106, 111], "word": [106, 111], "nlp": [107, 139, 140, 162, 179], "librari": [108, 125, 186, 224, 249, 252, 262, 263, 264, 265, 280], "reshap": 108, "sequenc": [109, 136, 179], "long": [109, 252], "short": [109, 243], "term": 109, "speech": [109, 182, 185, 277], "tagger": 109, "charact": [109, 139, 140], "lexic": 111, "semant": [111, 206, 207], "dens": [111, 178], "n": 111, "gram": 111, "languag": [111, 128, 129], "continu": 111, "realli": 112, "mnist": 112, "net": 112, "scratch": [112, 139, 140, 162, 179], "without": [112, 222], "refactor": [112, 113], "add": [112, 135, 192, 273], "valid": [112, 262], "fit": [112, 164], "get_data": 112, "switch": [112, 262], "cnn": 112, "close": 112, "thought": 112, "attempt": 113, "suggest": [113, 189], "patch": [113, 186], "cond": 113, "netron": 114, "6": [114, 183, 184, 194, 247, 252, 261], "7": [114, 183, 194, 247, 252, 261], "compar": [114, 247], "ones": 114, "overrid": 117, "exist": [117, 158], "debug": [119, 155, 197, 262], "print": 119, "state_dict": [121, 264], "recommend": [121, 139, 167, 187], "entir": 121, "program": [121, 189], "One": [121, 257], "warmstart": [121, 263], "differ": [121, 141, 192, 263], "across": [121, 254], "cpu": [121, 133, 137, 154, 155, 167, 201, 210, 223, 236, 243, 262, 270, 274, 280], "t5": [123, 133], "base": [123, 196, 220, 233], "summar": 123, "sentiment": 123, "classif": [123, 125, 186, 277], "templat": 124, "torchtext": [125, 126, 128, 129], "vision": [127, 262], "few": 127, "predict": [127, 186], "convnet": 127, "fix": [127, 189], "extractor": 127, "fsdp": [130, 132, 133], "tp": [130, 136], "devicemesh": [130, 231], "welcom": 131, "fulli": [132, 133, 134, 136, 193], "recap": 133, "fine": 133, "hf": 133, "precis": [133, 134, 144, 246, 262], "intial": 133, "strategi": [133, 138], "prefetch": [133, 134], "stream": 133, "rank0": 133, "fsdp2": 134, "clip": [134, 246], "dtensor": 134, "dict": 134, "dcp": [134, 228, 229], "fsdp1": 134, "migrat": 134, "libuv": 135, "tcpstore": 135, "benchmark": [135, 153, 225, 247], "impact": 135, "exit": 135, "rout": 135, "use_libuv": 135, "fals": 135, "0": [135, 189, 208], "init_method": 135, "processgroup": 135, "larg": 136, "layernorm": 136, "rmsnorm": 136, "hook": [137, 164], "typic": 137, "than": 137, "concept": [137, 189], "pack": [137, 193], "unpack": 137, "some": 137, "unconvent": 137, "int": 137, "tupl": 137, "str": 137, "disk": 137, "na": 138, "ax": 138, "torchx": 138, "app": [138, 222], "runner": 138, "searchspac": 138, "metric": [138, 213], "optimizationconfig": 138, "choos": [138, 280], "schedul": [138, 226], "acknowledg": 138, "rnn": [139, 140, 177], "plot": [139, 140, 179], "captur": [141, 154, 164, 172, 213], "larger": 141, "log": [141, 155, 157, 260], "flag": 141, "address": [141, 277], "certain": 141, "limit": [141, 274], "aotautograd": 141, "recompil": [141, 275], "reason": [141, 253], "fuse": [142, 153, 164, 178, 190, 262], "norm": [142, 153, 262], "formula": [142, 274], "batchnorm": 142, "out": [142, 153, 215, 265], "doubl": 143, "output": [143, 190, 237], "real": [144, 172], "world": 144, "cloud": 144, "enough": 144, "multinod": 145, "local": 145, "global": [145, 171], "rank": 145, "heteregen": 145, "troubleshoot": [145, 172, 246], "case": [146, 262], "skew": 146, "speed": [146, 235], "point": [148, 259], "collect": [148, 173, 247], "own": 148, "ring": 148, "allreduc": 148, "dqn": [149, 174], "mlp": 149, "q": [149, 174], "vmap": [150, 221], "forc": 151, "align": 151, "wav2vec2": [151, 182], "fuser": 153, "fx": [153, 154, 187, 213], "fusion": [153, 194, 234], "resnet18": [153, 154], "symbol": [154, 189], "interpret": [154, 205, 220, 239, 245], "investig": 154, "inductor": [155, 200, 271], "determin": 155, "error": [155, 189, 246, 277], "hessian": 156, "hvp": 156, "vhp": 156, "revers": 156, "jacrev": 156, "jacfwd": 156, "functorch": 156, "mario": 157, "plai": 157, "rl": 157, "agent": 157, "definit": 157, "act": 157, "cach": [157, 165, 271, 272], "recal": 157, "td": 157, "all": [157, 164, 193, 246, 252, 262], "let": 157, "channel": 158, "last": 158, "gain": [158, 275], "machin": 160, "best": [160, 187, 190], "practic": [160, 167, 183, 187, 190], "tangent": 161, "ntk": 161, "contract": 161, "nvfuser": 163, "dure": [164, 262], "disclaim": 164, "techniqu": 164, "register_post_accumulate_grad_hook": 164, "everyth": [164, 192], "line": 164, "hand": 165, "ar": [165, 193], "citizen": 165, "concaten": 165, "remov": [165, 171], "grad": [166, 208, 262], "effici": [166, 206, 239, 262], "good": 167, "non_block": 167, "pin_memori": 167, "preambl": 167, "pageabl": 167, "asynchron": [167, 175, 228, 262], "synchron": [167, 262], "true": [167, 251, 262], "cudamemcpyasync": 167, "perspect": 167, "synergi": 167, "direct": [167, 227], "mp": 167, "consider": 167, "partit": 169, "main": 169, "cpp": 170, "subclass": [170, 178, 259], "expos": 170, "re": 171, "raspberri": 172, "pi": 172, "30": 172, "fp": 172, "opencv": 172, "choic": 172, "mobilenetv2": [172, 203, 212], "It": 172, "reinforc": [173, 174, 177], "ppo": 173, "server": [175, 176], "cartpol": 175, "solver": 175, "rref": 177, "dot": 178, "attent": [178, 179, 193], "sdpa": 178, "explicit": [178, 234], "hardwar": 178, "causal": 178, "self": 178, "nestedtensor": 178, "attn_bia": 178, "spatial": 181, "depict": 181, "stn": 181, "recognit": [182, 277], "event": 183, "analyz": [183, 197, 252], "amd": 183, "projector": 184, "assess": 184, "tacotron2": 185, "whole": 186, "slide": 186, "tiatoolbox": 186, "clean": 186, "download": 186, "patchpredictor": 186, "pathologi": 186, "here": 186, "nest": [187, 193, 211], "demonstr": [187, 277], "torchdynamo": [187, 272, 277], "nightli": 188, "break": [189, 277], "strict": [189, 277], "constraint": [189, 194], "special": 189, "dim": 189, "violat": 189, "_check": 189, "ir": 189, "decomposit": 189, "exportdb": 189, "recsi": 190, "embeddingbag": 190, "embeddingbagcollect": 190, "planner": 190, "lazyawait": 190, "anatomi": 190, "lookup": 190, "detect": 192, "pennfudan": 192, "pretrain": 192, "modifi": [192, 246], "backbon": 192, "instanc": 192, "replac": 193, "me": 193, "introduc": [193, 205], "abov": 193, "octob": 193, "2024": 193, "multiheadattent": 193, "gpt": 193, "one": 193, "row": 193, "longer": 193, "caus": 193, "nan": [193, 208, 246], "flexattent": 193, "njt": 193, "swiglu": 193, "feed": 193, "prototyp": [194, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 214, 216, 220], "backendconfig": 194, "deriv": 194, "refer": 194, "pattern": 194, "each": 194, "dtypeconfig": 194, "conv": 194, "qconfigmap": 194, "satisfi": 194, "faulti": 194, "rotat": 195, "approach": 195, "workload": [196, 223, 233, 243, 262], "flight": 197, "stuck": 197, "retriev": 197, "dump": 197, "end": [197, 272], "gpudirect": 198, "torchao": 199, "wrapper": [200, 222], "window": 201, "xpu": [201, 243], "softwar": 201, "altern": 201, "intel": [201, 223, 236, 237, 243, 262, 270, 280], "llvm": 201, "core": [203, 262], "ml": 203, "lite": 205, "workflow": [205, 222], "adagrad": 206, "maskedtensor": [206, 207, 208, 209], "simpler": 206, "origin": 206, "maskedarrai": 207, "reduct": [207, 209], "access": [208, 262, 264, 280], "index": 208, "slice": 208, "distinguish": 208, "anoth": 208, "x": 208, "yield": 208, "nansum": 208, "nanmean": 208, "safe": 208, "miss": 208, "coo": 209, "csr": 209, "unari": 209, "binari": 209, "max": 210, "autotun": 210, "see": [211, 225, 274], "also": [211, 225, 274], "nnapi": 212, "openvino": 213, "nncf": 213, "lower": 213, "represent": 213, "recip": [214, 240, 241, 242, 244, 250, 266, 268], "autoload": 215, "tree": 215, "mechan": 215, "skip": [218, 262], "freez": 219, "mobil": [220, 239, 240, 244, 268], "so": 221, "vulkan": 222, "desktop": 222, "sdk": 222, "java": 222, "upload": 222, "leverag": 223, "matrix": 223, "amx": 223, "guidelin": 223, "can": 223, "confirm": 223, "being": 223, "prebuilt": 224, "lr": 226, "happen": 226, "tensorpip": 227, "even": 228, "pin": 228, "commdebugmod": 230, "hsdp": 231, "solut": [231, 277], "horizont": 234, "foreach_map": 234, "aw": 235, "graviton": 235, "processor": 235, "bfloat16": [235, 236], "openbla": 235, "smaller": 235, "alloc": [235, 262, 280], "overhead": 235, "linux": 235, "transpar": 235, "huge": 235, "page": 235, "thp": 235, "float32": 236, "imper": 236, "float16": 236, "zoo": 236, "eas": 237, "compressor": 237, "driven": 237, "deploy": [237, 279], "instrument": 243, "technologi": 243, "itt": 243, "vtune": 243, "showcas": 243, "begin": 245, "final": 245, "default": [246, 248], "gradscal": 246, "e": 246, "g": 246, "amp": [246, 262], "minor": 246, "inf": 246, "mismatch": 246, "mai": 246, "manifest": 246, "cudnn_status_bad_param": 246, "syntaxerror": 247, "timeit": 247, "timer": [247, 261], "autorang": 247, "fuzz": 247, "instruct": [247, 261], "count": [247, 261], "callgrind": [247, 261], "necessari": [249, 252, 263, 264, 265], "specifi": 249, "tip": 251, "mmap": 251, "meta": 251, "load_state_dict": [251, 259], "assign": 251, "instanti": 252, "resnet": 252, "consumpt": 252, "examin": 252, "stack": 252, "And": [255, 256], "swap_tensor": 259, "quick": [261, 280], "wall": 261, "blocked_autorang": 261, "snippet": 261, "collect_callgrind": 261, "delv": 261, "deeper": 261, "b": [261, 263], "footnot": 261, "calcul": 262, "bia": 262, "directli": 262, "follow": 262, "none": 262, "instead": 262, "zero_grad": 262, "channels_last": 262, "uniform": 262, "numa": [262, 280], "openmp": [262, 280], "libiomp": 262, "cudnn": 262, "auto": 262, "tuner": 262, "avoid": 262, "unnecessari": 262, "prealloc": 262, "reduc": [262, 267], "accumul": 262, "match": 262, "find_unused_paramet": 262, "balanc": 262, "zero": 265, "while": 265, "cold": 267, "region": 267, "fp32": 270, "bf16": 270, "torchinductor_fx_graph_cach": 271, "torchinductor_autograd_cach": 271, "torchinductor_cache_dir": 271, "torchinductor_fx_graph_remote_cach": 271, "torchinductor_autograd_remote_cach": 271, "torchinductor_autotune_remote_cach": 271, "torchinductor_force_disable_cach": 271, "offer": 272, "mega": 272, "modular": 272, "torchinductor": 272, "triton": [272, 274], "remot": 272, "rewrit": 273, "mul": 273, "triton_op": 274, "fallback": 274, "flopcount": 274, "set_stanc": 275, "descript": 275, "prevent": 275, "measur": 275, "crash": 275, "sooner": 275, "aotinductor": 276, "challeng": 277, "them": 277, "No": 277, "caption": 277, "cannot": 277, "mutat": 277, "frozen": 277, "promptabl": 277, "torch_log": 278, "engin": 279, "xeon": 280, "run_cpu": 280, "Will": 280, "command": 280, "explan": 280}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [19, "overview"], [113, "overview"], [117, "overview"], [124, "overview"], [141, "overview"], [149, "overview"], [155, "overview"], [178, "overview"], [197, "overview"], [237, "overview"], [262, "overview"]], "Prerequisites": [[1, "prerequisites"], [104, "prerequisites"], [113, "prerequisites"], [117, "prerequisites"], [172, "prerequisites"], [197, "prerequisites"], [213, "prerequisites"], [230, "prerequisites"], [234, "prerequisites"], [252, "prerequisites"], [267, "prerequisites"], [271, "prerequisites"], [272, "prerequisites"], [274, "prerequisites"], [275, "prerequisites"], [276, "prerequisites"], [277, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [149, "environment"], [157, "environment"]], "Transforms": [[1, "transforms"], [45, "transforms"], [56, "transforms"], [173, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [173, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [173, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [40, "optimizer"], [103, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [15, "conclusion"], [16, "conclusion"], [17, "conclusion"], [19, "conclusion"], [22, "conclusion"], [24, "conclusion"], [25, "conclusion"], [26, "conclusion"], [54, "conclusion"], [86, "conclusion"], [104, "conclusion"], [113, "conclusion"], [114, "conclusion"], [117, "conclusion"], [124, "conclusion"], [135, "conclusion"], [136, "conclusion"], [141, "conclusion"], [149, "conclusion"], [154, "conclusion"], [155, "conclusion"], [157, "conclusion"], [158, "conclusion"], [164, "conclusion"], [167, "conclusion"], [169, "conclusion"], [178, "conclusion"], [187, "conclusion"], [189, "conclusion"], [190, "conclusion"], [193, "conclusion"], [195, "conclusion"], [197, "conclusion"], [198, "conclusion"], [199, "conclusion"], [200, "conclusion"], [201, "conclusion"], [206, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [211, "conclusion"], [213, "conclusion"], [215, "conclusion"], [216, "conclusion"], [219, "conclusion"], [223, "conclusion"], [226, "conclusion"], [228, "conclusion"], [229, "conclusion"], [230, "conclusion"], [231, "conclusion"], [234, "conclusion"], [235, "conclusion"], [251, "conclusion"], [259, "conclusion"], [262, "conclusion"], [267, "conclusion"], [271, "conclusion"], [272, "conclusion"], [273, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [278, "conclusion"], [280, "conclusion"]], "Next Steps": [[1, "next-steps"], [172, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [86, "getting-started"], [236, "getting-started"], [237, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Loading a TorchScript Model in C++": [[5, "loading-a-torchscript-model-in-c"]], "Step 1: Converting Your PyTorch Model to Torch Script": [[5, "step-1-converting-your-pytorch-model-to-torch-script"]], "Converting to Torch Script via Tracing": [[5, "converting-to-torch-script-via-tracing"]], "Converting to Torch Script via Annotation": [[5, "converting-to-torch-script-via-annotation"]], "Step 2: Serializing Your Script Module to a File": [[5, "step-2-serializing-your-script-module-to-a-file"]], "Step 3: Loading Your Script Module in C++": [[5, "step-3-loading-your-script-module-in-c"]], "A Minimal C++ Application": [[5, "a-minimal-c-application"]], "Depending on LibTorch and Building the Application": [[5, "depending-on-libtorch-and-building-the-application"]], "Step 4: Executing the Script Module in C++": [[5, "step-4-executing-the-script-module-in-c"]], "Step 5: Getting Help and Exploring the API": [[5, "step-5-getting-help-and-exploring-the-api"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "PyTorch Custom Operators": [[8, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[8, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[8, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[8, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[8, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[8, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[9, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[10, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[10, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[10, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[10, "in-place-or-view-ops"]], "Adding autograd support": [[10, "adding-autograd-support"]], "Going beyond autograd": [[10, "going-beyond-autograd"]], "Autocast": [[10, "autocast"]], "Batched": [[10, "batched"]], "Tracer": [[10, "tracer"]], "Extending dispatcher for a new backend in C++": [[11, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[11, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[11, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[11, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[11, "register-kernels-for-the-new-backend"], [16, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[11, "autograd-support-for-the-new-backend"]], "Build an extension": [[11, "build-an-extension"]], "Custom operator support": [[11, "custom-operator-support"]], "JIT support": [[11, "jit-support"]], "Testing your backend against native PyTorch backends": [[11, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[11, "backward-compatibility"]], "Known issues & additional notes": [[11, "known-issues-additional-notes"]], "Future Work": [[11, "future-work"], [16, "future-work"]], "Stay in touch": [[11, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[12, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[12, "requirements"], [19, "requirements"], [171, "requirements"], [216, "requirements"], [227, "requirements"], [232, "requirements"], [243, "requirements"], [279, "requirements"], [281, "requirements"]], "What is Join?": [[12, "what-is-join"]], "Using Join with DistributedDataParallel": [[12, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[12, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[12, "passing-keyword-arguments"]], "How Does Join Work?": [[12, "how-does-join-work"]], "Joinable": [[12, "joinable"]], "JoinHook": [[12, "joinhook"]], "Join": [[12, "join"]], "Making a Toy Class Work with Join": [[12, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[13, "neural-transfer-using-pytorch"]], "Introduction": [[13, "introduction"], [57, "introduction"], [65, "introduction"], [95, "id1"], [101, "id1"], [103, "id1"], [135, "introduction"], [167, "introduction"], [183, "introduction"], [186, "introduction"], [195, "introduction"], [200, "introduction"], [201, "introduction"], [209, "introduction"], [210, "introduction"], [213, "introduction"], [218, "introduction"], [222, "introduction"], [223, "introduction"], [249, "introduction"], [252, "introduction"], [263, "introduction"], [264, "introduction"], [265, "introduction"], [271, "introduction"], [272, "introduction"]], "Underlying Principle": [[13, "underlying-principle"]], "Importing Packages and Selecting a Device": [[13, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[13, "loading-the-images"]], "Loss Functions": [[13, "loss-functions"], [99, "loss-functions"]], "Content Loss": [[13, "content-loss"]], "Style Loss": [[13, "style-loss"]], "Importing the Model": [[13, "importing-the-model"]], "Gradient Descent": [[13, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[14, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[14, "parameter-less-example"]], "Parametrized example": [[14, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[15, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[15, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[15, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[15, "environment-metadata-env-spec"]], "Specs shape": [[15, "specs-shape"]], "Reproducible experiments: seeding": [[15, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[15, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[15, "testing-our-environment"]], "Transforming an environment": [[15, "transforming-an-environment"]], "Writing custom transforms": [[15, "writing-custom-transforms"]], "Executing a rollout": [[15, "executing-a-rollout"]], "Batching computations": [[15, "batching-computations"]], "Training a simple policy": [[15, "training-a-simple-policy"]], "Training loop": [[15, "training-loop"], [149, "training-loop"], [173, "training-loop"], [174, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[16, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[16, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[16, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[16, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[16, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[16, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[16, "other-modules"]], "How to Improve User Experience with Privateuse1": [[16, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[16, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[16, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[16, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[17, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[17, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[17, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[17, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[17, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[18, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[19, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[19, "what-problem-does-semi-structured-sparsity-solve"], [216, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[19, "intro-setup"], [216, "intro-setup"]], "Establishing a baseline": [[19, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[19, "pruning-bert-to-be-2-4-sparse"], [216, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[19, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[20, "computation-times"], [43, "computation-times"], [52, "computation-times"], [74, "computation-times"], [78, "computation-times"], [90, "computation-times"], [100, "computation-times"], [110, "computation-times"], [118, "computation-times"], [122, "computation-times"], [180, "computation-times"], [217, "computation-times"], [258, "computation-times"], [269, "computation-times"]], "Exploring TorchRec sharding": [[21, "exploring-torchrec-sharding"]], "Installation": [[21, "installation"], [95, "installation"], [237, "installation"], [260, "installation"]], "Distributed Setup": [[21, "distributed-setup"]], "Constructing our embedding model": [[21, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[21, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[21, "multiprocessing-execution"]], "Table Wise Sharding": [[21, "table-wise-sharding"]], "Explore other sharding modes": [[21, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[22, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[22, "model-architecture"]], "2. Helper functions": [[22, "helper-functions"]], "3. Define dataset and data loaders": [[22, "define-dataset-and-data-loaders"]], "ImageNet Data": [[22, "imagenet-data"]], "4. Post-training static quantization": [[22, "post-training-static-quantization"]], "5. Quantization-aware training": [[22, "quantization-aware-training"]], "Speedup from quantization": [[22, "speedup-from-quantization"]], "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime": [[23, "optional-exporting-a-model-from-pytorch-to-onnx-and-running-it-using-onnx-runtime"]], "Timing Comparison Between Models": [[23, "timing-comparison-between-models"]], "Running the model on an image using ONNX Runtime": [[23, "running-the-model-on-an-image-using-onnx-runtime"]], "Dynamic Parallelism in TorchScript": [[24, "dynamic-parallelism-in-torchscript"]], "Basic Syntax": [[24, "basic-syntax"], [219, "basic-syntax"]], "Applied Example: Ensemble of Bidirectional LSTMs": [[24, "applied-example-ensemble-of-bidirectional-lstms"]], "Parallelizing Forward and Backward Layers": [[24, "parallelizing-forward-and-backward-layers"]], "Aside: Visualizing Parallelism": [[24, "aside-visualizing-parallelism"]], "Parallelizing Models in the Ensemble": [[24, "parallelizing-models-in-the-ensemble"]], "Extending TorchScript with Custom C++ Classes": [[25, "extending-torchscript-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[25, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[25, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python and TorchScript": [[25, "using-the-c-class-from-python-and-torchscript"]], "Saving, Loading, and Running TorchScript Code Using Custom Classes": [[25, "saving-loading-and-running-torchscript-code-using-custom-classes"]], "Moving Custom Classes To/From IValues": [[25, "moving-custom-classes-to-from-ivalues"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[25, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[25, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "Extending TorchScript with Custom C++ Operators": [[26, "extending-torchscript-with-custom-c-operators"]], "Implementing the Custom Operator in C++": [[26, "implementing-the-custom-operator-in-c"]], "Registering the Custom Operator with TorchScript": [[26, "registering-the-custom-operator-with-torchscript"]], "Building the Custom Operator": [[26, "building-the-custom-operator"]], "Environment setup": [[26, "environment-setup"]], "Building with CMake": [[26, "building-with-cmake"]], "Using the TorchScript Custom Operator in Python": [[26, "using-the-torchscript-custom-operator-in-python"]], "Using the Custom Operator with Tracing": [[26, "using-the-custom-operator-with-tracing"]], "Using the Custom Operator with Script": [[26, "using-the-custom-operator-with-script"]], "Using the TorchScript Custom Operator in C++": [[26, "using-the-torchscript-custom-operator-in-c"]], "Appendix A: More Ways of Building Custom Operators": [[26, "appendix-a-more-ways-of-building-custom-operators"]], "Building with JIT compilation": [[26, "building-with-jit-compilation"]], "Building with Setuptools": [[26, "building-with-setuptools"]], "Semi-Supervised Learning using USB built upon PyTorch": [[27, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[27, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[27, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[27, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Introduction to TorchScript": [[28, "introduction-to-torchscript"]], "Basics of PyTorch Model Authoring": [[28, "basics-of-pytorch-model-authoring"]], "Basics of TorchScript": [[28, "basics-of-torchscript"]], "Tracing Modules": [[28, "tracing-modules"]], "Using Scripting to Convert Modules": [[28, "using-scripting-to-convert-modules"]], "Mixing Scripting and Tracing": [[28, "mixing-scripting-and-tracing"]], "Saving and Loading models": [[28, "saving-and-loading-models"]], "Further Reading": [[28, "further-reading"], [35, "further-reading"], [36, "further-reading"], [37, "further-reading"], [40, "further-reading"], [45, "further-reading"], [58, "further-reading"], [60, "further-reading"], [61, "further-reading"], [119, "further-reading"], [124, "further-reading"], [144, "further-reading"], [145, "further-reading"], [149, "further-reading"], [194, "further-reading"], [206, "further-reading"], [208, "further-reading"], [209, "further-reading"], [262, "further-reading"]], "Audio Data Augmentation": [[29, "audio-data-augmentation"]], "Audio Datasets": [[30, "audio-datasets"]], "Audio Feature Augmentation": [[31, "audio-feature-augmentation"]], "Audio Feature Extractions": [[32, "audio-feature-extractions"]], "Audio I/O": [[33, "audio-i-o"]], "Audio Resampling": [[34, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[35, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[35, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[35, "computing-gradients"]], "Disabling Gradient Tracking": [[35, "disabling-gradient-tracking"]], "More on Computational Graphs": [[35, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[35, "optional-reading-tensor-gradients-and-jacobian-products"]], "Build the Neural Network": [[36, "build-the-neural-network"]], "Get Device for Training": [[36, "get-device-for-training"]], "Define the Class": [[36, "define-the-class"]], "Model Layers": [[36, "model-layers"]], "nn.Flatten": [[36, "nn-flatten"]], "nn.Linear": [[36, "nn-linear"]], "nn.ReLU": [[36, "nn-relu"]], "nn.Sequential": [[36, "nn-sequential"]], "nn.Softmax": [[36, "nn-softmax"]], "Model Parameters": [[36, "model-parameters"]], "Datasets & DataLoaders": [[37, "datasets-dataloaders"]], "Loading a Dataset": [[37, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[37, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[37, "creating-a-custom-dataset-for-your-files"]], "__init__": [[37, "init"]], "__len__": [[37, "len"]], "__getitem__": [[37, "getitem"]], "Preparing your data for training with DataLoaders": [[37, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[37, "iterate-through-the-dataloader"]], "Learn the Basics": [[38, "learn-the-basics"], [39, "learn-the-basics"]], "Running the Tutorial Code": [[39, "running-the-tutorial-code"], [98, "running-the-tutorial-code"]], "How to Use this Guide": [[39, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[40, "optimizing-model-parameters"]], "Prerequisite Code": [[40, "prerequisite-code"]], "Hyperparameters": [[40, "hyperparameters"]], "Optimization Loop": [[40, "optimization-loop"]], "Loss Function": [[40, "loss-function"], [51, "loss-function"], [103, "loss-function"]], "Full Implementation": [[40, "full-implementation"]], "Quickstart": [[41, "quickstart"]], "Working with data": [[41, "working-with-data"]], "Creating Models": [[41, "creating-models"]], "Optimizing the Model Parameters": [[41, "optimizing-the-model-parameters"]], "Saving Models": [[41, "saving-models"]], "Loading Models": [[41, "loading-models"]], "Save and Load the Model": [[42, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[42, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[42, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[42, "related-tutorials"]], "Tensors": [[44, "tensors"], [53, "tensors"], [84, "tensors"], [120, "tensors"], [120, "id1"]], "Initializing a Tensor": [[44, "initializing-a-tensor"]], "Attributes of a Tensor": [[44, "attributes-of-a-tensor"]], "Operations on Tensors": [[44, "operations-on-tensors"]], "Bridge with NumPy": [[44, "bridge-with-numpy"], [53, "bridge-with-numpy"]], "Tensor to NumPy array": [[44, "tensor-to-numpy-array"], [53, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[44, "numpy-array-to-tensor"], [53, "numpy-array-to-tensor"]], "ToTensor()": [[45, "totensor"]], "Lambda Transforms": [[45, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[46, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[47, "a-gentle-introduction-to-torch-autograd"]], "Background": [[47, "background"], [167, "background"]], "Usage in PyTorch": [[47, "usage-in-pytorch"]], "Differentiation in Autograd": [[47, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[47, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[47, "computational-graph"]], "Exclusion from the DAG": [[47, "exclusion-from-the-dag"]], "Further readings:": [[47, "further-readings"]], "Training a Classifier": [[48, "training-a-classifier"]], "What about data?": [[48, "what-about-data"]], "Training an image classifier": [[48, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[48, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[48, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[48, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[48, "train-the-network"]], "5. Test the network on the test data": [[48, "test-the-network-on-the-test-data"]], "Training on GPU": [[48, "training-on-gpu"]], "Training on multiple GPUs": [[48, "training-on-multiple-gpus"]], "Where do I go next?": [[48, "where-do-i-go-next"]], "Optional: Data Parallelism": [[49, "optional-data-parallelism"]], "Imports and parameters": [[49, "imports-and-parameters"]], "Dummy DataSet": [[49, "dummy-dataset"]], "Simple Model": [[49, "simple-model"]], "Create Model and DataParallel": [[49, "create-model-and-dataparallel"]], "Run the Model": [[49, "run-the-model"]], "Results": [[49, "results"], [57, "results"], [79, "results"], [173, "results"]], "2 GPUs": [[49, "gpus"]], "3 GPUs": [[49, "id1"]], "8 GPUs": [[49, "id2"]], "Summary": [[49, "summary"], [133, "summary"], [178, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[50, "deep-learning-with-pytorch-a-60-minute-blitz"], [62, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[51, "neural-networks"]], "Define the network": [[51, "define-the-network"]], "Backprop": [[51, "backprop"]], "Update the weights": [[51, "update-the-weights"]], "Tensor Initialization": [[53, "tensor-initialization"]], "Tensor Attributes": [[53, "tensor-attributes"]], "Tensor Operations": [[53, "tensor-operations"]], "Chatbot Tutorial": [[54, "chatbot-tutorial"]], "Preparations": [[54, "preparations"]], "Load & Preprocess Data": [[54, "load-preprocess-data"]], "Create formatted data file": [[54, "create-formatted-data-file"]], "Load and trim data": [[54, "load-and-trim-data"]], "Prepare Data for Models": [[54, "prepare-data-for-models"]], "Define Models": [[54, "define-models"]], "Seq2Seq Model": [[54, "seq2seq-model"]], "Encoder": [[54, "encoder"]], "Decoder": [[54, "decoder"]], "Define Training Procedure": [[54, "define-training-procedure"]], "Masked loss": [[54, "masked-loss"]], "Single training iteration": [[54, "single-training-iteration"]], "Training iterations": [[54, "training-iterations"]], "Define Evaluation": [[54, "define-evaluation"]], "Greedy decoding": [[54, "greedy-decoding"]], "Evaluate my text": [[54, "evaluate-my-text"]], "Run Model": [[54, "run-model"]], "Run Training": [[54, "run-training"]], "Run Evaluation": [[54, "run-evaluation"]], "Running Tutorials in Google Colab": [[55, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[55, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[55, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[55, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[56, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[56, "dataset-class"]], "Compose transforms": [[56, "compose-transforms"]], "Iterating through the dataset": [[56, "iterating-through-the-dataset"]], "Afterword: torchvision": [[56, "afterword-torchvision"]], "DCGAN Tutorial": [[57, "dcgan-tutorial"]], "Generative Adversarial Networks": [[57, "generative-adversarial-networks"]], "What is a GAN?": [[57, "what-is-a-gan"]], "What is a DCGAN?": [[57, "what-is-a-dcgan"]], "Inputs": [[57, "inputs"], [79, "inputs"]], "Data": [[57, "data"]], "Implementation": [[57, "implementation"], [79, "implementation"]], "Weight Initialization": [[57, "weight-initialization"]], "Generator": [[57, "generator"]], "Discriminator": [[57, "discriminator"]], "Loss Functions and Optimizers": [[57, "loss-functions-and-optimizers"]], "Training": [[57, "training"], [139, "training"], [140, "training"], [174, "training"], [179, "training"], [236, "training"], [236, "id5"]], "Where to Go Next": [[57, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[58, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[58, "why-use-torchrun"]], "Graceful restarts": [[58, "graceful-restarts"]], "Process group initialization": [[58, "process-group-initialization"]], "Use torchrun-provided environment variables": [[58, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[58, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[58, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[58, "resuming-training"]], "Running the script": [[58, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[59, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[59, "running-the-code"]], "Tutorial sections": [[59, "tutorial-sections"]], "Multi GPU training with DDP": [[60, "multi-gpu-training-with-ddp"]], "Imports": [[60, "imports"]], "Constructing the process group": [[60, "constructing-the-process-group"]], "Constructing the DDP model": [[60, "constructing-the-ddp-model"]], "Distributing input data": [[60, "distributing-input-data"]], "Saving model checkpoints": [[60, "saving-model-checkpoints"]], "Running the distributed training job": [[60, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[61, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[61, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[62, "what-is-pytorch"]], "Goal of this tutorial:": [[62, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[63, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[64, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[65, "pytorch-distributed-overview"]], "Parallelism APIs": [[65, "parallelism-apis"]], "Sharding primitives": [[65, "sharding-primitives"]], "Communications APIs": [[65, "communications-apis"]], "Launcher": [[65, "launcher"]], "Applying Parallelism To Scale Your Model": [[65, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[65, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[67, "pytorch-tensors-and-autograd"], [120, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[68, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[69, "pytorch-control-flow-weight-sharing"], [120, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[71, "pytorch-custom-nn-modules"], [120, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[72, "pytorch-nn"], [120, "pytorch-nn"]], "PyTorch: optim": [[73, "pytorch-optim"], [120, "pytorch-optim"]], "Warm-up: numpy": [[76, "warm-up-numpy"], [120, "warm-up-numpy"]], "PyTorch: Tensors": [[77, "pytorch-tensors"], [120, "pytorch-tensors"]], "Adversarial Example Generation": [[79, "adversarial-example-generation"]], "Threat Model": [[79, "threat-model"]], "Fast Gradient Sign Attack": [[79, "fast-gradient-sign-attack"]], "Model Under Attack": [[79, "model-under-attack"]], "FGSM Attack": [[79, "fgsm-attack"]], "Testing Function": [[79, "testing-function"]], "Run Attack": [[79, "run-attack"]], "Accuracy vs Epsilon": [[79, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[79, "sample-adversarial-examples"]], "Where to go next?": [[79, "where-to-go-next"]], "Finetuning Torchvision Models": [[80, "finetuning-torchvision-models"]], "Autograd": [[81, "autograd"], [120, "autograd"], [120, "id2"]], "nn Package": [[82, "nn-package"]], "Multi-GPU Examples": [[83, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[85, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[86, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[86, "installing-hta"]], "Temporal Breakdown": [[86, "temporal-breakdown"]], "Idle Time Breakdown": [[86, "idle-time-breakdown"]], "Kernel Breakdown": [[86, "kernel-breakdown"]], "Kernel Duration Distribution": [[86, "kernel-duration-distribution"]], "Communication Computation Overlap": [[86, "communication-computation-overlap"]], "Augmented Counters": [[86, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[86, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[86, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[87, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[89, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[89, "hybrid-frontend-information"]], "Motivating Example": [[89, "motivating-example"]], "Part 1 - Tracing a pure python function": [[89, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[89, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[89, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[89, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[89, "top-level-module"]], "Running the Model": [[89, "running-the-model"]], "Tracing the Top-Level Model": [[89, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[91, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[92, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[92, "setup-imports"]], "Data loaders": [[92, "data-loaders"]], "Configurable neural network": [[92, "configurable-neural-network"]], "The train function": [[92, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[92, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[92, "communicating-with-ray-tune"]], "Full training function": [[92, "full-training-function"]], "Test set accuracy": [[92, "test-set-accuracy"]], "Configuring the search space": [[92, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[93, "introduction-to-pytorch-youtube-series"], [98, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[94, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[94, "what-do-we-need-autograd-for"]], "A Simple Example": [[94, "a-simple-example"]], "Autograd in Training": [[94, "autograd-in-training"]], "Turning Autograd Off and On": [[94, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[94, "autograd-and-in-place-operations"]], "Autograd Profiler": [[94, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[94, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[94, "the-high-level-api"]], "Model Understanding with Captum": [[95, "model-understanding-with-captum"]], "A First Example": [[95, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[95, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[95, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[95, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[95, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[96, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[97, "introduction-to-pytorch"], [108, "introduction-to-pytorch"]], "PyTorch Tensors": [[97, "pytorch-tensors"]], "PyTorch Models": [[97, "pytorch-models"]], "Datasets and Dataloaders": [[97, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[97, "training-your-pytorch-model"]], "Building Models with PyTorch": [[99, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[99, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[99, "common-layer-types"]], "Linear Layers": [[99, "linear-layers"]], "Convolutional Layers": [[99, "convolutional-layers"]], "Recurrent Layers": [[99, "recurrent-layers"]], "Transformers": [[99, "transformers"]], "Other Layers and Functions": [[99, "other-layers-and-functions"]], "Data Manipulation Layers": [[99, "data-manipulation-layers"]], "Activation Functions": [[99, "activation-functions"]], "PyTorch TensorBoard Support": [[101, "pytorch-tensorboard-support"]], "Before You Start": [[101, "before-you-start"]], "Showing Images in TensorBoard": [[101, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[101, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[101, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[101, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[101, "other-resources"], [103, "other-resources"]], "Introduction to PyTorch Tensors": [[102, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[102, "creating-tensors"], [108, "creating-tensors"]], "Random Tensors and Seeding": [[102, "random-tensors-and-seeding"]], "Tensor Shapes": [[102, "tensor-shapes"]], "Tensor Data Types": [[102, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[102, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[102, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[102, "more-math-with-tensors"]], "Altering Tensors in Place": [[102, "altering-tensors-in-place"]], "Copying Tensors": [[102, "copying-tensors"]], "Moving to Accelerator": [[102, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[102, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[102, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[102, "numpy-bridge"]], "Training with PyTorch": [[103, "training-with-pytorch"]], "Dataset and DataLoader": [[103, "dataset-and-dataloader"]], "The Model": [[103, "the-model"]], "The Training Loop": [[103, "the-training-loop"]], "Per-Epoch Activity": [[103, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[104, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[104, "loading-cifar-10"]], "Defining model classes and utility functions": [[104, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[104, "cross-entropy-runs"]], "Knowledge distillation run": [[104, "knowledge-distillation-run"]], "Cosine loss minimization run": [[104, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[104, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[105, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[105, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[105, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[105, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[105, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[106, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[106, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[106, "affine-maps"]], "Non-Linearities": [[106, "non-linearities"]], "Softmax and Probabilities": [[106, "softmax-and-probabilities"]], "Objective Functions": [[106, "objective-functions"]], "Optimization and Training": [[106, "optimization-and-training"]], "Creating Network Components in PyTorch": [[106, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[106, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[107, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[108, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[108, "operations-with-tensors"]], "Reshaping Tensors": [[108, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[108, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[109, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[109, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[109, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[109, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[111, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[111, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[111, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[111, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[111, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[112, "what-is-torch-nn-really"]], "MNIST data setup": [[112, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[112, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[112, "using-torch-nn-functional"]], "Refactor using nn.Module": [[112, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[112, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[112, "refactor-using-torch-optim"]], "Refactor using Dataset": [[112, "refactor-using-dataset"]], "Refactor using DataLoader": [[112, "refactor-using-dataloader"]], "Add validation": [[112, "add-validation"]], "Create fit() and get_data()": [[112, "create-fit-and-get-data"]], "Switch to CNN": [[112, "switch-to-cnn"]], "Using nn.Sequential": [[112, "using-nn-sequential"]], "Wrapping DataLoader": [[112, "wrapping-dataloader"]], "Using your Accelerator": [[112, "using-your-accelerator"]], "Closing thoughts": [[112, "closing-thoughts"]], "Export a model with control flow to ONNX": [[113, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[113, "define-the-models"]], "Exporting the Model: First Attempt": [[113, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[113, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[113, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[113, "further-reading"], [114, "further-reading"], [116, "further-reading"], [117, "further-reading"]], "Export a PyTorch model to ONNX": [[114, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[114, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[114, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[114, "export-the-model-to-onnx-format"]], "3.5. (Optional) Optimize the ONNX model": [[114, "optional-optimize-the-onnx-model"]], "4. Save the ONNX model in a file": [[114, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[114, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[114, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[114, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[115, "onnx"]], "Introduction to ONNX": [[116, "introduction-to-onnx"]], "Dependencies": [[116, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[117, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[117, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[117, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[117, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[119, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[119, "performance-debugging-using-profiler"]], "Profile the forward pass": [[119, "profile-the-forward-pass"]], "Print profiler results": [[119, "print-profiler-results"]], "Improve memory performance": [[119, "improve-memory-performance"]], "Improve time performance": [[119, "improve-time-performance"]], "Learning PyTorch with Examples": [[120, "learning-pytorch-with-examples"]], "Table of Contents": [[120, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[120, "pytorch-defining-new-autograd-functions"]], "nn module": [[120, "nn-module"], [120, "id3"]], "Examples": [[120, "examples"], [215, "examples"], [275, "examples"]], "Saving and Loading Models": [[121, "saving-and-loading-models"]], "What is a state_dict?": [[121, "what-is-a-state-dict"]], "Example:": [[121, "example"]], "Saving & Loading Model for Inference": [[121, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[121, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[121, "save-load-entire-model"]], "Saving an Exported Program": [[121, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[121, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[121, "save"], [121, "id1"], [121, "id3"]], "Load:": [[121, "load"], [121, "id2"], [121, "id4"]], "Saving Multiple Models in One File": [[121, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[121, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[121, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[121, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[121, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[121, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[121, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[123, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[124, "template-tutorial"]], "Steps": [[124, "steps"], [183, "steps"], [247, "steps"], [249, "steps"], [252, "steps"], [263, "steps"], [264, "steps"], [265, "steps"], [267, "steps"]], "(Optional) Additional Exercises": [[124, "optional-additional-exercises"]], "Text classification with the torchtext library": [[125, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[126, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[127, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[127, "load-data"]], "Visualize a few images": [[127, "visualize-a-few-images"]], "Training the model": [[127, "training-the-model"], [181, "training-the-model"]], "Visualizing the model predictions": [[127, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[127, "finetuning-the-convnet"]], "Train and evaluate": [[127, "train-and-evaluate"], [127, "id1"]], "ConvNet as fixed feature extractor": [[127, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[127, "inference-on-custom-images"]], "Further Learning": [[127, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[128, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[129, "language-translation-with-nn-transformer-and-torchtext"]], "Distributed and Parallel Training Tutorials": [[130, "distributed-and-parallel-training-tutorials"]], "Learn DDP": [[130, "learn-ddp"]], "Learn FSDP": [[130, "learn-fsdp"]], "Learn Tensor Parallel (TP)": [[130, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[130, "learn-devicemesh"]], "Learn RPC": [[130, "learn-rpc"]], "Custom Extensions": [[130, "custom-extensions"]], "Welcome to PyTorch Tutorials": [[131, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[131, "additional-resources"], [169, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[132, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[132, "how-fsdp-works"]], "How to use FSDP": [[132, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[133, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[133, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[133, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[133, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[133, "transformer-wrapping-policy"]], "Mixed Precision": [[133, "mixed-precision"]], "Intializing FSDP Model on Device": [[133, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[133, "sharding-strategy"]], "Backward Prefetch": [[133, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[133, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[134, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[134, "how-fsdp2-works"]], "How to use FSDP2": [[134, "how-to-use-fsdp2"]], "Model Initialization": [[134, "model-initialization"]], "Forward/Backward with Prefetching": [[134, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[134, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[134, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[134, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[134, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[134, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[135, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[135, "performance-benchmark"]], "Impact": [[135, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[135, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[135, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[135, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[136, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[136, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[136, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[136, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[136, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[136, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[136, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[137, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[137, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[137, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[137, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[137, "saved-tensors-hooks"]], "Some unconventional examples": [[137, "some-unconventional-examples"]], "Returning an int": [[137, "returning-an-int"]], "Returning a tuple": [[137, "returning-a-tuple"]], "Returning a str": [[137, "returning-a-str"]], "Saving tensors to CPU": [[137, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[137, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[138, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[138, "defining-the-torchx-app"]], "Setting up the Runner": [[138, "setting-up-the-runner"]], "Setting up the SearchSpace": [[138, "setting-up-the-searchspace"]], "Setting up Metrics": [[138, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[138, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[138, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[138, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[138, "configuring-the-scheduler"]], "Running the optimization": [[138, "running-the-optimization"]], "Evaluating the results": [[138, "evaluating-the-results"]], "Acknowledgments": [[138, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[139, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[139, "recommended-preparation"]], "Preparing Torch": [[139, "preparing-torch"]], "Preparing the Data": [[139, "preparing-the-data"], [140, "preparing-the-data"]], "Turning Names into Tensors": [[139, "turning-names-into-tensors"]], "Creating the Network": [[139, "creating-the-network"], [140, "creating-the-network"]], "Training the Network": [[139, "training-the-network"], [140, "training-the-network"]], "Plotting the Results": [[139, "plotting-the-results"]], "Evaluating the Results": [[139, "evaluating-the-results"]], "Exercises": [[139, "exercises"], [140, "exercises"], [179, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[140, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[140, "preparing-for-training"]], "Plotting the Losses": [[140, "plotting-the-losses"]], "Sampling the Network": [[140, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[141, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[141, "setup"], [148, "setup"], [149, "setup"], [161, "setup"], [169, "setup"], [183, "setup"], [195, "setup"], [249, "setup"], [252, "setup"], [263, "setup"], [264, "setup"], [265, "setup"], [267, "setup"], [278, "setup"]], "Basic usage": [[141, "basic-usage"]], "Inspecting the compiled autograd logs": [[141, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[141, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[141, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[141, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[142, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[142, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[142, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[142, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[142, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[142, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[143, "double-backward-with-custom-functions"]], "Saving the Inputs": [[143, "saving-the-inputs"]], "Saving the Outputs": [[143, "saving-the-outputs"]], "Saving Intermediate Results": [[143, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[143, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[143, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[144, "training-real-world-models-with-ddp"]], "Files used for training": [[144, "files-used-for-training"]], "Saving and Loading from the cloud": [[144, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[144, "using-mixed-precision"]], "When is DDP not enough?": [[144, "when-is-ddp-not-enough"]], "Multinode Training": [[145, "multinode-training"]], "Local and Global ranks": [[145, "local-and-global-ranks"]], "Heteregeneous Scaling": [[145, "heteregeneous-scaling"]], "Troubleshooting": [[145, "troubleshooting"], [246, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[146, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[146, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[146, "basic-use-case"]], "Skewed Processing Speeds": [[146, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[146, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[146, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[146, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[147, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[148, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[148, "point-to-point-communication"]], "Collective Communication": [[148, "collective-communication"]], "Distributed Training": [[148, "distributed-training"]], "Our Own Ring-Allreduce": [[148, "our-own-ring-allreduce"]], "Advanced Topics": [[148, "advanced-topics"]], "Communication Backends": [[148, "communication-backends"]], "Initialization Methods": [[148, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[149, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[149, "policy"], [173, "policy"]], "Convolutional network": [[149, "convolutional-network"]], "LSTM Module": [[149, "lstm-module"]], "MLP": [[149, "mlp"]], "Using the Q-Values to select an action": [[149, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[149, "using-the-model-for-the-loss"]], "DQN Loss": [[149, "dqn-loss"]], "Collector and replay buffer": [[149, "collector-and-replay-buffer"]], "Model ensembling": [[150, "model-ensembling"]], "What is model ensembling?": [[150, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[150, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[150, "performance"]], "Forced Alignment with Wav2Vec2": [[151, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[152, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[152, "basic-usage"], [187, "basic-usage"], [189, "basic-usage"], [235, "basic-usage"], [274, "basic-usage"]], "Usage with Modules": [[152, "usage-with-modules"]], "Using the functional Module API (beta)": [[152, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[152, "custom-autograd-function"]], "Functional API (beta)": [[152, "functional-api-beta"]], "Using the functional API with Modules": [[152, "using-the-functional-api-with-modules"]], "(beta) Building a Convolution/Batch Norm fuser in FX": [[153, "beta-building-a-convolution-batch-norm-fuser-in-fx"]], "Fusing Convolution with Batch Norm": [[153, "fusing-convolution-with-batch-norm"], [153, "id1"]], "FX Fusion Pass": [[153, "fx-fusion-pass"]], "Testing out our Fusion Pass": [[153, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[153, "benchmarking-our-fusion-on-resnet18"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[154, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[154, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[154, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[154, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[155, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[155, "debugging"]], "Get more logging information": [[155, "get-more-logging-information"]], "Determine component of error": [[155, "determine-component-of-error"]], "Compilation error": [[155, "compilation-error"]], "Accuracy debugging": [[155, "accuracy-debugging"]], "Performance profiling": [[155, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[156, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[156, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[156, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[156, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[156, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[156, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[157, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[157, "rl-definitions"]], "Initialize Environment": [[157, "initialize-environment"]], "Preprocess Environment": [[157, "preprocess-environment"]], "Agent": [[157, "agent"]], "Act": [[157, "act"]], "Cache and Recall": [[157, "cache-and-recall"]], "Learn": [[157, "learn"]], "Neural Network": [[157, "neural-network"]], "TD Estimate & TD Target": [[157, "td-estimate-td-target"]], "Updating the model": [[157, "updating-the-model"]], "Save checkpoint": [[157, "save-checkpoint"]], "Putting it all together": [[157, "putting-it-all-together"]], "Logging": [[157, "logging"]], "Let\u2019s play!": [[157, "lets-play"]], "Channels Last Memory Format in PyTorch": [[158, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[158, "memory-format-api"]], "Performance Gains": [[158, "performance-gains"]], "Converting existing models": [[158, "converting-existing-models"]], "Work to do": [[158, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[160, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[161, "neural-tangent-kernels"]], "Create a function version of the model": [[161, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[161, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[161, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[162, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[163, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[164, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[164, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[164, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[164, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[164, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[164, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[165, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[165, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[165, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[165, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[165, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[165, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[165, "concatenating-parametrizations"]], "Initializing parametrizations": [[165, "initializing-parametrizations"]], "Removing parametrizations": [[165, "removing-parametrizations"]], "Per-sample-gradients": [[166, "per-sample-gradients"]], "What is it?": [[166, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[166, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[166, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[167, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[167, "what-you-will-learn"], [197, "what-you-will-learn"], [276, "what-you-will-learn"]], "Preamble": [[167, "preamble"]], "Memory management basics": [[167, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[167, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[167, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[167, "a-pytorch-perspective"]], "pin_memory()": [[167, "pin-memory"]], "non_blocking=True": [[167, "non-blocking-true"]], "Synergies": [[167, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[167, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[167, "practical-recommendations"]], "Additional considerations": [[167, "additional-considerations"]], "Additional resources": [[167, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[168, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[169, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[169, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[169, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[169, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[170, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[170, "basics"], [175, "basics"]], "Step 1: Implement a Subclass of Backend": [[170, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[170, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[170, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[170, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[171, "pruning-tutorial"]], "Create a model": [[171, "create-a-model"]], "Inspect a Module": [[171, "inspect-a-module"]], "Pruning a Module": [[171, "pruning-a-module"]], "Iterative Pruning": [[171, "iterative-pruning"]], "Serializing a pruned model": [[171, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[171, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[171, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[171, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[171, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[172, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[172, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[172, "installing-pytorch-and-opencv"]], "Video Capture": [[172, "video-capture"]], "Image Preprocessing": [[172, "image-preprocessing"]], "Model Choices": [[172, "model-choices"]], "MobileNetV2: Quantization and JIT": [[172, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[172, "putting-it-together"]], "Troubleshooting: Performance": [[172, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[173, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[173, "define-hyperparameters"]], "Data collection parameters": [[173, "data-collection-parameters"]], "PPO parameters": [[173, "ppo-parameters"]], "Define an environment": [[173, "define-an-environment"]], "Normalization": [[173, "normalization"]], "Value network": [[173, "value-network"]], "Loss function": [[173, "loss-function"]], "Conclusion and next steps": [[173, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[174, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[174, "replay-memory"]], "DQN algorithm": [[174, "dqn-algorithm"]], "Q-network": [[174, "q-network"]], "Hyperparameters and utilities": [[174, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[175, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[175, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[175, "batch-processing-cartpole-solver"]], "Learn More": [[175, "learn-more"], [183, "learn-more"], [247, "learn-more"], [249, "learn-more"], [252, "learn-more"], [260, "learn-more"], [263, "learn-more"], [264, "learn-more"], [265, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[176, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[177, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[177, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[177, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[178, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[178, "fused-implementations"]], "Explicit Dispatcher Control": [[178, "explicit-dispatcher-control"]], "Hardware dependence": [[178, "hardware-dependence"]], "Causal Self Attention": [[178, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[178, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[178, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[178, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[179, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[179, "loading-data-files"]], "The Seq2Seq Model": [[179, "the-seq2seq-model"]], "The Encoder": [[179, "the-encoder"]], "The Decoder": [[179, "the-decoder"]], "Simple Decoder": [[179, "simple-decoder"]], "Attention Decoder": [[179, "attention-decoder"]], "Preparing Training Data": [[179, "preparing-training-data"]], "Training the Model": [[179, "training-the-model"]], "Plotting results": [[179, "plotting-results"]], "Evaluation": [[179, "evaluation"]], "Training and Evaluating": [[179, "training-and-evaluating"]], "Visualizing Attention": [[179, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[181, "spatial-transformer-networks-tutorial"]], "Loading the data": [[181, "loading-the-data"]], "Depicting spatial transformer networks": [[181, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[181, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[182, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[183, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[183, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[183, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[183, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[183, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[183, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[183, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[183, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[184, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[184, "tensorboard-setup"]], "2. Writing to TensorBoard": [[184, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[184, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[184, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[184, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[184, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[185, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[186, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[186, "setting-up-the-environment"]], "Importing related libraries": [[186, "importing-related-libraries"]], "Clean-up before a run": [[186, "clean-up-before-a-run"]], "Downloading the data": [[186, "downloading-the-data"]], "Reading the data": [[186, "reading-the-data"]], "Classify image patches": [[186, "classify-image-patches"]], "Define PatchPredictor model": [[186, "define-patchpredictor-model"]], "Predict patch labels": [[186, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[186, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[186, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[186, "where-to-go-from-here"]], "Introduction to torch.compile": [[187, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[187, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[187, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[187, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[187, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[187, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[188, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[189, "torch-export-tutorial"]], "Graph Breaks": [[189, "graph-breaks"]], "Non-Strict Export": [[189, "non-strict-export"]], "Control Flow Ops": [[189, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[189, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[189, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[189, "specialization"]], "Named Dims": [[189, "named-dims"]], "Constraint violations, suggested fixes": [[189, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[189, "data-dependent-errors"]], "Guards, torch._check()": [[189, "guards-torch-check"]], "Specialized values": [[189, "specialized-values"]], "Custom Ops": [[189, "custom-ops"]], "IR/Decompositions": [[189, "ir-decompositions"]], "ExportDB": [[189, "exportdb"]], "Running the Exported Program": [[189, "running-the-exported-program"]], "Introduction to TorchRec": [[190, "introduction-to-torchrec"], [191, "introduction-to-torchrec"]], "Install Dependencies": [[190, "install-dependencies"]], "Embeddings": [[190, "embeddings"]], "Embeddings in RecSys": [[190, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[190, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[190, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[190, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[190, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[190, "distributed-training-and-sharding"]], "Distributed Embeddings": [[190, "distributed-embeddings"]], "Sharding": [[190, "sharding"]], "Sharded Modules": [[190, "sharded-modules"]], "Planner": [[190, "planner"]], "Planner Result": [[190, "planner-result"]], "GPU Training with LazyAwaitable": [[190, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[190, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[190, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[190, "distributedmodelparallel"]], "Sharding Best Practices": [[190, "sharding-best-practices"]], "Adding in the Optimizer": [[190, "adding-in-the-optimizer"]], "Optimizer Classes": [[190, "optimizer-classes"]], "Fused optimizer in TorchRec": [[190, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[190, "adding-an-optimizer-to-embeddingbagcollection"]], "Inference": [[190, "inference"]], "Quantization": [[190, "quantization"]], "Shard": [[190, "shard"]], "Compilation": [[190, "compilation"]], "TorchVision Object Detection Finetuning Tutorial": [[192, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[192, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[192, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[192, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[192, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[192, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[192, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[192, "putting-everything-together"]], "Testing forward() method (Optional)": [[192, "testing-forward-method-optional"]], "Wrapping up": [[192, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[193, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[193, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[193, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[193, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[193, "multiheadattention"]], "Utilities": [[193, "utilities"]], "GPT-style layer": [[193, "gpt-style-layer"]], "Going one step further": [[193, "going-one-step-further"]], "Cross Attention": [[193, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[193, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[193, "flexattention-njt"]], "Packed Projection": [[193, "packed-projection"]], "Input projection for MultiheadAttention": [[193, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[193, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[193, "extended-examples"]], "(prototype) PyTorch BackendConfig Tutorial": [[194, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[194, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[194, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[194, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[194, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[194, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[194, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[194, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[194, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[195, "introduction-to-context-parallel"]], "Enable Context Parallel": [[195, "enable-context-parallel"]], "Select Rotation Approach": [[195, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[196, "profiling-pytorch-rpc-based-workloads"], [233, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[197, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[197, "enabling-flight-recorder"]], "Additional Settings": [[197, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[197, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[197, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[197, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[197, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[198, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[198, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[199, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[199, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[200, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[200, "prerequisites"], [210, "prerequisites"]], "Enabling the API": [[200, "enabling-the-api"]], "Example code": [[200, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[201, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[201, "software-installation"]], "Install a Compiler": [[201, "install-a-compiler"]], "Set Up Environment": [[201, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[201, "id1"]], "Intel Compiler": [[201, "id2"]], "LLVM Compiler": [[201, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[203, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[204, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[205, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[206, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[206, "introduction-and-motivation"]], "Preparation": [[206, "preparation"], [207, "preparation"], [208, "preparation"]], "Simpler Code with MaskedTensor": [[206, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[206, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[206, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[207, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[207, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[207, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[208, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[208, "using-maskedtensor"]], "Construction": [[208, "construction"]], "Accessing the data and mask": [[208, "accessing-the-data-and-mask"]], "Indexing and slicing": [[208, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[208, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[208, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[208, "torch-where"]], "Another torch.where": [[208, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[208, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[208, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[208, "safe-softmax"]], "Implementing missing torch.nan* operators": [[208, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[209, "prototype-maskedtensor-sparsity"]], "Principles": [[209, "principles"]], "Sparse COO tensors": [[209, "sparse-coo-tensors"]], "Sparse CSR tensors": [[209, "sparse-csr-tensors"]], "Supported Operations": [[209, "supported-operations"]], "Unary": [[209, "unary"]], "Binary": [[209, "binary"]], "Reductions": [[209, "reductions"]], "MaskedTensor Helper Methods": [[209, "maskedtensor-helper-methods"]], "Appendix": [[209, "appendix"]], "Sparse COO Construction": [[209, "sparse-coo-construction"]], "Sparse CSR Construction": [[209, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[210, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[210, "activating-the-max-autotune-mode"]], "Example": [[210, "example"]], "Getting Started with Nested Tensors": [[211, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[211, "nested-tensor-initialization"]], "Nested Tensor Operations": [[211, "nested-tensor-operations"]], "Why Nested Tensor": [[211, "why-nested-tensor"]], "See Also": [[211, "see-also"], [225, "see-also"], [274, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[212, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[213, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[213, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[213, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[213, "capture-fx-graph"]], "2. Apply Quantization": [[213, "apply-quantization"]], "3. Lower into OpenVINO representation": [[213, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[213, "optional-improve-quantized-model-metrics"]], "PyTorch Prototype Recipes": [[214, "pytorch-prototype-recipes"]], "Autoloading Out-of-Tree Extension": [[215, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[215, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[215, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[216, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[216, "id1"]], "Skipping Module Parameter Initialization": [[218, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[218, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[218, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[218, "implementation-details"]], "Model Freezing in TorchScript": [[219, "model-freezing-in-torchscript"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[220, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[221, "torch-vmap"]], "So, what is vmap?": [[221, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[222, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[222, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[222, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[222, "desktop-build"]], "Vulkan SDK": [[222, "vulkan-sdk"]], "Android build": [[222, "android-build"]], "Model preparation": [[222, "model-preparation"]], "Using Vulkan backend in code": [[222, "using-vulkan-backend-in-code"]], "C++ API": [[222, "c-api"]], "Python API": [[222, "python-api"]], "Android Java API": [[222, "android-java-api"]], "Building android test app with Vulkan": [[222, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[222, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[223, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[223, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[223, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[223, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[223, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[224, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[225, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[225, "model-setup"], [226, "model-setup"], [234, "model-setup"]], "Setting up and running the optimizer benchmark": [[225, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[226, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[226, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[226, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[227, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[227, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[227, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[228, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[228, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[228, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[229, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[229, "how-dcp-works"]], "How to use DCP": [[229, "how-to-use-dcp"]], "Saving": [[229, "saving"]], "Loading": [[229, "loading"]], "Formats": [[229, "formats"]], "Getting Started with CommDebugMode": [[230, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[230, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[230, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[231, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[231, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[231, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[231, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[231, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Distributed Optimizer with TorchScript support": [[232, "distributed-optimizer-with-torchscript-support"]], "What is Distributed Optimizer?": [[232, "what-is-distributed-optimizer"]], "What is Distributed Optimizer with TorchScript support?": [[232, "what-is-distributed-optimizer-with-torchscript-support"]], "How to write a customized distributed optimizer with TorchScript support?": [[232, "how-to-write-a-customized-distributed-optimizer-with-torchscript-support"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[234, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[234, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[234, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[235, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[235, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[235, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[235, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[235, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[236, "intel-extension-for-pytorch"]], "Features": [[236, "features"], [237, "features"]], "Examples \u2013 CPU": [[236, "examples-cpu"]], "Float32": [[236, "float32"], [236, "id1"], [236, "id3"], [236, "id6"], [236, "id9"], [236, "id12"]], "BFloat16": [[236, "bfloat16"], [236, "id2"], [236, "id4"], [236, "id7"], [236, "id10"], [236, "id13"]], "Inference - Imperative Mode": [[236, "inference-imperative-mode"], [236, "id8"]], "Inference - TorchScript Mode": [[236, "inference-torchscript-mode"], [236, "id11"]], "Examples \u2013 GPU": [[236, "examples-gpu"]], "Float16": [[236, "float16"], [236, "id14"]], "C++ (CPU only)": [[236, "c-cpu-only"]], "Model Zoo (CPU only)": [[236, "model-zoo-cpu-only"]], "Tutorials": [[236, "tutorials"], [237, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[237, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[237, "usages"]], "Model": [[237, "model"]], "Accuracy driven quantization": [[237, "accuracy-driven-quantization"]], "Quantization aware training": [[237, "quantization-aware-training"]], "Performance only quantization": [[237, "performance-only-quantization"]], "Quantization outputs": [[237, "quantization-outputs"]], "Deployment": [[237, "deployment"]], "Loading data in PyTorch": [[238, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[239, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[240, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[241, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[242, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[243, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[243, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[243, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[243, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[243, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[243, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[243, "configure-profiling-for-xpu"]], "Read Profiling Result": [[243, "read-profiling-result"]], "Read XPU Profiling Result": [[243, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[243, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[244, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[245, "model-interpretability-using-captum"]], "Before you begin": [[245, "before-you-begin"]], "Computing Attribution": [[245, "computing-attribution"]], "Visualizing the Results": [[245, "visualizing-the-results"]], "Final Notes": [[245, "final-notes"]], "Automatic Mixed Precision": [[246, "automatic-mixed-precision"]], "A simple network": [[246, "a-simple-network"]], "Default Precision": [[246, "default-precision"]], "Adding torch.autocast": [[246, "adding-torch-autocast"]], "Adding GradScaler": [[246, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[246, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[246, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[246, "saving-resuming"]], "Inference/Evaluation": [[246, "inference-evaluation"]], "Advanced topics": [[246, "advanced-topics"]], "Speedup with Amp is minor": [[246, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[246, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[246, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[247, "syntaxerror"]], "1. Defining functions to benchmark": [[247, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[247, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[247, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[247, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[247, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[247, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[247, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[247, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[248, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[249, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[249, "import-necessary-libraries-for-loading-our-data"], [263, "import-necessary-libraries-for-loading-our-data"], [264, "import-necessary-libraries-for-loading-our-data"], [265, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[249, "define-and-initialize-the-neural-network"], [264, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[249, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[249, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[250, "pytorch-recipes"], [266, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[251, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[251, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[251, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[251, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[252, "pytorch-profiler"]], "1. Import all necessary libraries": [[252, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[252, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[252, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[252, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[252, "using-tracing-functionality"]], "6. Examining stack traces": [[252, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[252, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[253, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[254, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[255, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[256, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[257, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[259, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[259, "torch-utils-swap-tensors"]], "Application to nn.Module": [[259, "application-to-nn-module"]], "nn.Module.to() and related methods": [[259, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[259, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[260, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[260, "using-tensorboard-in-pytorch"]], "Log scalars": [[260, "log-scalars"]], "Run TensorBoard": [[260, "run-tensorboard"]], "Timer quick start": [[261, "timer-quick-start"]], "1. Defining a Timer": [[261, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[261, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[261, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[261, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[261, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[261, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[261, "wrapping-up"]], "8. Footnotes": [[261, "footnotes"]], "Performance Tuning Guide": [[262, "performance-tuning-guide"]], "General optimizations": [[262, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[262, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[262, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[262, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[262, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[262, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[262, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[262, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[262, "disable-debugging-apis"]], "CPU specific optimizations": [[262, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[262, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[262, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[262, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[262, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[262, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[262, "gpu-specific-optimizations"]], "Enable Tensor cores": [[262, "enable-tensor-cores"]], "Use CUDA Graphs": [[262, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[262, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[262, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[262, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[262, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[262, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[262, "distributed-optimizations"]], "Use efficient data-parallel backend": [[262, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[262, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[262, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[262, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[263, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[263, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[263, "save-model-a"]], "4. Load into model B": [[263, "load-into-model-b"]], "What is a state_dict in PyTorch": [[264, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[264, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[264, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[265, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[265, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[265, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[265, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[265, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[267, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[268, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[270, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[270, "usage-example"]], "Train FP32": [[270, "train-fp32"]], "Train BF16": [[270, "train-bf16"]], "Inference FP32": [[270, "inference-fp32"]], "Inference BF16": [[270, "inference-bf16"]], "Compile Time Caching Configuration": [[271, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[271, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[271, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[271, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[271, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[271, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[271, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[271, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[271, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[272, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[272, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[272, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[272, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[272, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[273, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[273, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[274, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[274, "advanced-usage"]], "Composability": [[274, "composability"]], "Wrapping Triton kernels with triton_op": [[274, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[274, "adding-training-support"]], "Adding a CPU Fallback": [[274, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[274, "adding-a-flopcounter-formula"]], "Limitations": [[274, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[275, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[275, "description"]], "Preventing recompilation": [[275, "preventing-recompilation"]], "Measuring performance gains": [[275, "measuring-performance-gains"]], "Crashing sooner": [[275, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[276, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[276, "model-compilation"]], "Model Inference in Python": [[276, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[276, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[277, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[277, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[277, "video-classification"]], "Error: Static batch size": [[277, "error-static-batch-size"]], "Solution": [[277, "solution"], [277, "id1"], [277, "id2"], [277, "id3"]], "Automatic Speech Recognition": [[277, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[277, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[277, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[277, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[277, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[277, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[278, "beta-using-torch-logs-python-api-with-torch-compile"]], "TorchScript for Deployment": [[279, "torchscript-for-deployment"]], "What is TorchScript?": [[279, "what-is-torchscript"]], "How to Export Your Model": [[279, "how-to-export-your-model"]], "Loading TorchScript Models in C++": [[279, "loading-torchscript-models-in-c"]], "Building and Running Your C++ Inference Engine": [[279, "building-and-running-your-c-inference-engine"]], "Important Resources": [[279, "important-resources"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[280, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[280, "what-you-will-learn"]], "Introduction of the Optimizations": [[280, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[280, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[280, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[280, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[280, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[280, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[280, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[281, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[281, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[281, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})