Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_class_pt2", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "distributed/home", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/python_extension_autoload", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "sg_execution_times"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_class_pt2.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "distributed/home.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/python_extension_autoload.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "sg_execution_times.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "&lt;no title&gt;", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "Supporting Custom C++ Classes in torch.compile/torch.export", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Distributed and Parallel Training Tutorials", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "PyTorch Prototype Recipes", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "PyTorch Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Computation times"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 45, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 91, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 242, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "ha": [0, 1, 2, 4, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 45, 46, 47, 50, 53, 54, 66, 72, 79, 80, 87, 89, 92, 93, 94, 95, 97, 98, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 116, 119, 120, 123, 125, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 155, 157, 159, 160, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 192, 193, 195, 196, 198, 199, 202, 205, 206, 207, 208, 209, 211, 213, 215, 216, 218, 219, 225, 226, 229, 232, 235, 236, 244, 246, 247, 251, 258, 260, 261, 266, 267, 272, 273, 275, 276, 279, 280], "been": [0, 1, 3, 7, 10, 16, 17, 20, 28, 29, 30, 31, 32, 33, 45, 54, 73, 79, 80, 87, 89, 92, 93, 94, 95, 97, 102, 108, 112, 123, 125, 126, 129, 132, 135, 140, 142, 143, 144, 147, 148, 149, 151, 154, 155, 159, 160, 162, 163, 164, 167, 170, 171, 172, 173, 177, 181, 182, 183, 184, 185, 188, 189, 190, 193, 195, 196, 202, 205, 206, 209, 211, 215, 216, 219, 225, 232, 235, 236, 242, 246, 258, 259, 267, 275, 276, 279], "deprec": [0, 5, 6, 10, 11, 24, 25, 26, 45, 114, 123, 125, 126, 128, 129, 132, 134, 135, 147, 159, 162, 167, 182, 189, 196, 231, 232, 237, 253, 254, 255, 256, 267, 278], "redirect": [0, 10, 28, 29, 30, 31, 32, 33, 45, 62, 63, 80, 81, 82, 83, 84, 85, 93, 123, 125, 126, 129, 147, 151, 159, 162, 167, 181, 184, 188, 191, 196, 202, 203, 204, 212, 219, 223, 232, 238, 239, 240, 241, 243, 253, 254, 255, 256, 267], "3": [0, 2, 3, 4, 6, 7, 8, 10, 16, 19, 20, 22, 27, 28, 29, 30, 31, 32, 33, 35, 36, 38, 45, 46, 56, 62, 63, 66, 67, 72, 73, 76, 79, 80, 81, 82, 83, 84, 85, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 123, 124, 125, 126, 129, 132, 133, 134, 136, 141, 142, 143, 147, 148, 149, 151, 154, 156, 157, 159, 160, 161, 162, 163, 165, 167, 170, 171, 172, 174, 175, 176, 177, 181, 184, 185, 187, 188, 189, 190, 192, 193, 195, 197, 199, 201, 202, 203, 204, 211, 212, 216, 218, 219, 221, 222, 223, 225, 229, 230, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 250, 252, 253, 254, 255, 256, 258, 261, 267, 269, 273, 275, 276], "second": [0, 1, 4, 6, 7, 10, 11, 14, 15, 16, 18, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 40, 41, 43, 44, 45, 46, 47, 48, 50, 52, 53, 55, 56, 62, 63, 72, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 123, 124, 125, 126, 127, 129, 131, 132, 135, 137, 138, 139, 140, 141, 142, 143, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 172, 173, 177, 178, 180, 181, 182, 183, 184, 187, 188, 189, 190, 192, 193, 197, 199, 202, 203, 204, 206, 207, 208, 209, 211, 212, 219, 220, 223, 225, 226, 229, 233, 236, 238, 239, 240, 241, 243, 246, 247, 250, 252, 253, 254, 255, 256, 258, 260, 261, 266, 267, 272, 273, 274, 275, 277, 279], "go": [1, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 66, 67, 69, 71, 72, 73, 76, 77, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 131, 133, 137, 138, 139, 140, 142, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 177, 178, 180, 182, 183, 186, 187, 189, 190, 192, 194, 198, 199, 206, 207, 208, 209, 211, 220, 225, 228, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "end": [1, 4, 6, 7, 8, 11, 14, 15, 16, 18, 20, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 58, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 131, 133, 135, 136, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 180, 182, 183, 186, 187, 189, 190, 192, 193, 195, 198, 199, 206, 207, 208, 209, 211, 215, 216, 220, 225, 233, 235, 236, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 274, 275, 277, 280], "download": [1, 7, 14, 15, 16, 18, 20, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 132, 133, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 180, 182, 183, 186, 187, 189, 190, 192, 193, 198, 199, 201, 206, 207, 208, 209, 211, 220, 221, 225, 233, 235, 236, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 269, 271, 272, 273, 274, 275, 277], "full": [1, 3, 4, 6, 7, 11, 13, 14, 15, 16, 18, 20, 23, 27, 34, 35, 36, 38, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 169, 170, 172, 173, 174, 177, 178, 180, 182, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 206, 207, 208, 209, 211, 213, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 274, 275, 277, 279], "exampl": [1, 2, 3, 4, 7, 8, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 64, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 86, 87, 88, 90, 92, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 114, 116, 117, 118, 119, 122, 124, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 192, 194, 195, 198, 199, 201, 206, 207, 208, 209, 211, 213, 216, 217, 218, 220, 221, 222, 224, 225, 227, 228, 229, 230, 233, 234, 236, 242, 244, 245, 246, 247, 248, 250, 251, 252, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 271, 272, 273, 275, 276, 277, 280, 281], "author": [1, 4, 6, 13, 14, 15, 16, 19, 20, 23, 27, 38, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 79, 86, 87, 89, 91, 98, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 132, 133, 134, 135, 136, 138, 139, 140, 141, 144, 145, 146, 148, 149, 153, 154, 156, 157, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 186, 187, 189, 193, 194, 195, 197, 199, 200, 201, 210, 213, 215, 216, 220, 221, 224, 225, 227, 228, 229, 230, 233, 234, 245, 250, 251, 258, 261, 266, 270, 271, 272, 273, 274, 275, 276, 277], "vincent": [1, 16, 149, 166, 172], "moen": [1, 16, 149, 166, 172], "separ": [1, 4, 6, 7, 11, 18, 36, 53, 56, 89, 94, 101, 102, 103, 104, 112, 119, 136, 150, 154, 156, 164, 166, 175, 178, 185, 192, 194, 206, 211, 246, 261, 271, 274, 277], "rl": [1, 131, 172, 173, 174, 179, 281], "algorithm": [1, 6, 7, 12, 13, 14, 34, 39, 44, 53, 56, 60, 73, 86, 92, 95, 97, 103, 105, 106, 107, 108, 112, 120, 131, 133, 136, 138, 142, 148, 149, 156, 166, 169, 172, 175, 180, 195, 213, 224, 225, 244, 248, 261], "variou": [1, 4, 11, 17, 43, 50, 52, 53, 54, 87, 89, 92, 97, 101, 109, 112, 119, 121, 138, 148, 153, 155, 170, 172, 175, 176, 185, 190, 193, 197, 199, 208, 211, 222, 229, 233, 260, 264, 270, 273, 276], "piec": [1, 6, 11, 16, 89, 97, 112, 171, 172, 176, 185, 192, 194], "assembl": [1, 11, 53, 97], "script": [1, 6, 7, 8, 12, 14, 15, 16, 18, 23, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 59, 64, 72, 76, 77, 79, 92, 94, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 177, 178, 180, 185, 187, 189, 190, 192, 193, 197, 199, 206, 207, 208, 209, 221, 225, 233, 234, 235, 242, 245, 246, 247, 250, 251, 252, 258, 261, 265, 266, 272, 273, 274, 275, 277], "collect": [1, 7, 13, 16, 17, 22, 23, 39, 46, 48, 53, 59, 64, 97, 102, 103, 106, 111, 131, 132, 133, 136, 146, 149, 153, 169, 173, 176, 189, 190, 195, 197, 216, 228, 229, 230, 242, 260, 261, 265], "final": [1, 7, 12, 13, 14, 16, 17, 19, 20, 23, 27, 44, 46, 50, 53, 56, 79, 89, 92, 94, 97, 99, 102, 103, 104, 109, 112, 114, 117, 119, 121, 127, 131, 132, 133, 134, 136, 138, 139, 140, 142, 143, 148, 153, 154, 155, 156, 160, 163, 165, 168, 170, 172, 173, 174, 175, 176, 178, 182, 183, 189, 190, 194, 195, 197, 199, 206, 209, 213, 216, 236], "function": [1, 3, 4, 6, 7, 9, 11, 12, 15, 16, 18, 19, 20, 22, 27, 36, 40, 41, 43, 44, 46, 52, 53, 55, 57, 59, 64, 65, 68, 69, 71, 72, 73, 86, 87, 94, 95, 97, 101, 102, 108, 111, 113, 116, 117, 119, 121, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 148, 149, 150, 153, 154, 156, 163, 164, 166, 168, 169, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 200, 206, 207, 208, 209, 211, 213, 216, 218, 220, 221, 224, 225, 234, 235, 236, 242, 245, 247, 248, 252, 258, 260, 262, 265, 268, 270, 273, 274, 275, 277, 280, 281], "ar": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 59, 60, 64, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 246, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 275, 276, 277, 279, 280], "state": [1, 4, 6, 8, 11, 12, 13, 16, 20, 40, 41, 47, 53, 56, 57, 59, 92, 95, 97, 99, 103, 104, 105, 109, 112, 120, 121, 132, 133, 139, 140, 142, 144, 146, 149, 150, 152, 156, 163, 165, 170, 172, 173, 174, 175, 176, 178, 182, 189, 197, 198, 209, 215, 216, 227, 228, 233, 244, 245, 250, 263, 265], "contain": [1, 2, 7, 11, 12, 14, 16, 17, 20, 35, 36, 40, 44, 50, 53, 54, 59, 71, 72, 73, 86, 89, 94, 95, 99, 102, 103, 108, 109, 112, 113, 120, 121, 127, 131, 132, 133, 137, 138, 139, 144, 146, 149, 164, 168, 170, 172, 173, 174, 176, 177, 178, 180, 182, 183, 185, 186, 189, 190, 192, 193, 194, 197, 198, 209, 216, 218, 221, 226, 236, 242, 245, 248, 250, 258, 260, 261, 263, 275, 276, 279], "trainabl": [1, 7, 72, 104, 106], "paramet": [1, 6, 12, 13, 14, 16, 17, 19, 20, 23, 27, 34, 36, 37, 38, 41, 43, 44, 46, 47, 50, 52, 53, 55, 56, 71, 72, 79, 89, 92, 94, 97, 101, 103, 104, 106, 108, 111, 112, 117, 119, 120, 127, 130, 131, 132, 133, 134, 136, 138, 139, 144, 146, 148, 149, 150, 152, 154, 155, 156, 160, 163, 164, 165, 176, 177, 180, 182, 183, 185, 189, 190, 199, 206, 213, 214, 216, 224, 226, 227, 228, 234, 235, 236, 242, 245, 249, 250, 251, 252, 257, 258, 263, 264, 265, 269, 273, 279, 280, 281], "tutori": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 37, 40, 45, 46, 47, 48, 49, 55, 57, 59, 60, 64, 79, 80, 81, 82, 83, 84, 85, 86, 88, 92, 95, 96, 99, 101, 103, 105, 107, 108, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 125, 126, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 165, 166, 167, 168, 169, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 185, 186, 187, 190, 191, 195, 196, 197, 198, 199, 201, 202, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 219, 220, 221, 222, 224, 225, 227, 228, 229, 230, 232, 233, 234, 244, 245, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 265, 267, 276, 277, 279, 280, 281], "guid": [1, 6, 8, 11, 20, 64, 86, 89, 117, 131, 132, 148, 157, 171, 179, 182, 189, 190, 199, 213, 216, 233, 242, 244, 246, 249, 257, 265, 279, 281], "you": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 27, 33, 34, 35, 36, 38, 39, 41, 43, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 71, 72, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 124, 127, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 195, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 220, 221, 222, 224, 226, 227, 228, 229, 230, 234, 235, 242, 245, 246, 247, 248, 250, 251, 259, 261, 262, 263, 264, 265, 266, 270, 271, 273, 274, 276, 277, 280], "through": [1, 3, 6, 7, 11, 12, 15, 16, 17, 19, 23, 27, 34, 35, 39, 40, 46, 50, 53, 56, 58, 59, 88, 90, 92, 94, 97, 99, 101, 103, 104, 106, 107, 108, 109, 112, 113, 114, 116, 117, 120, 124, 130, 131, 133, 134, 135, 136, 137, 139, 141, 142, 143, 148, 150, 153, 154, 155, 156, 157, 160, 163, 165, 166, 168, 169, 172, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 190, 198, 199, 200, 201, 206, 208, 213, 216, 220, 226, 227, 228, 234, 235, 236, 245, 246, 251, 259, 264, 276, 279, 281], "from": [1, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 27, 34, 36, 39, 40, 41, 42, 43, 47, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 86, 87, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 122, 124, 127, 131, 132, 133, 134, 135, 136, 137, 138, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 182, 183, 186, 187, 189, 193, 194, 195, 197, 199, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 221, 226, 227, 228, 230, 233, 234, 235, 236, 242, 245, 246, 248, 249, 251, 257, 258, 260, 261, 263, 265, 268, 271, 272, 273, 275, 276, 277, 279, 280, 281], "ground": [1, 16, 47, 79, 192], "up": [1, 3, 6, 7, 11, 12, 16, 18, 20, 22, 23, 34, 36, 39, 53, 56, 59, 64, 75, 78, 86, 89, 94, 95, 97, 98, 99, 102, 104, 105, 106, 108, 109, 111, 112, 114, 119, 131, 132, 133, 134, 135, 136, 139, 140, 144, 145, 146, 148, 149, 150, 153, 154, 160, 163, 165, 166, 168, 171, 172, 173, 174, 175, 178, 182, 183, 187, 189, 190, 193, 200, 211, 213, 214, 216, 222, 226, 227, 229, 230, 235, 246, 251, 261, 264, 265, 275, 276, 277, 279, 280, 281], "us": [1, 4, 5, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 34, 35, 36, 39, 40, 41, 43, 44, 47, 48, 50, 52, 53, 55, 56, 58, 59, 60, 61, 64, 66, 67, 69, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 116, 120, 124, 127, 130, 131, 133, 135, 136, 137, 138, 139, 140, 143, 145, 148, 153, 154, 155, 156, 157, 160, 161, 163, 164, 166, 168, 170, 171, 172, 173, 178, 179, 180, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 206, 207, 209, 211, 213, 214, 215, 216, 218, 220, 222, 224, 225, 227, 231, 233, 234, 235, 245, 246, 247, 248, 249, 252, 257, 258, 260, 263, 264, 265, 266, 268, 270, 271, 272, 274, 276, 278, 281], "To": [1, 4, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 23, 34, 35, 39, 40, 41, 44, 50, 53, 54, 55, 61, 69, 77, 86, 87, 89, 92, 95, 101, 103, 104, 105, 106, 108, 109, 111, 112, 113, 116, 120, 121, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 152, 154, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 182, 183, 185, 189, 190, 193, 195, 197, 199, 200, 201, 206, 208, 209, 210, 214, 216, 218, 221, 229, 230, 234, 235, 236, 242, 245, 246, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 269, 273, 275, 276, 277, 279], "aim": [1, 7, 104, 107, 135, 163, 173, 176, 209, 236], "we": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 59, 66, 67, 69, 72, 73, 79, 86, 87, 89, 92, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 242, 244, 246, 248, 250, 251, 252, 258, 259, 260, 262, 263, 264, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "focus": [1, 3, 95, 104, 107, 169, 178, 190, 236], "which": [1, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 34, 35, 38, 39, 40, 41, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 59, 60, 64, 66, 67, 71, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 157, 160, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 189, 190, 192, 193, 194, 195, 198, 199, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 222, 225, 226, 227, 228, 229, 230, 233, 236, 242, 244, 245, 246, 247, 248, 250, 251, 258, 260, 261, 262, 263, 264, 266, 270, 271, 273, 274, 275, 276, 277, 279, 280], "i": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 62, 63, 64, 66, 67, 69, 72, 76, 77, 79, 81, 82, 83, 84, 85, 86, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 119, 120, 122, 124, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 160, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 218, 221, 223, 224, 225, 227, 228, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 277, 278, 279, 281], "rel": [1, 6, 7, 95, 103, 127, 137, 155, 160, 176, 178, 193, 200, 236, 265], "straightforward": [1, 6, 7, 19, 20, 53, 94, 97, 102, 104, 105, 154, 166, 189, 193, 265], "deep": [1, 7, 14, 15, 38, 50, 53, 56, 73, 76, 77, 97, 98, 99, 102, 104, 108, 110, 111, 120, 130, 131, 139, 140, 141, 142, 146, 154, 155, 156, 164, 170, 173, 178, 185, 190, 222, 224, 225, 236, 242, 248, 260, 261, 266, 279, 281], "determinist": [1, 13, 16, 134, 149, 172, 173, 260, 261], "gradient": [1, 4, 7, 12, 13, 15, 16, 18, 19, 39, 46, 47, 50, 53, 56, 60, 64, 66, 67, 69, 72, 76, 77, 94, 97, 99, 102, 103, 104, 105, 106, 108, 112, 120, 127, 131, 132, 133, 136, 137, 139, 141, 143, 144, 146, 148, 152, 155, 156, 163, 170, 172, 174, 175, 176, 179, 183, 185, 190, 206, 220, 228, 244, 249, 257, 265, 280, 281], "simpl": [1, 3, 4, 6, 7, 11, 14, 17, 19, 20, 23, 27, 50, 53, 55, 58, 60, 71, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 113, 116, 120, 121, 130, 131, 132, 137, 138, 141, 143, 148, 150, 154, 155, 160, 165, 166, 168, 170, 172, 174, 175, 176, 177, 179, 180, 182, 187, 189, 190, 195, 210, 213, 216, 222, 224, 225, 228, 230, 233, 235, 236, 246, 250, 259, 260, 261, 263, 273, 276, 277, 280, 281], "continu": [1, 6, 53, 57, 89, 92, 97, 102, 104, 109, 112, 131, 134, 135, 136, 140, 144, 148, 172, 176, 178, 182, 187, 197, 198, 206, 208, 209, 216, 229, 246, 248, 251, 261, 262, 263, 264, 266], "control": [1, 11, 12, 16, 34, 36, 39, 46, 70, 74, 87, 89, 94, 104, 114, 115, 116, 117, 124, 131, 133, 134, 135, 137, 138, 148, 152, 164, 172, 173, 174, 187, 215, 229, 242, 246, 265, 266, 268, 281], "It": [1, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 27, 28, 29, 30, 31, 32, 34, 44, 46, 47, 48, 50, 53, 55, 56, 79, 80, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 116, 121, 127, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 160, 163, 164, 165, 166, 170, 173, 174, 176, 178, 180, 181, 182, 184, 185, 188, 189, 190, 192, 193, 194, 195, 197, 211, 216, 218, 220, 226, 227, 228, 230, 246, 247, 259, 261, 264, 269, 271, 273, 275, 276, 279], "consist": [1, 3, 4, 7, 16, 17, 27, 34, 35, 36, 39, 46, 104, 106, 112, 134, 136, 144, 153, 156, 160, 163, 172, 173, 177, 178, 182, 186, 190, 193, 194, 195, 197, 208, 209, 225, 246, 251, 261], "learn": [1, 4, 7, 15, 16, 18, 20, 21, 34, 35, 36, 39, 40, 41, 43, 44, 46, 48, 50, 53, 55, 56, 57, 58, 59, 60, 64, 73, 76, 77, 79, 86, 88, 90, 91, 92, 94, 95, 97, 98, 99, 102, 103, 104, 108, 110, 111, 112, 113, 114, 116, 117, 121, 122, 124, 131, 132, 133, 135, 138, 139, 140, 141, 144, 145, 146, 148, 149, 154, 155, 157, 161, 163, 164, 165, 168, 170, 171, 175, 178, 179, 180, 183, 185, 186, 189, 190, 192, 193, 195, 198, 199, 206, 207, 208, 209, 210, 211, 214, 215, 216, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 236, 242, 244, 250, 258, 261, 265, 266, 269, 270, 271, 274, 276, 280, 281], "parametr": [1, 2, 20, 131, 172, 179, 216, 281], "an": [1, 2, 3, 6, 7, 8, 9, 11, 13, 14, 15, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 46, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 66, 69, 71, 73, 79, 86, 87, 89, 91, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 116, 119, 120, 127, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 192, 193, 194, 195, 198, 199, 200, 201, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 222, 224, 226, 227, 228, 230, 233, 234, 235, 236, 242, 244, 245, 246, 247, 248, 249, 251, 252, 257, 258, 260, 261, 263, 265, 266, 268, 270, 273, 274, 275, 276, 277, 281], "action": [1, 23, 99, 103, 108, 112, 132, 133, 156, 170, 172, 173, 174, 175, 176, 182, 195, 251, 260, 265, 276], "pair": [1, 7, 50, 53, 56, 95, 139, 140, 142, 165, 172, 173, 178, 182, 192, 194, 225, 242, 260], "output": [1, 2, 3, 4, 6, 7, 8, 12, 13, 14, 16, 18, 19, 20, 23, 34, 35, 39, 43, 46, 47, 48, 50, 52, 53, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 124, 127, 132, 133, 134, 136, 137, 139, 140, 141, 146, 148, 149, 150, 152, 154, 155, 157, 160, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 183, 185, 187, 189, 192, 193, 194, 195, 197, 199, 201, 210, 211, 213, 216, 221, 222, 224, 226, 229, 233, 234, 235, 244, 246, 248, 251, 252, 259, 261, 269, 277, 280], "maxim": [1, 16, 56, 79, 86, 104, 106, 138, 156, 173, 187, 261, 279], "given": [1, 4, 7, 11, 12, 14, 16, 18, 20, 34, 36, 39, 43, 44, 46, 52, 53, 56, 59, 79, 86, 89, 95, 99, 103, 104, 107, 108, 111, 112, 121, 133, 139, 140, 148, 150, 152, 155, 156, 157, 165, 170, 172, 173, 175, 176, 178, 187, 189, 190, 192, 198, 209, 216, 234, 246, 252, 261, 272, 276, 280], "certain": [1, 6, 7, 12, 13, 17, 53, 59, 95, 108, 130, 133, 136, 137, 142, 152, 155, 157, 172, 177, 187, 189, 190, 197, 206, 209, 211, 244, 248, 272, 273, 276, 279], "what": [1, 2, 3, 4, 6, 11, 16, 18, 22, 23, 34, 35, 36, 46, 48, 49, 57, 58, 59, 64, 79, 91, 92, 95, 97, 99, 102, 103, 105, 106, 108, 109, 111, 113, 117, 122, 124, 131, 133, 135, 136, 137, 138, 140, 141, 144, 145, 148, 149, 156, 157, 163, 168, 170, 172, 173, 174, 177, 183, 185, 186, 189, 190, 192, 193, 195, 198, 208, 215, 224, 227, 245, 246, 247, 248, 249, 250, 257, 260, 261, 265, 276, 281], "how": [1, 2, 4, 6, 7, 8, 11, 12, 14, 16, 18, 19, 20, 22, 23, 34, 36, 39, 40, 41, 46, 47, 48, 50, 53, 54, 55, 56, 59, 60, 61, 79, 86, 89, 91, 92, 94, 95, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 117, 119, 127, 130, 131, 135, 137, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 154, 156, 157, 160, 161, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 216, 222, 225, 227, 229, 233, 234, 236, 244, 245, 246, 249, 250, 251, 257, 258, 260, 261, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 281], "write": [1, 4, 8, 9, 11, 12, 18, 21, 47, 53, 64, 67, 101, 105, 106, 107, 108, 112, 120, 122, 127, 131, 135, 137, 138, 143, 144, 146, 149, 152, 154, 157, 160, 164, 166, 169, 172, 175, 176, 178, 182, 185, 187, 189, 193, 197, 198, 209, 213, 217, 220, 221, 228, 245, 246, 247, 248, 252, 261, 276, 281], "custom": [1, 7, 11, 13, 20, 21, 53, 56, 67, 70, 74, 95, 112, 119, 122, 131, 134, 138, 149, 156, 166, 172, 175, 179, 185, 186, 187, 190, 193, 194, 213, 216, 218, 233, 235, 236, 242, 245, 249, 258, 261, 265, 269, 272, 273, 281], "its": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 34, 35, 39, 44, 46, 50, 53, 55, 56, 57, 59, 72, 86, 94, 95, 97, 99, 102, 104, 106, 108, 109, 111, 112, 114, 119, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 148, 149, 150, 152, 153, 154, 156, 157, 163, 164, 168, 170, 172, 173, 174, 175, 176, 178, 182, 183, 187, 189, 190, 199, 208, 209, 211, 215, 216, 218, 221, 222, 228, 230, 235, 242, 245, 246, 248, 250, 251, 258, 261, 262, 263, 264, 280], "includ": [1, 2, 3, 4, 6, 7, 8, 11, 16, 17, 18, 27, 39, 40, 43, 52, 53, 57, 59, 64, 73, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 112, 114, 116, 117, 119, 136, 138, 139, 140, 141, 143, 144, 146, 148, 149, 154, 156, 166, 168, 169, 170, 172, 175, 178, 182, 183, 186, 187, 189, 190, 192, 193, 197, 199, 206, 208, 210, 213, 215, 221, 226, 228, 229, 234, 235, 236, 242, 244, 245, 246, 248, 251, 258, 261, 271, 273, 274, 279], "design": [1, 6, 7, 16, 20, 27, 56, 60, 79, 89, 95, 111, 112, 140, 146, 149, 166, 172, 173, 174, 176, 177, 182, 183, 189, 194, 195, 206, 207, 208, 213, 216, 220, 222, 234, 246, 248, 261, 269, 273, 276, 279], "effici": [1, 6, 12, 14, 17, 20, 34, 53, 55, 79, 86, 102, 104, 108, 111, 132, 133, 136, 138, 146, 148, 149, 155, 160, 170, 172, 176, 177, 182, 185, 190, 197, 200, 209, 210, 211, 216, 217, 227, 246, 250, 269, 273, 279, 281], "store": [1, 6, 7, 19, 20, 23, 34, 35, 36, 40, 41, 43, 46, 52, 55, 57, 72, 92, 94, 101, 102, 105, 106, 108, 111, 112, 114, 120, 135, 137, 138, 140, 148, 149, 154, 156, 157, 164, 166, 168, 169, 170, 172, 173, 174, 175, 176, 178, 189, 190, 195, 199, 209, 210, 216, 251, 260, 261, 270, 271, 277], "them": [1, 2, 3, 4, 6, 7, 11, 12, 13, 14, 16, 20, 22, 23, 34, 36, 39, 46, 47, 50, 52, 53, 55, 57, 59, 64, 72, 92, 94, 95, 97, 99, 101, 102, 103, 104, 107, 108, 109, 111, 112, 113, 114, 116, 117, 120, 121, 131, 133, 134, 136, 138, 139, 140, 142, 143, 148, 149, 150, 153, 154, 155, 160, 163, 164, 165, 166, 170, 171, 173, 174, 175, 176, 185, 186, 187, 189, 192, 193, 195, 199, 208, 210, 211, 215, 216, 218, 225, 234, 235, 236, 245, 246, 250, 258, 260, 261, 265, 270, 271, 279], "trajectori": [1, 16, 149, 172, 173], "transit": [1, 16, 89, 91, 105, 149, 166, 173], "assum": [1, 2, 7, 8, 11, 12, 16, 17, 23, 38, 46, 47, 55, 58, 79, 94, 97, 98, 104, 105, 107, 109, 112, 117, 136, 137, 139, 140, 148, 149, 164, 170, 172, 175, 177, 178, 192, 208, 209, 211, 228, 250, 251, 258, 260, 276], "have": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 61, 72, 73, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 220, 221, 222, 225, 227, 228, 229, 230, 233, 234, 235, 242, 245, 246, 247, 248, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 273, 274, 275, 276, 279, 280], "complet": [1, 6, 7, 17, 38, 89, 92, 94, 97, 105, 106, 108, 117, 131, 133, 135, 136, 138, 139, 141, 143, 148, 166, 168, 170, 171, 172, 175, 185, 187, 192, 197, 199, 208, 209, 213, 244, 261, 275, 276], "ppo": [1, 131, 179, 281], "give": [1, 2, 6, 7, 13, 16, 20, 39, 48, 50, 53, 54, 56, 79, 94, 95, 97, 99, 104, 106, 108, 109, 111, 112, 121, 140, 144, 150, 153, 154, 155, 156, 165, 171, 175, 178, 182, 185, 187, 189, 190, 193, 207, 211, 216, 234, 246], "compon": [1, 6, 7, 11, 12, 16, 56, 89, 99, 104, 108, 121, 131, 138, 139, 141, 149, 156, 172, 176, 180, 182, 186, 187, 189, 193, 211, 222, 271], "depend": [1, 6, 7, 11, 13, 50, 54, 56, 79, 86, 89, 94, 95, 101, 102, 104, 105, 109, 112, 131, 136, 138, 139, 142, 143, 148, 149, 152, 153, 155, 156, 166, 169, 171, 172, 175, 182, 187, 193, 199, 208, 214, 221, 222, 224, 234, 246, 247, 252, 258, 261, 266, 279], "tensordict": [1, 16, 149, 156, 166, 172], "nn": [1, 2, 6, 7, 8, 13, 14, 15, 16, 17, 19, 20, 22, 23, 39, 40, 41, 46, 47, 48, 50, 53, 59, 70, 73, 74, 92, 94, 97, 101, 103, 106, 111, 116, 119, 122, 127, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 146, 149, 152, 155, 160, 164, 165, 168, 172, 173, 174, 175, 176, 177, 183, 185, 186, 187, 189, 190, 194, 195, 207, 210, 211, 216, 218, 224, 226, 227, 228, 230, 234, 235, 236, 242, 245, 248, 249, 251, 252, 257, 261, 262, 263, 265, 266, 269, 277, 280, 281], "tensordictmodul": [1, 149, 172], "although": [1, 14, 19, 46, 53, 105, 106, 111, 112, 114, 117, 135, 137, 156, 164, 166, 175, 187, 189, 234], "should": [1, 2, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 19, 22, 23, 34, 46, 47, 53, 54, 55, 56, 57, 59, 73, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 127, 131, 133, 134, 135, 137, 138, 141, 143, 146, 148, 149, 150, 153, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 183, 185, 186, 187, 189, 190, 192, 197, 198, 199, 201, 206, 207, 208, 213, 215, 220, 221, 227, 228, 234, 242, 245, 246, 251, 259, 260, 261, 264, 265, 272, 276, 279], "suffici": [1, 7, 53, 56, 104, 105, 127, 144, 146, 163, 166, 189], "transpar": [1, 14, 95, 106, 149, 175, 221, 229, 235, 270], "understood": [1, 4, 18, 273], "without": [1, 6, 7, 11, 12, 16, 18, 20, 34, 53, 57, 59, 99, 102, 104, 105, 116, 131, 132, 134, 136, 137, 140, 141, 148, 152, 153, 155, 156, 157, 163, 166, 169, 170, 171, 172, 173, 174, 177, 182, 185, 189, 198, 206, 208, 209, 211, 215, 216, 225, 227, 230, 235, 245, 250, 252, 258, 261, 271, 272, 274, 280], "understand": [1, 2, 4, 7, 9, 17, 46, 47, 56, 61, 86, 89, 94, 96, 97, 98, 99, 101, 102, 103, 105, 108, 112, 113, 117, 127, 131, 134, 137, 138, 139, 140, 143, 148, 152, 154, 166, 178, 185, 189, 190, 198, 207, 210, 227, 230, 242, 244, 259, 263, 266, 270, 271, 273, 275, 276, 279], "class": [1, 2, 6, 7, 11, 12, 15, 17, 23, 27, 34, 36, 38, 40, 41, 47, 50, 53, 56, 57, 69, 71, 79, 87, 89, 95, 97, 99, 101, 102, 103, 106, 107, 111, 112, 117, 120, 121, 127, 131, 132, 133, 134, 138, 139, 141, 143, 144, 146, 148, 149, 153, 154, 156, 157, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 183, 185, 189, 192, 194, 197, 206, 207, 208, 210, 211, 218, 226, 227, 228, 230, 234, 236, 242, 244, 246, 248, 252, 260, 264, 266, 276, 277], "do": [1, 2, 3, 4, 6, 7, 9, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 34, 35, 41, 50, 53, 54, 55, 56, 58, 66, 67, 73, 89, 92, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 120, 121, 124, 131, 132, 136, 137, 138, 139, 145, 146, 148, 149, 150, 153, 154, 155, 156, 160, 163, 164, 166, 169, 170, 171, 172, 173, 176, 178, 183, 185, 189, 190, 192, 193, 195, 197, 199, 207, 208, 209, 211, 215, 216, 218, 220, 228, 236, 242, 245, 246, 247, 250, 258, 259, 260, 261, 262, 264, 265, 273, 274, 275], "sota": 1, "implement": [1, 2, 3, 6, 7, 8, 12, 13, 14, 15, 16, 17, 20, 27, 35, 36, 38, 46, 48, 50, 53, 55, 59, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 89, 94, 97, 103, 111, 112, 113, 120, 130, 131, 134, 136, 137, 139, 141, 143, 148, 149, 150, 152, 154, 155, 156, 157, 160, 165, 166, 168, 170, 172, 173, 176, 179, 182, 186, 189, 190, 192, 193, 194, 195, 197, 200, 207, 209, 210, 211, 213, 215, 216, 221, 222, 227, 234, 235, 236, 246, 250, 258, 261, 269, 270, 272, 273, 276, 279, 281], "rather": [1, 15, 53, 56, 73, 79, 89, 99, 102, 104, 111, 112, 121, 131, 140, 142, 154, 164, 165, 166, 172, 185, 189, 193, 197, 199, 206, 222, 246, 261, 270, 274], "provid": [1, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 27, 35, 36, 47, 53, 55, 56, 59, 60, 79, 86, 87, 89, 92, 94, 95, 97, 102, 103, 104, 105, 106, 112, 113, 116, 117, 120, 121, 130, 131, 133, 135, 136, 137, 138, 144, 145, 146, 148, 149, 153, 154, 155, 156, 166, 170, 171, 172, 174, 175, 177, 182, 185, 186, 187, 189, 190, 192, 193, 197, 208, 209, 214, 216, 218, 220, 222, 228, 229, 233, 234, 235, 236, 242, 244, 245, 246, 248, 250, 251, 259, 260, 261, 266, 271, 274, 275, 276, 279], "high": [1, 2, 6, 7, 17, 23, 47, 53, 56, 57, 59, 61, 64, 86, 89, 99, 106, 111, 114, 119, 131, 132, 133, 136, 138, 141, 142, 148, 172, 179, 182, 183, 185, 189, 190, 200, 209, 213, 214, 226, 260, 261, 273, 279, 280, 281], "level": [1, 2, 4, 6, 7, 18, 20, 23, 47, 53, 57, 59, 61, 64, 72, 99, 107, 114, 120, 131, 132, 133, 136, 141, 144, 146, 148, 152, 154, 157, 161, 177, 178, 179, 182, 185, 187, 189, 190, 193, 213, 214, 216, 226, 229, 230, 236, 270, 280, 281], "illustr": [1, 23, 35, 47, 50, 60, 127, 136, 137, 138, 150, 166, 173, 183, 185, 192, 208, 209, 230, 242, 244, 251, 258], "": [1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 16, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 61, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 157, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 200, 201, 206, 208, 209, 211, 214, 215, 216, 218, 220, 222, 224, 226, 227, 228, 229, 230, 234, 244, 245, 246, 248, 250, 251, 258, 259, 260, 261, 263, 264, 265, 266, 270, 271, 273, 279, 280], "librari": [1, 3, 4, 6, 7, 8, 9, 11, 14, 16, 18, 22, 36, 40, 47, 54, 55, 61, 64, 92, 95, 112, 116, 117, 131, 135, 138, 142, 143, 153, 166, 168, 169, 171, 172, 176, 182, 190, 193, 197, 201, 210, 219, 221, 222, 230, 234, 235, 242, 265, 266, 273, 275], "featur": [1, 7, 8, 12, 13, 14, 16, 23, 36, 40, 44, 53, 54, 55, 56, 86, 87, 89, 94, 97, 99, 101, 102, 104, 105, 111, 112, 116, 120, 131, 132, 137, 141, 149, 154, 155, 156, 163, 166, 169, 171, 172, 176, 177, 183, 187, 189, 192, 193, 200, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 226, 233, 234, 242, 244, 248, 250, 258, 260, 261, 264, 265, 266, 270, 273, 276], "context": [1, 2, 6, 11, 16, 19, 20, 46, 53, 79, 94, 99, 111, 112, 119, 130, 131, 136, 141, 152, 164, 166, 172, 175, 176, 177, 178, 182, 187, 193, 198, 200, 210, 214, 216, 221, 226, 229, 245, 247, 250, 251, 252, 261, 274, 276, 277, 279], "bash": [1, 22, 156, 173, 242], "pip3": [1, 22, 54, 133, 149, 166, 172, 173, 182, 190, 199], "instal": [1, 4, 6, 7, 11, 20, 27, 38, 54, 55, 57, 59, 61, 92, 98, 101, 112, 116, 132, 133, 136, 139, 140, 144, 145, 148, 149, 152, 153, 156, 161, 166, 169, 172, 173, 174, 178, 182, 185, 187, 192, 197, 198, 199, 215, 221, 234, 242, 244, 246, 248, 251, 260, 262, 263, 264, 266, 273, 279], "mujoco": [1, 149, 172], "glfw": 1, "cuda": [1, 7, 11, 12, 13, 14, 17, 20, 22, 23, 27, 35, 40, 43, 46, 47, 48, 57, 58, 59, 66, 67, 77, 79, 87, 92, 102, 106, 112, 119, 120, 121, 127, 131, 132, 133, 134, 135, 136, 139, 142, 144, 145, 146, 148, 157, 163, 164, 168, 169, 172, 173, 174, 175, 176, 177, 182, 185, 187, 190, 195, 197, 198, 199, 200, 210, 211, 216, 224, 225, 227, 228, 230, 233, 245, 246, 247, 251, 265, 271, 274, 275, 276, 277, 280], "avail": [1, 2, 3, 4, 6, 7, 12, 14, 17, 20, 22, 23, 34, 35, 36, 39, 40, 41, 43, 46, 47, 52, 53, 54, 55, 56, 57, 66, 79, 92, 95, 97, 99, 102, 103, 104, 108, 112, 114, 120, 127, 133, 137, 139, 148, 149, 152, 156, 157, 166, 170, 171, 172, 173, 176, 177, 178, 182, 185, 186, 189, 190, 192, 197, 213, 214, 216, 220, 226, 228, 235, 242, 244, 246, 247, 248, 261, 262, 263, 264, 266, 275, 277], "seri": [1, 7, 17, 56, 57, 58, 59, 60, 86, 96, 99, 102, 103, 130, 131, 135, 139, 140, 144, 145, 153, 161, 170, 172, 178, 193, 208, 234, 279], "easili": [1, 6, 14, 23, 27, 35, 48, 64, 79, 95, 102, 103, 104, 112, 119, 120, 121, 133, 136, 138, 139, 146, 148, 153, 154, 160, 170, 172, 173, 176, 185, 187, 189, 192, 195, 199, 213, 214, 218, 227, 228, 230, 236, 246, 263], "reusabl": [1, 7], "swappabl": 1, "signatur": [1, 6, 11, 12, 16, 17, 117, 148, 164, 175, 186, 189, 277], "main": [1, 3, 6, 7, 13, 19, 23, 39, 56, 57, 59, 92, 104, 112, 117, 120, 132, 133, 139, 144, 148, 154, 166, 173, 174, 175, 176, 180, 189, 190, 192, 193, 199, 200, 220, 221, 227, 235, 236, 242, 261, 277, 280], "characterist": [1, 16, 46, 141, 153, 155, 156, 171, 177, 189, 276], "thei": [1, 3, 6, 7, 11, 12, 14, 16, 18, 19, 23, 35, 36, 43, 47, 52, 53, 56, 59, 79, 86, 89, 94, 97, 99, 102, 103, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 133, 137, 138, 139, 140, 143, 146, 148, 149, 154, 155, 157, 163, 164, 172, 173, 174, 176, 178, 185, 189, 190, 193, 194, 201, 206, 207, 208, 209, 211, 218, 222, 228, 230, 235, 246, 250, 251, 259, 260, 263, 264], "copi": [1, 6, 7, 14, 22, 38, 43, 47, 48, 54, 59, 79, 86, 94, 98, 103, 104, 119, 121, 124, 131, 132, 137, 142, 146, 148, 149, 153, 156, 164, 175, 182, 185, 186, 189, 195, 197, 213, 221, 226, 227, 233, 234, 250, 261], "loss_modul": [1, 172], "whatev": [1, 11, 97, 102, 103, 106, 108, 112, 121, 242], "need": [1, 3, 4, 6, 7, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 64, 66, 67, 71, 86, 87, 92, 95, 97, 101, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 121, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 185, 186, 187, 189, 190, 192, 194, 197, 198, 199, 206, 210, 211, 215, 216, 218, 221, 226, 227, 228, 230, 234, 235, 236, 242, 245, 246, 248, 251, 258, 259, 260, 261, 262, 263, 264, 266, 270, 274, 275, 276], "follow": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 34, 35, 36, 38, 39, 43, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 79, 86, 87, 89, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 121, 124, 127, 131, 132, 133, 134, 136, 137, 138, 141, 144, 145, 146, 148, 149, 153, 154, 155, 156, 157, 161, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 200, 207, 209, 210, 211, 213, 215, 216, 218, 220, 221, 228, 230, 234, 235, 242, 245, 248, 250, 251, 252, 258, 259, 266, 269, 270, 271, 273, 275, 276, 279], "convent": [1, 16, 56, 112, 121, 149, 185, 193, 246], "torch": [1, 2, 3, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 35, 36, 37, 39, 40, 41, 43, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 59, 61, 64, 66, 67, 71, 77, 79, 89, 92, 94, 95, 97, 101, 102, 103, 104, 106, 109, 111, 114, 116, 117, 119, 120, 122, 127, 131, 132, 133, 134, 135, 136, 140, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 190, 192, 194, 195, 197, 199, 200, 206, 207, 209, 210, 211, 214, 215, 216, 217, 218, 221, 222, 225, 226, 227, 228, 230, 231, 234, 235, 236, 242, 247, 248, 249, 251, 252, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 278, 280, 281], "receiv": [1, 7, 16, 19, 59, 92, 102, 108, 120, 148, 166, 168, 172, 174, 175, 176, 187, 190, 197, 245, 248, 261], "input": [1, 2, 4, 6, 7, 8, 11, 12, 14, 15, 16, 18, 19, 34, 35, 38, 39, 43, 46, 47, 48, 50, 52, 53, 60, 64, 66, 67, 69, 71, 72, 73, 76, 77, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 130, 132, 133, 136, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 152, 154, 155, 156, 157, 160, 163, 165, 168, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 192, 194, 195, 199, 209, 211, 213, 216, 220, 221, 222, 224, 226, 228, 234, 235, 236, 244, 245, 248, 251, 252, 264, 270, 274, 276, 277, 279], "all": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 34, 35, 36, 39, 40, 43, 44, 46, 47, 48, 50, 53, 54, 55, 56, 57, 59, 60, 64, 79, 86, 89, 94, 95, 97, 99, 102, 103, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 157, 160, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 206, 207, 209, 211, 213, 214, 215, 216, 218, 220, 221, 226, 229, 233, 235, 236, 242, 244, 246, 248, 250, 252, 258, 259, 260, 262, 263, 264, 265, 266, 270, 271, 273, 274, 276, 277, 279, 280, 281], "necessari": [1, 4, 6, 7, 11, 12, 14, 17, 22, 23, 27, 41, 47, 56, 57, 59, 89, 92, 102, 103, 105, 112, 121, 132, 133, 136, 142, 146, 156, 168, 172, 174, 175, 176, 182, 189, 194, 195, 208, 211, 213, 215, 245, 261, 266, 274], "inform": [1, 2, 4, 6, 9, 11, 12, 16, 18, 34, 48, 53, 57, 79, 86, 92, 94, 99, 101, 102, 104, 108, 109, 111, 121, 132, 137, 138, 139, 140, 146, 148, 149, 152, 153, 156, 171, 172, 173, 175, 177, 178, 182, 183, 185, 187, 189, 190, 192, 194, 197, 198, 199, 209, 211, 213, 218, 220, 221, 222, 228, 229, 230, 242, 245, 246, 260, 261, 263, 264, 274, 277, 279], "return": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 22, 23, 35, 36, 40, 43, 48, 50, 53, 55, 56, 79, 86, 94, 95, 101, 102, 103, 104, 106, 108, 109, 112, 114, 117, 119, 121, 132, 133, 134, 136, 140, 141, 143, 146, 148, 149, 152, 154, 155, 156, 157, 160, 164, 168, 169, 171, 172, 173, 174, 175, 176, 177, 182, 183, 185, 187, 189, 190, 192, 194, 200, 201, 206, 208, 210, 211, 213, 215, 216, 220, 221, 224, 226, 227, 228, 230, 234, 235, 236, 242, 244, 246, 248, 251, 252, 260, 271, 274, 276, 277], "replay_buff": [1, 172], "sampl": [1, 4, 7, 11, 35, 36, 39, 40, 43, 47, 50, 52, 53, 55, 56, 59, 64, 92, 97, 99, 101, 102, 104, 121, 127, 131, 132, 139, 142, 148, 155, 156, 163, 164, 172, 173, 174, 176, 179, 185, 189, 192, 193, 211, 220, 224, 244, 251, 260, 261, 274, 281], "loss_dict": 1, "instanc": [1, 6, 7, 13, 14, 16, 35, 41, 48, 57, 58, 59, 64, 86, 92, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 113, 120, 132, 133, 137, 138, 141, 144, 145, 146, 149, 154, 156, 166, 168, 172, 174, 175, 176, 187, 215, 218, 233, 234, 235, 242, 245, 251, 259, 260, 261, 266, 276, 279, 280], "written": [1, 4, 6, 7, 8, 11, 12, 16, 18, 89, 101, 107, 112, 113, 143, 149, 153, 160, 164, 165, 168, 177, 182, 185, 197, 198, 199, 206, 235, 259, 271, 273, 277], "under": [1, 6, 11, 22, 23, 34, 50, 53, 54, 56, 58, 60, 64, 101, 104, 106, 119, 120, 134, 136, 137, 141, 148, 155, 156, 164, 166, 170, 176, 182, 183, 192, 194, 198, 207, 209, 226, 228, 229, 236, 242, 245, 270, 273], "loss_": 1, "smth": 1, "where": [1, 3, 4, 7, 11, 13, 14, 15, 16, 19, 20, 22, 27, 34, 36, 50, 53, 55, 64, 67, 72, 87, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 120, 131, 133, 136, 138, 139, 140, 143, 145, 146, 148, 150, 154, 157, 160, 163, 164, 165, 166, 168, 171, 172, 173, 174, 175, 176, 177, 178, 183, 187, 189, 190, 192, 193, 194, 195, 197, 199, 206, 209, 210, 211, 216, 227, 230, 242, 245, 246, 248, 258, 259, 260, 264, 265, 276, 279], "string": [1, 4, 8, 11, 17, 53, 102, 114, 138, 139, 140, 149, 170, 172, 178, 185, 190, 197, 242, 246, 260], "describ": [1, 6, 7, 11, 12, 16, 17, 19, 23, 41, 43, 52, 53, 56, 64, 79, 97, 104, 114, 117, 124, 130, 148, 160, 168, 172, 173, 176, 182, 185, 189, 190, 214, 218, 230, 233, 246, 279], "addit": [1, 2, 4, 6, 8, 11, 13, 17, 20, 23, 54, 59, 79, 95, 102, 104, 109, 112, 114, 119, 133, 136, 137, 139, 146, 148, 150, 154, 157, 170, 174, 175, 178, 183, 186, 187, 189, 193, 206, 207, 208, 209, 213, 214, 215, 216, 221, 227, 234, 235, 246, 251, 261, 272, 273, 275, 276, 279], "kei": [1, 4, 7, 8, 11, 13, 16, 17, 53, 86, 107, 111, 114, 119, 121, 124, 133, 134, 135, 138, 149, 156, 166, 171, 172, 174, 177, 178, 182, 183, 185, 189, 190, 193, 195, 211, 215, 216, 224, 225, 233, 235, 250, 259, 261, 262, 272, 273, 277], "mai": [1, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 39, 53, 54, 56, 72, 79, 89, 94, 95, 97, 99, 102, 106, 113, 117, 120, 121, 132, 135, 136, 137, 138, 141, 142, 143, 148, 149, 150, 152, 154, 155, 160, 163, 164, 166, 171, 172, 175, 178, 182, 185, 187, 189, 193, 194, 197, 208, 211, 216, 218, 222, 224, 228, 230, 246, 251, 261, 264, 271, 273, 274, 276], "metric": [1, 20, 92, 101, 102, 104, 119, 133, 182, 185, 192, 216, 236, 242, 246, 259], "log": [1, 22, 39, 53, 54, 56, 57, 101, 105, 106, 109, 111, 112, 132, 135, 138, 145, 171, 172, 174, 176, 182, 183, 185, 189, 190, 210, 225, 229, 236, 265, 271, 277, 279], "dure": [1, 3, 11, 14, 16, 22, 23, 34, 35, 39, 40, 41, 53, 56, 66, 67, 89, 94, 97, 99, 102, 103, 104, 106, 111, 112, 113, 120, 121, 131, 132, 133, 134, 136, 137, 140, 141, 142, 143, 144, 146, 149, 153, 154, 160, 164, 171, 172, 173, 174, 176, 182, 186, 187, 189, 192, 197, 198, 201, 210, 213, 214, 218, 221, 228, 235, 242, 251, 258, 259, 266], "reason": [1, 6, 7, 11, 16, 17, 18, 20, 34, 56, 86, 94, 97, 104, 106, 109, 112, 121, 127, 137, 142, 148, 154, 172, 177, 178, 189, 190, 197, 199, 208, 216, 228, 246, 249, 250, 257, 265, 275, 277, 281], "independ": [1, 53, 111, 112, 155, 156, 160, 175, 206, 215, 233], "let": [1, 2, 4, 6, 7, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 27, 35, 39, 46, 47, 48, 50, 53, 55, 56, 72, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 121, 127, 134, 136, 138, 143, 146, 148, 149, 150, 153, 154, 155, 157, 160, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 199, 201, 206, 207, 211, 216, 224, 228, 230, 234, 244, 246, 248, 250, 251, 258, 259, 260, 261, 264, 266, 275, 276], "user": [1, 3, 6, 8, 16, 20, 22, 23, 27, 44, 47, 53, 54, 86, 87, 89, 95, 104, 108, 117, 124, 133, 134, 135, 136, 139, 140, 146, 154, 157, 166, 174, 176, 177, 178, 182, 185, 189, 190, 192, 193, 194, 195, 206, 207, 208, 209, 214, 215, 216, 222, 226, 227, 228, 229, 230, 235, 236, 242, 251, 265, 266, 268, 270, 271, 272, 277, 279, 281], "differ": [1, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 27, 34, 39, 43, 50, 52, 53, 55, 56, 64, 77, 79, 86, 87, 89, 92, 95, 97, 99, 102, 103, 104, 105, 106, 111, 112, 114, 131, 132, 133, 134, 136, 138, 139, 140, 142, 145, 146, 148, 150, 153, 154, 155, 157, 160, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 185, 186, 187, 189, 190, 193, 194, 197, 199, 200, 206, 207, 208, 209, 210, 211, 216, 218, 221, 227, 228, 229, 230, 233, 234, 242, 246, 249, 251, 257, 259, 260, 261, 265, 266, 271, 274, 276, 279, 280, 281], "set": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 27, 34, 39, 41, 46, 47, 50, 52, 53, 54, 56, 57, 59, 64, 66, 67, 72, 79, 86, 87, 91, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 116, 120, 121, 127, 131, 132, 133, 134, 136, 139, 140, 141, 144, 145, 146, 148, 149, 154, 156, 163, 164, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 186, 187, 189, 190, 192, 193, 206, 208, 210, 211, 213, 215, 216, 221, 222, 227, 228, 230, 234, 235, 236, 242, 246, 247, 250, 258, 260, 262, 264, 271, 277, 279], "sum": [1, 2, 4, 6, 9, 13, 16, 18, 22, 23, 35, 46, 53, 56, 76, 86, 94, 95, 105, 106, 108, 112, 120, 132, 133, 134, 140, 141, 143, 148, 155, 172, 173, 174, 175, 176, 182, 187, 189, 190, 207, 224, 226, 227, 228, 236, 246, 264, 280], "can": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 41, 43, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 58, 59, 61, 64, 72, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 201, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 220, 221, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "simpli": [1, 3, 6, 7, 11, 15, 23, 46, 47, 53, 57, 89, 97, 108, 111, 120, 121, 135, 136, 138, 140, 143, 148, 154, 155, 163, 169, 170, 172, 173, 174, 175, 178, 180, 182, 183, 187, 189, 190, 193, 194, 195, 197, 207, 215, 218, 220, 228, 235, 246, 260, 262, 263, 264], "done": [1, 4, 6, 7, 11, 12, 16, 19, 20, 23, 53, 58, 86, 89, 99, 102, 104, 105, 106, 112, 132, 133, 136, 137, 140, 142, 149, 150, 153, 154, 156, 157, 166, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 183, 185, 189, 190, 197, 199, 216, 218, 235, 250, 261, 275, 277], "via": [1, 3, 4, 6, 7, 9, 19, 20, 22, 41, 58, 59, 79, 89, 104, 131, 132, 133, 136, 138, 148, 149, 155, 164, 171, 172, 177, 183, 185, 187, 189, 190, 192, 193, 198, 201, 210, 213, 216, 226, 230, 234, 235, 236, 242, 250, 258, 259, 261, 265, 270, 273], "loss_val": [1, 172], "item": [1, 2, 7, 12, 13, 17, 36, 43, 53, 72, 101, 112, 120, 121, 124, 132, 133, 134, 139, 140, 148, 149, 171, 172, 174, 175, 176, 183, 185, 189, 194, 211, 236, 245, 261], "startswith": [1, 87], "parent": [1, 4, 16, 112, 230], "As": [1, 2, 3, 6, 7, 11, 12, 13, 14, 16, 19, 23, 41, 46, 53, 54, 56, 79, 89, 92, 95, 97, 99, 102, 103, 104, 112, 114, 120, 121, 132, 133, 134, 135, 136, 137, 138, 146, 148, 149, 152, 153, 154, 155, 156, 163, 164, 166, 168, 170, 172, 173, 174, 175, 176, 177, 182, 185, 186, 189, 190, 192, 193, 194, 199, 209, 211, 215, 222, 226, 229, 234, 236, 242, 246, 250, 261, 266, 273, 279, 280], "mani": [1, 2, 6, 7, 12, 16, 17, 18, 20, 22, 34, 35, 39, 40, 53, 55, 56, 69, 73, 79, 86, 94, 95, 97, 99, 102, 104, 106, 107, 108, 112, 114, 116, 120, 133, 136, 138, 142, 148, 150, 155, 157, 160, 165, 166, 172, 174, 175, 178, 186, 187, 189, 190, 193, 208, 216, 220, 235, 236, 244, 245, 246, 248, 261, 266, 273, 279], "other": [1, 6, 7, 8, 11, 12, 13, 16, 20, 23, 34, 35, 38, 43, 47, 50, 52, 53, 56, 57, 59, 60, 61, 72, 73, 79, 86, 87, 92, 94, 95, 97, 102, 104, 106, 108, 109, 111, 112, 120, 121, 124, 132, 134, 135, 136, 139, 140, 142, 144, 145, 146, 148, 149, 152, 153, 154, 155, 156, 160, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 183, 186, 187, 189, 190, 192, 193, 194, 197, 199, 206, 207, 208, 209, 211, 216, 218, 228, 230, 245, 246, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 266, 270, 271, 272, 273, 274, 280], "expect": [1, 4, 6, 7, 12, 13, 16, 48, 50, 53, 55, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 113, 121, 127, 135, 138, 142, 146, 149, 155, 156, 163, 164, 170, 171, 172, 173, 174, 175, 177, 185, 189, 190, 192, 194, 197, 213, 229, 235, 242, 244, 245, 246, 251, 258, 261, 274, 276, 280], "ani": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 34, 44, 46, 48, 50, 53, 55, 57, 59, 94, 97, 99, 102, 104, 105, 107, 108, 111, 112, 114, 116, 121, 130, 132, 134, 136, 137, 139, 141, 143, 144, 148, 150, 152, 153, 156, 157, 163, 164, 165, 166, 168, 171, 172, 173, 175, 176, 180, 182, 185, 186, 189, 190, 198, 200, 206, 207, 208, 209, 210, 213, 216, 218, 222, 224, 225, 227, 228, 230, 233, 242, 245, 248, 250, 252, 258, 260, 264, 270, 271, 273, 274, 275, 277, 279], "similar": [1, 3, 4, 6, 11, 12, 13, 16, 17, 23, 43, 52, 53, 86, 87, 95, 97, 99, 102, 104, 105, 111, 112, 117, 120, 136, 139, 143, 148, 149, 164, 172, 174, 175, 176, 177, 178, 182, 183, 185, 189, 192, 194, 198, 206, 207, 208, 209, 210, 211, 234, 245, 246, 260, 261, 270, 276, 280], "structur": [1, 6, 7, 11, 16, 21, 22, 23, 35, 40, 41, 43, 52, 53, 56, 57, 89, 94, 97, 99, 103, 104, 105, 109, 114, 121, 131, 141, 144, 150, 153, 156, 157, 164, 165, 170, 172, 176, 183, 185, 187, 192, 209, 214, 220, 259, 273, 275, 281], "format": [1, 6, 14, 20, 23, 44, 101, 112, 116, 121, 131, 132, 133, 135, 148, 153, 154, 171, 174, 176, 179, 182, 183, 185, 190, 192, 206, 208, 209, 216, 222, 235, 236, 244, 246, 265, 281], "make": [1, 4, 6, 7, 11, 12, 14, 16, 22, 23, 35, 39, 40, 44, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 61, 72, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 110, 111, 112, 113, 116, 117, 121, 124, 127, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 146, 148, 149, 153, 154, 155, 156, 163, 164, 166, 169, 170, 172, 173, 174, 175, 176, 178, 183, 185, 186, 187, 189, 190, 192, 193, 195, 197, 199, 206, 207, 208, 209, 211, 220, 226, 228, 229, 230, 234, 235, 244, 245, 246, 250, 252, 259, 260, 261, 265, 270, 271, 273, 276, 277, 281], "possibl": [1, 2, 4, 6, 7, 9, 11, 12, 16, 17, 20, 94, 95, 99, 102, 105, 108, 116, 134, 137, 141, 142, 143, 149, 150, 152, 153, 155, 156, 166, 171, 172, 174, 175, 178, 186, 187, 189, 190, 192, 193, 197, 211, 216, 218, 222, 233, 235, 236, 245, 250, 261, 273, 279], "re": [1, 4, 6, 7, 8, 9, 12, 16, 19, 23, 27, 38, 40, 43, 47, 52, 53, 54, 95, 97, 99, 101, 102, 103, 104, 105, 112, 120, 127, 137, 139, 140, 149, 150, 152, 155, 160, 163, 165, 166, 171, 172, 173, 174, 175, 178, 189, 190, 192, 198, 199, 206, 218, 220, 228, 230, 245, 246, 250, 260, 261], "across": [1, 4, 6, 11, 13, 16, 19, 22, 27, 43, 53, 56, 58, 59, 60, 86, 95, 102, 104, 114, 130, 132, 133, 134, 136, 144, 145, 146, 148, 150, 156, 166, 168, 170, 173, 175, 176, 186, 189, 190, 195, 225, 228, 230, 233, 244, 259, 261, 262, 264, 265, 270, 274, 276, 279, 280], "modal": [1, 166, 244], "complex": [1, 7, 35, 36, 54, 71, 72, 94, 95, 99, 104, 114, 120, 121, 130, 132, 146, 160, 164, 166, 174, 176, 183, 186, 187, 189, 190, 197, 211, 229, 230, 252, 262, 273], "read": [1, 2, 6, 7, 8, 9, 16, 23, 40, 50, 53, 55, 79, 97, 108, 109, 112, 121, 127, 130, 133, 134, 135, 137, 138, 139, 140, 141, 148, 154, 163, 166, 171, 172, 173, 175, 178, 180, 183, 186, 187, 193, 198, 245, 246, 276, 279], "multipl": [1, 4, 6, 11, 12, 13, 16, 18, 19, 20, 22, 23, 43, 48, 52, 53, 57, 58, 59, 60, 64, 69, 86, 92, 94, 95, 99, 101, 102, 103, 104, 108, 112, 120, 130, 132, 134, 136, 137, 138, 139, 140, 146, 148, 150, 154, 156, 166, 168, 171, 172, 174, 175, 176, 178, 182, 183, 185, 187, 189, 190, 193, 195, 197, 199, 210, 211, 216, 222, 228, 234, 245, 246, 251, 260, 261, 262, 265, 275, 279], "entri": [1, 13, 16, 57, 108, 111, 119, 121, 144, 149, 154, 170, 172, 174, 182, 189, 197, 208, 209, 211, 215, 226, 263, 270], "In": [1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 40, 41, 43, 46, 48, 52, 53, 54, 55, 56, 57, 59, 60, 61, 67, 72, 79, 86, 87, 89, 91, 92, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 246, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "word": [1, 7, 12, 13, 16, 47, 53, 79, 86, 95, 99, 104, 105, 107, 109, 110, 121, 131, 139, 140, 148, 161, 163, 164, 170, 176, 178, 190, 207, 209, 211, 276, 281], "allow": [1, 2, 6, 7, 8, 11, 12, 13, 14, 16, 23, 27, 34, 35, 36, 46, 53, 54, 55, 56, 57, 86, 87, 89, 92, 94, 95, 99, 102, 104, 106, 108, 109, 111, 112, 113, 114, 120, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 146, 148, 149, 156, 157, 160, 163, 164, 166, 169, 170, 172, 173, 174, 176, 177, 178, 180, 185, 186, 187, 189, 190, 192, 193, 195, 197, 200, 206, 207, 211, 213, 221, 226, 230, 233, 242, 245, 246, 251, 258, 259, 260, 270, 279], "u": [1, 4, 6, 7, 8, 11, 12, 13, 16, 18, 20, 23, 34, 36, 47, 50, 53, 55, 56, 73, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 111, 112, 117, 120, 133, 136, 139, 142, 144, 148, 149, 150, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 171, 172, 173, 175, 178, 183, 185, 186, 187, 189, 190, 193, 199, 206, 207, 209, 211, 213, 216, 220, 224, 244, 246, 248, 250, 258, 260, 274, 277], "oblivi": [1, 172], "type": [1, 4, 6, 7, 11, 12, 16, 22, 23, 43, 52, 53, 54, 79, 86, 89, 95, 97, 98, 101, 103, 108, 112, 114, 117, 130, 132, 133, 136, 138, 150, 154, 165, 166, 169, 170, 172, 174, 175, 176, 177, 182, 185, 187, 189, 193, 194, 206, 210, 213, 218, 222, 226, 227, 228, 235, 236, 242, 244, 258, 259, 261, 262, 269, 272, 277, 279], "being": [1, 3, 4, 6, 7, 12, 14, 16, 20, 50, 53, 56, 86, 95, 103, 104, 105, 106, 108, 112, 114, 127, 133, 136, 138, 142, 148, 149, 164, 166, 168, 170, 172, 173, 175, 187, 189, 190, 207, 208, 211, 216, 218, 227, 235, 246, 250, 261, 275, 279], "run": [1, 2, 3, 4, 6, 8, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 50, 52, 55, 56, 60, 61, 64, 67, 72, 76, 77, 86, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 183, 186, 187, 190, 192, 193, 197, 199, 200, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 220, 221, 222, 227, 228, 229, 230, 234, 235, 242, 245, 246, 247, 250, 252, 258, 260, 261, 265, 266, 268, 270, 272, 273, 274, 275, 276, 277, 279, 281], "elementari": [1, 2], "onli": [1, 4, 6, 7, 9, 11, 12, 13, 15, 16, 17, 22, 23, 34, 41, 46, 47, 48, 50, 53, 57, 59, 60, 79, 86, 92, 94, 97, 99, 102, 104, 105, 106, 111, 112, 119, 121, 124, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 198, 199, 206, 207, 208, 209, 210, 211, 213, 214, 215, 218, 220, 221, 224, 225, 226, 230, 233, 242, 245, 246, 251, 258, 261, 262, 263, 266, 270, 273, 274, 276, 279, 280], "those": [1, 4, 6, 7, 9, 12, 13, 16, 20, 34, 41, 46, 92, 94, 102, 105, 111, 112, 117, 135, 136, 137, 139, 150, 153, 163, 168, 169, 170, 176, 178, 183, 185, 189, 190, 199, 207, 216, 218, 220, 221, 222, 228, 236, 242, 245, 246, 260, 270, 273, 275, 279], "keep": [1, 4, 7, 12, 13, 16, 34, 43, 46, 53, 56, 79, 86, 89, 97, 99, 102, 104, 106, 108, 109, 112, 120, 121, 131, 132, 133, 134, 135, 136, 137, 140, 145, 146, 149, 154, 160, 166, 172, 176, 178, 189, 190, 193, 246, 261, 280], "didact": [1, 148], "ll": [1, 4, 6, 7, 11, 12, 18, 20, 23, 35, 36, 38, 43, 52, 53, 54, 81, 82, 83, 84, 92, 94, 95, 97, 99, 101, 102, 103, 105, 112, 114, 134, 139, 140, 146, 148, 149, 150, 152, 155, 160, 163, 165, 171, 172, 173, 175, 178, 183, 189, 190, 193, 199, 206, 208, 210, 216, 224, 225, 233, 246, 272, 277], "displai": [1, 2, 6, 7, 14, 36, 47, 95, 101, 103, 119, 127, 142, 178, 182, 226, 229, 245, 246, 259], "each": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 27, 34, 35, 36, 38, 39, 40, 43, 46, 47, 48, 52, 53, 55, 56, 57, 59, 60, 64, 69, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 116, 119, 120, 121, 127, 130, 131, 132, 133, 134, 136, 138, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 152, 153, 155, 156, 157, 160, 163, 164, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 189, 190, 192, 193, 195, 197, 198, 200, 206, 209, 211, 216, 225, 226, 229, 230, 235, 236, 242, 244, 245, 246, 248, 250, 251, 252, 258, 259, 260, 261, 263, 264, 276, 277, 279, 280], "popul": [1, 34, 46, 53, 92, 102, 133, 149, 156, 172, 174, 197, 225, 233, 260, 271], "later": [1, 3, 4, 6, 7, 13, 18, 34, 43, 50, 53, 79, 92, 95, 99, 104, 108, 109, 112, 121, 132, 133, 135, 136, 140, 141, 143, 148, 150, 152, 153, 154, 155, 156, 160, 165, 168, 172, 173, 176, 177, 178, 183, 185, 186, 189, 190, 193, 195, 197, 198, 201, 206, 215, 224, 225, 227, 229, 233, 242, 245, 246, 247, 250, 258, 261, 266, 270, 271, 272, 273, 275, 276, 277], "stage": [1, 16, 19, 99, 112, 168, 200, 210, 221, 226, 227, 233], "start": [1, 6, 7, 13, 19, 20, 22, 23, 27, 34, 38, 46, 47, 53, 54, 56, 57, 58, 59, 64, 79, 92, 94, 95, 98, 99, 102, 103, 104, 107, 108, 112, 113, 114, 117, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 148, 154, 155, 156, 163, 164, 166, 171, 173, 174, 175, 178, 182, 183, 185, 187, 189, 190, 192, 195, 197, 199, 201, 208, 213, 216, 217, 226, 227, 234, 242, 246, 249, 251, 252, 257, 259, 264, 265, 268, 270, 271, 273, 277, 280, 281], "solv": [1, 7, 16, 53, 55, 104, 111, 127, 164, 172, 174, 176, 208, 246, 250, 261], "task": [1, 7, 15, 16, 20, 27, 39, 40, 53, 103, 104, 105, 111, 119, 127, 130, 131, 132, 139, 149, 164, 166, 172, 173, 178, 180, 185, 192, 216, 246, 251, 260, 261, 270, 276, 279], "strategi": [1, 6, 20, 22, 27, 56, 86, 131, 140, 148, 154, 155, 165, 166, 174, 175, 216, 222, 227, 229, 230, 236, 261], "predict": [1, 23, 35, 38, 39, 40, 41, 46, 47, 53, 56, 66, 67, 71, 72, 73, 76, 77, 94, 95, 97, 99, 103, 104, 105, 109, 111, 112, 120, 136, 138, 139, 140, 150, 155, 156, 166, 173, 178, 183, 190, 192, 216, 234, 244, 248, 265, 276], "henc": [1, 16, 20, 43, 46, 52, 86, 132, 137, 146, 157, 160, 166, 169, 172, 174, 176, 190, 216, 234, 235, 246, 276], "our": [1, 2, 3, 4, 6, 7, 9, 11, 12, 14, 19, 20, 23, 34, 35, 36, 38, 39, 40, 43, 44, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 64, 66, 67, 69, 71, 72, 73, 79, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 109, 111, 112, 114, 117, 119, 120, 127, 131, 132, 133, 135, 138, 139, 140, 141, 143, 144, 145, 149, 152, 153, 154, 155, 156, 157, 160, 164, 165, 166, 168, 170, 172, 173, 174, 175, 177, 178, 180, 183, 185, 187, 189, 190, 192, 193, 194, 195, 199, 201, 206, 207, 208, 209, 215, 216, 220, 225, 227, 228, 233, 234, 244, 246, 260, 265, 266, 271, 272, 280], "two": [1, 4, 6, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 27, 34, 36, 39, 40, 43, 44, 46, 52, 53, 54, 56, 61, 79, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 119, 120, 127, 132, 133, 138, 139, 141, 142, 143, 145, 146, 148, 149, 152, 153, 154, 155, 156, 157, 160, 164, 165, 166, 168, 169, 170, 172, 173, 174, 176, 177, 178, 185, 190, 192, 193, 194, 195, 197, 199, 200, 207, 209, 211, 213, 216, 218, 222, 226, 230, 233, 234, 236, 242, 246, 248, 250, 251, 258, 260, 261, 262, 265, 271, 273, 275, 279, 280], "constructor": [1, 7, 12, 13, 14, 71, 73, 89, 99, 103, 120, 132, 133, 146, 166, 169, 170, 172, 174, 176, 209, 218, 245, 246], "both": [1, 2, 6, 7, 11, 12, 13, 14, 16, 19, 23, 27, 36, 53, 55, 56, 64, 79, 86, 89, 95, 102, 103, 104, 111, 112, 119, 120, 133, 134, 136, 138, 142, 145, 146, 148, 152, 154, 155, 157, 160, 166, 170, 172, 174, 175, 176, 177, 178, 186, 189, 190, 192, 193, 194, 199, 200, 206, 209, 210, 226, 227, 228, 230, 234, 235, 236, 242, 244, 245, 246, 258, 260, 270, 271, 276, 279], "compat": [1, 6, 7, 8, 11, 13, 20, 54, 101, 102, 108, 113, 135, 141, 149, 177, 187, 189, 215, 218, 275, 276], "comput": [1, 3, 4, 6, 7, 11, 13, 14, 15, 18, 19, 20, 23, 27, 39, 43, 47, 50, 52, 53, 55, 56, 57, 61, 64, 66, 67, 69, 72, 76, 77, 79, 87, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 112, 114, 116, 120, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 149, 152, 154, 156, 163, 164, 165, 166, 168, 170, 171, 172, 173, 175, 177, 178, 182, 185, 186, 187, 189, 190, 192, 193, 195, 197, 199, 210, 211, 214, 216, 218, 220, 221, 222, 224, 225, 233, 234, 242, 245, 246, 248, 250, 252, 260, 273, 276, 279], "fit": [1, 7, 12, 13, 64, 92, 111, 120, 132, 133, 134, 136, 146, 166, 176, 190, 245, 279], "gener": [1, 6, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 57, 66, 67, 69, 71, 72, 73, 76, 77, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 122, 124, 127, 131, 136, 137, 139, 141, 142, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 170, 172, 173, 174, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 216, 220, 222, 225, 227, 228, 233, 234, 235, 236, 242, 244, 245, 247, 248, 250, 251, 252, 258, 259, 260, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 276, 277, 279, 281], "crucial": [1, 2, 14, 16, 86, 108, 149, 166, 172, 190, 261], "convert_to_funct": 1, "extract": [1, 6, 53, 56, 79, 101, 104, 127, 131, 139, 140, 152, 154, 165, 172, 178, 187, 189, 192, 226, 233, 248], "convert": [1, 6, 12, 14, 23, 35, 36, 43, 44, 47, 53, 55, 56, 59, 97, 99, 102, 104, 112, 114, 116, 121, 131, 134, 139, 140, 171, 172, 174, 175, 183, 190, 199, 206, 207, 209, 210, 211, 213, 214, 228, 235, 244, 258, 261, 265], "strictli": [1, 102, 172], "speak": [1, 11, 46, 102, 137, 148, 261], "one": [1, 4, 6, 7, 8, 9, 11, 13, 14, 16, 17, 20, 22, 23, 34, 36, 38, 43, 44, 48, 50, 52, 53, 55, 56, 59, 60, 64, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 108, 109, 111, 112, 117, 120, 121, 124, 127, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 185, 186, 189, 190, 192, 194, 197, 198, 199, 206, 207, 208, 210, 211, 216, 220, 227, 228, 229, 230, 246, 248, 250, 251, 261, 262, 264, 265, 273, 274, 275, 276, 279, 280], "perfectli": [1, 16], "howev": [1, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 34, 41, 48, 50, 53, 55, 56, 79, 89, 92, 104, 105, 120, 127, 136, 137, 141, 142, 143, 148, 149, 150, 153, 157, 163, 166, 169, 170, 173, 174, 175, 176, 177, 178, 183, 185, 186, 187, 189, 190, 194, 200, 201, 207, 208, 211, 216, 220, 222, 228, 229, 233, 234, 246, 250, 258, 260, 261, 266, 273, 276, 279], "encourag": [1, 7, 23, 99, 173, 178, 185], "usag": [1, 3, 4, 13, 15, 17, 86, 94, 119, 131, 132, 134, 137, 148, 149, 154, 155, 168, 172, 174, 176, 177, 179, 182, 193, 195, 199, 201, 210, 211, 222, 227, 235, 242, 245, 259, 261, 265, 274, 279, 281], "doe": [1, 2, 4, 6, 7, 11, 15, 16, 17, 18, 23, 34, 44, 46, 50, 76, 77, 79, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 111, 112, 114, 117, 120, 121, 127, 132, 133, 134, 135, 141, 143, 146, 148, 149, 155, 156, 157, 163, 164, 166, 168, 171, 172, 173, 175, 176, 177, 178, 182, 183, 186, 187, 189, 190, 192, 193, 197, 198, 199, 207, 208, 209, 218, 220, 227, 242, 245, 246, 250, 258, 260, 261, 273, 275, 279], "often": [1, 6, 7, 12, 16, 20, 43, 53, 79, 92, 94, 95, 97, 102, 104, 106, 108, 111, 112, 120, 121, 136, 137, 138, 140, 156, 164, 189, 190, 197, 211, 216, 224, 227, 245, 260, 261], "same": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 17, 20, 23, 34, 35, 41, 43, 46, 47, 50, 53, 55, 56, 57, 59, 69, 77, 79, 89, 92, 94, 102, 103, 104, 106, 108, 109, 111, 112, 114, 117, 119, 120, 121, 132, 133, 134, 135, 136, 137, 139, 141, 142, 145, 146, 148, 150, 152, 154, 155, 156, 157, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 189, 190, 193, 194, 195, 198, 200, 206, 207, 208, 209, 211, 216, 227, 228, 242, 245, 246, 251, 253, 254, 255, 256, 258, 261, 264, 270, 271, 274, 275, 279, 280], "usual": [1, 6, 7, 11, 18, 23, 46, 95, 97, 99, 101, 102, 106, 107, 109, 111, 112, 127, 136, 137, 140, 142, 143, 146, 148, 149, 154, 157, 163, 166, 170, 172, 189, 193, 220, 245, 250, 251, 261, 279], "former": [1, 6, 139, 140, 178], "some": [1, 3, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 34, 35, 36, 39, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 66, 72, 79, 86, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 117, 119, 120, 121, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 160, 163, 165, 166, 168, 170, 172, 173, 175, 176, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 197, 199, 206, 207, 208, 209, 211, 213, 215, 216, 218, 220, 228, 235, 236, 245, 246, 248, 250, 251, 252, 260, 261, 262, 266, 273, 274, 276, 279], "lag": [1, 172], "absolut": [1, 7, 12, 86, 106, 170, 173, 260], "dilut": 1, "move": [1, 6, 9, 14, 28, 29, 30, 31, 32, 33, 35, 40, 43, 46, 50, 52, 80, 93, 94, 106, 112, 132, 133, 134, 136, 145, 146, 149, 151, 163, 164, 166, 169, 173, 175, 176, 181, 182, 184, 188, 192, 202, 205, 207, 221, 226, 227, 228, 234, 246, 260, 261], "averag": [1, 3, 23, 53, 56, 64, 86, 92, 95, 97, 101, 103, 104, 112, 132, 135, 140, 148, 165, 172, 173, 176, 178, 182, 246, 261], "These": [1, 6, 11, 13, 14, 16, 20, 23, 41, 46, 53, 56, 59, 64, 86, 92, 99, 107, 109, 111, 112, 119, 127, 148, 156, 172, 175, 177, 178, 185, 186, 189, 190, 193, 199, 213, 216, 234, 246, 260, 261, 270, 271, 273], "associ": [1, 4, 6, 7, 11, 12, 35, 36, 54, 86, 95, 143, 152, 166, 170, 177, 185, 190, 198, 207, 216, 218, 248, 258, 261, 275], "One": [1, 2, 4, 6, 7, 12, 13, 17, 53, 55, 79, 86, 94, 99, 102, 104, 105, 106, 108, 132, 133, 134, 135, 136, 137, 140, 146, 148, 150, 163, 164, 166, 180, 183, 186, 187, 189, 190, 192, 193, 197, 208, 220, 227, 228, 236, 246, 252, 258, 260, 261, 276], "advantag": [1, 3, 7, 16, 20, 53, 89, 102, 105, 112, 130, 133, 134, 137, 148, 149, 164, 166, 172, 187, 193, 209, 216, 227, 228, 235, 242, 261, 271, 275], "match": [1, 6, 12, 16, 20, 23, 72, 97, 102, 104, 112, 114, 117, 120, 121, 150, 154, 157, 163, 165, 172, 175, 187, 189, 207, 209, 216, 234, 235, 245, 248, 252, 262, 279], "exactli": [1, 6, 11, 12, 14, 20, 34, 46, 55, 56, 97, 108, 111, 112, 114, 120, 149, 154, 164, 189, 190, 216], "current": [1, 4, 6, 7, 11, 12, 13, 14, 16, 17, 23, 35, 40, 43, 53, 56, 66, 79, 86, 95, 104, 112, 120, 127, 132, 133, 135, 137, 138, 139, 140, 148, 149, 152, 156, 157, 165, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 182, 189, 190, 193, 194, 197, 206, 208, 209, 211, 228, 234, 251, 261, 270, 273], "configur": [1, 6, 7, 16, 22, 23, 27, 53, 54, 86, 95, 103, 133, 136, 144, 146, 154, 163, 172, 175, 182, 185, 190, 199, 201, 210, 226, 234, 235, 236, 261, 265, 266, 271, 273, 276, 279], "pessimist": [1, 172], "bound": [1, 53, 121, 134, 138, 154, 172, 173, 182, 189, 190, 192, 193, 199, 245, 246, 251, 261, 279], "pai": [1, 12, 48, 53, 135, 261, 274], "attent": [1, 12, 48, 53, 99, 131, 135, 136, 139, 140, 161, 179, 180, 195, 199, 211, 214, 273, 281], "create_target_param": 1, "keyword": [1, 6, 170, 172, 185, 250, 258], "argument": [1, 2, 4, 6, 7, 11, 16, 18, 34, 40, 43, 46, 47, 52, 55, 59, 73, 86, 94, 95, 99, 101, 102, 104, 106, 109, 111, 113, 119, 120, 121, 132, 133, 140, 145, 146, 148, 149, 150, 154, 155, 165, 166, 168, 169, 170, 172, 174, 175, 176, 177, 182, 185, 187, 189, 190, 194, 195, 197, 208, 210, 220, 221, 226, 229, 233, 245, 246, 250, 251, 258, 259, 261, 262, 273, 279], "below": [1, 2, 4, 7, 12, 13, 14, 16, 19, 22, 23, 27, 36, 41, 43, 46, 48, 52, 55, 56, 57, 58, 59, 60, 61, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 124, 134, 135, 136, 138, 141, 142, 144, 145, 146, 148, 149, 152, 154, 157, 163, 169, 172, 173, 174, 175, 176, 177, 182, 183, 185, 187, 189, 190, 192, 193, 197, 199, 200, 201, 207, 208, 209, 210, 211, 213, 215, 218, 225, 226, 227, 228, 229, 233, 234, 236, 242, 245, 246, 250, 251, 266, 269, 270, 273, 274, 275, 276, 279, 280], "tell": [1, 8, 18, 22, 73, 92, 94, 97, 99, 103, 111, 112, 120, 138, 139, 149, 150, 152, 163, 173, 174, 176, 178, 189, 246, 251], "creat": [1, 2, 6, 7, 8, 12, 14, 16, 18, 19, 21, 22, 23, 27, 34, 35, 38, 41, 43, 44, 46, 47, 50, 52, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 94, 95, 97, 99, 101, 103, 104, 105, 107, 109, 111, 113, 114, 117, 120, 121, 124, 131, 133, 134, 135, 136, 141, 143, 146, 148, 149, 152, 156, 157, 161, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 198, 199, 201, 206, 209, 211, 213, 218, 221, 224, 225, 227, 228, 230, 233, 234, 242, 245, 246, 248, 251, 252, 258, 259, 262, 263, 264, 265, 266, 273, 275, 276, 280, 281], "If": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 27, 34, 35, 38, 40, 43, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 64, 66, 79, 86, 92, 94, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 120, 121, 124, 127, 132, 133, 134, 135, 136, 137, 140, 142, 146, 148, 149, 150, 152, 154, 155, 157, 163, 164, 165, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 182, 185, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 206, 207, 209, 210, 211, 215, 216, 218, 220, 221, 222, 227, 228, 235, 236, 242, 244, 245, 247, 250, 251, 258, 259, 260, 261, 262, 264, 266, 273, 274, 279], "fals": [1, 2, 4, 7, 8, 12, 13, 16, 23, 36, 41, 46, 59, 66, 67, 86, 87, 94, 101, 108, 120, 121, 127, 132, 133, 134, 136, 142, 152, 154, 157, 163, 164, 166, 171, 172, 174, 175, 183, 185, 187, 189, 194, 197, 200, 207, 208, 210, 213, 215, 216, 221, 224, 234, 235, 236, 245, 252, 258, 261, 262, 269, 276, 277, 279, 280], "see": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 16, 18, 20, 22, 23, 27, 35, 39, 40, 43, 47, 48, 50, 52, 53, 54, 55, 56, 59, 64, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 119, 121, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 206, 208, 209, 210, 213, 214, 215, 216, 218, 220, 221, 222, 225, 228, 229, 230, 233, 234, 237, 242, 244, 245, 246, 251, 258, 259, 260, 261, 262, 263, 264, 270, 271, 272, 274, 275, 277, 279], "target_actor_network_param": 1, "attribut": [1, 7, 13, 16, 34, 46, 50, 57, 86, 89, 99, 111, 112, 117, 137, 149, 152, 157, 164, 168, 170, 189, 211, 214, 222, 245, 264, 265, 276], "still": [1, 6, 7, 11, 12, 13, 14, 16, 17, 20, 22, 23, 50, 56, 79, 92, 94, 102, 104, 108, 112, 119, 121, 133, 139, 140, 141, 146, 148, 149, 152, 153, 157, 163, 166, 176, 187, 189, 190, 194, 195, 199, 200, 206, 208, 210, 216, 227, 228, 230, 234, 260, 261, 274, 280], "access": [1, 6, 7, 12, 16, 20, 23, 35, 36, 54, 72, 79, 92, 94, 97, 99, 102, 103, 104, 109, 112, 120, 121, 131, 133, 137, 144, 148, 164, 166, 171, 173, 175, 185, 186, 189, 198, 206, 207, 209, 210, 213, 216, 227, 230, 242, 260, 264, 270], "just": [1, 2, 3, 4, 6, 7, 11, 12, 16, 18, 19, 20, 23, 34, 47, 48, 50, 53, 54, 55, 56, 57, 60, 76, 77, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 121, 127, 132, 133, 136, 138, 139, 140, 146, 149, 154, 155, 160, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 183, 185, 186, 187, 189, 190, 192, 199, 200, 208, 216, 228, 230, 235, 246, 247, 248, 260, 261, 264, 266, 279], "detach": [1, 2, 7, 13, 34, 94, 102, 108, 135, 160, 165, 195], "version": [1, 3, 4, 6, 7, 11, 12, 14, 16, 95, 97, 99, 102, 103, 112, 113, 114, 116, 117, 132, 133, 137, 148, 149, 150, 152, 155, 157, 164, 166, 168, 169, 170, 171, 172, 180, 182, 183, 185, 190, 192, 193, 197, 198, 199, 201, 206, 215, 221, 233, 234, 235, 236, 245, 246, 250, 260, 266, 271, 275], "q": [1, 46, 53, 131, 136, 156, 177, 185, 216], "base": [1, 6, 7, 12, 13, 16, 19, 20, 22, 27, 36, 47, 53, 61, 79, 89, 92, 94, 95, 99, 103, 104, 106, 114, 119, 121, 130, 131, 132, 133, 134, 135, 138, 139, 141, 149, 156, 166, 168, 169, 170, 173, 175, 178, 182, 183, 185, 186, 189, 190, 192, 195, 200, 208, 210, 213, 214, 215, 216, 226, 234, 245, 258, 260, 261, 265, 271, 275, 276], "empir": [1, 160, 172], "bootstrap": [1, 149], "td": 1, "0": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 59, 67, 68, 72, 74, 76, 77, 78, 79, 86, 89, 90, 92, 94, 95, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 124, 127, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 190, 192, 193, 194, 195, 197, 198, 199, 200, 206, 207, 209, 210, 211, 215, 216, 217, 221, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 242, 246, 247, 248, 250, 251, 252, 257, 258, 260, 261, 266, 268, 269, 272, 273, 274, 275, 276, 277, 279, 280, 281], "low": [1, 4, 6, 7, 16, 18, 27, 53, 56, 72, 86, 99, 106, 120, 131, 139, 172, 182, 189, 193, 213, 235, 236, 260], "varianc": [1, 7, 23, 101, 172], "bia": [1, 2, 6, 7, 23, 46, 50, 72, 106, 112, 120, 121, 132, 141, 142, 149, 155, 170, 172, 176, 177, 193, 194, 210, 211, 216, 252, 258], "mean": [1, 2, 4, 6, 7, 12, 14, 16, 23, 39, 50, 53, 55, 56, 72, 79, 86, 89, 94, 97, 99, 101, 102, 104, 105, 106, 108, 111, 112, 119, 120, 121, 133, 136, 138, 139, 142, 146, 148, 157, 164, 166, 171, 172, 173, 175, 176, 178, 182, 183, 185, 189, 190, 198, 206, 208, 211, 215, 220, 221, 222, 224, 228, 246, 250, 251, 260, 261, 266, 276, 279], "obtain": [1, 27, 34, 39, 53, 72, 92, 112, 120, 138, 139, 142, 148, 155, 165, 172, 173, 175, 182, 185, 192, 198, 251, 275], "reward": [1, 16, 149, 156, 172, 173, 174, 176], "noth": [1, 79, 97, 112, 143, 166, 172, 176, 182, 194], "els": [1, 6, 8, 11, 13, 22, 23, 50, 53, 92, 94, 101, 111, 112, 113, 133, 134, 148, 168, 169, 172, 174, 175, 176, 183, 185, 187, 189, 195, 200, 210, 211, 216, 226, 230, 245, 276, 277, 280], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 27, 34, 35, 36, 38, 44, 46, 50, 53, 56, 57, 59, 67, 72, 79, 90, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 113, 116, 117, 119, 120, 121, 124, 127, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 152, 153, 154, 155, 156, 157, 161, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 185, 186, 187, 190, 193, 195, 197, 199, 200, 201, 206, 207, 208, 209, 210, 211, 214, 215, 216, 218, 221, 222, 226, 227, 228, 229, 230, 234, 235, 236, 242, 245, 250, 252, 259, 261, 269, 270, 275, 276, 277, 279, 280], "case": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 16, 19, 20, 34, 41, 46, 53, 55, 64, 72, 79, 86, 89, 94, 95, 101, 102, 104, 105, 106, 108, 109, 111, 112, 117, 120, 121, 130, 132, 133, 134, 136, 137, 138, 141, 142, 143, 148, 149, 150, 152, 154, 155, 157, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 185, 187, 189, 190, 192, 193, 194, 195, 199, 206, 208, 209, 210, 211, 213, 215, 216, 218, 220, 221, 228, 235, 244, 245, 246, 251, 252, 258, 260, 264, 266, 271, 273, 274, 276, 279], "whole": [1, 3, 47, 50, 99, 112, 121, 131, 135, 148, 170, 172, 178, 190, 207, 220, 266], "sequenc": [1, 6, 7, 14, 43, 52, 53, 71, 72, 99, 105, 107, 110, 111, 120, 121, 131, 139, 140, 149, 161, 164, 172, 177, 179, 186, 193, 195, 199, 211, 214, 220, 224, 225, 230, 233, 245, 251, 261, 281], "upcom": 1, "intermedi": [1, 5, 26, 80, 94, 99, 102, 131, 144, 152, 154, 155, 156, 163, 166, 179, 188, 193, 216, 246, 252], "lambda": [1, 6, 112, 141, 171, 174, 189, 216, 245, 246, 277], "also": [1, 2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 34, 40, 43, 46, 50, 52, 53, 55, 56, 57, 58, 64, 72, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 119, 120, 121, 132, 133, 135, 136, 137, 138, 139, 140, 142, 143, 146, 148, 149, 152, 154, 155, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 182, 185, 187, 189, 190, 192, 193, 194, 195, 197, 201, 206, 207, 208, 209, 215, 216, 218, 220, 221, 222, 225, 227, 228, 229, 230, 233, 234, 235, 236, 242, 245, 246, 247, 250, 251, 258, 259, 260, 261, 263, 264, 266, 270, 271, 272, 274, 275, 277, 279, 280], "compromis": 1, "easi": [1, 2, 6, 7, 27, 36, 47, 48, 55, 72, 94, 95, 102, 104, 106, 133, 134, 136, 138, 148, 155, 160, 164, 168, 172, 182, 186, 189, 190, 200, 216, 220, 235, 246, 260, 276], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 9, 175], "defin": [1, 2, 6, 8, 14, 16, 17, 18, 19, 20, 22, 34, 39, 40, 41, 44, 46, 48, 56, 65, 68, 69, 71, 72, 73, 79, 89, 92, 94, 99, 101, 103, 105, 106, 111, 112, 114, 117, 121, 131, 132, 133, 137, 139, 141, 144, 148, 149, 150, 153, 156, 160, 163, 165, 166, 173, 174, 175, 177, 180, 182, 183, 186, 187, 189, 193, 197, 206, 213, 215, 216, 224, 227, 228, 234, 235, 236, 249, 250, 251, 257, 258, 265, 266, 268, 272, 274, 275, 276, 280, 281], "default": [1, 3, 4, 6, 7, 11, 12, 13, 17, 20, 23, 27, 34, 39, 43, 46, 48, 53, 55, 56, 59, 66, 67, 86, 97, 99, 101, 102, 106, 108, 113, 117, 120, 127, 131, 132, 133, 134, 135, 136, 139, 148, 149, 150, 152, 154, 157, 163, 166, 169, 171, 172, 174, 175, 176, 182, 183, 185, 187, 189, 190, 193, 194, 195, 197, 200, 209, 210, 211, 213, 215, 218, 221, 222, 227, 228, 234, 235, 242, 246, 249, 250, 251, 257, 259, 261, 264, 266, 269, 270, 271, 274, 276, 279, 280, 281], "here": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 36, 39, 40, 43, 44, 47, 50, 52, 54, 55, 56, 57, 59, 73, 79, 85, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 119, 120, 121, 124, 127, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 170, 172, 173, 175, 176, 177, 178, 182, 183, 186, 187, 189, 190, 192, 193, 194, 201, 206, 208, 209, 210, 211, 213, 216, 225, 228, 229, 234, 235, 236, 245, 246, 247, 250, 251, 261, 266, 271, 273, 276, 279], "take": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 23, 35, 36, 43, 46, 47, 50, 52, 53, 54, 55, 56, 72, 79, 86, 89, 94, 95, 97, 99, 101, 102, 103, 104, 106, 108, 109, 111, 112, 117, 120, 121, 127, 135, 136, 137, 138, 139, 140, 141, 143, 146, 148, 153, 155, 156, 163, 166, 171, 172, 173, 174, 175, 176, 178, 182, 183, 185, 187, 189, 190, 192, 193, 195, 199, 201, 206, 209, 211, 213, 216, 220, 227, 228, 234, 235, 236, 246, 247, 248, 251, 258, 260, 261, 262, 263, 264, 266, 271, 276, 279], "simplest": [1, 7, 34, 50, 94, 102, 106, 149, 172, 178, 261], "show": [1, 6, 12, 13, 18, 20, 22, 23, 27, 36, 47, 55, 56, 64, 79, 86, 87, 89, 92, 94, 95, 97, 99, 102, 103, 112, 117, 119, 132, 135, 138, 139, 140, 142, 143, 146, 149, 154, 155, 157, 166, 169, 171, 172, 173, 174, 176, 182, 183, 185, 187, 189, 190, 193, 194, 206, 216, 225, 226, 227, 228, 230, 235, 242, 245, 246, 251, 259, 260, 261, 266, 275, 276, 279, 280], "chang": [1, 2, 6, 7, 8, 12, 13, 14, 16, 23, 27, 34, 43, 46, 52, 54, 55, 56, 57, 59, 86, 87, 89, 92, 94, 95, 97, 98, 103, 104, 105, 107, 108, 109, 114, 121, 131, 132, 135, 136, 138, 139, 141, 144, 145, 148, 149, 152, 154, 155, 156, 163, 164, 166, 169, 170, 174, 182, 185, 187, 189, 190, 193, 199, 200, 208, 210, 211, 213, 215, 221, 222, 225, 226, 227, 228, 233, 235, 236, 245, 246, 249, 257, 258, 259, 261, 262, 269, 274, 275, 276, 277, 279, 281], "instruct": [1, 7, 23, 27, 38, 95, 98, 101, 103, 139, 140, 149, 152, 168, 170, 172, 174, 176, 178, 221, 222, 234, 235, 242, 244, 261, 265, 279], "queri": [1, 16, 53, 97, 102, 121, 135, 175, 177, 192, 193, 195, 211], "correspond": [1, 2, 3, 4, 6, 7, 11, 12, 14, 16, 17, 35, 36, 40, 46, 53, 59, 86, 94, 95, 99, 101, 106, 109, 119, 121, 132, 137, 138, 141, 154, 163, 168, 170, 172, 175, 178, 180, 182, 183, 185, 187, 189, 190, 192, 193, 198, 209, 215, 228, 236, 244, 250, 251, 261, 265, 279], "make_value_estim": 1, "central": [1, 11, 79, 94, 102, 103, 109, 111, 144, 264], "quit": [1, 7, 20, 53, 79, 137, 148, 163, 172, 176, 189, 190, 206, 216, 227, 230, 233, 246, 260], "weight": [1, 2, 3, 6, 7, 14, 15, 16, 20, 23, 27, 34, 35, 46, 47, 53, 66, 67, 70, 72, 73, 74, 76, 77, 79, 94, 97, 99, 102, 103, 104, 106, 107, 109, 112, 121, 127, 131, 132, 139, 141, 142, 144, 149, 150, 154, 155, 157, 163, 164, 165, 170, 172, 173, 176, 178, 182, 185, 186, 190, 193, 194, 199, 210, 213, 216, 218, 227, 234, 236, 248, 258, 263, 264, 269, 276, 281], "when": [1, 4, 6, 7, 11, 12, 13, 14, 16, 17, 18, 20, 22, 34, 36, 39, 41, 43, 46, 47, 48, 50, 52, 53, 54, 56, 57, 59, 64, 79, 86, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 108, 111, 112, 113, 116, 117, 119, 120, 121, 131, 132, 133, 134, 135, 137, 138, 140, 141, 142, 145, 146, 148, 149, 152, 153, 154, 156, 157, 160, 163, 164, 166, 169, 170, 172, 173, 174, 176, 177, 178, 182, 185, 187, 189, 190, 192, 193, 197, 199, 206, 209, 210, 211, 213, 215, 216, 218, 221, 222, 225, 226, 228, 229, 230, 234, 242, 245, 246, 248, 250, 251, 252, 258, 260, 261, 262, 264, 265, 270, 271, 273, 274, 276, 279, 280], "must": [1, 2, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 18, 35, 36, 53, 56, 79, 89, 94, 95, 102, 105, 111, 116, 117, 121, 133, 146, 148, 149, 150, 152, 166, 172, 175, 182, 185, 187, 189, 190, 194, 197, 198, 206, 207, 209, 211, 218, 220, 226, 229, 250, 252, 258, 261, 273], "sure": [1, 6, 7, 11, 12, 13, 16, 23, 41, 55, 61, 92, 97, 101, 104, 105, 111, 117, 121, 132, 136, 141, 146, 148, 149, 153, 166, 172, 174, 185, 190, 207, 209, 220, 226, 235, 244, 245, 250, 259, 261, 270, 271, 273], "out": [1, 2, 4, 6, 7, 8, 11, 12, 13, 16, 17, 18, 20, 27, 34, 38, 39, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 62, 63, 64, 79, 81, 82, 83, 84, 85, 87, 89, 92, 94, 95, 97, 99, 102, 104, 105, 107, 109, 112, 116, 119, 131, 132, 134, 135, 136, 137, 138, 139, 143, 144, 146, 148, 149, 150, 153, 154, 155, 163, 166, 169, 170, 171, 172, 174, 175, 176, 178, 182, 183, 185, 189, 190, 193, 195, 197, 203, 204, 206, 207, 208, 209, 211, 212, 213, 214, 216, 220, 221, 222, 223, 230, 235, 236, 238, 239, 240, 241, 243, 244, 249, 251, 252, 257, 258, 261, 265, 271, 274, 275, 276, 279, 281], "graph": [1, 6, 12, 16, 18, 50, 53, 66, 69, 72, 76, 77, 86, 89, 91, 94, 105, 107, 113, 116, 117, 120, 131, 137, 139, 143, 153, 154, 155, 157, 175, 176, 182, 183, 185, 186, 193, 194, 200, 201, 221, 222, 235, 236, 248, 259, 266, 270, 271, 275, 277], "otherwis": [1, 4, 11, 12, 23, 35, 40, 53, 59, 66, 79, 86, 89, 102, 112, 120, 121, 127, 132, 137, 143, 146, 149, 154, 155, 157, 163, 172, 173, 175, 187, 190, 216, 220, 221, 226, 260, 274, 279], "mix": [1, 11, 17, 64, 119, 157, 213, 235, 236, 249, 257, 265, 281], "For": [1, 2, 4, 6, 7, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 34, 39, 40, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 66, 67, 72, 79, 86, 87, 92, 95, 99, 101, 102, 103, 104, 105, 106, 107, 109, 111, 112, 114, 120, 121, 124, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 146, 148, 149, 150, 153, 154, 156, 157, 164, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 211, 213, 215, 216, 218, 221, 222, 224, 225, 227, 228, 229, 230, 233, 234, 235, 236, 242, 244, 245, 246, 248, 250, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 277, 279, 280], "hold_out_param": 1, "now": [1, 2, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 22, 27, 39, 40, 46, 47, 48, 50, 53, 54, 55, 56, 59, 79, 89, 92, 93, 94, 95, 101, 102, 104, 106, 108, 111, 112, 114, 117, 120, 127, 131, 133, 136, 137, 138, 139, 141, 142, 143, 146, 148, 149, 153, 154, 155, 156, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 199, 201, 206, 207, 211, 213, 215, 216, 218, 220, 225, 227, 228, 247, 248, 258, 259, 260, 263, 271], "reli": [1, 3, 4, 7, 11, 16, 41, 53, 94, 111, 114, 137, 156, 163, 166, 170, 172, 189, 201, 208, 210, 222, 226, 261], "miss": [1, 55, 121, 141, 146, 149, 182, 187, 195, 207, 245, 260, 262, 279], "glue": [1, 176], "cost": [1, 6, 16, 53, 104, 106, 119, 132, 133, 136, 137, 141, 160, 182, 189, 227, 247, 261, 274, 275], "deliv": [1, 222, 235, 273], "most": [1, 2, 6, 13, 16, 20, 34, 38, 46, 53, 55, 56, 79, 92, 94, 95, 97, 99, 102, 106, 108, 109, 112, 119, 120, 121, 127, 130, 132, 136, 137, 138, 140, 142, 143, 148, 153, 154, 156, 157, 163, 166, 171, 172, 174, 175, 176, 177, 178, 182, 185, 187, 189, 190, 193, 208, 209, 210, 216, 227, 235, 236, 244, 251, 258, 260, 261, 266, 270, 274, 276, 279], "first": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 27, 38, 41, 44, 47, 48, 53, 54, 55, 56, 57, 59, 64, 72, 73, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 106, 108, 109, 111, 112, 117, 119, 120, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 160, 163, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 178, 182, 185, 186, 187, 189, 190, 192, 193, 194, 195, 197, 199, 201, 206, 208, 209, 211, 216, 220, 226, 227, 228, 230, 234, 236, 245, 246, 248, 250, 251, 258, 261, 266, 271, 273, 274, 275, 276, 279], "taken": [1, 7, 11, 16, 23, 86, 87, 99, 149, 163, 172, 185, 189, 199, 213, 252, 275], "care": [1, 4, 6, 16, 79, 92, 94, 104, 143, 148, 166, 172, 176, 193, 206, 227, 246, 247, 260], "condit": [1, 16, 53, 59, 102, 109, 113, 132, 148, 164, 166, 187, 189, 215, 218], "remaind": [1, 97, 152], "cheetah": 1, "goal": [1, 7, 16, 17, 47, 53, 56, 64, 79, 89, 104, 137, 138, 148, 149, 153, 172, 174, 176, 197, 206, 236], "half": [1, 11, 20, 127, 168, 216, 245, 280], "fast": [1, 6, 7, 20, 22, 53, 94, 112, 132, 136, 146, 160, 166, 172, 177, 185, 190, 193, 197, 199, 214, 216, 260], "dm_control": 1, "gym": [1, 16, 131, 149, 156, 172, 173, 174, 176, 193], "env": [1, 22, 135, 145, 148, 149, 172, 173, 174, 176, 195, 197, 221, 246, 260, 276], "gymenv": [1, 172], "halfcheetah": 1, "v4": [1, 172], "dmcontrolenv": 1, "By": [1, 11, 20, 23, 34, 43, 46, 66, 67, 86, 92, 94, 102, 108, 111, 112, 113, 120, 133, 136, 138, 148, 150, 152, 153, 154, 163, 170, 173, 182, 186, 189, 197, 200, 207, 209, 211, 216, 221, 227, 228, 233, 242, 248, 251, 261, 266, 270, 271, 273, 276, 279], "disabl": [1, 8, 13, 17, 132, 133, 141, 156, 160, 171, 175, 177, 182, 187, 199, 206, 207, 208, 209, 215, 221, 228, 245, 270, 279], "render": [1, 7, 86, 95, 101, 156, 166, 172], "easier": [1, 20, 22, 27, 54, 55, 105, 112, 132, 138, 154, 163, 174, 178, 183, 199, 206, 209, 216, 220, 228, 246, 260, 273], "than": [1, 3, 4, 6, 7, 11, 12, 13, 14, 15, 16, 20, 23, 47, 52, 53, 54, 56, 57, 64, 71, 73, 79, 86, 89, 94, 97, 99, 102, 104, 105, 106, 108, 111, 112, 114, 120, 121, 127, 131, 132, 133, 135, 138, 140, 142, 145, 146, 148, 150, 154, 155, 156, 160, 163, 164, 165, 166, 171, 172, 173, 174, 182, 183, 185, 186, 187, 190, 192, 193, 197, 199, 206, 211, 216, 221, 222, 246, 250, 261, 262, 265, 270, 276, 279], "imag": [1, 23, 35, 36, 38, 44, 46, 50, 53, 55, 56, 61, 79, 86, 92, 95, 97, 99, 102, 103, 104, 112, 131, 136, 141, 150, 156, 157, 163, 165, 173, 180, 182, 183, 190, 192, 211, 213, 221, 222, 230, 244, 248, 259, 262, 263, 265], "focu": [1, 4, 7, 12, 22, 95, 104, 106, 133, 136, 137, 172, 174, 176, 178, 189, 199, 207, 236], "pass": [1, 2, 3, 4, 7, 9, 11, 12, 14, 15, 16, 17, 18, 19, 23, 34, 35, 36, 39, 40, 41, 46, 47, 53, 55, 56, 57, 60, 66, 67, 69, 76, 77, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 112, 113, 120, 121, 131, 132, 133, 136, 137, 138, 139, 142, 143, 144, 146, 148, 149, 150, 152, 153, 156, 157, 160, 164, 165, 168, 170, 172, 173, 174, 175, 176, 178, 179, 182, 185, 187, 189, 190, 193, 194, 195, 199, 206, 209, 211, 218, 225, 226, 228, 229, 233, 234, 245, 246, 250, 251, 252, 258, 261, 264, 280, 281], "pixel": [1, 35, 44, 47, 79, 99, 102, 104, 149, 157, 180, 185, 276], "from_pixel": 1, "true": [1, 2, 4, 6, 7, 8, 12, 13, 14, 17, 18, 23, 27, 34, 36, 39, 41, 46, 50, 53, 55, 66, 67, 86, 92, 94, 97, 101, 102, 108, 112, 113, 114, 116, 119, 120, 121, 127, 132, 133, 134, 135, 138, 141, 142, 143, 146, 148, 149, 152, 154, 155, 157, 164, 171, 172, 174, 175, 176, 177, 182, 183, 185, 187, 189, 192, 193, 194, 195, 197, 200, 207, 208, 209, 210, 211, 213, 215, 216, 221, 226, 227, 228, 235, 236, 251, 252, 258, 264, 266, 269, 273, 277, 279, 280], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 11, 19, 20, 50, 55, 59, 95, 101, 103, 104, 105, 113, 132, 133, 138, 139, 140, 148, 149, 173, 174, 175, 176, 178, 180, 183, 185, 192, 216, 224, 225, 251, 276], "either": [1, 2, 4, 6, 7, 11, 18, 23, 47, 53, 77, 92, 103, 104, 112, 114, 121, 127, 133, 136, 146, 149, 157, 170, 173, 174, 175, 182, 187, 189, 193, 209, 211, 215, 216, 235, 236, 242, 245, 251, 258, 261, 273], "backend": [1, 6, 7, 8, 13, 16, 22, 27, 57, 59, 130, 131, 138, 141, 145, 146, 149, 157, 171, 172, 179, 182, 187, 189, 190, 195, 201, 210, 214, 215, 222, 226, 234, 242, 245, 265, 272, 276, 281], "consid": [1, 4, 7, 12, 13, 16, 34, 41, 53, 72, 79, 86, 120, 132, 134, 143, 146, 148, 157, 160, 163, 164, 166, 169, 174, 178, 182, 187, 189, 190, 192, 197, 206, 207, 208, 210, 220, 227, 250, 251, 252, 271], "abov": [1, 3, 4, 6, 7, 9, 11, 12, 13, 16, 17, 19, 23, 46, 47, 53, 55, 56, 69, 71, 72, 79, 86, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 120, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 148, 152, 154, 155, 156, 157, 160, 163, 164, 165, 166, 168, 170, 172, 174, 175, 176, 177, 182, 185, 187, 189, 190, 192, 194, 195, 197, 199, 201, 206, 207, 208, 209, 210, 215, 227, 228, 229, 230, 234, 235, 236, 242, 244, 246, 250, 251, 258, 259, 270, 276, 279], "dm": 1, "want": [1, 2, 4, 6, 7, 8, 9, 11, 12, 14, 16, 17, 19, 23, 27, 34, 35, 36, 39, 41, 46, 47, 50, 53, 55, 56, 64, 66, 67, 71, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 120, 121, 127, 135, 136, 137, 138, 148, 149, 150, 152, 153, 155, 157, 160, 164, 166, 168, 170, 171, 172, 175, 177, 178, 180, 185, 186, 187, 189, 190, 192, 193, 206, 208, 213, 214, 220, 228, 229, 236, 242, 245, 246, 250, 258, 260, 262, 273, 275], "modifi": [1, 3, 7, 12, 13, 16, 23, 40, 44, 46, 47, 56, 79, 104, 105, 136, 139, 148, 153, 154, 169, 172, 174, 178, 189, 193, 194, 195, 258, 274, 276], "represent": [1, 12, 16, 46, 56, 89, 95, 99, 101, 104, 106, 109, 111, 113, 114, 116, 131, 138, 153, 156, 178, 182, 183, 186, 189, 190, 193, 211, 214, 246, 258, 260, 275], "more": [1, 2, 3, 4, 6, 7, 9, 11, 12, 13, 16, 17, 18, 20, 23, 36, 38, 39, 40, 43, 46, 47, 48, 52, 53, 54, 55, 56, 57, 59, 60, 64, 71, 79, 89, 95, 97, 99, 101, 103, 104, 105, 106, 108, 109, 111, 112, 114, 116, 119, 120, 121, 127, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 152, 153, 156, 160, 163, 164, 166, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 183, 185, 186, 187, 189, 190, 192, 193, 194, 197, 199, 206, 207, 208, 209, 211, 213, 214, 216, 220, 221, 222, 226, 228, 229, 230, 234, 235, 236, 242, 244, 250, 258, 260, 261, 266, 271, 273, 274, 275, 276, 277, 279, 280, 281], "friendli": [1, 17, 245], "append": [1, 8, 11, 16, 19, 22, 23, 53, 102, 119, 121, 133, 148, 170, 172, 174, 175, 176, 178, 183, 216, 277, 279], "special": [1, 12, 22, 43, 52, 97, 99, 106, 108, 111, 112, 117, 137, 149, 157, 169, 170, 182, 185, 211, 213, 218, 228, 258, 261, 276], "torchr": 1, "transformedenv": [1, 16, 172], "common": [1, 7, 11, 12, 16, 18, 20, 23, 39, 40, 47, 53, 55, 64, 86, 97, 102, 104, 106, 108, 111, 113, 121, 127, 131, 136, 146, 153, 155, 156, 164, 166, 170, 171, 172, 177, 185, 189, 190, 192, 208, 211, 216, 236, 246, 247, 260, 261, 262, 265, 266, 272], "rescal": [1, 55, 192, 199], "heurist": [1, 86, 197, 234, 273], "multipli": [1, 4, 6, 14, 23, 52, 53, 94, 95, 97, 102, 112, 178, 186, 260, 272], "5": [1, 2, 3, 6, 7, 13, 20, 36, 38, 48, 50, 51, 53, 56, 69, 86, 89, 92, 97, 99, 101, 103, 106, 109, 110, 111, 112, 116, 119, 120, 121, 132, 133, 142, 146, 148, 154, 157, 171, 174, 175, 176, 185, 189, 190, 192, 193, 197, 201, 211, 215, 216, 218, 220, 222, 224, 230, 234, 235, 236, 242, 252, 266, 269, 277], "interfac": [1, 4, 6, 7, 16, 17, 53, 102, 112, 138, 145, 148, 172, 185, 190, 200, 235, 242, 276], "between": [1, 6, 7, 11, 13, 14, 16, 19, 20, 23, 35, 43, 50, 52, 53, 69, 77, 79, 86, 87, 89, 92, 94, 97, 99, 102, 104, 105, 106, 109, 111, 112, 120, 131, 132, 134, 136, 138, 148, 149, 153, 157, 160, 166, 168, 170, 173, 175, 176, 177, 178, 183, 185, 187, 189, 190, 192, 193, 195, 197, 198, 199, 200, 206, 207, 209, 213, 214, 216, 227, 229, 245, 246, 247, 251, 261, 266, 276, 277, 280], "simul": [1, 20, 22, 23, 99, 141, 172, 216, 230], "work": [1, 2, 4, 6, 7, 9, 14, 16, 18, 20, 22, 38, 39, 46, 53, 54, 55, 56, 59, 60, 64, 79, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 107, 111, 112, 113, 116, 131, 137, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 163, 164, 165, 166, 169, 170, 171, 172, 174, 176, 177, 178, 182, 185, 186, 189, 190, 192, 193, 197, 199, 206, 207, 208, 209, 211, 216, 218, 220, 221, 222, 227, 230, 234, 235, 245, 246, 251, 258, 260, 261, 266, 269, 270, 273, 276], "doubl": [1, 2, 4, 6, 7, 39, 94, 101, 112, 119, 131, 142, 149, 156, 165, 172, 183, 234, 245], "precis": [1, 11, 12, 17, 64, 137, 142, 143, 157, 166, 172, 183, 213, 234, 235, 236, 249, 257, 265, 266, 281], "number": [1, 4, 6, 7, 13, 14, 17, 22, 23, 36, 39, 44, 47, 55, 56, 57, 59, 69, 86, 89, 92, 94, 97, 99, 104, 106, 108, 111, 112, 119, 120, 121, 132, 133, 135, 136, 137, 138, 139, 145, 146, 148, 149, 150, 152, 154, 155, 160, 164, 166, 168, 170, 171, 172, 173, 174, 175, 176, 182, 185, 187, 190, 192, 197, 199, 209, 210, 211, 220, 221, 224, 228, 234, 246, 248, 251, 260, 261, 271, 277, 279], "presum": 1, "singl": [1, 2, 4, 6, 7, 11, 12, 13, 17, 20, 22, 40, 43, 46, 50, 55, 57, 58, 59, 60, 64, 89, 92, 94, 95, 99, 101, 102, 103, 104, 106, 112, 131, 132, 133, 134, 136, 139, 141, 142, 143, 144, 145, 146, 148, 149, 155, 156, 160, 165, 166, 168, 172, 173, 174, 175, 176, 178, 182, 185, 187, 189, 190, 193, 194, 195, 197, 199, 211, 216, 220, 228, 234, 246, 260, 261, 276, 279], "ones": [1, 2, 4, 7, 8, 13, 16, 18, 23, 99, 102, 104, 148, 150, 153, 164, 165, 166, 168, 169, 172, 173, 182, 189, 193, 194, 207, 218, 235, 260, 276, 277], "goe": [1, 6, 55, 102, 105, 106, 131, 135, 143, 155, 169, 172, 175, 190], "wai": [1, 2, 4, 6, 7, 11, 12, 13, 14, 16, 34, 38, 40, 43, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 71, 76, 79, 86, 92, 94, 95, 97, 98, 102, 105, 106, 108, 111, 112, 114, 116, 117, 121, 130, 132, 136, 137, 138, 139, 143, 145, 146, 152, 153, 154, 155, 156, 157, 160, 163, 164, 168, 170, 172, 174, 175, 177, 180, 183, 186, 189, 190, 192, 193, 194, 195, 199, 207, 208, 209, 211, 214, 218, 228, 244, 247, 251, 252, 258, 261, 273], "repres": [1, 4, 6, 12, 14, 15, 22, 35, 46, 53, 55, 56, 64, 66, 79, 86, 89, 94, 95, 97, 99, 103, 104, 111, 113, 114, 116, 119, 120, 132, 133, 134, 136, 138, 139, 141, 149, 152, 153, 156, 157, 172, 173, 176, 178, 185, 189, 190, 192, 193, 197, 206, 211, 246, 248, 258, 260], "doubletofloat": [1, 172], "in_kei": [1, 16, 149, 172], "list": [1, 4, 6, 7, 8, 11, 13, 14, 16, 17, 19, 23, 27, 36, 40, 43, 47, 50, 52, 53, 54, 56, 72, 79, 92, 95, 99, 102, 108, 109, 111, 113, 114, 116, 117, 120, 137, 140, 148, 157, 164, 166, 171, 172, 174, 175, 176, 178, 182, 183, 185, 187, 189, 190, 200, 208, 211, 213, 216, 221, 226, 230, 233, 244, 246, 250, 251, 265, 270, 276, 279], "refer": [1, 4, 6, 7, 9, 11, 15, 17, 20, 27, 34, 40, 64, 79, 86, 89, 94, 95, 102, 104, 106, 108, 109, 111, 113, 114, 116, 117, 119, 121, 132, 133, 134, 136, 137, 140, 141, 145, 146, 148, 154, 163, 166, 170, 172, 174, 175, 176, 182, 185, 189, 190, 192, 193, 197, 201, 206, 209, 213, 215, 216, 234, 236, 244, 245, 246, 248, 250, 251, 258, 261, 271, 273, 276, 279], "float": [1, 4, 6, 7, 11, 13, 23, 97, 102, 108, 111, 112, 119, 132, 133, 136, 138, 148, 157, 169, 170, 174, 176, 189, 190, 192, 194, 197, 199, 200, 208, 209, 210, 211, 221, 234, 236, 245, 251, 258], "while": [1, 2, 3, 6, 7, 8, 13, 14, 15, 16, 20, 23, 36, 39, 53, 56, 59, 86, 95, 102, 113, 114, 119, 130, 131, 133, 134, 135, 137, 138, 141, 144, 146, 148, 149, 154, 155, 157, 163, 166, 170, 171, 172, 175, 176, 177, 178, 180, 187, 189, 190, 193, 194, 197, 199, 206, 207, 208, 209, 210, 211, 213, 216, 227, 245, 246, 250, 251, 258, 266, 270, 273, 276], "in_keys_inv": [1, 16], "befor": [1, 3, 4, 6, 7, 11, 12, 13, 14, 16, 19, 23, 34, 39, 41, 46, 47, 48, 50, 53, 55, 56, 59, 64, 79, 89, 94, 95, 99, 104, 105, 106, 108, 109, 111, 112, 114, 116, 117, 119, 120, 121, 127, 131, 133, 134, 136, 138, 139, 141, 146, 148, 149, 152, 154, 156, 161, 163, 164, 166, 168, 170, 171, 172, 174, 175, 176, 178, 182, 183, 186, 187, 189, 190, 192, 194, 197, 206, 207, 209, 215, 227, 230, 245, 246, 248, 250, 259, 261, 262, 263, 264, 266, 270, 271, 273, 274, 277, 279, 280], "concaten": [1, 16, 43, 52, 53, 108, 109, 136, 140, 173], "cattensor": 1, "leav": [1, 11, 18, 20, 34, 46, 53, 55, 57, 89, 94, 138, 163, 164, 171, 216, 234, 258], "constant": [1, 2, 7, 43, 52, 86, 92, 94, 102, 106, 135, 149, 164, 172, 173, 183, 187, 189, 210, 216, 261, 277], "significantli": [1, 23, 109, 130, 136, 142, 166, 187, 199, 213, 252, 271, 279], "speed": [1, 6, 7, 12, 16, 23, 34, 36, 39, 52, 53, 89, 94, 97, 98, 104, 112, 130, 131, 133, 134, 136, 139, 144, 149, 150, 154, 157, 166, 171, 172, 174, 177, 187, 193, 199, 200, 213, 214, 222, 226, 227, 246, 259, 261, 265, 275, 276, 279], "throughput": [1, 133, 166, 261, 279], "choos": [1, 11, 12, 14, 17, 53, 56, 59, 64, 69, 92, 95, 106, 120, 121, 135, 136, 140, 146, 148, 156, 164, 171, 172, 173, 178, 182, 185, 190, 192, 195, 199, 201, 226, 242, 245, 251, 266], "whether": [1, 7, 11, 12, 13, 16, 53, 56, 94, 95, 97, 101, 102, 104, 112, 114, 121, 143, 148, 153, 156, 163, 166, 172, 174, 182, 183, 185, 189, 194, 209, 246, 251, 261, 262], "individu": [1, 6, 7, 14, 35, 53, 89, 94, 95, 99, 120, 134, 136, 138, 142, 165, 166, 170, 175, 178, 183, 187, 189, 190, 193, 194, 242, 245, 246, 261, 271], "approach": [1, 4, 6, 7, 9, 41, 60, 95, 112, 114, 116, 121, 135, 139, 144, 164, 165, 166, 172, 173, 175, 178, 187, 189, 192, 197, 206, 209, 210, 213, 220, 236, 246, 258, 265, 266], "parallelenv": [1, 172], "num_work": [1, 47, 55, 92, 101, 132, 133, 182, 183, 261], "4": [1, 2, 3, 4, 6, 7, 11, 14, 18, 19, 21, 27, 36, 38, 48, 55, 57, 58, 59, 66, 67, 69, 74, 79, 92, 95, 97, 99, 101, 102, 103, 105, 106, 108, 111, 112, 118, 120, 131, 132, 133, 135, 141, 142, 144, 145, 148, 149, 154, 156, 157, 163, 168, 170, 172, 173, 174, 175, 176, 185, 187, 189, 192, 193, 195, 197, 199, 201, 209, 211, 214, 222, 227, 230, 234, 259, 266, 270, 271, 276, 277, 279, 281], "leverag": [1, 7, 53, 79, 104, 114, 117, 121, 131, 133, 136, 146, 148, 155, 192, 200, 210, 214, 215, 229, 230, 233, 261, 262, 265, 275, 279], "vector": [1, 2, 6, 7, 8, 14, 16, 34, 53, 56, 86, 94, 95, 99, 101, 102, 104, 106, 108, 109, 111, 112, 139, 140, 141, 149, 152, 165, 169, 178, 190, 200, 210, 220, 222, 234, 235, 261, 273], "capabl": [1, 3, 13, 17, 20, 53, 79, 136, 157, 166, 177, 182, 186, 216, 222, 224, 225, 233, 245, 261], "pytorch": [1, 2, 4, 5, 8, 11, 13, 16, 18, 20, 21, 22, 26, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 48, 52, 53, 55, 56, 57, 59, 60, 62, 63, 65, 68, 70, 74, 75, 78, 79, 80, 81, 82, 83, 84, 87, 88, 89, 92, 94, 95, 104, 105, 110, 112, 113, 115, 116, 121, 122, 124, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 160, 161, 163, 165, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 186, 187, 188, 189, 195, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 219, 220, 224, 225, 226, 227, 228, 229, 230, 233, 238, 240, 241, 244, 245, 246, 247, 250, 253, 254, 255, 256, 257, 258, 260, 266, 270, 271, 272, 273, 275, 276, 277, 279, 280, 281], "adopt": [1, 27, 64, 163, 169, 175, 215, 236], "frame_skip": [1, 172], "frame": [1, 7, 149, 156, 171, 172, 182, 197, 276, 277], "count": [1, 7, 13, 23, 39, 47, 53, 86, 106, 148, 149, 172, 176, 178, 182, 185, 229], "frames_per_batch": [1, 172], "total_fram": [1, 172], "adjust": [1, 16, 23, 34, 39, 40, 46, 56, 79, 94, 97, 103, 136, 138, 139, 160, 174, 261], "total": [1, 6, 13, 14, 15, 16, 18, 19, 20, 21, 34, 35, 36, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 52, 53, 55, 56, 57, 59, 68, 72, 74, 76, 77, 78, 79, 87, 89, 90, 92, 94, 97, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 122, 124, 127, 133, 135, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 179, 180, 182, 185, 187, 189, 190, 192, 193, 199, 206, 207, 208, 209, 211, 217, 225, 226, 233, 234, 236, 246, 247, 250, 251, 252, 257, 258, 260, 266, 268, 272, 273, 274, 275, 277, 279, 281], "rais": [1, 11, 13, 18, 23, 79, 113, 135, 136, 137, 154, 157, 171, 172, 187, 189, 227, 261, 274, 276], "skip": [1, 6, 12, 16, 20, 23, 46, 105, 121, 143, 152, 156, 174, 176, 182, 187, 189, 193, 214, 215, 216, 226, 246, 251, 264, 277, 279], "unchang": [1, 11, 87, 94], "seem": [1, 47, 56, 137, 139, 149, 166, 168, 190, 246], "like": [1, 3, 4, 6, 7, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 35, 36, 39, 40, 43, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 64, 72, 86, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 119, 120, 124, 127, 130, 131, 132, 136, 137, 138, 140, 143, 145, 146, 148, 149, 150, 152, 153, 154, 155, 157, 160, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 177, 178, 182, 183, 185, 186, 189, 190, 192, 193, 194, 200, 207, 208, 209, 213, 214, 215, 216, 220, 221, 222, 228, 229, 230, 234, 235, 236, 242, 244, 245, 246, 247, 248, 251, 260, 261, 270, 271, 272, 273, 274, 276, 279], "cheat": [1, 102, 131, 178], "compar": [1, 6, 12, 17, 20, 23, 39, 47, 87, 95, 102, 104, 109, 112, 117, 127, 132, 134, 135, 136, 138, 148, 153, 154, 155, 157, 160, 163, 165, 166, 170, 172, 173, 174, 176, 178, 182, 185, 187, 189, 193, 195, 198, 199, 200, 206, 214, 216, 222, 226, 227, 233, 234, 235, 250, 259, 260, 261, 265, 274, 275, 279], "dataset": [1, 7, 20, 27, 34, 35, 37, 38, 39, 40, 41, 43, 44, 46, 47, 50, 53, 56, 57, 59, 61, 79, 95, 99, 104, 106, 122, 127, 130, 131, 132, 133, 138, 139, 140, 144, 148, 150, 165, 166, 171, 175, 177, 178, 180, 182, 183, 185, 190, 213, 216, 235, 236, 237, 248, 261, 265, 269, 276, 281], "10m": 1, "element": [1, 6, 7, 8, 14, 20, 23, 40, 43, 52, 53, 94, 95, 99, 102, 106, 108, 109, 111, 131, 137, 148, 154, 160, 164, 172, 185, 189, 192, 207, 208, 209, 211, 216, 246, 248, 261], "2": [1, 2, 3, 4, 6, 7, 8, 11, 13, 14, 16, 17, 18, 19, 21, 22, 27, 35, 36, 38, 46, 50, 53, 55, 56, 57, 59, 66, 67, 68, 72, 73, 76, 78, 79, 92, 94, 95, 97, 101, 102, 104, 105, 106, 108, 111, 112, 113, 116, 117, 120, 121, 124, 127, 131, 132, 133, 134, 136, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 154, 155, 157, 161, 163, 165, 170, 171, 172, 173, 174, 175, 176, 177, 185, 187, 189, 190, 193, 195, 197, 198, 199, 200, 201, 206, 211, 214, 215, 218, 221, 222, 224, 225, 226, 229, 230, 234, 235, 236, 245, 247, 250, 252, 258, 261, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281], "anoth": [1, 4, 6, 11, 13, 16, 34, 43, 46, 52, 53, 56, 66, 79, 89, 97, 99, 102, 103, 105, 109, 112, 119, 120, 121, 131, 140, 141, 142, 143, 145, 148, 149, 152, 164, 166, 170, 172, 174, 175, 176, 177, 178, 186, 187, 189, 190, 192, 194, 199, 221, 244, 246, 251, 261, 262, 279], "actual": [1, 3, 6, 7, 11, 13, 15, 16, 17, 23, 34, 41, 53, 55, 56, 79, 89, 97, 104, 105, 108, 111, 117, 131, 134, 137, 138, 139, 142, 146, 148, 153, 163, 166, 172, 178, 182, 183, 187, 189, 190, 198, 199, 206, 208, 220, 246, 272], "ratio": [1, 86, 104, 154, 166, 172, 182, 192], "interact": [1, 6, 7, 16, 53, 95, 101, 102, 138, 141, 143, 156, 172, 175, 183, 187, 189, 190, 229, 273], "nutshel": [1, 208], "cautiou": 1, "about": [1, 4, 6, 7, 11, 12, 16, 17, 20, 23, 38, 39, 40, 43, 46, 53, 56, 57, 58, 59, 61, 76, 77, 79, 92, 94, 97, 99, 101, 102, 104, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 127, 130, 131, 133, 135, 138, 139, 140, 143, 145, 146, 148, 150, 153, 154, 155, 163, 165, 166, 171, 172, 173, 174, 176, 177, 178, 180, 182, 185, 187, 189, 190, 192, 193, 197, 198, 199, 207, 208, 209, 214, 215, 216, 227, 229, 230, 249, 250, 257, 258, 260, 263, 265, 271, 275, 276, 281], "deal": [1, 6, 47, 53, 55, 56, 97, 104, 112, 120, 121, 133, 155, 166, 172, 189, 190, 229, 236, 263], "lead": [1, 4, 6, 7, 16, 18, 53, 56, 79, 86, 92, 104, 112, 139, 141, 143, 149, 166, 189, 208, 220, 227, 258, 261, 266, 279], "bias": [1, 35, 46, 99, 104, 121, 177, 193, 258, 263, 264], "comparison": [1, 20, 87, 95, 102, 103, 104, 105, 132, 154, 155, 195, 199, 206, 208, 211, 213, 216, 260], "scale": [1, 7, 23, 35, 44, 55, 60, 79, 99, 101, 104, 114, 130, 131, 132, 133, 135, 146, 148, 149, 156, 168, 172, 173, 179, 180, 190, 194, 195, 199, 229, 230, 236, 245, 261, 266, 273, 281], "help": [1, 4, 6, 11, 12, 17, 20, 22, 23, 34, 35, 46, 53, 56, 72, 86, 92, 95, 104, 105, 108, 109, 111, 112, 121, 130, 131, 132, 133, 138, 145, 146, 149, 150, 154, 155, 160, 163, 169, 172, 173, 174, 175, 176, 177, 178, 185, 187, 189, 190, 197, 199, 207, 208, 209, 211, 213, 215, 216, 220, 224, 226, 227, 228, 230, 236, 242, 244, 245, 246, 248, 259, 261, 262, 265, 271, 273, 274, 277, 279], "signal": [1, 46, 95, 97, 172, 174, 251, 260], "magnitud": [1, 20, 94, 170, 190, 216, 245], "truncat": [1, 102, 119, 154, 172, 216], "A": [1, 6, 7, 8, 11, 13, 14, 16, 20, 34, 35, 36, 40, 43, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 71, 72, 73, 76, 77, 79, 86, 87, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 113, 120, 121, 130, 131, 133, 137, 138, 139, 140, 143, 144, 148, 150, 153, 157, 163, 164, 165, 172, 173, 174, 175, 177, 178, 179, 180, 183, 185, 187, 189, 190, 193, 197, 198, 210, 211, 215, 216, 228, 234, 235, 246, 250, 258, 261, 263, 271, 273, 276, 279, 281], "thousand": [1, 111, 130, 136, 139, 149, 178, 185], "500": [1, 7, 27, 155, 157, 168, 173, 176, 246], "good": [1, 2, 6, 7, 47, 54, 56, 97, 101, 102, 104, 111, 114, 131, 132, 138, 148, 149, 154, 160, 171, 172, 173, 177, 179, 183, 185, 189, 190, 192, 193, 210, 242, 246, 261, 266, 279, 281], "statist": [1, 56, 97, 131, 142, 153, 170, 172, 178, 182, 183, 185, 236, 246], "arbitrari": [1, 6, 11, 16, 18, 34, 77, 95, 104, 109, 133, 150, 156, 165, 183, 187, 193, 251, 252], "random": [1, 7, 16, 19, 23, 43, 46, 47, 48, 50, 52, 55, 56, 66, 67, 69, 76, 77, 79, 95, 97, 101, 108, 109, 112, 113, 114, 119, 120, 127, 132, 133, 138, 140, 141, 146, 148, 150, 156, 160, 163, 164, 170, 172, 173, 174, 176, 178, 183, 187, 211, 226, 246, 248, 252, 261, 277], "standard": [1, 6, 11, 43, 47, 52, 56, 86, 92, 95, 97, 104, 105, 106, 112, 114, 116, 117, 148, 171, 180, 187, 189, 190, 192, 199, 211, 248, 261], "deviat": [1, 86, 97, 104], "observationnorm": [1, 172], "init_stat": [1, 172], "purpos": [1, 6, 61, 79, 89, 94, 99, 103, 120, 132, 137, 138, 140, 148, 149, 153, 154, 163, 168, 171, 172, 175, 176, 182, 186, 187, 190, 197, 199, 207, 210, 228, 236, 258, 261, 266, 270], "get": [1, 2, 6, 7, 9, 11, 13, 16, 17, 18, 19, 20, 23, 27, 36, 38, 46, 47, 48, 53, 54, 55, 56, 59, 60, 64, 79, 87, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 119, 120, 121, 127, 130, 131, 133, 135, 136, 138, 139, 140, 141, 148, 150, 153, 155, 163, 164, 165, 166, 169, 170, 171, 172, 173, 174, 175, 178, 182, 183, 185, 186, 189, 190, 192, 197, 198, 199, 201, 206, 213, 215, 216, 217, 221, 222, 226, 227, 234, 242, 246, 251, 261, 264, 265, 266, 276, 279, 280, 281], "summari": [1, 86, 111, 138, 149, 166, 172, 182, 189, 259, 260], "dummi": [1, 4, 11, 18, 50, 89, 97, 103, 146, 150, 155, 165, 168, 169, 190, 213, 228, 236, 276], "over": [1, 4, 6, 7, 12, 13, 16, 18, 20, 22, 23, 35, 36, 39, 40, 43, 47, 50, 52, 53, 54, 55, 56, 57, 59, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 112, 119, 120, 131, 132, 133, 134, 135, 136, 139, 141, 145, 146, 148, 150, 153, 154, 155, 156, 157, 160, 165, 170, 172, 173, 174, 175, 176, 177, 178, 182, 183, 185, 187, 189, 190, 192, 193, 195, 199, 210, 216, 220, 234, 245, 261, 264, 274, 275], "earlier": [1, 6, 7, 79, 97, 99, 102, 105, 106, 109, 112, 132, 134, 136, 149, 163, 166, 172, 178, 189, 245, 246], "turn": [1, 6, 7, 11, 16, 17, 23, 44, 53, 95, 99, 101, 102, 119, 140, 149, 155, 163, 164, 166, 170, 174, 178, 190, 200, 207, 208, 210], "seen": [1, 12, 13, 22, 23, 47, 50, 53, 55, 99, 102, 104, 109, 111, 112, 119, 149, 165, 175, 187, 189, 190, 210, 246, 273], "requir": [1, 2, 4, 6, 7, 8, 11, 12, 14, 16, 17, 18, 22, 23, 27, 38, 44, 46, 53, 54, 55, 56, 59, 64, 87, 89, 92, 94, 98, 103, 111, 112, 116, 117, 132, 136, 138, 140, 142, 143, 145, 146, 148, 149, 150, 152, 155, 160, 163, 164, 165, 166, 168, 171, 172, 174, 175, 176, 177, 178, 185, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 201, 207, 208, 209, 213, 218, 220, 222, 224, 225, 227, 228, 230, 234, 235, 236, 245, 247, 248, 250, 251, 258, 260, 261, 266, 270, 271, 272, 273, 274, 277], "select": [1, 4, 6, 12, 54, 86, 92, 101, 104, 112, 114, 157, 170, 173, 174, 176, 182, 183, 187, 189, 197, 201, 208, 210, 214, 216, 221, 234, 251, 261, 271, 273], "recal": [1, 7, 56, 94, 102, 105, 111, 146, 172, 183, 207, 208, 209, 258, 260], "wrap": [1, 4, 6, 7, 12, 19, 36, 40, 48, 92, 97, 106, 108, 109, 114, 119, 132, 134, 137, 142, 146, 149, 156, 166, 172, 175, 176, 185, 186, 189, 190, 198, 224, 225, 228, 229, 242, 245, 251, 280], "flow": [1, 6, 16, 34, 46, 56, 70, 74, 89, 101, 104, 114, 115, 116, 117, 131, 134, 172, 173, 182, 187, 198, 213, 261, 265, 281], "handl": [1, 6, 11, 12, 18, 53, 56, 57, 89, 99, 102, 112, 113, 117, 131, 132, 139, 150, 161, 165, 166, 168, 170, 171, 172, 175, 176, 177, 185, 186, 187, 189, 190, 206, 208, 211, 220, 222, 227, 228, 235, 244, 250, 251, 260, 276, 279], "specifi": [1, 4, 6, 7, 11, 13, 18, 20, 23, 27, 36, 40, 55, 56, 86, 92, 94, 95, 97, 99, 102, 103, 108, 113, 120, 132, 133, 134, 135, 136, 138, 139, 143, 149, 150, 152, 169, 170, 172, 175, 176, 182, 185, 189, 194, 195, 206, 207, 208, 209, 211, 213, 214, 216, 220, 221, 226, 236, 250, 251, 259, 261, 262, 270, 273, 275, 276, 279], "scenario": [1, 7, 16, 113, 114, 116, 117, 121, 127, 137, 166, 173, 176, 189, 197, 210, 234, 258, 262, 279], "tensordictsequenti": [1, 149], "valueoper": [1, 172], "automat": [1, 2, 4, 6, 7, 11, 12, 17, 35, 37, 38, 40, 43, 46, 48, 49, 50, 52, 57, 61, 64, 101, 103, 105, 112, 120, 124, 131, 132, 133, 134, 136, 137, 138, 143, 154, 157, 166, 168, 172, 173, 176, 179, 180, 182, 185, 186, 189, 190, 195, 197, 215, 222, 226, 227, 228, 234, 235, 236, 242, 247, 249, 250, 251, 257, 260, 261, 265, 273, 281], "out_kei": [1, 16, 149, 172], "state_action_valu": 1, "state_valu": [1, 172], "built": [1, 4, 6, 7, 9, 11, 21, 34, 50, 94, 95, 97, 99, 106, 131, 139, 148, 149, 172, 177, 183, 187, 189, 192, 236, 244, 246, 248, 264, 271, 281], "present": [1, 7, 11, 22, 39, 86, 87, 104, 113, 164, 169, 170, 173, 174, 176, 185, 187, 189, 192, 211, 261, 280], "origin": [1, 6, 7, 8, 11, 14, 16, 20, 23, 34, 53, 56, 79, 92, 95, 102, 104, 109, 113, 114, 134, 136, 137, 139, 140, 160, 161, 164, 165, 166, 170, 173, 185, 186, 187, 189, 194, 199, 200, 209, 213, 216, 235, 236, 242, 276, 277], "paper": [1, 6, 14, 19, 20, 56, 79, 124, 133, 136, 172, 173, 175, 177, 178, 180, 190, 193, 211, 216], "found": [1, 4, 6, 7, 12, 19, 53, 54, 95, 104, 134, 138, 146, 148, 149, 153, 157, 166, 175, 176, 177, 185, 189, 211, 221, 235, 242, 261, 276], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 6, 8, 11, 12, 13, 15, 16, 19, 23, 47, 53, 55, 56, 57, 79, 89, 94, 95, 97, 104, 105, 106, 108, 109, 111, 112, 127, 134, 135, 136, 138, 139, 140, 141, 143, 144, 148, 149, 153, 163, 164, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 183, 185, 187, 189, 190, 192, 193, 194, 199, 206, 207, 208, 222, 224, 226, 227, 228, 242, 246, 250, 251, 252, 264, 266, 274, 276, 280], "lazi": 1, "materi": [1, 132, 136, 155, 190, 193, 198, 206, 218, 252, 258], "abl": [1, 3, 4, 6, 7, 16, 17, 20, 34, 35, 53, 66, 79, 89, 97, 104, 105, 107, 111, 112, 120, 127, 138, 142, 143, 144, 145, 148, 149, 150, 154, 156, 157, 163, 165, 172, 175, 183, 187, 189, 190, 192, 193, 197, 208, 216, 222, 233, 248, 258, 264, 273, 276], "devic": [1, 3, 4, 7, 11, 12, 13, 16, 18, 19, 20, 22, 23, 43, 46, 47, 48, 52, 53, 54, 56, 57, 59, 60, 64, 67, 77, 92, 102, 104, 106, 112, 114, 120, 130, 131, 132, 134, 136, 138, 139, 145, 146, 148, 149, 154, 157, 163, 166, 168, 170, 171, 172, 175, 176, 182, 190, 192, 194, 195, 197, 198, 200, 201, 211, 213, 215, 216, 218, 224, 225, 227, 228, 230, 233, 234, 235, 246, 249, 251, 252, 257, 258, 262, 264, 265, 271, 272, 273, 275, 276, 277, 280, 281], "achiev": [1, 3, 4, 7, 16, 20, 23, 27, 34, 47, 53, 60, 86, 92, 104, 131, 134, 137, 142, 148, 149, 154, 163, 164, 166, 170, 172, 173, 182, 190, 193, 194, 198, 199, 216, 226, 234, 261, 265, 273, 275, 279], "oper": [1, 7, 8, 15, 16, 17, 20, 21, 22, 23, 34, 35, 40, 46, 48, 50, 53, 55, 64, 66, 67, 77, 86, 87, 89, 97, 98, 101, 102, 104, 105, 106, 111, 112, 113, 114, 115, 116, 119, 120, 131, 132, 134, 135, 136, 137, 139, 141, 143, 148, 149, 150, 152, 154, 155, 157, 160, 165, 168, 169, 171, 172, 174, 178, 182, 183, 185, 186, 187, 189, 190, 193, 199, 206, 207, 210, 213, 214, 216, 220, 221, 228, 229, 233, 234, 235, 242, 244, 245, 246, 248, 251, 252, 260, 264, 265, 271, 272, 273, 276, 279, 280, 281], "practic": [1, 6, 7, 13, 41, 50, 53, 55, 56, 94, 95, 97, 102, 104, 106, 112, 113, 120, 124, 127, 131, 136, 137, 144, 149, 154, 157, 164, 170, 172, 173, 189, 193, 206, 207, 211, 246, 247, 250, 261, 266, 275, 276, 279], "small": [1, 3, 6, 7, 20, 22, 27, 46, 47, 50, 61, 79, 94, 97, 99, 101, 102, 104, 106, 107, 109, 114, 120, 127, 132, 133, 135, 138, 139, 140, 142, 153, 163, 164, 166, 171, 172, 173, 176, 178, 180, 185, 190, 192, 197, 199, 206, 216, 234, 245, 246, 248, 261, 276, 277], "fake": [1, 7, 20, 23, 50, 56, 163, 189, 211, 216], "spec": [1, 117, 149, 172, 176, 189, 194, 246], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 14, 56, 91, 104, 134, 140, 154, 155, 156, 157, 160, 182, 185, 197], "ou": 1, "nois": [1, 7, 14, 56, 79, 229, 260], "reach": [1, 8, 12, 20, 56, 64, 104, 139, 146, 148, 156, 157, 172, 176, 189, 216, 236, 246], "minimum": [1, 4, 86, 134, 172, 176, 208], "iter": [1, 3, 7, 13, 14, 16, 27, 34, 35, 39, 40, 46, 47, 50, 56, 57, 59, 89, 92, 94, 95, 97, 99, 101, 105, 112, 114, 121, 138, 141, 144, 146, 149, 154, 172, 173, 174, 175, 176, 182, 183, 187, 190, 192, 225, 242, 245, 261, 264, 274, 276, 277, 280], "reset": [1, 23, 39, 97, 102, 112, 127, 149, 172, 173, 174, 176, 182, 187, 200, 236, 277], "develop": [1, 3, 4, 6, 11, 12, 14, 17, 27, 86, 89, 95, 108, 112, 114, 116, 141, 148, 157, 169, 176, 182, 187, 193, 194, 199, 200, 201, 206, 209, 210, 228, 229, 233, 235, 236, 249, 261], "tight": [1, 113, 114, 116, 117], "per": [1, 4, 6, 7, 11, 13, 23, 101, 104, 111, 131, 133, 139, 140, 142, 146, 148, 149, 155, 157, 163, 168, 170, 172, 176, 177, 178, 179, 182, 183, 185, 189, 190, 192, 195, 197, 198, 206, 220, 222, 226, 227, 228, 236, 246, 250, 260, 270, 279, 280, 281], "sync": [1, 12, 13, 19, 59, 131, 132, 133, 134, 135, 156, 190], "natur": [1, 6, 7, 20, 22, 27, 48, 79, 99, 104, 112, 138, 139, 149, 166, 175, 185, 208, 211, 216, 222], "resourc": [1, 57, 79, 92, 114, 116, 132, 146, 148, 163, 172, 182, 185, 197, 233, 246, 261, 266, 269, 279], "alloc": [1, 7, 22, 43, 52, 59, 102, 142, 148, 163, 166, 182, 189, 190, 211, 218, 228, 250, 251, 280], "gpu": [1, 3, 14, 20, 22, 23, 43, 46, 50, 52, 53, 54, 56, 57, 58, 60, 61, 64, 67, 77, 86, 87, 97, 98, 102, 103, 104, 106, 114, 120, 124, 127, 130, 131, 132, 133, 134, 136, 137, 139, 144, 145, 146, 148, 149, 150, 154, 157, 160, 163, 165, 168, 172, 173, 175, 176, 177, 185, 187, 192, 195, 197, 198, 200, 201, 213, 214, 216, 217, 221, 222, 224, 227, 228, 242, 245, 246, 251, 264, 265, 271, 273, 281], "worker": [1, 7, 13, 19, 55, 56, 97, 130, 132, 133, 135, 148, 157, 172, 175, 176, 182, 226, 261], "so": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 27, 34, 47, 50, 53, 55, 56, 57, 69, 72, 79, 87, 89, 92, 94, 95, 97, 99, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 114, 119, 120, 127, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 148, 149, 154, 155, 156, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 185, 187, 189, 190, 192, 193, 194, 197, 198, 199, 206, 208, 209, 210, 211, 216, 218, 221, 234, 235, 242, 245, 246, 250, 260, 261, 264, 265, 274, 275, 276, 279, 280], "syncdatacollector": [1, 172], "process": [1, 4, 6, 7, 13, 14, 16, 17, 19, 20, 22, 27, 36, 39, 40, 44, 50, 53, 54, 55, 56, 60, 64, 79, 86, 89, 94, 95, 97, 99, 103, 104, 112, 113, 114, 121, 124, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 144, 145, 148, 149, 153, 154, 156, 157, 165, 166, 171, 173, 175, 176, 177, 178, 182, 185, 189, 190, 197, 198, 199, 210, 211, 213, 214, 215, 216, 222, 226, 227, 228, 230, 236, 246, 248, 250, 251, 260, 261, 262, 264, 265, 270, 275, 276, 277, 279, 280], "offer": [1, 4, 9, 13, 16, 18, 22, 40, 44, 46, 57, 64, 94, 95, 106, 133, 134, 136, 150, 152, 154, 155, 166, 190, 193, 228, 244, 246, 251, 260, 261, 266, 279], "multiasyncdatacollector": [1, 172], "rollout": [1, 172], "asynchron": [1, 130, 131, 135, 138, 169, 172, 176, 251, 265], "manner": [1, 6, 11, 16, 23, 34, 94, 112, 172, 185, 190], "therebi": [1, 200, 206, 211, 276], "decoupl": [1, 36, 164], "factori": [1, 7, 102, 108, 207, 208, 247, 250], "empti": [1, 4, 6, 7, 8, 11, 16, 23, 102, 140, 154, 171, 178, 182, 185, 189, 193, 198, 211, 218, 221, 251, 260], "maximum": [1, 13, 53, 86, 99, 109, 138, 140, 149, 154, 172, 177, 178, 210, 261], "non": [1, 2, 3, 6, 11, 13, 16, 23, 35, 53, 55, 57, 58, 60, 86, 89, 99, 102, 104, 105, 107, 111, 112, 121, 133, 134, 138, 142, 143, 148, 149, 152, 155, 157, 160, 170, 174, 177, 178, 182, 187, 190, 193, 199, 206, 213, 218, 228, 246, 258, 262, 275, 279], "termin": [1, 16, 57, 92, 172, 173, 175, 176, 185, 221], "max_frames_per_traj": [1, 172], "effect": [1, 6, 7, 8, 11, 13, 18, 59, 79, 86, 95, 99, 102, 104, 112, 117, 136, 139, 140, 146, 150, 163, 165, 166, 170, 173, 177, 178, 185, 190, 208, 220, 227, 229, 245, 261, 266, 275], "regist": [1, 8, 9, 18, 39, 46, 50, 99, 117, 119, 121, 131, 133, 134, 136, 146, 152, 163, 164, 172, 186, 189, 197, 198, 222, 235, 242, 245, 252, 263], "new": [1, 2, 4, 6, 7, 9, 11, 14, 16, 18, 27, 33, 34, 38, 43, 46, 48, 52, 53, 54, 56, 59, 65, 68, 79, 81, 82, 83, 84, 86, 89, 101, 102, 103, 104, 106, 109, 111, 116, 117, 119, 121, 127, 131, 132, 133, 134, 135, 137, 141, 149, 152, 154, 156, 163, 164, 165, 166, 169, 170, 172, 173, 174, 177, 178, 182, 185, 186, 189, 190, 192, 194, 197, 198, 200, 201, 206, 211, 214, 220, 221, 222, 242, 251, 258, 261, 262, 265, 267, 281], "stepcount": [1, 149, 172], "infer": [1, 3, 7, 9, 11, 12, 23, 41, 43, 52, 53, 95, 97, 99, 103, 104, 108, 111, 112, 114, 131, 134, 137, 138, 141, 142, 154, 172, 174, 185, 186, 187, 189, 190, 192, 210, 211, 213, 214, 216, 221, 222, 228, 236, 242, 248, 249, 263, 265, 266, 273, 276, 279], "manual": [1, 4, 6, 11, 14, 18, 36, 50, 53, 57, 73, 76, 77, 102, 104, 112, 120, 121, 134, 143, 149, 150, 164, 165, 166, 168, 189, 190, 211, 222, 226, 230, 242, 245, 261, 279], "around": [1, 6, 7, 13, 27, 36, 40, 53, 59, 95, 97, 99, 102, 104, 127, 131, 140, 150, 154, 155, 160, 165, 178, 182, 183, 189, 190, 198, 206, 207, 234, 252], "1m": [1, 149, 172, 195], "outer": [1, 7, 133, 155], "loop": [1, 3, 6, 11, 13, 19, 23, 38, 40, 47, 50, 53, 55, 56, 79, 89, 94, 97, 101, 104, 112, 120, 132, 134, 138, 139, 141, 150, 154, 155, 156, 163, 165, 166, 175, 176, 183, 190, 216, 234, 246, 251, 261, 264], "equal": [1, 12, 94, 102, 104, 137, 157, 170, 172, 173, 185, 189, 197, 209, 276, 279], "length": [1, 14, 16, 53, 56, 94, 95, 99, 111, 112, 136, 140, 172, 177, 178, 190, 193, 195, 208, 211, 214, 216, 220, 265, 275], "sub": [1, 7, 94, 119, 136, 141, 168, 172, 176, 182, 187, 190, 230, 270, 279], "shape": [1, 4, 8, 18, 20, 34, 36, 43, 46, 50, 52, 53, 56, 72, 89, 94, 97, 104, 105, 108, 111, 112, 119, 120, 133, 136, 139, 140, 141, 150, 152, 155, 165, 172, 182, 185, 186, 190, 192, 193, 199, 209, 211, 216, 218, 234, 242, 246, 249, 251, 257, 265, 270, 271, 273, 274, 276, 281], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 34, 35, 39, 40, 44, 46, 47, 48, 53, 60, 67, 76, 79, 86, 89, 92, 94, 97, 99, 102, 103, 104, 105, 106, 111, 112, 121, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 142, 143, 148, 149, 152, 155, 156, 160, 166, 168, 169, 172, 173, 174, 176, 179, 180, 183, 185, 186, 187, 189, 190, 192, 193, 195, 198, 199, 200, 206, 207, 211, 213, 214, 216, 218, 222, 224, 226, 230, 233, 235, 242, 245, 246, 247, 249, 250, 251, 257, 260, 264, 265, 266, 269, 273, 275, 276, 277, 281], "assess": [1, 166, 190], "mode": [1, 14, 41, 46, 53, 56, 59, 79, 86, 89, 91, 95, 101, 121, 131, 133, 141, 142, 143, 149, 154, 156, 157, 160, 168, 174, 177, 178, 179, 183, 185, 186, 187, 189, 190, 193, 194, 197, 213, 214, 228, 234, 236, 246, 261, 265, 268, 275, 276, 279, 281], "dedic": [1, 12, 59, 102, 175, 176, 244, 245, 280], "frequenc": [1, 87, 138], "everi": [1, 2, 7, 11, 12, 16, 17, 20, 22, 23, 27, 34, 35, 36, 40, 46, 47, 50, 53, 55, 56, 59, 64, 94, 97, 99, 101, 102, 103, 127, 136, 137, 139, 140, 142, 148, 149, 152, 157, 163, 164, 165, 166, 170, 172, 173, 174, 176, 178, 182, 183, 187, 189, 190, 211, 216, 224, 247, 259, 261, 272, 280], "10": [1, 3, 7, 8, 11, 13, 20, 23, 35, 36, 44, 46, 47, 48, 50, 53, 57, 76, 79, 87, 92, 97, 101, 103, 112, 119, 121, 132, 133, 135, 141, 146, 148, 150, 157, 171, 172, 174, 175, 176, 177, 178, 182, 183, 185, 189, 190, 193, 194, 197, 199, 201, 214, 216, 218, 221, 224, 226, 227, 230, 234, 236, 242, 246, 248, 251, 252, 260, 276, 277], "come": [1, 6, 7, 12, 20, 23, 44, 55, 56, 79, 89, 92, 94, 99, 102, 104, 105, 117, 121, 132, 136, 138, 148, 149, 154, 163, 164, 166, 169, 172, 177, 187, 189, 190, 193, 199, 216, 236, 246, 271, 280], "flavor": [1, 4, 6], "priorit": [1, 211, 261], "error": [1, 4, 6, 7, 11, 12, 13, 14, 18, 39, 40, 46, 50, 53, 54, 57, 72, 94, 97, 99, 102, 104, 108, 112, 116, 117, 120, 133, 135, 137, 143, 163, 169, 172, 173, 187, 190, 193, 197, 199, 206, 215, 230, 235, 246, 258, 261, 264, 274], "higher": [1, 23, 47, 52, 57, 86, 94, 95, 99, 104, 106, 120, 132, 133, 139, 140, 143, 152, 155, 171, 172, 173, 182, 183, 185, 189, 190, 213, 220, 222, 225, 230, 233], "likelihood": [1, 39, 53, 99, 106, 112], "regular": [1, 6, 7, 11, 12, 23, 27, 104, 112, 124, 139, 140, 155, 164, 165, 166, 180, 190, 193, 206, 208, 211, 213, 235, 261, 273], "circular": [1, 197, 215], "compos": [1, 4, 6, 7, 9, 12, 18, 20, 23, 64, 97, 99, 101, 106, 131, 132, 148, 152, 160, 165, 171, 172, 175, 177, 179, 183, 185, 193, 230, 235, 236, 248, 251, 266, 269, 271, 281], "pick": [1, 7, 23, 47, 105, 139, 173, 178, 242, 260, 265, 271], "tensor": [1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 20, 23, 35, 36, 37, 38, 39, 40, 41, 44, 46, 47, 48, 49, 50, 51, 53, 61, 64, 65, 67, 68, 69, 71, 72, 73, 75, 78, 79, 89, 94, 95, 96, 98, 99, 101, 103, 104, 106, 109, 112, 113, 114, 117, 119, 121, 131, 132, 133, 134, 140, 141, 142, 143, 146, 148, 149, 150, 152, 154, 155, 157, 160, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 182, 183, 185, 186, 187, 189, 190, 192, 195, 197, 198, 199, 200, 201, 206, 207, 208, 214, 216, 217, 218, 220, 221, 226, 229, 230, 233, 234, 235, 244, 245, 246, 248, 249, 250, 251, 252, 257, 260, 263, 264, 265, 270, 273, 277, 281], "physic": [1, 16, 111, 166, 250, 261, 279], "memori": [1, 6, 7, 11, 12, 19, 20, 22, 23, 43, 52, 53, 55, 59, 92, 99, 102, 103, 104, 107, 110, 112, 114, 121, 131, 132, 133, 134, 136, 144, 148, 149, 154, 155, 156, 160, 170, 175, 177, 179, 182, 185, 189, 190, 192, 193, 195, 197, 198, 199, 206, 209, 211, 216, 222, 226, 235, 245, 246, 250, 252, 265, 270, 280, 281], "map": [1, 7, 14, 35, 53, 56, 95, 97, 99, 104, 109, 111, 112, 121, 134, 139, 149, 150, 155, 163, 164, 165, 172, 173, 176, 185, 189, 192, 216, 220, 226, 228, 250, 260, 261, 263, 277], "arrai": [1, 7, 34, 35, 46, 47, 50, 55, 64, 76, 77, 89, 94, 95, 102, 111, 112, 119, 120, 139, 140, 156, 171, 178, 185, 209, 244], "desir": [1, 4, 6, 11, 14, 16, 19, 53, 56, 79, 86, 104, 121, 134, 148, 170, 182, 185, 189, 195, 197, 199, 207, 218, 242, 245, 248, 276, 279], "hyperparamet": [1, 7, 16, 20, 56, 112, 121, 122, 131, 138, 139, 206, 211, 263, 281], "temporari": [1, 6, 138], "directori": [1, 6, 7, 14, 36, 53, 55, 56, 92, 101, 104, 121, 124, 127, 138, 139, 140, 154, 178, 182, 185, 197, 199, 228, 236, 242, 259, 270, 279], "disk": [1, 8, 36, 97, 101, 114, 121, 149, 166, 197, 198, 246, 250, 251, 259, 270, 271], "along": [1, 6, 7, 11, 16, 20, 34, 35, 43, 46, 52, 53, 57, 58, 59, 60, 87, 94, 95, 97, 98, 99, 101, 102, 103, 104, 108, 109, 112, 113, 127, 132, 133, 139, 140, 144, 145, 149, 163, 170, 173, 175, 183, 185, 189, 190, 195, 208, 213, 214, 216, 218, 275], "dimens": [1, 6, 7, 14, 16, 22, 35, 43, 50, 52, 53, 95, 97, 99, 101, 108, 109, 111, 112, 131, 136, 139, 149, 150, 157, 165, 171, 172, 174, 186, 189, 190, 195, 207, 211, 214, 220, 245, 252, 261, 276], "feed": [1, 7, 14, 23, 47, 50, 53, 97, 99, 103, 104, 107, 109, 114, 121, 136, 139, 140, 146, 156, 173, 178, 183, 228, 248, 264], "adapt": [1, 2, 16, 20, 27, 92, 97, 114, 138, 195, 216, 246], "divid": [1, 11, 12, 13, 14, 16, 17, 23, 89, 104, 106, 135, 148, 164, 166, 176, 276, 279], "yield": [1, 7, 13, 14, 20, 23, 39, 41, 102, 112, 121, 136, 137, 174, 176, 193, 199, 209, 216, 234, 236, 261], "regard": [1, 7, 8, 13, 16, 121, 154, 155, 172, 182, 190, 275], "200": [1, 7, 149, 157, 176, 199, 234], "random_crop_len": 1, "25": [1, 76, 79, 94, 101, 104, 112, 119, 122, 127, 132, 172, 175, 185, 199, 234, 246, 251, 277, 281], "balanc": [1, 7, 22, 146, 182, 190, 242], "choic": [1, 4, 7, 11, 18, 92, 138, 140, 148, 166, 190, 224, 261], "heterogen": [1, 214], "figur": [1, 11, 14, 16, 36, 53, 79, 86, 97, 104, 131, 135, 136, 138, 149, 154, 166, 172, 174, 182, 183, 185, 189], "dataflow": 1, "8": [1, 3, 6, 7, 8, 20, 23, 36, 92, 99, 100, 101, 109, 112, 119, 120, 133, 136, 142, 146, 154, 157, 168, 171, 172, 182, 185, 186, 189, 190, 195, 197, 199, 201, 211, 216, 217, 221, 222, 226, 227, 228, 229, 230, 234, 236, 245, 251, 261, 268, 277, 279, 280], "1000": [1, 2, 23, 46, 101, 103, 127, 132, 133, 137, 154, 172, 183, 216, 226, 242, 246, 260], "known": [1, 4, 6, 14, 20, 94, 136, 148, 152, 153, 170, 173, 178, 189, 190, 197, 216, 222, 246, 260, 271], "utd": 1, "64": [1, 6, 7, 17, 20, 22, 23, 36, 40, 46, 92, 102, 109, 112, 132, 133, 136, 149, 150, 155, 165, 171, 172, 174, 175, 190, 195, 210, 216, 220, 222, 234, 236, 246, 251, 266], "reproduc": [1, 14, 56, 79, 97, 102, 104, 154, 172, 173, 176, 187, 234, 246, 261], "realiz": [1, 20, 216], "sever": [1, 2, 3, 4, 8, 12, 13, 17, 19, 23, 34, 40, 44, 48, 50, 56, 57, 58, 79, 104, 106, 133, 139, 145, 148, 156, 163, 164, 166, 169, 172, 174, 175, 182, 183, 187, 189, 193, 208, 213, 234, 235, 246, 260, 270, 271, 279], "qnet": 1, "ve": [1, 6, 7, 11, 20, 48, 50, 54, 94, 95, 97, 99, 102, 103, 112, 131, 137, 149, 153, 155, 163, 165, 166, 175, 183, 189, 190, 199, 206, 208, 209, 210, 216, 227, 228, 246], "becaus": [1, 2, 4, 6, 7, 11, 14, 16, 17, 18, 19, 20, 23, 34, 36, 41, 43, 46, 47, 50, 52, 53, 55, 56, 59, 60, 79, 89, 92, 94, 95, 97, 99, 102, 104, 105, 106, 108, 112, 113, 114, 117, 121, 127, 133, 134, 137, 139, 142, 143, 146, 149, 152, 155, 156, 157, 160, 165, 166, 170, 174, 176, 178, 180, 182, 187, 189, 192, 193, 199, 206, 208, 216, 220, 224, 234, 246, 258, 261, 263, 264, 276, 277], "_must_": 1, "off": [1, 11, 19, 23, 27, 34, 36, 46, 53, 99, 101, 102, 121, 132, 138, 139, 154, 163, 172, 174, 175, 176, 185, 206, 227, 265], "dictat": [1, 16], "introduc": [1, 8, 13, 17, 19, 20, 27, 35, 38, 58, 92, 95, 104, 106, 119, 120, 131, 133, 135, 141, 146, 154, 157, 163, 174, 176, 177, 178, 185, 187, 189, 190, 198, 200, 201, 206, 208, 209, 210, 213, 216, 220, 222, 226, 227, 235, 258, 261, 276, 277, 279], "outdat": 1, "trick": [1, 4, 7, 12, 53, 102, 143, 148, 155], "multi": [1, 6, 7, 16, 22, 50, 53, 56, 57, 58, 60, 64, 94, 95, 99, 102, 106, 131, 133, 134, 136, 144, 145, 146, 149, 172, 174, 177, 179, 182, 192, 211, 228, 230, 261, 279, 281], "altern": [1, 7, 12, 52, 53, 109, 127, 132, 150, 153, 157, 169, 172, 178, 182, 185, 187, 193, 199, 209, 210, 228, 258, 261, 277], "hack": [1, 206, 258], "find": [1, 2, 4, 6, 7, 11, 12, 20, 34, 36, 43, 52, 79, 86, 87, 89, 92, 97, 99, 102, 105, 108, 112, 131, 132, 135, 139, 148, 152, 154, 164, 173, 176, 178, 182, 189, 190, 206, 207, 208, 209, 210, 216, 236, 242, 244, 246, 259], "well": [1, 3, 4, 6, 7, 11, 12, 13, 23, 36, 43, 47, 52, 53, 57, 86, 89, 92, 95, 97, 104, 106, 108, 112, 114, 121, 127, 132, 133, 134, 137, 138, 139, 142, 143, 148, 149, 152, 163, 164, 166, 168, 171, 174, 175, 176, 177, 178, 182, 183, 185, 187, 190, 192, 206, 207, 208, 211, 218, 227, 228, 230, 235, 242, 246, 250, 258, 260, 263, 271, 272, 273, 276, 277, 279], "despit": [1, 79, 141, 146], "fact": [1, 3, 4, 6, 7, 11, 14, 16, 23, 34, 43, 79, 94, 95, 97, 99, 102, 104, 106, 111, 137, 164, 172, 173, 183, 189, 190, 193], "part": [1, 3, 6, 7, 11, 12, 15, 16, 17, 19, 39, 46, 48, 53, 56, 79, 92, 94, 95, 99, 105, 107, 111, 112, 113, 131, 133, 136, 137, 139, 140, 143, 144, 148, 149, 153, 154, 161, 163, 164, 172, 178, 189, 190, 195, 197, 199, 200, 206, 208, 210, 214, 236, 242, 244, 245, 258, 260, 266, 270, 273, 276], "made": [1, 7, 12, 17, 23, 56, 92, 95, 102, 104, 133, 135, 137, 148, 149, 166, 178, 183, 185, 189, 209, 214, 244, 261], "thank": [1, 23, 53, 112, 138, 139, 140, 148, 178, 193], "hardupd": 1, "softupd": [1, 149], "appropri": [1, 7, 11, 53, 95, 112, 138, 146, 164, 175, 183, 190, 193, 198, 213, 234, 235, 245], "locat": [1, 4, 7, 33, 36, 43, 52, 86, 95, 97, 111, 119, 148, 166, 172, 182, 192, 197, 228, 242, 251, 261, 270], "adam": [1, 7, 13, 15, 39, 50, 56, 73, 103, 106, 120, 134, 148, 163, 172, 173, 174, 176, 224, 225, 227, 228, 233, 280], "pretti": [1, 19, 47, 102, 119, 120, 155, 176, 220], "plot": [1, 7, 56, 79, 86, 94, 138, 149, 166, 172, 173, 174, 183, 185], "alreadi": [1, 2, 4, 6, 7, 12, 13, 17, 94, 97, 102, 104, 105, 112, 136, 138, 146, 157, 163, 166, 168, 171, 172, 177, 183, 190, 208, 210, 215, 226, 230, 234, 235, 246, 248, 261, 262, 263, 264, 266, 280], "mention": [1, 4, 6, 7, 12, 13, 17, 19, 56, 79, 89, 102, 104, 105, 121, 132, 136, 148, 149, 166, 173, 175, 182, 185, 189, 193, 228, 242, 250, 258, 270, 279], "greater": [1, 13, 53, 56, 95, 120, 137, 221, 279], "concret": [1, 6, 7, 8, 11, 13, 94, 166, 172, 189, 206], "takeawai": [1, 124, 193, 261], "further": [1, 6, 7, 11, 23, 50, 79, 92, 99, 104, 112, 136, 148, 154, 166, 170, 172, 185, 186, 187, 189, 199, 211, 213, 214, 215, 227, 235, 250, 269], "might": [1, 4, 6, 8, 11, 12, 17, 18, 19, 34, 41, 47, 54, 55, 56, 57, 94, 97, 102, 104, 105, 109, 111, 114, 117, 119, 134, 143, 144, 145, 146, 148, 153, 155, 164, 166, 173, 176, 177, 178, 182, 187, 189, 190, 192, 193, 197, 199, 206, 215, 221, 230, 246, 247, 251, 258, 261, 266, 276, 279], "dispatch": [1, 4, 6, 17, 131, 134, 169, 193, 222, 234, 242, 245, 272], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 27, 53, 89, 94, 112, 114, 121, 131, 133, 134, 144, 193, 213, 228, 246], "runnable_code_remov": [1, 14, 15, 16, 18, 20, 27, 34, 35, 38, 39, 40, 41, 43, 44, 46, 47, 48, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 77, 79, 89, 92, 94, 95, 97, 98, 99, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 116, 117, 119, 120, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 156, 157, 158, 160, 163, 164, 165, 166, 170, 173, 177, 178, 180, 182, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275], "minut": [1, 14, 15, 16, 18, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 72, 76, 77, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 124, 127, 135, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 170, 171, 172, 173, 177, 178, 180, 183, 187, 189, 190, 192, 193, 199, 206, 207, 208, 209, 225, 233, 247, 250, 252, 258, 266, 272, 273, 274, 275, 277], "002": [1, 14, 15, 16, 18, 21, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 48, 51, 52, 55, 72, 74, 77, 78, 79, 92, 94, 99, 100, 102, 105, 109, 110, 111, 114, 117, 118, 122, 124, 127, 133, 137, 138, 139, 142, 149, 150, 153, 156, 157, 160, 163, 164, 165, 170, 173, 178, 179, 180, 192, 206, 207, 208, 209, 217, 225, 233, 247, 250, 257, 258, 266, 268, 272, 273, 274, 275, 281], "jupyt": [1, 14, 15, 16, 18, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 172, 173, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "notebook": [1, 14, 15, 16, 18, 20, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 172, 173, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "coding_ddpg": [1, 21, 281], "ipynb": [1, 14, 15, 16, 18, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 172, 173, 177, 178, 180, 182, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "python": [1, 3, 7, 8, 12, 14, 15, 16, 17, 20, 21, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 57, 59, 60, 61, 66, 67, 69, 71, 72, 73, 76, 77, 79, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 131, 132, 133, 137, 138, 139, 140, 141, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 171, 172, 173, 175, 177, 178, 180, 182, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 200, 206, 207, 208, 209, 211, 213, 214, 215, 220, 225, 228, 229, 230, 233, 235, 236, 242, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 272, 273, 274, 276, 279, 281], "sourc": [1, 3, 6, 7, 12, 13, 14, 15, 16, 18, 19, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 59, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 133, 136, 137, 138, 139, 140, 142, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 169, 170, 172, 173, 174, 176, 177, 178, 180, 182, 185, 186, 187, 189, 190, 192, 193, 197, 198, 199, 200, 206, 207, 208, 209, 211, 214, 220, 221, 225, 233, 235, 236, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "py": [1, 4, 6, 7, 11, 12, 14, 15, 16, 18, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 66, 67, 68, 69, 71, 72, 73, 74, 76, 77, 78, 79, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 124, 127, 132, 133, 134, 137, 138, 139, 140, 141, 142, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 168, 169, 170, 172, 173, 175, 177, 178, 179, 180, 182, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 206, 207, 208, 209, 211, 215, 217, 220, 221, 225, 229, 230, 233, 236, 242, 244, 245, 246, 247, 248, 249, 250, 251, 252, 257, 258, 259, 260, 261, 262, 263, 264, 266, 268, 272, 273, 274, 275, 276, 277, 279, 281], "zip": [1, 7, 14, 15, 16, 18, 20, 22, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 172, 173, 174, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 216, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "galleri": [1, 14, 15, 16, 18, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 172, 173, 177, 178, 180, 182, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277, 281], "sphinx": [1, 14, 15, 16, 18, 20, 27, 34, 35, 36, 38, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 55, 56, 66, 67, 69, 71, 72, 73, 76, 77, 79, 89, 92, 94, 95, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 116, 117, 119, 121, 124, 127, 137, 138, 139, 140, 142, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 163, 164, 165, 166, 170, 172, 173, 177, 178, 180, 182, 186, 187, 189, 190, 192, 193, 198, 199, 206, 207, 208, 209, 211, 220, 225, 233, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 266, 272, 273, 274, 275, 277], "The": [2, 3, 4, 6, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 27, 34, 35, 36, 39, 40, 43, 44, 46, 47, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 64, 71, 72, 73, 77, 79, 86, 87, 89, 95, 96, 97, 99, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 185, 186, 187, 189, 190, 192, 194, 195, 197, 198, 199, 200, 206, 207, 208, 209, 210, 211, 213, 215, 216, 218, 220, 221, 222, 224, 225, 226, 227, 228, 229, 230, 234, 235, 236, 237, 245, 246, 248, 250, 251, 258, 259, 260, 261, 264, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280], "packag": [2, 4, 6, 7, 20, 22, 27, 47, 50, 55, 61, 64, 72, 73, 92, 103, 104, 106, 112, 116, 120, 127, 130, 131, 132, 133, 146, 148, 153, 169, 171, 173, 176, 182, 185, 187, 215, 216, 230, 235, 244, 248, 251, 260, 264, 265, 276, 277], "build": [2, 7, 8, 16, 23, 34, 36, 37, 38, 39, 40, 41, 43, 44, 50, 53, 64, 72, 73, 92, 94, 95, 96, 97, 98, 101, 102, 103, 105, 111, 112, 119, 120, 124, 130, 131, 139, 140, 148, 149, 152, 161, 163, 165, 166, 172, 173, 174, 175, 176, 179, 189, 190, 197, 201, 211, 214, 220, 235, 246, 248, 260, 261, 273, 276, 277, 281], "highli": [2, 6, 7, 12, 22, 53, 92, 178, 190, 220, 261], "dynam": [2, 6, 7, 8, 11, 14, 16, 17, 23, 34, 46, 57, 69, 94, 104, 107, 110, 113, 120, 121, 131, 141, 157, 170, 172, 194, 199, 235, 236, 245, 249, 261, 265, 268, 271, 273, 276, 277, 281], "neural": [2, 6, 15, 16, 20, 21, 34, 37, 38, 40, 46, 49, 51, 53, 55, 61, 72, 79, 94, 95, 97, 99, 103, 104, 105, 106, 107, 108, 109, 111, 114, 116, 120, 127, 131, 138, 139, 140, 141, 142, 149, 161, 170, 172, 173, 175, 178, 179, 180, 183, 185, 210, 213, 214, 216, 222, 234, 235, 242, 249, 257, 261, 265, 266, 281], "network": [2, 3, 6, 8, 11, 14, 15, 16, 20, 23, 34, 37, 38, 39, 40, 41, 46, 49, 51, 53, 55, 61, 72, 73, 79, 94, 95, 97, 99, 103, 104, 105, 107, 108, 110, 111, 112, 114, 116, 120, 127, 131, 137, 138, 141, 142, 145, 146, 160, 161, 164, 166, 170, 175, 179, 182, 183, 185, 197, 210, 213, 214, 216, 222, 234, 235, 236, 242, 249, 252, 257, 261, 265, 266, 281], "api": [2, 4, 6, 9, 10, 11, 12, 13, 16, 17, 18, 22, 27, 35, 36, 38, 40, 43, 44, 52, 60, 86, 95, 116, 119, 121, 131, 132, 133, 135, 136, 137, 138, 141, 146, 148, 153, 154, 155, 159, 165, 167, 168, 174, 175, 176, 182, 187, 189, 190, 192, 194, 195, 198, 199, 210, 213, 214, 220, 226, 227, 228, 229, 230, 235, 236, 244, 246, 247, 251, 260, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281], "explor": [2, 7, 11, 16, 48, 53, 79, 117, 131, 138, 143, 149, 154, 156, 163, 166, 168, 172, 173, 177, 178, 190, 193, 197, 210, 229, 244, 265, 270, 273, 276, 279], "note": [2, 4, 6, 7, 11, 14, 17, 18, 19, 20, 22, 23, 27, 34, 46, 47, 48, 50, 53, 54, 56, 79, 89, 94, 95, 97, 99, 102, 103, 106, 107, 108, 109, 111, 112, 117, 119, 121, 127, 132, 133, 134, 136, 137, 142, 143, 145, 146, 148, 150, 152, 154, 155, 157, 163, 165, 166, 169, 170, 174, 175, 176, 177, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 197, 198, 206, 207, 208, 209, 211, 216, 218, 220, 222, 226, 227, 228, 230, 251, 260, 263, 266, 270, 271, 272, 273, 279, 280], "pleas": [2, 4, 5, 6, 7, 8, 9, 11, 12, 18, 23, 24, 25, 26, 47, 48, 50, 55, 62, 63, 85, 92, 132, 133, 136, 146, 148, 150, 152, 153, 154, 157, 163, 165, 169, 174, 175, 176, 182, 185, 187, 189, 190, 192, 193, 194, 197, 198, 200, 201, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 220, 221, 223, 228, 230, 231, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 247, 276, 278, 279], "differenti": [2, 6, 7, 16, 22, 37, 38, 43, 49, 50, 61, 94, 120, 131, 149, 165, 173, 179, 180, 208, 281], "requires_grad": [2, 4, 7, 11, 34, 46, 50, 66, 67, 94, 102, 108, 112, 120, 127, 141, 143, 195, 216, 250, 264, 277], "track": [2, 6, 11, 16, 35, 39, 46, 56, 86, 94, 99, 101, 102, 106, 108, 112, 120, 133, 135, 140, 141, 145, 149, 176, 178, 182, 215, 229, 251, 259, 264, 275, 276], "auto": [2, 3, 6, 7, 8, 11, 12, 14, 59, 132, 133, 154, 169, 189, 190, 200, 210, 221, 235, 236, 246, 260, 279], "x": [2, 4, 6, 7, 8, 14, 22, 23, 34, 43, 46, 50, 52, 53, 56, 66, 67, 71, 72, 73, 76, 77, 79, 89, 94, 97, 99, 101, 102, 104, 105, 106, 108, 112, 120, 121, 132, 134, 136, 137, 139, 140, 141, 143, 146, 148, 155, 164, 166, 168, 169, 171, 174, 175, 176, 183, 185, 186, 187, 189, 192, 194, 199, 200, 201, 210, 211, 213, 216, 226, 227, 228, 230, 234, 235, 236, 242, 246, 252, 260, 271, 273, 276, 277], "std": [2, 6, 7, 8, 14, 17, 23, 55, 97, 104, 169, 171, 176, 185, 200, 206, 235, 246], "cout": [2, 7], "endl": [2, 7], "cpufloattyp": [2, 7], "y": [2, 6, 22, 34, 43, 44, 46, 50, 52, 56, 66, 67, 71, 72, 73, 76, 77, 79, 86, 89, 94, 99, 102, 104, 105, 108, 109, 112, 120, 133, 137, 168, 169, 182, 185, 187, 189, 200, 201, 208, 210, 226, 260, 271, 273, 277], "wa": [2, 3, 4, 6, 13, 18, 20, 47, 55, 56, 79, 94, 95, 97, 99, 102, 103, 104, 105, 106, 108, 112, 117, 121, 132, 136, 138, 141, 146, 148, 156, 160, 163, 164, 165, 166, 168, 170, 171, 172, 173, 176, 177, 178, 183, 189, 190, 193, 199, 208, 209, 216, 228, 242, 245, 246, 251, 253, 254, 255, 256, 276, 279], "result": [2, 4, 6, 7, 8, 11, 12, 14, 16, 20, 23, 27, 34, 39, 41, 43, 46, 47, 55, 67, 76, 86, 87, 92, 94, 95, 97, 102, 103, 104, 108, 112, 113, 117, 120, 121, 124, 133, 134, 135, 136, 137, 140, 146, 148, 149, 152, 154, 155, 156, 160, 165, 166, 169, 170, 171, 173, 174, 175, 176, 177, 183, 185, 186, 187, 189, 192, 193, 194, 195, 197, 199, 207, 208, 209, 210, 211, 218, 221, 224, 226, 227, 233, 234, 236, 248, 250, 251, 258, 260, 261, 265, 266, 270, 271, 273, 274, 275, 277, 279, 280], "grad_fn": [2, 34, 46, 50, 94, 108, 112, 137, 143, 252], "name": [2, 4, 6, 7, 11, 12, 14, 15, 16, 18, 20, 22, 23, 34, 54, 55, 56, 86, 105, 111, 112, 114, 117, 119, 121, 131, 133, 136, 138, 141, 146, 149, 154, 161, 164, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 182, 185, 187, 190, 192, 197, 213, 215, 216, 221, 228, 230, 234, 235, 236, 246, 250, 251, 252, 260, 262, 275, 277, 279, 281], "addbackward1": 2, "z": [2, 6, 56, 89, 102, 108, 189, 208, 277], "27": [2, 36, 55, 154, 172, 176, 199, 234, 246, 275], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 34, 108, 112, 155], "exist": [2, 7, 11, 12, 13, 18, 20, 50, 56, 57, 64, 71, 87, 89, 102, 108, 112, 120, 131, 141, 148, 170, 171, 176, 177, 178, 180, 182, 185, 187, 189, 193, 206, 207, 209, 215, 216, 226, 227, 229, 245, 246, 258, 261], "flag": [2, 4, 6, 16, 46, 94, 108, 164, 178, 189, 214, 250, 260, 266, 279], "place": [2, 6, 7, 13, 16, 22, 43, 46, 48, 52, 56, 89, 95, 99, 101, 106, 108, 112, 133, 138, 146, 148, 150, 163, 165, 166, 172, 178, 185, 187, 189, 190, 193, 195, 206, 213, 220, 226, 228, 250, 258, 260, 261], "randn": [2, 4, 6, 7, 8, 14, 50, 76, 108, 112, 120, 121, 141, 146, 155, 174, 176, 200, 201, 210, 211, 213, 220, 226, 246, 252, 276, 280], "b": [2, 4, 6, 7, 20, 22, 34, 36, 46, 50, 66, 67, 76, 87, 94, 101, 102, 106, 109, 111, 112, 119, 120, 137, 139, 140, 154, 155, 157, 171, 173, 187, 189, 190, 193, 197, 201, 210, 211, 216, 246, 251, 271], "sumbackward0": 2, "backprop": [2, 46, 76, 108, 112, 120, 139, 156], "scalar": [2, 6, 16, 17, 34, 46, 53, 56, 66, 94, 97, 102, 108, 120, 183, 189, 221, 233], "backward": [2, 3, 4, 7, 8, 11, 13, 14, 15, 17, 18, 19, 23, 34, 39, 46, 48, 50, 56, 66, 67, 76, 77, 94, 95, 97, 101, 103, 108, 109, 112, 120, 127, 131, 132, 136, 137, 140, 144, 146, 148, 152, 155, 160, 165, 168, 172, 174, 175, 176, 179, 182, 183, 189, 190, 193, 224, 225, 226, 227, 228, 233, 235, 236, 245, 251, 261, 264, 269, 273, 275, 280, 281], "equival": [2, 6, 13, 34, 46, 94, 106, 120, 134, 152, 165, 168, 173, 175, 185, 189, 190, 193, 200, 206, 208, 211, 216, 261, 277], "print": [2, 6, 7, 13, 16, 22, 23, 35, 36, 40, 47, 48, 50, 53, 55, 56, 57, 76, 79, 89, 92, 94, 97, 99, 101, 102, 104, 106, 111, 112, 113, 116, 120, 121, 132, 133, 134, 135, 140, 141, 142, 145, 146, 148, 149, 154, 155, 164, 168, 169, 171, 172, 174, 175, 176, 178, 183, 186, 187, 189, 190, 193, 194, 197, 201, 206, 208, 211, 215, 216, 221, 224, 226, 227, 228, 229, 230, 234, 235, 236, 245, 246, 251, 252, 261, 263, 277, 280], "d": [2, 4, 6, 7, 11, 23, 40, 56, 64, 66, 67, 76, 94, 95, 97, 99, 102, 106, 111, 112, 120, 133, 136, 138, 140, 142, 146, 148, 155, 156, 163, 168, 182, 185, 189, 193, 209, 211, 230, 235, 274], "dx": [2, 67, 106, 120, 143], "grad": [2, 4, 7, 14, 18, 34, 46, 50, 66, 94, 108, 112, 120, 132, 137, 141, 143, 146, 148, 152, 155, 160, 163, 172, 174, 175, 176, 193, 206, 220, 225, 233, 245, 264], "5000": [2, 101, 172, 246], "got": [2, 17, 23, 59, 95, 102, 105, 106, 108, 112, 146, 169, 175, 189, 276], "matrix": [2, 6, 7, 14, 20, 34, 43, 46, 52, 86, 94, 97, 99, 102, 105, 106, 108, 111, 112, 119, 136, 139, 140, 155, 160, 164, 177, 178, 185, 189, 190, 193, 209, 211, 216, 220, 234, 235, 236, 242, 248, 261, 265, 275], "explan": [2, 56, 183, 250], "arriv": [2, 7, 17, 133, 146, 174, 261], "valu": [2, 4, 6, 7, 8, 14, 16, 22, 23, 34, 35, 39, 43, 44, 46, 50, 52, 53, 54, 59, 66, 79, 86, 89, 92, 94, 95, 97, 99, 102, 103, 104, 106, 108, 109, 111, 112, 114, 120, 136, 137, 138, 141, 145, 146, 148, 153, 156, 168, 169, 173, 174, 175, 176, 177, 178, 182, 185, 187, 190, 193, 195, 197, 206, 207, 208, 209, 211, 213, 214, 225, 245, 246, 251, 258, 259, 270, 279, 280], "section": [2, 4, 6, 7, 11, 13, 17, 22, 23, 35, 36, 38, 39, 40, 41, 43, 46, 47, 50, 54, 55, 56, 79, 95, 98, 102, 103, 104, 105, 106, 109, 111, 112, 117, 134, 137, 141, 142, 148, 154, 156, 160, 166, 173, 174, 176, 182, 185, 189, 190, 192, 193, 194, 207, 208, 218, 222, 225, 233, 235, 242, 245, 246, 250, 261, 271, 275], "look": [2, 4, 6, 7, 11, 12, 13, 14, 16, 19, 22, 36, 41, 43, 46, 47, 50, 52, 53, 54, 55, 56, 59, 79, 89, 92, 94, 95, 97, 99, 101, 102, 103, 105, 106, 108, 109, 111, 112, 113, 114, 121, 127, 132, 134, 136, 137, 138, 143, 148, 149, 150, 157, 160, 163, 166, 170, 171, 172, 175, 176, 177, 178, 182, 183, 185, 189, 190, 192, 193, 200, 206, 209, 211, 213, 229, 233, 234, 235, 246, 248, 251, 259, 260, 262, 263, 264, 266, 271, 275], "jacobian": [2, 46, 94, 131, 152, 179, 220, 281], "product": [2, 3, 7, 43, 46, 52, 89, 94, 106, 114, 131, 133, 148, 152, 168, 178, 179, 190, 195, 220, 265, 273, 281], "norm": [2, 16, 20, 23, 56, 99, 104, 131, 136, 164, 168, 170, 172, 179, 185, 193, 216, 281], "1021": 2, "4020": 2, "314": [2, 277], "6695": 2, "613": [2, 234], "4944": 2, "v": [2, 20, 22, 23, 34, 46, 56, 57, 59, 94, 101, 103, 108, 109, 111, 133, 136, 152, 173, 175, 182, 183, 193, 198, 199, 208, 214, 216, 234, 274], "0001": [2, 23, 92, 154, 172, 236], "kfloat": [2, 3, 4, 200, 221], "102": [2, 172], "4000": [2, 97, 101, 172, 260], "1024": [2, 6, 22, 86, 104, 135, 224, 246, 252], "0000": [2, 172, 216], "stop": [2, 6, 34, 92, 94, 108, 140, 157, 163, 172, 174, 178, 182, 197, 251], "histori": [2, 34, 43, 50, 52, 94, 102, 108, 141, 170], "put": [2, 6, 7, 11, 14, 16, 19, 35, 48, 53, 55, 89, 97, 99, 102, 131, 132, 133, 148, 149, 164, 172, 173, 175, 176, 185], "nogradguard": 2, "block": [2, 4, 6, 7, 11, 12, 14, 20, 23, 34, 35, 50, 53, 86, 94, 108, 113, 132, 135, 136, 148, 149, 154, 166, 168, 174, 175, 176, 177, 182, 185, 195, 199, 210, 216, 222, 226, 261, 266], "pow": [2, 6, 206], "no_grad": [2, 23, 34, 46, 94, 106, 108, 109, 112, 120, 132, 133, 156, 171, 172, 175, 183, 189, 210, 213, 218, 235, 261, 269], "Or": [2, 141, 163, 176, 194, 221], "content": [2, 4, 6, 16, 54, 60, 101, 102, 103, 112, 121, 128, 137, 146, 148, 166, 171, 172, 176, 178, 187, 189, 197, 237, 246, 260, 275, 276], "eq": [2, 23, 53, 132, 175, 189, 236, 251], "bool": [2, 13, 16, 17, 169, 172, 185, 194, 210, 216, 279], "is_leaf": 2, "detach_": [2, 176], "register_hook": [2, 141], "retain_grad": 2, "doc": [2, 4, 5, 7, 9, 26, 53, 66, 79, 94, 102, 103, 104, 119, 120, 127, 134, 145, 148, 153, 166, 174, 176, 185, 189, 190, 211, 220, 242, 245, 259, 274, 275], "applic": [2, 3, 13, 14, 16, 17, 36, 53, 64, 95, 99, 104, 114, 127, 130, 131, 132, 137, 138, 142, 146, 153, 163, 166, 170, 174, 176, 185, 189, 199, 208, 215, 221, 226, 227, 228, 233, 234, 236, 242, 261, 265, 275, 277, 279], "calcul": [2, 14, 20, 34, 39, 46, 47, 53, 56, 60, 79, 86, 89, 92, 94, 95, 97, 103, 104, 112, 139, 140, 156, 173, 174, 176, 177, 178, 185, 190, 193, 195, 208, 211, 216, 230, 236, 264], "penalti": [2, 164, 171, 245], "h": [2, 4, 6, 7, 8, 11, 12, 53, 136, 154, 157, 168, 169, 192, 235, 260, 279], "model": [2, 3, 6, 11, 13, 16, 19, 27, 34, 36, 37, 38, 43, 44, 46, 47, 50, 52, 56, 57, 58, 60, 66, 69, 71, 72, 73, 91, 92, 94, 96, 98, 102, 105, 106, 107, 108, 110, 112, 115, 116, 117, 119, 120, 122, 130, 131, 132, 138, 139, 140, 141, 142, 145, 148, 152, 154, 155, 161, 163, 164, 165, 172, 173, 174, 175, 176, 177, 179, 186, 187, 189, 190, 193, 195, 197, 199, 200, 210, 211, 214, 215, 216, 220, 222, 226, 227, 228, 229, 230, 234, 245, 249, 250, 252, 257, 258, 259, 264, 265, 266, 269, 271, 273, 274, 279, 280, 281], "linear": [2, 6, 7, 13, 19, 20, 23, 43, 46, 48, 50, 52, 72, 79, 97, 101, 102, 107, 119, 120, 121, 127, 132, 134, 136, 139, 140, 141, 146, 154, 155, 164, 168, 174, 175, 176, 178, 183, 189, 193, 194, 199, 206, 210, 211, 213, 216, 218, 222, 224, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 242, 245, 250, 252, 258, 259, 263, 266, 280], "loss": [2, 3, 6, 7, 13, 16, 19, 20, 21, 23, 34, 40, 43, 46, 52, 69, 71, 72, 73, 76, 77, 79, 92, 94, 97, 101, 106, 111, 112, 120, 121, 131, 132, 133, 134, 139, 141, 148, 156, 157, 165, 168, 173, 175, 176, 178, 182, 183, 190, 216, 235, 236, 259, 269, 280, 281], "target": [2, 3, 7, 16, 19, 22, 23, 39, 47, 50, 53, 59, 79, 95, 101, 102, 104, 106, 109, 111, 112, 117, 132, 140, 148, 149, 154, 163, 165, 166, 168, 169, 171, 173, 174, 175, 176, 178, 183, 185, 187, 189, 192, 194, 213, 221, 235, 236, 242, 246, 248, 269, 277], "mseloss": [2, 14, 39, 50, 146, 174, 227, 228, 280], "grad_output": [2, 11, 12], "ones_lik": [2, 102], "create_graph": [2, 143], "gradient_penalti": 2, "dim": [2, 6, 13, 35, 97, 101, 102, 112, 132, 134, 168, 170, 171, 172, 174, 175, 176, 183, 185, 195, 207, 208, 211, 221, 234, 236, 276], "add": [2, 4, 7, 8, 9, 11, 12, 14, 16, 17, 18, 20, 23, 39, 47, 50, 54, 79, 89, 92, 99, 102, 103, 106, 109, 117, 124, 131, 132, 133, 136, 140, 141, 142, 148, 149, 153, 154, 155, 163, 165, 166, 169, 171, 172, 174, 175, 176, 178, 182, 186, 189, 193, 195, 199, 200, 206, 208, 215, 216, 221, 228, 246, 248, 251, 265, 273, 277], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 6, 7, 18, 34, 50, 56, 64, 86, 89, 92, 94, 95, 99, 101, 102, 103, 108, 121, 127, 131, 146, 148, 149, 152, 153, 154, 175, 176, 177, 182, 185, 187, 189, 192, 194, 198, 208, 213, 220, 221, 228, 235, 236, 261, 270, 271, 273, 274, 277], "link": [2, 6, 7, 12, 14, 38, 40, 56, 86, 98, 112, 114, 124, 148, 152, 208, 210, 221, 235, 276], "ad": [2, 6, 7, 8, 12, 17, 22, 27, 34, 53, 54, 57, 79, 87, 89, 94, 97, 99, 101, 102, 103, 106, 108, 121, 132, 133, 139, 140, 141, 146, 149, 152, 155, 160, 163, 169, 173, 177, 178, 189, 192, 215, 235, 236, 258, 260, 263, 274], "subclass": [2, 6, 7, 16, 20, 35, 36, 71, 94, 97, 99, 112, 120, 131, 134, 138, 149, 170, 175, 183, 192, 208, 211, 216, 234, 244, 245, 249, 257, 265, 273, 281], "encod": [2, 16, 43, 44, 50, 52, 99, 107, 110, 112, 133, 138, 149, 164, 172, 176, 185, 193, 199, 216, 245, 276, 281], "method": [2, 4, 6, 7, 8, 11, 12, 13, 14, 16, 19, 20, 23, 34, 35, 41, 43, 47, 50, 53, 55, 59, 79, 87, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 112, 113, 121, 130, 131, 135, 138, 139, 143, 146, 149, 152, 153, 154, 155, 156, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 183, 185, 187, 189, 190, 193, 206, 210, 213, 216, 227, 228, 236, 244, 245, 248, 259, 260, 261, 266, 276, 279], "forward": [2, 3, 8, 11, 12, 13, 14, 16, 17, 19, 23, 34, 35, 40, 46, 48, 50, 53, 56, 60, 66, 67, 69, 76, 77, 89, 94, 97, 99, 101, 102, 104, 105, 106, 107, 109, 112, 113, 120, 121, 127, 131, 132, 133, 136, 137, 139, 142, 143, 144, 146, 148, 160, 163, 164, 165, 168, 170, 173, 174, 175, 176, 178, 179, 182, 183, 185, 187, 189, 190, 194, 210, 211, 221, 225, 226, 227, 228, 229, 230, 233, 234, 235, 236, 242, 245, 248, 251, 252, 261, 276, 277, 280, 281], "detail": [2, 4, 6, 7, 11, 12, 14, 17, 18, 19, 36, 39, 46, 47, 48, 56, 57, 79, 86, 87, 89, 99, 102, 103, 113, 117, 132, 134, 136, 138, 140, 142, 144, 146, 154, 160, 163, 176, 177, 182, 183, 186, 187, 189, 190, 194, 195, 197, 206, 207, 208, 209, 213, 215, 220, 222, 225, 229, 233, 234, 235, 242, 244, 245, 246, 250, 260, 261, 271, 276], "namespac": [2, 4, 7, 8, 11, 12, 35, 112, 117, 169, 187, 194, 211], "inherit": [2, 13, 17, 40, 55, 89, 97, 102, 103, 106, 153, 156, 172, 185, 192, 197, 208, 211, 276], "linearfunct": 2, "public": [2, 11, 12, 17, 134, 169], "static": [2, 4, 11, 12, 16, 94, 152, 169, 189, 190, 199, 236, 261, 277], "option": [2, 4, 6, 7, 11, 12, 13, 38, 47, 49, 51, 55, 57, 86, 92, 94, 95, 98, 99, 102, 104, 114, 117, 119, 130, 134, 135, 138, 144, 149, 150, 154, 157, 166, 168, 170, 171, 185, 187, 189, 190, 197, 199, 211, 226, 233, 245, 246, 251, 261, 265, 269, 270, 271, 274, 275, 277, 281], "autogradcontext": [2, 11, 12], "ctx": [2, 4, 6, 11, 12, 22, 143, 226], "save_for_backward": [2, 4, 6, 143], "mm": [2, 6, 200, 221, 222], "t": [2, 6, 7, 8, 9, 11, 12, 13, 15, 16, 17, 18, 20, 23, 34, 36, 38, 39, 43, 46, 47, 50, 54, 56, 57, 59, 64, 76, 79, 92, 94, 95, 97, 99, 101, 102, 104, 105, 106, 108, 109, 111, 112, 114, 117, 120, 121, 127, 132, 133, 137, 143, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 165, 166, 170, 171, 172, 173, 174, 176, 177, 178, 183, 185, 186, 187, 189, 190, 193, 194, 195, 197, 199, 206, 207, 208, 210, 211, 216, 220, 221, 224, 225, 233, 234, 242, 245, 246, 248, 252, 260, 261, 262, 263, 264, 272, 273, 274, 276, 277, 279], "unsqueez": [2, 16, 50, 72, 101, 102, 112, 120, 165, 171, 174, 176, 183, 221], "expand_a": [2, 23], "tensor_list": [2, 11, 12, 148], "save": [2, 4, 7, 13, 14, 23, 34, 35, 36, 37, 38, 39, 43, 44, 47, 52, 53, 54, 56, 79, 92, 101, 103, 104, 122, 127, 131, 132, 134, 136, 138, 142, 154, 155, 168, 170, 174, 175, 176, 178, 179, 182, 185, 190, 197, 217, 221, 235, 236, 248, 249, 250, 251, 259, 260, 261, 263, 264, 265, 266, 271, 275, 281], "get_saved_vari": 2, "grad_input": [2, 143], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 14, 17, 20, 27, 47, 48, 56, 79, 89, 105, 106, 109, 111, 112, 117, 124, 131, 132, 146, 163, 168, 169, 170, 172, 173, 174, 176, 178, 182, 195, 215, 216, 226, 230, 258], "appli": [2, 3, 6, 7, 11, 12, 16, 17, 20, 23, 34, 35, 44, 55, 56, 72, 86, 89, 94, 97, 99, 102, 104, 106, 120, 131, 132, 134, 139, 141, 142, 143, 146, 148, 150, 155, 156, 157, 160, 163, 164, 165, 168, 170, 172, 174, 175, 176, 178, 180, 185, 186, 189, 190, 192, 193, 195, 197, 199, 206, 207, 211, 216, 218, 220, 222, 224, 228, 229, 230, 235, 244, 258, 261, 266, 269, 270, 273, 275, 277], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 6, 7, 8, 12, 13, 16, 21, 23, 34, 35, 36, 39, 40, 46, 50, 53, 56, 94, 95, 97, 99, 102, 104, 108, 112, 120, 121, 127, 131, 137, 139, 142, 148, 152, 153, 155, 166, 169, 172, 174, 175, 176, 177, 179, 182, 183, 185, 189, 195, 211, 227, 228, 235, 236, 246, 258, 260, 261, 263, 265, 266, 276, 281], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 14, 20, 22, 34, 56, 87, 89, 94, 99, 102, 104, 106, 108, 112, 124, 138, 141, 145, 146, 150, 157, 164, 172, 173, 175, 177, 178, 186, 189, 190, 193, 198, 206, 216, 220, 233, 242, 246, 250, 251, 258, 276, 279], "todoubl": 2, "On": [2, 6, 7, 11, 23, 98, 102, 112, 127, 133, 146, 148, 157, 164, 170, 174, 175, 187, 190, 192, 193, 214, 216, 234, 242, 245, 261, 279], "easiest": [2, 6, 38, 98, 112, 155, 172, 189, 261], "your": [2, 4, 7, 9, 11, 13, 14, 17, 18, 20, 21, 22, 23, 34, 35, 38, 40, 46, 47, 48, 50, 53, 54, 55, 57, 58, 59, 71, 79, 86, 92, 94, 95, 98, 99, 102, 103, 106, 108, 109, 111, 113, 114, 116, 117, 120, 121, 122, 124, 131, 132, 133, 134, 137, 139, 142, 143, 144, 145, 146, 148, 149, 152, 153, 155, 156, 157, 161, 163, 164, 166, 169, 170, 171, 172, 175, 176, 177, 180, 182, 183, 185, 187, 189, 190, 193, 197, 200, 201, 210, 214, 215, 216, 218, 220, 221, 224, 229, 244, 245, 246, 251, 259, 260, 262, 263, 264, 265, 266, 273, 274, 275, 276, 281], "tabl": [2, 19, 111, 119, 131, 133, 148, 154, 175, 176, 182, 189, 190, 234, 246, 251], "set_data": 2, "data": [2, 3, 4, 6, 8, 9, 13, 14, 16, 19, 20, 22, 27, 34, 35, 38, 39, 43, 44, 46, 49, 50, 51, 52, 55, 64, 76, 77, 79, 86, 89, 94, 95, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 114, 120, 121, 130, 131, 137, 138, 144, 148, 149, 150, 153, 154, 155, 156, 157, 160, 161, 163, 165, 166, 168, 171, 173, 174, 175, 176, 187, 192, 193, 198, 199, 207, 209, 210, 211, 213, 214, 216, 220, 221, 222, 228, 229, 230, 234, 235, 236, 242, 244, 245, 246, 250, 251, 252, 258, 259, 265, 266, 269, 275, 276, 280, 281], "output_nr": 2, "after": [2, 3, 6, 7, 8, 12, 14, 16, 17, 18, 20, 22, 23, 27, 34, 35, 36, 43, 46, 48, 50, 53, 56, 57, 92, 94, 95, 99, 104, 105, 106, 109, 111, 112, 114, 121, 131, 133, 134, 135, 136, 139, 140, 141, 142, 145, 146, 148, 149, 150, 154, 156, 157, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 180, 182, 183, 189, 190, 192, 194, 213, 215, 216, 218, 221, 228, 245, 246, 250, 251, 258, 259, 261, 271, 273, 275, 280], "file": [2, 4, 6, 7, 11, 12, 17, 21, 23, 42, 51, 54, 55, 56, 59, 68, 74, 78, 86, 87, 90, 92, 94, 95, 100, 108, 110, 112, 118, 119, 122, 124, 133, 137, 139, 140, 146, 148, 154, 163, 166, 169, 171, 179, 182, 185, 189, 192, 195, 198, 200, 201, 209, 210, 211, 215, 217, 221, 222, 228, 229, 230, 235, 236, 245, 246, 250, 251, 257, 259, 260, 262, 265, 268, 270, 271, 275, 276, 277, 279, 281], "bug": [2, 6, 12, 101, 154, 193, 197, 200, 210, 276], "report": [2, 12, 20, 56, 79, 92, 94, 97, 99, 103, 131, 135, 154, 166, 174, 176, 177, 197, 200, 210, 216, 251, 273], "github": [2, 3, 7, 8, 12, 13, 19, 23, 27, 53, 57, 58, 59, 64, 112, 117, 131, 132, 133, 135, 136, 142, 144, 145, 146, 148, 150, 152, 153, 156, 157, 165, 168, 169, 174, 175, 176, 182, 185, 186, 192, 194, 195, 198, 199, 200, 210, 220, 221, 222, 228, 230, 235, 236, 244, 276], "issu": [2, 6, 7, 8, 11, 23, 55, 133, 134, 145, 150, 153, 154, 157, 165, 166, 171, 182, 187, 189, 190, 193, 197, 198, 199, 200, 206, 208, 210, 211, 215, 220, 222, 228, 229, 242, 245, 247, 258, 276], "fix": [2, 16, 20, 27, 34, 53, 54, 55, 56, 104, 137, 173, 174, 199, 216, 242, 260, 261, 274], "soon": [2, 6, 56, 157, 163, 227, 235], "overview": [2, 6, 7, 13, 57, 59, 97, 130, 131, 139, 140, 146, 148, 169, 172, 174, 175, 176, 178, 182, 193, 206, 207, 209, 214, 217, 222, 224, 281], "alwai": [2, 3, 4, 7, 16, 19, 22, 23, 44, 56, 97, 99, 103, 109, 111, 112, 134, 135, 136, 137, 142, 148, 149, 166, 171, 172, 173, 174, 176, 189, 190, 192, 206, 210, 222, 274], "problem": [2, 7, 13, 16, 17, 22, 53, 55, 56, 105, 107, 111, 112, 120, 127, 138, 149, 154, 155, 164, 172, 174, 176, 182, 186, 187, 190, 206, 208, 222, 246, 247, 250, 261, 276, 279], "question": [2, 6, 7, 11, 12, 20, 53, 95, 133, 148, 153, 178, 190, 207, 216, 222, 246], "forum": [2, 6, 7, 47, 153, 222], "touch": [2, 7, 16, 222], "view": [3, 12, 13, 16, 17, 19, 23, 50, 54, 57, 59, 60, 64, 86, 95, 101, 102, 108, 111, 112, 114, 120, 121, 132, 135, 136, 138, 144, 145, 146, 148, 154, 168, 169, 174, 175, 176, 177, 178, 183, 195, 197, 211, 221, 225, 228, 229, 230, 233, 242, 244, 252, 259, 277], "edit": [3, 7, 13, 14, 19, 23, 52, 54, 64, 135, 136, 146, 148, 153, 154, 168, 169, 171, 174, 175, 176, 195, 199, 228, 230], "code": [3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 27, 34, 35, 36, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 116, 117, 119, 120, 121, 124, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 160, 161, 163, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 207, 208, 209, 210, 211, 215, 216, 220, 222, 225, 226, 228, 229, 230, 233, 235, 236, 244, 245, 246, 247, 248, 250, 251, 252, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 272, 273, 274, 275, 276, 277, 280, 281], "prerequisit": [3, 4, 18, 57, 59, 60, 107, 124, 133, 135, 136, 141, 144, 145, 146, 148, 149, 157, 168, 169, 174, 175, 176, 185, 186, 190, 193, 195, 198, 215, 227, 228, 230, 261], "frontend": [3, 4, 12, 88, 90, 131, 200, 211, 214, 235, 236, 269, 281], "semant": [3, 4, 7, 53, 72, 102, 107, 109, 110, 120, 134, 148, 189, 190, 208, 209, 211, 214, 217, 220, 281], "11": [3, 6, 7, 13, 20, 22, 36, 101, 119, 122, 132, 133, 152, 171, 172, 176, 185, 187, 190, 229, 230, 234, 246, 251], "nvidia": [3, 6, 20, 54, 142, 148, 157, 187, 216, 230, 245, 261, 265], "toolkit": [3, 107, 156, 166, 189, 259], "releas": [3, 4, 7, 12, 20, 54, 119, 121, 132, 133, 137, 163, 175, 177, 182, 186, 216, 226, 227, 234, 235, 236, 251, 261, 266, 276], "greatli": [3, 7, 53, 94, 112, 173], "reduc": [3, 7, 13, 20, 23, 36, 39, 46, 60, 97, 99, 104, 119, 132, 133, 134, 136, 138, 139, 142, 144, 146, 148, 155, 156, 157, 163, 166, 170, 171, 174, 176, 182, 185, 187, 190, 195, 200, 216, 229, 245, 246, 249, 250, 265, 268, 270, 271, 279, 280, 281], "cpu": [3, 4, 6, 7, 8, 11, 12, 13, 16, 17, 22, 23, 35, 40, 43, 46, 47, 52, 53, 56, 66, 77, 79, 86, 87, 92, 102, 104, 106, 112, 114, 119, 120, 127, 131, 132, 134, 135, 136, 139, 146, 148, 157, 164, 168, 169, 171, 172, 174, 175, 176, 177, 178, 179, 182, 185, 190, 192, 197, 198, 200, 211, 213, 214, 218, 221, 226, 227, 234, 245, 246, 247, 250, 251, 258, 265, 276, 281], "overhead": [3, 6, 7, 12, 20, 60, 86, 119, 132, 133, 136, 141, 146, 155, 157, 166, 171, 174, 176, 177, 182, 187, 193, 197, 199, 200, 211, 216, 227, 246, 251, 261, 272, 279], "increas": [3, 6, 7, 22, 23, 27, 39, 40, 47, 79, 86, 87, 92, 95, 104, 112, 132, 133, 134, 136, 138, 139, 140, 144, 163, 166, 171, 182, 190, 199, 211, 229, 234, 244, 245, 246, 260, 261, 264, 265, 266, 279], "mostli": [3, 12, 23, 89, 94, 104, 139, 176, 178, 194], "util": [3, 4, 6, 12, 17, 23, 27, 36, 40, 47, 53, 55, 57, 59, 86, 97, 101, 103, 112, 119, 120, 121, 127, 131, 132, 133, 134, 136, 139, 141, 148, 152, 154, 155, 157, 164, 166, 168, 169, 171, 172, 175, 177, 178, 182, 183, 185, 186, 187, 192, 198, 211, 213, 216, 218, 221, 224, 227, 228, 235, 236, 242, 244, 245, 259, 260, 265, 268, 269, 271, 273, 275, 277, 279, 281], "deploy": [3, 104, 138, 200, 213, 235, 265, 275], "import": [3, 4, 6, 7, 8, 11, 12, 13, 16, 20, 22, 23, 27, 34, 36, 46, 50, 53, 54, 55, 56, 57, 76, 79, 86, 89, 94, 95, 97, 99, 101, 102, 104, 106, 109, 112, 116, 120, 121, 124, 132, 133, 134, 135, 136, 141, 142, 143, 146, 148, 149, 152, 153, 155, 163, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 182, 183, 186, 187, 189, 190, 194, 195, 197, 200, 201, 206, 208, 209, 210, 211, 213, 215, 216, 218, 221, 222, 224, 225, 226, 227, 228, 230, 234, 235, 236, 242, 246, 252, 258, 259, 260, 261, 266, 269, 271, 276, 277, 279, 280], "appear": [3, 13, 16, 111, 189, 242], "won": [3, 6, 12, 46, 112, 120, 132, 143, 152, 160, 165, 172, 189, 190, 210, 245], "heart": [3, 53, 234], "veri": [3, 4, 6, 7, 11, 16, 17, 22, 23, 27, 43, 48, 50, 52, 53, 69, 79, 89, 95, 99, 106, 108, 112, 120, 127, 132, 136, 137, 139, 163, 164, 173, 174, 176, 177, 178, 180, 182, 183, 190, 192, 206, 208, 242, 251, 260, 274], "time": [3, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 20, 23, 34, 35, 36, 39, 40, 41, 43, 44, 46, 47, 48, 50, 52, 53, 54, 55, 56, 64, 69, 72, 76, 77, 79, 87, 89, 92, 94, 95, 97, 99, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 113, 114, 117, 120, 121, 124, 127, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 163, 164, 165, 166, 170, 172, 173, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 189, 190, 192, 193, 197, 199, 206, 207, 208, 209, 210, 213, 214, 216, 221, 225, 226, 227, 228, 233, 234, 242, 245, 246, 247, 249, 250, 252, 258, 261, 265, 272, 273, 274, 275, 277], "tool": [3, 7, 11, 16, 55, 86, 92, 94, 95, 99, 103, 105, 120, 132, 146, 148, 149, 154, 166, 174, 177, 182, 183, 185, 193, 197, 229, 242, 250, 273, 279], "compil": [3, 7, 9, 11, 12, 18, 20, 89, 105, 131, 148, 153, 179, 189, 199, 200, 211, 214, 222, 235, 246, 249, 251, 260, 261, 265, 268, 269, 276, 281], "boost": [3, 104, 106, 154, 155, 199, 210, 214, 222, 235, 236], "would": [3, 4, 6, 7, 11, 16, 18, 19, 22, 23, 34, 46, 53, 57, 59, 79, 92, 94, 97, 99, 102, 104, 108, 111, 112, 117, 121, 127, 132, 135, 136, 137, 138, 139, 140, 142, 143, 146, 149, 153, 154, 155, 157, 163, 164, 165, 169, 171, 172, 173, 174, 175, 176, 178, 185, 187, 189, 190, 192, 193, 197, 198, 208, 209, 214, 220, 222, 228, 230, 242, 270, 271, 275, 279], "demonstr": [3, 4, 16, 18, 19, 20, 41, 46, 54, 61, 86, 89, 95, 97, 103, 113, 117, 130, 131, 132, 133, 135, 136, 137, 142, 143, 146, 150, 152, 153, 154, 157, 160, 166, 168, 169, 172, 174, 175, 176, 177, 182, 185, 186, 189, 190, 193, 194, 195, 197, 198, 199, 200, 208, 210, 211, 213, 215, 216, 218, 225, 227, 228, 230, 233, 234, 236, 245, 246, 250, 251, 264, 265, 270, 272, 273, 274, 275, 277, 279, 280], "mnist": [3, 7, 36, 47, 50, 79, 97, 101, 103, 130, 131, 132, 138, 142, 148, 150, 165, 175, 180, 183, 236, 248, 265], "libtorch": [3, 4, 7, 221, 235, 265], "counterpart": [3, 20, 154, 189, 216, 230, 235], "syntax": [3, 52, 88, 90, 91, 121, 131, 246, 281], "step": [3, 4, 6, 7, 8, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 34, 38, 39, 46, 47, 50, 53, 56, 64, 79, 86, 89, 94, 97, 101, 103, 104, 105, 106, 112, 114, 117, 130, 131, 132, 133, 134, 139, 140, 141, 142, 144, 146, 148, 149, 154, 156, 160, 164, 166, 173, 174, 175, 176, 177, 178, 179, 183, 185, 187, 189, 190, 194, 197, 198, 199, 201, 210, 211, 213, 216, 218, 221, 224, 225, 227, 228, 235, 236, 242, 245, 258, 259, 261, 269, 275, 277, 280, 281], "depict": [3, 101, 190], "chunk": [3, 6, 59, 148, 163, 166, 168, 195], "batch": [3, 6, 7, 19, 20, 23, 36, 39, 40, 41, 48, 50, 53, 55, 56, 57, 59, 60, 79, 86, 92, 94, 95, 97, 101, 102, 103, 104, 109, 112, 121, 127, 130, 131, 132, 133, 134, 136, 137, 138, 139, 144, 148, 149, 150, 156, 157, 160, 163, 165, 166, 168, 171, 172, 173, 175, 176, 177, 179, 180, 182, 183, 185, 187, 190, 192, 193, 195, 199, 208, 211, 214, 216, 220, 236, 245, 246, 252, 281], "data_load": [3, 7, 23], "optim": [3, 6, 7, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 34, 35, 36, 37, 38, 41, 43, 44, 46, 50, 53, 57, 59, 64, 69, 70, 71, 74, 86, 89, 92, 94, 97, 101, 104, 105, 113, 117, 121, 127, 131, 132, 133, 136, 141, 142, 144, 146, 148, 149, 150, 154, 156, 157, 164, 165, 166, 170, 171, 172, 173, 174, 175, 178, 179, 182, 183, 185, 186, 187, 189, 192, 193, 199, 201, 206, 211, 213, 214, 216, 221, 222, 227, 228, 233, 235, 236, 245, 246, 250, 258, 262, 265, 266, 268, 269, 270, 273, 275, 276, 281], "zero_grad": [3, 7, 23, 39, 50, 94, 101, 112, 132, 133, 134, 146, 148, 163, 172, 174, 176, 183, 190, 227, 228, 235, 236, 264, 269], "nll_loss": [3, 132, 148, 175, 236], "updat": [3, 7, 12, 13, 14, 15, 16, 19, 20, 23, 39, 46, 47, 53, 56, 73, 76, 86, 94, 104, 106, 111, 112, 113, 120, 121, 131, 132, 133, 134, 138, 142, 146, 149, 157, 163, 172, 173, 175, 176, 182, 190, 193, 206, 215, 216, 222, 224, 228, 233, 236, 245, 258, 263, 280], "captur": [3, 7, 56, 94, 113, 114, 116, 131, 132, 152, 185, 186, 187, 189, 190, 193, 197, 200, 246, 276], "But": [3, 7, 11, 12, 47, 48, 56, 79, 95, 102, 108, 111, 137, 146, 157, 163, 164, 165, 173, 189, 192, 206, 209, 220, 236, 246], "slightli": [3, 6, 16, 133, 148, 149, 166, 171, 178, 209, 246, 261], "prealloc": 3, "reus": [3, 12, 69, 112, 120, 143, 152, 164, 173, 190, 261, 265, 266, 279], "tensoropt": [3, 200], "floatcuda": 3, "dtype": [3, 4, 11, 12, 16, 17, 18, 102, 108, 134, 143, 168, 172, 189, 194, 195, 198, 200, 209, 211, 221, 235, 245, 258, 269, 271, 277], "longcuda": 3, "klong": 3, "zero": [3, 7, 8, 13, 20, 23, 34, 39, 44, 50, 53, 94, 95, 97, 99, 102, 103, 111, 112, 132, 133, 140, 148, 149, 160, 164, 166, 169, 170, 174, 176, 178, 183, 206, 208, 209, 215, 216, 236, 245, 249, 251, 257, 260, 261, 265, 276, 277, 280, 281], "ktrainbatchs": 3, "28": [3, 7, 20, 36, 50, 99, 101, 112, 150, 155, 165, 172, 183, 216, 234, 236, 246, 252, 260], "copy_": [3, 43, 52, 119, 134, 154, 174, 250, 258], "training_step": 3, "call": [3, 4, 6, 7, 9, 11, 12, 13, 15, 16, 17, 19, 20, 27, 34, 35, 36, 39, 41, 43, 44, 46, 47, 48, 50, 53, 55, 56, 57, 59, 71, 79, 89, 94, 95, 97, 99, 101, 102, 104, 106, 108, 111, 112, 117, 119, 120, 121, 130, 131, 132, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 152, 153, 154, 156, 157, 160, 163, 164, 165, 166, 168, 169, 170, 172, 174, 175, 176, 177, 178, 180, 182, 185, 189, 190, 197, 200, 215, 216, 220, 221, 222, 225, 227, 228, 229, 234, 245, 246, 247, 248, 250, 251, 259, 260, 261, 264, 271, 272, 273, 274, 276, 277, 279], "void": [3, 4, 6, 7, 8, 17, 154, 169, 200, 210, 246, 251, 260], "net": [3, 7, 23, 47, 48, 50, 53, 56, 79, 89, 92, 97, 101, 102, 104, 132, 148, 160, 171, 175, 182, 183, 236, 248, 252], "stream": [3, 17, 86, 102, 105, 134, 166, 171, 200, 235, 277], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 75, 78, 119, 182, 187, 211, 233, 234, 246, 251, 281], "side": [3, 8, 55, 56, 86, 111, 150, 157, 163, 165, 166, 169, 173, 174, 182, 242], "prepar": [3, 13, 20, 23, 47, 55, 56, 72, 73, 101, 109, 120, 121, 150, 163, 168, 169, 172, 174, 211, 213, 214, 216, 226, 251, 265], "cach": [3, 141, 154, 182, 193, 199, 210, 261, 265, 274, 277, 279], "cubla": [3, 246], "cudnn": [3, 6, 139, 142, 149, 157, 245], "warmupstream": 3, "int": [3, 4, 6, 7, 13, 22, 23, 55, 57, 59, 132, 133, 135, 146, 148, 154, 168, 169, 174, 175, 176, 182, 187, 189, 192, 195, 197, 210, 211, 221, 230, 235, 277, 279], "num_warmup_it": 3, "success": [3, 7, 16, 79, 108, 138, 154, 178, 221, 242], "replac": [3, 4, 7, 23, 27, 46, 59, 61, 95, 106, 112, 113, 117, 119, 127, 131, 132, 134, 148, 152, 170, 176, 178, 182, 186, 189, 192, 195, 199, 208, 211, 219, 235, 246, 276], "replai": [3, 16, 156], "spin": [3, 97], "ordinari": 3, "epoch": [3, 7, 19, 23, 36, 39, 40, 56, 57, 59, 92, 97, 101, 104, 106, 112, 121, 127, 132, 133, 134, 138, 139, 148, 157, 163, 172, 176, 183, 192, 236, 259], "59584": 3, "60000": [3, 148], "3921": 3, "test": [3, 11, 23, 27, 36, 39, 40, 53, 87, 89, 95, 97, 103, 104, 106, 107, 113, 124, 131, 132, 133, 139, 148, 150, 152, 154, 157, 166, 171, 172, 175, 178, 180, 183, 187, 189, 197, 199, 214, 220, 233, 234, 235, 236, 246, 277], "2051": 3, "accuraci": [3, 20, 23, 27, 40, 47, 97, 103, 104, 112, 130, 131, 132, 133, 134, 138, 160, 170, 171, 175, 180, 183, 185, 213, 216, 234, 245, 259, 264, 265], "938": [3, 7, 157], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 157], "968": 3, "1603": [3, 277], "0869": 3, "973": [3, 42], "2315": 3, "0736": 3, "978": 3, "6": [3, 7, 13, 23, 36, 38, 50, 53, 76, 89, 95, 97, 99, 101, 102, 111, 113, 117, 119, 120, 121, 142, 143, 148, 154, 157, 169, 170, 171, 172, 174, 176, 185, 187, 189, 193, 199, 201, 211, 216, 230, 234, 236, 245, 252, 273, 274, 275, 279], "0511": 3, "0704": 3, "977": [3, 157, 234], "7": [3, 6, 7, 20, 21, 22, 23, 36, 38, 55, 89, 101, 119, 127, 132, 133, 148, 155, 156, 157, 171, 185, 186, 187, 190, 195, 198, 199, 201, 210, 218, 221, 222, 224, 225, 230, 233, 234, 236, 245, 272, 276, 277], "0802": 3, "0654": 3, "979": 3, "0774": [3, 50], "0604": 3, "980": 3, "9": [3, 4, 6, 7, 20, 22, 23, 36, 42, 46, 53, 92, 97, 101, 111, 112, 119, 121, 154, 164, 171, 172, 174, 183, 185, 190, 201, 216, 221, 234, 235, 236, 246, 248, 251, 252, 269], "0669": 3, "0544": 3, "984": [3, 234], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 8, 16, 34, 40, 56, 58, 94, 104, 105, 106, 107, 111, 131, 132, 139, 140, 148, 149, 163, 169, 173, 178, 187, 189, 190, 197, 208, 211, 234, 246], "0m44": 3, "287": 3, "018": 3, "sy": [3, 22, 23, 57, 59, 146, 148, 169, 224, 277], "0m1": 3, "116": [3, 197], "produc": [3, 6, 7, 13, 72, 104, 113, 120, 138, 141, 149, 150, 152, 153, 155, 157, 166, 172, 173, 178, 185, 189, 190, 194, 213, 221, 228, 245, 261, 266], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 216], "0520": 3, "0710": 3, "0935": 3, "0666": 3, "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 154], "0m7": 3, "048": [3, 222], "0m0": 3, "619": 3, "gain": [3, 6, 20, 86, 155, 182, 195, 214, 216], "six": [3, 172], "kind": [3, 6, 7, 23, 39, 47, 50, 53, 79, 95, 103, 105, 109, 121, 131, 279], "larg": [3, 4, 6, 7, 9, 14, 18, 19, 20, 22, 39, 43, 53, 64, 92, 95, 99, 101, 104, 109, 111, 112, 114, 120, 127, 130, 131, 132, 133, 135, 138, 142, 146, 148, 150, 160, 166, 168, 172, 173, 175, 176, 177, 185, 187, 190, 192, 195, 197, 208, 216, 218, 224, 230, 234, 245, 251, 252, 261, 266], "improv": [3, 6, 7, 11, 12, 20, 23, 27, 39, 53, 60, 97, 102, 104, 112, 117, 130, 131, 132, 133, 134, 135, 136, 139, 142, 155, 157, 164, 173, 177, 178, 185, 186, 187, 193, 197, 198, 199, 210, 214, 216, 222, 224, 226, 233, 235, 245, 246, 259, 261, 269, 273], "due": [3, 6, 7, 20, 22, 56, 86, 89, 102, 113, 117, 132, 136, 141, 146, 163, 164, 175, 187, 193, 197, 199, 208, 213, 216, 218, 225, 229, 236, 276, 277, 279], "size": [3, 4, 6, 7, 8, 11, 13, 14, 16, 20, 22, 23, 34, 35, 36, 39, 40, 44, 46, 47, 48, 50, 53, 55, 56, 59, 86, 92, 95, 97, 99, 102, 103, 104, 108, 109, 111, 112, 121, 127, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 148, 149, 150, 154, 155, 156, 157, 160, 163, 165, 166, 169, 171, 172, 173, 174, 175, 178, 182, 185, 186, 187, 189, 190, 192, 193, 195, 197, 198, 199, 206, 209, 211, 214, 216, 227, 228, 229, 235, 245, 246, 250, 252, 260, 261, 265, 277, 280], "larger": [3, 11, 14, 79, 86, 94, 104, 112, 116, 121, 131, 132, 133, 136, 138, 144, 166, 173, 176, 178, 182, 185, 186, 187, 199, 211, 227, 228, 234, 246, 266], "heavi": [3, 7, 53, 104, 108], "less": [3, 6, 7, 9, 11, 18, 23, 60, 86, 99, 104, 105, 112, 116, 127, 133, 138, 149, 152, 163, 166, 172, 173, 174, 182, 183, 187, 189, 190, 193, 197, 199, 230, 246, 250], "impact": [3, 14, 20, 39, 92, 104, 149, 166, 174, 177, 199, 216, 244, 279, 280], "smaller": [3, 39, 99, 104, 111, 112, 132, 136, 172, 174, 185, 246, 250, 266], "nevertheless": [3, 6, 23, 157, 172], "richard": 4, "zou": 4, "integr": [4, 7, 12, 16, 18, 38, 92, 113, 117, 119, 131, 138, 141, 168, 182, 183, 187, 193, 194, 210, 214, 215, 221, 227, 234, 242, 244, 258, 263, 273, 279], "opcheck": [4, 18], "basic": [4, 11, 13, 17, 18, 19, 27, 34, 35, 36, 39, 40, 41, 42, 43, 44, 53, 58, 60, 61, 77, 81, 84, 91, 94, 97, 98, 99, 101, 102, 104, 107, 111, 112, 113, 114, 116, 117, 120, 131, 136, 139, 142, 154, 161, 168, 172, 177, 190, 193, 207, 211, 227, 228, 246, 259, 265, 270, 271, 275, 276, 281], "program": [4, 6, 22, 64, 99, 105, 107, 108, 111, 131, 136, 139, 153, 166, 168, 175, 187, 195, 197, 201, 215, 228, 246, 261, 275, 276, 279], "amd": [4, 6], "rocm": [4, 6, 182], "modif": [4, 16, 17, 23, 92, 105, 112, 142, 148, 170, 172, 175, 180, 183, 189, 193, 260, 266, 276], "e": [4, 6, 7, 8, 9, 11, 12, 13, 18, 22, 34, 35, 40, 46, 47, 53, 55, 56, 64, 79, 89, 92, 94, 97, 99, 102, 104, 107, 111, 112, 121, 127, 131, 132, 134, 135, 136, 138, 139, 140, 143, 145, 146, 148, 150, 157, 164, 165, 169, 170, 172, 174, 176, 178, 182, 186, 187, 189, 193, 194, 208, 209, 211, 213, 214, 218, 220, 221, 226, 230, 233, 235, 246, 248, 251, 260, 261, 263, 264], "g": [4, 6, 7, 8, 9, 11, 12, 13, 16, 18, 22, 46, 53, 55, 56, 64, 92, 94, 97, 99, 102, 104, 106, 107, 111, 127, 131, 132, 134, 138, 139, 140, 146, 148, 150, 154, 163, 165, 169, 172, 174, 176, 178, 182, 187, 189, 193, 194, 200, 209, 213, 214, 220, 221, 230, 233, 246, 251, 260, 261], "etc": [4, 9, 12, 18, 47, 48, 50, 53, 55, 73, 97, 99, 102, 105, 106, 107, 108, 112, 121, 136, 166, 170, 172, 173, 178, 189, 190, 193, 208, 213, 226, 234, 235, 246, 248, 261, 263], "wish": [4, 6, 7, 9, 18, 56, 79, 95, 102, 121, 135, 160, 165, 175, 185, 190, 194, 207, 228, 245, 274], "bring": [4, 9, 95, 135, 166, 172, 182, 185, 190, 199, 209, 220, 251, 261, 279], "bless": 4, "path": [4, 6, 7, 22, 23, 36, 53, 54, 56, 57, 79, 86, 92, 94, 97, 102, 103, 104, 105, 112, 121, 132, 133, 154, 169, 185, 187, 193, 197, 198, 199, 206, 213, 221, 222, 227, 228, 242, 246, 258, 260, 261, 262, 277, 279], "fuse": [4, 6, 20, 23, 131, 154, 171, 179, 193, 194, 199, 210, 216, 221, 233, 265, 281], "subsystem": [4, 9, 18, 189, 273], "def": [4, 6, 7, 8, 11, 13, 16, 22, 23, 36, 50, 57, 59, 89, 101, 112, 121, 132, 133, 134, 135, 136, 141, 143, 146, 148, 154, 155, 164, 168, 169, 174, 175, 176, 183, 185, 194, 195, 200, 201, 206, 210, 211, 213, 215, 216, 218, 224, 226, 227, 228, 230, 234, 236, 242, 246, 252, 271, 276, 277, 280], "mymuladd": 4, "bind": [4, 7, 8, 9, 12, 131, 135, 198, 261, 279], "precompil": 4, "instead": [4, 5, 6, 7, 9, 11, 12, 18, 20, 23, 24, 25, 26, 34, 47, 48, 53, 55, 56, 57, 67, 94, 97, 102, 105, 106, 111, 112, 119, 120, 127, 132, 133, 134, 137, 138, 140, 143, 144, 148, 153, 155, 156, 157, 160, 163, 169, 170, 171, 174, 175, 176, 178, 180, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 199, 206, 208, 209, 210, 211, 216, 220, 221, 228, 231, 234, 237, 242, 252, 266, 272, 274, 278, 280], "cpp_extens": [4, 6, 12, 169, 246], "extens": [4, 7, 9, 17, 21, 56, 95, 121, 131, 134, 141, 143, 148, 185, 200, 206, 208, 214, 234, 236, 246, 249, 257, 265, 272, 281], "ahead": [4, 6, 39, 97, 141, 163, 183, 189, 194, 228, 261, 275], "setuptool": [4, 12, 169, 182], "load_inlin": [4, 246], "setup": [4, 6, 7, 12, 19, 23, 38, 56, 57, 59, 132, 133, 138, 146, 163, 169, 176, 197, 199, 208, 209, 215, 220, 221, 227, 228, 230, 246, 260], "extension_cpp": 4, "ext_modul": [4, 6, 12, 169], "cppextens": [4, 6, 12, 169], "muladd": 4, "cpp": [4, 6, 7, 11, 130, 131, 154, 210, 214, 235, 260, 275], "py_limited_api": 4, "min": [4, 23, 56, 86, 99, 104, 112, 127, 148, 169, 172, 174, 176, 185, 189, 276], "expos": [4, 6, 7, 11, 103, 134, 176, 190, 215, 221, 261], "stabl": [4, 28, 29, 30, 31, 32, 53, 66, 79, 104, 105, 120, 127, 135, 151, 171, 181, 182, 184, 219, 236, 245], "limit": [4, 7, 12, 13, 17, 20, 23, 41, 53, 64, 79, 113, 132, 136, 139, 149, 150, 156, 157, 165, 166, 178, 186, 187, 189, 190, 199, 216, 227, 246, 258], "subset": [4, 16, 89, 92, 97, 101, 104, 116, 127, 148, 169, 185, 208, 209, 234, 246], "extra_compile_arg": [4, 12], "cxx": [4, 7, 201, 221, 235], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 53, 104, 172, 182, 214], "cmdclass": [4, 6, 12, 169], "build_ext": [4, 6, 12, 169], "buildextens": [4, 6, 12, 169], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 169], "cpython": [4, 6, 260], "agnost": [4, 6, 186, 247], "pure": [4, 6, 7, 12, 50, 131, 139, 143, 150, 165, 189, 192, 200, 210], "agnostic": 4, "minim": [4, 7, 12, 14, 20, 39, 56, 66, 67, 71, 72, 73, 76, 77, 79, 86, 94, 106, 111, 112, 120, 131, 133, 138, 145, 154, 168, 173, 187, 206, 213, 216, 261, 264, 266], "oldest": 4, "hexcod": 4, "throughout": [4, 14, 56, 109, 148, 163, 166, 172, 183, 208, 258], "environ": [4, 6, 7, 8, 9, 13, 18, 21, 22, 38, 59, 86, 89, 95, 98, 101, 114, 124, 131, 132, 133, 136, 141, 145, 146, 148, 154, 166, 168, 169, 173, 174, 175, 176, 187, 189, 190, 193, 195, 197, 210, 215, 221, 222, 226, 227, 228, 229, 230, 234, 242, 244, 246, 260, 261, 270, 275, 277, 279, 280, 281], "unknown": 4, "behavior": [4, 8, 11, 12, 13, 14, 16, 39, 53, 55, 99, 109, 112, 113, 149, 153, 154, 157, 163, 166, 187, 189, 207, 208, 218, 250, 261, 272, 274, 279], "runnabl": [4, 138, 154, 264], "three": [4, 7, 12, 14, 16, 17, 36, 39, 55, 56, 67, 79, 86, 89, 94, 95, 101, 102, 105, 112, 117, 120, 121, 131, 135, 136, 139, 140, 157, 161, 164, 166, 169, 172, 176, 177, 178, 180, 182, 183, 190, 197, 199, 209, 210, 242, 251], "line": [4, 6, 7, 11, 14, 18, 53, 54, 55, 59, 60, 86, 97, 101, 102, 103, 104, 106, 112, 119, 138, 139, 140, 146, 148, 154, 171, 173, 175, 176, 178, 182, 183, 187, 189, 197, 200, 201, 206, 208, 227, 228, 230, 235, 236, 250, 259, 261, 276, 277, 279], "specif": [4, 6, 7, 11, 12, 13, 20, 22, 23, 36, 40, 47, 59, 79, 86, 92, 94, 95, 97, 99, 101, 103, 106, 107, 108, 112, 113, 114, 116, 117, 121, 124, 132, 133, 136, 139, 140, 142, 148, 149, 154, 166, 168, 170, 172, 174, 175, 176, 177, 178, 182, 183, 186, 189, 190, 192, 193, 194, 207, 210, 211, 213, 215, 216, 221, 222, 226, 227, 228, 234, 235, 242, 244, 251, 258, 260, 265, 270, 273, 275, 279, 280], "verifi": [4, 7, 89, 94, 102, 117, 124, 143, 150, 152, 155, 157, 170, 171, 186, 190, 192, 198, 221, 234, 235, 242], "met": [4, 16, 132, 166], "crash": [4, 7, 197], "wors": [4, 23], "silent": [4, 18, 154, 187, 258], "incorrect": [4, 18, 56, 94, 97, 137, 143, 166, 187], "avoid": [4, 6, 19, 47, 92, 101, 104, 132, 133, 134, 136, 142, 146, 148, 157, 160, 163, 172, 174, 187, 189, 198, 199, 206, 207, 211, 214, 215, 216, 218, 227, 245, 246, 250, 251, 258, 270, 279], "unstabl": 4, "libtorch_python": 4, "particular": [4, 6, 7, 11, 13, 36, 47, 55, 86, 87, 92, 94, 95, 97, 99, 111, 136, 138, 139, 141, 148, 150, 160, 165, 168, 175, 185, 189, 192, 193, 194, 206, 207, 209, 211, 250, 261, 270], "aten": [4, 6, 11, 12, 17, 117, 119, 154, 182, 189, 200, 210, 213, 234, 235, 242, 251, 260, 277], "strongli": [4, 17, 149, 164, 193], "recommend": [4, 7, 9, 11, 12, 17, 22, 23, 64, 86, 95, 101, 112, 114, 116, 131, 134, 140, 146, 161, 171, 178, 182, 189, 190, 192, 193, 195, 197, 208, 213, 214, 222, 227, 234, 235, 242, 250, 259, 260, 261], "ascertain": [4, 198], "compliant": [4, 192, 227, 228], "safe": [4, 8, 23, 104, 166], "guarante": [4, 12, 104, 145, 148, 157, 166, 170, 175, 176, 189, 207, 276], "better": [4, 6, 7, 16, 20, 23, 36, 39, 40, 47, 56, 60, 94, 97, 99, 101, 104, 111, 112, 116, 119, 131, 134, 135, 138, 139, 140, 141, 154, 155, 156, 163, 165, 166, 172, 173, 178, 182, 183, 185, 189, 195, 199, 206, 207, 216, 222, 246, 261, 269, 279], "wild": 4, "west": 4, "There": [4, 7, 11, 12, 16, 17, 20, 34, 50, 79, 89, 94, 95, 97, 99, 102, 103, 104, 105, 106, 109, 111, 112, 127, 130, 140, 141, 145, 149, 150, 153, 155, 157, 160, 163, 165, 168, 171, 172, 175, 176, 178, 189, 190, 191, 192, 193, 194, 197, 208, 216, 246, 248, 253, 254, 255, 256, 260, 261, 264, 267, 270, 275, 277, 279], "caveat": [4, 8, 146, 174, 197, 246, 250], "yourself": [4, 6, 7, 11, 38, 97, 108, 131, 156, 190], "truli": [4, 7, 53, 156], "relev": [4, 7, 16, 57, 105, 107, 111, 124, 133, 136, 170, 185, 189, 198, 261, 263, 270, 276], "third": [4, 7, 8, 11, 14, 18, 56, 66, 67, 69, 71, 72, 73, 76, 77, 99, 102, 109, 120, 131, 135, 143, 169, 178, 206, 220], "intend": [4, 6, 7, 11, 14, 94, 104, 132, 136, 154, 157, 177, 187, 189, 193, 206, 226, 248, 261, 271], "influenc": [4, 7, 56, 99, 166, 279], "accordingli": [4, 12, 22, 149, 163, 174, 185, 222], "command": [4, 6, 7, 16, 54, 95, 101, 103, 116, 124, 131, 134, 145, 146, 166, 169, 172, 174, 175, 176, 178, 182, 183, 185, 192, 195, 197, 201, 228, 230, 234, 235, 251, 259, 261, 275, 276, 277], "consequ": [4, 136, 166, 173, 189], "properli": [4, 11, 12, 16, 54, 59, 104, 143, 146, 148, 157, 163, 164, 172, 174, 175, 176, 178, 193, 206, 208, 218, 258], "could": [4, 6, 7, 8, 11, 12, 13, 56, 92, 94, 99, 104, 105, 106, 108, 109, 111, 114, 119, 132, 133, 136, 137, 140, 148, 157, 163, 166, 172, 173, 174, 175, 176, 178, 182, 183, 185, 189, 192, 194, 206, 208, 210, 213, 220, 228, 229, 230, 235, 236, 242, 250, 251, 279], "outsid": [4, 8, 12, 16, 17, 48, 131, 134, 136, 142, 182, 185, 189, 206, 258, 266, 274], "cannot": [4, 6, 7, 8, 13, 16, 22, 53, 64, 86, 102, 113, 117, 120, 121, 134, 135, 143, 146, 148, 149, 157, 166, 172, 187, 189, 199, 220, 273], "mymuladd_cpu": 4, "const": [4, 6, 7, 8, 11, 12, 17, 154, 169, 200, 210, 235, 246, 260], "torch_check": [4, 6, 11], "torch_internal_assert": [4, 11], "devicetyp": [4, 11, 17], "a_contig": 4, "contigu": [4, 6, 11, 35, 157, 172, 210, 261], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 11, 200], "b_ptr": 4, "result_ptr": [4, 11], "int64_t": [4, 7, 8, 11, 210], "numel": [4, 11, 172, 174, 206, 260], "order": [4, 7, 9, 13, 14, 17, 18, 20, 34, 35, 36, 47, 48, 53, 54, 59, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 92, 94, 95, 97, 102, 112, 113, 114, 116, 117, 119, 120, 131, 132, 134, 137, 138, 140, 143, 146, 148, 153, 154, 155, 157, 169, 170, 175, 178, 180, 185, 187, 189, 190, 192, 193, 194, 195, 208, 211, 216, 220, 250, 260, 270, 271, 279], "torch_librari": [4, 7, 8, 9, 11, 18, 235], "ensur": [4, 6, 11, 12, 13, 14, 16, 17, 23, 40, 53, 57, 60, 67, 104, 112, 113, 119, 120, 121, 132, 145, 146, 148, 152, 166, 168, 172, 173, 175, 177, 185, 186, 187, 190, 198, 200, 210, 215, 218, 227, 246, 248, 258, 264, 273, 279], "awar": [4, 79, 94, 102, 136, 138, 148, 149, 157, 177, 189, 206, 273], "top": [4, 6, 7, 11, 20, 23, 38, 54, 56, 86, 87, 95, 98, 101, 104, 112, 136, 148, 171, 176, 177, 182, 183, 187, 192, 213, 216, 234, 242, 244], "project": [4, 6, 7, 56, 94, 101, 121, 136, 169, 173, 178, 183, 211, 235, 236, 242, 265, 280], "schema": [4, 8, 12], "mutat": [4, 8, 11, 12, 18, 120, 150, 165, 166, 189, 220, 225], "m": [4, 6, 7, 8, 11, 12, 16, 17, 23, 34, 46, 53, 94, 99, 108, 112, 132, 133, 154, 155, 169, 171, 174, 176, 210, 216, 218, 228, 234, 242, 261, 279], "torch_library_impl": [4, 8, 11, 12, 17], "impl": [4, 8, 11, 12, 17, 260], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 23, 36, 171, 183, 216], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 14, 104, 185, 194, 251], "256": [4, 7, 20, 23, 55, 92, 136, 137, 156, 172, 178, 189, 216, 222, 234, 251, 277], "faketensor": [4, 18, 189, 198, 277], "kernel": [4, 6, 7, 9, 11, 15, 18, 20, 22, 50, 87, 99, 102, 112, 117, 131, 134, 139, 150, 154, 157, 164, 165, 166, 177, 178, 179, 182, 186, 187, 189, 190, 193, 199, 200, 201, 210, 213, 216, 219, 222, 242, 246, 248, 250, 251, 261, 265, 268, 271, 276, 277, 281], "meta": [4, 18, 22, 134, 136, 138, 150, 165, 172, 189, 218, 252, 258, 265], "abstract": [4, 6, 13, 16, 36, 55, 64, 92, 102, 103, 107, 112, 120, 136, 138, 148, 166, 169, 172, 190, 229, 230], "metadata": [4, 12, 18, 20, 101, 141, 172, 183, 189, 198, 216, 250], "correct": [4, 6, 7, 11, 12, 13, 14, 15, 18, 23, 39, 46, 47, 50, 53, 67, 79, 89, 92, 94, 95, 97, 99, 102, 103, 105, 106, 112, 120, 132, 133, 137, 142, 149, 154, 157, 164, 172, 174, 175, 178, 180, 182, 183, 190, 195, 198, 211, 230, 236, 245, 258, 276], "stride": [4, 6, 7, 18, 23, 50, 56, 95, 99, 112, 132, 142, 154, 157, 185, 189, 194, 198, 209, 250, 252, 277], "register_fak": [4, 8, 18], "though": [4, 7, 12, 50, 79, 94, 102, 104, 105, 127, 142, 143, 150, 153, 165, 172, 183, 189, 190, 199, 206, 235, 246, 260], "definit": [4, 6, 7, 11, 12, 41, 50, 72, 79, 89, 106, 120, 131, 153, 164, 173, 177, 207, 236, 260, 261], "load": [4, 6, 8, 20, 22, 23, 27, 34, 35, 37, 38, 39, 43, 44, 46, 50, 55, 56, 59, 79, 92, 97, 102, 103, 105, 112, 114, 122, 131, 132, 134, 139, 154, 157, 163, 166, 168, 172, 182, 183, 185, 189, 192, 197, 199, 200, 215, 216, 217, 221, 227, 235, 236, 245, 249, 257, 258, 260, 265, 266, 275, 276, 277, 281], "strive": 4, "load_librari": [4, 8], "next": [4, 6, 7, 11, 13, 14, 16, 17, 19, 20, 23, 36, 46, 53, 55, 57, 59, 60, 86, 89, 94, 97, 99, 101, 102, 104, 105, 109, 112, 114, 121, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 145, 149, 150, 153, 154, 156, 160, 163, 165, 166, 173, 174, 175, 176, 178, 182, 183, 189, 190, 195, 199, 201, 208, 209, 216, 234, 235, 242, 250, 251, 266, 271], "_c": [4, 135, 197, 277], "_": [4, 5, 6, 13, 14, 16, 17, 23, 26, 43, 52, 53, 56, 102, 105, 112, 134, 135, 139, 148, 155, 160, 172, 174, 176, 183, 195, 213, 224, 226, 234, 245, 250, 276, 277, 280], "_check": 4, "empty_lik": [4, 102, 157, 206], "formula": [4, 12, 18, 104, 152, 172], "matter": [4, 6, 185, 206, 208, 224, 245], "wrong": [4, 56, 79, 106, 139, 154, 187], "hold": [4, 6, 16, 19, 22, 50, 66, 67, 69, 71, 72, 73, 92, 112, 120, 132, 133, 134, 139, 145, 163, 173, 174, 176, 250, 258, 261], "happen": [4, 11, 34, 35, 36, 39, 46, 56, 94, 97, 99, 102, 104, 106, 112, 114, 133, 134, 136, 143, 146, 148, 166, 170, 174, 182, 183, 189, 190, 199, 229, 246, 250, 261, 264, 274, 276], "modul": [4, 6, 8, 14, 15, 16, 19, 22, 23, 27, 35, 40, 41, 44, 47, 48, 50, 53, 57, 59, 64, 70, 72, 74, 94, 95, 97, 101, 102, 103, 106, 111, 116, 121, 122, 127, 131, 132, 133, 134, 136, 137, 141, 142, 146, 148, 153, 154, 157, 160, 163, 165, 168, 169, 171, 172, 174, 175, 176, 177, 180, 183, 185, 186, 187, 189, 193, 194, 197, 199, 200, 210, 211, 213, 214, 215, 216, 221, 226, 227, 228, 229, 230, 234, 235, 236, 242, 246, 248, 249, 251, 252, 257, 261, 263, 265, 266, 277, 279, 281], "initi": [4, 7, 11, 13, 16, 19, 22, 23, 35, 36, 39, 46, 53, 59, 67, 76, 77, 79, 95, 97, 102, 103, 104, 106, 109, 111, 112, 119, 120, 121, 127, 132, 133, 136, 139, 140, 149, 150, 154, 157, 163, 166, 168, 170, 171, 173, 174, 175, 176, 178, 182, 186, 187, 190, 193, 195, 197, 209, 214, 221, 227, 228, 230, 234, 242, 244, 246, 250, 258, 261, 266, 277], "pybind11_modul": [4, 6, 169], "notic": [4, 6, 11, 16, 34, 46, 47, 56, 79, 89, 94, 97, 102, 104, 106, 121, 143, 148, 154, 156, 164, 165, 172, 182, 187, 189, 193, 206, 208, 264, 276], "pybind11": [4, 6, 11, 169, 246], "promis": [4, 112, 210], "With": [4, 11, 12, 17, 19, 20, 22, 23, 43, 52, 56, 79, 89, 94, 95, 101, 108, 134, 136, 143, 146, 148, 154, 160, 163, 168, 174, 175, 176, 177, 178, 179, 195, 199, 200, 216, 222, 225, 226, 227, 230, 242, 244, 250, 258, 261, 275, 279, 280, 281], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 106, 163, 166, 190, 193], "sai": [4, 6, 7, 18, 27, 46, 55, 102, 106, 108, 111, 134, 137, 150, 155, 163, 170, 182, 199], "not_agnost": 4, "csrc": [4, 6, 169], "extension_bad": 4, "__init__": [4, 6, 7, 8, 13, 16, 23, 35, 40, 50, 55, 57, 97, 99, 101, 106, 112, 121, 132, 139, 141, 146, 148, 168, 170, 174, 175, 176, 183, 185, 194, 210, 211, 215, 218, 226, 227, 228, 230, 234, 236, 242, 248, 250, 252, 276, 277], "successfulli": [4, 7, 54, 114, 135, 138, 148, 154, 168, 175, 189, 190, 208, 221, 233, 234, 248, 262, 263, 264], "extern": [4, 55, 104, 121, 138, 153, 154, 200, 210, 261], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 8, 17], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 197, 242], "interpret": [4, 6, 7, 60, 86, 89, 95, 111, 131, 140, 141, 178, 187, 189, 200, 214, 246, 249, 257, 260, 265, 276, 279, 281], "global": [4, 6, 7, 53, 60, 92, 136, 155, 163, 168, 175, 180, 189, 215, 216, 224, 226, 229, 247, 258, 260, 261, 277], "variabl": [4, 6, 7, 11, 34, 53, 86, 92, 94, 102, 105, 106, 108, 112, 124, 141, 145, 148, 154, 168, 174, 177, 189, 190, 193, 197, 199, 201, 208, 210, 211, 215, 220, 221, 222, 234, 242, 270, 277, 279], "pymodule_cr": 4, "entir": [4, 6, 7, 16, 19, 22, 23, 50, 53, 57, 104, 106, 109, 112, 127, 131, 132, 133, 139, 141, 142, 163, 165, 168, 170, 172, 176, 178, 186, 189, 190, 206, 207, 208, 228, 245, 250, 252, 261, 265, 266, 276], "statement": [4, 11, 34, 46, 48, 113, 178, 189, 215, 245, 247], "trigger": [4, 134, 146, 154, 166, 174, 176, 186, 261, 277], "challeng": [4, 16, 108, 109, 113, 132, 135, 136, 148, 164, 173, 185, 186, 228, 229, 230, 246, 265], "shift": [4, 172], "toward": [4, 23, 53, 104, 140, 173], "trivial": [4, 16, 55, 60, 102, 137, 190, 218, 229], "pathlib": [4, 112, 133, 185], "so_fil": 4, "__file__": [4, 6, 169, 246, 277], "glob": 4, "assert": [4, 6, 8, 13, 22, 23, 101, 134, 141, 146, 154, 155, 175, 177, 183, 189, 195, 197, 211, 216, 224, 271], "len": [4, 8, 23, 36, 50, 55, 59, 101, 112, 127, 132, 133, 134, 148, 174, 175, 183, 185, 216, 230, 236], "f": [4, 6, 11, 13, 14, 18, 22, 23, 34, 36, 46, 50, 57, 59, 76, 94, 101, 106, 112, 120, 121, 132, 133, 135, 136, 137, 146, 148, 154, 155, 168, 169, 171, 172, 174, 175, 176, 183, 185, 195, 197, 200, 211, 216, 220, 224, 226, 227, 228, 230, 234, 236, 242, 246, 252, 277, 280], "register_autograd": [4, 18, 273], "prefer": [4, 7, 11, 18, 57, 155, 160, 169, 172, 187, 190, 197, 210, 245, 273], "directli": [4, 6, 7, 11, 13, 14, 16, 18, 35, 43, 52, 56, 89, 92, 94, 95, 102, 113, 114, 116, 117, 134, 135, 136, 141, 143, 144, 155, 166, 171, 172, 176, 178, 190, 197, 199, 208, 209, 211, 218, 221, 226, 228, 236, 279], "_backward": 4, "saved_tensor": [4, 6, 143], "grad_a": [4, 76, 120], "grad_b": [4, 76, 120], "none": [4, 8, 13, 16, 17, 22, 23, 36, 50, 53, 92, 94, 104, 112, 132, 133, 134, 148, 150, 154, 155, 157, 165, 168, 175, 185, 189, 194, 213, 216, 218, 222, 227, 228, 230, 259, 271, 277], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 9, 13, 18, 106, 107, 155, 168, 172, 230, 273], "had": [4, 7, 50, 55, 94, 97, 102, 109, 112, 114, 120, 163, 164, 173, 183, 235, 242, 258], "own": [4, 6, 7, 11, 12, 13, 16, 19, 20, 22, 35, 36, 53, 56, 67, 79, 92, 94, 95, 97, 112, 117, 119, 120, 131, 132, 133, 134, 140, 141, 142, 146, 154, 163, 164, 170, 171, 172, 175, 176, 178, 185, 187, 189, 190, 192, 193, 194, 197, 199, 216, 227, 229, 246, 258], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 14, 18, 53, 56, 79, 94, 95, 97, 124, 131, 134, 152, 157, 163, 166, 168, 170, 171, 185, 187, 190, 193, 208, 230, 264], "mathemat": [4, 12, 15, 18, 46, 52, 67, 94, 97, 99, 108, 148, 172, 189], "plan": [4, 7, 9, 12, 22, 121, 133, 136, 185, 190, 209, 221], "gradcheck": [4, 18, 142, 143, 152, 261], "sample_input": [4, 121], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 7, 23, 36, 76, 86, 89, 92, 102, 119, 132, 138, 139, 146, 148, 149, 157, 163, 170, 172, 174, 176, 182, 216, 236, 246, 251, 260, 276, 280], "14": [4, 7, 27, 36, 50, 97, 101, 132, 154, 172, 185, 193, 234, 235, 236, 246, 251, 252, 279], "123": [4, 55, 172, 176, 234], "reference_muladd": 4, "extend": [4, 6, 7, 8, 11, 23, 27, 56, 92, 113, 114, 115, 116, 131, 132, 140, 149, 171, 172, 175, 176, 185, 186, 190, 194, 197, 200, 214, 235, 236, 261, 266, 270, 272], "arg": [4, 22, 23, 57, 59, 108, 121, 132, 133, 146, 148, 153, 173, 174, 175, 176, 185, 187, 189, 200, 211, 224, 226, 227, 228, 235, 276, 277, 280], "assert_clos": 4, "check": [4, 6, 7, 11, 15, 16, 17, 23, 38, 39, 40, 43, 46, 47, 48, 53, 54, 56, 59, 62, 63, 79, 85, 89, 94, 97, 99, 101, 102, 103, 104, 105, 108, 112, 114, 119, 131, 132, 133, 134, 135, 138, 139, 146, 148, 149, 152, 154, 157, 165, 166, 170, 171, 172, 175, 185, 186, 187, 189, 190, 192, 193, 201, 203, 204, 209, 210, 211, 212, 213, 215, 221, 223, 228, 234, 235, 238, 239, 240, 241, 242, 243, 245, 251, 269, 271, 275, 276], "undefin": [4, 8, 148, 193, 206, 207, 208], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 157, 260], "caus": [4, 14, 17, 79, 86, 94, 102, 112, 137, 154, 166, 171, 174, 178, 182, 185, 189, 190, 197, 206, 215, 242, 247, 261, 274, 279], "incompat": [4, 135, 189, 276], "went": [4, 56, 99, 102, 141, 154], "fairli": [4, 6, 104, 112, 148, 163, 173, 193], "torchscript": [5, 8, 24, 25, 26, 114, 131, 214, 231, 251, 265, 278], "export": [5, 9, 11, 24, 25, 26, 50, 89, 94, 115, 116, 131, 145, 146, 154, 177, 179, 187, 210, 215, 222, 231, 234, 245, 261, 265, 278, 281], "http": [5, 7, 22, 23, 26, 27, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 85, 88, 96, 101, 104, 107, 112, 114, 115, 117, 120, 127, 132, 139, 140, 142, 151, 152, 153, 157, 163, 165, 171, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 194, 199, 202, 205, 207, 209, 219, 220, 221, 236, 244, 245, 246, 249, 250, 253, 254, 255, 256, 259, 276], "org": [5, 7, 26, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 85, 88, 96, 99, 101, 103, 104, 107, 115, 120, 127, 139, 140, 151, 152, 153, 163, 171, 178, 181, 182, 184, 187, 188, 189, 190, 199, 202, 205, 207, 209, 214, 219, 220, 221, 236, 242, 245, 249, 250, 253, 254, 255, 256], "torch_export_tutori": [5, 26, 179, 188, 189, 281], "html": [5, 26, 28, 29, 30, 31, 32, 37, 48, 49, 53, 66, 79, 80, 81, 82, 83, 84, 88, 96, 104, 107, 115, 120, 124, 127, 151, 153, 181, 184, 185, 188, 189, 190, 202, 205, 207, 209, 219, 245, 249, 250, 253, 254, 255, 256], "peter": 6, "goldsborough": 6, "newest": [6, 11], "date": [6, 7, 11, 12, 79, 81, 82, 83, 84, 85, 133, 175, 235, 258, 275], "plethora": 6, "relat": [6, 13, 16, 56, 94, 95, 102, 103, 108, 111, 131, 136, 154, 164, 189, 193, 210, 246, 261], "algebra": [6, 16, 43, 52, 97, 102, 106, 234], "wrangl": 6, "novel": [6, 95, 195], "activ": [6, 7, 12, 14, 16, 17, 20, 23, 35, 50, 56, 62, 63, 86, 94, 95, 97, 104, 106, 112, 133, 136, 141, 144, 148, 155, 163, 170, 171, 182, 193, 194, 195, 200, 201, 203, 204, 212, 213, 216, 222, 223, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 251, 261], "research": [6, 7, 20, 23, 53, 56, 79, 89, 95, 102, 106, 124, 148, 160, 165, 170, 185, 216, 276], "outlin": [6, 7, 166, 190], "power": [6, 7, 46, 53, 61, 69, 79, 92, 94, 97, 104, 106, 112, 120, 131, 132, 138, 146, 148, 154, 156, 160, 169, 170, 171, 178, 185, 186, 199, 209, 233, 246, 273, 279], "spare": [6, 7], "deriv": [6, 7, 12, 18, 20, 34, 39, 43, 46, 52, 94, 102, 106, 108, 109, 111, 120, 137, 139, 143, 152, 155, 216, 261], "express": [6, 9, 18, 94, 97, 99, 102, 105, 116, 124, 136, 189, 193, 208, 213, 233], "realli": [6, 11, 47, 94, 99, 102, 105, 106, 111, 120, 122, 131, 137, 183, 206, 208, 220, 246, 281], "frequent": [6, 34, 86, 111, 120, 132, 208, 235, 274], "expens": [6, 20, 43, 104, 119, 176, 189, 199, 216, 251, 260, 274], "even": [6, 7, 11, 12, 16, 19, 46, 47, 55, 79, 94, 97, 99, 102, 111, 112, 121, 132, 133, 136, 141, 143, 146, 153, 155, 164, 166, 172, 174, 177, 185, 189, 190, 193, 199, 206, 208, 209, 234, 246, 261, 262], "few": [6, 7, 8, 11, 12, 17, 23, 50, 55, 60, 89, 94, 95, 97, 102, 104, 106, 107, 108, 109, 111, 121, 130, 133, 134, 137, 139, 140, 141, 146, 148, 149, 164, 166, 171, 172, 175, 178, 187, 193, 194, 199, 207, 208, 209, 225, 228, 235, 236, 245, 260, 261, 262, 270], "plausibl": 6, "address": [6, 14, 22, 27, 86, 99, 131, 135, 148, 166, 174, 175, 189, 190, 193, 215, 229, 236, 258, 265, 279], "mechan": [6, 7, 13, 16, 17, 27, 34, 53, 60, 103, 131, 143, 153, 164, 178, 180, 182, 189, 213, 214, 235, 236, 242, 270, 271], "nativ": [6, 7, 11, 17, 18, 59, 92, 116, 117, 131, 133, 136, 149, 168, 176, 193, 194, 195, 199, 206, 209, 234, 235, 251, 260, 261, 265], "much": [6, 7, 11, 12, 14, 16, 20, 23, 39, 56, 60, 94, 95, 104, 105, 106, 111, 112, 121, 133, 137, 138, 155, 156, 163, 166, 171, 172, 175, 176, 178, 182, 183, 186, 187, 189, 190, 197, 199, 206, 209, 216, 242, 245, 246, 250, 259, 261, 262, 265, 266, 279], "boilerpl": [6, 7, 23, 47, 106, 183, 206], "degre": [6, 39, 67, 99, 120, 138, 178, 182, 195, 209], "onc": [6, 7, 11, 12, 13, 16, 19, 20, 34, 36, 39, 55, 56, 60, 86, 95, 97, 101, 102, 103, 104, 105, 109, 114, 144, 149, 157, 163, 164, 170, 171, 172, 173, 175, 178, 182, 183, 189, 190, 198, 199, 211, 216, 229, 235, 242, 245, 246, 261, 275, 276], "organ": [6, 11, 16, 55, 97, 121, 139, 195, 246, 279], "tackl": [6, 119], "decid": [6, 7, 11, 12, 20, 22, 56, 64, 92, 94, 173, 189, 190, 209, 214, 216, 264], "contribut": [6, 56, 64, 86, 95, 102, 157, 182], "upstream": [6, 235, 261], "rest": [6, 7, 16, 47, 127, 134, 149, 153, 172, 174, 175, 190, 193, 208, 258], "walk": [6, 7, 12, 17, 19, 27, 46, 58, 94, 107, 112, 124, 130, 131, 137, 154, 156, 175, 194, 199, 200, 201, 213, 245, 259], "chase": 6, "someon": [6, 178], "fire": [6, 146], "don": [6, 7, 8, 11, 12, 18, 46, 47, 56, 57, 59, 92, 99, 102, 105, 106, 109, 112, 117, 121, 127, 137, 143, 153, 155, 156, 163, 166, 172, 173, 176, 177, 186, 189, 190, 206, 207, 208, 225, 242, 245, 273, 274], "dai": [6, 136, 190, 258], "head": [6, 9, 20, 38, 87, 99, 119, 136, 146, 177, 192, 211, 216], "straight": [6, 7, 178], "recurr": [6, 47, 53, 105, 109, 131, 139, 140, 161, 164, 178, 179, 281], "unit": [6, 7, 53, 99, 102, 132, 133, 155, 166, 170, 172, 173, 178, 185, 189, 193, 248, 261], "superior": [6, 135, 210], "properti": [6, 7, 13, 16, 34, 43, 52, 94, 97, 102, 108, 111, 138, 164, 178, 189, 207, 235, 245, 246, 258, 263], "art": [6, 47, 56, 95, 97, 99, 170, 244], "lstm": [6, 47, 53, 99, 107, 110, 139, 140, 176, 281], "lack": [6, 17, 86, 95, 206, 229], "forget": [6, 7, 112, 121, 187], "gate": [6, 53, 99, 193, 258], "exponenti": [6, 53, 94, 102, 106, 108, 164, 173, 199], "elu": [6, 213], "intern": [6, 11, 12, 13, 17, 40, 41, 53, 60, 72, 99, 104, 120, 131, 132, 134, 138, 148, 182, 197, 206, 214, 222, 227, 260], "never": [6, 94, 105, 106, 107, 111, 137, 170, 180], "lltm": 6, "long": [6, 7, 12, 53, 54, 86, 92, 99, 102, 106, 107, 108, 110, 112, 133, 135, 137, 140, 149, 153, 154, 164, 168, 173, 176, 182, 190, 193, 195, 197, 200, 246, 260, 261, 264, 274, 281], "term": [6, 7, 17, 43, 56, 64, 79, 94, 95, 99, 103, 106, 107, 108, 110, 119, 133, 135, 136, 160, 170, 172, 189, 190, 193, 199, 209, 218, 252, 279, 281], "vanilla": [6, 7, 53, 69, 106, 120, 185, 193, 206, 280], "signific": [6, 7, 23, 56, 86, 95, 133, 135, 139, 142, 154, 155, 157, 163, 166, 172, 177, 182, 187, 190, 197, 228, 229, 230, 234, 236, 245, 246, 261, 273], "enough": [6, 7, 20, 53, 86, 97, 108, 112, 120, 137, 142, 171, 189, 197, 216, 227, 234, 245], "lstmcell": 6, "cell": [6, 54, 94, 95, 97, 99, 102, 103, 119, 166, 172, 173, 177, 185, 190, 199, 261], "plain": [6, 7, 53, 112, 134, 139, 140, 178, 192, 258, 260], "someth": [6, 7, 13, 16, 23, 47, 92, 97, 102, 106, 108, 148, 154, 171, 172, 178, 189, 193, 220, 246, 260], "self": [6, 7, 8, 11, 12, 13, 16, 17, 23, 27, 36, 50, 53, 57, 59, 101, 106, 112, 119, 120, 121, 131, 132, 136, 141, 146, 148, 154, 156, 164, 168, 174, 175, 176, 182, 183, 185, 189, 193, 194, 210, 211, 218, 226, 227, 228, 230, 234, 236, 242, 251, 252, 258, 266, 276, 277], "input_featur": [6, 276], "state_s": 6, "super": [6, 7, 13, 22, 23, 50, 101, 112, 121, 132, 135, 141, 146, 156, 168, 174, 175, 176, 183, 185, 194, 210, 211, 218, 226, 227, 228, 230, 234, 236, 242, 252, 276], "candid": [6, 154], "reset_paramet": [6, 134], "stdv": 6, "math": [6, 12, 76, 89, 94, 108, 112, 120, 160, 171, 261, 277], "sqrt": [6, 89, 112, 193, 206, 218], "uniform_": [6, 7, 176, 218], "old_h": 6, "old_cel": 6, "cat": [6, 43, 47, 52, 95, 97, 105, 108, 154, 176, 178, 183, 192, 244], "gate_weight": 6, "split": [6, 11, 22, 23, 48, 53, 56, 89, 92, 97, 101, 103, 131, 139, 140, 146, 168, 172, 175, 176, 178, 190, 192, 211, 226, 242], "combin": [6, 12, 39, 59, 64, 92, 94, 97, 99, 104, 105, 108, 111, 112, 130, 131, 132, 137, 139, 140, 142, 150, 160, 166, 170, 173, 176, 178, 189, 190, 193, 200, 211, 229, 230, 236, 246, 261], "input_g": 6, "sigmoid": [6, 7, 56, 99, 194, 261], "output_g": 6, "tanh": [6, 7, 56, 99, 106, 155, 172, 261], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 53, 95, 99, 104, 105, 109, 112, 136, 138, 139, 140, 149, 176, 177, 178, 186, 244], "new_h": 6, "batch_siz": [6, 7, 16, 23, 36, 53, 55, 56, 59, 92, 101, 112, 132, 133, 134, 136, 148, 155, 172, 173, 174, 175, 182, 183, 185, 186, 190, 210, 211, 216, 235, 236, 245, 269, 276], "rnn": [6, 48, 53, 99, 131, 149, 161, 164, 175, 178, 179, 261, 281], "new_c": 6, "intel": [6, 148, 154, 157, 213, 215, 221, 265], "mkl": [6, 154, 210, 251, 279], "nnpack": 6, "why": [6, 7, 11, 13, 16, 18, 47, 56, 89, 95, 104, 106, 111, 121, 124, 143, 146, 154, 163, 178, 187, 189, 190, 207, 209, 246, 275, 276], "circumst": [6, 166, 245], "room": [6, 104, 166, 234], "obviou": [6, 189, 246], "knowledg": [6, 53, 56, 79, 106, 107, 122, 124, 131, 154, 156, 281], "know": [6, 7, 11, 13, 22, 23, 34, 46, 53, 76, 77, 79, 97, 99, 102, 106, 108, 111, 112, 120, 137, 139, 140, 143, 148, 149, 150, 154, 156, 157, 160, 165, 166, 168, 172, 173, 174, 178, 183, 189, 190, 192, 194, 207, 236, 246, 272], "execut": [6, 7, 11, 13, 17, 19, 21, 34, 35, 41, 42, 46, 48, 51, 54, 68, 74, 78, 86, 90, 94, 97, 100, 102, 105, 110, 113, 117, 118, 122, 130, 131, 134, 135, 137, 138, 141, 148, 149, 153, 154, 157, 166, 169, 172, 173, 175, 176, 177, 179, 187, 189, 193, 195, 197, 200, 210, 217, 221, 222, 226, 234, 242, 245, 257, 260, 268, 271, 275, 276, 279, 281], "involv": [6, 11, 17, 20, 23, 38, 41, 54, 89, 94, 95, 102, 105, 108, 114, 121, 130, 137, 139, 145, 156, 163, 176, 178, 189, 197, 198, 199, 211, 216, 252, 261, 266, 273, 276], "launch": [6, 7, 57, 64, 135, 138, 145, 146, 174, 175, 176, 177, 182, 195, 221, 234, 236, 246, 251, 261, 279], "amount": [6, 23, 79, 86, 121, 136, 146, 166, 170, 187, 190, 199, 251, 261], "becom": [6, 7, 13, 27, 56, 79, 89, 95, 104, 136, 143, 155, 157, 166, 182, 183, 190, 197, 200, 211, 224, 234, 245, 279], "furthermor": [6, 23, 104, 150, 155, 183, 200, 229, 246], "itself": [6, 13, 34, 35, 46, 86, 89, 99, 102, 104, 108, 109, 112, 117, 121, 136, 137, 139, 143, 148, 156, 172, 175, 176, 178, 190, 245, 251, 275], "slow": [6, 7, 11, 39, 132, 134, 166, 190, 193, 251, 261], "down": [6, 11, 12, 13, 23, 35, 36, 54, 86, 92, 94, 99, 101, 106, 112, 132, 149, 154, 155, 156, 175, 180, 183, 189, 197, 206, 260, 261], "thing": [6, 7, 11, 17, 18, 34, 46, 47, 50, 53, 89, 92, 94, 97, 102, 103, 104, 105, 106, 108, 109, 111, 112, 131, 134, 136, 137, 138, 143, 144, 145, 148, 149, 153, 154, 157, 164, 171, 172, 180, 189, 199, 215, 227, 246, 264], "therefor": [6, 7, 8, 17, 23, 53, 55, 104, 121, 130, 139, 146, 157, 160, 166, 169, 170, 175, 176, 189, 201, 208, 209, 221, 245, 279], "rewrit": [6, 48, 141, 164, 189, 220, 221], "group": [6, 13, 22, 23, 27, 53, 64, 87, 99, 102, 119, 130, 131, 132, 133, 134, 135, 140, 142, 144, 146, 148, 154, 168, 182, 190, 192, 193, 197, 227, 228, 230, 246, 276, 279, 280], "profit": 6, "fewer": [6, 13, 142, 155], "visibl": [6, 47, 92, 101, 185], "begin": [6, 7, 8, 13, 14, 20, 23, 34, 46, 53, 54, 56, 59, 79, 89, 94, 97, 109, 111, 133, 136, 161, 163, 173, 175, 182, 183, 190, 208, 211, 216, 233, 245, 246, 248, 251, 262, 263, 264, 266], "translat": [6, 53, 114, 116, 117, 131, 139, 140, 160, 161, 179, 208, 261, 276, 281], "benefit": [6, 7, 20, 22, 46, 89, 92, 133, 135, 152, 157, 163, 166, 177, 193, 199, 216, 234, 235, 245, 261, 272, 279], "massiv": [6, 47, 108, 111, 190, 235], "parallel": [6, 7, 13, 19, 22, 47, 49, 51, 53, 55, 59, 79, 92, 97, 121, 131, 138, 144, 148, 160, 172, 175, 176, 190, 197, 210, 214, 227, 228, 229, 233, 245, 251, 277, 279, 280, 281], "discuss": [6, 7, 11, 12, 17, 19, 47, 79, 94, 97, 99, 103, 108, 109, 132, 133, 141, 148, 153, 154, 160, 166, 168, 187, 193, 197, 206, 207, 208, 209, 250, 271, 273], "latter": [6, 7, 138, 174], "lltm_cpp": 6, "conveni": [6, 11, 16, 47, 50, 53, 95, 108, 112, 137, 140, 150, 155, 169, 172, 197, 207, 209, 228, 235, 245, 246, 260], "wrapper": [6, 7, 11, 59, 112, 121, 132, 133, 143, 149, 156, 172, 185, 190, 198, 214, 227, 228, 273, 277], "languag": [6, 7, 27, 47, 53, 99, 105, 107, 109, 131, 136, 138, 139, 140, 161, 176, 178, 195, 200, 222, 234, 261, 266, 271, 273, 276, 277], "include_dir": [6, 12, 169], "include_path": 6, "manag": [6, 35, 46, 53, 64, 94, 112, 119, 130, 134, 136, 141, 144, 145, 146, 164, 177, 182, 187, 190, 198, 227, 228, 229, 230, 245, 246, 247, 250, 251, 252, 261, 274, 279], "And": [6, 7, 12, 18, 27, 56, 95, 108, 114, 139, 143, 154, 155, 157, 160, 171, 182, 183, 187, 189, 246, 260], "overal": [6, 23, 53, 99, 132, 133, 148, 166, 173, 185, 189, 190, 234, 246, 261], "iostream": [6, 7, 8, 235], "d_sigmoid": 6, "header": [6, 7, 11, 169, 246], "bit": [6, 17, 72, 97, 102, 119, 120, 149, 171, 172, 178, 190, 199, 206, 222, 236, 246], "primari": [6, 7, 17, 166, 186, 200, 210, 211, 221, 229, 260, 261, 279], "datatyp": [6, 43, 52, 77, 97, 102, 119, 235, 245], "Its": [6, 104, 106, 211], "inspect": [6, 8, 94, 104, 117, 133, 134, 138, 153, 177, 180, 187, 189, 190, 246, 275], "dispos": 6, "nvcc": 6, "hit": [6, 23, 79, 136, 182], "pars": [6, 53, 55, 111, 132, 133, 138, 197, 246], "window": [6, 7, 47, 55, 99, 111, 114, 131, 146, 175, 182, 192, 214, 221, 242, 261], "workaround": [6, 89, 143, 152, 276], "logic": [6, 7, 13, 20, 39, 44, 89, 105, 113, 131, 132, 138, 145, 168, 170, 175, 176, 185, 186, 216, 218, 228, 279], "sigmoidalphablendforwardcuda": 6, "open": [6, 38, 40, 54, 92, 95, 97, 98, 101, 103, 111, 112, 114, 116, 131, 133, 148, 150, 153, 163, 165, 178, 182, 185, 193, 201, 221, 235, 236, 242], "port": [6, 19, 135, 148, 175, 190, 197, 242, 270], "lltm_forward": 6, "addmm": [6, 7, 119, 154, 221, 222, 234, 251], "transpos": [6, 7, 14, 43, 52, 53, 56, 101, 154, 183, 211, 221, 276], "alpha": [6, 7, 17, 156, 185, 206, 211], "respect": [6, 9, 18, 19, 34, 36, 38, 39, 40, 46, 53, 56, 66, 67, 76, 94, 95, 106, 108, 120, 124, 136, 137, 149, 152, 154, 155, 165, 166, 172, 176, 178, 182, 190, 195, 226, 258, 263, 273, 279], "ultim": [6, 23, 53, 56, 89, 206, 222], "plop": 6, "autograd": [6, 9, 14, 17, 18, 19, 35, 36, 38, 39, 40, 41, 43, 44, 49, 50, 51, 61, 65, 68, 72, 95, 96, 97, 98, 99, 101, 102, 103, 107, 108, 112, 131, 139, 140, 143, 146, 154, 155, 160, 165, 173, 174, 175, 178, 179, 189, 220, 226, 242, 245, 261, 273, 281], "nice": [6, 53, 112, 163, 165, 172, 189, 190, 193], "dig": [6, 95, 106, 177, 189], "deeper": [6, 13, 14, 40, 95, 102, 104, 106, 153, 154, 177, 189, 225, 233], "interest": [6, 7, 12, 16, 20, 47, 53, 55, 92, 94, 95, 104, 106, 113, 114, 116, 117, 127, 133, 138, 155, 163, 164, 172, 180, 189, 190, 192, 193, 216, 220, 246, 260, 263, 264], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 14, 23, 50, 56, 99, 101, 106, 112, 121, 132, 146, 154, 171, 174, 175, 176, 183, 210, 213, 227, 228, 229, 230, 234, 235, 236, 245, 252, 261], "exp": [6, 105, 106, 112, 143, 208], "d_elu": 6, "mask": [6, 20, 95, 99, 119, 131, 149, 164, 170, 177, 185, 192, 199, 206, 207, 209, 211, 214, 216, 235, 276], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 23, 132, 175, 236], "d_x": 6, "d_old_h": 6, "slice": [6, 43, 52, 109, 112, 170, 193, 211, 221, 230, 260], "d_input": 6, "span": [6, 20, 105, 146, 182, 216, 242], "four": [6, 16, 22, 89, 97, 99, 101, 102, 120, 133, 148, 168, 183, 193, 213, 276], "torch_extension_nam": [6, 169], "macro": [6, 7, 11, 17], "maintain": [6, 12, 16, 34, 35, 36, 46, 53, 79, 99, 104, 109, 131, 135, 144, 148, 156, 173, 176, 189, 215, 221, 227, 245, 280], "mismatch": [6, 104, 189, 197], "nasti": [6, 258], "hard": [6, 7, 11, 17, 36, 106, 138, 166, 170, 189, 246, 270], "At": [6, 7, 11, 16, 17, 20, 46, 50, 53, 54, 89, 92, 109, 112, 120, 132, 133, 136, 149, 152, 156, 172, 173, 174, 177, 178, 182, 206, 209, 216, 221, 251, 258, 261, 275], "point": [6, 7, 11, 12, 13, 16, 20, 22, 23, 46, 50, 53, 54, 55, 56, 57, 86, 89, 94, 97, 99, 102, 104, 105, 107, 108, 109, 111, 112, 120, 132, 134, 136, 137, 138, 143, 144, 146, 153, 156, 160, 166, 172, 174, 178, 183, 185, 189, 190, 197, 199, 206, 208, 209, 215, 216, 236, 249, 257, 259, 261, 265, 272, 276, 281], "bdist_egg": 6, "egg_info": 6, "egg": 6, "info": [6, 7, 86, 135, 145, 148, 156, 172, 185, 189, 222, 235, 236], "pkg": 6, "dependency_link": 6, "txt": [6, 7, 53, 139, 140, 154, 171, 178, 229, 235], "top_level": 6, "manifest": [6, 208], "bdist": 6, "linux": [6, 7, 22, 114, 136, 146, 148, 171, 182, 192, 221, 235, 261, 279], "x86_64": [6, 22], "install_lib": 6, "temp": [6, 23, 141, 270], "gcc": [6, 154, 210], "pthread": [6, 7, 235], "local": [6, 7, 11, 19, 22, 23, 38, 53, 54, 64, 94, 98, 105, 113, 121, 124, 133, 134, 136, 138, 146, 148, 163, 170, 174, 175, 176, 178, 180, 190, 195, 197, 198, 226, 245, 248, 261, 270, 271, 277, 279, 280], "miniconda": [6, 22], "compiler_compat": 6, "wl": 6, "sysroot": 6, "wsign": 6, "dndebug": 6, "fwrapv": 6, "o3": [6, 246], "wall": [6, 105, 153, 246], "wstrict": 6, "prototyp": [6, 8, 12, 13, 17, 36, 189, 190, 200, 202, 210, 211, 217, 220, 221, 226, 233, 281], "fpic": 6, "lib": [6, 7, 12, 22, 154, 172, 197, 235, 260, 276, 277, 279], "python3": [6, 22, 182, 197, 234, 260, 276, 277], "site": [6, 9, 22, 54, 56, 153, 178, 251, 260, 276], "th": [6, 16, 55, 106, 111, 148, 156], "thc": 6, "7m": [6, 36, 101], "o": [6, 7, 13, 22, 23, 36, 53, 54, 57, 59, 104, 132, 133, 135, 146, 148, 160, 163, 166, 168, 169, 171, 174, 175, 176, 185, 195, 197, 198, 215, 216, 226, 227, 228, 230, 246, 250, 277, 280], "dtorch_api_include_extension_h": 6, "dtorch_extension_nam": 6, "d_glibcxx_use_cxx11_abi": 6, "cc1plu": 6, "warn": [6, 23, 55, 154, 172, 185, 206, 207, 208, 209, 246, 251, 260], "valid": [6, 27, 39, 53, 92, 99, 101, 103, 104, 116, 119, 121, 127, 132, 133, 138, 139, 142, 143, 166, 169, 185, 186, 189, 192, 207, 208, 216, 246, 271, 274], "objc": 6, "share": [6, 7, 12, 13, 22, 43, 52, 59, 70, 74, 92, 104, 108, 131, 133, 137, 146, 148, 149, 156, 166, 172, 175, 176, 189, 197, 228, 235, 246, 250, 260, 270, 275, 279, 281], "l": [6, 14, 16, 46, 55, 56, 94, 106, 172, 173, 189, 197, 211, 246, 275, 277], "rpath": 6, "37m": 6, "gnu": [6, 7, 235, 261, 279], "stub": 6, "loader": [6, 7, 27, 40, 47, 103, 112, 172, 175, 192, 246], "byte": [6, 189, 198, 276], "37": [6, 20, 36, 101, 119, 171, 172, 176, 216, 234, 251], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 23, 86, 131, 163, 172, 187, 189, 260, 276], "archiv": [6, 7, 157, 189, 275], "__pycache__": 6, "dist": [6, 13, 22, 132, 133, 135, 146, 148, 168, 169, 175, 195, 197, 227, 228, 230, 277, 280], "py3": 6, "remov": [6, 20, 23, 53, 56, 57, 87, 112, 117, 119, 124, 134, 137, 146, 154, 163, 171, 177, 178, 185, 186, 187, 189, 190, 193, 199, 206, 207, 211, 216, 246, 260], "everyth": [6, 18, 46, 92, 102, 104, 106, 138, 139, 143, 149, 171, 172, 173, 174, 178, 183, 190, 198, 226], "pth": [6, 23, 121, 185, 199, 228, 235, 236, 276], "finish": [6, 7, 19, 48, 97, 101, 146, 174, 176, 183, 213, 226, 227, 242, 248, 261], "abi": [6, 7, 221, 235], "ubuntu": [6, 7, 182, 279], "16": [6, 20, 23, 50, 76, 92, 97, 99, 101, 104, 112, 121, 146, 149, 155, 157, 171, 172, 176, 183, 185, 189, 192, 199, 210, 216, 227, 228, 234, 246, 251, 252, 275, 276, 277], "04": [6, 42, 155, 172, 182, 201, 234, 246, 281], "recent": [6, 53, 109, 119, 135, 136, 148, 154, 160, 164, 173, 182, 276, 279], "distribut": [6, 7, 16, 17, 23, 56, 79, 92, 97, 102, 103, 104, 106, 111, 131, 132, 133, 134, 135, 136, 138, 144, 145, 157, 163, 169, 172, 174, 182, 193, 195, 197, 211, 213, 214, 218, 226, 229, 230, 246, 265, 279, 280], "maco": [6, 7, 114, 148, 185, 261], "clang": [6, 201, 221], "worst": 6, "resolv": [6, 104, 157, 186, 189, 208, 229, 276], "symbol": [6, 246, 260, 276], "linker": 6, "pycapsul": 6, "builtin": [6, 169, 246, 260], "arg0": 6, "arg1": [6, 175], "arg2": [6, 175], "arg3": 6, "arg4": 6, "citizen": [6, 206, 208], "lltmfunction": 6, "staticmethod": [6, 143, 174, 185], "benchmark": [6, 17, 20, 27, 36, 119, 131, 138, 154, 155, 166, 171, 177, 187, 193, 199, 210, 211, 213, 216, 233, 235, 236, 251, 257, 260, 261, 265, 271, 276, 279, 281], "measur": [6, 14, 39, 86, 94, 95, 97, 99, 104, 111, 132, 135, 153, 155, 166, 172, 173, 177, 180, 187, 199, 210, 226, 234, 245, 246, 251, 260, 265, 266, 275], "durat": [6, 87, 169, 173, 182, 197], "32": [6, 22, 23, 50, 59, 92, 97, 99, 102, 104, 109, 119, 132, 155, 160, 165, 168, 171, 172, 175, 176, 179, 182, 185, 189, 195, 210, 234, 236, 246, 252, 277], "128": [6, 7, 55, 56, 59, 92, 104, 132, 136, 139, 148, 150, 171, 174, 175, 176, 190, 193, 222, 226, 235, 246, 260, 269], "rang": [6, 7, 8, 13, 14, 16, 22, 23, 36, 44, 47, 55, 56, 57, 76, 79, 86, 92, 95, 101, 104, 112, 113, 114, 116, 117, 120, 132, 133, 134, 135, 138, 148, 168, 171, 172, 174, 176, 178, 182, 183, 189, 192, 194, 195, 197, 199, 200, 211, 216, 224, 226, 227, 230, 234, 236, 242, 244, 245, 251, 261, 273, 276, 279, 280], "100000": [6, 246], "3f": [6, 23, 211, 216], "wrote": [6, 187, 192], "post": [6, 7, 13, 53, 104, 132, 133, 134, 138, 157, 180, 190, 195, 211, 236, 244], "my": [6, 54, 105, 111, 193], "machin": [6, 7, 22, 38, 40, 44, 47, 53, 54, 55, 57, 58, 59, 60, 64, 79, 92, 94, 95, 98, 114, 116, 131, 132, 133, 138, 144, 145, 146, 148, 153, 165, 166, 171, 175, 176, 177, 178, 190, 192, 197, 224, 233, 234, 242, 259, 261, 270, 271, 276, 279], "506": 6, "480": [6, 251], "444": 6, "694": 6, "349": [6, 97, 172], "335": [6, 157, 172, 176, 277, 280], "443": [6, 176, 251], "523": 6, "speedup": [6, 20, 47, 120, 131, 150, 154, 165, 193, 199, 210, 211, 216, 234, 261, 266, 275], "30": [6, 7, 23, 36, 48, 86, 106, 131, 133, 135, 157, 170, 172, 174, 176, 216, 246, 251], "albeit": [6, 16], "major": [6, 8, 12, 13, 23, 99, 102, 111, 127, 135, 154, 163, 177, 187, 190, 209, 234, 266, 273, 277, 280], "particularli": [6, 15, 20, 57, 112, 164, 178, 210, 216, 261], "engin": [6, 7, 16, 34, 46, 92, 94, 132, 141, 166, 171, 176, 185, 189, 190, 192, 197, 220, 222, 235, 276], "correspondingli": 6, "big": [6, 56, 99, 105, 111, 120, 134, 140, 150, 163, 172, 178, 185], "win": [6, 163], "No": [6, 7, 57, 117, 134, 154, 194, 225, 273], "cuda_devic": 6, "creation": [6, 7, 12, 102, 209, 218, 250], "is_avail": [6, 7, 14, 92, 102, 112, 168, 169, 172, 173, 175, 195, 211, 215, 276], "synchron": [6, 13, 19, 59, 60, 86, 132, 134, 146, 148, 172, 174, 175, 182, 187, 197, 198, 211, 226, 227, 242, 245, 246, 274, 280], "1e6": [6, 23, 224, 280], "1e5": 6, "again": [6, 7, 47, 54, 94, 95, 99, 101, 102, 104, 105, 112, 113, 137, 142, 148, 149, 163, 174, 176, 178, 182, 185, 187, 190, 198, 199, 215, 246], "187": [6, 246], "719": 6, "410": [6, 157], "815": 6, "149": [6, 172], "802": [6, 154], "393": 6, "458": [6, 154], "That": [6, 7, 8, 20, 46, 47, 48, 53, 94, 95, 97, 102, 106, 108, 109, 111, 112, 114, 136, 139, 146, 152, 153, 155, 157, 160, 163, 172, 173, 177, 182, 189, 190, 192, 206, 207, 209, 216, 260, 265], "great": [6, 53, 114, 120, 121, 208, 246, 263], "pull": [6, 95, 102, 103, 153, 215], "dive": [6, 7, 13, 40, 141, 146, 154, 210, 260], "previous": [6, 11, 34, 89, 108, 112, 141, 152, 168, 170, 172, 173, 174, 182, 189, 206, 220, 258, 265, 275], "cover": [6, 9, 16, 17, 19, 22, 36, 50, 102, 107, 117, 124, 131, 133, 138, 148, 168, 169, 172, 175, 176, 183, 187, 189, 208, 210, 211, 226, 234, 235, 245, 253, 254, 255, 256, 259, 260, 261, 272, 279], "elabor": [6, 7, 136, 154, 174], "fly": [6, 16, 55, 105, 172, 193], "background": [6, 7, 35, 79, 101, 171, 183, 185, 192, 271, 272], "tmp": [6, 154, 185, 197, 200, 270, 271, 277], "torch_extens": 6, "emit": [6, 7, 105, 189, 277], "ninja": 6, "verbos": [6, 145, 185, 189, 222, 229], "root": [6, 7, 16, 34, 36, 46, 55, 56, 97, 105, 134, 142, 149, 154, 175, 176, 197, 235, 242, 259, 269], "complic": [6, 8, 16, 105, 106, 111, 112, 120, 138, 189, 220, 230, 245, 246], "techniqu": [6, 19, 20, 23, 53, 64, 104, 105, 111, 113, 131, 136, 142, 143, 144, 153, 161, 164, 166, 168, 170, 176, 185, 190, 193, 199, 206, 211, 216, 261, 276, 279], "fine": [6, 7, 20, 23, 53, 55, 94, 105, 130, 137, 148, 154, 171, 182, 187, 190, 206, 216, 245, 246, 260, 261, 279], "system": [6, 7, 11, 12, 14, 16, 17, 59, 104, 131, 134, 138, 148, 164, 166, 171, 172, 174, 186, 187, 189, 190, 197, 221, 222, 227, 248, 261, 270, 279], "increment": [6, 13, 89, 108, 112, 148, 173], "thu": [6, 7, 11, 12, 23, 34, 41, 53, 89, 92, 104, 112, 133, 150, 163, 166, 178, 210, 218, 242, 246, 251, 261, 279], "didn": [6, 11, 95, 114, 153, 174, 220], "hand": [6, 7, 11, 16, 20, 22, 79, 102, 105, 111, 112, 140, 148, 165, 166, 187, 189, 190, 207, 216, 227, 228, 266], "prospect": 6, "pointwis": [6, 11, 157, 186, 233, 261, 265, 277], "declar": [6, 7, 15, 79], "best": [6, 7, 11, 41, 46, 56, 64, 79, 92, 114, 117, 119, 121, 127, 131, 144, 148, 150, 154, 165, 166, 171, 174, 176, 180, 189, 193, 199, 210, 216, 234, 235, 236, 251, 260, 261, 264, 265, 271, 273, 279], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": 6, "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 225], "cuda_runtim": 6, "templat": [6, 11, 122, 148, 154, 186, 210, 236, 281], "typenam": 6, "scalar_t": [6, 154], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 22, 39, 43, 46, 52, 56, 57, 92, 94, 108, 134, 135, 136, 145, 149, 157, 176, 177, 180, 189, 209, 211, 215, 242, 261], "zeros_lik": [6, 102, 174], "thread": [6, 7, 8, 11, 56, 119, 134, 135, 146, 155, 166, 171, 174, 175, 176, 235, 242, 246, 251, 260, 261, 279], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 12, 13, 16, 35, 53, 66, 67, 86, 94, 95, 97, 99, 101, 105, 106, 111, 117, 119, 120, 138, 139, 149, 154, 170, 172, 173, 175, 182, 183, 185, 190, 197, 206, 208, 209, 222, 244, 246, 276], "awai": [6, 7, 50, 99, 101, 105, 106, 108, 172, 173, 174, 190, 209, 229], "runtim": [6, 11, 16, 22, 43, 54, 86, 89, 94, 97, 98, 102, 116, 117, 119, 131, 135, 136, 141, 142, 153, 163, 166, 168, 182, 187, 189, 190, 199, 201, 210, 221, 222, 224, 234, 245, 246, 251, 264, 265, 272, 277], "back": [6, 7, 11, 12, 16, 17, 23, 34, 47, 50, 55, 79, 92, 94, 101, 102, 104, 108, 112, 114, 119, 134, 137, 157, 163, 166, 172, 174, 175, 176, 178, 185, 187, 189, 190, 193, 206, 211, 228, 258, 261, 273, 274], "determin": [6, 7, 8, 11, 13, 20, 23, 43, 52, 95, 97, 102, 103, 104, 105, 108, 111, 114, 135, 136, 138, 150, 163, 164, 165, 170, 187, 189, 190, 197, 211, 215, 216, 246, 251, 252, 261], "conceptu": [6, 7, 34, 46, 53, 120, 260], "switch": [6, 11, 17, 23, 101, 102, 121, 163, 190, 221, 234, 245, 247, 251, 264], "scalartyp": 6, "messag": [6, 18, 53, 94, 117, 141, 148, 185, 189, 222, 279], "insid": [6, 7, 12, 19, 22, 35, 39, 48, 134, 136, 182, 187, 192, 210, 216, 220, 222], "alia": [6, 12, 102], "instanti": [6, 7, 12, 16, 36, 41, 55, 56, 69, 71, 89, 97, 104, 112, 114, 120, 138, 169, 170, 173, 185, 218, 233, 250], "retriev": [6, 7, 16, 19, 34, 36, 53, 137, 138, 168, 172, 174, 175, 190, 242, 279], "at_dispatch_all_typ": 6, "sens": [6, 11, 14, 16, 104, 111, 112, 150, 166, 183], "routin": [6, 7, 190], "convolut": [6, 7, 11, 14, 15, 50, 56, 95, 97, 102, 104, 112, 121, 127, 131, 157, 160, 170, 179, 180, 189, 221, 222, 234, 235, 242, 245, 248, 251, 252, 263, 264, 275, 281], "harder": [6, 104, 199], "ourselv": [6, 7, 39, 53, 142, 172], "grid": [6, 50, 101, 103, 112, 127, 180, 183, 200], "fill": [6, 7, 16, 97, 111, 112, 139, 149, 207, 208], "matric": [6, 14, 20, 43, 52, 94, 108, 155, 164, 216, 222], "2048": [6, 22, 104, 155], "heard": 6, "introductori": 6, "ever": [6, 7, 137, 146, 189, 250], "__restrict__": [6, 210], "size_t": 6, "column": [6, 22, 94, 102, 106, 108, 119, 136, 139, 154, 155, 160, 182, 185, 190, 207, 208, 209, 211, 251], "index": [6, 7, 8, 17, 36, 43, 44, 47, 52, 53, 55, 87, 102, 105, 106, 108, 109, 111, 112, 119, 132, 137, 138, 139, 148, 164, 168, 174, 178, 182, 185, 187, 189, 190, 199, 211, 220, 277, 279], "gates_row": 6, "primarili": [6, 86, 175, 187, 229, 245, 261], "imagin": [6, 94, 102, 105, 111, 143, 148, 163, 164, 178, 190, 246, 258], "giant": [6, 178], "million": [6, 127, 133, 149], "serial": [6, 7, 12, 40, 41, 112, 121, 131, 189, 198, 242, 246, 275], "faster": [6, 7, 11, 14, 23, 53, 60, 79, 99, 102, 104, 112, 121, 131, 133, 135, 145, 146, 149, 150, 155, 157, 165, 166, 174, 178, 187, 192, 197, 210, 245, 246, 260, 261, 262, 265, 279], "right": [6, 7, 11, 12, 14, 16, 34, 38, 43, 46, 52, 53, 56, 67, 86, 94, 99, 101, 104, 106, 108, 111, 120, 139, 148, 156, 160, 163, 172, 173, 174, 177, 178, 182, 185, 192, 193, 220, 234, 242], "inde": [6, 16, 18, 104, 142, 155, 166, 172, 177, 187, 190, 208, 209, 246], "ineffici": [6, 86, 211], "eas": [6, 89, 102, 103, 133, 193, 235, 250, 265], "readabl": [6, 36, 55, 95, 102, 105, 140, 182, 197, 246, 260], "especi": [6, 9, 20, 23, 53, 56, 79, 95, 102, 133, 135, 146, 153, 160, 163, 166, 189, 193, 199, 207, 216, 236], "dimension": [6, 35, 43, 50, 52, 53, 56, 64, 76, 77, 94, 99, 101, 102, 104, 107, 108, 109, 111, 120, 136, 141, 157, 170, 177, 178, 183, 185, 190, 209, 222, 230], "row": [6, 22, 36, 55, 79, 94, 99, 102, 106, 108, 109, 111, 112, 134, 136, 138, 139, 155, 174, 190, 207, 209, 220, 242], "n": [6, 7, 8, 14, 20, 23, 34, 46, 50, 64, 76, 77, 86, 89, 94, 99, 101, 102, 104, 112, 120, 132, 133, 134, 146, 148, 155, 156, 160, 168, 170, 174, 175, 176, 178, 183, 189, 190, 192, 197, 199, 210, 211, 216, 220, 235, 261], "arithmet": [6, 23, 43, 97, 102, 166], "within": [6, 8, 16, 22, 64, 89, 94, 95, 101, 112, 113, 114, 119, 136, 141, 143, 154, 164, 170, 173, 175, 185, 186, 187, 190, 193, 198, 200, 209, 210, 211, 215, 221, 230, 234, 246, 252, 261, 270, 272, 275, 279], "accept": [6, 44, 92, 94, 104, 109, 136, 138, 152, 155, 160, 165, 166, 172, 175, 182, 185, 194, 218, 220, 226, 234, 251, 261], "fortun": [6, 7, 12, 17, 92, 148, 149, 246], "foo": [6, 8, 175, 201, 215, 218, 260], "rand": [6, 7, 17, 89, 102, 143, 194, 195, 216, 221, 224, 227, 228, 234, 235, 242, 252, 261, 269, 271], "12": [6, 36, 76, 97, 101, 119, 132, 133, 154, 172, 174, 183, 194, 199, 211, 216, 234, 236, 246], "foo_a": 6, "trace": [6, 8, 11, 12, 18, 34, 46, 94, 101, 119, 131, 141, 154, 160, 166, 177, 182, 186, 189, 197, 210, 214, 229, 235, 265, 272, 273, 277], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 53, 154, 172, 174, 176, 210, 211, 226], "integ": [6, 7, 11, 44, 97, 102, 106, 108, 111, 138, 170, 189, 192, 199, 209, 222, 251], "fundament": [6, 53, 96, 99, 108, 111, 120, 131, 156, 166, 189, 190, 207, 228, 260], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 12, 20, 132, 189, 216], "packedaccessor32": 6, "variant": [6, 53, 97, 99, 101, 103, 136, 142, 171, 177, 190, 193, 195, 233], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 20, 60, 146, 155, 166, 171, 173, 187, 192, 199, 200, 211, 216], "host": [6, 22, 38, 58, 86, 98, 105, 132, 133, 136, 146, 148, 166, 168, 175, 176, 182, 230, 251, 261, 270], "reshap": [6, 7, 14, 23, 99, 102, 111, 112, 168, 172, 211, 221, 236], "pattern": [6, 20, 99, 101, 131, 136, 148, 154, 164, 175, 206, 208, 213, 216, 218, 230, 235], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "enabl": [6, 7, 11, 13, 16, 17, 19, 22, 23, 27, 36, 50, 59, 60, 86, 94, 102, 104, 116, 121, 132, 133, 135, 136, 138, 141, 142, 143, 146, 148, 154, 157, 166, 168, 170, 171, 172, 182, 183, 185, 186, 189, 190, 194, 198, 199, 206, 208, 210, 211, 214, 215, 222, 227, 228, 229, 234, 235, 242, 245, 251, 258, 265, 266, 270, 271, 272, 274, 275, 279, 280], "hassl": [6, 7], "entail": [6, 189], "simpler": [6, 112, 134, 136, 142, 152, 164, 220, 246], "hope": [6, 53, 156, 163, 187, 193, 234], "fastest": [6, 177, 271], "129": [6, 119, 172], "431": 6, "304": [6, 53], "641": [6, 157], "equip": [6, 143, 149, 206, 279], "faq": 6, "blog": [6, 132, 133, 139, 144, 193, 234, 244], "framework": [7, 12, 27, 38, 56, 94, 106, 107, 120, 130, 131, 166, 168, 174, 177, 185, 193, 197, 213, 222, 226, 236, 276], "sit": [7, 113, 114, 116, 117, 164], "atop": 7, "substanti": [7, 138, 166], "codebas": [7, 12, 16], "foundat": [7, 139, 172, 185, 190], "underli": [7, 11, 16, 43, 52, 64, 79, 102, 104, 121, 138, 150, 154, 165, 175, 189, 197, 208, 209, 211, 230, 261], "popular": [7, 72, 79, 104, 120, 138, 148, 149, 190, 193, 199, 210, 235, 236, 265, 276], "stochast": [7, 39, 50, 56, 69, 94, 97, 103, 112, 120, 148, 172, 173], "descent": [7, 39, 46, 50, 69, 94, 97, 103, 112, 120, 148, 190, 199, 264], "digit": [7, 50, 97, 112, 131, 132, 133, 185, 276], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 103, 144, 148], "lightn": [7, 138], "talk": [7, 11, 53, 56, 59, 97, 108, 166, 172, 175, 189, 190], "cppcon": 7, "2018": 7, "quick": [7, 20, 35, 52, 94, 104, 106, 109, 111, 131, 133, 146, 150, 155, 165, 190, 199, 216, 246, 249, 257, 265, 281], "humor": 7, "sweep": [7, 177], "philosophi": 7, "ecosystem": [7, 117, 141], "cppdoc": 7, "descript": [7, 54, 132, 133, 154, 172, 174, 175, 176, 177, 185, 189, 213, 246, 261, 276, 277], "embark": 7, "excit": [7, 153, 163], "journei": [7, 56], "team": [7, 117, 138, 173, 185, 193], "job": [7, 48, 56, 57, 58, 64, 86, 104, 135, 138, 144, 145, 146, 148, 168, 214], "latenc": [7, 20, 131, 136, 138, 145, 154, 166, 171, 187, 216, 234, 270, 271, 277, 279], "reinforc": [7, 16, 103, 131, 156, 174, 175, 179, 281], "game": [7, 47, 56, 156, 276], "tractabl": [7, 105], "multithread": [7, 46, 60, 119, 166, 242, 246, 279], "lock": [7, 8, 16, 60, 148, 166, 174, 175, 227], "gil": [7, 60, 146], "multiprocess": [7, 13, 16, 36, 40, 55, 57, 59, 60, 132, 133, 146, 148, 172, 175, 176, 197, 226, 227, 228, 277, 279, 280], "scalabl": [7, 131, 135, 138, 190, 206, 222, 234, 235, 261, 279], "shortcom": [7, 208], "constraint": [7, 14, 20, 22, 89, 106, 131, 136, 138, 164, 172, 185, 190, 195, 197, 216, 227, 245, 246, 258, 276], "neuroevolut": 7, "owner": [7, 174, 175, 176], "anyth": [7, 15, 18, 47, 76, 77, 97, 99, 102, 105, 108, 109, 111, 112, 120, 171, 193, 199, 242, 258, 259, 276], "serv": [7, 61, 64, 89, 97, 104, 109, 120, 131, 146, 153, 156, 169, 175, 176, 190, 198, 208, 226, 229, 233, 245, 246, 260, 270], "web": [7, 114, 242], "page": [7, 9, 12, 18, 54, 58, 64, 93, 112, 119, 120, 131, 139, 141, 166, 176, 182, 189, 190, 222, 227, 232, 235, 261, 274], "server": [7, 19, 130, 131, 135, 146, 169, 176, 194, 228, 235, 242, 270, 276, 279], "3d": [7, 64, 99, 101, 108, 109, 168, 185, 261], "graphic": [7, 177, 221], "photo": [7, 95], "softwar": [7, 169, 182, 197, 221], "remain": [7, 92, 94, 104, 134, 135, 148, 163, 166, 170, 178, 194, 195, 197, 199, 208, 211, 261], "forth": [7, 112], "retain": [7, 43, 52, 102, 121], "intuit": [7, 56, 79, 97, 102, 106, 121, 154, 178, 185, 189, 207, 242, 258], "tradit": [7, 56, 104, 106, 155, 175, 189, 190, 193, 197, 210], "experi": [7, 12, 104, 105, 133, 135, 148, 156, 166, 169, 172, 173, 177, 178, 180, 185, 187, 189, 190, 193, 199, 206, 214, 215, 220, 226, 229, 245, 260, 262, 270, 276, 277, 279], "compet": [7, 138, 166], "meant": [7, 9, 13, 89, 94, 99, 133, 190, 197, 208, 261], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 79, 133, 142, 166, 172, 173, 210, 230, 246], "core": [7, 11, 12, 13, 48, 105, 106, 107, 112, 120, 121, 131, 136, 148, 149, 154, 157, 166, 171, 182, 189, 197, 214, 242, 245, 260, 279], "principl": [7, 11, 109, 111, 138], "curiou": [7, 150, 163, 165, 225], "paragraph": 7, "tri": [7, 22, 56, 94, 105, 111, 173, 189, 221, 245, 276], "close": [7, 16, 20, 23, 56, 94, 99, 101, 102, 104, 105, 133, 138, 163, 183, 216, 259, 261], "experienc": [7, 89], "ask": [7, 20, 95, 97, 99, 140, 149, 166, 172, 189, 190, 215, 216, 246], "rememb": [7, 47, 56, 79, 109, 112, 119, 121, 155, 156, 163, 166, 178, 190, 193, 246], "dot": [7, 16, 34, 56, 109, 111, 131, 155, 178, 179, 195, 220, 246, 273, 281], "colon": [7, 185], "grab": [7, 9, 56, 101, 171, 176], "readi": [7, 12, 19, 53, 95, 97, 103, 105, 106, 111, 112, 131, 133, 148, 160, 168, 169, 172, 174, 175, 176, 190, 192, 251, 276], "cmake": [7, 221, 235], "websit": [7, 95, 173, 242, 244], "free": [7, 12, 23, 39, 46, 53, 79, 89, 104, 113, 114, 116, 117, 121, 133, 134, 138, 148, 153, 156, 157, 163, 166, 172, 174, 178, 182, 189, 260], "too": [7, 12, 16, 23, 47, 67, 72, 86, 92, 97, 99, 104, 105, 111, 112, 119, 120, 134, 136, 146, 163, 166, 170, 173, 174, 176, 178, 189, 206, 260, 274], "debug": [7, 11, 23, 64, 105, 131, 137, 173, 179, 189, 200, 214, 229, 246, 260, 270, 277, 281], "try": [7, 14, 16, 17, 20, 23, 39, 43, 47, 50, 52, 53, 56, 57, 64, 79, 94, 102, 103, 104, 105, 106, 107, 108, 112, 113, 114, 119, 135, 138, 139, 140, 141, 149, 154, 156, 160, 163, 166, 168, 169, 170, 172, 173, 178, 182, 186, 187, 189, 193, 195, 199, 207, 216, 234, 235, 245, 246, 258, 259, 276, 279], "support": [7, 13, 16, 17, 19, 20, 22, 23, 27, 34, 40, 50, 55, 60, 62, 63, 79, 87, 89, 94, 95, 96, 97, 98, 99, 102, 103, 104, 113, 114, 115, 116, 119, 131, 132, 133, 134, 135, 138, 143, 145, 146, 148, 149, 152, 154, 157, 164, 166, 168, 169, 170, 171, 172, 174, 175, 176, 182, 185, 187, 189, 192, 194, 197, 198, 201, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 221, 222, 223, 224, 225, 226, 228, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 246, 251, 261, 265, 270, 272, 275, 276, 277, 279], "cu90": 7, "url": [7, 23, 112, 182, 187, 190, 199, 259], "wget": [7, 22, 192, 199], "nightli": [7, 22, 152, 187, 192, 197, 199, 214, 220, 236, 276], "dep": 7, "latest": [7, 10, 12, 16, 92, 95, 120, 121, 131, 133, 141, 148, 159, 167, 171, 172, 175, 178, 180, 185, 187], "unzip": [7, 23, 54, 185, 192, 275], "tini": [7, 132, 163, 276], "ident": [7, 20, 59, 89, 94, 102, 103, 112, 120, 136, 145, 160, 183, 186, 189, 209, 216, 246], "ey": [7, 155, 166], "fledg": 7, "cmakelist": [7, 235], "cmake_minimum_requir": [7, 235], "fatal_error": [7, 235], "find_packag": [7, 235], "add_execut": [7, 235], "target_link_librari": [7, 235], "set_properti": [7, 235], "cxx_standard": [7, 235], "visual": [7, 16, 46, 56, 79, 86, 87, 97, 103, 131, 133, 137, 138, 143, 153, 172, 182, 185, 200, 201, 208, 229, 251, 259, 265], "studio": [7, 201], "qmake": 7, "makefil": 7, "feel": [7, 12, 23, 39, 46, 53, 104, 113, 114, 116, 117, 121, 133, 153, 154, 156, 157, 163, 182, 189], "comfort": 7, "box": [7, 11, 12, 13, 18, 20, 44, 79, 131, 134, 138, 141, 143, 148, 171, 174, 182, 189, 192, 193, 216, 220, 222, 235, 242, 244, 276], "cmake_prefix_path": 7, "invok": [7, 11, 104, 146, 148, 152, 153, 154, 166, 169, 175, 176, 200, 208, 222, 242, 258, 269, 273, 279], "agre": [7, 280], "break": [7, 8, 11, 12, 13, 18, 23, 35, 36, 86, 94, 99, 113, 121, 134, 135, 141, 163, 174, 176, 187, 195, 206, 275], "unexpect": [7, 55, 208, 261], "pwd": [7, 242], "fa350df05ecf": 7, "home": [7, 43, 52, 206, 221, 232], "mkdir": [7, 112, 182, 185], "cd": [7, 182, 192, 221, 242], "dcmake_prefix_path": [7, 235], "identif": [7, 235], "usr": [7, 22, 148, 235, 277], "bin": [7, 97, 148, 200, 235, 242, 275, 277], "cc": [7, 46, 221, 235, 277], "detect": [7, 13, 14, 22, 56, 99, 131, 171, 179, 182, 187, 189, 235, 248, 261, 274, 279, 281], "pthread_creat": [7, 235], "config": [7, 12, 20, 92, 132, 134, 138, 141, 171, 186, 194, 198, 199, 200, 210, 216, 235, 236, 258, 266, 270, 273, 276, 277], "scan": [7, 97, 99, 185, 189], "50": [7, 20, 23, 56, 57, 97, 112, 149, 157, 170, 172, 173, 176, 192, 213, 216, 234, 236, 261], "cmakefil": 7, "dir": [7, 86, 101, 138, 197, 260, 270], "100": [7, 23, 36, 52, 76, 101, 106, 120, 132, 135, 141, 146, 154, 155, 157, 171, 172, 173, 176, 183, 185, 210, 216, 230, 234, 236, 246, 260, 271], "folder": [7, 23, 54, 56, 86, 87, 95, 97, 133, 183, 192, 197, 221], "enter": [7, 53, 133, 146, 148], "ran": [7, 111, 135, 172, 175, 177, 246], "binari": [7, 53, 56, 102, 114, 148, 157, 187, 207, 214, 226, 235, 275], "me": [7, 20, 53, 163, 178, 216], "besid": [7, 97, 111, 164, 174, 236, 244, 261], "encapsul": [7, 39, 50, 99, 103, 141, 163, 174], "buffer": [7, 16, 47, 50, 121, 133, 134, 142, 146, 150, 152, 156, 160, 163, 164, 165, 166, 170, 173, 189, 195, 197, 198, 218, 221, 227, 250, 263, 264], "form": [7, 14, 17, 20, 44, 50, 53, 56, 64, 105, 112, 114, 137, 140, 154, 178, 185, 193, 199, 211, 216, 218, 227, 228, 242, 261, 271, 279], "record": [7, 11, 23, 34, 46, 53, 112, 121, 131, 132, 133, 141, 142, 143, 163, 172, 173, 175, 176, 189, 214, 236, 251, 276], "normal": [7, 11, 13, 14, 23, 39, 41, 44, 53, 55, 56, 89, 95, 97, 99, 101, 103, 104, 106, 111, 120, 121, 127, 132, 142, 148, 149, 164, 166, 171, 174, 175, 177, 178, 183, 185, 187, 190, 193, 199, 207, 235, 236, 261, 269, 274], "nest": [7, 16, 35, 46, 97, 102, 131, 134, 172, 174, 176, 177, 186, 214, 217, 281], "similarli": [7, 14, 55, 87, 95, 102, 134, 137, 138, 139, 154, 155, 163, 166, 168, 194, 198, 209, 228], "kcuda": [7, 200], "w": [7, 34, 39, 46, 50, 79, 109, 111, 133, 157, 176, 182, 189, 192, 199, 210], "register_paramet": [7, 218], "reflect": [7, 11, 43, 52, 97, 102, 172, 189], "magic": [7, 106, 140, 148, 155], "assign": [7, 44, 48, 50, 57, 95, 99, 102, 104, 105, 106, 109, 111, 113, 134, 148, 164, 172, 190, 230, 242, 258, 261, 279], "behind": [7, 11, 20, 48, 86, 104, 106, 112, 120, 142, 173, 194, 207, 209, 214, 216, 218], "scene": [7, 112, 120, 218, 276], "another_bia": 7, "recurs": [7, 19, 47, 134, 141, 187, 218, 259], "0808": 7, "8613": 7, "2017": [7, 79], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": 7, "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 185], "1230": 7, "0516": 7, "aptli": [7, 15], "register_modul": 7, "dropout": [7, 23, 41, 53, 79, 99, 101, 112, 121, 132, 136, 138, 140, 149, 174, 176, 178, 211, 216, 236], "conv2d": [7, 14, 23, 47, 50, 56, 97, 101, 112, 121, 132, 142, 171, 175, 183, 186, 189, 194, 213, 222, 235, 236, 242, 251, 252, 261], "subtleti": [7, 209], "bodi": [7, 154], "upon": [7, 21, 53, 60, 127, 148, 152, 178, 183, 187, 193, 197, 244, 261, 281], "tree": [7, 12, 17, 53, 105, 111, 142, 214, 229], "p": [7, 22, 23, 53, 72, 99, 105, 111, 112, 120, 132, 133, 142, 148, 157, 160, 163, 174, 175, 176, 186, 192, 216, 221, 222, 226, 277], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": 7, "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 172, 275], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": [7, 101], "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 13, 23, 36, 46, 50, 100, 101, 119, 148, 172, 176, 193, 201, 224, 234, 236, 275, 280, 281], "6861": 7, "1166": 7, "45": [7, 138, 154, 172, 176, 234], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 35, 190], "ordereddict": [7, 192], "13": [7, 76, 97, 119, 155, 172, 176, 179, 185, 193, 234, 242, 281], "48": [7, 20, 36, 154, 157, 172, 183, 216, 234, 251], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": 7, "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": 7, "8060": 7, "topic": [7, 53, 64, 79, 95, 102, 113, 114, 116, 117, 124, 130, 191, 219, 253, 254, 255, 256, 267], "devour": 7, "menu": [7, 54], "concept": [7, 13, 38, 39, 59, 98, 107, 108, 112, 120, 124, 131, 138, 156, 166, 174, 177, 178, 190, 197, 200, 210, 251, 260, 279], "pipelin": [7, 19, 64, 112, 131, 172, 185, 192, 197], "briefli": [7, 39, 64, 131, 136, 172, 187, 193, 222], "who": [7, 53, 79, 104, 107, 135, 148, 163, 189, 228, 242, 246, 271, 275], "heap": 7, "live": [7, 12, 17, 102, 131, 137, 166, 175, 176, 209], "referenc": [7, 176], "lower": [7, 16, 20, 54, 79, 86, 99, 101, 131, 133, 134, 135, 138, 146, 152, 154, 163, 164, 172, 173, 177, 183, 185, 189, 190, 193, 194, 209, 216, 260, 261, 276], "realm": 7, "heavili": [7, 166, 178, 199], "ergonom": 7, "shown": [7, 11, 20, 23, 56, 94, 102, 112, 134, 136, 138, 154, 156, 173, 174, 176, 177, 182, 185, 187, 190, 197, 207, 208, 209, 215, 216, 228, 234, 235, 242, 275, 276, 277, 279, 280], "far": [7, 16, 50, 53, 67, 94, 97, 99, 102, 104, 105, 106, 120, 137, 148, 163, 170, 173, 178, 189, 190, 193, 206, 246], "stack": [7, 11, 16, 17, 43, 52, 97, 119, 131, 136, 150, 155, 156, 160, 166, 169, 174, 178, 182, 183, 185, 190, 193, 197, 277], "shared_ptr": 7, "cognit": 7, "think": [7, 47, 56, 72, 95, 97, 105, 106, 108, 109, 111, 120, 155, 172, 175, 177, 190, 193, 209, 220], "everywher": [7, 102, 111], "make_shar": 7, "stai": [7, 86, 135, 136, 141, 172, 173, 174], "shorten": 7, "wait": [7, 19, 86, 135, 140, 146, 148, 149, 166, 169, 174, 175, 176, 182, 185, 190, 197, 227, 250, 251, 261, 277], "mymodul": [7, 218, 226], "hell": 7, "lot": [7, 11, 12, 17, 23, 55, 94, 105, 112, 132, 134, 148, 160, 175, 178, 182, 187, 190, 199, 206, 245, 246, 260], "came": [7, 56, 207], "scheme": [7, 22, 103, 104, 131, 190, 206, 213, 218, 250, 258], "hide": [7, 142, 172, 220], "reserv": [7, 12, 17, 182, 198], "simplifi": [7, 12, 16, 27, 112, 139, 146, 168, 178, 185, 192, 197, 206, 209, 213, 214, 230], "linearimpl": 7, "torch_modul": 7, "brief": [7, 27, 86, 94, 105, 172, 190, 193], "typedef": 7, "among": [7, 11, 57, 86, 92, 103, 136, 170, 182, 244, 279], "holder": 7, "arrow": [7, 46, 136], "resembl": [7, 14, 105, 144, 173], "extra": [7, 11, 60, 97, 102, 104, 108, 109, 112, 116, 134, 139, 140, 142, 149, 152, 164, 172, 178, 185, 187, 192, 235, 251, 260, 261], "netimpl": 7, "subtl": [7, 102, 245], "deserv": 7, "construct": [7, 16, 34, 50, 56, 69, 71, 89, 104, 120, 127, 131, 134, 140, 143, 149, 150, 155, 161, 165, 172, 173, 175, 178, 190, 192, 193, 211, 214, 218, 220, 234, 236, 245, 248, 263, 280], "tricki": [7, 20, 143, 186, 189, 190, 216], "nullptr": [7, 200], "familiar": [7, 11, 12, 38, 39, 43, 47, 52, 57, 58, 60, 89, 97, 98, 102, 103, 105, 107, 112, 121, 131, 133, 137, 144, 145, 148, 156, 168, 175, 189, 215, 242, 246, 260], "pythonista": 7, "disadvantag": [7, 121], "said": [7, 156, 163, 172, 173, 206, 207], "introduct": [7, 13, 18, 20, 49, 51, 57, 58, 59, 60, 61, 88, 89, 94, 99, 106, 107, 110, 113, 114, 115, 117, 131, 141, 144, 145, 154, 179, 193, 208, 216, 235, 246, 261, 265, 273, 276, 281], "sooner": [7, 133], "technic": [7, 148, 149, 163, 190, 206, 224, 225, 233], "henceforth": 7, "recap": [7, 50, 173, 209, 250], "adversari": [7, 47, 103, 122, 131, 281], "architectur": [7, 20, 35, 56, 60, 79, 89, 99, 104, 105, 131, 133, 136, 138, 144, 150, 160, 166, 168, 170, 177, 183, 185, 187, 193, 210, 213, 216, 235, 242, 245, 261], "repositori": [7, 12, 58, 87, 124, 133, 136, 148, 168, 169, 176, 177, 178, 192, 197, 221], "distinct": [7, 20, 56, 86, 102, 111, 133, 176, 183, 189, 190, 216, 276], "transform": [7, 14, 20, 21, 23, 27, 34, 35, 36, 37, 38, 39, 40, 41, 43, 47, 53, 56, 92, 94, 95, 97, 101, 102, 103, 119, 122, 130, 131, 132, 134, 148, 149, 150, 152, 154, 156, 160, 163, 164, 171, 175, 178, 179, 182, 183, 185, 186, 192, 195, 199, 211, 213, 216, 234, 235, 236, 246, 248, 258, 260, 261, 266, 269, 273, 276, 281], "probabl": [7, 11, 35, 53, 56, 95, 99, 102, 104, 105, 108, 111, 132, 137, 138, 140, 171, 173, 183, 185, 211, 234], "judg": 7, "closer": [7, 94, 104, 173], "feedback": [7, 23, 133, 153, 156, 157, 198, 214, 233], "authent": 7, "theori": [7, 53, 56, 94, 104, 137, 166], "delic": 7, "tandem": [7, 272], "indistinguish": 7, "fool": [7, 53, 79], "excel": [7, 55, 183, 227], "realist": [7, 193, 211], "2d": [7, 35, 56, 99, 112, 134, 139, 174, 185, 186, 190, 230], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 50, 99, 101, 112, 121, 132, 165, 170, 175, 183, 236, 252], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 50, 99, 101, 112, 121, 132, 175, 183, 236, 252], "pad": [7, 23, 53, 99, 112, 142, 177, 193, 208, 211, 216, 252, 261], "batch_norm2": 7, "conv3": [7, 112], "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 23, 56, 112, 142, 194, 261], "dcgangener": 7, "chosen": [7, 95, 99, 135, 173, 187, 245, 246, 276], "cours": [7, 16, 20, 23, 57, 94, 95, 102, 104, 107, 108, 111, 112, 137, 148, 183, 216, 242], "student": [7, 104], "harm": [7, 104], "discoveri": [7, 189], "fed": [7, 14, 40, 53, 56, 185, 190], "soylent": 7, "regularli": [7, 57], "channel": [7, 12, 14, 23, 46, 47, 50, 56, 95, 97, 99, 102, 104, 112, 131, 136, 170, 179, 183, 186, 192, 226, 235, 248, 261, 281], "moduleopt": 7, "linearopt": 7, "leaki": [7, 56], "squash": [7, 149, 156], "sequenti": [7, 14, 23, 53, 72, 99, 111, 120, 149, 164, 172, 186, 211, 218, 220, 224, 234, 261, 279, 280], "orient": [7, 180], "layer": [7, 11, 12, 13, 14, 15, 17, 19, 20, 23, 34, 40, 41, 46, 50, 53, 56, 59, 64, 72, 79, 92, 94, 97, 101, 102, 103, 104, 106, 112, 120, 121, 127, 131, 132, 133, 134, 138, 139, 140, 141, 149, 157, 164, 168, 170, 171, 172, 175, 176, 178, 180, 189, 190, 192, 195, 199, 210, 213, 216, 224, 225, 226, 229, 233, 234, 244, 245, 248, 250, 252, 258, 262, 263, 266], "conv2dopt": 7, "leakyrelu": [7, 56], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 69, 120, 143], "knob": [7, 279], "sampler": [7, 23, 36, 59, 103, 132, 133, 172, 180], "collat": [7, 55], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 13, 22, 53, 56, 57, 59, 64, 132, 146, 148, 174, 175, 176, 197, 226, 227, 228, 280], "concurr": [7, 119, 136, 138, 166, 195, 227, 261, 279], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 183, 185], "label": [7, 36, 39, 40, 44, 46, 47, 55, 56, 79, 92, 94, 95, 97, 101, 102, 103, 106, 111, 119, 127, 133, 136, 139, 146, 166, 171, 174, 178, 183, 190, 192, 216, 236, 242, 246, 248, 251, 265, 276, 280], "field": [7, 12, 13, 16, 17, 35, 53, 99, 109, 111, 148, 163, 172, 174, 182, 189, 192, 197, 208], "rebuild": [7, 246], "danc": [7, 14], "generator_optim": 7, "adamopt": 7, "2e": [7, 94], "beta": [7, 21, 131, 179, 209, 265, 268, 281], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 103, 120, 209, 214, 217, 281], "lbfg": [7, 14], "rmsprop": [7, 39, 50, 73, 106, 120], "sgd": [7, 23, 39, 46, 47, 50, 71, 73, 92, 101, 103, 106, 112, 120, 121, 146, 148, 174, 175, 176, 180, 183, 235, 236, 263, 264, 269], "exhaust": [7, 13, 189], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 245], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 8, 182], "g_loss": 7, "printf": 7, "r": [7, 13, 16, 23, 39, 46, 50, 79, 89, 105, 131, 154, 155, 156, 157, 160, 173, 174, 176, 185, 192, 220, 235, 246, 261, 279], "2ld": 7, "3ld": 7, "4f": [7, 132, 133, 155, 172], "batches_per_epoch": 7, "evalu": [7, 14, 20, 23, 27, 39, 41, 79, 94, 95, 101, 104, 114, 121, 141, 155, 160, 168, 172, 173, 175, 183, 187, 189, 192, 216, 236, 276], "uniformli": [7, 92, 173, 261], "robust": [7, 53, 57, 58, 79, 102, 135, 173, 234], "smooth": [7, 104, 113, 185], "propag": [7, 12, 19, 34, 39, 46, 48, 50, 56, 104, 108, 109, 112, 143, 152, 157, 172, 261], "repeat": [7, 16, 22, 23, 94, 139, 140, 172, 182, 189, 195, 206, 226, 251, 260, 266, 277], "spiel": 7, "ideal": [7, 16, 36, 94, 97, 102, 104, 166, 178, 189, 222, 271], "progress": [7, 11, 17, 27, 56, 57, 101, 103, 149, 178, 183, 197, 210, 228], "yet": [7, 12, 13, 22, 54, 79, 94, 97, 102, 116, 117, 141, 148, 166, 175, 178, 190, 194, 211, 228, 235, 276], "moment": [7, 13, 194, 209, 221], "observ": [7, 16, 23, 50, 55, 86, 103, 127, 132, 133, 138, 141, 149, 156, 157, 163, 166, 172, 173, 174, 176, 177, 178, 187, 193, 194, 209, 213, 224, 234, 245, 246, 252, 258, 265, 266, 277, 280], "meaning": [7, 53, 104, 157, 197], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 133, 176, 234, 246, 260], "3652": 7, "6626": 7, "400": [7, 50, 121, 246, 252, 260, 276], "8057": 7, "2795": [7, 246], "3531": 7, "4452": 7, "600": [7, 157, 173], "3501": 7, "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 38, 47, 86, 104, 105, 106, 111, 112, 120, 136, 163, 173, 178, 197, 236], "onto": [7, 11, 16, 19, 22, 47, 99, 101, 102, 131, 149, 163, 175, 176, 190, 197, 218, 261], "somewher": [7, 99, 105, 106, 121], "kcpu": [7, 200, 221], "last": [7, 13, 16, 23, 35, 46, 53, 56, 57, 79, 87, 89, 92, 97, 99, 102, 103, 106, 109, 114, 127, 131, 136, 137, 140, 148, 149, 154, 163, 172, 173, 174, 176, 177, 178, 179, 183, 189, 192, 206, 209, 211, 213, 235, 245, 261, 265, 276, 281], "whose": [7, 86, 89, 94, 95, 104, 111, 133, 137, 157, 166, 185, 244, 246], "insert": [7, 14, 20, 23, 99, 176, 189, 194, 213, 216], "explicit": [7, 8, 131, 134, 157, 166, 176, 189, 193, 207, 215, 242, 245, 265, 268, 273, 281], "suppli": [7, 108, 157, 171], "op": [7, 8, 12, 13, 17, 52, 86, 117, 131, 132, 133, 134, 136, 141, 142, 146, 148, 154, 157, 171, 182, 193, 194, 199, 200, 207, 208, 210, 211, 218, 222, 226, 233, 236, 245, 250, 265, 277], "previou": [7, 13, 16, 17, 19, 20, 39, 53, 57, 59, 102, 103, 104, 112, 117, 127, 133, 134, 135, 139, 140, 143, 144, 145, 149, 156, 163, 166, 168, 170, 172, 173, 174, 176, 177, 178, 182, 183, 185, 187, 189, 190, 216, 222, 246, 252, 261, 276], "resid": [7, 104, 166], "downstream": [7, 185], "portabl": [7, 271], "augment": [7, 27, 55, 112, 127, 131, 180, 189, 192], "period": [7, 53, 56, 135, 138, 156, 182, 197], "middl": 7, "procedur": [7, 50, 130, 173, 180], "restor": [7, 79, 121, 146, 157, 263], "session": [7, 104, 114], "essenti": [7, 12, 16, 18, 34, 53, 105, 106, 108, 131, 141, 148, 161, 166, 173, 189, 213, 218, 236, 279], "deseri": [7, 121], "filenam": [7, 112, 119, 185, 197, 245, 277], "interv": [7, 16, 94, 138, 176], "kcheckpointeveri": 7, "pt": [7, 57, 121, 132, 133, 134, 221, 235, 236, 271], "str": [7, 8, 22, 23, 87, 133, 168, 172, 175, 185, 189, 279], "checkpoint_count": 7, "counter": [7, 13, 53, 56, 141, 148, 186, 273], "bump": 7, "beta1": [7, 56], "krestorefromcheckpoint": 7, "intermediari": [7, 137], "xxx": [7, 17, 55], "matplotlib": [7, 14, 36, 56, 61, 94, 95, 97, 101, 112, 172, 173, 178, 183, 185], "argpars": [7, 132, 133, 174, 175, 176], "pyplot": [7, 14, 36, 101, 112, 172, 183, 185], "plt": [7, 14, 36, 101, 172, 178, 183, 185], "parser": [7, 105, 132, 133, 174, 175, 176], "argumentpars": [7, 132, 133, 174, 175, 176], "add_argu": [7, 132, 133, 174, 175, 176], "png": [7, 55, 131, 192], "parse_arg": [7, 132, 133, 174, 175, 176], "jit": [7, 8, 11, 17, 23, 89, 187, 221, 222, 235, 246, 251, 266, 273, 275, 276, 277], "sample_fil": 7, "mul": [7, 141, 154, 189, 221, 246, 260], "uint8": [7, 192], "numpi": [7, 14, 18, 21, 23, 44, 47, 55, 61, 75, 77, 78, 94, 101, 112, 114, 119, 131, 143, 171, 176, 183, 185, 187, 206, 211, 214, 216, 244, 260, 276, 281], "axi": [7, 36, 86, 108, 109, 139, 166, 170, 185], "subplot": [7, 172], "imshow": [7, 14, 36, 101, 112, 183, 185], "cmap": [7, 36, 101, 112, 183], "grai": [7, 36, 112, 156], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "17": [7, 36, 97, 101, 119, 154, 172, 189, 234, 246], "57": [7, 20, 119, 154, 172, 251], "4953": 7, "0195": 7, "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 50, 101, 121, 127, 176, 183, 251, 252], "8084": 7, "hoorai": 7, "ball": 7, "court": 7, "hopefulli": [7, 54, 55, 79, 89, 106, 121, 262], "digest": [7, 260], "necess": [7, 53, 101], "broad": [7, 61, 95, 103], "did": [7, 11, 18, 23, 47, 56, 94, 97, 99, 102, 114, 135, 148, 152, 164, 172, 175, 178, 190, 197, 246], "space": [7, 16, 53, 56, 79, 94, 95, 99, 104, 105, 109, 111, 138, 149, 156, 163, 166, 172, 173, 176, 178, 182, 183, 185, 190, 193, 198], "consult": [7, 163, 244], "stuck": [7, 214], "whenev": [7, 57, 71, 102, 105, 106, 222, 264], "rate": [7, 39, 46, 56, 92, 97, 99, 103, 104, 106, 112, 127, 132, 133, 138, 139, 156, 172, 173, 175, 190, 192, 197, 259, 261], "statu": [8, 27, 135, 138, 141, 176, 189, 275], "subject": [8, 13, 16, 132, 152, 178, 189, 210, 211, 213, 220, 221, 222, 226, 233, 246, 275], "snapshot": [8, 131, 144, 189], "__obj_flatten__": 8, "guard": [8, 11, 146, 225, 277], "tupl": [8, 36, 43, 52, 86, 97, 99, 102, 104, 109, 111, 114, 173, 189, 192, 195, 209, 260], "attribute_nam": 8, "_librari": 8, "register_fake_class": 8, "addition": [8, 13, 14, 39, 86, 137, 138, 146, 166, 189, 192, 197, 215, 227, 228, 270, 279], "__obj_unflatten__": 8, "classmethod": 8, "flatten": [8, 50, 72, 104, 112, 120, 132, 136, 175, 189, 211, 234, 252], "breakdown": [8, 182], "diff": [8, 57, 59, 86, 131, 246, 260], "queue": [8, 242, 261], "custom_class": 8, "tensorqueu": 8, "customclasshold": 8, "init_tensor_": 8, "c10": [8, 11, 12, 17, 169, 200, 210, 234, 235, 246, 260], "dict": [8, 22, 53, 55, 163, 172, 189, 192, 227, 228, 233, 245, 250], "init_tensor": 8, "size_tensor": 8, "size_tensor_acc": 8, "const_data_ptr": 8, "queue_siz": 8, "irang": 8, "val": [8, 20, 23, 133, 171, 216], "queue_": 8, "to_str": 8, "push_back": [8, 235], "push": [8, 56, 79, 99, 104, 155, 199, 220], "rear": 8, "lock_guard": 8, "mutex": 8, "mutex_": 8, "pop": [8, 99, 216], "front": [8, 150, 170, 189], "pop_front": 8, "get_raw_queu": 8, "raw_queu": 8, "privat": [8, 16, 17, 135, 169, 170, 206], "dequ": 8, "mycustomclass": 8, "class_": 8, "init": [8, 23, 135, 172, 215, 218, 277], "clone": [8, 13, 58, 102, 139, 143, 144, 148, 154, 155, 157, 168, 195, 276], "2a": 8, "class_nam": [8, 127, 185], "faketensorqueu": 8, "2b": [8, 46], "cl": [8, 14, 201], "flattened_tq": 8, "libcustom_class": 8, "tq": 8, "mod": [8, 187, 189, 276], "sin": [8, 16, 18, 66, 67, 71, 72, 73, 76, 77, 94, 102, 120, 155, 201, 261, 271], "co": [8, 94, 111, 201, 251, 261], "poped_t": 8, "allclos": [8, 154, 155, 195, 216], "eager": [8, 12, 89, 91, 141, 154, 157, 177, 187, 189, 193, 213, 224, 233, 236, 261, 274, 276], "fullgraph": [8, 18, 141, 187, 224, 273], "exported_program": [8, 121, 276], "strict": [8, 121, 185, 207, 235, 262], "for_each_add_": 8, "inc": 8, "add_": [8, 102, 189, 206, 221], "torch_library_frag": 8, "__torch__": 8, "intrusive_ptr": [8, 169, 246, 260], "fake_for_each_add_": 8, "foreachadd": 8, "scriptobject": 8, "empty_tensor_queu": 8, "qlen": 8, "ep": [8, 142, 176, 189, 194, 206, 216, 276], "downsid": [8, 152, 166], "consum": [8, 116, 119, 137, 154, 166, 172, 174, 176, 177, 251, 261], "difficult": [8, 105, 155, 164, 178, 190, 208, 220, 233], "parti": [8, 11, 18, 134, 135, 169], "fakif": 8, "tracing_mod": 8, "alias": [8, 11, 12, 189], "torchbind": 8, "vmap": [9, 11, 131, 152, 155, 160, 165, 214, 217, 281], "oppos": [9, 53, 56, 127, 148, 155, 160, 175, 246], "treat": [9, 18, 94, 111, 165, 174, 187, 189, 190], "opaqu": [9, 18, 260, 273], "callabl": [9, 18, 44, 55, 112, 182, 187, 189, 244, 273], "aotinductor": [9, 189, 265, 273, 276], "toe": 9, "registr": [9, 11, 12, 17, 18, 235, 236, 242], "doesn": [9, 11, 12, 15, 18, 20, 64, 106, 108, 111, 112, 137, 155, 157, 166, 170, 185, 187, 189, 194, 199, 206, 216, 220, 224, 225, 233, 260, 261, 272, 276, 277, 279], "pybind": 9, "ed": [9, 275], "respons": [11, 13, 19, 22, 53, 94, 95, 103, 112, 131, 136, 142, 146, 148, 174, 175, 178, 187, 189, 224, 226, 244], "nontrivi": 11, "cross": [11, 15, 47, 56, 97, 99, 103, 136, 138, 261, 264, 279], "cut": [11, 168, 189], "concern": [11, 106, 190, 206, 236], "rule": [11, 34, 46, 50, 94, 102, 109, 137, 150, 155, 164, 165, 172, 173, 189, 245], "convers": [11, 53, 94, 102, 157, 178, 206, 233, 258], "highest": [11, 23, 47, 53, 101, 135, 140, 173, 185, 187, 261], "prioriti": [11, 135], "transfer": [11, 21, 47, 55, 104, 112, 121, 122, 131, 148, 166, 171, 175, 182, 192, 198, 221, 247, 262, 281], "redispatch": 11, "unlik": [11, 14, 20, 95, 102, 104, 120, 137, 152, 157, 178, 186, 189, 215, 216, 273, 279], "style": [11, 136, 168, 189, 192, 228], "abid": [11, 56], "myop": 11, "myadd": [11, 12], "myadd_cpu": 11, "self_": 11, "other_": 11, "self_ptr": 11, "other_ptr": 11, "catch": [11, 13, 187, 189, 235, 274], "myadd_cuda": 11, "boundari": [11, 134, 172, 270], "myops_cpu": 11, "myops_cuda": 11, "subdivid": 11, "xla": [11, 12, 17, 258], "torch_xla": [11, 12], "useabl": 11, "behav": [11, 18, 102, 112, 157, 164, 174, 242], "autogradnotimplementedfallback": 11, "notimpl": 11, "node": [11, 22, 34, 46, 50, 57, 58, 59, 60, 64, 66, 94, 101, 105, 117, 120, 130, 133, 134, 135, 139, 141, 144, 145, 146, 153, 154, 175, 178, 189, 195, 200, 213, 230, 261, 277, 279], "preserv": [11, 20, 102, 131, 134, 157, 170, 207, 213, 216, 258, 263], "require_grad": 11, "ness": 11, "pin": [11, 103, 137, 166, 261], "lost": [11, 20, 216], "adinplaceorview": [11, 277], "bookkeep": [11, 246], "autogradnotimplementedinplaceorviewfallback": 11, "logi": 11, "annot": [11, 12, 22, 36, 55, 106, 117, 185, 187, 189, 246], "guess": [11, 39, 46, 53, 56, 139, 178], "twist": 11, "constitut": [11, 16], "hood": [11, 23, 53, 56, 58, 60, 64, 120, 136, 137, 155, 156, 166, 176, 209, 226, 229], "singleton": [11, 175], "findschemaorthrow": 11, "decltyp": 11, "qualifi": [11, 228], "overload": 11, "typic": [11, 13, 16, 23, 36, 46, 50, 52, 58, 59, 86, 97, 105, 106, 111, 134, 136, 138, 142, 144, 154, 163, 166, 172, 175, 185, 187, 189, 190, 233, 234, 235, 236, 245, 247, 261, 266, 276, 279], "cast": [11, 20, 22, 77, 119, 133, 134, 166, 189, 216, 245], "lookup": [11, 19, 111, 141, 176], "typo": 11, "myaddfunct": [11, 12], "autononvariabletypemod": [11, 12], "myadd_autograd": [11, 12], "except": [11, 13, 20, 43, 46, 52, 53, 56, 95, 99, 102, 106, 109, 112, 113, 127, 134, 135, 139, 150, 152, 155, 157, 165, 169, 178, 189, 198, 211, 214, 216, 218, 220, 221, 235, 252, 270, 276], "raii": 11, "infinit": 11, "overflow": [11, 53, 199, 245], "send": [11, 12, 13, 14, 47, 48, 64, 92, 148, 156, 166, 168, 169, 174, 175, 176, 190, 226, 251], "exclud": [11, 46, 134, 187, 213, 251], "consider": [11, 12, 132, 189, 190, 276], "handler": [11, 185, 258, 277], "autogradcpu": 11, "autogradcuda": [11, 277], "pythondispatch": 11, "_python_dispatch": 11, "isn": [11, 94, 105, 152, 166, 171, 183, 189, 190, 208, 246, 248, 262, 263], "glorifi": 11, "add_cpu": 11, "add_cuda": 11, "unsupport": [11, 113, 117, 131, 187, 189, 276], "decentr": 11, "importantli": [11, 23, 143, 163, 166, 206, 246], "aspect": [11, 17, 79, 148, 192, 246], "patch": [11, 12, 173], "dispatchkei": [11, 12], "varieti": [11, 27, 35, 53, 94, 95, 99, 103, 112, 121, 140, 166, 193, 209, 279], "fallback": [11, 12, 17, 113, 193], "opt": [11, 112, 138, 157, 169, 175, 176, 182, 199, 218, 224, 277], "amp": [11, 17, 64, 134, 157, 210, 222, 235, 265, 269], "incom": [11, 97, 182], "float16": [11, 17, 133, 157, 222, 245], "float32": [11, 16, 133, 134, 171, 172, 176, 195, 200, 210, 245, 258, 277], "matmul": [11, 136, 154, 189, 199, 211, 216, 220, 222, 234, 245], "impair": 11, "converg": [11, 39, 53, 56, 67, 103, 104, 120, 121, 136, 148, 164, 173, 178, 225, 245, 262, 265], "hypothet": 11, "autocast_mod": 11, "mymatmul_autocast": 11, "excludedispatchkeyguard": 11, "no_autocast": 11, "mymatmul": 11, "cached_cast": 11, "khalf": 11, "elig": [11, 261], "polici": [11, 17, 131, 132, 134, 156, 173, 174, 176, 179, 279, 281], "mixtur": [11, 233], "meanwhil": [11, 137, 154, 207, 235], "float64": 11, "unaffect": [11, 104], "forc": [11, 16, 20, 53, 99, 131, 178, 187, 193, 206, 208, 216, 245, 261, 270], "fallthrough": 11, "occur": [11, 13, 18, 23, 57, 86, 104, 154, 157, 166, 174, 175, 182, 185, 189, 190, 197, 199, 229, 251, 272], "fall": [11, 17, 95, 164, 173, 274], "unfortun": [11, 120, 148, 189], "aren": [11, 143, 149, 189, 190, 208, 261, 264], "dri": [11, 182], "guidanc": [11, 135, 245, 279], "reduct": [11, 102, 132, 133, 134, 137, 142, 163, 169, 182, 185, 193, 206, 208, 214, 245, 261], "gemm": [11, 154, 210, 234], "unless": [11, 43, 52, 102, 106, 113, 172, 189, 199, 220, 250], "categori": [11, 12, 23, 79, 86, 95, 102, 127, 139, 140, 182, 189], "promote_typ": 11, "widest": 11, "safest": 11, "my_multiple_input_op_autocast": 11, "t0": [11, 133, 224, 246], "t1": [11, 246], "optimist": 11, "exec_typ": 11, "my_multiple_input_op": 11, "myadd_autocast": 11, "gymnast": 11, "suitabl": [11, 44, 144, 148, 185, 260], "invoc": [11, 153, 174, 242, 266, 272], "stabil": [11, 104, 173], "41478": 11, "repo": [12, 17, 22, 23, 58, 86, 131, 144, 148, 166, 174, 175, 190, 198, 199, 236], "mainten": [12, 185], "solut": [12, 20, 56, 113, 121, 131, 154, 165, 166, 185, 187, 190, 208, 211, 216, 229, 246, 261, 265, 271], "pr": [12, 183, 193, 235, 260], "propos": [12, 27, 136, 149, 164, 206, 208, 229], "request": [12, 34, 46, 92, 102, 112, 133, 164, 171, 174, 175, 200, 208, 209, 210, 215, 226, 227], "hardwar": [12, 17, 20, 43, 52, 54, 102, 104, 114, 139, 148, 150, 155, 157, 165, 166, 169, 170, 190, 193, 199, 216, 222, 234, 235, 236, 247, 261, 269, 273, 276], "googl": [12, 20, 27, 38, 53, 56, 101, 112, 131, 148, 149, 172, 173, 182, 190, 279], "tpu": [12, 169, 264], "chip": 12, "layout": [12, 20, 136, 193, 206, 209, 211, 214, 216, 230, 261], "spars": [12, 19, 99, 106, 111, 131, 149, 170, 190, 193, 208, 214, 217, 258, 281], "quantiz": [12, 104, 127, 131, 163, 217, 222, 249, 258, 265, 281], "enforc": [12, 16, 138, 164, 206, 207], "mainli": [12, 16, 17, 22, 154, 182, 187, 213, 236, 275], "haven": [12, 92, 94, 97, 102, 105, 109, 111, 150, 153, 165], "identifi": [12, 20, 36, 57, 59, 79, 86, 87, 95, 112, 119, 145, 156, 157, 161, 170, 175, 189, 192, 197, 209, 216, 229, 276], "carri": [12, 16, 53, 56, 94, 102, 104, 108, 144, 149, 157, 178, 250], "privateuse1": [12, 131, 215], "autogradprivateuse1": [12, 17], "privateuse2": [12, 17], "autogradprivateuse2": [12, 17], "privateuse3": [12, 17], "autogradprivateuse3": [12, 17], "tensorimpl": [12, 17, 246, 260], "storag": [12, 17, 18, 103, 108, 121, 137, 149, 150, 157, 166, 172, 182, 197, 206, 208, 209, 214, 217, 218, 227, 228, 245, 250, 258, 281], "dispatchkeyset": [12, 17, 277], "k": [12, 14, 23, 86, 95, 105, 136, 174, 175, 177, 197, 210, 216], "caffe2": [12, 89], "typemeta": 12, "data_typ": [12, 108], "opaquetensorimpl": 12, "tweak": [12, 53, 264], "overrid": [12, 17, 55, 97, 106, 135, 153, 157, 169, 185, 265, 272], "vulkan": [12, 214], "submit": [12, 235], "src": [12, 13, 117, 148, 169, 221, 260], "registrationdeclar": 12, "snippet": [12, 132, 133, 135, 141, 148, 154, 169, 177, 195, 198, 206, 210, 215, 230, 245, 250, 261, 265], "ab": [12, 187, 211, 222, 251], "abs_": 12, "abs_out": 12, "absolute_": 12, "absolute_out": 12, "angl": [12, 16, 111], "angle_out": 12, "sgn": 12, "uniqu": [12, 20, 53, 57, 59, 105, 106, 107, 109, 111, 133, 145, 175, 178, 190, 192, 206, 216, 276], "boolean": [12, 149, 189], "impli": [12, 104, 109, 189, 227, 250, 260, 273], "schema_my_op1": 12, "my_op1": 12, "schema_my_op2": 12, "my_op2": 12, "schema_my_op2_backward": 12, "my_op2_backward": 12, "zoom": [12, 86, 101, 138, 182, 185], "1600": [12, 246, 260], "grow": [12, 53, 106, 135, 137, 144, 227], "unrealist": 12, "classifi": [12, 14, 23, 27, 35, 46, 49, 50, 51, 56, 61, 79, 86, 92, 97, 99, 104, 121, 127, 131, 134, 140, 156, 161, 178, 179, 192, 193, 244, 265, 276, 281], "accompani": 12, "comment": [12, 148, 163, 178, 206, 220, 235, 236, 247], "sacrif": [12, 170], "max_pool2d": [12, 50, 132, 175, 221, 236, 251], "worri": [12, 56, 106, 143, 146, 163, 176, 230], "my_op": 12, "squeez": [12, 16, 36, 102, 183, 199], "max": [12, 13, 23, 53, 56, 86, 99, 112, 132, 138, 148, 172, 183, 185, 189, 193, 199, 211, 214, 216, 261, 276, 279, 280], "op_backward": 12, "proper": [12, 34, 133, 136, 146, 157, 172, 176, 185, 190, 206, 261], "rare": [12, 17, 53, 127, 166, 178, 261], "assumpt": [12, 16, 79, 104, 111, 112, 160, 166], "myadd_schema": 12, "train": [12, 14, 19, 20, 22, 34, 38, 39, 40, 44, 46, 49, 50, 51, 55, 58, 60, 61, 64, 66, 67, 69, 71, 72, 73, 76, 77, 79, 86, 89, 95, 96, 98, 99, 102, 104, 105, 107, 109, 111, 112, 114, 120, 131, 132, 134, 135, 138, 141, 142, 146, 157, 158, 160, 161, 164, 165, 168, 169, 171, 174, 175, 176, 177, 179, 182, 185, 186, 187, 189, 192, 195, 197, 198, 208, 216, 222, 224, 225, 227, 228, 229, 230, 245, 248, 251, 259, 262, 263, 265, 266, 276, 280, 281], "my_add": 12, "_xlac": 12, "torch_xla_sourc": 12, "library_dir": 12, "extra_link_arg": 12, "make_relative_rpath": 12, "seamlessli": [12, 16, 57, 136, 190, 193, 246, 271], "nm": [12, 235], "torchvsion": 12, "torchvis": [12, 14, 23, 36, 38, 40, 44, 46, 47, 54, 61, 92, 95, 97, 98, 101, 103, 104, 127, 131, 132, 133, 153, 163, 171, 174, 175, 179, 182, 183, 185, 187, 199, 213, 221, 235, 236, 251, 259, 261, 264, 269, 275, 276, 281], "adhoc": 12, "unbox": 12, "potenti": [12, 16, 79, 94, 105, 133, 135, 141, 166, 175, 187, 189, 192, 197, 213, 214, 271, 273], "wiki": [12, 152, 157], "suit": [12, 95, 119, 172, 210, 234], "ship": [12, 47, 97], "delet": [12, 87, 137, 146, 163, 168, 176, 185, 199], "old": [12, 23, 121, 134, 135, 170, 182, 211], "until": [12, 53, 86, 94, 133, 135, 139, 140, 148, 149, 154, 163, 166, 172, 174, 175, 176, 182, 195, 206, 226, 246], "interrupt": [12, 57, 92, 178], "quarterli": 12, "cadenc": 12, "join": [12, 22, 36, 43, 52, 53, 54, 57, 130, 132, 139, 146, 148, 172, 174, 175, 176, 197, 226, 227, 228, 246, 280], "announc": 12, "slack": [12, 47], "com": [12, 22, 23, 27, 53, 112, 117, 132, 139, 140, 142, 152, 153, 157, 165, 178, 185, 186, 192, 194, 199, 220, 221, 244, 246, 276], "Not": [12, 146, 171, 280], "search": [12, 22, 53, 131, 138, 154, 170, 189, 199, 279], "instantiate_device_type_test": 12, "testtorchdevicetyp": 12, "testviewop": 12, "testtensordeviceop": 12, "testtypepromot": 12, "__reduce_ex__": 12, "monkei": 12, "direct": [12, 34, 46, 50, 56, 79, 94, 95, 97, 103, 111, 138, 148, 152, 156, 160, 164, 178, 198, 199, 209, 227, 265, 274], "suppos": [12, 104, 105, 106, 111, 132, 187, 192, 194, 215, 235], "vice": [12, 43, 52], "versa": [12, 43, 52], "Such": [12, 13, 94], "seamless": [12, 190, 214, 229], "coverag": [12, 152, 155, 157, 211, 213, 245], "comprehens": [12, 27, 43, 52, 95, 117, 154, 189, 233, 260, 261], "refactor": [12, 121, 144], "codegen": [12, 154, 277], "dev": [12, 106, 141, 171, 182, 185, 187, 214, 242, 245], "andrew": [13, 194], "gu": 13, "shard": [13, 130, 131, 144, 195, 226, 228, 229, 230, 265], "saw": [13, 16, 39, 53, 97, 99, 102, 106, 108, 152, 155, 156], "skeleton": [13, 16, 258], "implicitli": [13, 46, 53, 94, 132, 143, 177, 189, 242], "schedul": [13, 86, 92, 103, 127, 132, 133, 134, 146, 168, 172, 173, 182, 192, 251, 261, 265, 268, 279, 281], "rank": [13, 19, 22, 48, 57, 59, 86, 131, 132, 133, 134, 135, 146, 148, 168, 169, 174, 175, 176, 190, 195, 197, 211, 226, 227, 228, 230, 279, 280], "commun": [13, 17, 22, 59, 131, 132, 133, 134, 136, 138, 144, 145, 146, 168, 169, 172, 174, 175, 176, 182, 185, 189, 190, 195, 197, 201, 214, 229, 230, 261, 265], "particip": [13, 99, 145, 175, 245, 261], "hang": [13, 59, 140], "persist": [13, 41, 227, 245], "facilit": [13, 16, 53, 95, 102, 104, 121, 131, 134, 136, 149, 211, 215, 261], "earli": [13, 56, 92, 146, 148, 166, 194, 208, 233], "shadow": 13, "hook": [13, 134, 136, 141, 146, 170, 179, 252, 277, 281], "mp": [13, 17, 35, 40, 43, 57, 59, 66, 79, 102, 120, 127, 131, 132, 133, 146, 148, 174, 175, 176, 226, 227, 228, 280], "ddp": [13, 19, 57, 58, 64, 131, 132, 133, 134, 136, 145, 182, 230, 280], "nccl": [13, 22, 57, 59, 86, 132, 133, 135, 136, 146, 148, 182, 190, 195, 197, 228, 230], "world_siz": [13, 19, 22, 57, 59, 132, 133, 135, 146, 148, 168, 169, 174, 175, 176, 195, 197, 226, 227, 228, 230, 280], "num_input": 13, "master_addr": [13, 22, 57, 59, 132, 135, 146, 148, 169, 174, 175, 176, 197, 226, 227, 228, 280], "localhost": [13, 22, 57, 59, 101, 132, 135, 146, 169, 174, 175, 176, 182, 183, 190, 226, 227, 228, 230, 259, 270, 280], "master_port": [13, 22, 57, 59, 132, 135, 146, 148, 169, 174, 175, 176, 197, 226, 227, 228, 280], "29500": [13, 22, 148, 169, 174, 175, 176, 226, 280], "init_process_group": [13, 19, 22, 57, 59, 132, 133, 135, 146, 148, 168, 169, 195, 197, 227, 228, 230, 280], "device_id": [13, 59, 121, 133, 134, 146, 280], "nproc": [13, 57, 59, 132, 146, 174, 176, 195, 226, 227, 228, 280], "__name__": [13, 55, 57, 59, 132, 133, 135, 146, 148, 168, 174, 175, 176, 195, 226, 227, 228, 242, 277, 280], "__main__": [13, 55, 57, 59, 132, 133, 146, 148, 168, 174, 175, 176, 195, 226, 227, 228, 242, 246, 277, 280], "arbitrarili": [13, 53, 104, 252], "prior": [13, 17, 23, 54, 56, 94, 99, 104, 146, 156, 170, 183, 193, 226, 228], "togeth": [13, 20, 35, 41, 53, 55, 64, 89, 97, 99, 102, 103, 104, 108, 112, 132, 134, 142, 146, 149, 150, 166, 174, 176, 178, 185, 193, 216, 260, 273], "examin": [13, 86, 94, 95, 101, 103, 104, 148, 153, 166, 190], "lr": [13, 23, 50, 56, 92, 97, 101, 112, 121, 127, 132, 133, 134, 146, 148, 154, 156, 172, 173, 174, 175, 176, 183, 224, 227, 228, 235, 236, 265, 268, 269, 280, 281], "notabl": [13, 23, 92, 258], "divide_by_initial_world_s": 13, "world": [13, 16, 22, 40, 58, 94, 102, 106, 136, 148, 153, 156, 169, 173, 174, 175, 189, 190, 197, 211, 227, 228, 230, 234], "nonetheless": [13, 104], "mind": [13, 43, 53, 56, 89, 104, 145, 160], "preliminari": [13, 148], "delv": [13, 154, 273], "insight": [13, 79, 86, 148, 177, 246, 260], "join_hook": 13, "kwarg": [13, 121, 134, 153, 157, 172, 175, 189, 190, 210, 211, 218, 224, 276, 277], "join_devic": 13, "join_process_group": 13, "processgroup": [13, 19, 22, 64, 130, 131, 136, 176, 190, 197, 230, 261], "throw_on_early_termin": 13, "explain": [13, 14, 20, 46, 50, 56, 79, 95, 106, 112, 135, 136, 154, 187, 189, 200, 210, 213, 216, 251, 271, 276], "joinconfig": 13, "_join_config": 13, "main_hook": 13, "repeatedli": [13, 99, 172, 176, 198], "post_hook": 13, "is_last_join": 13, "broadcast": [13, 72, 112, 120, 134, 146, 148, 169, 189, 260, 280], "vacuou": 13, "contextlib": [13, 185], "nullcontext": 13, "conform": [13, 185], "interleav": [13, 195], "syncbatchnorm": [13, 59], "proce": [13, 104, 106, 154, 189, 197, 261], "__exit__": 13, "heartbeat": 13, "notify_join_context": 13, "serializ": 13, "fulli": [13, 14, 16, 17, 38, 50, 64, 86, 92, 97, 98, 99, 112, 127, 130, 131, 138, 141, 144, 157, 160, 173, 175, 177, 182, 208, 216, 222, 228, 233, 235, 248], "proceed": [13, 50, 104, 117, 166], "overlap": [13, 60, 132, 133, 134, 139, 144, 146, 166, 182, 185, 195, 261], "moreov": [13, 166, 206, 235, 246], "permit": [13, 245], "customiz": [13, 149], "idea": [13, 27, 79, 89, 104, 106, 107, 108, 111, 120, 136, 142, 149, 154, 164, 173, 176, 178, 206, 220, 226, 242, 246, 261, 279, 280], "counterjoinhook": 13, "sync_max_count": 13, "all_reduc": [13, 64, 132, 133, 148, 169, 197, 229], "get_rank": [13, 134, 146, 148], "process_group": [13, 197, 230], "common_rank": 13, "find_common_rank": 13, "max_count": 13, "__call__": [13, 55, 170, 277], "meth": [13, 16], "to_consid": 13, "reduceop": [13, 132, 133, 148], "device_count": [13, 57, 59, 92, 102, 132, 146, 227, 228, 230], "highlight": [13, 53, 89, 113, 124, 133, 134, 177, 182, 187, 189, 190, 226, 235, 236, 273], "alexi": 14, "jacq": 14, "winston": 14, "her": [14, 169], "leon": 14, "gati": 14, "alexand": [14, 213], "ecker": 14, "matthia": 14, "bethg": 14, "artist": 14, "distanc": [14, 66, 67, 71, 72, 73, 76, 77, 94, 104, 120], "d_c": 14, "d_": 14, "indispens": [14, 172], "pil": [14, 44, 55, 171, 185, 192], "pretrain": [14, 27, 46, 79, 95, 111, 127, 131, 171, 178, 185, 213, 221, 235, 236, 275, 276], "longer": [14, 56, 62, 63, 94, 106, 112, 114, 120, 134, 137, 141, 154, 163, 170, 173, 174, 187, 189, 203, 204, 210, 211, 212, 221, 223, 225, 238, 239, 240, 241, 243, 246, 261], "resiz": [14, 23, 50, 56, 149, 235, 269], "unabl": [14, 18, 150, 165, 189, 208], "caff": 14, "picasso": 14, "jpg": [14, 36, 55, 56, 95], "reconvert": 14, "f_": [14, 172], "xl": [14, 234], "w_": [14, 111], "c": [14, 17, 18, 22, 23, 46, 66, 67, 76, 89, 94, 95, 101, 102, 104, 111, 112, 120, 131, 133, 140, 141, 143, 148, 154, 157, 166, 171, 176, 177, 185, 187, 189, 190, 197, 201, 210, 236, 242, 245, 246, 258, 259, 265, 275], "squar": [14, 39, 50, 55, 66, 67, 71, 72, 73, 76, 77, 94, 99, 102, 104, 120, 142, 143, 156, 164, 173, 177, 194], "contentloss": 14, "recomput": [14, 104, 142, 144, 164, 261], "act": [14, 46, 53, 94, 99, 102, 138, 149, 170, 173, 175, 189, 190], "gram": 14, "g_": 14, "hat": [14, 109], "counteract": 14, "pool": [14, 22, 56, 99, 101, 104, 112, 121, 183, 190, 252], "tend": [14, 20, 94, 99, 104, 199, 216], "almost": [14, 23, 109, 111, 132, 136, 149, 171, 189, 199], "sl": 14, "19": [14, 20, 36, 101, 154, 173, 189, 199, 200, 216, 234, 251, 277], "vgg": 14, "child": [14, 119, 182, 230], "connect": [14, 50, 92, 97, 99, 111, 127, 131, 135, 136, 148, 152, 153, 160, 170, 171, 173, 193, 197, 230, 248], "eval": [14, 20, 23, 41, 53, 112, 121, 132, 133, 142, 172, 175, 178, 185, 186, 213, 216, 221, 235, 236, 269, 276, 277], "485": [14, 23, 55, 104, 171], "456": [14, 23, 55, 104, 171], "406": [14, 23, 55, 104, 171], "229": [14, 23, 55, 104, 171], "224": [14, 23, 55, 104, 171, 185, 213, 221, 235, 269, 276, 277, 279], "225": [14, 23, 55, 104, 119, 171], "vgg19": [14, 157], "maxpool2d": [14, 50, 101, 121, 153, 183, 252], "align": [14, 131, 177, 178, 198, 207, 242, 277], "depth": [14, 46, 56, 60, 94, 97, 102, 108, 137, 154, 189, 224, 261], "immedi": [14, 22, 43, 52, 56, 99, 102, 109, 148, 163, 174, 175, 182, 199], "white": [14, 18, 20, 79, 99, 112, 183, 185, 216], "input_img": 14, "content_img": 14, "bfg": 14, "closur": [14, 189], "reevalu": 14, "exce": [14, 79, 142, 190], "sphinx_gallery_thumbnail_numb": 14, "neural_style_tutori": [14, 21, 281], "paszk": [15, 148, 173], "dziedzic": 15, "shall": [15, 50, 56], "learnabl": [15, 50, 71, 120, 121, 131, 218, 263], "badfftfunct": 15, "literatur": [15, 173], "confusingli": 15, "correl": [15, 86, 99, 112, 154], "filter": [15, 27, 53, 87, 95, 104, 137, 178, 190, 197, 260], "flip": [15, 155], "wrt": [15, 143], "numpy_extensions_tutori": [15, 21, 281], "freeli": 16, "inspir": [16, 148, 155, 160, 177, 220], "v1": [16, 20, 157, 173, 174, 176, 216, 226, 246], "openai": [16, 131, 156, 172, 173, 174, 176, 276], "farama": [16, 172], "gymnasium": [16, 172, 173], "stateless": [16, 150, 152], "encount": [16, 53, 133, 141, 154, 187, 189, 190, 193, 215, 261, 270, 276], "undertaken": 16, "broader": 16, "wider": [16, 155], "acquaint": 16, "set_se": 16, "avenu": [16, 89], "backpropag": [16, 39, 40, 46, 50, 53, 79, 94, 105, 106, 107, 109, 111, 112, 120, 137, 156, 190], "_set_se": 16, "torqu": 16, "upward": 16, "posit": [16, 95, 99, 106, 131, 164, 172, 173, 177, 178, 185, 189, 193, 197, 216, 244, 279], "angular": 16, "stand": [16, 89, 94, 112, 156, 193, 209], "equat": [16, 56, 172, 173, 248, 252], "motion": 16, "veloc": [16, 173], "theta": [16, 79, 106, 172], "_t": [16, 156], "theta_t": 16, "dt": 16, "rad": 16, "sec": [16, 132], "gravit": 16, "mass": 16, "accord": [16, 17, 27, 34, 102, 103, 121, 154, 156, 168, 170, 173, 177, 185, 209, 218, 222, 270], "theta_": [16, 156], "001": [16, 101, 121, 146, 174, 183, 235, 269], "deleg": [16, 131, 221], "merg": [16, 48, 95, 99, 171, 185, 235], "is_shar": [16, 172], "new_th": 16, "plu": [16, 106], "new_thdot": 16, "neg": [16, 39, 53, 95, 99, 105, 106, 112, 113, 154, 166, 170, 172, 244], "discourag": [16, 43, 52, 172], "possibli": [16, 56, 134, 172, 189, 197, 271], "omit": [16, 94, 101, 119, 134, 154, 172, 193, 251, 258, 260], "agent": [16, 131, 173, 174, 176, 179, 281], "param": [16, 23, 50, 55, 121, 132, 133, 134, 143, 146, 148, 150, 152, 165, 175, 176, 194, 206, 258, 280], "mandatori": [16, 152, 172], "domain": [16, 27, 36, 40, 53, 54, 79, 103, 117, 131, 172, 186, 211, 261], "accur": [16, 23, 79, 92, 97, 119, 138, 153, 166, 176, 187, 208, 213, 274], "lazili": [16, 163], "costli": [16, 137, 261], "observation_spec": [16, 172], "compositespec": 16, "dictionari": [16, 40, 41, 53, 86, 111, 114, 121, 140, 163, 165, 172, 174, 175, 178, 185, 190, 198, 250, 263, 265], "action_spec": [16, 172], "reward_spec": [16, 172], "done_spec": 16, "input_spec": [16, 172], "state_spec": 16, "output_spec": 16, "neither": [16, 102, 194, 279], "shortcut": 16, "tensorspec": 16, "irrelev": [16, 169], "incorpor": [16, 104, 113, 131, 149, 177], "pseudo": [16, 27], "_make_spec": 16, "pendulumenv": 16, "gen_param": 16, "batch_lock": 16, "homonym": [16, 166], "check_env_spec": [16, 172], "coupl": [16, 38, 53, 98, 102, 103, 111, 133, 136, 143, 149, 150, 163, 166, 183, 189, 261], "rand_step": 16, "randomli": [16, 47, 55, 56, 76, 77, 92, 97, 99, 120, 140, 156, 173, 178, 190], "invers": [16, 102, 198, 207, 226], "showcas": [16, 69, 133, 134, 160, 163, 190, 200, 214], "thdot": 16, "effort": [16, 53, 55, 56, 117, 260], "summar": [16, 53, 55, 112, 124, 130, 133, 138, 182, 189], "_apply_transform": 16, "_call": 16, "inv": 16, "_inv_apply_transform": 16, "eventu": [16, 135, 142, 149], "out_keys_inv": 16, "unitari": 16, "sine": [16, 120], "cosin": [16, 234], "raw": [16, 35, 47, 53, 72, 86, 112, 120, 197, 274], "del_kei": 16, "mdp": 16, "gather": [16, 59, 95, 101, 132, 134, 136, 146, 148, 149, 153, 172, 195, 214, 220, 245], "unexplor": 16, "abil": [16, 102, 112, 121, 136, 137, 148, 180, 183, 187, 193, 208, 221], "recreat": [16, 34, 46], "Of": [16, 104, 108, 112, 137, 148, 183, 207, 209, 242, 275], "clip": [16, 53, 79, 172], "scratch": [16, 34, 46, 53, 57, 104, 105, 121, 124, 127, 131, 179, 197, 262, 265, 281], "advanc": [17, 20, 21, 23, 46, 92, 107, 110, 113, 114, 116, 117, 130, 131, 134, 146, 166, 185, 190, 193, 206, 209, 210, 213, 214, 216, 217, 220, 229, 235, 236, 261, 265, 279, 281], "verif": [17, 175], "rapid": [17, 94, 209], "manufactur": 17, "imposs": [17, 97, 105, 163, 220], "simultan": [17, 34, 46, 60, 131, 138, 148, 166, 171, 261], "began": 17, "enhanc": [17, 95, 135, 139, 166, 180, 201, 210, 215, 222, 261, 276, 279], "rapidli": 17, "situat": [17, 94, 102, 134, 142, 143, 146, 148, 192, 199], "wrapper_custom_tensor_add": 17, "torch_fn": 17, "custom_cpu_fallback": 17, "operatorhandl": 17, "hint": [17, 22, 94, 104, 105, 109, 117, 137, 148, 174, 182, 189, 277], "cpu_fallback": 17, "cppfunction": 17, "makefromboxedfunct": 17, "cumtomselufunct": 17, "selu": 17, "wrapper_autogradcumstom__selu": 17, "wrapper_autogradcustom__selu": 17, "autocastprivateuse1": 17, "autocast": [17, 210, 216, 222, 235, 269], "kernel_privateuseon": 17, "makefallthrough": 17, "backendmodul": 17, "_register_device_modul": 17, "backend_nam": 17, "get_amp_supported_dtyp": 17, "is_autocast_en": 17, "get_autocast_dtyp": 17, "set_autocast_dtyp": 17, "set_autocast_en": 17, "generatorimpl": 17, "builder": [17, 189, 277], "register_generator_privateuse1": 17, "customgeneratorimpl": 17, "make_custom_gener": 17, "deviceindex": 17, "device_index": 17, "make_gener": 17, "make_cumstom_gener": 17, "event": [17, 86, 119, 132, 133, 174, 187, 197, 251, 259, 274, 277], "deviceguard": 17, "deviceguardimplinterfac": 17, "c10_register_guard_impl": 17, "customguardimpl": 17, "backend_meta_": 17, "extrameta": 17, "backendmeta": 17, "custombackendmetadata": 17, "unordered_map": 17, "tensorbackendmetaregistri": 17, "for_seri": 17, "for_deseri": 17, "expand": [17, 94, 108, 114, 154, 161, 183, 211, 227, 276], "timer": [17, 56, 155, 178, 216, 224, 249, 257, 281], "ascend": [17, 56, 87, 215], "npu": [17, 213, 215], "meet": [17, 54, 56, 218, 236, 246], "usabl": [17, 121, 149, 197, 262], "compli": 17, "habit": 17, "torch_npu": [17, 215], "exclus": [17, 170], "rename_privateuse1_backend": 17, "register_privateuse1_backend": 17, "unsupported_dtyp": 17, "quint8": [17, 194], "generate_methods_for_privateuse1_backend": 17, "for_tensor": 17, "for_modul": 17, "for_storag": 17, "is_npu": 17, "perhap": [18, 79, 139, 170, 228], "prevent": [18, 39, 53, 59, 112, 119, 137, 140, 146, 154, 156, 166, 189, 190, 215, 245, 246, 261, 266, 279], "custom_op": [18, 117, 273], "land": [18, 131, 141, 156, 193, 208, 235, 280], "induc": [18, 170, 197], "bad": [18, 92, 137, 199, 261], "uncom": [18, 53, 55, 67, 77, 97, 101, 108, 112, 120, 168, 173], "cropped_img": 18, "img": [18, 36, 95, 101, 131, 183, 185], "black": [18, 79, 86, 99, 112, 131, 136, 138, 174, 178], "aka": [18, 155, 157, 166, 193, 235, 275], "mutates_arg": 18, "led": 18, "past": [18, 53, 54, 103, 108, 189, 193], "exercis": [18, 23, 47, 148, 245], "reader": [18, 109, 148, 193, 260], "region": [18, 95, 102, 138, 153, 180, 185, 192, 242, 245, 249, 261, 265, 268, 272, 274, 281], "unus": [18, 154, 169], "against": [18, 39, 40, 47, 99, 101, 114, 135, 148, 157, 172, 193, 226, 235, 246], "forgot": [18, 197], "python_custom_op": [18, 21, 281], "pritam": 19, "damania": 19, "yi": [19, 189, 275], "wang": [19, 27, 114, 116, 117, 154, 156, 197], "distributeddataparallel": [19, 59, 60, 64, 130, 132, 133, 134, 148, 169, 176, 245, 280], "paradigm": [19, 20, 64, 104, 120, 130, 175, 176, 216], "embed": [19, 53, 99, 105, 107, 109, 110, 121, 131, 133, 134, 136, 168, 175, 176, 178, 183, 193, 195, 211, 229, 281], "dens": [19, 20, 190, 193, 206, 211, 216], "fc": [19, 46, 156, 218], "replic": [19, 22, 60, 64, 131, 132, 136, 144, 146, 148, 175, 176, 190, 230], "trainer": [19, 27, 59, 138, 144, 174, 175, 176, 216, 228], "hybrid": [19, 88, 90, 230, 281], "pipedream": 19, "master": [19, 23, 53, 132, 142, 148, 153, 157, 175, 176, 192, 194, 197, 214, 221, 226, 235], "embeddingbag": [19, 22], "drive": [19, 56, 94, 97, 99, 131, 156, 166, 206, 226], "respond": [19, 95, 156, 175], "amongst": [19, 190, 207], "themselv": [19, 99, 190, 208], "remotemodul": 19, "kick": [19, 34, 46, 163, 174, 175, 176], "remot": [19, 64, 130, 138, 174, 175, 176, 182, 226, 242, 270, 279], "hybridmodel": 19, "allreduc": [19, 86, 132, 136, 146, 169, 197, 261], "firstli": [19, 117, 154, 173], "tcp": [19, 59, 135, 144, 145, 148, 226], "init_method": [19, 146, 148, 195], "_run_train": [19, 176], "rpc_async": [19, 174, 176], "exit": [19, 152, 174, 175, 176, 197, 224, 225, 233, 272, 277, 279], "conflict": [19, 154, 189], "remote_emb_modul": 19, "rref": [19, 174, 175, 226], "distributedoptim": [19, 175, 176, 226], "remote_paramet": 19, "cannnot": 19, "crossentropyloss": [19, 23, 39, 101, 106, 136, 168, 176, 183, 235, 269], "get_next_batch": [19, 174, 176], "jess": [20, 216], "cai": [20, 216], "seek": [20, 89, 95, 216, 229], "grain": [20, 36, 94, 133, 148, 182, 187, 216, 245, 246, 260], "2n": [20, 216], "degrad": [20, 79, 216], "sparsifi": [20, 131, 170, 216], "answer": [20, 39, 95, 99, 106, 148, 153, 163, 178, 189, 190, 216], "tune": [20, 23, 39, 86, 104, 112, 122, 130, 131, 132, 138, 141, 171, 199, 210, 213, 216, 236, 249, 257, 260, 265, 279, 281], "recov": [20, 132, 133, 146, 157, 216], "nearli": [20, 112, 183, 216, 246], "f1": [20, 187, 216], "86": [20, 154, 171, 172, 176, 193, 216, 234, 246, 277], "92": [20, 172, 216, 234, 246], "3x": [20, 67, 120, 216, 222, 245, 261], "beginn": [20, 37, 42, 48, 49, 51, 68, 74, 78, 81, 82, 83, 84, 88, 90, 96, 98, 100, 107, 110, 115, 118, 120, 122, 131, 216, 253, 254, 255, 256], "to_sparse_semi_structur": [20, 216], "motiv": [20, 79, 135, 154, 175, 194, 200, 207, 208, 211, 216], "affect": [20, 95, 99, 103, 104, 143, 166, 168, 216, 261], "swap": [20, 55, 106, 136, 166, 172, 193, 199, 211, 216, 258], "compress": [20, 95, 170, 206, 209, 213, 216, 236], "arrang": [20, 120, 216], "drawback": [20, 111, 189, 216, 227, 228], "2020": [20, 216], "amper": [20, 133, 160, 165, 216, 245], "cutlass": [20, 210, 216], "cusparselt": [20, 216], "milder": [20, 216], "account": [20, 54, 112, 149, 163, 166, 178, 183, 193, 213, 216, 275], "retrain": [20, 216], "sweet": [20, 216], "spot": [20, 97, 101, 102, 139, 216], "2x": [20, 89, 131, 143, 163, 216, 234], "theoret": [20, 56, 166, 206, 216, 266], "granular": [20, 133, 154, 190, 216, 251, 261, 279], "fp16": [20, 133, 157, 199, 210, 216], "resnet": [20, 46, 47, 95, 137, 182, 216, 261], "imagenet": [20, 47, 55, 95, 127, 171, 216], "76": [20, 157, 172, 176, 193, 216, 246], "resnext": [20, 216], "101_32x8d": [20, 216], "79": [20, 154, 172, 216, 246, 251, 277], "xception": [20, 216], "ssd": [20, 216, 261], "rn50": [20, 216], "coco2017": [20, 216], "bbap": [20, 216], "24": [20, 23, 36, 101, 154, 171, 172, 193, 216, 234, 246], "maskrcnn": [20, 216], "fairseq": [20, 216], "en": [20, 152, 178, 185, 216], "de": [20, 22, 178, 216], "wmt14": [20, 216], "bleu": [20, 216], "squad": [20, 216], "91": [20, 155, 172, 176, 216, 234, 246], "workflow": [20, 23, 38, 86, 91, 92, 113, 131, 132, 190, 209, 214, 216, 265], "perspect": [20, 108, 172, 216, 279], "subproblem": [20, 216], "bmatrix": [20, 109, 216], "handoff": [20, 216], "anticip": [20, 216], "area": [20, 95, 99, 183, 192, 199, 209, 216, 244], "littl": [20, 56, 97, 104, 106, 112, 149, 172, 174, 176, 177, 180, 182, 216], "colab": [20, 22, 27, 38, 43, 52, 98, 101, 112, 131, 148, 149, 155, 172, 173, 185, 190], "pip": [20, 27, 54, 86, 95, 101, 114, 116, 156, 171, 173, 182, 185, 187, 192, 197, 199, 213, 221, 234, 236, 244, 246, 248, 251, 259, 262, 263, 264, 266, 273, 279], "panda": [20, 36, 55, 79, 185], "hug": [20, 154], "face": [20, 47, 55, 56, 79, 154, 276], "token": [20, 53, 111, 133, 136, 140, 168, 177, 178, 193, 216, 261, 276], "segment": [20, 131, 193, 199, 216], "text": [20, 36, 47, 56, 79, 89, 95, 105, 106, 108, 109, 111, 130, 131, 133, 139, 140, 148, 161, 166, 172, 173, 178, 182, 185, 193, 216, 242, 244, 276], "wikipedia": [20, 152, 216], "articl": [20, 36, 216], "score": [20, 53, 95, 105, 109, 111, 119, 177, 178, 192, 193, 195, 216, 244, 276], "fair": [20, 104, 211, 216], "lowest": [20, 132, 170, 216], "l1": [20, 92, 170, 216], "ao": [20, 23, 194, 199, 213, 216], "satisfi": [20, 138, 216, 218, 261], "anytim": [20, 216], "pruner": [20, 216], "update_mask": [20, 216], "shot": [20, 174, 216, 276], "wouldn": [20, 111, 132, 149, 216], "squash_mask": [20, 216], "left": [20, 34, 46, 50, 53, 56, 67, 89, 94, 101, 102, 106, 111, 120, 121, 148, 156, 160, 172, 173, 175, 177, 182, 183, 216, 242, 265], "quickstart": [20, 34, 35, 36, 37, 38, 39, 41, 43, 44, 131, 216], "28x": [20, 216], "amen": [20, 216], "spent": [20, 86, 177, 182, 216, 246, 251, 266], "delta": [20, 154, 155, 173, 216, 246, 260], "exact": [20, 104, 121, 142, 177, 189, 193, 197, 216, 224], "78": [20, 172, 216, 246], "53": [20, 157, 172, 216, 234, 251], "44": [20, 154, 172, 176, 216], "09": [20, 53, 154, 172, 176, 216, 234], "93": [20, 119, 176, 216, 234, 246, 251], "49": [20, 100, 101, 157, 172, 176, 216, 246, 277, 281], "15": [20, 27, 48, 79, 97, 99, 101, 127, 172, 183, 185, 192, 216, 234, 246, 251, 257], "54": [20, 157, 172, 246], "71x": 20, "35": [20, 136, 157, 172, 234, 236], "74": [20, 172, 176, 234, 246, 251], "23x": 20, "72": [20, 171, 172, 246, 251], "71": [20, 23, 55, 101, 154, 155, 176, 277], "59": [20, 171, 172, 185, 246, 251, 277], "41": [20, 132, 171, 172, 246, 251, 277], "22x": 20, "286": [20, 157, 185, 216], "65": [20, 36, 55, 101, 155, 176, 192, 193, 246], "247": [20, 176], "63": [20, 172, 251], "14x": 20, "46": [20, 154, 157, 171, 172], "02x": 20, "ye": [20, 54, 163, 273], "47": [20, 76, 92, 157, 172, 234, 246, 251], "68": [20, 55, 154, 172, 246], "18x": [20, 216], "36": [20, 171, 172, 234], "13x": 20, "159": 20, "22": [20, 36, 154, 157, 172, 176, 234, 246], "142": [20, 179, 234], "23": [20, 101, 154, 172, 176, 234, 246, 251, 260], "12x": [20, 193], "sparsesemistructuredtensor": [20, 216], "semi_structured_spars": [20, 21, 281], "00": [21, 36, 42, 51, 68, 74, 78, 90, 97, 100, 101, 110, 118, 119, 122, 154, 172, 176, 179, 185, 199, 201, 217, 234, 251, 257, 268, 281], "012": [21, 110, 217], "mem": [21, 42, 51, 68, 74, 78, 86, 90, 100, 110, 118, 119, 122, 179, 217, 251, 257, 268, 281], "mb": [21, 23, 42, 51, 68, 74, 78, 90, 100, 110, 118, 119, 122, 132, 179, 217, 251, 257, 268, 280, 281], "torchrl": [21, 131, 149, 156, 179, 281], "ddpg": [21, 131, 281], "pendulum": [21, 131, 172, 281], "scipi": [21, 47, 131, 143, 187, 281], "acceler": [21, 35, 40, 43, 52, 53, 54, 61, 64, 66, 79, 104, 116, 120, 127, 131, 139, 157, 166, 211, 214, 217, 222, 225, 234, 235, 261, 281], "bert": [21, 99, 131, 132, 213, 214, 281], "semi": [21, 131, 193, 211, 214, 281], "sparsiti": [21, 111, 131, 170, 193, 206, 208, 214, 217, 281], "000": [21, 23, 36, 42, 68, 74, 100, 113, 118, 122, 138, 156, 157, 179, 183, 185, 217, 257, 281], "supervis": [21, 106, 131, 180, 185, 281], "usb": [21, 131, 171, 281], "usb_semisup_learn": [21, 27, 281], "embeddingplann": [22, 131], "conda": [22, 86, 95, 101, 148, 154, 197, 199, 214, 236, 244, 259, 260, 279], "cudatoolkit": 22, "sudo": [22, 182, 221], "rm": [22, 226], "miniconda3": [22, 260], "py37_4": 22, "sh": [22, 146, 221, 242], "anaconda": [22, 86, 95, 148, 259], "chmod": 22, "fbgemm": [22, 23, 190, 194], "ipython": [22, 112, 119], "cp": [22, 195, 221], "restart": [22, 95, 101, 145, 173], "newli": [22, 127, 148], "python37": 22, "dynload": 22, "enviro": 22, "spmd": [22, 136, 228], "mimic": [22, 23, 104, 199, 206], "launcher": 22, "embeddingbagcollect": 22, "bag": [22, 36, 38, 101, 183, 190], "ebc": [22, 190], "4096": [22, 190, 234], "parameterconstraint": 22, "placement": [22, 134, 213, 279], "evenli": [22, 94], "intra": [22, 133, 136, 230], "interconnect": [22, 248], "nvlink": [22, 136, 226], "data_parallel": 22, "planner": 22, "embedding_typ": 22, "embeddingcomputekernel": 22, "shardingtyp": 22, "large_table_cnt": 22, "small_table_cnt": 22, "large_t": 22, "embeddingbagconfig": 22, "large_table_": 22, "embedding_dim": [22, 99], "num_embed": 22, "feature_nam": 22, "large_table_feature_": 22, "poolingtyp": 22, "small_tabl": 22, "small_table_": 22, "small_table_feature_": 22, "gen_constraint": 22, "sharding_typ": 22, "table_wis": 22, "large_table_constraint": 22, "small_table_constraint": 22, "mimick": 22, "single_rank_execut": 22, "embeddingbagcollectionshard": [22, 190], "model_parallel": 22, "embeddingshardingplann": 22, "topologi": [22, 190, 228, 230, 235, 242], "moduleshard": 22, "shardingenv": 22, "init_distributed_single_host": 22, "pyre": 22, "fixm": 22, "set_devic": [22, 57, 59, 132, 133, 146, 195, 200, 227, 228, 230, 277], "compute_devic": 22, "pg": [22, 197], "sharder": [22, 190], "shardingplan": 22, "collective_plan": 22, "sharded_model": 22, "from_process_group": 22, "spmd_sharing_simul": 22, "get_context": [22, 148, 277], "exitcod": 22, "factor": [22, 99, 127, 166, 173, 174, 187, 190, 199, 227], "medium": [22, 135, 192, 261], "large_table_0": 22, "parametershard": 22, "compute_kernel": 22, "batched_fus": 22, "sharding_spec": 22, "enumerableshardingspec": 22, "shardmetadata": 22, "shard_offset": 22, "shard_siz": 22, "large_table_1": 22, "small_table_0": 22, "small_table_1": 22, "finer": [22, 36, 251], "halv": [22, 119], "row_wis": 22, "512": [22, 133, 155, 168, 189, 211, 216, 222, 235, 246, 251], "imbal": [22, 261], "vertic": 22, "column_wis": 22, "unfortu": 22, "futur": [22, 53, 112, 117, 119, 132, 152, 156, 163, 169, 173, 174, 175, 176, 194, 209, 227, 234, 263, 274], "batched_dens": 22, "raghuraman": 23, "krishnamoorthi": 23, "seth": [23, 38], "weidman": 23, "jerri": 23, "zhang": [23, 227, 228, 230], "decreas": [23, 40, 53, 79, 87, 104, 112, 136, 139, 190, 209], "mobilenetv2": [23, 214], "np": [23, 55, 76, 101, 105, 112, 120, 171, 176, 183, 185, 207, 211, 216, 260, 276], "dataload": [23, 34, 35, 37, 38, 39, 40, 41, 43, 44, 47, 48, 56, 59, 79, 92, 101, 104, 122, 132, 133, 139, 148, 166, 168, 175, 182, 183, 185, 213, 235, 236, 237, 249, 261, 269, 281], "filterwarn": [23, 172, 185], "ignor": [23, 55, 104, 109, 111, 121, 169, 172, 185, 189, 192, 194, 207, 208, 211, 245, 251, 262, 274], "deprecationwarn": 23, "seed": [23, 56, 79, 97, 104, 132, 133, 148, 173, 174, 176, 211], "manual_se": [23, 102, 132, 133, 148, 155, 173, 174, 195, 211, 216, 280], "191009": 23, "floatfunct": 23, "quantstub": 23, "dequantstub": 23, "relu6": 23, "_make_divis": 23, "divisor": 23, "min_valu": 23, "tf": [23, 101], "divis": [23, 102, 189, 211, 277], "tensorflow": [23, 101, 105, 107, 120], "blob": [23, 117, 132, 182, 186, 194, 221], "slim": [23, 120], "mobilenet": [23, 131, 171], "new_v": 23, "round": [23, 117, 133, 174, 246, 260], "convbnrelu": 23, "in_plan": 23, "out_plan": 23, "kernel_s": [23, 50, 112, 132, 194, 236, 252], "momentum": [23, 46, 47, 69, 73, 92, 97, 101, 103, 112, 120, 121, 142, 148, 174, 183, 190, 194, 235, 236, 263, 264, 269], "inplac": [23, 132, 216], "invertedresidu": 23, "inp": [23, 175, 189, 210, 229, 252], "oup": 23, "expand_ratio": 23, "hidden_dim": [23, 99], "use_res_connect": 23, "pw": 23, "dw": 23, "conv": [23, 56, 99, 142, 157, 175, 186, 242, 251, 252], "skip_add": 23, "num_class": [23, 174, 183, 185, 192], "width_mult": 23, "inverted_residual_set": 23, "round_nearest": 23, "v2": [23, 104, 124, 149, 171, 186, 190, 215, 222, 227, 233], "width": [23, 46, 47, 50, 99, 102, 138, 160, 185, 186, 192, 276], "input_channel": 23, "last_channel": 23, "1280": [23, 192], "96": [23, 154, 172, 176, 234], "160": [23, 176, 185, 246, 251, 277], "320": [23, 236], "valueerror": [23, 276], "invert": [23, 131, 172, 207], "residu": [23, 136], "output_channel": 23, "quant": [23, 194], "dequant": [23, 194, 199, 236], "isinst": [23, 134, 200, 216], "kaiming_normal_": 23, "fan_out": 23, "zeros_": 23, "elif": [23, 168], "ones_": 23, "normal_": 23, "bn": [23, 142, 186, 194], "numer": [23, 43, 53, 76, 77, 102, 104, 105, 114, 120, 134, 138, 172, 195, 216, 245, 261], "fuse_model": 23, "is_qat": [23, 194], "fuse_modul": 23, "fuse_modules_qat": 23, "averagemet": 23, "fmt": 23, "avg": [23, 234, 251], "__str__": [23, 190], "fmtstr": 23, "__dict__": [23, 213, 258, 277], "topk": [23, 236], "maxk": 23, "pred": [23, 112, 132, 136, 175, 183, 236], "correct_k": 23, "mul_": 23, "criterion": [23, 50, 101, 176, 178, 183, 235, 269], "neval_batch": 23, "top1": [23, 236], "acc": [23, 185], "2f": [23, 132, 171, 174, 176], "top5": 23, "cnt": 23, "acc1": 23, "acc5": 23, "load_model": 23, "model_fil": 23, "state_dict": [23, 41, 53, 57, 59, 92, 132, 133, 134, 146, 170, 187, 227, 228, 235, 245, 248, 249, 257, 258, 262, 265, 281], "weights_onli": [23, 41, 121, 134, 146, 185, 236], "load_state_dict": [23, 41, 57, 92, 103, 121, 134, 146, 185, 227, 228, 236, 245, 249, 257, 262, 281], "print_size_of_model": 23, "getsiz": 23, "data_path": [23, 92, 112], "prepare_data_load": 23, "randomresizedcrop": [23, 55], "randomhorizontalflip": [23, 55], "totensor": [23, 36, 55, 97, 101, 132, 148, 171, 175, 183, 185, 221, 235, 236, 269], "dataset_test": 23, "centercrop": 23, "train_sampl": 23, "randomsampl": 23, "test_sampl": 23, "sequentialsampl": 23, "train_batch_s": 23, "data_loader_test": 23, "eval_batch_s": 23, "pre": [23, 36, 105, 131, 133, 136, 148, 171, 185, 190, 192, 193, 199, 210, 228, 271, 279], "saved_model_dir": 23, "float_model_fil": 23, "mobilenet_pretrained_float": 23, "scripted_float_model_fil": 23, "mobilenet_quantization_script": 23, "scripted_quantized_model_fil": 23, "mobilenet_quantization_scripted_quant": 23, "float_model": [23, 213], "fusion": [23, 86, 131, 154, 190, 199, 210, 235, 261, 265, 268, 277, 281], "baselin": [23, 27, 95, 104, 185, 199, 216, 246, 260], "un": [23, 102, 178], "num_eval_batch": 23, "sophist": [23, 120, 172], "num_calibration_batch": 23, "mymodel": [23, 194], "estim": [23, 50, 55, 56, 99, 138, 172, 173, 178, 190, 199, 246, 266], "qconfig": [23, 194], "default_qconfig": 23, "calibr": [23, 166, 194, 213, 236], "56": [23, 36, 101, 157, 171, 172, 216, 246, 251, 279], "4x": [23, 133], "x86": [23, 194, 210, 222], "basi": [23, 133], "histogram": [23, 259], "per_channel_quantized_model": 23, "get_default_qconfig": 23, "67": [23, 36, 76, 119, 154, 194, 234, 277], "qat": [23, 194], "int8": [23, 171, 199, 210, 222, 236], "train_one_epoch": 23, "ntrain_batch": 23, "avgloss": 23, "5f": 23, "start_tim": 23, "global_avg": 23, "qat_model": 23, "get_default_qat_qconfig": 23, "prepare_qat": 23, "freez": [23, 46, 127, 214, 235], "num_train_batch": 23, "nepoch": 23, "disable_observ": 23, "intrins": [23, 194], "freeze_bn_stat": 23, "quantized_model": [23, 213], "confirm": [23, 92, 95, 112, 113, 133, 155, 174], "allud": [23, 79], "run_benchmark": 23, "img_load": 23, "elaps": [23, 132, 178], "num_batch": [23, 148], "enumer": [23, 92, 101, 103, 132, 134, 136, 171, 172, 175, 182, 183, 211, 216, 235, 236, 269], "num_imag": 23, "0f": [23, 236], "macbook": [23, 178], "pro": [23, 98], "61": [23, 119, 157, 216, 234], "welcom": 23, "hao": 27, "chen": [27, 189], "unifi": [27, 131, 142, 229, 244, 276], "ssl": 27, "modular": [27, 36, 121, 187, 263], "fixmatch": 27, "defixmatch": 27, "vision": [27, 40, 47, 55, 95, 99, 122, 131, 157, 163, 214, 244, 276, 281], "speech": [27, 79, 99, 105, 107, 111, 131, 140, 261], "light": [27, 56, 97, 101, 102, 142, 244], "vit": [27, 276], "famou": [27, 79], "strong": [27, 105, 189, 209, 276], "unlabel": [27, 102], "confid": [27, 56, 95, 97, 103, 106, 138, 172, 173, 183, 245], "threshold": [27, 53, 86, 138, 172, 176, 185, 234, 261], "absorb": 27, "gaussian": [27, 50, 56, 138, 172], "overcom": [27, 113], "quantiti": [27, 104, 131, 136, 155, 160, 165], "qualiti": [27, 156, 178], "trade": [27, 138, 163, 210], "afford": 27, "cv": [27, 211], "nlp": [27, 97, 99, 106, 109, 110, 111, 124, 131, 179, 211, 245, 261, 281], "audio": [27, 36, 47, 131, 151, 181, 184], "semilearn": 27, "get_dataset": 27, "get_data_load": 27, "weak": 27, "get_net_build": 27, "get_algorithm": 27, "get_config": 27, "hyper": [27, 177, 279], "87": [27, 36, 101, 119, 176, 210, 234, 246], "lb_imb_ratio": 27, "ulb_imb_ratio": 27, "microsoft": [27, 38, 116, 117, 182, 201], "kihyuk": 27, "sohn": 27, "et": [27, 53, 56, 79, 148, 170, 178], "al": [27, 53, 56, 79, 170, 178], "yidong": 27, "audio_data_augmentation_tutori": [28, 30], "audio_datasets_tutori": 29, "audio_feature_extractions_tutori": 31, "audio_io_tutori": 32, "frac": [34, 46, 67, 89, 94, 105, 106, 108, 111, 120, 137, 143, 148, 172, 173, 193], "partial": [34, 46, 92, 94, 108, 121, 132, 133, 134, 136, 137, 141, 149, 155, 195, 235, 262, 265], "leaf": [34, 46, 94, 187], "retain_graph": [34, 141], "surround": [34, 166], "mark": [34, 53, 136, 141, 157, 173, 174, 189, 208, 242], "frozen": [34, 46, 134, 156, 210], "acycl": [34, 46], "dag": 34, "chain": [34, 46, 94, 102, 106, 107, 134, 142, 154, 174, 208], "accumul": [34, 46, 50, 53, 56, 94, 97, 108, 143, 156, 163, 173, 174, 175, 176, 245, 264], "vec": [34, 46, 94, 155, 210], "langl": 34, "x_1": [34, 108, 160], "x_n": [34, 56], "rangl": 34, "y_1": [34, 108], "y_m": 34, "j": [34, 46, 79, 94, 101, 104, 105, 109, 134, 178, 197], "ccc": [34, 46, 94], "y_": [34, 46, 94, 105], "x_": [34, 46, 94], "cdot": [34, 46, 56, 94, 111, 137], "vdot": [34, 46, 94], "ddot": [34, 46, 94], "v_1": 34, "v_m": 34, "life": [34, 104, 139, 140, 227], "autogradqs_tutori": [34, 37, 42, 81, 281], "compris": [35, 36, 56, 121], "fashionmnist": [35, 36, 38, 40, 44, 101, 183], "mtia": [35, 40, 43, 66, 79, 102, 120, 127], "xpu": [35, 40, 43, 66, 79, 102, 120, 127, 235, 251], "neuralnetwork": 35, "minibatch": [35, 36, 101, 112, 139, 150, 165, 168], "28x28": [35, 112, 183, 248], "784": [35, 101, 112, 150, 183], "nonlinear": 35, "wide": [35, 64, 94, 99, 112, 135, 136, 139, 140, 148, 169, 178, 199, 244, 261], "phenomena": 35, "seq_modul": 35, "logit": [35, 39, 104, 234], "infti": [35, 173], "parameter": [35, 216], "preview": 35, "buildmodel_tutori": [35, 37, 42, 281], "messi": 36, "primit": [36, 40, 120, 131, 136, 155, 166, 190, 193, 197, 222], "fashion": [36, 53, 101, 103, 116, 133, 136, 138, 175, 180, 183, 185, 187, 190, 235], "zalando": 36, "60": [36, 114, 133, 139, 140, 157, 171, 172, 176, 178, 183, 189, 234, 251], "grayscal": [36, 149, 156], "internet": [36, 171], "target_transform": [36, 40, 44], "training_data": [36, 109], "test_data": 36, "26": [36, 101, 154, 156, 157, 171, 172, 176, 234], "4m": [36, 101], "5k": [36, 101], "363kb": [36, 101], "197k": [36, 101], "34": [36, 76, 119, 171, 172, 234, 246, 251, 260], "760kb": 36, "459k": 36, "17mb": 36, "67m": [36, 101], "05": [36, 79, 101, 133, 172, 176, 194, 234, 281], "40mb": 36, "03": [36, 97, 101, 172, 175, 176, 185, 195, 234, 260], "57mb": 36, "11m": 36, "5mb": 36, "3mb": 36, "6m": 36, "4mb": [36, 101], "81": [36, 154, 234], "21": [36, 119, 171, 172, 234, 246, 251, 260, 277], "5m": [36, 101], "94": [36, 138, 172, 234, 251, 277], "8m": [36, 101], "6mb": 36, "29": [36, 101, 171, 172, 176, 179, 246, 281], "327kb": [36, 101], "42m": [36, 101], "766kb": 36, "492k": [36, 101], "28mb": 36, "64m": 36, "30mb": 36, "83m": [36, 101], "01mb": 36, "10mb": 36, "15k": [36, 101], "2mb": [36, 101], "labels_map": 36, "shirt": [36, 38, 101, 183], "trouser": [36, 38, 101, 183], "pullov": [36, 38, 101, 183], "dress": [36, 38, 101, 183], "coat": [36, 38, 101, 183], "sandal": [36, 38, 101, 183], "sneaker": [36, 38, 101, 183], "ankl": [36, 38, 101, 183], "boot": [36, 38, 101, 171, 183], "figsiz": [36, 172, 183], "col": 36, "sample_idx": [36, 216], "randint": [36, 55, 56, 134, 168, 235], "add_subplot": [36, 183], "titl": [36, 79, 139, 166, 172, 178, 185], "img_dir": 36, "csv": [36, 53, 55, 133], "annotations_fil": 36, "pd": [36, 185], "io": [36, 53, 55, 101, 131, 174, 177, 185, 214, 265], "decode_imag": 36, "customimagedataset": 36, "img_label": 36, "read_csv": 36, "img_path": 36, "iloc": 36, "tshirt1": 36, "tshirt2": 36, "ankleboot999": 36, "read_imag": 36, "reshuffl": 36, "overfit": [36, 97, 112, 121, 140], "train_dataload": 36, "shuffl": [36, 40, 55, 59, 97, 101, 103, 112, 132, 133, 148, 171, 175, 182, 183, 195, 236], "test_dataload": 36, "train_featur": 36, "train_label": 36, "958": [36, 42, 234, 281], "data_tutori": [36, 37, 42, 281], "intro": [37, 38, 42, 59, 106, 107, 130, 149, 172, 183, 225, 233, 281], "quickstart_tutori": [37, 40, 42, 281], "tensorqs_tutori": [37, 42, 43, 84, 281], "tensor_tutori": [37, 49, 51, 52, 281], "transforms_tutori": [37, 42, 44, 281], "autograd_tutori": [37, 46, 49, 51, 281], "optimization_tutori": [37, 39, 42, 281], "saveloadrun_tutori": [37, 41, 42, 281], "sphx_glr_beginner_basics_autogradqs_tutori": [37, 42, 281], "sphx_glr_beginner_basics_buildmodel_tutori": [37, 42, 281], "sphx_glr_beginner_basics_intro": [37, 42, 281], "sphx_glr_beginner_basics_saveloadrun_tutori": [37, 42, 281], "sphx_glr_beginner_basics_transforms_tutori": [37, 42, 281], "sphx_glr_beginner_basics_optimization_tutori": [37, 42, 281], "sphx_glr_beginner_basics_quickstart_tutori": [37, 42, 281], "sphx_glr_beginner_basics_tensorqs_tutori": [37, 42, 281], "sphx_glr_beginner_basics_data_tutori": [37, 42, 281], "suraj": [38, 57, 58, 59, 60, 119, 144, 145, 156], "subramanian": [38, 57, 58, 59, 60, 119, 144, 145, 156], "juarez": 38, "cassi": 38, "breviu": 38, "dmitri": 38, "soshnikov": 38, "ari": 38, "bornstein": 38, "ml": [38, 79, 102, 104, 130, 131, 138, 190, 214, 233, 234], "belong": [38, 139, 190], "cloud": [38, 58, 98, 112, 114, 279], "favorit": [38, 98, 148, 153], "id": [38, 86, 98, 141, 146, 174, 175, 176, 185, 189, 190, 216, 227, 228, 277, 279], "walkthrough": [39, 46, 52, 86, 119], "video": [39, 46, 47, 57, 59, 60, 94, 95, 97, 99, 101, 102, 103, 124, 130, 131, 144, 145, 182], "3blue1brown": [39, 46], "unpredict": [39, 94, 146], "jump": [39, 79, 109, 113, 114, 116, 117, 156, 271], "untrain": 39, "dissimilar": [39, 102, 111], "regress": [39, 112, 180, 246, 259], "nllloss": [39, 106], "classif": [39, 47, 56, 79, 92, 95, 97, 102, 103, 104, 106, 127, 131, 132, 140, 171, 180, 192, 193, 221, 264], "logsoftmax": 39, "deposit": [39, 46], "train_loop": 39, "test_loop": 39, "warmstart": [39, 249, 257, 265, 281], "torchtext": [40, 54, 97, 103, 131], "torchaudio": [40, 54, 97, 103, 131, 133, 171, 182, 199], "cifar": [40, 47, 97, 183], "coco": [40, 192], "conduct": [40, 95, 154, 169, 199], "unpickl": [41, 121, 197], "inferenc": 41, "fail": [41, 94, 102, 113, 121, 154, 166, 171, 173, 177, 187, 189, 197, 214, 215, 235, 245, 276], "inconsist": [41, 121, 154], "legaci": [41, 114, 135], "pickl": [41, 92, 112, 121, 163, 197, 246], "checkpoint": [41, 53, 92, 134, 144, 163, 168, 198, 199, 235, 245, 249, 257, 263, 265, 281], "tip": [41, 56, 98, 111, 183, 249, 257, 265, 281], "ndarrai": [43, 44, 52, 102, 185], "elimin": [43, 119, 142, 150, 154, 155, 171, 189, 193, 211, 215], "overridden": [43, 52, 149, 250], "1200": [43, 246], "manipul": [43, 44, 97, 101, 120, 134, 153, 163], "breez": [43, 52], "subtli": [43, 52], "y1": [43, 192], "y2": 43, "y3": 43, "wise": [43, 52, 79, 102, 106, 136, 148, 154, 157, 160, 189, 190, 261, 275], "z1": [43, 154], "z2": 43, "z3": 43, "aggreg": [43, 46, 97, 119, 156, 185, 207, 251], "operand": [43, 94, 189], "denot": [43, 106, 109, 190, 206, 207, 211], "suffix": [43, 52, 86, 154], "t_": [43, 52], "problemat": [43, 52, 154, 164, 261], "commonli": [44, 53, 73, 92, 99, 104, 120, 168, 171, 178, 182, 194, 235, 252, 261, 266], "hot": [44, 53, 79, 99, 111, 139, 140, 149, 178], "floattensor": [44, 102], "intens": [44, 89, 154, 166, 222, 279], "scatter_": [44, 174], "prop": 46, "proportion": [46, 163], "travers": [46, 176, 236], "resnet18": [46, 157, 171, 182, 185, 213, 275], "height": [46, 50, 99, 102, 185, 186, 192, 242, 276], "3a": [46, 171], "9a": 46, "dq": 46, "bf": 46, "external_grad": 46, "blue": [46, 133, 136, 242], "finetun": [46, 131, 137, 163, 179, 281], "unfrozen": 46, "exclusionari": 46, "revers": [46, 53, 94, 134, 152, 160, 164, 171, 178, 190], "autodiff": [46, 131, 155], "pillow": [47, 97], "opencv": 47, "librosa": 47, "cython": 47, "nltk": 47, "spaci": 47, "viz": [47, 95], "huge": [47, 106, 111, 120, 136, 146, 149], "airplan": [47, 97, 104], "automobil": [47, 97, 104], "bird": [47, 97], "deer": [47, 97], "dog": [47, 97, 104, 192, 244], "frog": [47, 97], "hors": [47, 97], "truck": [47, 97, 104], "3x32x32": 47, "color": [47, 56, 95, 97, 99, 101, 102, 138, 156, 157, 171, 183, 185, 192], "32x32": [47, 50, 97, 104, 114, 183], "extrem": [47, 111, 157, 190], "pilimag": 47, "brokenpipeerror": 47, "fun": [47, 53, 113, 114, 116, 117, 172], "entropi": [47, 56, 97, 99, 103, 136, 264], "learnt": 47, "truth": [47, 79, 114, 192, 214], "okai": 47, "wasn": [47, 105, 108, 189], "energi": [47, 53], "chanc": [47, 53, 104, 156], "hmmm": 47, "plai": [47, 53, 56, 104, 106, 131, 172, 179, 279, 281], "chat": [47, 53, 178], "cifar10_tutori": [47, 49, 51, 281], "sung": 48, "kim": 48, "jenni": 48, "kang": 48, "mytensor": 48, "my_tensor": [48, 121], "parallelli": 48, "getitem": 48, "demo": [48, 131, 169, 182, 234], "cnn": [48, 104, 131, 160, 164, 165, 180, 185, 192, 235], "capsul": 48, "monitor": [48, 112, 148], "output_s": [48, 197], "former_torchi": 48, "parallelism_tutori": 48, "data_parallel_tutori": [48, 49, 51, 83, 281], "neural_networks_tutori": [49, 50, 51, 281], "gentl": [49, 51, 60, 61, 130, 281], "glimps": 50, "convnet": [50, 95, 149, 156, 175], "learning_r": [50, 76, 104, 120], "5x5": [50, 99], "affin": [50, 109, 142, 180, 194, 261, 279], "wx": 50, "fc1": [50, 101, 121, 132, 150, 175, 183, 236, 252], "fc2": [50, 101, 121, 132, 175, 183, 236, 252], "84": [50, 55, 101, 119, 121, 156, 172, 183, 252], "fc3": [50, 101, 121, 183, 252], "c1": [50, 97, 154], "subsampl": 50, "s2": [50, 97, 189], "2x2": [50, 99], "c3": [50, 97], "s4": [50, 97, 189], "f5": [50, 97], "f6": [50, 97], "in_featur": [50, 132, 194, 210, 216, 218, 252], "out_featur": [50, 132, 194, 210, 216, 252], "lenet": [50, 79, 97, 101, 103, 170, 236], "0472": 50, "1301": 50, "0751": 50, "1365": 50, "0296": 50, "0857": 50, "1311": 50, "0151": 50, "0006": 50, "addmmbackward0": 50, "mini": [50, 53, 56, 101, 109, 112, 165, 171, 183, 236], "4d": [50, 157], "nsampl": 50, "nchannel": 50, "least": [50, 79, 102, 121, 138, 140, 146, 156, 166, 171, 178, 189, 228, 246, 280], "7035": 50, "mselossbackward0": 50, "next_funct": [50, 94], "0x7f35e4579660": 50, "0x7f35e4579750": 50, "accumulategrad": 50, "0x7f35e446fc70": 50, "clear": [50, 55, 79, 94, 105, 106, 111, 137, 141, 154, 166, 176, 185, 186, 200, 208, 246, 277], "0079": 50, "0047": 50, "0116": 50, "0097": 50, "0049": 50, "0187": 50, "sub_": 50, "nesterov": [50, 121], "138": [50, 51, 281], "147": 51, "blitz": [51, 83, 114, 139, 140, 178, 183, 281], "matthew": [53, 91, 121], "inkawhich": [53, 56, 79, 89, 91, 121], "movi": [53, 54, 95], "cornel": [53, 54], "dialog": [53, 54], "corpu": [53, 54, 211], "artifici": [53, 104, 248], "intellig": 53, "servic": [53, 171, 235, 266, 279], "onlin": [53, 149, 156, 172, 175], "helpdesk": 53, "bot": 53, "predefin": [53, 104, 112, 149, 236, 261], "restrict": [53, 89, 148, 182, 187, 189, 194, 220], "compani": 53, "IT": 53, "teach": [53, 56, 104, 178], "human": [53, 79, 95, 140, 156, 178, 185, 197], "boom": 53, "hello": [53, 106, 163], "am": [53, 108, 140, 178], "hospit": 53, "lawyer": 53, "friend": [53, 163], "arrest": 53, "kid": 53, "sorri": 53, "san": 53, "francisco": [53, 112], "goodby": [53, 211], "luong": [53, 178], "jointli": [53, 178], "acknowledg": [53, 148], "borrow": [53, 176], "yuan": 53, "kuei": 53, "wu": [53, 135, 195, 200, 210], "ywk991112": 53, "sean": [53, 139, 140, 178], "robertson": [53, 139, 140, 178], "spro": 53, "floydhub": 53, "textutil": 53, "__": [53, 66, 79, 104, 120, 127, 185, 190], "reformat": 53, "rich": [53, 242], "charact": [53, 111, 131, 144, 161, 172, 178, 179, 281], "220": [53, 176], "579": [53, 157], "exchang": [53, 114, 116, 133, 148, 178, 182], "292": [53, 92], "035": 53, "617": 53, "713": [53, 97], "utter": [53, 54], "divers": 53, "variat": [53, 103, 112, 143, 193, 206, 246, 260], "formal": [53, 206, 228], "sentiment": 53, "datafil": 53, "tab": [53, 101, 103, 178, 183, 242], "sentenc": [53, 99, 105, 106, 109, 111, 140, 148, 178, 193, 211], "jsonl": [53, 54], "loadlinesandconvers": 53, "lineid": 53, "characterid": 53, "conversationid": 53, "movieid": 53, "extractsentencepair": 53, "formatted_movie_lin": 53, "unescap": 53, "delimit": 53, "busi": [53, 140, 279], "vocabulari": [53, 97, 99, 111, 136, 139, 211, 261], "implicit": [53, 94, 134, 189, 242, 261], "discret": [53, 172, 235], "voc": 53, "addword": 53, "addsent": 53, "infrequ": 53, "unicod": [53, 139, 140, 178], "ascii": [53, 111, 139, 140, 178], "unicodetoascii": 53, "letter": [53, 139, 140, 178], "lowercas": [53, 112, 178], "punctuat": [53, 178], "normalizestr": 53, "aid": [53, 121, 190, 250], "max_length": [53, 216], "filterpair": 53, "stackoverflow": [53, 139, 140, 178, 246], "518232": [53, 139, 140, 178], "2809427": [53, 139, 140, 178], "tactic": 53, "benefici": [53, 99, 130, 173, 210, 215, 261, 264, 279], "soften": 53, "difficulti": [53, 172], "approxim": [53, 95, 133, 142, 153, 156, 160, 170, 173, 234, 248, 261], "min_count": 53, "massag": 53, "accommod": 53, "shorter": [53, 55, 112, 178, 182, 206], "eos_token": 53, "english": [53, 106, 109, 139, 161, 178], "indexesfromsent": 53, "zeropad": 53, "inputvar": 53, "outputvar": 53, "pad_token": 53, "batch2traindata": 53, "bunch": [53, 139, 140, 242, 275], "aforement": [53, 86, 104, 193, 236, 271], "brain": 53, "sutskev": 53, "discov": [53, 117, 148, 175, 193, 215], "accomplish": [53, 56, 139, 148, 160, 218, 230, 246, 260], "jeddy92": 53, "ts_seq2seq_intro": 53, "invent": [53, 56, 172], "cho": 53, "2014": [53, 56], "bidirect": [53, 149], "gru": [53, 99, 139, 140, 178], "colah": 53, "2015": [53, 104], "fp": [53, 92, 131, 160], "hidden_s": 53, "unpack": [53, 221], "pack_padded_sequ": 53, "pad_packed_sequ": 53, "input_seq": 53, "input_length": [53, 133], "n_layer": [53, 168], "num_direct": 53, "sole": [53, 182], "combat": [53, 111], "bahdanau": [53, 178], "groundwork": 53, "h_t": [53, 109], "bar": [53, 86, 175, 185, 187, 218, 242], "attn": [53, 178], "softmax": [53, 99, 104, 109, 111, 112, 139, 171, 174, 176, 183, 193, 211, 234], "submodul": [53, 89, 99, 113, 134, 164, 177, 215, 218], "unidirect": 53, "input_step": 53, "last_hidden": 53, "encoder_output": 53, "num_word": 53, "masknllloss": 53, "clever": [53, 106], "teacher": [53, 104, 131, 178], "teacher_forcing_ratio": [53, 178], "instabl": [53, 178], "craft": [53, 79, 111, 140], "explod": [53, 99], "essenc": [53, 108], "nan": [53, 207, 277], "overshoot": 53, "steep": 53, "cliff": 53, "goodfellow": [53, 56, 79], "2016": 53, "www": [53, 178, 192], "deeplearningbook": 53, "sos_token": 53, "realiti": [53, 56, 79, 108, 112, 177, 260], "tie": 53, "trainit": [53, 178], "n_iter": 53, "explanatori": 53, "lift": [53, 220], "tarbal": 53, "NOT": [53, 89, 121, 141, 143, 144, 146, 163], "decoder_output": 53, "greedysearchdecod": 53, "searcher": 53, "evaluateinput": 53, "press": [53, 56], "gracefulli": [53, 57, 175, 228], "prompt": [53, 54, 199, 276], "regardless": [53, 102, 103, 155, 166, 175, 186], "attn_model": 53, "concat": [53, 108], "loadfilenam": 53, "save_dir": [53, 185], "model_nam": [53, 133, 213, 216, 235], "corpus_nam": [53, 54], "encoder_n_lay": 53, "decoder_n_lay": 53, "_checkpoint": [53, 133], "tar": [53, 121], "checkpoint_it": 53, "folk": 53, "congratul": [53, 117, 137, 139, 190, 248, 262, 263, 264], "tailor": [53, 148, 166, 190, 279], "cool": [53, 56, 163, 165, 220], "003": [53, 56, 89, 90, 97, 100, 103, 104, 106, 108, 110, 122, 140, 152, 154, 166, 177, 179, 187, 189, 190, 193, 199, 217, 281], "chatbot_tutori": [53, 122, 281], "wen": [54, 187, 189, 274], "uninstal": 54, "reinstal": 54, "torchdata": 54, "chatbot": [54, 122, 281], "browser": [54, 101, 103, 114, 182, 229], "click": [54, 101, 112, 114, 182, 183, 190, 242], "subfold": 54, "visit": [54, 199, 236], "in_": 54, "_colab": 54, "_name": 54, "mount": [54, 197], "gdrive": 54, "upload": [54, 229], "button": [54, 56, 114, 182, 242], "rerun": [54, 141, 163], "evolv": [54, 154, 160], "drop": [54, 99, 101, 114, 144, 163, 176, 199, 234], "t4": 54, "sasank": [55, 127], "chilamkurthi": [55, 127], "preprocess": [55, 104, 112, 131, 139, 178, 185], "scikit": 55, "facial": 55, "pose": [55, 229, 230], "landmark": 55, "dlib": 55, "tag": [55, 99, 107, 111, 189, 198, 250, 259], "image_nam": 55, "part_0_x": 55, "part_0_i": 55, "part_1_x": 55, "part_1_i": 55, "part_2_x": 55, "part_67_x": 55, "part_67_i": 55, "0805personali01": 55, "83": [55, 234, 260], "98": [55, 154, 172, 176, 234], "134": 55, "1084239450_e76e00b7e7": 55, "70": [55, 157, 172, 176, 216, 246], "236": [55, 76, 78, 281], "257": [55, 246], "312": [55, 157, 172, 276], "person": [55, 190, 192], "img_nam": 55, "__len__": [55, 112, 139, 148, 192], "__getitem__": [55, 112, 139, 148, 192], "randomcrop": 55, "crop": [55, 97, 138, 180, 192], "ax": [55, 106, 109, 131, 178, 179, 183, 281], "tsfm": 55, "transformed_sampl": 55, "safer": [55, 246], "stick": [55, 148, 157], "lose": [55, 57, 102, 104, 156], "collate_fn": 55, "indent": [55, 246], "imagefold": [55, 56, 97], "ant": [55, 127], "xxy": 55, "jpeg": 55, "xxz": 55, "bee": [55, 127], "nsdf3": 55, "asd932_": 55, "data_transform": 55, "hymenoptera_dataset": 55, "hymenoptera_data": 55, "dataset_load": 55, "data_loading_tutori": [55, 122, 281], "nathan": [56, 79, 89, 91], "celebr": [56, 131], "pictur": [56, 79, 134, 136, 178], "thorough": 56, "shed": [56, 244], "spend": [56, 86, 163, 246, 251], "sake": [56, 149, 170, 173, 262, 263], "ian": 56, "constantli": [56, 79, 173], "outsmart": 56, "equilibrium": 56, "perfect": [56, 94, 146, 208], "notat": [56, 79], "chw": [56, 171], "3x64x64": 56, "thought": [56, 87, 207, 260], "latent": [56, 111], "p_": 56, "p_g": 56, "minimax": 56, "logd": 56, "underset": 56, "mathbb": [56, 89, 160, 173], "sim": 56, "radford": 56, "unsupervis": 56, "drawn": [56, 112, 172], "rgb": [56, 97, 104, 156, 171, 185], "volum": [56, 132], "inlin": [56, 94, 97, 101, 103, 141, 154, 186, 206, 210, 214, 266], "manualse": 56, "10000": [56, 97, 101, 168, 172, 176, 246, 260], "dataroot": 56, "image_s": [56, 276], "spatial": [56, 95, 97, 99, 131, 179, 186, 192, 281], "64x64": 56, "nc": [56, 210], "nz": 56, "ngf": 56, "ndf": 56, "num_epoch": [56, 172], "0002": [56, 172], "ngpu": 56, "celeb": 56, "img_align_celeba": 56, "celeba": 56, "188242": 56, "173822": 56, "284702": 56, "537394": 56, "subdirectori": [56, 192], "stdev": 56, "02": [56, 154, 172, 176, 179, 201, 234, 268, 277, 281], "weights_init": 56, "reiniti": 56, "criteria": 56, "netg": 56, "netd": 56, "worth": [56, 163, 166, 175], "critic": [56, 89, 134, 145, 166, 195, 227, 260], "batchnorm": [56, 59, 121, 157, 186, 213, 261, 263], "downsampl": [56, 97, 156], "promot": 56, "healthi": 56, "bceloss": 56, "ell": [56, 178], "l_1": 56, "l_n": 56, "quad": [56, 173], "y_n": 56, "bce": 56, "gt": [56, 119], "fixed_nois": 56, "establish": 56, "Be": [56, 94], "somewhat": [56, 166], "collaps": 56, "ganhack": 56, "secondli": 56, "loss_d": 56, "loss_g": 56, "versu": [56, 79, 131, 139, 222], "anim": [56, 97], "music": 56, "dcgan_faces_tutori": [56, 122, 281], "mingpt": [57, 58, 59, 60, 144, 145], "aw": [57, 59, 132, 144, 145, 265], "p3": [57, 58, 59, 67, 120, 144, 145], "8xlarg": [57, 59], "youtub": [57, 58, 59, 60, 94, 95, 97, 99, 101, 102, 103, 131, 144, 145], "failur": [57, 113, 145, 146, 154, 189, 197, 225, 276], "disrupt": [57, 197, 274], "suscept": [57, 230], "elast": [57, 133, 146, 230], "attempt": [57, 94, 102, 106, 133, 166, 189, 197, 222, 250, 274], "minutia": 57, "multinod": [57, 144, 190], "load_snapshot": 57, "snapshot_path": 57, "train_step": 57, "should_checkpoint": 57, "save_snapshot": 57, "membership": [57, 145], "intervent": [57, 104, 271], "multigpu": [57, 59, 145], "multigpu_torchrun": 57, "envvari": 57, "ddp_setup": [57, 59], "12355": [57, 59, 132, 146, 227, 228], "local_rank": [57, 133, 145, 146, 168, 197], "gpu_id": [57, 59, 145], "_save_snapshot": 57, "model_st": 57, "epochs_run": 57, "_load_snapshot": 57, "max_epoch": 57, "_run_epoch": [57, 59], "total_epoch": [57, 59], "argv": [57, 59, 235, 277], "save_everi": [57, 59], "standalon": [57, 195, 245, 273], "nproc_per_nod": [57, 133, 134, 146, 168, 197, 230], "migrat": [57, 59, 261], "fault": [58, 59, 60, 92, 144, 145, 166], "toler": [58, 59, 60, 92, 94, 144, 145], "deploi": [58, 114, 131, 138, 145, 170, 171], "cluster": [58, 101, 133, 138, 144, 145, 146, 148, 228, 230, 270], "torchrun": [58, 64, 133, 134, 144, 145, 168, 195, 197, 230], "amazon": 58, "ec2": [58, 132], "gentli": 58, "gpt": [58, 132, 144, 145, 168], "stat": [59, 133, 141, 172, 182, 190, 251, 260], "replica": [59, 60, 64, 132, 134, 146, 148, 280], "convert_sync_batchnorm": 59, "single_gpu": 59, "mytraindataset": 59, "distributedsampl": [59, 60, 132, 133], "destroy_process_group": [59, 132, 133, 135, 146, 168, 195, 227, 228], "excess": [59, 86, 136, 187, 235, 245], "train_data": 59, "train_dataset": [59, 104, 133, 216, 235, 269], "set_epoch": [59, 132, 133], "b_sz": 59, "_run_batch": 59, "ckp": 59, "_save_checkpoint": 59, "load_train_obj": 59, "prepare_dataload": 59, "shorthand": 59, "ring": [60, 136, 195], "older": [60, 119, 120, 150, 165, 166, 173, 199], "destroi": [60, 94, 152], "soumith": [61, 148], "chintala": [61, 148], "scientif": [61, 99, 102, 120], "cifar10": [61, 92, 97, 182, 235, 264, 269], "mobil": [62, 63, 104, 194, 201, 203, 204, 212, 214, 221, 223, 240, 241, 249, 265], "executorch": [62, 63, 131, 203, 204, 212, 219, 221, 223, 238, 239, 240, 241, 243, 276], "Will": [64, 134, 186], "constabl": [64, 134], "categor": [64, 86, 101, 149, 174, 176, 190], "navig": [64, 182, 183, 242], "technologi": [64, 104, 131, 148, 193, 265], "infrastructur": 64, "fsdp": [64, 134, 136, 144, 227, 228, 230], "tp": [64, 197, 230], "pp": 64, "dtensor": [64, 136, 229, 265], "devicemesh": [64, 136, 265], "reshard": [64, 134, 228], "mesh": [64, 130, 134, 136, 230], "recip": [64, 119, 131, 205, 221, 224, 226, 229, 233, 242, 244, 245, 246, 247, 248, 250, 251, 257, 258, 262, 263, 264, 266, 268, 270, 271, 272, 273, 274, 275, 276, 280, 281], "c10d": [64, 146, 169, 197, 261], "all_gath": [64, 132, 133, 148, 169], "p2p": 64, "isend": [64, 148], "guidelin": [64, 261], "fullyshardeddataparallel": [64, 132, 133, 134, 227, 228, 230], "torchtitan": [64, 168, 195], "polynomi": [66, 67, 69, 71, 72, 73, 76, 77, 120], "pi": [66, 67, 71, 72, 73, 76, 77, 94, 120, 131, 173], "euclidean": [66, 67, 71, 72, 73, 76, 77, 94, 104, 120], "polynomial_autograd": [66, 68, 281], "bx": [67, 120], "cx": [67, 106, 120], "p_3": [67, 120], "5x": [67, 120], "legendr": [67, 120], "polynomial_custom_funct": [67, 68, 281], "examples_autograd": [68, 281], "strang": [69, 89, 120], "fifth": [69, 120], "tough": [69, 120], "dynamic_net": [69, 74, 281], "member": [71, 120, 214, 215], "polynomial_modul": [71, 74, 281], "2000": [72, 76, 97, 101, 104, 120, 172, 183, 185, 189, 197, 246, 280], "flaten": [72, 120], "1d": [72, 99, 120, 220, 261], "mse": [72, 99, 104, 120], "polynomial_nn": [72, 74, 281], "polynomial_optim": [73, 74, 281], "examples_nn": [74, 281], "99": [76, 120, 172, 176], "3688": 76, "058176165433": 76, "199": 76, "2441": [76, 210], "994624892893": 76, "299": [76, 185], "1617": 76, "9572404792484": 76, "399": 76, "1073": 76, "0035554776418": 76, "499": 76, "712": [76, 251], "6112260082882": 76, "599": [76, 277], "474": 76, "2722992963601": 76, "699": 76, "316": 76, "64981831456": 76, "799": 76, "212": [76, 119], "40719321308222": 76, "899": [76, 154], "143": [76, 234, 279], "466316767352": 76, "999": [76, 101, 183], "97": [76, 154, 176, 234], "87177657047954": 76, "1099": 76, "7171621565598": 76, "1199": 76, "773727262109134": 76, "1299": 76, "58351614415008": 76, "1399": 76, "85963918551146": 76, "1499": 76, "089666826812596": 76, "1599": 76, "273346707805437": 76, "1699": 76, "749149962587017": 76, "1799": 76, "079561402236987": 76, "1899": 76, "975218060255393": 76, "1999": 76, "244739023821362": 76, "003093496054166627": 76, "8201223204816204": 76, "0005336795453402762": 76, "08812172307876376": 76, "linspac": [76, 94, 120], "1e": [76, 92, 99, 120, 134, 142, 172, 174, 176, 194, 195, 216], "y_pred": [76, 120, 234], "grad_y_pr": [76, 120], "grad_c": [76, 120], "grad_d": [76, 120], "polynomial_numpi": [76, 78, 281], "biggest": [77, 197], "polynomial_tensor": [77, 78, 281], "238": 78, "examples_tensor": [78, 281], "appreci": [79, 105], "overlook": [79, 246], "secur": [79, 182], "vulner": 79, "surpris": [79, 164], "impercept": 79, "perturb": [79, 95], "drastic": [79, 189, 275], "overarch": 79, "misclassif": 79, "alter": [79, 121, 199, 252, 263], "har": 79, "remark": [79, 187], "mathbf": 79, "nabla_": [79, 106], "007": 79, "misclassifi": 79, "gibbon": 79, "clearli": [79, 138, 197, 206, 207], "pretrained_model": [79, 185], "fgsm_attack": 79, "clean": [79, 132, 133, 139, 146, 163, 168, 190, 195, 206], "data_grad": 79, "_imag": 79, "_grad": 79, "strength": [79, 183], "_data": 79, "trend": [79, 87, 182], "curv": [79, 182, 183], "linearli": 79, "lunch": 79, "BUT": [79, 108], "percept": 79, "tradeoff": [79, 131, 137, 138, 148, 172, 266], "evid": [79, 135], "subsequ": [79, 95, 104, 121, 132, 139, 149, 174, 176, 178, 187, 197, 199, 261, 264, 270, 279], "defend": 79, "nip": 79, "defens": 79, "competit": [79, 150, 165, 279], "defenc": 79, "dirti": 79, "fgsm_tutori": [79, 122, 281], "torchvision_tutori": [80, 179, 192, 281], "nn_tutori": [82, 112, 122, 281], "anupam": [86, 87], "bhatnagar": [86, 87], "offici": [86, 117, 135, 148, 173, 187, 189, 235], "holistictraceanalysi": 86, "env_nam": [86, 172], "deactiv": 86, "trace_dir": 86, "trace_analysi": 86, "traceanalysi": 86, "engag": [86, 214], "datafram": [86, 138, 185], "time_spent_df": 86, "get_temporal_breakdown": 86, "enqueu": 86, "slowdown": [86, 133, 137], "consecut": [86, 140, 149, 156, 166, 171, 185, 279], "insuffici": [86, 173], "delai": [86, 146, 174, 190], "stall": [86, 197, 279], "gap": [86, 89], "nanosecond": 86, "consecutive_kernel_delai": 86, "get_idle_time_breakdown": 86, "idle_time_df": 86, "show_idle_interval_stat": 86, "percentag": [86, 170, 211], "visualize_pctg": 86, "comm": 86, "comp": 86, "proport": [86, 163], "pie": [86, 163], "chart": [86, 101, 273], "kernel_type_metrics_df": 86, "kernel_metrics_df": 86, "get_gpu_kernel_breakdown": 86, "bottleneck": [86, 119, 133, 136, 145, 163, 166, 174, 182, 187, 224, 242], "plotli": [86, 95, 138], "hover": [86, 138, 171], "pan": 86, "num_kernel": 86, "duration_ratio": 86, "preced": [86, 94, 102, 142, 149, 186, 213], "lab": [86, 183], "image_render": 86, "jupyterlab": 86, "gpu_kernel_breakdown": 86, "tflop": 86, "oversubscrib": 86, "unresolv": [86, 208], "extent": [86, 102], "overlap_df": 86, "get_comm_comp_overlap": 86, "h2d": [86, 226], "d2h": [86, 226], "d2d": 86, "memcpi": 86, "memset": 86, "outstand": 86, "generate_trace_with_count": 86, "_with_count": 86, "screenshot": [86, 242], "profil": [86, 122, 131, 132, 166, 177, 179, 210, 234, 246, 249, 257, 261, 265, 281], "portion": [86, 163, 166, 168, 170, 197, 234, 242, 260], "get_memory_bw_summari": 86, "get_queue_length_summari": 86, "get_memory_bw_time_seri": 86, "get_queue_length_time_seri": 86, "mem_bw_summari": 86, "queue_len_summari": 86, "mem_bw_seri": 86, "queue_len_seri": 86, "get_queue_length_seri": 86, "25th": 86, "50th": 86, "75th": 86, "percentil": 86, "cudalaunchkernel": 86, "cudamemcpyasync": 86, "cudamemsetasync": 86, "kernel_info_df": 86, "get_cuda_kernel_launch_stat": 86, "short": [86, 99, 102, 105, 107, 110, 130, 140, 148, 164, 166, 172, 178, 180, 189, 261, 264, 281], "outlier": [86, 173], "microsecond": [86, 155, 177, 246], "cutoff": 86, "runtime_cutoff": 86, "launch_delay_cutoff": 86, "occasion": [87, 175, 178], "hta": [87, 182], "tracediff": 87, "cumul": [87, 172, 173], "compare_trac": 87, "ops_diff": 87, "absent": 87, "visualize_counts_diff": 87, "visualize_duration_diff": 87, "ten": [87, 97, 101, 104], "df": 87, "compare_traces_output": 87, "sort_valu": 87, "diff_count": 87, "largest": [87, 112, 185], "diff_dur": 87, "differer": 87, "overshadow": 87, "profilerstep": [87, 154], "loc": [87, 172, 245], "trace_diff_demo": 87, "learning_hybrid_frontend_through_example_tutori": [88, 89, 90, 281], "hybrid_frontend": [88, 90, 281], "introduction_to_hybrid_frontend_tutori": 88, "shini": 89, "enjoi": [89, 156], "aquaint": 89, "opportun": [89, 114, 149, 190], "bridg": [89, 229], "refin": [89, 189], "gradual": [89, 163], "proven": [89, 209], "resouc": 89, "consumpt": [89, 97, 99, 101, 103, 119, 133, 136, 138, 154, 166, 170, 182, 261, 265, 280], "discrep": [89, 213], "interwork": 89, "intrus": [89, 163], "decor": [89, 94, 117, 130, 141, 156, 174, 187, 261, 274], "broken": [89, 108], "epsilon": [89, 142, 149, 172, 173], "biggl": 89, "lfloor": 89, "prod_": 89, "biggr": 89, "rfloor": 89, "hline": 89, "190": [89, 176, 185, 246], "4377": 89, "59051": 89, "accomod": [89, 144], "scriptmodul": 89, "script_method": 89, "tracedmodul": 89, "onnx": [89, 118, 131, 281], "dramat": [92, 112], "industri": [92, 95], "analysi": [92, 94, 103, 131, 132, 153, 154, 177, 182, 185, 189, 195, 199, 242, 260, 276], "slight": [92, 135, 143, 234, 247], "trial": [92, 138, 245], "train_cifar": 92, "data_dir": [92, 133], "l2": [92, 99, 170], "get_checkpoint": 92, "as_directori": 92, "checkpoint_dir": [92, 227, 228], "pkl": [92, 112], "rb": [92, 112], "checkpoint_st": 92, "start_epoch": 92, "net_state_dict": 92, "optimizer_state_dict": [92, 121, 227, 228, 235], "80": [92, 138, 139, 157, 172, 176, 276, 277], "luckili": [92, 154, 189, 190, 208, 246], "trainload": [92, 183], "fraction": [92, 246], "checkpoint_data": 92, "tempfil": [92, 146, 277], "temporarydirectori": 92, "wb": [92, 112], "dump": [92, 154, 222, 229], "from_directori": 92, "val_loss": [92, 112, 133], "val_step": 92, "wast": [92, 182, 211, 214, 218, 246, 250, 252, 266], "lastli": [92, 131, 163, 189], "loguniform": [92, 246], "ashaschedul": 92, "functool": [92, 132, 133, 155], "gpus_per_tri": 92, "resources_per_tri": 92, "num_sampl": [92, 133], "checkpoint_at_end": 92, "000668163": 92, "31479": 92, "0977": 92, "0331514": 92, "31605": 92, "0983": 92, "000150295": 92, "30755": 92, "1023": 92, "0128248": 92, "66912": 92, "4391": 92, "00464561": 92, "7316": 92, "3463": 92, "00031556": 92, "19409": 92, "1736": 92, "00574329": 92, "85679": 92, "3368": 92, "00325652": 92, "30272": 92, "0984": 92, "000342987": 92, "76044": 92, "003734": 92, "53101": 92, "4761": 92, "0037339984519545164": 92, "5310075663924216": 92, "4737": 92, "hyperparameter_tuning_tutori": [92, 122, 281], "tensorboard": [94, 95, 96, 97, 98, 99, 102, 103, 131, 138, 179, 249, 251, 257, 265, 281], "decis": [94, 107, 110, 149, 166, 189, 206, 207, 209, 222, 261, 271, 277, 281], "branch": [94, 113, 189, 192, 221, 235], "rigidli": 94, "sign": [94, 164], "contextu": 94, "nudg": [94, 97, 103], "calculu": 94, "drill": [94, 260], "machineri": [94, 246], "took": [94, 148, 153, 163, 177, 187, 197, 274], "ins": [94, 187], "ideal_output": 94, "layer2": 94, "blow": 94, "b1": 94, "b2": 94, "temporarili": 94, "enable_grad": 94, "throw": [94, 102, 135, 174], "sin_": 94, "handi": [94, 97, 112, 148, 156, 183], "bake": [94, 186], "chrome": [94, 166, 177, 182, 251], "hessian": [94, 131, 179, 220, 281], "twice": [94, 112, 143, 166, 199, 234, 246, 251, 280], "jvp": [94, 152, 155], "vjp": [94, 155, 160, 220], "vhp": [94, 131, 179, 281], "hvp": [94, 131, 179, 281], "autogradyt_tutori": [94, 96, 100, 281], "latin": [95, 112], "increasingli": [95, 193], "ai": [95, 106, 107, 112, 132, 138, 156, 178, 197, 210, 222, 228, 235, 244, 261], "review": [95, 144, 161, 189, 206, 207, 209, 215, 221, 235, 266], "neuron": [95, 104, 244], "analag": 95, "ablat": 95, "permut": [95, 104, 157, 171, 185, 233], "valuabl": [95, 104, 178, 211, 233], "certainli": [95, 153, 207, 209], "attr": [95, 169, 222], "widget": 95, "toolset": 95, "flask": 95, "renam": [95, 194], "virtual": [95, 166, 169, 201, 250], "recogn": [95, 99, 169, 186, 248], "224x224": [95, 171], "visualize_image_attr": 95, "integrated_gradi": 95, "strongest": [95, 97, 99, 103], "visualize_image_attr_multipl": 95, "heat": [95, 171], "upsampl": 95, "interpol": 95, "layerattribut": 95, "teapot": 95, "trilobit": 95, "fossil": 95, "attributionvisu": 95, "imagefeatur": 95, "heatmap": 95, "captumyt": [95, 100, 281], "introyt": [96, 100, 281], "introyt1_tutori": [96, 97, 100, 281], "tensors_deeper_tutori": [96, 100, 102, 281], "modelsyt_tutori": [96, 99, 100, 281], "tensorboardyt_tutori": [96, 100, 101, 281], "trainingyt_tutori": 96, "captumyt_tutori": 96, "captum": [96, 249, 257, 265, 281], "sphx_glr_beginner_introyt_introyt_index": [96, 100, 281], "sphx_glr_beginner_introyt_modelsyt_tutori": [96, 100, 281], "sphx_glr_beginner_introyt_autogradyt_tutori": [96, 100, 281], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [96, 100, 281], "sphx_glr_beginner_introyt_captumyt": [96, 100, 281], "sphx_glr_beginner_introyt_introyt1_tutori": [96, 100, 281], "sphx_glr_beginner_introyt_trainingyt": [96, 100, 281], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [96, 100, 281], "5x3": 97, "helpfulli": 97, "prng": 97, "r3": 97, "r1": 97, "r2": 97, "trigonometr": [97, 102], "singular": [97, 164, 177, 275], "decomposit": [97, 117, 134, 154], "diagram": [97, 173], "earliest": 97, "driver": [97, 182], "explos": 97, "handwritten": [97, 132], "abridg": 97, "artifact": [97, 144, 189, 270, 271, 275], "gist": 97, "tile": [97, 101, 103, 185, 216, 222], "hasn": 97, "shouldn": [97, 170], "center": [97, 99, 103, 173, 182, 261], "concatdataset": 97, "trainset": [97, 183], "50000": [97, 112, 172], "4914": 97, "4822": 97, "4465": 97, "2470": 97, "2435": 97, "2616": 97, "rotat": [97, 101, 180, 183], "vehicl": [97, 176], "filesystem": [97, 148, 198], "told": [97, 172], "strip": [97, 216, 260], "ingredi": 97, "inner": [97, 166, 172], "235": [97, 119], "940": 97, "6000": [97, 101, 172], "8000": [97, 101, 172, 260], "573": 97, "507": 97, "12000": [97, 101, 172], "442": 97, "378": 97, "364": 97, "319": [97, 172, 234, 251], "284": [97, 176], "267": 97, "monoton": 97, "descend": 97, "memor": 97, "roughli": [97, 105, 120, 133, 146, 154, 261], "brad": 98, "heintz": 98, "introyt_index": [98, 100, 281], "lin": [99, 112], "nearbi": 99, "lenet5": 99, "1x32x32": 99, "liken": 99, "3x5": 99, "presenc": [99, 187, 189, 244], "6x28x28": 99, "resolut": [99, 185], "6x14x14": 99, "sought": 99, "3x3": 99, "16x12x12": 99, "16x6x6": 99, "576": 99, "edg": [99, 114, 120, 131, 153, 182, 194, 248, 276], "instrument": [99, 153, 265], "dna": 99, "nucleotid": 99, "sort": [99, 105, 109, 119, 171, 193, 251, 261, 277], "moder": 99, "beyond": [99, 102, 108, 169, 170, 261], "scope": [99, 102, 108, 119, 137, 141, 189, 242, 266], "tagger": [99, 105], "noun": 99, "verb": 99, "vocab_s": [99, 134, 168, 235], "tagset_s": 99, "log_softmax": [99, 112, 132, 175, 236], "decod": [99, 105, 133, 168, 176, 177, 193, 199, 245, 276], "transformerencod": [99, 193], "transformerdecod": [99, 193], "subcompon": [99, 187], "transformerencoderlay": [99, 177, 193], "transformerdecoderlay": [99, 168, 193], "twin": 99, "maxpool": 99, "quadrant": 99, "6x6": 99, "vanish": [99, 106], "offset": [99, 190, 198, 216, 227], "neighborhood": 99, "sometim": [99, 102, 120, 137, 143, 145, 146, 149, 155, 173, 176, 178, 189, 199, 208, 209, 261], "suffer": [99, 182], "steepest": 99, "feasibl": [99, 132, 134], "hardtanh": 99, "777": 100, "765": [100, 101, 281], "trainingyt": [100, 103, 281], "garment": 101, "summarywrit": [101, 183, 259], "tb": [101, 276], "gfile": 101, "tensorflow_stub": 101, "training_set": 101, "validation_set": 101, "training_load": 101, "validation_load": 101, "matplotlib_imshow": [101, 183], "one_channel": [101, 183], "unnorm": [101, 183], "npimg": [101, 183], "grei": [101, 183], "datait": [101, 183], "img_grid": [101, 183], "make_grid": [101, 183], "229k": 101, "693kb": 101, "852k": 101, "46mb": 101, "93m": 101, "14mb": 101, "49m": [101, 177], "90m": 101, "1mb": 101, "9mb": 101, "18": [101, 117, 119, 139, 154, 171, 172, 176, 199, 211, 234, 246, 275], "89": [101, 154, 176, 251], "7mb": 101, "362kb": 101, "719kb": 101, "29mb": 101, "38": [101, 119, 172, 176, 234, 260], "25mb": 101, "09mb": 101, "52": [101, 157, 172, 234], "add_imag": [101, 183], "flush": [101, 245, 259], "log_dir": [101, 138, 183], "writer": [101, 139, 171, 172, 183, 197, 227, 259], "fashion_mnist_experiment_1": [101, 183], "logdir": [101, 182, 183, 259], "6006": [101, 182, 183, 259], "efficaci": 101, "running_loss": [101, 183], "running_vloss": 101, "eg": [101, 134], "regularis": 101, "vdata": 101, "vinput": 101, "vlabel": 101, "voutput": 101, "vloss": 101, "avg_loss": 101, "avg_vloss": 101, "add_scalar": [101, 183, 259], "3000": [101, 172, 183, 189, 276], "7000": [101, 172], "9000": [101, 172], "11000": [101, 172], "13000": [101, 172], "14000": [101, 172], "15000": [101, 172], "add_graph": [101, 183], "add_embed": [101, 183], "select_n_random": [101, 183], "perm": [101, 183], "randperm": [101, 183], "class_label": [101, 183, 185], "label_img": [101, 183], "projector": 101, "toggl": [101, 198, 280], "night": [101, 183], "icon": 101, "dark": [101, 185], "upack": 102, "attach": [102, 173, 279], "terminologi": [102, 108], "likewis": [102, 163], "fctori": 102, "assur": [102, 166], "random1": 102, "random3": 102, "random2": 102, "random4": 102, "rng": [102, 148], "_like": [102, 157], "rand_lik": 102, "int16": 102, "cue": 102, "intent": [102, 207, 228], "subtract": [102, 104, 261], "2x4": 102, "1x4": 102, "honor": 102, "3rd": [102, 134, 141, 222, 235], "2nd": [102, 109, 134, 141, 175, 211], "hundr": [102, 130, 136, 185, 190], "bitwis": [102, 245], "inventori": [102, 103], "occupi": [102, 242], "discard": [102, 132, 133, 182, 251, 260], "underscor": 102, "deepli": 102, "nor": [102, 148, 194, 206, 279], "mid": 102, "someplac": 102, "ram": [102, 133, 166, 190, 250], "colloqui": 102, "fragil": 102, "robustli": [102, 116], "whichev": 102, "acquir": [102, 121, 170, 172, 176], "thrown": [102, 209, 221], "226": 102, "zeroth": 102, "bracket": [102, 194], "rescu": 102, "squeeze_": 102, "unsqueeze_": 102, "radic": 102, "parenthes": 102, "comma": 102, "convinc": [102, 163], "kinship": 102, "autom": [103, 120, 138, 153, 157, 185], "outcom": [103, 138, 197], "saniti": [103, 138, 172, 185], "nb": [103, 220], "chose": [103, 171], "saved_model": 103, "garmentclassifi": 103, "alexandro": 104, "chariton": 104, "computation": [104, 185], "lightweight": [104, 131, 170, 245], "drone": 104, "phone": [104, 114], "4gb": [104, 163, 171], "3072": [104, 216], "satur": [104, 245], "held": [104, 139, 175], "greedi": [104, 149, 173], "num_images_to_keep": 104, "50_000": [104, 172], "test_dataset": 104, "10_000": 104, "extractor": [104, 185], "emploi": [104, 178, 182, 193, 227], "train_load": [104, 132, 133, 175, 182, 235, 236, 269], "detriment": 104, "workload": [104, 119, 130, 131, 134, 145, 146, 182, 190, 201, 210, 227, 230, 234, 235, 265, 279], "test_load": [104, 132, 175, 236], "sensit": [104, 144, 152], "conclud": [104, 143, 148, 189], "interven": [104, 189], "soft": [104, 173], "mistaken": 104, "alon": [104, 121, 136, 178, 183], "exploit": [104, 156, 178], "meaningfulli": 104, "temperatur": 104, "smoother": 104, "soft_target_loss_weight": 104, "ce_loss_weight": 104, "train_knowledge_distil": 104, "75": [104, 127, 132], "ce": [104, 178], "coeffici": 104, "convei": 104, "naiv": [104, 137, 155, 165, 177, 211], "rational": 104, "capac": [104, 144, 172, 185, 261], "cosineembeddingloss": 104, "obvious": [104, 108, 176], "somehow": [104, 111, 190], "hidden_represent": 104, "hidden_representation_s": 104, "avg_pool1d": 104, "modifiedlightnnregressor": 104, "cosineloss": 104, "wiggl": 104, "hinton": 104, "vinyal": 104, "dean": 104, "workshop": 104, "romero": 104, "balla": 104, "kahou": 104, "chassang": 104, "gatta": 104, "bengio": 104, "fitnet": 104, "thin": [104, 198], "confer": 104, "knowledge_distillation_tutori": [104, 122, 281], "kit": 105, "dynet": [105, 107], "opposit": [105, 166, 207], "theano": [105, 107], "kera": [105, 107, 120], "constitu": 105, "bottom": [105, 182, 185, 189, 242], "green": [105, 133, 136, 183], "fat": 105, "exception": 105, "entiti": [105, 111, 190, 263, 264], "recognit": [105, 131, 222, 261], "ner": 105, "sound": [105, 108, 120], "scari": 105, "viterbi": [105, 109], "sum_": [105, 111, 173], "psi_i": 105, "sum_i": 105, "partit": [105, 131, 136, 141, 148, 228, 261], "emiss": 105, "timestep": [105, 109, 139, 140, 173], "textbf": 105, "psi_": 105, "y_i": [105, 109], "rightarrow": [105, 148, 173], "x_i": [105, 106], "tran": [105, 185], "h_i": [105, 109], "michael": [105, 224, 225, 233, 245, 272, 277], "collin": 105, "robert": [105, 106, 108, 109, 111], "guthri": [105, 106, 108, 109, 111], "prepare_sequ": 105, "anywai": [105, 108, 166], "gold": [105, 178], "perceptron": 105, "score_sent": 105, "advanced_tutori": [105, 107, 110, 281], "workhors": 106, "2x5": 106, "acx": 106, "ac": [106, 185], "sigma": [106, 172], "plenti": 106, "peopl": [106, 107, 127], "shy": 106, "linearit": 106, "sum_j": 106, "x_j": 106, "unseen": [106, 111], "eta": 106, "vari": [106, 134, 142, 156, 166, 178, 187, 189, 193, 208, 211, 224, 245], "spanish": [106, 139, 140], "bow": 106, "vocab": [106, 109, 136], "word_to_ix": [106, 109, 111], "bowclassifi": 106, "creo": 106, "bigger": [106, 139, 140, 171, 185], "deep_learning_tutori": [106, 107, 110, 281], "russel": 107, "norvig": 107, "book": 107, "rip": 107, "pytorch_tutori": [107, 108, 110, 281], "word_embeddings_tutori": [107, 110, 111, 281], "lexic": [107, 110, 281], "sequence_models_tutori": [107, 109, 110, 281], "bi": [107, 110, 281], "crf": [107, 110, 281], "2x2x2": 108, "complain": [108, 189], "x_2": [108, 160], "vagu": 108, "programm": [108, 111], "mayb": [108, 111, 150, 189, 214], "x_0": 108, "overbrac": [108, 109, 111], "y_0": 108, "z_0": 108, "z_1": 108, "y_2": 108, "z_2": 108, "gloss": 108, "new_z": 108, "NO": 108, "forgotten": 108, "classic": [109, 112, 157, 164, 180, 258], "markov": 109, "myriad": 109, "cow": 109, "q_": [109, 111, 156], "1st": [109, 132, 134, 141], "unfamiliar": 109, "w_1": 109, "w_m": 109, "w_i": [109, 111], "_i": 109, "_1": 109, "_m": 109, "argmax": [109, 112, 132, 175, 234, 236], "_j": 109, "ah_i": 109, "affix": [109, 111], "bear": 109, "ly": 109, "adverb": 109, "c_w": 109, "x_w": 109, "po": [109, 185], "emb": [109, 111, 176], "capit": 111, "enorm": [111, 185], "notion": 111, "mathematician": 111, "physicist": 111, "ok": [111, 135, 174], "role": [111, 170, 176, 190, 279], "orthograph": 111, "linguist": 111, "hypothesi": 111, "coffe": 111, "phi": 111, "gave": 111, "pain": 111, "earth": 111, "herself": 111, "longtensor": [111, 140, 174, 176], "ith": [111, 211], "shakespear": [111, 177], "sonnet": 111, "word_i": 111, "context_s": 111, "beauti": 111, "cbow": 111, "probabilist": [111, 172], "percent": [111, 155], "q_w": 111, "raw_text": 111, "dedupl": 111, "jeremi": 112, "howard": [112, 156, 168, 169], "rachel": 112, "thoma": 112, "ingham": 112, "elegantli": [112, 248], "concis": 112, "exist_ok": 112, "_static": [112, 131], "gz": 112, "gzip": 112, "as_posix": 112, "x_train": 112, "y_train": 112, "x_valid": 112, "y_valid": 112, "importerror": 112, "trail": 112, "signifi": 112, "xavier": [112, 113], "initialis": 112, "prewritten": 112, "xb": 112, "0940": 112, "7327": 112, "2777": 112, "1328": 112, "5966": 112, "9006": 112, "4015": 112, "5907": 112, "5558": 112, "0910": 112, "selectbackward0": 112, "nll": 112, "loss_func": 112, "yb": 112, "3196": 112, "negbackward0": 112, "0469": 112, "talli": 112, "debugg": 112, "set_trac": 112, "start_i": 112, "end_i": 112, "zero_": [112, 169, 176], "logist": 112, "0796": 112, "wherea": [112, 141, 183, 185, 199, 207, 208], "cross_entropi": [112, 136], "nlllossbackward0": 112, "clearer": [112, 183], "uppercas": 112, "confus": [112, 139, 152, 185, 190, 199, 207, 208, 209], "mnist_logist": 112, "3366": [112, 172], "prone": [112, 141, 193, 230], "gone": [112, 137], "0826": 112, "2505": 112, "0809": 112, "get_model": [112, 174], "2787": 112, "0818": 112, "faciallandmarkdataset": 112, "tensordataset": 112, "train_d": 112, "0815": 112, "train_dl": 112, "cleaner": [112, 206, 208, 214], "0816": 112, "valid_d": 112, "valid_dl": 112, "phase": [112, 148, 176, 251, 277], "valid_loss": 112, "2978": 112, "3453": [112, 280], "loss_batch": 112, "num": [112, 174], "32889047157764434": 112, "287904309797287": 112, "mnist_cnn": [112, 132], "avg_pool2d": [112, 221], "3770109081029892": 112, "2444469135224819": 112, "func": [112, 131, 150, 152, 155, 160, 165, 211, 220, 272, 276, 277], "avgpool2d": 112, "3640731947898865": 112, "2537226581573486": 112, "rid": [112, 113, 134, 155, 276], "wrappeddataload": 112, "dl": [112, 199, 222, 236], "__iter__": 112, "adaptiveavgpool2d": [112, 149], "3398549585103989": 112, "25085719379186633": 112, "lucki": [112, 170], "rent": 112, "hour": [112, 276], "current_acceler": 112, "21943788372278214": 112, "17707226146161556": 112, "mnist_sampl": 112, "fastai": 112, "practition": [112, 148, 209], "762": [112, 122, 281], "dupr\u00e9": 113, "circumv": 113, "forwardwithcontrolflowtest": 113, "modelwithcontrolflowtest": 113, "mlp": [113, 136, 150, 190], "unexpectedli": [113, 242], "succe": [113, 116, 189], "assertionerror": [113, 154], "dynamo": [113, 114, 116, 141, 154, 200, 276, 277], "faithfulli": [113, 206], "identity2": 113, "fx": [113, 114, 131, 154, 179, 189, 194, 201, 236, 270, 277, 281], "imperfect": 113, "faith": 113, "pitfal": [113, 189], "necessarili": [113, 114, 116, 117, 141, 143, 166, 189], "export_control_flow_model_to_onnx_tutori": [113, 115, 118, 281], "ti": [114, 116, 117], "tai": [114, 116, 117], "justin": [114, 117, 120], "chu": [114, 117], "thiago": [114, 116], "crepaldi": [114, 116], "gamut": 114, "platform": [114, 146, 148, 182, 222, 234, 242, 261, 269, 279], "supercomput": 114, "constrain": [114, 138, 164], "onnxscript": [114, 116, 117], "upgrad": [114, 116, 164, 171, 182, 214], "onnxprogram": [114, 117], "protobuf": 114, "app": [114, 131, 227, 228, 235, 265, 277], "drag": [114, 163, 182, 183, 229], "image_classifier_model": 114, "onnxruntim": [114, 116], "export_simple_model_to_onnx_tutori": [114, 115, 118, 281], "intro_onnx": [115, 116, 118, 281], "onnx_registry_tutori": [115, 117, 118, 281], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [115, 118, 281], "sphx_glr_beginner_onnx_intro_onnx": [115, 118, 281], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [115, 118, 281], "sphx_glr_beginner_onnx_onnx_registry_tutori": [115, 118, 281], "exportedprogram": [116, 117, 121, 189, 275, 276], "newer": [116, 147, 157, 163, 165, 191, 219, 253, 254, 255, 256, 261], "__version__": [116, 171, 221], "registri": 117, "_op": 117, "opoverload": 117, "opset": 117, "native_funct": 117, "yaml": [117, 144, 236], "custom_translation_t": 117, "redund": [117, 149], "node_add_0": 117, "input_i": 117, "input_x": 117, "gelu": [117, 213], "op_typ": 117, "mylibrari": 117, "add_and_round_op": 117, "005": 118, "json": [119, 166, 177, 182, 229, 251, 275], "quicker": 119, "record_funct": [119, 154, 234, 251], "incur": [119, 136, 197, 226, 227, 261], "investig": [119, 157, 170, 185, 187, 189, 260], "with_stack": [119, 182], "key_averag": [119, 234], "group_by_stack_n": 119, "traceback": [119, 154, 276], "sort_bi": [119, 234, 251], "193a910735e8": 119, "stacktrac": 119, "88": [119, 172, 176], "953": 119, "mnt": [119, 148], "xarfus": 119, "au": 119, "07": [119, 133, 172, 234, 251, 260, 281], "715": 119, "848m": 119, "350": 119, "151u": 119, "293": [119, 157], "342u": 119, "095u": 119, "931": 119, "footprint": [119, 132, 133, 134, 144, 163, 234, 245, 280], "006": 119, "476": 119, "338": [119, 172], "759m": 119, "as_strid": [119, 154], "281": [119, 157, 277], "808u": 119, "275": 119, "721u": 119, "_local": 119, "268": 119, "650u": [119, 251], "_scalar_dens": 119, "347": [119, 172], "argwher": 119, "nonzero": [119, 261], "089m": 119, "402m": 119, "491m": 119, "119": 119, "441": 119, "587u": 119, "_numpi": 119, "395": [119, 176], "602u": 119, "801m": 119, "rpc": [119, 131, 265], "johnson": 120, "brows": 120, "utf": 120, "modern": [120, 166, 187, 190], "50x": 120, "hairi": 120, "thankfulli": 120, "wave": 120, "tflearn": 120, "burden": [120, 178, 261], "facil": 121, "running_mean": [121, 263], "themodelclass": 121, "param_tensor": 121, "var_nam": 121, "param_group": [121, 172, 225], "dampen": 121, "weight_decai": 121, "4675713712": 121, "4675713784": 121, "4675714000": 121, "4675714072": 121, "4675714216": 121, "4675714288": 121, "4675714432": 121, "4675714504": 121, "4675714648": 121, "4675714720": 121, "_use_new_zipfile_seri": 121, "best_model_st": 121, "deepcopi": 121, "pt2": [121, 189, 224, 225, 230, 233, 275], "simplemodel": 121, "saved_exported_program": 121, "model_state_dict": [121, 134, 227, 228, 235], "theoptimizerclass": 121, "modela_state_dict": 121, "modela": 121, "modelb_state_dict": 121, "modelb": 121, "optimizera_state_dict": 121, "optimizera": 121, "optimizerb_state_dict": 121, "optimizerb": 121, "themodelaclass": 121, "themodelbclass": 121, "theoptimizeraclass": 121, "theoptimizerbclass": 121, "gan": [121, 131, 164], "ensembl": [121, 131, 179, 281], "map_loc": [121, 134, 146, 185, 245, 250], "remap": 121, "overwrit": 121, "saving_loading_model": [121, 122, 253, 254, 255, 256, 281], "783": [122, 277], "distil": [122, 131, 236, 281], "dcgan": [122, 131, 281], "transfer_learning_tutori": [122, 127, 281], "rai": [122, 131, 281], "template_tutori": [122, 124, 281], "firstnam": 124, "lastnam": 124, "gallery_pattern": 124, "neural_style_transfer_tutori": 124, "_build": 124, "beginner_sourc": [124, 281], "link1": [124, 133], "link2": [124, 133], "cs231n": 127, "quot": 127, "licens": [127, 180], "bsd": [127, 180], "todai": [127, 190, 208], "lr_schedul": [127, 132, 133, 172], "num_ftr": 127, "decai": [127, 149, 173], "checkout": [127, 221], "spread": [130, 185], "demand": [130, 197], "distributeddata": 130, "uneven": 130, "huggingfac": [130, 132, 133, 193, 216, 276], "hf": 130, "t5": 130, "async_execut": [130, 131, 174], "dataparallel": [130, 131, 137, 245, 261], "plug": [130, 169, 180], "horizont": [131, 265, 268, 281], "foreach_map": [131, 265, 268, 281], "inductor": [131, 141, 179, 189, 199, 201, 210, 213, 214, 271, 273, 277, 281], "bite": [131, 265], "non_block": [131, 179, 281], "pin_memori": [131, 132, 133, 179, 261, 281], "slide": [131, 261], "tiatoolbox": 131, "resampl": 131, "waveform": 131, "wav2vec2": 131, "torchdynamo": [131, 141, 189, 201, 213, 277], "dqn": [131, 179, 281], "cartpol": [131, 149, 173, 176], "v0": [131, 156, 173, 192], "proxim": [131, 172], "mario": [131, 164, 179, 281], "thumbnail": [131, 185], "holist": 131, "nchw": [131, 157, 235], "inter": [131, 136, 145, 160, 193, 230, 261], "raspberri": 131, "nerur": 131, "netork": 131, "exploresever": 131, "tangent": [131, 152, 155, 179, 281], "plugin": [131, 182], "orthogon": [131, 164], "symmetr": [131, 164, 213], "prune": [131, 164, 179, 214, 236, 281], "torchx": 131, "fuser": [131, 179, 281], "matcher": [131, 186], "scaled_dot_product_attent": [131, 177, 193, 195, 211], "paral": 131, "fsdp2": [131, 132], "fully_shard": [131, 134, 136, 227, 228], "fsdp1": [131, 132], "libuv": 131, "tcpstore": [131, 146], "sdk": 131, "v3": 131, "camera": [131, 171], "xnnpack": [131, 194], "metal": 131, "shader": 131, "android": [131, 214, 265], "deeplab": 131, "fp32": [131, 133, 144, 157, 177, 194, 199, 210, 222, 236, 277], "torchrec": [131, 179, 281], "distributedmodelparallel": 131, "sheet": 131, "hamid": [132, 133], "shojanazeri": [132, 133], "yanli": [132, 133], "zhao": [132, 133], "shen": [132, 146, 169, 174, 176], "li": [132, 146, 148, 166, 169, 174, 176, 187], "1t": [132, 144], "courtesi": 132, "patrick": 132, "hu": 132, "reduce_scatt": [132, 133, 136], "scatter": [132, 134, 146, 148, 185], "possess": [132, 199, 250], "toi": [132, 146, 176, 186, 189, 190, 228, 258], "fsdp_mnist": 132, "size_based_auto_wrap_polici": 132, "default_auto_wrap_polici": 132, "fsdp_auto_wrap_polici": 132, "auto_wrap_polici": [132, 133, 134], "steplr": [132, 133], "fully_sharded_data_parallel": 132, "cpuoffload": [132, 134], "backwardprefetch": [132, 133], "enable_wrap": [132, 133], "cleanup": [132, 133, 146, 227, 228], "dropout1": [132, 175], "dropout2": [132, 175], "9216": [132, 175], "ddp_loss": 132, "batch_idx": [132, 235, 236, 269], "tloss": [132, 236], "6f": [132, 236], "view_a": [132, 175, 236], "test_loss": 132, "fsdp_main": [132, 133], "1307": [132, 148, 175, 236], "3081": [132, 148, 175, 236], "dataset1": 132, "dataset2": 132, "sampler1": [132, 133], "num_replica": [132, 133], "sampler2": [132, 133], "train_kwarg": [132, 133], "test_kwarg": [132, 133], "test_batch_s": [132, 133], "cuda_kwarg": [132, 133], "my_auto_wrap_polici": 132, "min_num_param": 132, "init_start_ev": [132, 133], "enable_tim": [132, 133], "init_end_ev": [132, 133], "adadelta": 132, "step_siz": [132, 133], "gamma": [132, 133, 156, 172, 173, 174, 176], "elapsed_tim": 132, "save_model": [132, 133], "barrier": [132, 133, 135, 146, 148, 195], "metavar": [132, 133, 174, 176], "store_tru": [132, 133], "110": [132, 172, 176, 246], "85": [132, 234, 246, 251], "40": [132, 155, 156, 157, 172, 176, 178, 193, 200, 210, 216, 234, 246, 275], "67462890625sec": 132, "_fsdp_wrapped_modul": 132, "flattenparamswrapp": 132, "_fpw_modul": 132, "peak": [132, 134, 142, 163, 171, 193, 195, 199, 227, 273, 279, 280], "g4dn": 132, "xlarg": 132, "allgath": [132, 133, 136, 169, 261], "seal": 132, "experiment": [132, 138, 176, 194, 195, 197, 200, 213, 236, 259, 261, 277], "20000": [132, 172], "89130859375sec": 132, "auto_wrap": 132, "66": [132, 172, 234, 246], "offload": [132, 133, 134, 234, 242], "cpu_offload": [132, 134], "offload_param": [132, 134], "dpp": 132, "ddp_mnist": 132, "39": [132, 172, 176, 193, 234, 246, 277], "77766015625sec": 132, "wright": 133, "rohan": [133, 175], "varma": [133, 175], "wikihow": 133, "p4dn": 133, "a100": [133, 137, 165, 187, 193, 199, 216], "pressur": [133, 227], "fdsp": 133, "xxl": 133, "billion": [133, 136], "3b": [133, 171], "wikihowal": 133, "wikihowsep": 133, "summarization_dataset": 133, "t5_train": 133, "autotoken": [133, 216], "gpt2tokenizerfast": 133, "t5token": 133, "t5forconditionalgener": 133, "modeling_t5": 133, "t5block": 133, "checkpoint_wrapp": 133, "checkpointimpl": 133, "apply_activation_checkpointing_wrapp": 133, "mixedprecis": 133, "shardingstrategi": [133, 230], "fullstatedictconfig": 133, "statedicttyp": 133, "transformer_auto_wrap_polici": 133, "tqdm": [133, 149, 172, 216], "datetim": [133, 135, 197], "setup_model": 133, "from_pretrain": [133, 216, 235, 276], "get_date_of_run": 133, "2022": [133, 201], "08": [133, 154, 172, 176, 195, 234, 236, 246, 275], "31": [133, 154, 155, 172, 234, 246, 251, 260], "12_pm": 133, "date_of_run": 133, "strftime": 133, "s_": [133, 173], "format_metrics_to_gb": 133, "gigabyt": 133, "metric_num": 133, "g_gigabyt": 133, "ndigit": 133, "fsdp_loss": 133, "inner_pbar": 133, "colour": 133, "desc": [133, 197], "r0": 133, "input_id": [133, 136, 216, 276], "source_id": 133, "attention_mask": [133, 276], "source_mask": 133, "target_id": 133, "train_accuraci": 133, "val_load": 133, "load_dataset": [133, 216, 276], "type_path": 133, "output_length": 133, "print_text": 133, "1500": [133, 246], "150": [133, 176], "val_dataset": 133, "t5_auto_wrap_polici": 133, "transformer_layer_cl": 133, "sharding_strategi": [133, 134, 230], "shard_grad_op": [133, 134], "zero2": 133, "full_shard": [133, 134], "zero3": 133, "bf16_readi": 133, "is_bf16_support": 133, "loosevers": 133, "is_nccl_avail": [133, 195], "mp_polici": [133, 134], "bfsixteen": 133, "mixed_precis": [133, 134], "current_devic": [133, 245, 277], "adamw": [133, 173], "best_val_loss": 133, "inf": [133, 189, 208, 211, 277], "curr_val_loss": 133, "file_save_nam": 133, "time_of_run": 133, "dur": 133, "train_acc_track": 133, "val_acc_track": 133, "training_start_tim": 133, "track_memori": 133, "mem_alloc_track": 133, "mem_reserved_track": 133, "run_valid": 133, "zone": 133, "memory_alloc": 133, "memory_reserv": 133, "save_polici": 133, "offload_to_cpu": 133, "rank0_onli": 133, "state_dict_typ": 133, "full_state_dict": [133, 134], "cpu_stat": 133, "currepoch": 133, "prefix": [133, 137, 141, 149, 182, 187, 189, 197, 199, 246, 260, 279, 280], "save_nam": 133, "store_fals": 133, "nnode": [133, 146, 168, 195, 197], "transfom": 133, "mhsa": 133, "ffn": [133, 193], "bfloat16": [133, 134, 195, 199, 210, 222, 245, 258, 269], "v100": [133, 187], "fpsixteen": 133, "param_dtyp": [133, 134], "reduce_dtyp": [133, 134], "buffer_dtyp": [133, 134], "fp32_polici": 133, "grad_bf16": 133, "oom": [133, 163, 245], "freed": [133, 163], "backward_pr": [133, 134], "backward_prefetch": [133, 134], "backward_post": [133, 134], "contact": [133, 220], "wei": 134, "feng": [134, 156, 169, 186], "yifan": 134, "mao": 134, "unshard": [134, 190, 195], "recordstream": 134, "float8": 134, "nf4": 134, "qlora": 134, "fsdpmodul": 134, "fsdptransform": 134, "tok_embed": [134, 136, 168], "fsdptransformerblock": 134, "joint": [134, 271], "to_loc": 134, "clip_grad_norm_": [134, 172], "seq_len": 134, "queu": [134, 227], "set_modules_to_forward_prefetch": 134, "set_modules_to_backward_prefetch": 134, "perf": [134, 216], "layers_to_prefetch": 134, "num_to_forward_prefetch": 134, "num_to_backward_prefetch": 134, "upcast": 134, "model_arg": [134, 168], "fsdp_kwarg": 134, "mixedprecisionpolici": 134, "max_norm": 134, "resum": [134, 187, 228, 265, 276], "distributed_tensor": 134, "distribute_tensor": 134, "mmap": 134, "full_sd": 134, "meta_sharded_sd": 134, "sharded_sd": 134, "param_nam": [134, 258], "full_tensor": 134, "sharded_meta_param": 134, "sharded_tensor": 134, "device_mesh": [134, 136, 195, 230], "full_param": 134, "cpu_state_dict": 134, "sharded_param": 134, "del": [134, 168, 172, 200, 277], "set_model_state_dict": 134, "broadcast_from_rank0": 134, "statedictopt": 134, "get_model_state_dict": 134, "set_optimizer_state_dict": 134, "get_optimizer_state_dict": 134, "modulewrappolici": 134, "transformerblock": [134, 136], "param_init_fn": 134, "itertool": [134, 176], "to_empti": [134, 218, 258], "sublay": 134, "reshard_after_forward": 134, "hybrid_shard": [134, 230], "_hybrid_shard_zero2": 134, "offload_polici": 134, "cpuoffloadpolici": 134, "cast_forward_input": 134, "cast_root_forward_input": 134, "output_dtyp": [134, 194, 197], "sync_module_st": 134, "rank0": [134, 174, 176, 197], "forward_prefetch": 134, "fsdp_modul": 134, "limit_all_gath": 134, "use_orig_param": 134, "flat": 134, "no_sync": [134, 261], "set_requires_gradient_sync": 134, "ignored_param": 134, "ignored_st": 134, "xilun": [135, 195], "roll": 135, "1k": [135, 136], "98304": 135, "96k": 135, "perf_count": 135, "logger": [135, 185], "getlogg": [135, 185], "var": [135, 277], "preset": [135, 213], "env_rank": 135, "env_world_s": 135, "env_master_addr": 135, "env_master_port": 135, "23456": [135, 148], "tcp_store": 135, "is_mast": 135, "time_elaps": [135, 277], "client": 135, "timeout": [135, 146, 169, 197], "store_based_barri": 135, "timedelta": [135, 197], "diststoreerror": 135, "_diststoreerror": 135, "_store_based_barri": 135, "group_nam": 135, "rendezvous_count": 135, "default_pg_timeout": 135, "logging_interv": 135, "store_kei": 135, "store_based_barrier_kei": 135, "worker_count": 135, "last_worker_kei": 135, "last_work": 135, "runtimeerror": [135, 169, 171, 276], "num_workers_join": 135, "tcpstore_test": 135, "number_run": 135, "spectrum": 135, "listen_fd": 135, "socket": [135, 148, 154, 261, 279], "listen_sock": 135, "af_inet": 135, "sock_stream": 135, "addr": [135, 197], "getsocknam": 135, "master_listen_fd": 135, "notimplementederror": 135, "gloo": [135, 146, 148, 169, 182, 190, 227, 280], "vairabl": 135, "plane": 135, "notifi": [135, 174], "wanchao": [136, 230], "liang": [136, 230], "tianyu": 136, "liu": 136, "megatron": 136, "lm": [136, 226], "sp": 136, "parallelstyl": 136, "parallelize_modul": 136, "foward": 136, "aris": [136, 189, 193, 199, 208, 276], "exceed": [136, 172], "domin": [136, 157, 185], "ballpark": 136, "flop": [136, 190, 273], "llm": [136, 168, 210], "trillion": [136, 144], "month": 136, "llama": [136, 193, 213], "70b": 136, "2k": 136, "llama2": 136, "colwiseparallel": 136, "rowwiseparallel": 136, "sequenceparallel": 136, "rmsnormpython": 136, "preparemoduleinput": 136, "preparemoduleoutput": 136, "init_device_mesh": [136, 195, 230], "tp_mesh": [136, 230], "feedforward": 136, "swiglu": 136, "w2": 136, "silu": 136, "w1": 136, "w3": 136, "colwis": 136, "rowwis": 136, "parallelize_plan": 136, "layer_tp_plan": 136, "feed_foward": 136, "feed_forward": 136, "wq": 136, "wk": 136, "wv": 136, "wo": 136, "tp_plan": 136, "draft": [136, 148], "num_head": 136, "layer_id": [136, 168], "transformer_block": 136, "attn_lay": 136, "n_head": [136, 168], "n_kv_head": 136, "input_layout": 136, "output_layout": 136, "attention_norm": 136, "ffn_norm": 136, "desired_input_layout": 136, "yellow": 136, "red": [136, 141, 183, 242], "loss_parallel": 136, "use_local_output": 136, "seq": 136, "dp": [136, 197], "mesh_2d": [136, 230], "submesh": 136, "dp_mesh": 136, "model_tp": 136, "model_2d": 136, "broadli": 137, "torchviz": [137, 143], "orang": [137, 171], "_save": 137, "kept": [137, 197], "_saved_self": 137, "_saved_oth": 137, "cycl": [137, 182, 222, 246, 251], "thumb": [137, 155, 172, 245], "pack_hook": 137, "unpack_hook": 137, "silli": 137, "harmless": 137, "debat": 137, "__repr__": [137, 246], "152": 137, "48gb": 137, "5gb": 137, "6x": 137, "leak": 137, "autograd_saved_tensors_hooks_tutori": [137, 179, 281], "david": 138, "eriksson": 138, "balandat": 138, "methodologi": [138, 235], "laptop": 138, "sustain": [138, 227], "studi": [138, 170, 185], "botorch": 138, "bayesian": 138, "mnist_train_na": [138, 158, 179, 281], "appdef": 138, "kubernet": 138, "local_cwd": 138, "fetch": [138, 140, 174, 175, 176, 190, 271], "proxi": [138, 206, 209, 246, 266], "tensorboardcurvemetr": 138, "curve_nam": 138, "lower_is_bett": 138, "favor": [138, 160, 172, 189], "multiobjectiveoptimizationconfig": 138, "generationstrategi": 138, "scheduleropt": 138, "max_pending_tri": 138, "pareto": 138, "frontier": 138, "surrog": 138, "uncertainti": 138, "95": [138, 172, 176, 194, 234], "num_param": 138, "val_acc": 138, "contour": 138, "hidden_size_1": 138, "kiuk": 138, "chung": 138, "tristan": [138, 171], "rice": [138, 171], "ax_multiobjective_nas_tutori": [138, 158, 179, 281], "surnam": 139, "spell": 139, "lua": [139, 140, 178], "unreason": [139, 140], "roman": 139, "alphabet": 139, "n_letter": 139, "line_length": 139, "all_lett": 139, "linetotensor": 139, "namesdataset": 139, "20074": 139, "charrnn": 139, "58": [139, 157, 172, 216, 236], "label_from_output": 139, "histor": [139, 140], "all_loss": [139, 140], "minu": [139, 182], "bright": 139, "incorrectli": 139, "chines": [139, 140], "korean": 139, "italian": 139, "greek": 139, "poorli": 139, "gender": 139, "subreddit": 139, "char_rnn_classification_tutori": [139, 179, 281], "russian": 140, "ru": 140, "rovakov": 140, "uantov": 140, "shavakov": 140, "german": 140, "ger": 140, "gerren": 140, "ereng": 140, "rosher": 140, "spa": 140, "salla": 140, "parer": 140, "allan": 140, "chi": 140, "chan": 140, "iun": 140, "category_lin": 140, "o2o": 140, "muscl": [140, 185], "fuzz": 140, "chao": 140, "abcd": 140, "eo": [140, 178], "n_categori": 140, "randomtrainingexampl": 140, "contrast": [140, 146, 165, 166, 189, 206], "timesinc": 140, "timestamp": [140, 153, 242], "print_everi": 140, "plot_everi": 140, "output_nam": 140, "fiction": 140, "countri": 140, "citi": 140, "char_rnn_generation_tutori": [140, 179, 281], "simon": 141, "fan": [141, 171], "torch_log": [141, 189, 210, 265, 266, 268, 276, 281], "_dynamo": [141, 154, 187, 189, 266, 276, 277], "compiled_autograd": 141, "intercept": 141, "bytecod": [141, 187], "aotdispatch": 141, "rout": [141, 154, 189], "rewritten": 141, "compiled_autograd_verbos": 141, "stderr": 141, "aot0_": 141, "aot0_view_2": 141, "view_2": 141, "aot": [141, 154, 273, 277], "unoptim": [141, 187], "aot_eag": [141, 154], "fn": [141, 148, 152, 154, 187, 200, 224, 271, 274, 277], "graph_break": [141, 276, 277], "unique_graph": 141, "call_hook": 141, "div": [141, 154, 206], "adjac": 142, "hardcod": [142, 189], "dilat": [142, 252], "track_running_statist": 142, "denomin": 142, "nenadmarku": [142, 186], "bulk": 142, "fusedconvbn": 142, "geforc": 142, "rtx": 142, "3070": [142, 172], "56gb": 142, "unfus": 142, "68gb": 142, "shallow": [142, 149], "custom_function_conv_bn_tutori": [142, 179, 281], "grad_out": 143, "finit": [143, 160], "differenc": 143, "magnifi": 143, "gradgradcheck": [143, 261], "grad_x": 143, "make_dot": 143, "dout": [143, 155], "ouptut": 143, "sinh": 143, "cosh": 143, "expx": 143, "expnegx": 143, "_grad_out_exp": 143, "_grad_out_negexp": 143, "sinhbad": 143, "cube_backward": 143, "cubebackward": 143, "cube_forward": 143, "cube_backward_backward": 143, "sav_grad_out": 143, "cube_backward_backward_grad_out": 143, "cube": 143, "dgrad_out": 143, "reachabl": [144, 145, 148], "2xlarg": [144, 145], "hydra": 144, "slurm": [144, 145, 146, 148], "char_dataset": 144, "gpt2_train_cfg": 144, "bucket": [144, 261], "aggress": 144, "rendezv": [145, 169], "nccl_debug": 145, "diagnos": 145, "nccl_socket_ifnam": 145, "eth0": 145, "joe": 146, "zhu": [146, 154], "chirag": [146, 197], "pandya": [146, 197], "clarifi": 146, "filestor": 146, "libtmp": 146, "some_fil": 146, "toymodel": [146, 227, 228, 230], "net1": [146, 227, 228, 229, 230], "net2": [146, 227, 228, 229, 230], "demo_bas": 146, "ddp_model": [146, 280], "loss_fn": [146, 168, 174, 227, 228, 280], "run_demo": 146, "demo_fn": 146, "caution": 146, "straggler": [146, 182], "inevit": 146, "spike": [146, 171], "AND": 146, "recoveri": 146, "torchelast": 146, "demo_checkpoint": 146, "checkpoint_path": 146, "gettempdir": 146, "toympmodel": 146, "dev0": 146, "dev1": 146, "output_devic": 146, "demo_model_parallel": 146, "mp_model": 146, "ddp_mp_model": 146, "n_gpu": 146, "elastic_ddp": 146, "rdzv_id": [146, 230], "rdzv_backend": 146, "rdzv_endpoint": [146, 230], "29400": [146, 230], "scontrol": 146, "hostnam": 146, "slurm_nodelist": 146, "srun": 146, "torchrun_script": 146, "s\u00e9b": 148, "arnold": 148, "sysadmin": 148, "coordin": [148, 180, 192, 199, 209, 279], "pdsh": 148, "clustershel": 148, "init_process": 148, "127": [148, 194], "set_start_method": 148, "ip": 148, "recv": [148, 168, 176], "irecv": 148, "dst": 148, "req": 148, "sent": [148, 166, 174, 189, 226], "behaviour": 148, "fanci": 148, "baidu": 148, "deepspeech": 148, "facebook": 148, "communc": 148, "new_group": [148, 168, 230], "commut": 148, "band": 148, "bor": 148, "bxor": 148, "premul_sum": 148, "scatter_list": 148, "gather_list": 148, "all_to_al": 148, "output_tensor_list": 148, "input_tensor_list": 148, "random_split": 148, "data_idx": 148, "datapartition": 148, "1234": 148, "data_len": 148, "part_len": 148, "partition_dataset": 148, "get_world_s": 148, "bsz": 148, "partition_s": 148, "train_set": [148, 182], "30000": [148, 172], "ceil": 148, "epoch_loss": 148, "average_gradi": 148, "voil\u00e0": 148, "send_buff": 148, "recv_buff": 148, "accum": [148, 210], "send_req": 148, "bandwidth": [148, 182, 190, 214, 234], "subsect": 148, "mpi": 148, "eleg": 148, "smi": [148, 245], "mvapich2": 148, "ipc": [148, 182], "recompil": [148, 187, 225, 266, 270, 271], "requisit": 148, "forg": [148, 236, 279], "openmpi": 148, "mpirun": 148, "myscript": 148, "handshak": 148, "superflu": 148, "everybodi": 148, "readili": 148, "race": 148, "fcntl": 148, "nf": [148, 197], "sharedfil": 148, "everyon": 148, "unclear": [148, 189], "natalia": 148, "gimelshein": 148, "actor": 149, "carrier": [149, 172], "step_mdp": 149, "brought": [149, 166, 172, 189], "84x84": 149, "accessori": [149, 171], "inittrack": 149, "stamp": 149, "is_init": 149, "tensordictprim": 149, "primer": [149, 209], "disappear": 149, "lstmmodul": 149, "backbon": [149, 185], "flank": 149, "assist": [149, 230], "tensordictmodulebas": 149, "batch_first": 149, "make_tensordict_prim": 149, "qvaluemodul": 149, "action_valu": 149, "qvalueactor": 149, "set_recurrent_mod": 149, "uniniti": [149, 218], "dqnloss": 149, "delay_valu": 149, "lazymemmapstorag": 149, "dqn_with_rnn_tutori": [149, 179, 281], "tradition": [150, 218], "pretend": [150, 165], "stack_module_st": 150, "functional_cal": [150, 160, 165], "num_model": 150, "in_dim": [150, 155, 165, 220], "weren": [150, 165], "forced_alignment_tutori": 151, "incomplet": [152, 166], "eagerli": [152, 163, 189, 274], "alongsid": [152, 183, 185, 190, 245], "primal": [152, 155], "dual": 152, "dual_level": 152, "fresh": [152, 245], "check_forward_ad": 152, "check_backward_ad": 152, "check_undefined_grad": 152, "check_batched_grad": 152, "functorch": 152, "reformul": [152, 160], "ft": 152, "make_functional_with_buff": 152, "analog": [152, 189, 190, 208, 209], "consolid": [152, 174, 190], "dual_numb": 152, "forward_ad_usag": [152, 179, 281], "jame": 153, "reed": 153, "longest": 153, "nicer": 153, "tabul": [153, 187, 197, 273], "ca": 153, "graphmodul": [153, 194, 277], "symbolic_trac": 153, "profilinginterpret": 153, "clock": [153, 246], "51393": 153, "happi": 153, "hear": 153, "tracker": 153, "fx_profiling_tutori": [153, 179, 281], "xuan": 154, "liao": 154, "haozh": 154, "jiong": [154, 200, 210], "gong": [154, 200, 210], "weihan": 154, "intricaci": 154, "troubleshoot": 154, "pinpoint": [154, 189, 229], "narrow": [154, 189, 197, 211], "torch_compile_debug": 154, "xx": 154, "ir": [154, 271], "_inductor": [154, 189, 200, 210, 275, 277], "model___20": 154, "torchinductor_root": 154, "rx": 154, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 154, "fx_graph_runn": 154, "fx_graph_transform": 154, "ir_pre_fus": 154, "ir_post_fus": 154, "output_cod": [154, 210, 277], "triton": [154, 187, 201, 210, 265, 268, 270, 275, 277, 281], "gv": 154, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 154, "tmp2": [154, 210, 277], "tmp1": [154, 210, 277], "exc": [154, 276], "backendcompilerfail": 154, "cppcompileerror": 154, "xg": 154, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 154, "unsign": [154, 246], "char": [154, 235], "max_propagate_nan": 154, "tmp3": [154, 210, 277], "tmp0": [154, 210, 277], "deduct": 154, "substitut": [154, 155, 163], "deduc": 154, "in_ptr0": [154, 277], "in_ptr1": [154, 277], "out_ptr0": [154, 277], "pragma": [154, 210], "ivdep": [154, 210], "i0": 154, "static_cast": [154, 210], "0l": [154, 210], "8390l": 154, "1l": [154, 200, 210], "i1": 154, "8l": 154, "buf0": [154, 200, 277], "schedulernod": 154, "computedbuff": 154, "memorydep": 154, "c0": 154, "67120": 154, "unmet_depend": 154, "met_depend": 154, "arg0_1": [154, 200, 277], "8390": 154, "arg1_1": [154, 277], "nodeus": 154, "can_inplac": 154, "buf0_loop_bodi": 154, "var_rang": 154, "z0": 154, "index0": 154, "index1": 154, "get_index": 154, "get_index_1": 154, "load_1": 154, "get_index_2": 154, "minifi": 154, "dead": 154, "minif": 154, "tol": 154, "test_script": 154, "expected_result": 154, "actual_result": 154, "torchdynamo_repro_aft": 154, "torchdynamo_repro_level": 154, "mobilebertforquestionansw": 154, "xeon": [154, 157, 222, 235, 265], "platinum": 154, "8358": 154, "60ghz": 154, "kmp_blocktim": [154, 261, 279], "kmp_set": 154, "kmp_affin": [154, 261, 279], "compact": [154, 261, 279], "ld_preload": [154, 261, 279], "conda_prefix": [154, 246], "dirnam": [154, 169, 242], "libiomp5": [154, 261, 279], "libjemalloc": [154, 279], "malloc_conf": [154, 279], "oversize_threshold": [154, 279], "background_thread": [154, 279], "metadata_thp": [154, 279], "dirty_decay_m": 154, "muzzy_decay_m": 154, "numactl": [154, 261, 279], "bench": 154, "eager_t": 154, "num_it": [154, 172], "inductor_t": 154, "1023553796113": 154, "339": [154, 172], "95180135127157": 154, "359459053287382": 154, "355x": 154, "enable_kernel_profil": 154, "73": [154, 176, 216, 246], "370": 154, "814m": 154, "362": 154, "161": [154, 172], "276m": 154, "363": 154, "121": [154, 172, 251, 277, 281], "416m": 154, "488": [154, 246], "154m": 154, "194": 154, "clamp_min": [154, 234], "444m": 154, "bmm": [154, 211, 222, 246], "258m": [154, 234], "810": 154, "920m": 154, "447m": 154, "_softmax": 154, "087m": 154, "376": 154, "888m": 154, "77": 154, "430m": 154, "502m": 154, "161m": 154, "850": 154, "377m": 154, "386": [154, 176, 211, 251], "index_select": 154, "000u": [154, 251], "986": 154, "420m": 154, "703": 154, "656": [154, 280], "963": 154, "864m": 154, "_mkl_linear": [154, 210], "231": [154, 246, 251], "573m": [154, 251], "992m": 154, "336": [154, 172, 251], "642m": 154, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 154, "915": 154, "911": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 154, "901": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 154, "898": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 154, "895": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 154, "893": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 154, "892": [154, 171, 246], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 154, "891": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 154, "890": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 154, "889": 154, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 154, "graph_0_cpp_fused_": 154, "63x": 154, "cblas_sgemm_comput": 154, "339m": 154, "94x": 154, "impress": [154, 189], "cpp_fused__mkl_linear_add_mul_relu_151": 154, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 154, "bottl": [154, 227], "neck": [154, 227], "780875144992024": 154, "9588955780491233": 154, "0286805751604735": 154, "smallest": [154, 170], "solid": 154, "analyt": 154, "hotspot": [154, 242], "phenomenon": 154, "inductor_debug_cpu": [154, 179, 281], "annoi": 155, "jax": [155, 160, 220], "compute_jac": 155, "xp": 155, "jacobian_row": 155, "unit_vector": 155, "5956": 155, "6096": 155, "1326": 155, "2295": 155, "4490": 155, "3661": 155, "1672": 155, "1190": 155, "1705": 155, "6683": 155, "1851": 155, "1630": 155, "0634": 155, "6547": 155, "5908": 155, "1308": 155, "vjp_fn": 155, "ft_jacobian": 155, "argnum": 155, "millisecond": [155, 169, 261], "get_perf": 155, "first_descriptor": 155, "second_descriptor": 155, "final_gain": 155, "without_vmap": 155, "stmt": [155, 216, 224, 246], "with_vmap": 155, "no_vmap_tim": 155, "timeit": [155, 211, 252, 260], "with_vmap_tim": 155, "0x7f35dc8733d0": 155, "33": [155, 171, 172, 176, 234, 246], "0x7f36147d2f50": 155, "383": [155, 246], "1341": 155, "ft_jac_weight": 155, "ft_jac_bia": 155, "rigor": 155, "taller": 155, "din": 155, "using_fwd": 155, "using_bwd": 155, "jacfwd_tim": 155, "jacrev_tim": 155, "0x7f3611ca7fd0": 155, "717": 155, "0x7f361420a980": 155, "1839": 155, "5396": 155, "0x7f36142abe50": 155, "0x7f36142e7490": 155, "467": 155, "1405": 155, "7037": 155, "hessiani": 155, "overwhelm": 155, "hess_api": 155, "hess_fwdfwd": 155, "hess_revrev": 155, "compute_batch_jacobian": 155, "batch_jacobian0": 155, "predict_with_output_sum": 155, "batch_jacobian1": 155, "movedim": 155, "compute_batch_hessian": 155, "batch_hess": 155, "hvp_revrev": 155, "result_hvp_revrev": 155, "524": [155, 179, 281], "jacobians_hessian": [155, 179, 281], "yuansong": 156, "steven": 156, "guo": 156, "cheatsheet": 156, "companion": 156, "bro": 156, "ne": [156, 178, 251], "emul": 156, "tube": 156, "mushroom": 156, "screen": [156, 173, 242], "next_stat": [156, 173], "240": [156, 176, 251], "pipe": 156, "sky": 156, "grayscaleobserv": 156, "resizeobserv": 156, "skipfram": 156, "framestack": 156, "hi": [156, 211], "movement": 156, "exploration_r": 156, "he": [156, 178, 186], "marionet": 156, "ddqn": 156, "_e": 156, "argmax_": 156, "td_target": 156, "td_t": 156, "td_e": 156, "leftarrow": 156, "nabla": 156, "episod": [156, 173, 174, 176], "mario_rl_tutori": [156, 179, 281], "vitali": 157, "fedyunin": 157, "densest": 157, "4x4": 157, "10x3x16x16": 157, "768": [157, 216], "minor": [157, 176, 183, 235, 236], "ambigu": [157, 207, 208], "n1hw": 157, "contrari": [157, 166, 170], "restrid": 157, "unintend": 157, "apex": 157, "main_amp": 157, "resnet50": [157, 171, 174, 235, 269], "o2": 157, "opt_level": 157, "keep_batchnorm_fp32": 157, "nonetyp": 157, "loss_scal": 157, "7603": 157, "cast_model_typ": 157, "patch_torch_funct": 157, "master_weight": 157, "125": [157, 251], "866": 157, "230": [157, 176, 185], "949": 157, "6735125184": 157, "6735": 157, "prec": 157, "259": 157, "562": 157, "773": 157, "481": 157, "355": 157, "693": 157, "6968704462": 157, "6852": 157, "55": [157, 172, 246, 279], "258": 157, "461": 157, "775": 157, "089": 157, "433": 157, "965": 157, "7877287269": 157, "7194": 157, "51": [157, 176, 234, 277], "833": 157, "771": 157, "710": 157, "487": 157, "8285319805": 157, "7467": 157, "260": [157, 176], "380": 157, "770": 157, "090": 157, "525": 157, "908": 157, "7370464802": 157, "7447": 157, "360": 157, "623": 157, "555": 157, "728": 157, "7592862844": 157, "7472": 157, "917": [157, 268, 277, 281], "345": [157, 192], "774": 157, "746": [157, 246], "115": [157, 234], "9698858261": 157, "9218": 157, "324": 157, "597": 157, "659": 157, "2505953312": 157, "0879": 157, "767": 157, "785": 157, "7579724789": 157, "7580": 157, "198": 157, "482": 157, "135": [157, 171, 246], "414": 157, "716": [157, 234, 246], "7007197738": 157, "7293": 157, "250": [157, 176, 251], "387": 157, "1010": 157, "516": 157, "7113101482": 157, "7233": 157, "667": 157, "197": 157, "340": [157, 172], "1013": 157, "023": 157, "588": 157, "333": [157, 172], "8943189979": 157, "7661": 157, "541": 157, "7113249302": 157, "9551": 157, "1011": 157, "163": 157, "683": 157, "574": 157, "8537774086": 157, "7716": 157, "279": 157, "453": 157, "7595844269": 157, "3413": 157, "429": 157, "269": 157, "827": 157, "743": [157, 277], "883": 157, "8196096420": 157, "4011": 157, "volta": [157, 245, 261], "alexnet": 157, "mnasnet0_5": 157, "mnasnet0_75": 157, "mnasnet1_0": 157, "mnasnet1_3": 157, "mobilenet_v2": [157, 171, 192, 221], "resnet101": 157, "resnet152": 157, "resnet34": 157, "resnext50_32x4d": 157, "shufflenet_v2_x0_5": [157, 171], "shufflenet_v2_x1_0": [157, 171], "shufflenet_v2_x1_5": [157, 171], "shufflenet_v2_x2_0": [157, 171], "squeezenet1_0": 157, "squeezenet1_1": 157, "vgg11": 157, "vgg11_bn": 157, "vgg13": 157, "vgg13_bn": 157, "vgg16": 157, "vgg16_bn": 157, "vgg19_bn": 157, "wide_resnet101_2": 157, "wide_resnet50_2": 157, "ic": 157, "lake": [157, 235], "densenet121": 157, "densenet161": 157, "densenet169": 157, "googlenet": [157, 171], "inception_v3": [157, 171], "resnext101_32x8d": [157, 171], "spite": 157, "nc11": 157, "memory_format_tutori": [157, 179, 281], "year": [160, 164, 193], "j_": 160, "diagon": 160, "beforehand": 160, "asymptot": 160, "i_o": 160, "i_": 160, "e_o": 160, "textrm": 160, "_o": 160, "tensorfloat": 160, "sacrific": 160, "empirical_ntk_ntk_vp": 160, "luck": [160, 163, 190], "altogeth": [160, 208], "neural_tangent_kernel": [160, 179, 281], "french": [161, 178], "homepag": [162, 196], "ooz": 163, "_might_": 163, "2p": 163, "ephemer": 163, "timelin": [163, 182, 242], "memory_viz": 163, "devot": 163, "bat": [163, 201], "2gb": [163, 171], "6gb": 163, "foreach": [163, 233], "reveal": [163, 177, 187, 244, 246], "silver": 163, "bullet": 163, "sizabl": [163, 166], "tantamount": 163, "eat": 163, "lora": 163, "unlock": [163, 213], "vit_l_16": 163, "neat": 163, "lrschedul": [163, 265], "slate": 163, "woohoo": 163, "apart": 163, "shrunk": 163, "0gb": 163, "optimizer_step_in_backward_tutori": [163, 179, 281], "lezcano": 164, "surprisingli": 164, "ill": 164, "frobeniu": 164, "spectral": 164, "lipschitz": 164, "x\u1d40": 164, "upper": [164, 177, 189, 251], "triangular": 164, "reimplement": [164, 170, 189], "skew": [164, 182, 251], "unparametr": 164, "linearsymmetr": 164, "moduledict": [164, 168, 216], "parametrizationlist": [164, 216], "modulelist": 164, "inbuilt": 164, "caylei": 164, "spd": 164, "right_invers": 164, "succinctli": 164, "relax": [164, 276], "remove_parametr": 164, "parametri": 164, "leave_parametr": 164, "privaci": [165, 170], "sample_grad": 165, "compute_loss": 165, "ft_compute_grad": 165, "0th": [165, 170, 177, 211], "25x": [165, 185, 216], "opacu": 165, "per_sample_grad": [165, 179, 281], "cpu_tensor": 166, "cuda_tensor": [166, 261], "erron": 166, "carefulli": [166, 261], "distinguish": [166, 176, 183], "isol": [166, 187], "illus": 166, "anywher": 166, "cudastreamsynchron": 166, "dma": 166, "volterra": 166, "tesla": 166, "h100": [166, 187], "t3_cuda": 166, "belief": [166, 189], "brand": 166, "cudahostalloc": 166, "cudamemcpi": 166, "doubt": 166, "interestingli": 166, "pronounc": 166, "tick": 166, "__whenev": 166, "memory__": 166, "corrupt": 166, "garbag": 166, "reliabl": [166, 246], "annihil": 166, "legitim": 166, "notori": 166, "inher": [166, 189, 190, 228], "blockag": 166, "afterward": [166, 189, 198], "non_blocking_pin": 166, "ration": 166, "outweigh": [166, 234], "perman": [166, 170], "shuttl": 166, "expedit": 166, "advers": 166, "bu": 166, "monopol": 166, "pinmem_nonblock": [166, 179, 281], "huang": [168, 169, 195, 227, 228], "microbatch": 168, "micro": 168, "educ": [168, 193], "dataclass": 168, "modelarg": 168, "witout": 168, "layernorm": [168, 193, 216], "splitpoint": 168, "pipelinestag": 168, "schedulegpip": 168, "pp_group": 168, "stage_index": 168, "num_stag": 168, "init_distribut": 168, "peer": [168, 280], "manual_model_split": 168, "tracer": 168, "split_spec": 168, "4th": [168, 222], "mirror": 168, "build_stag": 168, "gpipe": 168, "1f1b": 168, "interleaved1f1b": 168, "loopedbf": 168, "num_microbatch": 168, "example_input_microbatch": 168, "tracer_model_split": 168, "tokenwise_loss_fn": 168, "n_microbatch": 168, "pipelining_tutori": 168, "tian": 169, "si": 169, "zeroredundancyoptim": [169, 265], "processgroupnccl": 169, "processgroupgloo": 169, "processgroupmpi": 169, "ucc": 169, "oneccl": [169, 261], "trainum": 169, "emerg": 169, "backenddummi": 169, "hpp": 169, "chrono": 169, "outputtensor": [169, 221], "inputtensor": [169, 221], "allgatheropt": 169, "allreduceopt": 169, "workdummi": 169, "optyp": 169, "ivalu": [169, 221, 235], "recvanysourc": 169, "future_": 169, "iscomplet": 169, "issuccess": 169, "kunsettimeout": 169, "getfutur": 169, "outputtensorvec": 169, "make_intrus": 169, "listtyp": 169, "tensortyp": 169, "markcomplet": 169, "createbackenddummi": 169, "backenddummyconstructor": 169, "__attribute__": 169, "register_backend": 169, "cpp_function": [169, 246], "libraries_dir": 169, "abspath": 169, "dummy_collect": 169, "michela": 170, "paganini": 170, "biolog": 170, "batteri": 170, "subnetwork": 170, "lotteri": 170, "ticket": 170, "destruct": [170, 279], "0a0": [170, 221], "8e8a5e0": 170, "lecun": 170, "1998": 170, "unprun": 170, "basepruningmethod": 170, "adequ": [170, 172], "weight_orig": 170, "_orig": 170, "intact": [170, 174, 258], "weight_mask": 170, "_mask": 170, "forward_pre_hook": 170, "l1_unstructur": 170, "bias_orig": 170, "bias_mask": 170, "pruningcontain": 170, "compute_mask": 170, "ln_structur": 170, "undo": 170, "reassign": 170, "global_unstructur": 170, "apply_mask": 170, "unstructur": 170, "preprun": 170, "pruning_typ": 170, "pruning_tutori": [170, 179, 281], "sink": 171, "5v": 171, "sd": 171, "card": [171, 177], "8gb": 171, "arm": [171, 234], "64bit": 171, "aarch64": 171, "arm64": [171, 221], "raspberrypi": 171, "raspios_arm64": 171, "rpi": 171, "sdcard": 171, "start_x": 171, "128m": 171, "gpu_mem": 171, "commment": 171, "camera_auto_detect": 171, "v4l2": 171, "reboot": 171, "video4linux2": 171, "video0": 171, "picamera": 171, "36fp": 171, "30fp": 171, "framer": 171, "cv2": 171, "cap": [171, 172, 182], "videocaptur": 171, "cap_prop_frame_width": 171, "cap_prop_frame_height": 171, "cap_prop_fp": 171, "bgr": 171, "ret": [171, 174], "input_tensor": 171, "input_batch": 171, "qnnpack": [171, 194], "mobilenet_v3_larg": 171, "109": 171, "233": [171, 172, 176], "885": [171, 234], "204": [171, 234, 246], "195": [171, 176, 277], "132": [171, 172], "82": [171, 172, 234, 251], "prequant": 171, "20fp": 171, "cap_v4l2": 171, "last_log": 171, "frame_count": 171, "ui": [171, 182, 242, 259, 265], "htop": 171, "mug": 171, "allevi": 171, "set_num_thread": 171, "repetit": [172, 246], "maximis": 172, "clipppoloss": 172, "theta_k": 172, "pi_": 172, "lingua": 172, "franca": 172, "defaultdict": [172, 216], "normalparamextractor": 172, "replaybuff": 172, "samplerwithoutreplac": 172, "lazytensorstorag": 172, "explorationtyp": 172, "set_exploration_typ": 172, "probabilisticactor": 172, "tanhnorm": 172, "gae": 172, "is_fork": 172, "get_start_method": 172, "fork": [172, 173, 279], "num_cel": 172, "3e": 172, "max_grad_norm": 172, "sub_batch_s": 172, "cardin": [172, 190], "clip_epsilon": 172, "lmbda": 172, "entropy_ep": 172, "deepmind": [172, 180], "interchang": 172, "panel": [172, 182], "base_env": 172, "inverteddoublependulum": 172, "transmit": 172, "gymwrapp": 172, "loos": 172, "supplementari": 172, "reduce_dim": 172, "cat_dim": 172, "stringent": 172, "unboundedcontinu": 172, "continuousbox": 172, "step_count": 172, "boundeddiscret": 172, "int64": [172, 209], "full_state_spec": 172, "full_action_spec": 172, "boundedcontinu": 172, "732": 172, "succeed": 172, "n_step": [172, 174, 176], "mu_": 172, "d_ob": 172, "d_action": 172, "mu": [172, 185], "actor_net": 172, "lazylinear": 172, "policy_modul": 172, "distribution_class": 172, "distribution_kwarg": 172, "return_log_prob": 172, "prob": [172, 174, 176, 183], "discount": [172, 173, 174], "amort": [172, 174], "value_net": 172, "value_modul": 172, "sample_log_prob": 172, "datacollector": 172, "multisyncdatacollector": 172, "split_traj": 172, "refil": 172, "max_siz": 172, "value_target": 172, "advantage_modul": 172, "value_network": 172, "average_ga": 172, "actor_network": 172, "critic_network": 172, "entropy_bonu": 172, "entropy_coef": 172, "critic_coef": 172, "loss_critic_typ": 172, "smooth_l1": 172, "cosineannealinglr": 172, "pbar": 172, "eval_str": 172, "tensordict_data": 172, "data_view": 172, "subdata": 172, "loss_valu": 172, "loss_object": 172, "loss_crit": 172, "loss_entropi": 172, "cum_reward_str": 172, "stepcount_str": 172, "lr_str": 172, "horizon": 172, "eval_rollout": 172, "set_descript": 172, "42": [172, 173, 176, 246, 277], "302": 172, "46it": 172, "101": 172, "8273": 172, "0967": 172, "0003": 172, "06": [172, 234], "32it": 172, "1484": 172, "16it": 172, "1882": 172, "323": 172, "72it": 172, "2083": 172, "328": 172, "22it": 172, "332": [172, 251], "26it": 172, "2273": 172, "2376": 172, "330": [172, 199], "57it": 172, "2296": 172, "56it": 172, "2343": 172, "01it": 172, "2519": 172, "52it": 172, "8843": 172, "2561": [172, 222], "2509": 172, "43": [172, 179, 234, 246], "337": 172, "86it": 172, "2750": 172, "341": 172, "31it": 172, "2722": 172, "30it": 172, "2742": 172, "16000": [172, 246], "94it": 172, "2745": 172, "17000": 172, "43it": 172, "2811": 172, "18000": [172, 260], "79it": 172, "2823": 172, "19000": 172, "07it": 172, "2837": 172, "10it": 172, "2943": 172, "21000": 172, "64it": 172, "409": 172, "7396": 172, "2909": 172, "22000": 172, "331": 172, "40it": 172, "2974": 172, "23000": 172, "03it": 172, "2989": 172, "24000": [172, 246, 260], "89it": 172, "2866": 172, "25000": 172, "342": 172, "37it": 172, "26000": 172, "05it": 172, "3022": 172, "27000": 172, "343": 172, "73it": 172, "3141": 172, "114": 172, "28000": 172, "88it": 172, "3118": 172, "29000": 172, "42it": 172, "3069": 172, "168": [172, 176, 279], "06it": 172, "3092": 172, "62": [172, 176, 216], "31000": 172, "344": 172, "528": 172, "3105": 172, "3074": 172, "32000": 172, "3107": 172, "112": [172, 251, 276, 277, 279], "33000": 172, "19it": 172, "34000": 172, "68it": 172, "3194": 172, "164": 172, "35000": 172, "3230": 172, "36000": [172, 246], "3288": 172, "214": 172, "37000": 172, "3085": 172, "38000": 172, "09it": 172, "3186": 172, "122": [172, 251], "39000": 172, "27it": 172, "3162": 172, "40000": [172, 246], "36it": 172, "3217": 172, "158": 172, "41000": [172, 246], "346": 172, "625": 172, "1991": 172, "3209": 172, "140": [172, 176], "42000": 172, "67it": 172, "3174": 172, "108": [172, 277], "43000": 172, "15it": 172, "3255": 172, "145": [172, 277], "44000": 172, "3240": 172, "90": [172, 176, 234], "45000": 172, "11it": 172, "3301": 172, "46000": 172, "76it": 172, "3333": 172, "162": [172, 234, 246], "47000": 172, "51it": 172, "48000": 172, "3322": 172, "356": 172, "49000": 172, "3345": 172, "66it": 172, "3298": 172, "248": 172, "videorecord": 172, "553": [172, 179, 281], "reinforcement_ppo": [172, 179, 281], "tower": 173, "cart": 173, "pole": 173, "upright": 173, "classic_control": 173, "action_spac": 173, "observation_spac": 173, "decorrel": 173, "replaymemori": 173, "cyclic": 173, "formul": 173, "r_": 173, "t_0": 173, "r_t": 173, "uncertain": 173, "tempor": 173, "max_a": 173, "univers": [173, 185], "obei": 173, "bellman": 173, "huber": 173, "noisi": [173, 246, 260], "mathcal": 173, "le": [173, 178], "mathrm": 173, "select_act": [173, 174, 176], "eps_start": 173, "eps_end": 173, "eps_decai": 173, "plot_dur": 173, "underneath": [173, 189], "tau": 173, "optimize_model": 173, "s_t": 173, "a_t": 173, "num_episod": [173, 174], "target_net": 173, "reinforcement_q_learn": [173, 179, 281], "calle": [174, 175, 226], "unblock": 174, "idl": [174, 182, 251], "callback": 174, "paus": 174, "update_and_fetch_model": 174, "future_model": 174, "batch_update_s": 174, "batchupdateparameterserv": 174, "curr_update_s": 174, "ps_rref": 174, "local_valu": [174, 175], "fut": [174, 176], "setti": 174, "set_result": 174, "rpc_sync": [174, 175, 176, 226], "image_w": 174, "image_h": 174, "one_hot_indic": 174, "random_": 174, "get_worker_info": [174, 176], "543": 174, "affine1": [174, 176], "affine2": [174, 176], "action_scor": [174, 176], "govern": 174, "select_action_batch": 174, "shortli": 174, "run_episod": [174, 176], "agent_rref": [174, 176], "ep_reward": [174, 176], "num_step": 174, "start_step": 174, "from_numpi": [174, 176], "curr_reward": 174, "saved_log_prob": [174, 176], "rob": 174, "ob_rref": [174, 176], "running_reward": [174, 176], "ob_rank": [174, 176], "ob_info": [174, 176], "observer_nam": [174, 176], "future_act": 174, "pending_st": 174, "select_acion": 174, "ob_id": [174, 176], "log_prob": [174, 176], "stitch": [174, 175], "async": [174, 176, 190, 227, 261], "oberv": [174, 176], "wait_al": 174, "policy_loss": [174, 176], "passiv": [174, 176], "run_work": [174, 175, 176, 226], "n_episod": 174, "print_log": 174, "init_rpc": [174, 175, 176, 226], "agent_nam": [174, 176], "i_episod": [174, 176], "last_reward": [174, 176], "tlast": [174, 176], "taverag": [174, 176], "shutdown": [174, 175, 176, 226], "tik": [174, 226], "tok": [174, 226], "dist_autograd": [175, 176], "num_gpu": 175, "dropout2d": [175, 236], "next_devic": 175, "caller": [175, 226], "call_method": 175, "remote_method": 175, "foo_inst": 175, "parameterserv": 175, "input_devic": 175, "intention": [175, 176, 226], "miscellan": 175, "get_dist_gradi": 175, "get_gradi": 175, "get_param_rref": 175, "cid": 175, "cpu_grad": 175, "k_cpu": 175, "v_cpu": 175, "paramt": 175, "param_rref": [175, 176], "run_parameter_serv": 175, "param_serv": 175, "global_lock": 175, "get_parameter_serv": 175, "parameter_serv": 175, "shut": 175, "offlin": 175, "trainernet": 175, "param_server_rref": 175, "get_global_param_rref": 175, "paramat": 175, "remote_param": [175, 176], "model_output": 175, "run_training_loop": 175, "nueral": 175, "context_id": [175, 176], "get_accuraci": 175, "correct_sum": 175, "trainer_": 175, "traffic": 175, "listen": [175, 277], "subprocess": [175, 246, 261], "rpc_parameter_serv": 175, "solver": 176, "formatter_class": 176, "argumentdefaultshelpformatt": 176, "log_interv": 176, "report_reward": 176, "_max_episode_step": 176, "lifetim": 176, "finfo": 176, "reward_threshold": 176, "finish_episod": 176, "min_reward": 176, "surpass": 176, "ob": 176, "ctrl": 176, "475": 176, "111": [176, 246, 279], "131": 176, "130": [176, 234], "137": 176, "104": 176, "170": [176, 192], "126": 176, "180": [176, 189, 234, 246], "213": 176, "322": [176, 234], "165": 176, "272": [176, 234], "210": 176, "184": 176, "208": [176, 185, 244], "270": [176, 185], "405": 176, "280": 176, "290": 176, "464": 176, "3163778435275": 176, "embeddingt": 176, "destin": [176, 226], "rnnmodel": 176, "ntoken": 176, "ninp": 176, "nhid": 176, "nlayer": 176, "emb_table_rref": 176, "decoder_rref": 176, "_remote_method": 176, "rremot": 176, "_parameter_rref": 176, "parameter_rref": [176, 226], "run_train": 176, "nindic": 176, "driss": 177, "guessou": 177, "multiheadattent": [177, 211], "flashattent": 177, "flash": [177, 199], "andrej": 177, "karpathi": 177, "nanogpt": 177, "causalselfattent": 177, "mine": 177, "166": 177, "616": 177, "726": 177, "amaz": 177, "prof": [177, 234, 251], "export_chrome_trac": 177, "compiled_causal_attention_trac": 177, "concentr": 177, "6090": 177, "3273": 177, "17m": 177, "commit": [177, 214, 222], "ae3a8d5": 177, "causal_upper_left": 177, "causal_lower_right": 177, "is_caus": [177, 193, 195, 211], "causalbia": 177, "corner": 177, "attn_scor": 177, "sdpa_kernel": [177, 195], "scaled_dot_product_attention_tutori": [177, 179, 281], "il": 178, "est": [178, 182], "peindr": 178, "tableau": 178, "paint": 178, "pourquoi": 178, "pa": 178, "essay": 178, "vin": 178, "delicieux": 178, "delici": 178, "wine": 178, "poet": 178, "romancier": 178, "she": 178, "novelist": 178, "vou": 178, "trop": 178, "maigr": 178, "skinni": 178, "condens": [178, 260], "unfold": 178, "phrase": 178, "tatoeba": 178, "eng": 178, "manyth": 178, "anki": 178, "fra": 178, "cold": [178, 249, 265, 268, 270, 281], "froid": 178, "dozen": 178, "trim": [178, 260], "lang": 178, "word2index": 178, "index2word": 178, "word2count": 178, "apostroph": 178, "je": 178, "sui": 178, "noir": 178, "attn_appli": 178, "exhibit": 178, "coher": 178, "grammar": 178, "wander": 178, "freedom": 178, "plot_loss": 178, "judgement": 178, "matshow": 178, "iot": 178, "word2vec": 178, "glove": 178, "autoencod": 178, "seq2seq_translation_tutori": [178, 179, 281], "torchrec_intro_tutori": [179, 190, 281], "torch_compile_tutori": [179, 187, 281], "sdpa": [179, 193, 195, 211, 281], "sphx_glr_intermediate_transformer_building_block": [179, 281], "transformer_building_block": [179, 193, 281], "spatial_transformer_tutori": [179, 180, 281], "na": [179, 281], "sphx_glr_intermediate_mnist_train_na": [179, 281], "tensorboard_profiler_tutori": [179, 182, 281], "torch_compile_conv_bn_fus": [179, 186, 281], "ghassen": 180, "hamrouni": 180, "geometr": 180, "invari": [180, 207], "boil": 180, "affine_grid": 180, "grid_sampl": 180, "speech_recognition_pipeline_tutori": 181, "perfetto": 182, "warmup": [182, 193, 224, 225, 233, 234, 251, 274, 275], "on_trace_readi": [182, 251], "tensorboard_trace_handl": 182, "record_shap": [182, 251], "profile_memori": [182, 251], "dealloc": [182, 261], "torch_tb_profil": 182, "safari": 182, "pytorch_profil": 182, "dropdown": 182, "callstack": 182, "sm": 182, "multiprocessor": 182, "occup": 182, "tooltip": 182, "toolbar": 182, "keyboard": 182, "mous": 182, "resnet18_4work": 182, "76m": 182, "132m": 182, "azur": 182, "torchtbprofil": 182, "memory_demo_1_10": 182, "gpu0": 182, "children": [182, 251], "distributed_bert": 182, "docker": 182, "profiler_tutori": 182, "test_cifar10": 182, "vi": 182, "hub": 182, "kfd": 182, "sys_ptrac": 182, "seccomp": 182, "unconfin": 182, "shm": [182, 226], "8g": 182, "apt": [182, 185, 279], "libjpeg": 182, "whl": [182, 187, 190, 199], "rocm5": 182, "scp": 182, "testset": 183, "testload": 183, "plot_classes_pr": 183, "four_fashion_mnist_imag": 183, "refresh": [183, 190], "datapoint": 183, "thoroughli": 183, "images_to_prob": 183, "preds_tensor": 183, "el": 183, "fig": 183, "arang": [183, 211, 277], "xtick": 183, "ytick": 183, "set_titl": 183, "1f": 183, "add_figur": 183, "global_step": [183, 259], "scroll": 183, "test_siz": 183, "class_prob": 183, "class_probs_batch": 183, "test_prob": 183, "test_label": 183, "add_pr_curve_tensorboard": 183, "class_index": 183, "tensorboard_truth": 183, "tensorboard_prob": 183, "add_pr_curv": 183, "poke": 183, "tacotron2_pipeline_tutori": 184, "wsi": 185, "tissu": 185, "surgeri": 185, "biopsi": 185, "scanner": 185, "pathologist": 185, "diseas": 185, "cancer": 185, "microscop": 185, "tumor": 185, "growth": [185, 209], "treatment": [185, 208, 209], "patient": 185, "000x100": 185, "25x0": 185, "micron": 185, "pyramid": 185, "magnif": 185, "sketch": 185, "histoencod": 185, "jopo666": 185, "openjpeg": 185, "openslid": 185, "pixman": 185, "qq": 185, "libopenjp2": 185, "libpixman": 185, "echo": 185, "brew": 185, "__future__": [185, 250, 258], "hashandl": 185, "nopython": 185, "shutil": 185, "zipfil": 185, "mpl": 185, "cm": 185, "sklearn": 185, "accuracy_scor": 185, "confusion_matrix": 185, "patch_predictor": 185, "iopatchpredictorconfig": 185, "misc": 185, "download_data": 185, "grab_files_from_dir": 185, "overlay_prediction_mask": 185, "wsicor": 185, "wsiread": 185, "rcparam": 185, "dpi": 185, "facecolor": 185, "on_gpu": 185, "suppress": 185, "overli": 185, "suppress_console_output": 185, "redirect_stderr": 185, "stringio": 185, "abnorm": [185, 242], "global_save_dir": 185, "rmdir": 185, "dir_path": 185, "is_dir": 185, "rmtree": 185, "kather": 185, "100k": 185, "wsi_path": 185, "sample_wsi": 185, "sv": 185, "patches_path": 185, "kather100k": 185, "weights_path": 185, "dc": 185, "warwick": 185, "uk": 185, "tcga": 185, "3l": 185, "aa1b": 185, "01z": 185, "dx1": 185, "8923a151": 185, "a690": 185, "40b7": 185, "9e5a": 185, "fcbedfc2394f": 185, "extractal": 185, "pc": 185, "label_list": 185, "patch_list": 185, "dataset_path": 185, "image_ext": 185, "tif": 185, "label_dict": 185, "glass": 185, "mucosa": 185, "deb": 185, "debri": 185, "tum": 185, "colorect": 185, "adenocarcinoma": 185, "epithelium": 185, "adi": 185, "adipos": 185, "muc": 185, "mucu": 185, "stroma": 185, "lym": 185, "lymphocyt": 185, "dataset_class_path": 185, "patch_list_single_class": 185, "file_typ": 185, "xlabel": 185, "ylabel": 185, "211": [185, 234, 251], "176": 185, "178": 185, "209": 185, "232": [185, 246], "abc": 185, "modelabc": 185, "tia": 185, "toolbox": 185, "readthedoc": 185, "_autosummari": 185, "models_abc": 185, "preproc_func": 185, "predictor": [185, 276], "pretrained_weight": 185, "cnnmodel": 185, "fromarrai": 185, "conf": [185, 236, 277], "df_cm": 185, "215": 185, "993000": 185, "000000": 185, "00000": 185, "988636": 185, "011364": 185, "991304": 185, "008696": 185, "996503": 185, "003497": 185, "004808": 185, "990385": 185, "988764": 185, "011236": 185, "996296": 185, "003704": 185, "004785": 185, "985646": 185, "004310": 185, "99569": 185, "input_resolut": 185, "patch_input_shap": 185, "stride_shap": 185, "wsi_ioconfig": 185, "mpp": 185, "return_prob": 185, "ioconfig": 185, "greatest": [185, 245], "unnecessari": [185, 189, 193, 226, 264, 279], "merge_predict": 185, "wsi_output": 185, "wsi_predict": 185, "overlai": 185, "overlay_patch_predict": 185, "overview_resolut": 185, "overview_unit": 185, "wsi_overview": 185, "slide_thumbnail": 185, "label_color_dict": 185, "get_cmap": 185, "set1": 185, "pred_map": 185, "label_info": 185, "return_ax": 185, "histologi": 185, "pohjonen": 185, "joona": 185, "helsinki": 185, "umap": 185, "semantic_segmentor": 185, "deepfeatureextractor": 185, "iosegmentorconfig": 185, "histoencwrapp": 185, "histoenc": 185, "feat_extract": 185, "extract_featur": 185, "num_block": 185, "avg_pool": 185, "infer_batch": 185, "batch_data": 185, "img_patches_devic": 185, "inference_mod": [185, 216], "create_encod": 185, "prostate_medium": 185, "662": 185, "446": 185, "605": 185, "169": [185, 234], "155": 185, "output_resolut": 185, "patch_output_shap": 185, "auto_generate_mask": 185, "otsu": 185, "num_loader_work": 185, "num_postproc_work": 185, "wsi_featur": 185, "umap_reduc": 185, "n_neighbor": 185, "n_compon": 185, "manhattan": 185, "random_st": 185, "fit_transform": 185, "npy": 185, "feat": 185, "5mpp": 185, "4mpp": 185, "histolog": 185, "horac": 186, "orig": 186, "clariti": 186, "batch_norm": [186, 251], "conv_bn_pattern": 186, "conv_bn_replac": 186, "conv_weight": 186, "out_channel": 186, "in_channel": 186, "kernel_h": 186, "kernel_w": 186, "conv_bia": 186, "bn_mean": 186, "bn_var": 186, "bn_weight": 186, "bn_bia": 186, "num_featur": 186, "simplif": 186, "example_input": [186, 194, 213], "conclus": 186, "william": [187, 189, 274], "devel": 187, "elsewher": 187, "torchinductor": [187, 200, 201, 210, 261, 270], "torchtriton": 187, "cu117": 187, "opt_mod": 187, "complex_funct": 187, "complex_conjug": 187, "outer_funct": 187, "_orig_": 187, "dashboard": [187, 259], "struggl": 187, "fn1": 187, "fn2": 187, "f2": 187, "disallow": 187, "zhengxu": 189, "angela": [189, 275], "pian": 189, "pawakapan": 189, "synonym": 189, "dynamic_shap": [189, 276], "graph_signatur": 189, "range_constraint": 189, "stronger": [189, 276], "safeti": [189, 276], "cond": 189, "predic": 189, "true_fn": 189, "false_fn": 189, "while_loop": 189, "associative_scan": 189, "adher": [189, 218], "x0": [189, 192, 210, 277], "x1": [189, 192, 210], "s0": 189, "s1": 189, "x2": 189, "x3": 189, "s3": 189, "s5": 189, "proof": 189, "_log": [189, 277], "set_log": [189, 277], "spit": 189, "create_symbol": 189, "int_oo": 189, "2841": 189, "runtime_assert": 189, "ncreate_symbol": 189, "nruntime_assert": 189, "dynamic_shapes_tutori": 189, "_subclass": [189, 276], "fake_impl": 189, "845": 189, "infer_s": [189, 260], "torchdynamo_extended_debug_guard_ad": 189, "_meta_registr": 189, "2127": 189, "meta_mm": 189, "marker": 189, "aliv": 189, "attract": 189, "friction": 189, "believ": [189, 207], "stanc": [189, 274], "constraintviol": 189, "unrel": [189, 274], "univari": 189, "diverg": [189, 206, 208, 246], "tolist": [189, 216], "unbind": [189, 211], "unback": 189, "nomenclatur": 189, "absenc": [189, 229, 244], "u0": 189, "unhint": 189, "is_compil": 189, "invas": 189, "smart": 189, "bypass": [189, 210], "offend": 189, "smarter": 189, "prevail": 189, "prohibit": 189, "_check_is_s": 189, "guard_size_oblivi": 189, "starter": 189, "guardondatadependentsymnod": 189, "_schema": 189, "is_mut": 189, "export_for_train": 189, "run_decomposit": 189, "mutabl": 189, "conv1d": [189, 222, 261], "cond_pred": 189, "tensorrt": [189, 194], "pt2_path": 189, "aoti_compile_and_packag": [189, 275], "compiler_aot_inductor": 189, "aoti_compil": 189, "aoti_load_packag": [189, 275], "cu121": [190, 199], "fbgemm_gpu": 190, "torchmetr": 190, "relationship": 190, "hash": 190, "conjunct": [190, 197, 198, 261], "ctr": 190, "dlrm": [190, 261], "embedding_collect": 190, "embedding_bag_collect": 190, "vast": [190, 209], "collis": [190, 260], "80g": 190, "embeddingcollect": 190, "jaggedtensor": 190, "keyedjaggedtensor": 190, "keyedtensor": 190, "product_t": 190, "user_t": 190, "id_list_featur": 190, "id_score_list_featur": 190, "id_list_feature_offset": 190, "q1": 190, "product_jt": 190, "user_jt": 190, "q2": 190, "reread": 190, "to_dict": 190, "congrat": 190, "pat": 190, "grasp": 190, "scarc": [190, 227], "hbm": 190, "gb": [190, 193], "shardedembeddingbagcollect": 190, "incredibli": 190, "ton": 190, "everytim": 190, "await": 190, "input_dist": 190, "tbe": 190, "output_dist": 190, "twpooledembeddingshard": 190, "kjt": 190, "canon": 190, "dmp": 190, "hyperoptim": 190, "combinedoptim": 190, "keyedoptim": 190, "in_backward_optimizer_filt": 190, "fused_optim": 190, "fused_param": 190, "apply_optimizer_in_backward": 190, "criteo": 190, "1tb": 190, "penn": 192, "fudan": 192, "databas": [192, 270, 271], "pedestrian": 192, "keypoint": 192, "tv_tensor": 192, "boundingbox": 192, "y0": 192, "image_id": 192, "iscrowd": 192, "pycocotool": 192, "gautamchitni": 192, "git": [192, 199], "cocoapi": 192, "cocodataset": 192, "pythonapi": 192, "get_height_and_width": 192, "ci": 192, "upenn": 192, "edu": 192, "jshi": 192, "ped_html": 192, "pennfudanp": 192, "pedmask": 192, "fudanped00001_mask": 192, "fudanped00002_mask": 192, "fudanped00003_mask": 192, "fudanped00004_mask": 192, "pngimag": 192, "fudanped00001": 192, "fudanped00002": 192, "fudanped00003": 192, "fudanped00004": 192, "tvtensor": 192, "zoo": 192, "fasterrcnn": 192, "rpn": 192, "anchor": 192, "featmap_nam": 192, "rcnn": 192, "train2017": 192, "mikayla": [193, 250, 258], "gawarecki": [193, 250, 258], "jag": [193, 211], "famili": [193, 234, 279], "xformer": 193, "torchtun": 193, "rag": [193, 211], "ux": [193, 211, 213], "key_padding_mask": 193, "qk": 193, "premis": 193, "rmsnorm": 193, "sinusoid": 193, "rotari": [193, 195], "alibi": 193, "threefold": 193, "query_padding_mask": 193, "mha": [193, 207, 211], "nestedtensor": [193, 211, 214, 217, 281], "cleanli": [193, 224, 225, 233, 272, 277], "zipf": [193, 211], "pariti": 193, "attn_mask": 193, "padded_tim": 193, "03454": 193, "padded_peak_memori": 193, "nested_tim": 193, "00612": 193, "nested_peak_memori": 193, "padded_bw_tim": 193, "09337": 193, "padded_bw_peak_mem": 193, "nested_bw_tim": 193, "01452": 193, "nested_bw_peak_mem": 193, "144": [193, 234], "out_proj": [193, 211], "000244140625": 193, "packed_proj": 193, "001556396484375": 193, "001953125": 193, "causal": 193, "breviti": [193, 206, 258], "trust": 193, "ragged": 193, "alibi_mod": 193, "block_mask": 193, "create_nested_block_mask": 193, "e_q": [193, 211], "e_tot": [193, 211], "05x": 193, "swish": 193, "08x": [193, 234], "kv": [193, 195], "lucidrain": 193, "navit": 193, "visiontransform": 193, "readm": 194, "prepare_fx": 194, "convert_fx": 194, "default_weight_observ": 194, "get_default_qconfig_map": 194, "minmaxobserv": 194, "backend_config": 194, "backendpatternconfig": 194, "dtypewithconstraint": 194, "observationtyp": 194, "quantize_fx": 194, "fp32_linear": 194, "quant1": 194, "dequant1": 194, "quant2": 194, "dequant2": 194, "fp32_conv_relu": 194, "quint8_with_constraint": 194, "quant_min_lower_bound": 194, "quant_max_upper_bound": 194, "scale_min_lower_bound": 194, "weighted_int8_dtype_config": 194, "input_dtyp": [194, 197], "weight_dtyp": 194, "qint8": 194, "bias_dtyp": 194, "fuse_conv2d_relu": 194, "convrelu2d": 194, "linear_config": 194, "set_pattern": 194, "set_observation_typ": 194, "output_use_different_observer_as_input": 194, "add_dtype_config": 194, "set_root_modul": 194, "set_qat_modul": 194, "set_reference_quantized_modul": 194, "conv_relu_config": 194, "set_fused_modul": 194, "set_fuser_method": 194, "fused_conv_relu_config": 194, "my_backend": 194, "set_backend_pattern_config": 194, "quant_max": 194, "activation_observ": 194, "with_arg": 194, "quant_min": 194, "qconfig_map": 194, "set_object_typ": 194, "use_bn": 194, "quantizedlinear": 194, "012136868201196194": 194, "zero_point": 194, "qscheme": 194, "per_tensor_affin": 194, "quantizedconvrelu2d": 194, "0029353597201406956": 194, "linear_input_scale_0": 194, "linear_input_zero_point_0": 194, "quantize_per_tensor": [194, 236], "dequantize_2": 194, "015307803638279438": 194, "track_running_stat": 194, "dequantize_1": 194, "get_fbgemm_backend_config": 194, "get_qnnpack_backend_config": 194, "get_native_backend_config": 194, "union": 194, "md": 194, "rfc": [194, 207, 210, 215], "0019": 194, "chien": [195, 227, 228], "chin": [195, 227, 228], "llama3": 195, "freq_ci": 195, "context_parallel": 195, "buffer_seq_dim": 195, "miscalcul": 195, "set_rotate_method": 195, "sdpbackend": 195, "sdpa_exampl": 195, "nhead": [195, 211], "qkv_len": 195, "8192": [195, 246], "flash_attent": 195, "cudnn_attent": 195, "qkv": 195, "cp_sdpa_exampl": 195, "_attent": 195, "context_parallel_unshard": 195, "context_parallel_sdpa_exampl": 195, "device_typ": [195, 269], "mesh_shap": 195, "mesh_dim_nam": [195, 230], "cp_qkv": 195, "cp_out": 195, "atol": [195, 216], "alltoal": [195, 261], "junji": 197, "impedi": 197, "starvat": 197, "deadlock": 197, "indefinit": 197, "diagnost": 197, "flight_record": 197, "torch_nccl_trace_buffer_s": 197, "torch_nccl_dump_on_timeout": 197, "torch_nccl_debug_info_temp_fil": 197, "nccl_trace_rank_": 197, "torch_nccl_trace_cpp_stack": 197, "torch_symbolize_mod": 197, "torch_nccl_enable_tim": 197, "dladdr": 197, "addr2lin": 197, "debuginfowrit": 197, "registerwrit": 197, "_distributed_c10d": [197, 277], "_dump_nccl_trac": 197, "includecollect": 197, "includestacktrac": 197, "onlyact": 197, "pg_config": 197, "default_pg": 197, "pg_statu": 197, "last_enqueued_collect": 197, "last_started_collect": 197, "last_completed_collect": 197, "test_short_pickl": 197, "test_c10d_nccl": 197, "3647": 197, "spawn_main": 197, "record_id": 197, "pg_id": 197, "collective_seq_id": 197, "p2p_seq_id": 197, "op_id": 197, "profiling_nam": 197, "time_created_n": 197, "1724779239936775119": 197, "input_s": 197, "time_discovered_started_n": 197, "time_discovered_completed_n": 197, "1724779239975811724": 197, "retir": 197, "timeout_m": 197, "600000": 197, "is_p2p": 197, "fr_trace": 197, "use_distribut": 197, "torchfrtrac": 197, "culprit": 197, "recod": 197, "trace_": 197, "trace_0": 197, "trace_1": 197, "bounc": 198, "gd": 198, "cufil": 198, "4kb": 198, "storage_align": 198, "gdsfile": 198, "skip_data": 198, "faketensormod": 198, "gds_register_buff": 198, "cufilebufregist": 198, "save_storag": 198, "cufilewrit": 198, "load_storag": 198, "cufileread": 198, "gpu_direct_storag": [198, 217, 281], "hdcharl": 199, "pg509": 199, "myenv": 199, "facebookresearch": 199, "vit_h": 199, "fbaipublicfil": 199, "segment_anyth": 199, "sam_vit_h_4b8939": 199, "sam_checkpoint_base_path": 199, "image_encod": 199, "instant": 199, "protect": 199, "bf16": [199, 210, 222, 234], "43m": 199, "17gb": 199, "7x": 199, "186": [199, 234], "16m": 199, "95m": 199, "24gb": 199, "autotun": [199, 214, 261, 270, 271, 273], "int4": 199, "int8dynamicactivationint8weightconfig": 199, "int8weightonlyconfig": 199, "int4weightonlyconfig": 199, "apply_dynamic_qu": 199, "apply_weight_only_int8_qu": 199, "04m": 199, "58gb": 199, "int32": 199, "force_fuse_int_mm_with_mul": 199, "78m": 199, "37gb": 199, "unquant": 199, "epilogu": [199, 210], "enlarg": 199, "39gb": 199, "10x": [199, 222], "appl": 199, "677": 199, "28m": 199, "729": 199, "65m": 199, "gpu_quantization_torchao_tutori": [199, 217, 281], "chunyuan": [200, 210], "bao": [200, 275], "cpp_wrapper": 200, "opt_fn": 200, "assert_size_strid": [200, 277], "empty_strid": [200, 221, 251, 277], "cpp_fused_add_lift_fresh_0": 200, "c_void_p": [200, 277], "constant0": 200, "inductor_entry_cpp": 200, "19l": 200, "cppwrappercodecach": 200, "cpp_wrapper_src": 200, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 200, "_wrap_func": 200, "args_tensor": 200, "constants_tensor": 200, "_deviceguard": [200, 277], "lift_fresh": 200, "stream0": [200, 277], "get_cuda_stream": 200, "triton_poi_fused_add_lift_fresh_0": 200, "run_intermediate_hook": [200, 277], "cudaguard": 200, "device_guard": 200, "loadkernel": 200, "torchinductor_us": 200, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 200, "cubin": [200, 271, 275], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 200, "cudeviceptr": 200, "var_0": 200, "reinterpret_cast": 200, "var_1": 200, "var_2": 200, "var_3": 200, "kernel_args_var_0": 200, "cudastream_t": 200, "getcurrentcudastream": 200, "launchkernel": 200, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 200, "zhaoqiong": 201, "zheng": 201, "xu": 201, "han": 201, "msvc": 201, "desktop": 201, "checkmark": 201, "cmd": [201, 277], "ex": [201, 216, 242], "vc": 201, "auxiliari": [201, 222], "vcvars64": 201, "opt_foo1": 201, "9074e": 201, "3994e": 201, "3894e": 201, "2630e": 201, "3060e": 201, "1833e": 201, "4016e": 201, "1905e": 201, "0637e": 201, "3648e": 201, "3728e": 201, "2863e": 201, "6888e": 201, "5442e": 201, "6790e": 201, "2025e": 201, "2647e": 201, "2684e": 201, "2483e": 201, "2845e": 201, "7747e": 201, "2028e": 201, "1431e": 201, "7196e": 201, "5304e": 201, "1945e": 201, "6654e": 201, "7376e": 201, "3644e": 201, "3600e": 201, "0157e": 201, "7200e": 201, "0146e": 201, "8175e": 201, "4057e": 201, "8119e": 201, "2853e": 201, "2773e": 201, "5082e": 201, "4615e": 201, "4140e": 201, "2130e": 201, "0762e": 201, "3914e": 201, "1122e": 201, "6895e": 201, "8852e": 201, "3310e": 201, "4101e": 201, "8318e": 201, "2355e": 201, "9290e": 201, "3707e": 201, "3754e": 201, "3768e": 201, "8970e": 201, "1171e": 201, "9944e": 201, "2553e": 201, "3394e": 201, "3428e": 201, "8400e": 201, "1756e": 201, "0654e": 201, "7973e": 201, "4019e": 201, "1886e": 201, "9194e": 201, "3632e": 201, "1811e": 201, "1615e": 201, "6622e": 201, "2089e": 201, "2011e": 201, "0659e": 201, "0892e": 201, "1932e": 201, "3888e": 201, "3898e": 201, "3218e": 201, "4139e": 201, "4000e": 201, "1192e": 201, "0175e": 201, "6432e": 201, "0498e": 201, "4115e": 201, "3212e": 201, "0964e": 201, "0127e": 201, "7244e": 201, "2799e": 201, "3595e": 201, "0907e": 201, "7191e": 201, "4062e": 201, "3672e": 201, "8502e": 201, "5216e": 201, "6046e": 201, "icx": 201, "win64": 201, "inductor_window": 202, "mobile_interpret": 205, "1369": 206, "weed": 206, "state_sum": 206, "addcmul_": 206, "addcdiv_": 206, "clr": 206, "_make_spars": 206, "grad_indic": 206, "sparse_coo_tensor": [206, 209], "coalesc": [206, 245], "_indic": 206, "grad_valu": 206, "_valu": 206, "sparse_mask": [206, 209], "std_valu": 206, "sqrt_": 206, "state_sum2": 206, "masked_grad": 206, "get_data": [206, 208], "std2": 206, "masked_tensor": [206, 208, 209], "to_spars": [206, 209], "param2": [206, 218], "glanc": [206, 258], "dodg": 206, "make_spars": 206, "brittl": 206, "argu": 206, "densif": 206, "csc": [206, 209], "bsr": [206, 209], "bsc": 206, "inconveni": 206, "conflat": 206, "disentangl": 206, "purposefulli": 206, "relianc": 206, "unreli": [206, 208], "maskedarrai": [206, 214], "maskedtensor_adagrad": [206, 217, 281], "maskedtensor_overview": [207, 208, 209, 217, 281], "Their": [207, 209], "unspecifi": [207, 208, 209, 214], "invalid": [207, 208, 209, 246, 261], "intersect": 207, "logical_or": 207, "to_tensor": [207, 208], "mt0": 207, "get_mask": [207, 208], "mt1": 207, "revisit": 207, "ma": 207, "masked_arrai": 207, "mask0": 207, "mask1": 207, "necessit": 207, "maskedtensor_advanced_semant": [207, 217, 281], "as_masked_tensor": 208, "as_tensor": 208, "afterthought": 208, "born": 208, "recur": 208, "inabl": 208, "10729": 208, "troubl": 208, "52248": 208, "frustrat": 208, "4132": 208, "67180": 208, "longstand": 208, "unsaf": 208, "61474": 208, "nanmax": 208, "nanmin": 208, "lend": 208, "substructur": 209, "sparse_coo": 209, "sparse_csr": 209, "ndim": 209, "nse": 209, "sparse_tensor_data": 209, "sparse_tensor_mask": 209, "dense_masked_tensor": 209, "to_sparse_coo": 209, "to_sparse_csr": 209, "nuanc": 209, "crow_indic": 209, "col_indic": 209, "nnz": 209, "to_dens": 209, "is_spars": 209, "is_sparse_coo": 209, "is_sparse_csr": 209, "mt": 209, "mt2": 209, "surfac": 209, "synergi": 209, "invest": 209, "maskedtensor_spars": [209, 217, 281], "lesli": 210, "fang": 210, "onednn": [210, 222, 234, 235, 242], "torchinductor_max_autotune_gemm_backend": 210, "upfront": [210, 250], "torchinductor_freez": 210, "log_autotuning_result": 210, "amp_en": 210, "outperform": 210, "linear_unari": 210, "64x16": 210, "32x16": 210, "cpp_packed_gemm_0": 210, "2142": 210, "_linear_pointwis": 210, "mkldnn": [210, 222, 234], "anymor": [210, 259], "cpp_fused__to_copy_relu_1": 210, "async_compil": [210, 277], "cpp_pybind": 210, "kernel_micro_gemm_amx_kernel_32_2": 210, "amxstat": 210, "amx_stat": 210, "lda": 210, "ldb": 210, "ldc": 210, "uint8_t": 210, "tilecfg_row": 210, "kernel_micro_gemm": 210, "constexpr": [210, 277], "num_thread": [210, 246], "64l": 210, "omp": [210, 279], "tid": 210, "omp_get_thread_num": 210, "mc_block_id": 210, "num_mc_blocks_per_thread": 210, "n_block_start": 210, "n_block_end": 210, "nc_block": 210, "kc": 210, "k_block_start": 210, "k_block_end": 210, "kc_block": 210, "nci": 210, "nc_block_end": 210, "m_end": 210, "m_start": 210, "16l": 210, "div_floor_integ": 210, "n_end": 210, "n_start": 210, "loadu": 210, "local_acc_buf": 210, "nr": 210, "tmp4": [210, 277], "tmp5": 210, "tmp6": 210, "tmp7": 210, "tmp8": 210, "32l": 210, "invalu": 211, "nt": 211, "nested_tensor": 211, "padded_out_tensor": 211, "to_padded_tensor": 211, "poss": 211, "is_nest": 211, "irregularli": 211, "sep": 211, "legal": 211, "nt_reshap": 211, "nt_transpos": 211, "nt_mm": 211, "nt3": 211, "nt4": 211, "nt5": 211, "embrac": 211, "padded_sent": 211, "nested_sent": 211, "semnat": 211, "padded_sentences_for_softmax": 211, "e_k": 211, "e_v": 211, "dropout_p": 211, "query_proj": 211, "key_proj": 211, "value_proj": 211, "e_out": 211, "e_head": 211, "l_t": 211, "l_": 211, "attn_output": 211, "todo": 211, "unflatten": 211, "law": 211, "zipf_sentence_length": 211, "unigram": 211, "wikitext": 211, "858": 211, "sentence_length": 211, "ibatch": 211, "gen_batch": 211, "jagged_to_pad": 211, "jt": 211, "padding_v": 211, "padded_queri": 211, "padded_kei": 211, "padded_valu": 211, "default_tim": [211, 252], "output_nest": 211, "time_nest": 211, "output_pad": 211, "time_pad": 211, "entry_length": 211, "compiled_mha": 211, "compiled_output_nest": 211, "compiled_time_nest": 211, "compiled_output_pad": 211, "compiled_time_pad": 211, "daniil": 213, "lyakhov": 213, "aamir": 213, "nazir": 213, "suslov": 213, "yamini": 213, "nimmagadda": 213, "kozlov": 213, "openvinoquant": 213, "quantize_pt2": 213, "prepare_pt2": 213, "convert_pt2": 213, "traced_b": 213, "disable_patch": 213, "exported_model": 213, "asymmetr": 213, "prelu": 213, "quantizationpreset": 213, "model_typ": 213, "modeltyp": 213, "ignored_scop": 213, "layer_1": 213, "layer_2": 213, "layer_3": 213, "ignoredscop": 213, "regex": 213, "layer_": 213, "subgraph": 213, "target_devic": 213, "cpu_spr": 213, "targetdevic": 213, "fold": 213, "prepared_model": 213, "fold_quant": 213, "optimized_model": 213, "smoothquant": 213, "biascorrect": 213, "calibration_load": 213, "transform_fn": 213, "data_item": 213, "calibration_dataset": 213, "smooth_quant": 213, "fast_bias_correct": 213, "pypi": [214, 236], "optimizi": 214, "nnapi": 214, "autovector": [214, 220], "maskedtensor": [214, 217, 281], "coo": 214, "csr": 214, "flight": 214, "flightrecord": 214, "autoload": 214, "gpudirect": [214, 217, 281], "yuanhao": 215, "ji": 215, "effortless": 215, "gaudi": 215, "hpu": 215, "huawei": 215, "torch_device_backend_autoload": 215, "torch_foo": 215, "_autoload": 215, "entry_point": 215, "habana_framework": 215, "__autoload": 215, "device_backend": 215, "is_load": 215, "entrypoint": 215, "_force_cutlass": 216, "2560": 216, "10240": 216, "dense_output": 216, "dense_t": 216, "blocked_autorang": [216, 224, 246], "median": [216, 246, 260], "1e3": 216, "sparse_output": 216, "sparse_t": 216, "80gb": 216, "870m": 216, "630m": 216, "382x": 216, "weightnormsparsifi": 216, "preprocess_validation_funct": 216, "384": [216, 276], "only_second": 216, "return_overflowing_token": 216, "return_offsets_map": 216, "sample_map": 216, "overflow_to_sample_map": 216, "example_id": 216, "sequence_id": 216, "offset_map": 216, "preprocess_train_funct": 216, "start_posit": 216, "end_posit": 216, "start_char": 216, "answer_start": 216, "end_char": 216, "context_start": 216, "context_end": 216, "compute_metr": 216, "start_logit": 216, "end_logit": 216, "n_best": 216, "max_answer_length": 216, "example_to_featur": 216, "predicted_answ": 216, "feature_index": 216, "start_index": 216, "argsort": 216, "end_index": 216, "logit_scor": 216, "best_answ": 216, "prediction_text": 216, "theoretical_answ": 216, "measure_execution_tim": 216, "dataset_for_model": 216, "remove_column": 216, "set_format": 216, "batch_size_to_time_sec": 216, "column_nam": 216, "p50": 216, "automodelforquestionansw": 216, "squad_dataset": 216, "tokenized_squad_dataset": 216, "data_col": 216, "datacollatorwithpad": 216, "hyperparam": 216, "training_arg": 216, "trainingargu": 216, "num_train_epoch": 216, "lr_scheduler_typ": 216, "per_device_train_batch_s": 216, "per_device_eval_batch_s": 216, "eval_dataset": 216, "fp16_baselin": 216, "fp16_time": 216, "cuda_fp16": 216, "exact_match": 216, "53358561967833": 216, "9280493093186": 216, "927572380751371": 216, "607915310189128": 216, "18846387788653": 216, "91255673766136": 216, "sparsity_level": 216, "elemen": 216, "sparse_block_shap": 216, "zeros_per_block": 216, "sparse_config": 216, "tensor_fqn": 216, "fqn": [216, 227, 228], "named_modul": [216, 252], "paramter": 216, "bertoutput": 216, "parametrizedlinear": 216, "fakespars": 216, "elementwise_affin": 216, "59602649006622": 216, "51610004515979": 216, "set_printopt": [216, 246], "edgeitem": 216, "0237": 216, "0130": 216, "0462": 216, "0272": 216, "0436": 216, "0492": 216, "0844": 216, "0340": 216, "0302": 216, "0350": 216, "0303": 216, "0175": 216, "0529": 216, "0327": 216, "0213": 216, "0258": 216, "0239": 216, "0380": 216, "0562": 216, "0432": 216, "0598": 216, "0262": 216, "0227": 216, "0244": 216, "0921": 216, "0784": 216, "0761": 216, "0225": 216, "0395": 216, "0684": 216, "0344": 216, "metrics_spars": 216, "sparse_perf": 216, "43897824030275": 216, "48718950090766": 216, "621004460379481": 216, "368514601141214": 216, "702805917710066": 216, "244": [216, 242], "19364519417286": 216, "87x": 216, "torchao": [217, 281], "vmap_recip": [217, 220, 281], "uniform": [218, 279], "orthogonal_": 218, "skip_init": 218, "param1": 218, "kaiming_uniform_": 218, "register_buff": 218, "some_buff": 218, "intial": 218, "42368": 220, "unsuccessfulli": 220, "rummag": 220, "shenanigin": 220, "8304": 220, "23475": 220, "performantli": 220, "7786": 220, "batch_of_sampl": 220, "grad_sampl": 220, "ivan": 221, "kobzarev": 221, "mac": 221, "use_vulkan": 221, "vulkan_wrapp": 221, "use_vulkan_wrapp": 221, "libvulkan": 221, "vulkansdk": 221, "lunarg": 221, "vulkan_sdk": 221, "vulkan_sdk_root": 221, "install_vulkan": 221, "pytorch_root": 221, "use_vulkan_shaderc_runtim": 221, "macosx_deployment_target": 221, "41237a4": 221, "android_abi": 221, "v8a": 221, "build_android": 221, "pytorch_android": 221, "aar": 221, "build_pytorch_android": 221, "script_model": 221, "mobilenet2": 221, "32bit": 221, "mobile_optim": 221, "optimize_for_mobil": 221, "script_model_vulkan": 221, "optimization_blocklist": 221, "mobileoptimizertyp": 221, "vulkan_automatic_gpu_transf": 221, "is_vulkan_avail": 221, "tensor_vulkan": 221, "tensor_output_vulkan": 221, "tensor_output": 221, "_adaptive_avg_pool2d": 221, "_cat": 221, "clamp": 221, "memory_format": [221, 222, 235], "hardtanh_": 221, "relu_": 221, "transpose_": 221, "upsample_nearest2d": 221, "floatbuff": 221, "allocatefloatbuff": 221, "fromblob": 221, "mmodul": 221, "test_app": 221, "testapp": 221, "mainact": 221, "l133": 221, "apploc": 221, "asset": 221, "gradl": 221, "installmbvulkanlocalbasedebug": 221, "mbq": 221, "swiftshad": 221, "googlesourc": 221, "tmul": 222, "gen": 222, "processor": [222, 235, 261, 265, 279], "avx": [222, 235], "vnni": [222, 235], "024": 222, "channels_last": [222, 235], "conv3d": [222, 261], "conv_transpose1d": 222, "conv_transpose2d": 222, "conv_transpose3d": 222, "baddbmm": 222, "addbmm": 222, "onednn_verbos": 222, "verbose_on": 222, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 222, "openmp": [222, 242], "nthr": 222, "isa": 222, "prim_templ": 222, "prop_kind": 222, "memory_descriptor": 222, "problem_desc": 222, "exec_tim": 222, "exec": [222, 277], "reorder": [222, 234, 242, 261], "undef": 222, "src_f32": 222, "f0": 222, "dst_f32": 222, "scratchpad": 222, "avx512_core_amx_bf16": 222, "forward_train": 222, "src_bf16": 222, "acdb": 222, "wei_bf16": 222, "abcd16b16a2b": 222, "bia_f32": 222, "dst_bf16": 222, "alg": 222, "convolution_direct": 222, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 222, "628906": 222, "brg": 222, "avx512_core_amx_int8": 222, "src_s8": 222, "wei_s8": 222, "ba16a64b4a": 222, "dst_s8": 222, "1x30522": 222, "30522x768": 222, "1x768": 222, "66382": 222, "lazo": [224, 225, 233, 272, 277], "get_device_cap": [224, 277], "benchmark_torch_function_in_microsecond": 224, "eager_runtim": 224, "compiled_runtim": 224, "747": 224, "2437149845064u": 224, "392": 224, "07384741178u": 224, "linearlr": 225, "compiling_optimizer_lr_schedul": [225, 268, 281], "set_device_map": 226, "worker0": 226, "worker1": 226, "payload": [226, 258], "infiniband": 226, "cma": 226, "comm_mod": [226, 229], "pend": [226, 259], "current_stream": 226, "tensorpiperpcbackendopt": 226, "num_worker_thread": 226, "rpc_backend_opt": 226, "34x": 226, "3145179748535156": 226, "06867480278015137": 226, "luca": [227, 228], "pasqualin": [227, 228], "iri": [227, 228, 230], "rodrigo": [227, 228], "kumpera": [227, 228], "async_sav": 227, "checkpoint_size_per_rank": 227, "number_of_rank": 227, "pageabl": 227, "get_state_dict": [227, 228], "set_state_dict": [227, 228], "appstat": [227, 228], "protocol": [227, 228], "load_stat_dict": [227, 228], "sharded_state_dict": [227, 228], "optim_state_dict": [227, 228], "run_fsdp_checkpoint_save_exampl": [227, 228], "checkpoint_futur": 227, "checkpoint_id": [227, 228], "_step": 227, "attack": 227, "filesystemwrit": 227, "storagewrit": 227, "cached_state_dict": 227, "cache_staged_state_dict": 227, "storage_writ": 227, "adddition": 228, "run_fsdp_checkpoint_load_exampl": 228, "run_checkpoint_load_exampl": 228, "format_util": 228, "torch_to_dcp": 228, "dcp_to_torch": 228, "dcp_to_torch_sav": 228, "torch_save_to_dcp": 228, "torch_save_checkpoint_dir": 228, "torch_save_checkpoint": 228, "_new": 228, "anshul": 229, "sinha": 229, "distributedtensor": 229, "interoper": 229, "mlpmodul": 229, "generate_comm_debug_tracing_t": 229, "noise_level": 229, "log_comm_debug_tracing_table_to_fil": 229, "file_nam": [229, 276], "transformer_operation_log": 229, "generate_json_dump": 229, "c10d_function": 229, "comm_mode_features_exampl": 229, "effortlessli": 230, "homogen": 230, "num_node_devic": 230, "shard_rank_list": 230, "shard_group": 230, "current_shard_group": 230, "current_replicate_group": 230, "shard_factor": 230, "replicate_group_rank": 230, "replicate_group": 230, "2d_setup": 230, "thru": 230, "get_group": 230, "mesh_dim": 230, "2d_setup_with_device_mesh": 230, "meshshap": 230, "mesh_3d": 230, "hsdp_mesh": 230, "tp_group": 230, "_foreach": 233, "horizton": 233, "sunita": 234, "nadamp": 234, "graviton3": 234, "sve": 234, "simd": 234, "graviton2": 234, "bla": 234, "acl": 234, "c7g": 234, "bfloa16": 234, "r7g": 234, "m7g": 234, "4vcpu": 234, "profileract": [234, 251], "myneuralnetwork": 234, "linear_relu_stack": 234, "11008": 234, "pred_probab": 234, "set_grad_en": 234, "mymodel_infer": 234, "self_cpu_time_tot": [234, 251], "813": 234, "255m": 234, "177": 234, "032m": 234, "160u": 234, "054m": 234, "540": 234, "180u": 234, "738m": 234, "201": 234, "955m": 234, "985": 234, "282m": 234, "421m": 234, "043m": 234, "810u": 234, "356m": 234, "179": 234, "388m": 234, "896": 234, "940u": 234, "mmla": 234, "torchbench": 234, "dnnl_default_fpmath_mod": 234, "943": 234, "052": 234, "507m": 234, "167": [234, 279], "653m": 234, "838": 234, "265u": 234, "107": 234, "593m": 234, "358": 234, "643u": 234, "167m": 234, "262": [234, 277], "911m": 234, "060": [234, 281], "533m": 234, "414m": 234, "892m": 234, "307u": 234, "281m": 234, "934m": 234, "849": [234, 246], "670u": 234, "fastmath": 234, "821": 234, "914": 234, "713m": 234, "244m": 234, "711": 234, "220u": 234, "322m": 234, "307": 234, "740u": 234, "094": 234, "495m": 234, "921": 234, "736m": 234, "131m": 234, "441m": 234, "803u": 234, "942m": 234, "186m": 234, "720": 234, "930u": 234, "848": 234, "944": 234, "148m": 234, "141": [234, 246], "309m": 234, "706": 234, "545u": 234, "916m": 234, "720u": 234, "431m": 234, "471m": 234, "951": 234, "170m": 234, "027m": 234, "243m": 234, "143u": 234, "928m": 234, "237m": 234, "185u": 234, "47x": 234, "noteworthi": 234, "till": 234, "torch_mkldnn_matmul_min_dim": 234, "612m": 234, "124m": 234, "620u": 234, "951m": 234, "170u": 234, "423m": 234, "034": 234, "691m": 234, "988": 234, "628m": 234, "520m": 234, "945m": 234, "817u": 234, "382m": 234, "136": 234, "910u": 234, "781": 234, "604m": 234, "295": 234, "437m": 234, "477m": 234, "516m": 234, "558": 234, "387u": 234, "708m": 234, "499m": 234, "788": 234, "627m": 234, "982m": 234, "385m": 234, "617u": 234, "932m": 234, "297": 234, "369m": 234, "487m": 234, "038m": 234, "060m": 234, "300u": 234, "013m": 234, "106": 234, "710u": 234, "521m": 234, "750m": 234, "216": 234, "475m": 234, "033m": 234, "110u": 234, "285m": 234, "345m": 234, "725u": 234, "margin": 234, "thp_mem_alloc_en": 234, "321": 234, "069m": 234, "568m": 234, "613m": 234, "602m": 234, "682": 234, "007u": 234, "777m": 234, "697": 234, "082m": 234, "329": 234, "097m": 234, "547m": 234, "325": 234, "115m": 234, "626m": 234, "avx512": 235, "amx": [235, 236], "xmx": 235, "claus": [235, 236, 280], "nhwc": 235, "cooper": 235, "roialign": 235, "intel_extension_for_pytorch": [235, 269], "ipex": [235, 265, 269], "bertmodel": 235, "seq_length": 235, "check_trac": 235, "cache_en": 235, "argc": 235, "cerr": 235, "memoryformat": 235, "channelslast": 235, "intel_ext_pt_cpu": 235, "libpytorch_path": 235, "ldd": 235, "workspac": [235, 277], "cmake_have_libc_pthread": 235, "0x00007f3cf98e0000": 235, "libc10": 235, "0x00007f3cf985a000": 235, "libintel": 235, "ext": 235, "0x00007f3cf70fc000": 235, "libtorch_cpu": [235, 260], "0x00007f3ce16ac000": 235, "libdnnl_graph": 235, "0x00007f3cde954000": 235, "mitig": [236, 261], "conv2_drop": 236, "fc1_drop": 236, "lenet_mnist_model": 236, "pytorch_fx": 236, "accuracy_criterion": 236, "neural_compressor": 236, "calib_dataload": 236, "eval_dataload": 236, "q_model": 236, "top1metr": 236, "quant_aware_train": 236, "training_func": 236, "q_func": 236, "dummy_dataset": 236, "dummydataset": 236, "2021": 236, "linearrelu": 236, "best_configur": 236, "best_model_weight": 236, "int8_model": 236, "gui": [242, 265], "emit_itt": 242, "8080": 242, "path_of_launch": 242, "iteration_n": 242, "range_push": 242, "range_pop": 242, "oneapi": 242, "brown": 242, "percerntag": 242, "jitter": [242, 246], "enrich": 242, "ittsampl": 242, "292820": 242, "unmark": 242, "iteration_": 242, "basefold": 242, "bash_sourc": 242, "gradcam": 244, "283": 244, "occlus": 244, "deconvolut": 244, "guidedbackprop": 244, "deeplift": 244, "gradientshap": 244, "forward_func": 244, "pictori": 244, "textual": 244, "distractor": 244, "visualize_text": 244, "imdb_torchtext_interpret": 244, "gilbert": 244, "tanner": 244, "gilberttann": 244, "captum_recip": [244, 249, 257, 281], "carilli": 245, "ordinarili": 245, "ture": 245, "kepler": 245, "maxwel": 245, "pascal": 245, "modest": 245, "in_siz": 245, "out_siz": 245, "num_lay": 245, "underflow": 245, "scaler": 245, "unscal": 245, "unscale_": 245, "rough": 245, "binary_cross_entropy_with_logit": 245, "suspect": 245, "docstr": 245, "subregion": 245, "backtrac": 245, "torch_show_cpp_stacktrac": 245, "amp_recip": [245, 249, 257, 281], "tediou": 246, "mistak": 246, "mul_sum": 246, "0x7fb10400d0f0": 246, "batched_dot_mul_sum": 246, "379": 246, "0x7fb103d67048": 246, "batched_dot_bmm": 246, "sub_label": 246, "0x7fb103d54080": 246, "118": 246, "0x7fb16935d2e8": 246, "2775": 246, "0x7fb10400d080": 246, "181": 246, "min_run_tim": [246, 260], "274": 246, "748": 246, "432": [246, 251], "22657": 246, "11899": 246, "609": 246, "23098": 246, "27246": 246, "267073": 246, "118823": 246, "189": 246, "2782": 246, "7471": 246, "11874": 246, "173": 246, "7264": 246, "27824": 246, "100060": 246, "121499": 246, "188": 246, "2773": 246, "6111": 246, "12833": 246, "6295": 246, "27062": 246, "71804": 246, "120365": 246, "103": 246, "2804": 246, "6764": 246, "11871": 246, "6640": 246, "27592": 246, "73003": 246, "120083": 246, "callgrindstat": [246, 260], "trip": [246, 260], "batched_dot": 246, "stark": 246, "fuzzer": 246, "10000000": 246, "k0": 246, "k1": 246, "discontigu": 246, "725": 246, "1468": 246, "5039": 246, "2140": 246, "1296": 246, "1598": 246, "310": 246, "519": 246, "763": 246, "1082": 246, "473": 246, "16384": 246, "12642115": 246, "4800": 246, "20400": 246, "110000": 246, "400000": 246, "493": 246, "1100": [246, 260], "2440": 246, "870": 246, "2030": 246, "495": 246, "23600": 246, "62374": 246, "90000": 246, "240372": 246, "69": 246, "40156": 246, "2670": 246, "opac": 246, "complementari": 246, "insensit": 246, "environment": 246, "cpp_lib": 246, "cpp_sourc": 246, "batched_dot_src": 246, "extra_cflag": 246, "extra_include_path": 246, "getenv": 246, "batched_dot_mul_sum_v0": 246, "batched_dot_mul_sum_v1": 246, "module_import_str": 246, "67631": 246, "importlib": 246, "spec_from_file_loc": 246, "repr": 246, "module_from_spec": 246, "exec_modul": 246, "textwrap": 246, "pretty_print": 246, "t_baselin": 246, "stats_v0": 246, "collect_callgrind": 246, "stats_v1": 246, "as_standard": [246, 260], "denois": 246, "cancel": [246, 261], "ing": 246, "wrap_pybind_function_impl_": 246, "linewidth": 246, "valgrind_wrapp": [246, 260], "timer_interfac": [246, 260], "0x7fb0f06e7630": 246, "2392671": 246, "4367": 246, "rel_with_deb_info": [246, 260], "0x7fb10400d208": 246, "2378978": 246, "functioncount": [246, 260], "0x7fb1000ab358": 246, "0x000000000020d9e0": 246, "0x000000000020db10": 246, "integer_sequ": 246, "0ul": 246, "1ul": 246, "5200": 246, "undefinedtensorimpl": 246, "reset_": 246, "5935": 246, "0x000000000022c0e0": 246, "13693": 246, "impos": [247, 258], "changing_default_devic": [247, 257, 281], "subsidiari": [248, 262, 263], "neighbor": 248, "sharp": 248, "blurri": 248, "defining_a_neural_network": [248, 249, 257, 281], "what_is_state_dict": [249, 257, 263, 281], "saving_and_loading_models_for_infer": 249, "custom_dataset_transforms_load": 249, "dynamic_quant": 249, "warmstarting_model_using_parameters_from_a_different_model": [249, 257, 262, 281], "zeroing_out_gradi": [249, 257, 264, 281], "mobile_perf": 249, "regional_compil": [249, 266, 268, 281], "syntaxerror": [249, 257, 281], "undesir": 250, "unload": 250, "somemodul": 250, "overwritten": [250, 264, 279], "param_in_model": 250, "param_in_state_dict": 250, "set_swap_module_params_on_convers": [250, 258], "swap_tensor": [250, 257, 281], "module_load_state_dict_tip": [250, 257, 281], "shivam": 251, "raikundalia": 251, "model_infer": 251, "_fork": 251, "509m": 251, "503m": 251, "931m": 251, "597m": 251, "700m": 251, "585m": 251, "_convolut": 251, "450m": 251, "mkldnn_convolut": 251, "838m": 251, "114m": 251, "556m": 251, "693m": 251, "734": 251, "_batch_norm_impl_index": 251, "482m": 251, "724": 251, "100u": 251, "native_batch_norm": 251, "229m": 251, "109m": 251, "705": 251, "450u": 251, "631m": 251, "286u": 251, "668m": 251, "292m": 251, "988u": 251, "549m": 251, "dnn": 251, "group_by_input_shap": 251, "008m": 251, "956m": 251, "909m": 251, "834m": 251, "332m": 251, "303m": 251, "273m": 251, "233m": 251, "751m": 251, "occurr": 251, "666m": 251, "484m": 251, "_convolution_nogroup": 251, "thnn_conv2d": 251, "thnn_conv2d_forward": 251, "im2col_kernel": 251, "844m": 251, "sgemm_32x32x32_nn": 251, "206m": 251, "sgemm_32x32x32_nn_vec": 251, "093m": 251, "015m": 251, "567m": 251, "871m": 251, "560u": 251, "convolution_overrid": 251, "gen_conv": 251, "216u": 251, "640u": 251, "632u": 251, "conv_reord": 251, "880u": 251, "448u": 251, "486m": 251, "max_pool2d_with_indic": 251, "kb": 251, "572": 251, "resize_": 251, "masked_select": 251, "064m": 251, "viewer": 251, "439": 251, "_conv_forward": 251, "1051": 251, "_call_impl": 251, "016m": 251, "659m": 251, "skip_first": 251, "step_num": 251, "profiler_recip": [251, 257, 281], "convolutionbackward0": 252, "0004501500000060332": 252, "t_larg": 252, "65535": 252, "00010820300008163031": 252, "fw_hook": 252, "register_forward_hook": 252, "ceil_mod": 252, "015": [252, 257, 281], "reasoning_about_shap": [252, 257, 281], "021": 257, "tensorboard_with_pytorch": [257, 259, 281], "timer_quick_start": [257, 260, 281], "tuning_guid": [257, 261, 281], "hereaft": 258, "__class__": 258, "__slots__": 258, "pertin": 258, "__torch_dispatch__": [258, 276], "new_param": 258, "myquantizedlinearweight": 258, "elem": 258, "__setattr__": 258, "module_load": 258, "__torch_function__": 258, "param_kei": 258, "scalar_valu": 259, "walltim": 259, "tfevent": 259, "OR": 259, "0x7f1929a38ed0": 260, "iqr": 260, "424": 260, "0x7f192b019ed0": 260, "unsurprisingli": 260, "0x7f1929a35850": 260, "563600": 260, "tensormethod": 260, "ab_ref": 260, "0x7f192a6dfd90": 260, "47264": 260, "_int_fre": 260, "25963": 260, "_int_malloc": 260, "19900": 260, "tensorit": 260, "tensoriteratorconfig": 260, "__tls_get_addr": 260, "13500": 260, "malloc": [260, 261, 279], "11300": 260, "smallvector": 260, "10345": 260, "_int_memalign": 260, "9200": 260, "iteratorbas": 260, "get_strid": 260, "173472": 260, "0x7f192995d750": 260, "118200": 260, "tensoriter": 260, "65000": 260, "20900": 260, "15900": 260, "15100": 260, "cpualloc": 260, "12500": 260, "352327": 260, "a0": 260, "b0": 260, "a1": 260, "a127": 260, "pickleabl": 260, "broadcasting_stat": 260, "17600": 260, "tensoriteratorbas": 260, "compute_strid": 260, "12700": 260, "allocate_or_resize_output": 260, "10200": 260, "smallvectorimpl": 260, "7400": 260, "6200": 260, "invert_perm": 260, "6064": 260, "5100": 260, "reorder_dimens": 260, "4300": 260, "compatible_strid": 260, "check_tensor_options_and_extract_memory_format": 260, "__memcmp_avx2_movb": 260, "empty_cpu": 260, "1300": 260, "2400": 260, "6100": 260, "compute_fast_setup_typ": 260, "22600": 260, "fast_set_up": 260, "58091": 260, "580": 260, "0x7f19299544d0": 260, "compute_shap": 260, "2300": 260, "coalesce_dimens": 260, "promin": 260, "__add__": 260, "__sub__": 260, "dice": 260, "szymon": 261, "migacz": 261, "set_to_non": 261, "elementwis": [261, 277], "anomali": 261, "detect_anomali": 261, "set_detect_anomali": 261, "emit_nvtx": 261, "nth": 261, "cpunodebind": 261, "membind": 261, "pytorch_script": 261, "omp_num_thread": [261, 279], "thrash": 261, "gomp_cpu_affin": 261, "omp_proc_bind": 261, "omp_schedul": 261, "libgomp": [261, 279], "sleep": 261, "jemalloc": [261, 279], "tcmalloc": [261, 279], "emphas": 261, "fragment": [261, 277], "ccl": 261, "set_float32_matmul_precis": 261, "judgment": 264, "itt": 265, "vtune": 265, "set_stanc": [265, 268, 281], "usecas": 265, "torchcompil": 265, "prebuilt": 265, "torchscipt": 265, "pod": 265, "andriod": 265, "run_cpu": 265, "graviton": 265, "compressor": 265, "tensorpip": 265, "dcp": 265, "commdebugmod": 265, "animesh": 266, "jain": 266, "startup": 266, "inline_inbuilt_nn_modul": 266, "graph_cod": 266, "strateg": 266, "933": 268, "torch_compiler_set_stance_tutori": [268, 274, 281], "torch_compile_torch_function_mod": [268, 272, 281], "sphx_glr_recipes_torch_export_aoti_python": [268, 281], "torch_export_aoti_python": [268, 275, 281], "torch_compile_user_defined_triton_kernel_tutori": [268, 273, 281], "compile_model": 269, "resnet50_weight": 269, "weights_prepack": 269, "oguz": [270, 271, 273], "ulgen": [270, 271, 273], "sam": [270, 276], "larsen": 270, "fxgraphcach": [270, 271], "aotautogradcach": [270, 271], "redi": [270, 271], "usernam": 270, "aotautograd": [270, 271], "fxgraph": 270, "torchinductor_": 270, "torchinductor_myusernam": [270, 271], "triton_cache_dir": 270, "torchinductor_redis_host": 270, "torchinductor_redis_port": 270, "6379": 270, "cachebench": 271, "onward": 271, "save_cache_artifact": 271, "load_cache_artifact": 271, "artifact_byt": 271, "cache_info": 271, "pgo": [271, 277], "tritoncach": 271, "inductorcach": 271, "bundl": 271, "autotuningcach": 271, "torchinductor_cache_dir": 271, "basetorchfunctionmod": 272, "flopcountermod": 273, "wrap_triton": 273, "footgun": 273, "register_kernel": 273, "register_flop_formula": 273, "flop_count": 273, "mysin": 273, "reappli": 274, "force_eag": 274, "eager_on_recompil": 274, "fail_on_recompil": 274, "torch.export": 275, "torch._inductor.aoti_compile_and_packag": 275, "aot_compil": 275, "torch._export.aoti_load_packag": 275, "ankith": [275, 276], "gunap": [275, 276], "_export": 275, "aot_load": 275, "max_autotun": [275, 277], "runner": 275, "archive_format": 275, "10088": 275, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 275, "17160": 275, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 275, "16616": 275, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 275, "17776": 275, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 275, "10856": 275, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 275, "14608": 275, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 275, "11376": 275, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 275, "10984": 275, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 275, "14736": 275, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 275, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 275, "11624": 275, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 275, "15632": 275, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 275, "25472": 275, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 275, "139389": 275, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 275, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 275, "47195424": 275, "47523148": 275, "jordi": 276, "ramon": 276, "marco": 276, "carranza": 276, "mvit": 276, "whisper": 276, "blip": 276, "sam2": 276, "timm": 276, "multiscal": 276, "kinet": 276, "mvit_v1_b_weight": 276, "mvit_v1_b": 276, "224x224x3": 276, "input_fram": 276, "num_clip": 276, "print_exc": 276, "batch_dim": 276, "asr": 276, "transcrib": 276, "spoken": 276, "680k": 276, "whisperprocessor": 276, "whisperforconditionalgener": 276, "decoder_input_id": 276, "decoder_start_token_id": 276, "internaltorchdynamoerror": 276, "attributeerror": 276, "dynamiccach": 276, "key_cach": 276, "non_strict": 276, "proxytensor": 276, "gameplai": 276, "gamer": 276, "salesforc": 276, "blip_decod": 276, "caption_input": 276, "model_url": 276, "googleapi": 276, "sfr": 276, "model_base_capfilt_larg": 276, "exportdb": 276, "bos_token_id": 276, "anaconda3": 276, "functional_tensor": 276, "545": 276, "outs_unwrap": 276, "_op_dk": 276, "sam2imagepredictor": 276, "_predict": 276, "unnorm_coord": 276, "unnorm_box": 276, "mask_input": 276, "multimask_output": 276, "return_logit": 276, "image_predict": 276, "sam2_image_predictor": 276, "359": 276, "exporthelp": 276, "model_to_export": 276, "aoti": 276, "i0716": 277, "926000": 277, "22423": 277, "chromiumeventlogg": 277, "ea34812": 277, "b807": 277, "4ff5": 277, "bb5c": 277, "2ad65c20968a": 277, "v0716": 277, "927000": 277, "convert_fram": 277, "1003": 277, "recipes_sourc": [277, 281], "elid": 277, "313": 277, "make_main": 277, "make_mod": 277, "run_make_mod": 277, "run_generic_build": 277, "148": 277, "build_main": 277, "276": 277, "sourcedir": 277, "confdir": 277, "outputdir": 277, "_init_build": 277, "sphinx_galleri": 277, "gen_galleri": 277, "generate_gallery_rst": 277, "generate_dir_rst": 277, "gen_rst": 277, "598": 277, "genexpr": 277, "p_fun": 277, "fname": 277, "target_dir": 277, "src_dir": 277, "gallery_conf": 277, "_popen": 277, "_default_context": 277, "process_obj": 277, "popen": 277, "popen_fork": 277, "_launch": 277, "_bootstrap": 277, "parent_sentinel": 277, "child_r": 277, "_target": 277, "_arg": 277, "_kwarg": 277, "call_fn": 277, "1346": 277, "generate_file_rst": 277, "output_block": 277, "execute_script": 277, "1164": 277, "execute_code_block": 277, "1020": 277, "is_last_expr": 277, "mem_max": 277, "_exec_and_get_memori": 277, "865": 277, "call_memori": 277, "1700": 277, "_sg_call_memory_noop": 277, "fake_main": 277, "932000": 277, "symbolic_convert": 277, "3324": 277, "symbolic_shap": 277, "3334": 277, "create_env": 277, "935000": 277, "1216": 277, "__trace_sourc": 277, "starts_lin": 277, "937000": 277, "1239": 277, "__trace_bytecod": 277, "load_fast": 277, "lazyvariabletrack": 277, "binary_add": 277, "939000": 277, "3025": 277, "wrap_to_fak": 277, "statefulsymboliccontext": 277, "dynamic_s": 277, "dimdynam": 277, "dynamic_strid": 277, "infer_strid": 277, "constraint_s": 277, "constraint_strid": 277, "view_base_context": 277, "tensor_sourc": 277, "localsourc": 277, "local_nam": 277, "is_input": 277, "is_derefed_cell_cont": 277, "shape_env_to_source_to_symbol_cach": 277, "940000": 277, "output_graph": 277, "2271": 277, "create_graph_input": 277, "l_x_": 277, "debug_level": 277, "941000": 277, "942000": 277, "l_y_": 277, "945000": 277, "store_fast": 277, "tensorvari": 277, "946000": 277, "load_const": 277, "constantvari": 277, "947000": 277, "return_valu": 277, "948000": 277, "3681": 277, "3685": 277, "1008": 277, "graphcompilereason": 277, "user_stack": 277, "framesummari": 277, "950000": 277, "1408": 277, "__graph_cod": 277, "__compiled_fn_1": 277, "_lazy_graph_modul": 277, "f32": 277, "add_1": 277, "952000": 277, "1515": 277, "355000": 277, "4734": 277, "produce_guard": 277, "360000": 277, "1520": 277, "362000": 277, "363000": 277, "4954": 277, "track_symint": 277, "364000": 277, "storage_offset": 277, "365000": 277, "366000": 277, "5156": 277, "367000": 277, "368000": 277, "369000": 277, "2557": 277, "__guard": 277, "2495": 277, "tree_guard_manag": 277, "rootguardmanag": 277, "default_devic": 277, "utils_devic": 277, "520": 277, "init_ambient_guard": 277, "global_st": 277, "___check_global_st": 277, "torch_function_mode_stack": 277, "___check_torch_function_mode_stack": 277, "guardmanag": 277, "accessed_bi": 277, "framelocalsguardaccessor": 277, "framelocals_idx": 277, "tensor_match": 277, "check_tensor": 277, "backendselect": 277, "no_hasattr": 277, "hasattr": 277, "_dynamo_dynamic_indic": 277, "no_tensor_alias": 277, "check_no_alias": 277, "370000": 277, "2524": 277, "371000": 277, "660": 277, "put_code_st": 277, "1121": 277, "run_gc_after_compil": 277, "gc": 277, "375000": 277, "1395": 277, "_fn": 277, "skipfil": 277, "eval_fram": 277, "reset_code_cach": 277, "467000": 277, "codecach": 277, "1093": 277, "__output_cod": 277, "0_infer": 277, "ctype": 277, "c_long": 277, "c_int": 277, "cmath": 277, "nanj": 277, "maybe_profil": 277, "memory_plan": 277, "_align": 277, "asynccompil": 277, "select_algorithm": 277, "extern_kernel": 277, "multi_kernel": 277, "multikernelcal": 277, "tl": 277, "triton_heurist": 277, "start_graph": 277, "end_graph": 277, "_cuda_getcurrentrawstream": 277, "get_raw_stream": 277, "inductor_op": 277, "_quantiz": 277, "empty_strided_cpu": 277, "_empty_strided_cpu": 277, "empty_strided_cuda": 277, "_empty_strided_cuda": 277, "empty_strided_xpu": 277, "_empty_strided_xpu": 277, "reinterpret_tensor": 277, "_reinterpret_tensor": 277, "alloc_from_pool": 277, "_alloc_from_pool": 277, "empty_strided_p2p": 277, "_symmetricmemori": 277, "torchinductor_ci": 277, "ld": 277, "cld7tar7n7kytdxqq7n73fjc5nptwpbw7wqmdbp24zf62axk3q3a": 277, "topolog": 277, "num_us": 277, "call_funct": 277, "triton_poi_fused_add_0": 277, "triton_help": 277, "libdevic": 277, "tl_math": 277, "autotunehint": 277, "reductionhint": 277, "tilehint": 277, "deviceproperti": 277, "set_driver_to_gpu": 277, "size_hint": 277, "triton_meta": 277, "xnumel": 277, "i32": 277, "xblock": 277, "multi_processor_count": 277, "regs_per_multiprocessor": 277, "65536": 277, "max_threads_per_multi_processor": 277, "1536": 277, "warp_siz": 277, "tt": 277, "inductor_meta": 277, "grid_typ": 277, "grid1d": 277, "autotune_hint": 277, "kernel_nam": 277, "mutated_arg_nam": 277, "optimize_mem": 277, "no_x_dim": 277, "num_load": 277, "num_reduct": 277, "backend_hash": 277, "1e2c16421d4c3dba4ad92bfc4278a3cb24c43deda6ee7ff9e3fbb1dbb80802db": 277, "are_deterministic_algorithms_en": 277, "assert_indirect_index": 277, "autotune_local_cach": 277, "autotune_pointwis": 277, "autotune_remote_cach": 277, "force_disable_cach": 277, "dynamic_scale_rblock": 277, "max_autotune_pointwis": 277, "min_split_scan_rblock": 277, "spill_threshold": 277, "store_cubin": 277, "min_elem_per_thread": 277, "xoffset": 277, "program_id": 277, "xindex": 277, "xmask": 277, "device_str": 277, "benchmark_compiled_modul": 277, "rand_strid": 277, "print_perform": 277, "wrapper_benchmark": 277, "compiled_module_main": 277, "473000": 277, "1094": 277, "nk": 277, "cnk55csixpane7aredk4kvfxz3fx2bb7zgzf4vpzqkzufdznzojb": 277, "preload": 279, "tunabl": 279, "taskset": 279, "uma": 279, "lscpu": 279, "9480": 279, "223": 279, "vendor": 279, "genuineintel": 279, "node0": 279, "node1": 279, "cento": 279, "yum": 279, "libiomp": 279, "perftool": 279, "gperftool": 279, "libjemalloc2": 279, "ninstanc": 279, "ncore": 279, "program_arg": 279, "iomp": 279, "prepend": 279, "core_id": 279, "dafault": 279, "ncores_per_inst": 279, "libtcmalloc": 279, "preliminarili": 279, "deepspe": 280, "marian": 280, "oftentim": 280, "exp_avg": 280, "exp_avg_sq": 280, "print_peak_memori": 280, "max_memory_alloc": 280, "use_zero": 280, "optimizer_class": 280, "0mb": 280, "992": 280, "1361": 280, "6123046875": 280, "1697": 280, "intermediate_sourc": 281, "prototype_sourc": 281, "advanced_sourc": 281}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 113, 114, 115, 116, 117], "live": 0, "tutori": [0, 38, 41, 53, 54, 56, 58, 61, 91, 98, 104, 124, 127, 130, 131, 133, 164, 170, 172, 173, 180, 188, 189, 192, 193, 194, 200, 235, 236, 275], "torchrl": [1, 16, 172], "object": [1, 106, 138, 192], "code": [1, 2, 9, 16, 38, 39, 58, 98, 200, 206, 221, 242], "ddpg": 1, "loss": [1, 14, 39, 47, 50, 53, 56, 99, 103, 104, 105, 136, 140, 149, 172, 245, 264], "overview": [1, 20, 64, 113, 117, 124, 141, 149, 154, 177, 190, 197, 208, 227, 236, 261], "prerequisit": [1, 39, 104, 113, 117, 171, 197, 200, 210, 213, 229, 233, 251, 266, 270, 271, 273, 274, 275, 276], "import": [1, 14, 48, 59, 92, 185, 248, 251, 262, 263, 264], "setup": [1, 20, 22, 92, 112, 141, 148, 149, 160, 168, 171, 182, 183, 194, 195, 216, 224, 225, 233, 248, 251, 262, 263, 264, 266, 277], "lossmodul": 1, "The": [1, 7, 9, 92, 94, 103, 137, 168, 169, 178, 193, 242], "__init__": [1, 36], "method": [1, 17, 148, 160, 192, 209, 258], "valu": [1, 149, 164, 172, 189], "estim": [1, 156], "actor": 1, "put": [1, 156, 171, 192], "thing": [1, 16], "togeth": [1, 16, 136, 156, 163, 171, 192, 245], "forward": [1, 6, 7, 119, 134, 141, 152, 155, 192, 193], "call": [1, 187], "environ": [1, 16, 57, 135, 149, 156, 172, 185, 199, 201], "transform": [1, 10, 16, 44, 45, 55, 99, 128, 129, 133, 136, 155, 165, 167, 168, 172, 177, 180, 193], "parallel": [1, 10, 48, 58, 60, 64, 130, 132, 133, 134, 136, 146, 147, 159, 167, 168, 195, 230, 261], "execut": [1, 16, 22, 114, 168, 174, 182, 251, 261], "normal": [1, 47, 172, 264], "observ": 1, "stat": 1, "build": [1, 4, 6, 12, 35, 99, 106, 153, 169, 186, 193, 219, 221, 264], "model": [1, 7, 10, 14, 20, 22, 23, 35, 39, 40, 41, 48, 53, 59, 64, 79, 80, 89, 95, 97, 99, 101, 103, 104, 109, 111, 113, 114, 121, 123, 127, 128, 133, 134, 136, 137, 144, 146, 149, 150, 153, 156, 157, 159, 160, 167, 168, 170, 171, 178, 180, 182, 183, 185, 192, 194, 213, 221, 224, 225, 233, 235, 236, 240, 241, 242, 244, 248, 251, 255, 256, 261, 262, 263, 275, 276], "explor": [1, 22], "data": [1, 7, 10, 23, 28, 36, 40, 47, 48, 53, 54, 56, 58, 59, 60, 92, 99, 102, 112, 127, 132, 133, 134, 136, 139, 140, 146, 172, 178, 180, 182, 183, 185, 189, 190, 197, 208, 237, 248, 261, 262, 263, 264], "collector": [1, 149, 172], "evalu": [1, 53, 127, 137, 138, 139, 178, 245], "your": [1, 6, 12, 16, 36, 64, 97, 101, 112, 119, 162, 192, 199, 230, 248], "record": [1, 182, 197], "replai": [1, 149, 172, 173], "buffer": [1, 149, 172, 261], "storag": [1, 198, 276], "batch": [1, 11, 16, 142, 155, 174, 186, 234, 261, 276], "size": [1, 276], "modul": [1, 7, 17, 71, 89, 99, 112, 119, 120, 149, 152, 164, 170, 190, 218, 250, 258, 276], "construct": [1, 22, 59, 208, 209], "target": [1, 156, 261], "network": [1, 7, 35, 47, 50, 56, 92, 106, 109, 139, 140, 149, 156, 172, 173, 178, 180, 193, 245, 248, 262, 263, 264], "updat": [1, 50, 156, 174, 218], "optim": [1, 39, 40, 47, 56, 73, 103, 106, 112, 120, 134, 138, 163, 176, 190, 224, 225, 234, 261, 263, 264, 267, 279, 280], "time": [1, 21, 42, 51, 68, 74, 78, 86, 90, 100, 110, 118, 119, 122, 171, 179, 217, 251, 257, 260, 266, 268, 270, 271, 281], "train": [1, 3, 4, 7, 10, 13, 16, 18, 23, 27, 35, 36, 47, 53, 56, 57, 59, 92, 94, 97, 101, 103, 106, 121, 127, 130, 133, 136, 137, 139, 140, 144, 145, 148, 149, 156, 163, 167, 172, 173, 178, 180, 183, 190, 213, 235, 236, 261, 264, 269, 273], "polici": [1, 16, 133, 149, 172], "experi": [1, 16, 17, 138, 194], "result": [1, 3, 48, 56, 79, 114, 119, 138, 139, 143, 172, 178, 180, 182, 190, 216, 242, 244, 246], "conclus": [1, 2, 3, 4, 6, 7, 16, 17, 18, 20, 23, 53, 86, 104, 113, 114, 117, 124, 135, 136, 141, 149, 153, 154, 156, 157, 163, 166, 168, 172, 177, 187, 189, 190, 193, 195, 197, 198, 199, 200, 201, 206, 207, 208, 209, 210, 211, 213, 215, 216, 222, 225, 227, 228, 229, 230, 233, 234, 250, 258, 261, 266, 270, 271, 272, 273, 274, 275, 276, 277, 279], "next": [1, 47, 56, 79, 171, 172], "step": [1, 124, 163, 168, 169, 171, 172, 182, 193, 246, 248, 251, 262, 263, 264, 266], "autograd": [2, 4, 11, 12, 34, 46, 66, 67, 81, 94, 120, 137, 141, 152, 176], "c": [2, 3, 4, 6, 7, 8, 9, 11, 12, 200, 221, 235, 260], "frontend": [2, 7, 89, 91], "basic": [2, 7, 37, 38, 141, 146, 152, 166, 169, 174, 187, 189, 234, 273], "oper": [2, 4, 6, 9, 11, 12, 18, 43, 52, 94, 108, 117, 166, 194, 208, 209, 211, 222, 261], "comput": [2, 16, 21, 34, 42, 46, 51, 68, 74, 78, 86, 90, 100, 108, 110, 111, 118, 122, 127, 155, 160, 179, 217, 244, 257, 261, 268, 281], "higher": 2, "order": [2, 261], "gradient": [2, 14, 34, 79, 95, 134, 165, 208, 245, 261, 264], "us": [2, 3, 6, 7, 10, 13, 14, 15, 27, 38, 46, 54, 57, 87, 112, 113, 114, 117, 119, 121, 126, 132, 134, 141, 142, 144, 146, 147, 149, 150, 152, 165, 167, 169, 174, 175, 176, 177, 182, 183, 185, 198, 201, 204, 208, 210, 221, 223, 226, 228, 229, 230, 236, 242, 244, 250, 251, 259, 261, 262, 273, 275, 277, 279, 280], "custom": [2, 4, 6, 8, 9, 12, 16, 17, 18, 36, 55, 71, 117, 120, 126, 127, 130, 142, 143, 152, 169, 170, 189, 192, 230], "function": [2, 14, 17, 23, 34, 39, 47, 50, 56, 67, 79, 89, 92, 99, 103, 104, 105, 106, 112, 120, 142, 143, 152, 155, 160, 165, 170, 172, 233, 246, 251, 261, 264, 272], "translat": [2, 123, 129, 178], "from": [2, 9, 23, 46, 54, 112, 114, 121, 139, 140, 144, 161, 178, 185, 190, 192, 250, 262], "python": [2, 4, 6, 9, 18, 89, 169, 221, 275, 277], "cuda": [3, 4, 6, 9, 54, 86, 166, 226, 261], "graph": [3, 34, 46, 101, 108, 114, 141, 187, 189, 213, 261, 276], "pytorch": [3, 6, 7, 9, 12, 14, 17, 23, 27, 46, 49, 54, 58, 61, 64, 66, 67, 69, 71, 72, 73, 77, 85, 93, 96, 97, 98, 99, 101, 102, 103, 106, 107, 108, 109, 111, 114, 117, 119, 120, 131, 148, 157, 166, 171, 182, 185, 190, 193, 194, 196, 204, 213, 214, 221, 222, 223, 232, 234, 235, 236, 237, 239, 242, 243, 248, 249, 251, 252, 259, 261, 262, 263, 264, 265, 269], "api": [3, 7, 64, 94, 134, 152, 157, 163, 169, 197, 200, 221, 242, 261, 277], "get": [3, 12, 35, 86, 111, 132, 134, 146, 154, 162, 176, 211, 228, 229, 230, 235, 236], "start": [3, 86, 101, 132, 134, 146, 162, 176, 211, 228, 229, 230, 235, 236, 260, 266, 279], "set": [4, 92, 135, 138, 185, 194, 197, 199, 201, 224, 225, 233, 261, 270], "up": [4, 76, 120, 138, 185, 192, 194, 199, 201, 224, 225, 233, 234, 260], "system": 4, "defin": [4, 7, 11, 23, 35, 47, 50, 53, 67, 104, 113, 120, 138, 168, 172, 185, 192, 194, 246, 248, 260, 262, 263, 264, 273], "op": [4, 6, 11, 189, 272], "ad": [4, 11, 18, 92, 183, 190, 245, 273], "backend": [4, 11, 12, 17, 135, 148, 154, 169, 194, 213, 221, 261, 269, 279], "implement": [4, 11, 39, 56, 79, 105, 117, 142, 164, 169, 174, 175, 177, 206, 208, 218, 233], "an": [4, 12, 16, 47, 109, 111, 117, 121, 137, 149, 172, 190, 197, 225, 250, 279], "regist": [4, 7, 11, 12, 17], "torch": [4, 8, 34, 46, 85, 99, 108, 112, 113, 121, 139, 141, 146, 170, 177, 186, 187, 188, 189, 193, 198, 201, 208, 213, 220, 224, 233, 245, 246, 250, 258, 266, 271, 272, 273, 274, 275, 276, 277, 279], "compil": [4, 6, 8, 141, 154, 177, 186, 187, 193, 201, 210, 213, 224, 225, 233, 266, 270, 271, 272, 273, 274, 275, 277], "support": [4, 8, 11, 12, 18, 92, 101, 117, 177, 209, 218, 273], "hybrid": [4, 89, 91], "registr": 4, "test": [4, 12, 16, 18, 47, 79, 92, 142, 186, 192, 221, 248, 260], "creat": [4, 9, 15, 36, 40, 48, 53, 102, 106, 108, 112, 138, 139, 140, 153, 160, 170, 261], "mutabl": [4, 18], "extens": [6, 12, 15, 130, 169, 215, 222, 225, 235, 258, 269], "motiv": [6, 7, 89, 206], "exampl": [6, 15, 18, 79, 83, 89, 94, 95, 106, 109, 111, 120, 121, 137, 193, 197, 200, 210, 215, 235, 269, 274, 279], "write": [6, 7, 16, 55, 148, 183, 192, 206], "setuptool": 6, "pass": [6, 13, 119, 135, 141, 163, 186, 248], "backward": [6, 12, 133, 134, 141, 142, 143, 163], "bind": 6, "perform": [6, 119, 135, 150, 153, 154, 157, 165, 171, 177, 182, 201, 210, 227, 234, 236, 239, 261, 274, 279], "comparison": [6, 142, 146, 165, 187], "gpu": [6, 7, 47, 48, 59, 83, 92, 121, 166, 182, 190, 199, 204, 235, 261], "devic": [6, 14, 17, 35, 121, 133, 221, 226, 247, 250, 253, 261], "jit": [6, 12, 113, 171], "mix": [6, 133, 134, 144, 245, 261], "accessor": 6, "integr": [6, 9, 17, 95], "applic": [7, 148, 169, 223, 258], "neural": [7, 14, 35, 47, 50, 92, 112, 156, 160, 236, 248, 262, 263, 264], "paramet": [7, 15, 35, 39, 40, 48, 99, 121, 170, 172, 174, 175, 218, 246, 261, 262], "submodul": 7, "travers": 7, "hierarchi": [7, 242], "run": [7, 38, 48, 53, 54, 57, 58, 59, 79, 89, 98, 104, 138, 146, 182, 185, 189, 224, 225, 233, 251, 259], "mode": [7, 22, 23, 152, 155, 210, 235, 272], "ownership": 7, "dcgan": [7, 56], "what": [7, 12, 13, 17, 20, 47, 56, 60, 61, 94, 112, 121, 143, 150, 165, 166, 197, 216, 220, 225, 226, 229, 230, 242, 263, 275, 279, 280], "wa": 7, "gan": [7, 56], "agan": 7, "gener": [7, 17, 56, 79, 121, 138, 140, 246, 254, 261], "discrimin": [7, 56, 105], "load": [7, 14, 36, 40, 41, 47, 53, 57, 104, 121, 127, 144, 146, 178, 180, 198, 228, 237, 246, 248, 250, 253, 254, 255, 261, 262, 263, 264], "loop": [7, 16, 39, 103, 149, 172, 173], "move": [7, 102], "checkpoint": [7, 59, 121, 133, 146, 156, 227, 228, 250, 254, 261], "recov": 7, "state": [7, 134, 280], "inspect": [7, 141, 164, 170, 183, 245], "imag": [7, 14, 47, 62, 63, 101, 114, 127, 171, 185, 276], "class": [8, 13, 16, 35, 55, 104, 164, 190], "export": [8, 113, 114, 117, 121, 188, 189, 213, 275, 276], "why": [8, 9, 57, 60, 136, 137, 208, 211, 229, 230], "do": [8, 11, 47, 94, 143, 157], "we": [8, 94], "need": [8, 11, 94, 193], "make": [8, 13, 105, 223], "fake": 8, "author": [9, 114], "manual": 9, "when": [9, 136, 143, 144, 208, 275], "should": [9, 60, 136], "i": [9, 13, 17, 32, 47, 56, 60, 61, 112, 121, 143, 144, 150, 163, 165, 193, 208, 220, 222, 226, 229, 230, 242, 245, 263, 276, 280], "distribut": [10, 13, 19, 22, 57, 58, 59, 60, 64, 86, 130, 146, 147, 148, 168, 175, 176, 190, 227, 228, 261], "pipelin": [10, 147, 167, 168], "dispatch": [11, 12, 177], "schema": 11, "For": [11, 94, 255], "In": [11, 94, 102, 256], "place": [11, 94, 102], "view": [11, 182], "go": [11, 47, 56, 79, 185, 193], "beyond": 11, "autocast": [11, 245], "tracer": 11, "extend": [12, 117, 170, 193], "new": [12, 17, 67, 105, 120, 142], "": [12, 18, 108, 156, 207], "kei": [12, 276], "full": [12, 39, 92], "list": 12, "kernel": [12, 17, 86, 160, 233, 234, 273], "against": 12, "nativ": [12, 223], "compat": 12, "known": 12, "issu": 12, "addit": [12, 124, 131, 166, 168, 182, 197], "note": [12, 105, 244], "futur": [12, 17], "work": [12, 13, 17, 40, 132, 133, 134, 136, 157, 215, 228], "stai": 12, "touch": 12, "uneven": 13, "input": [13, 56, 59, 79, 143, 190, 193, 246, 261], "join": 13, "context": [13, 195], "manag": [13, 166], "requir": [13, 20, 114, 137, 170, 216, 226, 242, 276, 280], "distributeddataparallel": [13, 146, 261], "zeroredundancyoptim": [13, 280], "keyword": 13, "argument": 13, "how": [13, 17, 38, 132, 133, 134, 136, 163, 201, 215, 226, 228, 230, 242, 248, 259, 280], "doe": [13, 20, 137, 216], "joinabl": 13, "joinhook": 13, "toi": 13, "transfer": [14, 127], "introduct": [14, 27, 46, 56, 64, 86, 93, 95, 96, 97, 98, 101, 102, 103, 108, 116, 135, 164, 166, 168, 182, 185, 187, 190, 191, 195, 200, 201, 206, 209, 210, 213, 218, 221, 222, 248, 251, 262, 263, 264, 270, 271, 279], "underli": 14, "principl": [14, 209], "packag": [14, 82], "select": [14, 149, 195, 219], "content": [14, 120, 234], "style": [14, 193], "descent": 14, "numpi": [15, 43, 52, 76, 102, 120, 207], "scipi": 15, "less": 15, "parametr": [15, 164, 170], "pendulum": 16, "effect": 16, "action": [16, 149], "_step": 16, "reset": 16, "simul": 16, "_reset": 16, "metadata": [16, 17], "env": 16, "_spec": 16, "spec": 16, "shape": [16, 41, 102, 189, 252], "reproduc": 16, "seed": [16, 102], "wrap": [16, 18, 112, 133, 192, 260, 273], "envbas": 16, "our": [16, 22, 142, 148, 163, 186, 248, 262, 263, 264], "rollout": 16, "simpl": [16, 48, 94, 114, 153, 178, 245, 251], "facilit": 17, "privateuse1": 17, "via": [17, 197], "guard": [17, 189], "serial": [17, 170], "deseri": 17, "other": [17, 22, 99, 101, 103, 166, 182], "improv": [17, 119, 182, 213, 234], "user": [17, 85, 221, 273], "renam": 17, "name": [17, 139, 140, 189], "properti": 17, "relat": [17, 41, 185, 258], "pil": 18, "crop": 18, "combin": [19, 136, 146], "dataparallel": [19, 48, 60, 92, 121, 146], "rpc": [19, 130, 147, 174, 175, 176, 196, 226, 232], "framework": [19, 175, 176], "beta": [20, 23, 152, 153, 177, 212, 224, 225, 234, 238, 272, 275, 277], "acceler": [20, 102, 112, 162, 193, 198, 216], "bert": [20, 216], "semi": [20, 27, 216], "structur": [20, 216], "2": [20, 23, 47, 48, 89, 114, 135, 160, 168, 169, 182, 183, 192, 194, 213, 216, 246, 248, 251, 260, 262, 263, 264], "4": [20, 23, 47, 89, 114, 169, 171, 182, 183, 194, 213, 216, 246, 248, 251, 260, 262, 263, 264], "sparsiti": [20, 209, 216], "problem": [20, 216], "solv": [20, 216], "intro": [20, 216], "establish": 20, "baselin": 20, "prune": [20, 170, 216], "spars": [20, 206, 209, 216], "infer": [20, 45, 121, 127, 171, 234, 235, 245, 255, 261, 269, 275], "torchrec": [22, 190, 191], "shard": [22, 64, 132, 133, 134, 136, 190, 280], "instal": [22, 86, 95, 114, 171, 190, 201, 213, 236, 259], "embed": [22, 101, 111, 190], "distributedmodelparallel": [22, 190], "multiprocess": 22, "tabl": [22, 120], "wise": 22, "static": [23, 105, 276], "quantiz": [23, 171, 194, 199, 213, 236], "eager": 23, "1": [23, 47, 89, 114, 135, 160, 168, 169, 182, 183, 189, 192, 194, 213, 246, 248, 251, 260, 262, 263, 264], "architectur": 23, "helper": [23, 209, 233], "3": [23, 47, 48, 89, 114, 135, 168, 169, 182, 183, 194, 213, 246, 248, 251, 260, 262, 263, 264], "dataset": [23, 29, 36, 48, 55, 97, 101, 103, 112, 126, 192, 264], "loader": [23, 92], "imagenet": 23, "post": [23, 213], "5": [23, 47, 114, 182, 183, 194, 246, 251, 260, 264], "awar": [23, 236], "speedup": [23, 187, 245], "supervis": 27, "learn": [27, 37, 38, 49, 61, 89, 105, 106, 107, 120, 127, 130, 156, 166, 172, 173, 174, 176, 182, 197, 246, 248, 251, 259, 262, 263, 264, 275, 279], "usb": 27, "built": [27, 194], "upon": 27, "freematch": 27, "softmatch": 27, "cifar": [27, 104], "10": [27, 104, 163], "onli": [27, 235, 236], "40": 27, "label": [27, 185], "specif": [27, 185, 261], "imbalanc": 27, "algorithm": [27, 173], "audio": [28, 29, 30, 31, 32, 33], "augment": [28, 30, 86, 109, 261], "featur": [30, 31, 95, 109, 127, 133, 182, 185, 190, 235, 236], "extract": [31, 185], "o": 32, "resampl": 33, "automat": [34, 108, 152, 245, 276], "differenti": [34, 46, 108, 152], "tensor": [34, 43, 52, 66, 77, 84, 97, 102, 108, 120, 130, 136, 137, 139, 163, 177, 193, 209, 211, 225, 258, 261, 276], "disabl": [34, 261], "track": [34, 143, 183], "more": [34, 94, 102, 137, 154, 155, 174, 182, 227, 246, 248, 251, 259, 262, 263, 264], "option": [34, 46, 48, 124, 192, 213, 221, 248, 279], "read": [34, 35, 36, 39, 44, 46, 57, 59, 60, 113, 114, 116, 117, 119, 124, 144, 145, 149, 185, 194, 206, 208, 209, 242, 261], "jacobian": [34, 155, 160], "product": [34, 155, 160, 177], "further": [34, 35, 36, 39, 44, 46, 57, 59, 60, 113, 114, 116, 117, 119, 124, 127, 144, 145, 149, 193, 194, 206, 208, 209, 261], "layer": [35, 95, 99, 136, 142, 193, 261], "nn": [35, 71, 72, 82, 89, 99, 112, 120, 121, 128, 129, 170, 193, 250, 258, 276], "flatten": 35, "linear": [35, 99, 106, 112], "relu": [35, 194], "sequenti": [35, 112], "softmax": [35, 106, 208], "dataload": [36, 55, 97, 103, 112], "iter": [36, 53, 55, 170], "visual": [36, 95, 101, 114, 127, 163, 178, 180, 183, 242, 244], "file": [36, 53, 114, 121, 144, 178, 197, 256], "__len__": 36, "__getitem__": 36, "prepar": [36, 53, 139, 140, 178, 182, 194, 206, 207, 208, 221, 240, 241], "through": [36, 55, 89, 194, 248], "thi": [38, 61, 133, 163, 193, 215], "guid": [38, 134, 166, 261], "hyperparamet": [39, 92, 172, 173], "quickstart": 40, "save": [40, 41, 57, 59, 114, 121, 133, 137, 143, 144, 146, 156, 163, 198, 227, 228, 245, 246, 253, 254, 255, 256, 262], "weight": [41, 50, 56, 69, 120], "initi": [43, 52, 56, 57, 134, 135, 146, 148, 156, 164, 211, 218, 248, 262, 263], "attribut": [43, 52, 95, 244], "bridg": [43, 52, 102], "arrai": [43, 52], "totensor": 44, "lambda": 44, "fast": [45, 79, 234], "better": [45, 201, 210], "A": [46, 49, 61, 94, 95, 105, 142, 166, 242, 245, 254, 260, 262], "gentl": 46, "background": [46, 166], "usag": [46, 141, 142, 152, 163, 166, 187, 189, 221, 234, 236, 269, 273], "vector": [46, 150, 155, 160], "calculu": 46, "exclus": 46, "dag": 46, "classifi": [47, 106, 114, 139, 185], "about": [47, 252], "cifar10": 47, "convolut": [47, 99, 142, 149, 186, 261], "multipl": [47, 121, 170, 256], "where": [47, 56, 79, 185, 208], "dummi": 48, "8": [48, 246, 260], "summari": [48, 133, 177, 243], "deep": [49, 61, 105, 106, 107], "60": [49, 61], "minut": [49, 61], "blitz": [49, 61], "backprop": 50, "chatbot": 53, "preprocess": [53, 126, 156, 171], "format": [53, 114, 157, 197, 228, 261], "trim": 53, "seq2seq": [53, 178], "encod": [53, 111, 178], "decod": [53, 178], "procedur": 53, "mask": [53, 193, 208], "singl": [53, 159], "greedi": 53, "my": 53, "text": [53, 125, 126, 184], "googl": 54, "colab": 54, "version": [54, 160], "drive": 54, "enabl": [54, 134, 195, 197, 200, 261], "compos": [55, 155, 273], "afterword": 55, "torchvis": [55, 80, 192], "adversari": [56, 79], "fault": 57, "toler": 57, "torchrun": [57, 146], "grace": 57, "restart": 57, "process": [57, 59, 146, 168, 169, 174], "group": [57, 59, 169], "provid": 57, "variabl": [57, 135, 261], "snapshot": [57, 163], "trainer": 57, "constructor": [57, 261], "resum": [57, 121, 245], "script": [57, 89, 162, 267, 279], "video": [58, 171, 276], "section": 58, "multi": [59, 83, 92, 138], "ddp": [59, 60, 130, 144, 146, 261], "job": [59, 197, 251], "you": [60, 101, 136, 166, 193, 197, 244, 275, 279], "prefer": 60, "over": 60, "dp": 60, "goal": 61, "segment": [62, 63, 192, 276], "deeplabv3": [62, 63], "android": [62, 205, 219, 221, 223, 238, 240], "io": [63, 204, 205, 219, 238, 241], "primit": 64, "commun": [64, 86, 92, 148, 226], "launcher": 64, "appli": [64, 136, 213, 215, 279], "To": 64, "scale": [64, 136, 145, 177], "develop": 64, "control": [69, 113, 120, 177, 189, 261, 274, 279], "flow": [69, 113, 120, 189, 276], "share": [69, 120], "warm": [76, 120], "threat": 79, "sign": 79, "attack": 79, "under": 79, "fgsm": 79, "accuraci": [79, 92, 154, 236], "v": [79, 155, 166, 207], "epsilon": 79, "sampl": [79, 140, 165, 242], "finetun": [80, 127, 192], "former": 85, "holist": [86, 87], "trace": [86, 87, 89, 113, 153, 187, 219, 242, 251, 276], "analysi": [86, 87], "hta": 86, "tempor": 86, "breakdown": 86, "idl": 86, "durat": 86, "overlap": 86, "counter": 86, "memori": [86, 109, 119, 137, 142, 157, 163, 166, 173, 227, 234, 251, 261, 279], "bandwidth": 86, "queue": 86, "length": [86, 261], "launch": [86, 168, 242], "statist": 86, "diff": 87, "syntax": 89, "inform": [89, 154], "part": [89, 109], "pure": 89, "top": 89, "level": [89, 94, 109, 139, 140], "tune": [92, 133, 234, 261], "rai": 92, "configur": [92, 138, 242, 270], "search": 92, "space": 92, "youtub": [93, 96, 98], "seri": [93, 98], "fundament": 94, "turn": [94, 139], "off": 94, "On": 94, "profil": [94, 119, 153, 154, 182, 196, 232, 242, 251], "advanc": [94, 105, 133, 148, 182, 207, 222, 245, 273], "topic": [94, 148, 245], "detail": [94, 218], "high": [94, 177], "understand": 95, "captum": [95, 244], "first": [95, 113, 164], "occlus": 95, "gradcam": 95, "insight": 95, "common": [99, 141, 276], "type": [99, 102, 190, 245, 276], "recurr": [99, 149], "manipul": [99, 102], "activ": [99, 103, 210], "tensorboard": [101, 182, 183, 259], "befor": [101, 185, 244], "show": 101, "scalar": [101, 259], "resourc": [101, 103, 131, 166, 168], "random": [102, 105], "math": [102, 234], "logic": 102, "brief": 102, "broadcast": 102, "alter": 102, "copi": [102, 166], "chang": [102, 247], "number": 102, "dimens": [102, 234], "per": [103, 165], "epoch": 103, "knowledg": 104, "distil": 104, "util": [104, 170, 173, 193, 222, 246, 258, 261, 272], "cross": [104, 193], "entropi": 104, "cosin": 104, "minim": 104, "intermedi": [104, 143, 261], "regressor": 104, "dynam": [105, 189, 274], "decis": 105, "bi": 105, "lstm": [105, 109, 149], "crf": 105, "versu": 105, "toolkit": 105, "condit": 105, "field": 105, "discuss": 105, "exercis": [105, 109, 111, 124, 139, 140, 178], "tag": [105, 109], "block": [106, 193, 246], "affin": 106, "map": 106, "non": [106, 166, 189, 225, 261], "probabl": 106, "compon": [106, 154], "logist": 106, "regress": 106, "bag": [106, 111], "word": [106, 111], "nlp": [107, 139, 140, 161, 178], "librari": [108, 125, 185, 223, 248, 251, 261, 262, 263, 264, 279], "reshap": 108, "sequenc": [109, 136, 178], "long": [109, 251], "short": [109, 242], "term": 109, "speech": [109, 181, 184, 276], "tagger": 109, "charact": [109, 139, 140], "lexic": 111, "semant": [111, 206, 207], "dens": [111, 177], "n": 111, "gram": 111, "languag": [111, 128, 129], "continu": 111, "realli": 112, "mnist": 112, "net": 112, "scratch": [112, 139, 140, 161, 178], "without": [112, 221], "refactor": [112, 113], "add": [112, 135, 192, 272], "valid": [112, 261], "fit": [112, 163], "get_data": 112, "switch": [112, 261], "cnn": 112, "close": 112, "thought": 112, "attempt": 113, "suggest": [113, 189], "patch": [113, 185], "cond": 113, "depend": [114, 116, 177, 189, 190], "netron": 114, "6": [114, 182, 183, 194, 246, 251, 260], "runtim": [114, 261, 275, 279], "7": [114, 182, 194, 246, 251, 260], "compar": [114, 246], "ones": 114, "overrid": 117, "exist": [117, 157], "debug": [119, 154, 197, 261], "print": 119, "state_dict": [121, 263], "recommend": [121, 139, 166, 187], "entir": 121, "program": [121, 189], "One": [121, 256], "warmstart": [121, 262], "differ": [121, 141, 192, 262], "across": [121, 253], "cpu": [121, 133, 137, 153, 154, 166, 201, 210, 222, 235, 242, 261, 269, 273, 279], "t5": [123, 133], "base": [123, 196, 219, 232], "summar": 123, "sentiment": 123, "classif": [123, 125, 185, 276], "templat": 124, "torchtext": [125, 126, 128, 129], "vision": [127, 261], "few": 127, "predict": [127, 185], "convnet": 127, "fix": [127, 189], "extractor": 127, "fsdp": [130, 132, 133], "tp": [130, 136], "devicemesh": [130, 230], "welcom": 131, "fulli": [132, 133, 134, 136, 193], "recap": 133, "fine": 133, "hf": 133, "precis": [133, 134, 144, 245, 261], "intial": 133, "strategi": [133, 138], "prefetch": [133, 134], "stream": 133, "rank0": 133, "fsdp2": 134, "clip": [134, 245], "dtensor": 134, "dict": 134, "dcp": [134, 227, 228], "fsdp1": 134, "migrat": 134, "libuv": 135, "tcpstore": 135, "benchmark": [135, 186, 224, 246], "impact": 135, "exit": 135, "rout": 135, "use_libuv": 135, "fals": 135, "0": [135, 189, 208], "init_method": 135, "processgroup": 135, "larg": 136, "layernorm": 136, "rmsnorm": 136, "hook": [137, 163], "typic": 137, "than": 137, "concept": [137, 189], "pack": [137, 193], "unpack": 137, "some": 137, "unconvent": 137, "return": 137, "int": 137, "tupl": 137, "str": 137, "disk": 137, "na": 138, "ax": 138, "torchx": 138, "app": [138, 221], "runner": 138, "searchspac": 138, "metric": [138, 213], "optimizationconfig": 138, "choos": [138, 279], "schedul": [138, 225], "acknowledg": 138, "rnn": [139, 140, 176], "plot": [139, 140, 178], "captur": [141, 153, 163, 171, 213], "larger": 141, "log": [141, 154, 156, 259], "flag": 141, "address": [141, 276], "certain": 141, "limit": [141, 273], "aotautograd": 141, "recompil": [141, 274], "reason": [141, 252], "fuse": [142, 163, 177, 186, 190, 261], "norm": [142, 186, 261], "formula": [142, 273], "batchnorm": 142, "out": [142, 186, 215, 264], "doubl": 143, "output": [143, 190, 236], "real": [144, 171], "world": 144, "cloud": 144, "enough": 144, "multinod": 145, "local": 145, "global": [145, 170], "rank": 145, "heteregen": 145, "troubleshoot": [145, 171, 245], "between": [146, 208], "case": [146, 261], "skew": 146, "speed": [146, 234], "point": [148, 258], "collect": [148, 172, 246], "own": 148, "ring": 148, "allreduc": 148, "dqn": [149, 173], "mlp": 149, "q": [149, 173], "ensembl": 150, "vmap": [150, 220], "forc": 151, "align": 151, "wav2vec2": [151, 181], "fx": [153, 187, 213], "symbol": [153, 189], "interpret": [153, 205, 219, 238, 244], "investig": 153, "resnet18": [153, 186], "inductor": [154, 200, 270], "determin": 154, "error": [154, 189, 245, 276], "hessian": 155, "hvp": 155, "vhp": 155, "revers": 155, "jacrev": 155, "jacfwd": 155, "functorch": 155, "mario": 156, "plai": 156, "rl": 156, "agent": 156, "definit": 156, "act": 156, "cach": [156, 164, 270, 271], "recal": 156, "td": 156, "all": [156, 163, 193, 245, 251, 261], "let": 156, "channel": 157, "last": 157, "gain": [157, 274], "convert": [157, 194, 203, 212], "machin": 159, "best": [159, 187, 190], "practic": [159, 166, 182, 187, 190], "tangent": 160, "ntk": 160, "contract": 160, "nvfuser": 162, "dure": [163, 261], "disclaim": 163, "techniqu": 163, "register_post_accumulate_grad_hook": 163, "everyth": [163, 192], "line": 163, "hand": 164, "ar": [164, 193], "citizen": 164, "concaten": 164, "remov": [164, 170], "grad": [165, 208, 261], "effici": [165, 206, 238, 261], "wai": 165, "good": 166, "non_block": 166, "pin_memori": 166, "preambl": 166, "pageabl": 166, "asynchron": [166, 174, 227, 261], "synchron": [166, 261], "true": [166, 250, 261], "cudamemcpyasync": 166, "perspect": 166, "synergi": 166, "direct": [166, 226], "mp": 166, "consider": 166, "partit": 168, "main": 168, "cpp": 169, "subclass": [169, 177, 258], "expos": 169, "re": 170, "raspberri": 171, "pi": 171, "30": 171, "fp": 171, "opencv": 171, "choic": 171, "mobilenetv2": [171, 203, 212], "It": 171, "reinforc": [172, 173, 176], "ppo": 172, "server": [174, 175], "cartpol": 174, "solver": 174, "rref": 176, "dot": 177, "attent": [177, 178, 193], "sdpa": 177, "explicit": [177, 233], "hardwar": 177, "causal": 177, "self": 177, "nestedtensor": 177, "attn_bia": 177, "spatial": 180, "depict": 180, "stn": 180, "recognit": [181, 276], "With": 182, "event": 182, "analyz": [182, 197, 251], "help": 182, "amd": 182, "projector": 183, "assess": 183, "tacotron2": 184, "whole": 185, "slide": 185, "tiatoolbox": 185, "clean": 185, "download": 185, "patchpredictor": 185, "pathologi": 185, "here": 185, "fuser": 186, "pattern": [186, 194], "match": [186, 261], "fusion": [186, 194, 233], "nest": [187, 193, 211], "demonstr": [187, 276], "torchscript": [187, 235], "torchdynamo": [187, 271, 276], "nightli": 188, "break": [189, 276], "strict": [189, 276], "constraint": [189, 194], "special": 189, "dim": 189, "violat": 189, "_check": 189, "ir": 189, "decomposit": 189, "exportdb": 189, "recsi": 190, "embeddingbag": 190, "embeddingbagcollect": 190, "planner": 190, "lazyawait": 190, "anatomi": 190, "lookup": 190, "detect": 192, "pennfudan": 192, "pretrain": 192, "modifi": [192, 245], "backbon": 192, "instanc": 192, "replac": 193, "me": 193, "introduc": [193, 205], "abov": 193, "octob": 193, "2024": 193, "multiheadattent": 193, "gpt": 193, "one": 193, "row": 193, "longer": 193, "caus": 193, "nan": [193, 208, 245], "flexattent": 193, "njt": 193, "project": 193, "swiglu": 193, "feed": 193, "prototyp": [194, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 214, 216, 219], "backendconfig": 194, "deriv": 194, "refer": 194, "each": 194, "dtypeconfig": 194, "conv": 194, "qconfigmap": 194, "satisfi": 194, "faulti": 194, "rotat": 195, "approach": 195, "workload": [196, 222, 232, 242, 261], "flight": 197, "stuck": 197, "retriev": 197, "dump": 197, "end": [197, 271], "gpudirect": 198, "torchao": 199, "wrapper": [200, 221], "window": 201, "xpu": [201, 242], "softwar": 201, "altern": 201, "intel": [201, 222, 235, 236, 242, 261, 269, 279], "llvm": 201, "core": [203, 261], "ml": 203, "lite": 205, "workflow": [205, 221], "adagrad": 206, "maskedtensor": [206, 207, 208, 209], "simpler": 206, "origin": 206, "maskedarrai": 207, "reduct": [207, 209], "access": [208, 261, 263, 279], "index": 208, "slice": 208, "distinguish": 208, "anoth": 208, "x": 208, "yield": 208, "nansum": 208, "nanmean": 208, "safe": 208, "miss": 208, "coo": 209, "csr": 209, "unari": 209, "binari": 209, "appendix": 209, "max": 210, "autotun": 210, "see": [211, 224, 273], "also": [211, 224, 273], "nnapi": 212, "openvino": 213, "nncf": 213, "lower": 213, "represent": 213, "recip": [214, 239, 240, 241, 243, 249, 265, 267], "autoload": 215, "tree": 215, "mechan": 215, "skip": [218, 261], "mobil": [219, 238, 239, 243, 267], "so": 220, "vulkan": 221, "desktop": 221, "sdk": 221, "java": 221, "upload": 221, "leverag": 222, "matrix": 222, "amx": 222, "guidelin": 222, "can": 222, "confirm": 222, "being": 222, "prebuilt": 223, "lr": 225, "happen": 225, "tensorpip": 226, "even": 227, "pin": 227, "commdebugmod": 229, "hsdp": 230, "solut": [230, 276], "horizont": 233, "foreach_map": 233, "aw": 234, "graviton": 234, "processor": 234, "bfloat16": [234, 235], "openbla": 234, "smaller": 234, "alloc": [234, 261, 279], "overhead": 234, "linux": 234, "transpar": 234, "huge": 234, "page": 234, "thp": 234, "float32": 235, "imper": 235, "float16": 235, "zoo": 235, "eas": 236, "compressor": 236, "driven": 236, "deploy": 236, "instrument": 242, "technologi": 242, "itt": 242, "vtune": 242, "showcas": 242, "begin": 244, "final": 244, "default": [245, 247], "gradscal": 245, "e": 245, "g": 245, "amp": [245, 261], "minor": 245, "inf": 245, "mismatch": 245, "mai": 245, "manifest": 245, "cudnn_status_bad_param": 245, "syntaxerror": 246, "timeit": 246, "timer": [246, 260], "autorang": 246, "fuzz": 246, "instruct": [246, 260], "count": [246, 260], "callgrind": [246, 260], "necessari": [248, 251, 262, 263, 264], "specifi": 248, "tip": 250, "mmap": 250, "meta": 250, "load_state_dict": [250, 258], "assign": 250, "instanti": 251, "resnet": 251, "consumpt": 251, "examin": 251, "stack": 251, "And": [254, 255], "swap_tensor": 258, "quick": [260, 279], "wall": 260, "blocked_autorang": 260, "snippet": 260, "collect_callgrind": 260, "delv": 260, "deeper": 260, "b": [260, 262], "footnot": 260, "calcul": 261, "bia": 261, "directli": 261, "follow": 261, "none": 261, "instead": 261, "zero_grad": 261, "channels_last": 261, "uniform": 261, "numa": [261, 279], "openmp": [261, 279], "libiomp": 261, "cudnn": 261, "auto": 261, "tuner": 261, "avoid": 261, "unnecessari": 261, "prealloc": 261, "reduc": [261, 266], "accumul": 261, "find_unused_paramet": 261, "balanc": 261, "zero": 264, "while": 264, "cold": 266, "region": 266, "fp32": 269, "bf16": 269, "torchinductor_fx_graph_cach": 270, "torchinductor_autograd_cach": 270, "torchinductor_cache_dir": 270, "torchinductor_fx_graph_remote_cach": 270, "torchinductor_autograd_remote_cach": 270, "torchinductor_autotune_remote_cach": 270, "torchinductor_force_disable_cach": 270, "offer": 271, "mega": 271, "modular": 271, "torchinductor": 271, "triton": [271, 273], "remot": 271, "rewrit": 272, "mul": 272, "triton_op": 273, "fallback": 273, "flopcount": 273, "set_stanc": 274, "descript": 274, "prevent": 274, "measur": 274, "crash": 274, "sooner": 274, "aotinductor": 275, "challeng": 276, "them": 276, "No": 276, "caption": 276, "cannot": 276, "mutat": 276, "frozen": 276, "promptabl": 276, "torch_log": 277, "xeon": 279, "run_cpu": 279, "Will": 279, "command": 279, "explan": 279}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [20, "overview"], [113, "overview"], [117, "overview"], [124, "overview"], [141, "overview"], [149, "overview"], [154, "overview"], [177, "overview"], [197, "overview"], [236, "overview"], [261, "overview"]], "Prerequisites": [[1, "prerequisites"], [104, "prerequisites"], [113, "prerequisites"], [117, "prerequisites"], [171, "prerequisites"], [197, "prerequisites"], [213, "prerequisites"], [229, "prerequisites"], [233, "prerequisites"], [251, "prerequisites"], [266, "prerequisites"], [270, "prerequisites"], [271, "prerequisites"], [273, "prerequisites"], [274, "prerequisites"], [275, "prerequisites"], [276, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [149, "environment"], [156, "environment"]], "Transforms": [[1, "transforms"], [44, "transforms"], [55, "transforms"], [172, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [172, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [172, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [39, "optimizer"], [103, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [16, "conclusion"], [17, "conclusion"], [18, "conclusion"], [20, "conclusion"], [23, "conclusion"], [53, "conclusion"], [86, "conclusion"], [104, "conclusion"], [113, "conclusion"], [114, "conclusion"], [117, "conclusion"], [124, "conclusion"], [135, "conclusion"], [136, "conclusion"], [141, "conclusion"], [149, "conclusion"], [153, "conclusion"], [154, "conclusion"], [156, "conclusion"], [157, "conclusion"], [163, "conclusion"], [166, "conclusion"], [168, "conclusion"], [177, "conclusion"], [187, "conclusion"], [189, "conclusion"], [190, "conclusion"], [193, "conclusion"], [195, "conclusion"], [197, "conclusion"], [198, "conclusion"], [199, "conclusion"], [200, "conclusion"], [201, "conclusion"], [206, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [211, "conclusion"], [213, "conclusion"], [215, "conclusion"], [216, "conclusion"], [222, "conclusion"], [225, "conclusion"], [227, "conclusion"], [228, "conclusion"], [229, "conclusion"], [230, "conclusion"], [233, "conclusion"], [234, "conclusion"], [250, "conclusion"], [258, "conclusion"], [261, "conclusion"], [266, "conclusion"], [270, "conclusion"], [271, "conclusion"], [272, "conclusion"], [273, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [279, "conclusion"]], "Next Steps": [[1, "next-steps"], [171, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [86, "getting-started"], [235, "getting-started"], [236, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "Supporting Custom C++ Classes in torch.compile/torch.export": [[8, "supporting-custom-c-classes-in-torch-compile-torch-export"]], "Why do we need to make a Fake Class?": [[8, "why-do-we-need-to-make-a-fake-class"]], "PyTorch Custom Operators": [[9, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[9, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[9, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[9, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[9, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[9, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[10, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[11, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[11, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[11, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[11, "in-place-or-view-ops"]], "Adding autograd support": [[11, "adding-autograd-support"]], "Going beyond autograd": [[11, "going-beyond-autograd"]], "Autocast": [[11, "autocast"]], "Batched": [[11, "batched"]], "Tracer": [[11, "tracer"]], "Extending dispatcher for a new backend in C++": [[12, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[12, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[12, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[12, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[12, "register-kernels-for-the-new-backend"], [17, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[12, "autograd-support-for-the-new-backend"]], "Build an extension": [[12, "build-an-extension"]], "Custom operator support": [[12, "custom-operator-support"]], "JIT support": [[12, "jit-support"]], "Testing your backend against native PyTorch backends": [[12, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[12, "backward-compatibility"]], "Known issues & additional notes": [[12, "known-issues-additional-notes"]], "Future Work": [[12, "future-work"], [17, "future-work"]], "Stay in touch": [[12, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[13, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[13, "requirements"], [20, "requirements"], [170, "requirements"], [216, "requirements"], [226, "requirements"], [242, "requirements"], [280, "requirements"]], "What is Join?": [[13, "what-is-join"]], "Using Join with DistributedDataParallel": [[13, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[13, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[13, "passing-keyword-arguments"]], "How Does Join Work?": [[13, "how-does-join-work"]], "Joinable": [[13, "joinable"]], "JoinHook": [[13, "joinhook"]], "Join": [[13, "join"]], "Making a Toy Class Work with Join": [[13, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[14, "neural-transfer-using-pytorch"]], "Introduction": [[14, "introduction"], [56, "introduction"], [64, "introduction"], [95, "id1"], [101, "id1"], [103, "id1"], [135, "introduction"], [166, "introduction"], [182, "introduction"], [185, "introduction"], [195, "introduction"], [200, "introduction"], [201, "introduction"], [209, "introduction"], [210, "introduction"], [213, "introduction"], [218, "introduction"], [221, "introduction"], [222, "introduction"], [248, "introduction"], [251, "introduction"], [262, "introduction"], [263, "introduction"], [264, "introduction"], [270, "introduction"], [271, "introduction"]], "Underlying Principle": [[14, "underlying-principle"]], "Importing Packages and Selecting a Device": [[14, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[14, "loading-the-images"]], "Loss Functions": [[14, "loss-functions"], [99, "loss-functions"]], "Content Loss": [[14, "content-loss"]], "Style Loss": [[14, "style-loss"]], "Importing the Model": [[14, "importing-the-model"]], "Gradient Descent": [[14, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[15, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[15, "parameter-less-example"]], "Parametrized example": [[15, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[16, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[16, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[16, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[16, "environment-metadata-env-spec"]], "Specs shape": [[16, "specs-shape"]], "Reproducible experiments: seeding": [[16, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[16, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[16, "testing-our-environment"]], "Transforming an environment": [[16, "transforming-an-environment"]], "Writing custom transforms": [[16, "writing-custom-transforms"]], "Executing a rollout": [[16, "executing-a-rollout"]], "Batching computations": [[16, "batching-computations"]], "Training a simple policy": [[16, "training-a-simple-policy"]], "Training loop": [[16, "training-loop"], [149, "training-loop"], [172, "training-loop"], [173, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[17, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[17, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[17, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[17, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[17, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[17, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[17, "other-modules"]], "How to Improve User Experience with Privateuse1": [[17, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[17, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[17, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[17, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[18, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[18, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[18, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[18, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[18, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[19, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[20, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[20, "what-problem-does-semi-structured-sparsity-solve"], [216, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[20, "intro-setup"], [216, "intro-setup"]], "Establishing a baseline": [[20, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[20, "pruning-bert-to-be-2-4-sparse"], [216, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[20, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[21, "computation-times"], [42, "computation-times"], [51, "computation-times"], [68, "computation-times"], [74, "computation-times"], [78, "computation-times"], [90, "computation-times"], [100, "computation-times"], [110, "computation-times"], [118, "computation-times"], [122, "computation-times"], [179, "computation-times"], [217, "computation-times"], [257, "computation-times"], [268, "computation-times"], [281, "computation-times"]], "Exploring TorchRec sharding": [[22, "exploring-torchrec-sharding"]], "Installation": [[22, "installation"], [95, "installation"], [236, "installation"], [259, "installation"]], "Distributed Setup": [[22, "distributed-setup"]], "Constructing our embedding model": [[22, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[22, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[22, "multiprocessing-execution"]], "Table Wise Sharding": [[22, "table-wise-sharding"]], "Explore other sharding modes": [[22, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[23, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[23, "model-architecture"]], "2. Helper functions": [[23, "helper-functions"]], "3. Define dataset and data loaders": [[23, "define-dataset-and-data-loaders"]], "ImageNet Data": [[23, "imagenet-data"]], "4. Post-training static quantization": [[23, "post-training-static-quantization"]], "5. Quantization-aware training": [[23, "quantization-aware-training"]], "Speedup from quantization": [[23, "speedup-from-quantization"]], "Semi-Supervised Learning using USB built upon PyTorch": [[27, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[27, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[27, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[27, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[28, "audio-data-augmentation"]], "Audio Datasets": [[29, "audio-datasets"]], "Audio Feature Augmentation": [[30, "audio-feature-augmentation"]], "Audio Feature Extractions": [[31, "audio-feature-extractions"]], "Audio I/O": [[32, "audio-i-o"]], "Audio Resampling": [[33, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[34, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[34, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[34, "computing-gradients"]], "Disabling Gradient Tracking": [[34, "disabling-gradient-tracking"]], "More on Computational Graphs": [[34, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[34, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[34, "further-reading"], [35, "further-reading"], [36, "further-reading"], [39, "further-reading"], [44, "further-reading"], [57, "further-reading"], [59, "further-reading"], [60, "further-reading"], [119, "further-reading"], [124, "further-reading"], [144, "further-reading"], [145, "further-reading"], [149, "further-reading"], [194, "further-reading"], [206, "further-reading"], [208, "further-reading"], [209, "further-reading"], [261, "further-reading"]], "Build the Neural Network": [[35, "build-the-neural-network"]], "Get Device for Training": [[35, "get-device-for-training"]], "Define the Class": [[35, "define-the-class"]], "Model Layers": [[35, "model-layers"]], "nn.Flatten": [[35, "nn-flatten"]], "nn.Linear": [[35, "nn-linear"]], "nn.ReLU": [[35, "nn-relu"]], "nn.Sequential": [[35, "nn-sequential"]], "nn.Softmax": [[35, "nn-softmax"]], "Model Parameters": [[35, "model-parameters"]], "Datasets & DataLoaders": [[36, "datasets-dataloaders"]], "Loading a Dataset": [[36, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[36, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[36, "creating-a-custom-dataset-for-your-files"]], "__init__": [[36, "init"]], "__len__": [[36, "len"]], "__getitem__": [[36, "getitem"]], "Preparing your data for training with DataLoaders": [[36, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[36, "iterate-through-the-dataloader"]], "Learn the Basics": [[37, "learn-the-basics"], [38, "learn-the-basics"]], "Running the Tutorial Code": [[38, "running-the-tutorial-code"], [98, "running-the-tutorial-code"]], "How to Use this Guide": [[38, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[39, "optimizing-model-parameters"]], "Prerequisite Code": [[39, "prerequisite-code"]], "Hyperparameters": [[39, "hyperparameters"]], "Optimization Loop": [[39, "optimization-loop"]], "Loss Function": [[39, "loss-function"], [50, "loss-function"], [103, "loss-function"]], "Full Implementation": [[39, "full-implementation"]], "Quickstart": [[40, "quickstart"]], "Working with data": [[40, "working-with-data"]], "Creating Models": [[40, "creating-models"]], "Optimizing the Model Parameters": [[40, "optimizing-the-model-parameters"]], "Saving Models": [[40, "saving-models"]], "Loading Models": [[40, "loading-models"]], "Save and Load the Model": [[41, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[41, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[41, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[41, "related-tutorials"]], "Tensors": [[43, "tensors"], [52, "tensors"], [84, "tensors"], [120, "tensors"], [120, "id1"]], "Initializing a Tensor": [[43, "initializing-a-tensor"]], "Attributes of a Tensor": [[43, "attributes-of-a-tensor"]], "Operations on Tensors": [[43, "operations-on-tensors"]], "Bridge with NumPy": [[43, "bridge-with-numpy"], [52, "bridge-with-numpy"]], "Tensor to NumPy array": [[43, "tensor-to-numpy-array"], [52, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[43, "numpy-array-to-tensor"], [52, "numpy-array-to-tensor"]], "ToTensor()": [[44, "totensor"]], "Lambda Transforms": [[44, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[45, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[46, "a-gentle-introduction-to-torch-autograd"]], "Background": [[46, "background"], [166, "background"]], "Usage in PyTorch": [[46, "usage-in-pytorch"]], "Differentiation in Autograd": [[46, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[46, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[46, "computational-graph"]], "Exclusion from the DAG": [[46, "exclusion-from-the-dag"]], "Further readings:": [[46, "further-readings"]], "Training a Classifier": [[47, "training-a-classifier"]], "What about data?": [[47, "what-about-data"]], "Training an image classifier": [[47, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[47, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[47, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[47, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[47, "train-the-network"]], "5. Test the network on the test data": [[47, "test-the-network-on-the-test-data"]], "Training on GPU": [[47, "training-on-gpu"]], "Training on multiple GPUs": [[47, "training-on-multiple-gpus"]], "Where do I go next?": [[47, "where-do-i-go-next"]], "Optional: Data Parallelism": [[48, "optional-data-parallelism"]], "Imports and parameters": [[48, "imports-and-parameters"]], "Dummy DataSet": [[48, "dummy-dataset"]], "Simple Model": [[48, "simple-model"]], "Create Model and DataParallel": [[48, "create-model-and-dataparallel"]], "Run the Model": [[48, "run-the-model"]], "Results": [[48, "results"], [56, "results"], [79, "results"], [172, "results"]], "2 GPUs": [[48, "gpus"]], "3 GPUs": [[48, "id1"]], "8 GPUs": [[48, "id2"]], "Summary": [[48, "summary"], [133, "summary"], [177, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[49, "deep-learning-with-pytorch-a-60-minute-blitz"], [61, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[50, "neural-networks"]], "Define the network": [[50, "define-the-network"]], "Backprop": [[50, "backprop"]], "Update the weights": [[50, "update-the-weights"]], "Tensor Initialization": [[52, "tensor-initialization"]], "Tensor Attributes": [[52, "tensor-attributes"]], "Tensor Operations": [[52, "tensor-operations"]], "Chatbot Tutorial": [[53, "chatbot-tutorial"]], "Preparations": [[53, "preparations"]], "Load & Preprocess Data": [[53, "load-preprocess-data"]], "Create formatted data file": [[53, "create-formatted-data-file"]], "Load and trim data": [[53, "load-and-trim-data"]], "Prepare Data for Models": [[53, "prepare-data-for-models"]], "Define Models": [[53, "define-models"]], "Seq2Seq Model": [[53, "seq2seq-model"]], "Encoder": [[53, "encoder"]], "Decoder": [[53, "decoder"]], "Define Training Procedure": [[53, "define-training-procedure"]], "Masked loss": [[53, "masked-loss"]], "Single training iteration": [[53, "single-training-iteration"]], "Training iterations": [[53, "training-iterations"]], "Define Evaluation": [[53, "define-evaluation"]], "Greedy decoding": [[53, "greedy-decoding"]], "Evaluate my text": [[53, "evaluate-my-text"]], "Run Model": [[53, "run-model"]], "Run Training": [[53, "run-training"]], "Run Evaluation": [[53, "run-evaluation"]], "Running Tutorials in Google Colab": [[54, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[54, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[54, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[54, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[55, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[55, "dataset-class"]], "Compose transforms": [[55, "compose-transforms"]], "Iterating through the dataset": [[55, "iterating-through-the-dataset"]], "Afterword: torchvision": [[55, "afterword-torchvision"]], "DCGAN Tutorial": [[56, "dcgan-tutorial"]], "Generative Adversarial Networks": [[56, "generative-adversarial-networks"]], "What is a GAN?": [[56, "what-is-a-gan"]], "What is a DCGAN?": [[56, "what-is-a-dcgan"]], "Inputs": [[56, "inputs"], [79, "inputs"]], "Data": [[56, "data"]], "Implementation": [[56, "implementation"], [79, "implementation"]], "Weight Initialization": [[56, "weight-initialization"]], "Generator": [[56, "generator"]], "Discriminator": [[56, "discriminator"]], "Loss Functions and Optimizers": [[56, "loss-functions-and-optimizers"]], "Training": [[56, "training"], [139, "training"], [140, "training"], [173, "training"], [178, "training"], [235, "training"], [235, "id5"]], "Where to Go Next": [[56, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[57, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[57, "why-use-torchrun"]], "Graceful restarts": [[57, "graceful-restarts"]], "Process group initialization": [[57, "process-group-initialization"]], "Use torchrun-provided environment variables": [[57, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[57, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[57, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[57, "resuming-training"]], "Running the script": [[57, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[58, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[58, "running-the-code"]], "Tutorial sections": [[58, "tutorial-sections"]], "Multi GPU training with DDP": [[59, "multi-gpu-training-with-ddp"]], "Imports": [[59, "imports"]], "Constructing the process group": [[59, "constructing-the-process-group"]], "Constructing the DDP model": [[59, "constructing-the-ddp-model"]], "Distributing input data": [[59, "distributing-input-data"]], "Saving model checkpoints": [[59, "saving-model-checkpoints"]], "Running the distributed training job": [[59, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[60, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[60, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[61, "what-is-pytorch"]], "Goal of this tutorial:": [[61, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[62, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[63, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[64, "pytorch-distributed-overview"]], "Parallelism APIs": [[64, "parallelism-apis"]], "Sharding primitives": [[64, "sharding-primitives"]], "Communications APIs": [[64, "communications-apis"]], "Launcher": [[64, "launcher"]], "Applying Parallelism To Scale Your Model": [[64, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[64, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[66, "pytorch-tensors-and-autograd"], [120, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[67, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[69, "pytorch-control-flow-weight-sharing"], [120, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[71, "pytorch-custom-nn-modules"], [120, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[72, "pytorch-nn"], [120, "pytorch-nn"]], "PyTorch: optim": [[73, "pytorch-optim"], [120, "pytorch-optim"]], "Warm-up: numpy": [[76, "warm-up-numpy"], [120, "warm-up-numpy"]], "PyTorch: Tensors": [[77, "pytorch-tensors"], [120, "pytorch-tensors"]], "Adversarial Example Generation": [[79, "adversarial-example-generation"]], "Threat Model": [[79, "threat-model"]], "Fast Gradient Sign Attack": [[79, "fast-gradient-sign-attack"]], "Model Under Attack": [[79, "model-under-attack"]], "FGSM Attack": [[79, "fgsm-attack"]], "Testing Function": [[79, "testing-function"]], "Run Attack": [[79, "run-attack"]], "Accuracy vs Epsilon": [[79, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[79, "sample-adversarial-examples"]], "Where to go next?": [[79, "where-to-go-next"]], "Finetuning Torchvision Models": [[80, "finetuning-torchvision-models"]], "Autograd": [[81, "autograd"], [120, "autograd"], [120, "id2"]], "nn Package": [[82, "nn-package"]], "Multi-GPU Examples": [[83, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[85, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[86, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[86, "installing-hta"]], "Temporal Breakdown": [[86, "temporal-breakdown"]], "Idle Time Breakdown": [[86, "idle-time-breakdown"]], "Kernel Breakdown": [[86, "kernel-breakdown"]], "Kernel Duration Distribution": [[86, "kernel-duration-distribution"]], "Communication Computation Overlap": [[86, "communication-computation-overlap"]], "Augmented Counters": [[86, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[86, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[86, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[87, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[89, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[89, "hybrid-frontend-information"]], "Motivating Example": [[89, "motivating-example"]], "Part 1 - Tracing a pure python function": [[89, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[89, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[89, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[89, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[89, "top-level-module"]], "Running the Model": [[89, "running-the-model"]], "Tracing the Top-Level Model": [[89, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[91, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[92, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[92, "setup-imports"]], "Data loaders": [[92, "data-loaders"]], "Configurable neural network": [[92, "configurable-neural-network"]], "The train function": [[92, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[92, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[92, "communicating-with-ray-tune"]], "Full training function": [[92, "full-training-function"]], "Test set accuracy": [[92, "test-set-accuracy"]], "Configuring the search space": [[92, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[93, "introduction-to-pytorch-youtube-series"], [98, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[94, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[94, "what-do-we-need-autograd-for"]], "A Simple Example": [[94, "a-simple-example"]], "Autograd in Training": [[94, "autograd-in-training"]], "Turning Autograd Off and On": [[94, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[94, "autograd-and-in-place-operations"]], "Autograd Profiler": [[94, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[94, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[94, "the-high-level-api"]], "Model Understanding with Captum": [[95, "model-understanding-with-captum"]], "A First Example": [[95, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[95, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[95, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[95, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[95, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[96, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[97, "introduction-to-pytorch"], [108, "introduction-to-pytorch"]], "PyTorch Tensors": [[97, "pytorch-tensors"]], "PyTorch Models": [[97, "pytorch-models"]], "Datasets and Dataloaders": [[97, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[97, "training-your-pytorch-model"]], "Building Models with PyTorch": [[99, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[99, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[99, "common-layer-types"]], "Linear Layers": [[99, "linear-layers"]], "Convolutional Layers": [[99, "convolutional-layers"]], "Recurrent Layers": [[99, "recurrent-layers"]], "Transformers": [[99, "transformers"]], "Other Layers and Functions": [[99, "other-layers-and-functions"]], "Data Manipulation Layers": [[99, "data-manipulation-layers"]], "Activation Functions": [[99, "activation-functions"]], "PyTorch TensorBoard Support": [[101, "pytorch-tensorboard-support"]], "Before You Start": [[101, "before-you-start"]], "Showing Images in TensorBoard": [[101, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[101, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[101, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[101, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[101, "other-resources"], [103, "other-resources"]], "Introduction to PyTorch Tensors": [[102, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[102, "creating-tensors"], [108, "creating-tensors"]], "Random Tensors and Seeding": [[102, "random-tensors-and-seeding"]], "Tensor Shapes": [[102, "tensor-shapes"]], "Tensor Data Types": [[102, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[102, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[102, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[102, "more-math-with-tensors"]], "Altering Tensors in Place": [[102, "altering-tensors-in-place"]], "Copying Tensors": [[102, "copying-tensors"]], "Moving to Accelerator": [[102, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[102, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[102, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[102, "numpy-bridge"]], "Training with PyTorch": [[103, "training-with-pytorch"]], "Dataset and DataLoader": [[103, "dataset-and-dataloader"]], "The Model": [[103, "the-model"]], "The Training Loop": [[103, "the-training-loop"]], "Per-Epoch Activity": [[103, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[104, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[104, "loading-cifar-10"]], "Defining model classes and utility functions": [[104, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[104, "cross-entropy-runs"]], "Knowledge distillation run": [[104, "knowledge-distillation-run"]], "Cosine loss minimization run": [[104, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[104, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[105, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[105, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[105, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[105, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[105, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[106, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[106, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[106, "affine-maps"]], "Non-Linearities": [[106, "non-linearities"]], "Softmax and Probabilities": [[106, "softmax-and-probabilities"]], "Objective Functions": [[106, "objective-functions"]], "Optimization and Training": [[106, "optimization-and-training"]], "Creating Network Components in PyTorch": [[106, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[106, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[107, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[108, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[108, "operations-with-tensors"]], "Reshaping Tensors": [[108, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[108, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[109, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[109, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[109, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[109, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[111, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[111, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[111, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[111, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[111, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[112, "what-is-torch-nn-really"]], "MNIST data setup": [[112, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[112, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[112, "using-torch-nn-functional"]], "Refactor using nn.Module": [[112, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[112, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[112, "refactor-using-torch-optim"]], "Refactor using Dataset": [[112, "refactor-using-dataset"]], "Refactor using DataLoader": [[112, "refactor-using-dataloader"]], "Add validation": [[112, "add-validation"]], "Create fit() and get_data()": [[112, "create-fit-and-get-data"]], "Switch to CNN": [[112, "switch-to-cnn"]], "Using nn.Sequential": [[112, "using-nn-sequential"]], "Wrapping DataLoader": [[112, "wrapping-dataloader"]], "Using your Accelerator": [[112, "using-your-accelerator"]], "Closing thoughts": [[112, "closing-thoughts"]], "Export a model with control flow to ONNX": [[113, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[113, "define-the-models"]], "Exporting the Model: First Attempt": [[113, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[113, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[113, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[113, "further-reading"], [114, "further-reading"], [116, "further-reading"], [117, "further-reading"]], "Export a PyTorch model to ONNX": [[114, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[114, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[114, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[114, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[114, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[114, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[114, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[114, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[115, "onnx"]], "Introduction to ONNX": [[116, "introduction-to-onnx"]], "Dependencies": [[116, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[117, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[117, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[117, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[117, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[119, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[119, "performance-debugging-using-profiler"]], "Profile the forward pass": [[119, "profile-the-forward-pass"]], "Print profiler results": [[119, "print-profiler-results"]], "Improve memory performance": [[119, "improve-memory-performance"]], "Improve time performance": [[119, "improve-time-performance"]], "Learning PyTorch with Examples": [[120, "learning-pytorch-with-examples"]], "Table of Contents": [[120, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[120, "pytorch-defining-new-autograd-functions"]], "nn module": [[120, "nn-module"], [120, "id3"]], "Examples": [[120, "examples"], [215, "examples"], [274, "examples"]], "Saving and Loading Models": [[121, "saving-and-loading-models"]], "What is a state_dict?": [[121, "what-is-a-state-dict"]], "Example:": [[121, "example"]], "Saving & Loading Model for Inference": [[121, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[121, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[121, "save-load-entire-model"]], "Saving an Exported Program": [[121, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[121, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[121, "save"], [121, "id1"], [121, "id3"]], "Load:": [[121, "load"], [121, "id2"], [121, "id4"]], "Saving Multiple Models in One File": [[121, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[121, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[121, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[121, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[121, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[121, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[121, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[123, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[124, "template-tutorial"]], "Steps": [[124, "steps"], [182, "steps"], [246, "steps"], [248, "steps"], [251, "steps"], [262, "steps"], [263, "steps"], [264, "steps"], [266, "steps"]], "(Optional) Additional Exercises": [[124, "optional-additional-exercises"]], "Text classification with the torchtext library": [[125, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[126, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[127, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[127, "load-data"]], "Visualize a few images": [[127, "visualize-a-few-images"]], "Training the model": [[127, "training-the-model"], [180, "training-the-model"]], "Visualizing the model predictions": [[127, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[127, "finetuning-the-convnet"]], "Train and evaluate": [[127, "train-and-evaluate"], [127, "id1"]], "ConvNet as fixed feature extractor": [[127, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[127, "inference-on-custom-images"]], "Further Learning": [[127, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[128, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[129, "language-translation-with-nn-transformer-and-torchtext"]], "Distributed and Parallel Training Tutorials": [[130, "distributed-and-parallel-training-tutorials"]], "Learn DDP": [[130, "learn-ddp"]], "Learn FSDP": [[130, "learn-fsdp"]], "Learn Tensor Parallel (TP)": [[130, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[130, "learn-devicemesh"]], "Learn RPC": [[130, "learn-rpc"]], "Custom Extensions": [[130, "custom-extensions"]], "Welcome to PyTorch Tutorials": [[131, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[131, "additional-resources"], [168, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[132, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[132, "how-fsdp-works"]], "How to use FSDP": [[132, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[133, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[133, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[133, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[133, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[133, "transformer-wrapping-policy"]], "Mixed Precision": [[133, "mixed-precision"]], "Intializing FSDP Model on Device": [[133, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[133, "sharding-strategy"]], "Backward Prefetch": [[133, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[133, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[134, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[134, "how-fsdp2-works"]], "How to use FSDP2": [[134, "how-to-use-fsdp2"]], "Model Initialization": [[134, "model-initialization"]], "Forward/Backward with Prefetching": [[134, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[134, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[134, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[134, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[134, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[134, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[135, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[135, "performance-benchmark"]], "Impact": [[135, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[135, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[135, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[135, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[136, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[136, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[136, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[136, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[136, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[136, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[136, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[137, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[137, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[137, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[137, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[137, "saved-tensors-hooks"]], "Some unconventional examples": [[137, "some-unconventional-examples"]], "Returning an int": [[137, "returning-an-int"]], "Returning a tuple": [[137, "returning-a-tuple"]], "Returning a str": [[137, "returning-a-str"]], "Saving tensors to CPU": [[137, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[137, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[138, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[138, "defining-the-torchx-app"]], "Setting up the Runner": [[138, "setting-up-the-runner"]], "Setting up the SearchSpace": [[138, "setting-up-the-searchspace"]], "Setting up Metrics": [[138, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[138, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[138, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[138, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[138, "configuring-the-scheduler"]], "Running the optimization": [[138, "running-the-optimization"]], "Evaluating the results": [[138, "evaluating-the-results"]], "Acknowledgments": [[138, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[139, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[139, "recommended-preparation"]], "Preparing Torch": [[139, "preparing-torch"]], "Preparing the Data": [[139, "preparing-the-data"], [140, "preparing-the-data"]], "Turning Names into Tensors": [[139, "turning-names-into-tensors"]], "Creating the Network": [[139, "creating-the-network"], [140, "creating-the-network"]], "Training the Network": [[139, "training-the-network"], [140, "training-the-network"]], "Plotting the Results": [[139, "plotting-the-results"]], "Evaluating the Results": [[139, "evaluating-the-results"]], "Exercises": [[139, "exercises"], [140, "exercises"], [178, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[140, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[140, "preparing-for-training"]], "Plotting the Losses": [[140, "plotting-the-losses"]], "Sampling the Network": [[140, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[141, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[141, "setup"], [148, "setup"], [149, "setup"], [160, "setup"], [168, "setup"], [182, "setup"], [195, "setup"], [248, "setup"], [251, "setup"], [262, "setup"], [263, "setup"], [264, "setup"], [266, "setup"], [277, "setup"]], "Basic usage": [[141, "basic-usage"]], "Inspecting the compiled autograd logs": [[141, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[141, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[141, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[141, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[142, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[142, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[142, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[142, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[142, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[142, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[143, "double-backward-with-custom-functions"]], "Saving the Inputs": [[143, "saving-the-inputs"]], "Saving the Outputs": [[143, "saving-the-outputs"]], "Saving Intermediate Results": [[143, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[143, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[143, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[144, "training-real-world-models-with-ddp"]], "Files used for training": [[144, "files-used-for-training"]], "Saving and Loading from the cloud": [[144, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[144, "using-mixed-precision"]], "When is DDP not enough?": [[144, "when-is-ddp-not-enough"]], "Multinode Training": [[145, "multinode-training"]], "Local and Global ranks": [[145, "local-and-global-ranks"]], "Heteregeneous Scaling": [[145, "heteregeneous-scaling"]], "Troubleshooting": [[145, "troubleshooting"], [245, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[146, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[146, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[146, "basic-use-case"]], "Skewed Processing Speeds": [[146, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[146, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[146, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[146, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[147, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[148, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[148, "point-to-point-communication"]], "Collective Communication": [[148, "collective-communication"]], "Distributed Training": [[148, "distributed-training"]], "Our Own Ring-Allreduce": [[148, "our-own-ring-allreduce"]], "Advanced Topics": [[148, "advanced-topics"]], "Communication Backends": [[148, "communication-backends"]], "Initialization Methods": [[148, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[149, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[149, "policy"], [172, "policy"]], "Convolutional network": [[149, "convolutional-network"]], "LSTM Module": [[149, "lstm-module"]], "MLP": [[149, "mlp"]], "Using the Q-Values to select an action": [[149, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[149, "using-the-model-for-the-loss"]], "DQN Loss": [[149, "dqn-loss"]], "Collector and replay buffer": [[149, "collector-and-replay-buffer"]], "Model ensembling": [[150, "model-ensembling"]], "What is model ensembling?": [[150, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[150, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[150, "performance"]], "Forced Alignment with Wav2Vec2": [[151, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[152, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[152, "basic-usage"], [187, "basic-usage"], [189, "basic-usage"], [234, "basic-usage"], [273, "basic-usage"]], "Usage with Modules": [[152, "usage-with-modules"]], "Using the functional Module API (beta)": [[152, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[152, "custom-autograd-function"]], "Functional API (beta)": [[152, "functional-api-beta"]], "Using the functional API with Modules": [[152, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[153, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[153, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[153, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[153, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[154, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[154, "debugging"]], "Get more logging information": [[154, "get-more-logging-information"]], "Determine component of error": [[154, "determine-component-of-error"]], "Compilation error": [[154, "compilation-error"]], "Accuracy debugging": [[154, "accuracy-debugging"]], "Performance profiling": [[154, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[155, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[155, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[155, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[155, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[155, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[155, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[156, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[156, "rl-definitions"]], "Initialize Environment": [[156, "initialize-environment"]], "Preprocess Environment": [[156, "preprocess-environment"]], "Agent": [[156, "agent"]], "Act": [[156, "act"]], "Cache and Recall": [[156, "cache-and-recall"]], "Learn": [[156, "learn"]], "Neural Network": [[156, "neural-network"]], "TD Estimate & TD Target": [[156, "td-estimate-td-target"]], "Updating the model": [[156, "updating-the-model"]], "Save checkpoint": [[156, "save-checkpoint"]], "Putting it all together": [[156, "putting-it-all-together"]], "Logging": [[156, "logging"]], "Let\u2019s play!": [[156, "lets-play"]], "Channels Last Memory Format in PyTorch": [[157, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[157, "memory-format-api"]], "Performance Gains": [[157, "performance-gains"]], "Converting existing models": [[157, "converting-existing-models"]], "Work to do": [[157, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[159, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[160, "neural-tangent-kernels"]], "Create a function version of the model": [[160, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[160, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[160, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[161, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[162, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[163, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[163, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[163, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[163, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[163, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[163, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[164, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[164, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[164, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[164, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[164, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[164, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[164, "concatenating-parametrizations"]], "Initializing parametrizations": [[164, "initializing-parametrizations"]], "Removing parametrizations": [[164, "removing-parametrizations"]], "Per-sample-gradients": [[165, "per-sample-gradients"]], "What is it?": [[165, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[165, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[165, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[166, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[166, "what-you-will-learn"], [197, "what-you-will-learn"], [275, "what-you-will-learn"]], "Preamble": [[166, "preamble"]], "Memory management basics": [[166, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[166, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[166, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[166, "a-pytorch-perspective"]], "pin_memory()": [[166, "pin-memory"]], "non_blocking=True": [[166, "non-blocking-true"]], "Synergies": [[166, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[166, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[166, "practical-recommendations"]], "Additional considerations": [[166, "additional-considerations"]], "Additional resources": [[166, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[167, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[168, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[168, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[168, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[168, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[169, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[169, "basics"], [174, "basics"]], "Step 1: Implement a Subclass of Backend": [[169, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[169, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[169, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[169, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[170, "pruning-tutorial"]], "Create a model": [[170, "create-a-model"]], "Inspect a Module": [[170, "inspect-a-module"]], "Pruning a Module": [[170, "pruning-a-module"]], "Iterative Pruning": [[170, "iterative-pruning"]], "Serializing a pruned model": [[170, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[170, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[170, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[170, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[170, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[171, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[171, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[171, "installing-pytorch-and-opencv"]], "Video Capture": [[171, "video-capture"]], "Image Preprocessing": [[171, "image-preprocessing"]], "Model Choices": [[171, "model-choices"]], "MobileNetV2: Quantization and JIT": [[171, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[171, "putting-it-together"]], "Troubleshooting: Performance": [[171, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[172, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[172, "define-hyperparameters"]], "Data collection parameters": [[172, "data-collection-parameters"]], "PPO parameters": [[172, "ppo-parameters"]], "Define an environment": [[172, "define-an-environment"]], "Normalization": [[172, "normalization"]], "Value network": [[172, "value-network"]], "Loss function": [[172, "loss-function"]], "Conclusion and next steps": [[172, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[173, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[173, "replay-memory"]], "DQN algorithm": [[173, "dqn-algorithm"]], "Q-network": [[173, "q-network"]], "Hyperparameters and utilities": [[173, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[174, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[174, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[174, "batch-processing-cartpole-solver"]], "Learn More": [[174, "learn-more"], [182, "learn-more"], [246, "learn-more"], [248, "learn-more"], [251, "learn-more"], [259, "learn-more"], [262, "learn-more"], [263, "learn-more"], [264, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[175, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[176, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[176, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[176, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[177, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[177, "fused-implementations"]], "Explicit Dispatcher Control": [[177, "explicit-dispatcher-control"]], "Hardware dependence": [[177, "hardware-dependence"]], "Causal Self Attention": [[177, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[177, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[177, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[177, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[178, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[178, "loading-data-files"]], "The Seq2Seq Model": [[178, "the-seq2seq-model"]], "The Encoder": [[178, "the-encoder"]], "The Decoder": [[178, "the-decoder"]], "Simple Decoder": [[178, "simple-decoder"]], "Attention Decoder": [[178, "attention-decoder"]], "Preparing Training Data": [[178, "preparing-training-data"]], "Training the Model": [[178, "training-the-model"]], "Plotting results": [[178, "plotting-results"]], "Evaluation": [[178, "evaluation"]], "Training and Evaluating": [[178, "training-and-evaluating"]], "Visualizing Attention": [[178, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[180, "spatial-transformer-networks-tutorial"]], "Loading the data": [[180, "loading-the-data"]], "Depicting spatial transformer networks": [[180, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[180, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[181, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[182, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[182, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[182, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[182, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[182, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[182, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[182, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[182, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[183, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[183, "tensorboard-setup"]], "2. Writing to TensorBoard": [[183, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[183, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[183, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[183, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[183, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[184, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[185, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[185, "setting-up-the-environment"]], "Importing related libraries": [[185, "importing-related-libraries"]], "Clean-up before a run": [[185, "clean-up-before-a-run"]], "Downloading the data": [[185, "downloading-the-data"]], "Reading the data": [[185, "reading-the-data"]], "Classify image patches": [[185, "classify-image-patches"]], "Define PatchPredictor model": [[185, "define-patchpredictor-model"]], "Predict patch labels": [[185, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[185, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[185, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[185, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[186, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[186, "fusing-convolution-with-batch-norm"], [186, "id1"]], "Pattern Matching with torch.compile": [[186, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[186, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[186, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[187, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[187, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[187, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[187, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[187, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[187, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[188, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[189, "torch-export-tutorial"]], "Graph Breaks": [[189, "graph-breaks"]], "Non-Strict Export": [[189, "non-strict-export"]], "Control Flow Ops": [[189, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[189, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[189, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[189, "specialization"]], "Named Dims": [[189, "named-dims"]], "Constraint violations, suggested fixes": [[189, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[189, "data-dependent-errors"]], "Guards, torch._check()": [[189, "guards-torch-check"]], "Specialized values": [[189, "specialized-values"]], "Custom Ops": [[189, "custom-ops"]], "IR/Decompositions": [[189, "ir-decompositions"]], "ExportDB": [[189, "exportdb"]], "Running the Exported Program": [[189, "running-the-exported-program"]], "Introduction to TorchRec": [[190, "introduction-to-torchrec"], [191, "introduction-to-torchrec"]], "Install Dependencies": [[190, "install-dependencies"]], "Embeddings": [[190, "embeddings"]], "Embeddings in RecSys": [[190, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[190, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[190, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[190, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[190, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[190, "distributed-training-and-sharding"]], "Distributed Embeddings": [[190, "distributed-embeddings"]], "Sharding": [[190, "sharding"]], "Sharded Modules": [[190, "sharded-modules"]], "Planner": [[190, "planner"]], "Planner Result": [[190, "planner-result"]], "GPU Training with LazyAwaitable": [[190, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[190, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[190, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[190, "distributedmodelparallel"]], "Sharding Best Practices": [[190, "sharding-best-practices"]], "Adding in the Optimizer": [[190, "adding-in-the-optimizer"]], "Optimizer Classes": [[190, "optimizer-classes"]], "Fused optimizer in TorchRec": [[190, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[190, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[192, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[192, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[192, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[192, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[192, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[192, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[192, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[192, "putting-everything-together"]], "Testing forward() method (Optional)": [[192, "testing-forward-method-optional"]], "Wrapping up": [[192, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[193, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[193, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[193, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[193, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[193, "multiheadattention"]], "Utilities": [[193, "utilities"]], "GPT-style layer": [[193, "gpt-style-layer"]], "Going one step further": [[193, "going-one-step-further"]], "Cross Attention": [[193, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[193, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[193, "flexattention-njt"]], "Packed Projection": [[193, "packed-projection"]], "Input projection for MultiheadAttention": [[193, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[193, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[193, "extended-examples"]], "(prototype) PyTorch BackendConfig Tutorial": [[194, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[194, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[194, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[194, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[194, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[194, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[194, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[194, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[194, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[195, "introduction-to-context-parallel"]], "Enable Context Parallel": [[195, "enable-context-parallel"]], "Select Rotation Approach": [[195, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[196, "profiling-pytorch-rpc-based-workloads"], [232, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[197, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[197, "enabling-flight-recorder"]], "Additional Settings": [[197, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[197, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[197, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[197, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[197, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[198, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[198, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[199, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[199, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[200, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[200, "prerequisites"], [210, "prerequisites"]], "Enabling the API": [[200, "enabling-the-api"]], "Example code": [[200, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[201, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[201, "software-installation"]], "Install a Compiler": [[201, "install-a-compiler"]], "Set Up Environment": [[201, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[201, "id1"]], "Intel Compiler": [[201, "id2"]], "LLVM Compiler": [[201, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[203, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[204, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[205, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[206, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[206, "introduction-and-motivation"]], "Preparation": [[206, "preparation"], [207, "preparation"], [208, "preparation"]], "Simpler Code with MaskedTensor": [[206, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[206, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[206, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[207, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[207, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[207, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[208, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[208, "using-maskedtensor"]], "Construction": [[208, "construction"]], "Accessing the data and mask": [[208, "accessing-the-data-and-mask"]], "Indexing and slicing": [[208, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[208, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[208, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[208, "torch-where"]], "Another torch.where": [[208, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[208, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[208, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[208, "safe-softmax"]], "Implementing missing torch.nan* operators": [[208, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[209, "prototype-maskedtensor-sparsity"]], "Principles": [[209, "principles"]], "Sparse COO tensors": [[209, "sparse-coo-tensors"]], "Sparse CSR tensors": [[209, "sparse-csr-tensors"]], "Supported Operations": [[209, "supported-operations"]], "Unary": [[209, "unary"]], "Binary": [[209, "binary"]], "Reductions": [[209, "reductions"]], "MaskedTensor Helper Methods": [[209, "maskedtensor-helper-methods"]], "Appendix": [[209, "appendix"]], "Sparse COO Construction": [[209, "sparse-coo-construction"]], "Sparse CSR Construction": [[209, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[210, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[210, "activating-the-max-autotune-mode"]], "Example": [[210, "example"]], "Getting Started with Nested Tensors": [[211, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[211, "nested-tensor-initialization"]], "Nested Tensor Operations": [[211, "nested-tensor-operations"]], "Why Nested Tensor": [[211, "why-nested-tensor"]], "See Also": [[211, "see-also"], [224, "see-also"], [273, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[212, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[213, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[213, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[213, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[213, "capture-fx-graph"]], "2. Apply Quantization": [[213, "apply-quantization"]], "3. Lower into OpenVINO representation": [[213, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[213, "optional-improve-quantized-model-metrics"]], "PyTorch Prototype Recipes": [[214, "pytorch-prototype-recipes"]], "Autoloading Out-of-Tree Extension": [[215, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[215, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[215, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[216, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[216, "id1"]], "Skipping Module Parameter Initialization": [[218, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[218, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[218, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[218, "implementation-details"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[219, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[220, "torch-vmap"]], "So, what is vmap?": [[220, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[221, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[221, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[221, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[221, "desktop-build"]], "Vulkan SDK": [[221, "vulkan-sdk"]], "Android build": [[221, "android-build"]], "Model preparation": [[221, "model-preparation"]], "Using Vulkan backend in code": [[221, "using-vulkan-backend-in-code"]], "C++ API": [[221, "c-api"]], "Python API": [[221, "python-api"]], "Android Java API": [[221, "android-java-api"]], "Building android test app with Vulkan": [[221, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[221, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[222, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[222, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[222, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[222, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[222, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[223, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[224, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[224, "model-setup"], [225, "model-setup"], [233, "model-setup"]], "Setting up and running the optimizer benchmark": [[224, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[225, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[225, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[225, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[226, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[226, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[226, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[227, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[227, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[227, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[228, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[228, "how-dcp-works"]], "How to use DCP": [[228, "how-to-use-dcp"]], "Saving": [[228, "saving"]], "Loading": [[228, "loading"]], "Formats": [[228, "formats"]], "Getting Started with CommDebugMode": [[229, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[229, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[229, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[230, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[230, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[230, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[230, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[230, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[233, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[233, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[233, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[234, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[234, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[234, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[234, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[234, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[235, "intel-extension-for-pytorch"]], "Features": [[235, "features"], [236, "features"]], "Examples \u2013 CPU": [[235, "examples-cpu"]], "Float32": [[235, "float32"], [235, "id1"], [235, "id3"], [235, "id6"], [235, "id9"], [235, "id12"]], "BFloat16": [[235, "bfloat16"], [235, "id2"], [235, "id4"], [235, "id7"], [235, "id10"], [235, "id13"]], "Inference - Imperative Mode": [[235, "inference-imperative-mode"], [235, "id8"]], "Inference - TorchScript Mode": [[235, "inference-torchscript-mode"], [235, "id11"]], "Examples \u2013 GPU": [[235, "examples-gpu"]], "Float16": [[235, "float16"], [235, "id14"]], "C++ (CPU only)": [[235, "c-cpu-only"]], "Model Zoo (CPU only)": [[235, "model-zoo-cpu-only"]], "Tutorials": [[235, "tutorials"], [236, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[236, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[236, "usages"]], "Model": [[236, "model"]], "Accuracy driven quantization": [[236, "accuracy-driven-quantization"]], "Quantization aware training": [[236, "quantization-aware-training"]], "Performance only quantization": [[236, "performance-only-quantization"]], "Quantization outputs": [[236, "quantization-outputs"]], "Deployment": [[236, "deployment"]], "Loading data in PyTorch": [[237, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[238, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[239, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[240, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[241, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[242, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[242, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[242, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[242, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[242, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[242, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[242, "configure-profiling-for-xpu"]], "Read Profiling Result": [[242, "read-profiling-result"]], "Read XPU Profiling Result": [[242, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[242, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[243, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[244, "model-interpretability-using-captum"]], "Before you begin": [[244, "before-you-begin"]], "Computing Attribution": [[244, "computing-attribution"]], "Visualizing the Results": [[244, "visualizing-the-results"]], "Final Notes": [[244, "final-notes"]], "Automatic Mixed Precision": [[245, "automatic-mixed-precision"]], "A simple network": [[245, "a-simple-network"]], "Default Precision": [[245, "default-precision"]], "Adding torch.autocast": [[245, "adding-torch-autocast"]], "Adding GradScaler": [[245, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[245, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[245, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[245, "saving-resuming"]], "Inference/Evaluation": [[245, "inference-evaluation"]], "Advanced topics": [[245, "advanced-topics"]], "Speedup with Amp is minor": [[245, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[245, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[245, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[246, "syntaxerror"]], "1. Defining functions to benchmark": [[246, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[246, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[246, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[246, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[246, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[246, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[246, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[246, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[247, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[248, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[248, "import-necessary-libraries-for-loading-our-data"], [262, "import-necessary-libraries-for-loading-our-data"], [263, "import-necessary-libraries-for-loading-our-data"], [264, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[248, "define-and-initialize-the-neural-network"], [263, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[248, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[248, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[249, "pytorch-recipes"], [265, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[250, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[250, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[250, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[250, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[251, "pytorch-profiler"]], "1. Import all necessary libraries": [[251, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[251, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[251, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[251, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[251, "using-tracing-functionality"]], "6. Examining stack traces": [[251, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[251, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[252, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[253, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[254, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[255, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[256, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[258, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[258, "torch-utils-swap-tensors"]], "Application to nn.Module": [[258, "application-to-nn-module"]], "nn.Module.to() and related methods": [[258, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[258, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[259, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[259, "using-tensorboard-in-pytorch"]], "Log scalars": [[259, "log-scalars"]], "Run TensorBoard": [[259, "run-tensorboard"]], "Timer quick start": [[260, "timer-quick-start"]], "1. Defining a Timer": [[260, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[260, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[260, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[260, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[260, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[260, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[260, "wrapping-up"]], "8. Footnotes": [[260, "footnotes"]], "Performance Tuning Guide": [[261, "performance-tuning-guide"]], "General optimizations": [[261, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[261, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[261, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[261, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[261, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[261, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[261, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[261, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[261, "disable-debugging-apis"]], "CPU specific optimizations": [[261, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[261, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[261, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[261, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[261, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[261, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[261, "gpu-specific-optimizations"]], "Enable Tensor cores": [[261, "enable-tensor-cores"]], "Use CUDA Graphs": [[261, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[261, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[261, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[261, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[261, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[261, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[261, "distributed-optimizations"]], "Use efficient data-parallel backend": [[261, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[261, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[261, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[261, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[262, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[262, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[262, "save-model-a"]], "4. Load into model B": [[262, "load-into-model-b"]], "What is a state_dict in PyTorch": [[263, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[263, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[263, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[264, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[264, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[264, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[264, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[264, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[266, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[267, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[269, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[269, "usage-example"]], "Train FP32": [[269, "train-fp32"]], "Train BF16": [[269, "train-bf16"]], "Inference FP32": [[269, "inference-fp32"]], "Inference BF16": [[269, "inference-bf16"]], "Compile Time Caching Configuration": [[270, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[270, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[270, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[270, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[270, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[270, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[270, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[270, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[270, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[271, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[271, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[271, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[271, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[271, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[272, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[272, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[273, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[273, "advanced-usage"]], "Composability": [[273, "composability"]], "Wrapping Triton kernels with triton_op": [[273, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[273, "adding-training-support"]], "Adding a CPU Fallback": [[273, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[273, "adding-a-flopcounter-formula"]], "Limitations": [[273, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[274, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[274, "description"]], "Preventing recompilation": [[274, "preventing-recompilation"]], "Measuring performance gains": [[274, "measuring-performance-gains"]], "Crashing sooner": [[274, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[275, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[275, "model-compilation"]], "Model Inference in Python": [[275, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[275, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[276, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[276, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[276, "video-classification"]], "Error: Static batch size": [[276, "error-static-batch-size"]], "Solution": [[276, "solution"], [276, "id1"], [276, "id2"], [276, "id3"]], "Automatic Speech Recognition": [[276, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[276, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[276, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[276, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[276, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[276, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[277, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[279, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[279, "what-you-will-learn"]], "Introduction of the Optimizations": [[279, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[279, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[279, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[279, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[279, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[279, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[279, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[280, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[280, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[280, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})