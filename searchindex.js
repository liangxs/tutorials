Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "distributed/home", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_conv_bn_fuser", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/python_extension_autoload", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "sg_execution_times"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "distributed/home.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_conv_bn_fuser.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/python_extension_autoload.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "sg_execution_times.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "&lt;no title&gt;", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Semi-Supervised Learning using USB built upon PyTorch", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Distributed and Parallel Training Tutorials", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Building a Convolution/Batch Norm fuser with torch.compile", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "PyTorch Prototype Recipes", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "&lt;no title&gt;", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "PyTorch Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "&lt;no title&gt;", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Computation times"], "terms": {"thi": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 215, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279], "ha": [0, 1, 2, 4, 6, 7, 9, 11, 12, 13, 14, 15, 17, 19, 26, 27, 28, 29, 30, 31, 32, 33, 37, 39, 44, 45, 46, 49, 52, 53, 65, 71, 78, 79, 86, 88, 91, 92, 93, 94, 96, 97, 98, 100, 101, 102, 103, 105, 107, 108, 110, 111, 115, 118, 119, 122, 124, 125, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 156, 158, 159, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 180, 181, 182, 183, 184, 185, 187, 188, 189, 191, 192, 194, 195, 197, 198, 201, 204, 205, 206, 207, 208, 210, 212, 214, 215, 217, 218, 224, 225, 228, 231, 234, 235, 243, 245, 246, 250, 257, 259, 260, 265, 266, 271, 272, 274, 275, 278, 279], "been": [0, 1, 3, 7, 9, 15, 16, 19, 27, 28, 29, 30, 31, 32, 44, 53, 72, 78, 79, 86, 88, 91, 92, 93, 94, 96, 101, 107, 111, 122, 124, 125, 128, 131, 134, 139, 141, 142, 143, 146, 147, 148, 150, 153, 154, 158, 159, 161, 162, 163, 166, 169, 170, 171, 172, 176, 180, 181, 182, 183, 184, 187, 188, 189, 192, 194, 195, 201, 204, 205, 208, 210, 214, 215, 218, 224, 231, 234, 235, 241, 245, 257, 258, 266, 274, 275, 278], "deprec": [0, 5, 6, 9, 10, 23, 24, 25, 44, 113, 122, 124, 125, 127, 128, 131, 133, 134, 146, 158, 161, 166, 181, 188, 195, 230, 231, 236, 252, 253, 254, 255, 266, 277], "redirect": [0, 9, 27, 28, 29, 30, 31, 32, 44, 61, 62, 79, 80, 81, 82, 83, 84, 92, 122, 124, 125, 128, 146, 150, 158, 161, 166, 180, 183, 187, 190, 195, 201, 202, 203, 211, 218, 222, 231, 237, 238, 239, 240, 242, 252, 253, 254, 255, 266], "3": [0, 2, 3, 4, 6, 7, 9, 15, 18, 19, 21, 26, 27, 28, 29, 30, 31, 32, 34, 35, 37, 44, 45, 55, 61, 62, 65, 66, 71, 72, 75, 78, 79, 80, 81, 82, 83, 84, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 118, 119, 120, 122, 123, 124, 125, 128, 131, 132, 133, 135, 140, 141, 142, 146, 147, 148, 150, 153, 155, 156, 158, 159, 160, 161, 162, 164, 166, 169, 170, 171, 173, 174, 175, 176, 180, 183, 184, 186, 187, 188, 189, 191, 192, 194, 196, 198, 200, 201, 202, 203, 210, 211, 215, 217, 218, 220, 221, 222, 224, 228, 229, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 249, 251, 252, 253, 254, 255, 257, 260, 266, 268, 272, 274, 275], "second": [0, 1, 4, 6, 7, 9, 10, 13, 14, 15, 17, 27, 28, 29, 30, 31, 32, 33, 34, 35, 38, 39, 40, 42, 43, 44, 45, 46, 47, 49, 51, 52, 54, 55, 61, 62, 71, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 122, 123, 124, 125, 126, 128, 130, 131, 134, 136, 137, 138, 139, 140, 141, 142, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 169, 171, 172, 176, 177, 179, 180, 181, 182, 183, 186, 187, 188, 189, 191, 192, 196, 198, 201, 202, 203, 205, 206, 207, 208, 210, 211, 218, 219, 222, 224, 225, 228, 232, 235, 237, 238, 239, 240, 242, 245, 246, 249, 251, 252, 253, 254, 255, 257, 259, 260, 265, 266, 271, 272, 273, 274, 276, 278], "go": [1, 12, 13, 14, 15, 17, 18, 19, 21, 22, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 47, 49, 51, 52, 54, 65, 66, 68, 70, 71, 72, 75, 76, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 130, 132, 136, 137, 138, 139, 141, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 176, 177, 179, 181, 182, 185, 186, 188, 189, 191, 193, 197, 198, 205, 206, 207, 208, 210, 219, 224, 227, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "end": [1, 4, 6, 7, 10, 13, 14, 15, 17, 19, 22, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 57, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 130, 132, 134, 135, 136, 137, 138, 139, 141, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 175, 176, 177, 179, 181, 182, 185, 186, 188, 189, 191, 192, 194, 197, 198, 205, 206, 207, 208, 210, 214, 215, 219, 224, 232, 234, 235, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 272, 273, 274, 276, 279], "download": [1, 7, 13, 14, 15, 17, 19, 22, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 131, 132, 136, 137, 138, 139, 141, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 170, 171, 172, 174, 176, 177, 179, 181, 182, 185, 186, 188, 189, 191, 192, 197, 198, 200, 205, 206, 207, 208, 210, 219, 220, 224, 232, 234, 235, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 268, 270, 271, 272, 273, 274, 276], "full": [1, 3, 4, 6, 7, 10, 12, 13, 14, 15, 17, 19, 22, 26, 33, 34, 35, 37, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 168, 169, 171, 172, 173, 176, 177, 179, 181, 185, 186, 188, 189, 191, 192, 194, 196, 197, 198, 205, 206, 207, 208, 210, 212, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 271, 272, 273, 274, 276, 278], "exampl": [1, 2, 3, 4, 7, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 26, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 85, 86, 87, 89, 91, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 109, 111, 112, 113, 115, 116, 117, 118, 121, 123, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 191, 193, 194, 197, 198, 200, 205, 206, 207, 208, 210, 212, 215, 216, 217, 219, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 235, 241, 243, 244, 245, 246, 247, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 272, 274, 275, 276, 279, 280], "author": [1, 4, 6, 12, 13, 14, 15, 18, 19, 22, 26, 37, 47, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 78, 85, 86, 88, 90, 97, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 118, 119, 120, 123, 126, 131, 132, 133, 134, 135, 137, 138, 139, 140, 143, 144, 145, 147, 148, 152, 153, 155, 156, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 185, 186, 188, 192, 193, 194, 196, 198, 199, 200, 209, 212, 214, 215, 219, 220, 223, 224, 226, 227, 228, 229, 232, 233, 244, 249, 250, 257, 260, 265, 269, 270, 271, 272, 273, 274, 275, 276], "vincent": [1, 15, 148, 165, 171], "moen": [1, 15, 148, 165, 171], "separ": [1, 4, 6, 7, 10, 17, 35, 52, 55, 88, 93, 100, 101, 102, 103, 111, 118, 135, 149, 153, 155, 163, 165, 174, 177, 184, 191, 193, 205, 210, 245, 260, 270, 273, 276], "rl": [1, 130, 171, 172, 173, 178, 280], "algorithm": [1, 6, 7, 11, 12, 13, 33, 38, 43, 52, 55, 59, 72, 85, 91, 94, 96, 102, 104, 105, 106, 107, 111, 119, 130, 132, 135, 137, 141, 147, 148, 155, 165, 168, 171, 174, 179, 194, 212, 223, 224, 243, 247, 260], "variou": [1, 4, 10, 16, 42, 49, 51, 52, 53, 86, 88, 91, 96, 100, 108, 111, 118, 120, 137, 147, 152, 154, 169, 171, 174, 175, 184, 189, 192, 196, 198, 207, 210, 221, 228, 232, 259, 263, 269, 272, 275], "piec": [1, 6, 10, 15, 88, 96, 111, 170, 171, 175, 184, 191, 193], "assembl": [1, 10, 52, 96], "script": [1, 6, 7, 11, 13, 14, 15, 17, 22, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 58, 63, 71, 75, 76, 78, 91, 93, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 123, 126, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 176, 177, 179, 184, 186, 188, 189, 191, 192, 196, 198, 205, 206, 207, 208, 220, 224, 232, 233, 234, 241, 244, 245, 246, 249, 250, 251, 257, 260, 264, 265, 271, 272, 273, 274, 276], "collect": [1, 7, 12, 15, 16, 21, 22, 38, 45, 47, 52, 58, 63, 96, 101, 102, 105, 110, 130, 131, 132, 135, 145, 148, 152, 168, 172, 175, 188, 189, 194, 196, 215, 227, 228, 229, 241, 259, 260, 264], "final": [1, 7, 11, 12, 13, 15, 16, 18, 19, 22, 26, 43, 45, 49, 52, 55, 78, 88, 91, 93, 96, 98, 101, 102, 103, 108, 111, 113, 116, 118, 120, 126, 130, 131, 132, 133, 135, 137, 138, 139, 141, 142, 147, 152, 153, 154, 155, 159, 162, 164, 167, 169, 171, 172, 173, 174, 175, 177, 181, 182, 188, 189, 193, 194, 196, 198, 205, 208, 212, 215, 235], "function": [1, 3, 4, 6, 7, 8, 10, 11, 14, 15, 17, 18, 19, 21, 26, 35, 39, 40, 42, 43, 45, 51, 52, 54, 56, 58, 63, 64, 67, 68, 70, 71, 72, 85, 86, 93, 94, 96, 100, 101, 107, 110, 112, 115, 116, 118, 120, 126, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 147, 148, 149, 152, 153, 155, 162, 163, 165, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 199, 205, 206, 207, 208, 210, 212, 215, 217, 219, 220, 223, 224, 233, 234, 235, 241, 244, 246, 247, 251, 257, 259, 261, 264, 267, 269, 272, 273, 274, 276, 279, 280], "ar": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 38, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 56, 58, 59, 63, 70, 71, 72, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 193, 194, 196, 197, 198, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 241, 243, 244, 245, 247, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 274, 275, 276, 278, 279], "state": [1, 4, 6, 10, 11, 12, 15, 19, 39, 40, 46, 52, 55, 56, 58, 91, 94, 96, 98, 102, 103, 104, 108, 111, 119, 120, 131, 132, 138, 139, 141, 143, 145, 148, 149, 151, 155, 162, 164, 169, 171, 172, 173, 174, 175, 177, 181, 188, 196, 197, 208, 214, 215, 226, 227, 232, 243, 244, 249, 262, 264], "contain": [1, 2, 7, 10, 11, 13, 15, 16, 19, 34, 35, 39, 43, 49, 52, 53, 58, 70, 71, 72, 85, 88, 93, 94, 98, 101, 102, 107, 108, 111, 112, 119, 120, 126, 130, 131, 132, 136, 137, 138, 143, 145, 148, 163, 167, 169, 171, 172, 173, 175, 176, 177, 179, 181, 182, 184, 185, 188, 189, 191, 192, 193, 196, 197, 208, 215, 217, 220, 225, 235, 241, 244, 247, 249, 257, 259, 260, 262, 274, 275, 278], "trainabl": [1, 7, 71, 103, 105], "paramet": [1, 6, 11, 12, 13, 15, 16, 18, 19, 22, 26, 33, 35, 36, 37, 40, 42, 43, 45, 46, 49, 51, 52, 54, 55, 70, 71, 78, 88, 91, 93, 96, 100, 102, 103, 105, 107, 110, 111, 116, 118, 119, 126, 129, 130, 131, 132, 133, 135, 137, 138, 143, 145, 147, 148, 149, 151, 153, 154, 155, 159, 162, 163, 164, 175, 176, 179, 181, 182, 184, 188, 189, 198, 205, 212, 213, 215, 223, 225, 226, 227, 233, 234, 235, 241, 244, 248, 249, 250, 251, 256, 257, 262, 263, 264, 268, 272, 278, 279, 280], "tutori": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 25, 26, 27, 28, 29, 30, 31, 32, 36, 39, 44, 45, 46, 47, 48, 54, 56, 58, 59, 63, 78, 79, 80, 81, 82, 83, 84, 85, 87, 91, 94, 95, 98, 100, 102, 104, 106, 107, 111, 112, 113, 114, 115, 116, 119, 120, 121, 122, 124, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 164, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 189, 190, 194, 195, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 231, 232, 233, 243, 244, 248, 249, 250, 252, 253, 254, 255, 257, 258, 259, 260, 264, 266, 275, 276, 278, 279, 280], "guid": [1, 6, 10, 19, 63, 85, 88, 116, 130, 131, 147, 156, 170, 178, 181, 188, 189, 198, 212, 215, 232, 241, 243, 245, 248, 256, 264, 278, 280], "you": [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 26, 32, 33, 34, 35, 37, 38, 40, 42, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 70, 71, 78, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 116, 118, 119, 120, 123, 126, 129, 130, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 194, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 223, 225, 226, 227, 228, 229, 233, 234, 241, 244, 245, 246, 247, 249, 250, 258, 260, 261, 262, 263, 264, 265, 269, 270, 272, 273, 275, 276, 279], "through": [1, 3, 6, 7, 10, 11, 14, 15, 16, 18, 22, 26, 33, 34, 38, 39, 45, 49, 52, 55, 57, 58, 87, 89, 91, 93, 96, 98, 100, 102, 103, 105, 106, 107, 108, 111, 112, 113, 115, 116, 119, 123, 129, 130, 132, 133, 134, 135, 136, 138, 140, 141, 142, 147, 149, 152, 153, 154, 155, 156, 159, 162, 164, 165, 167, 168, 171, 172, 173, 174, 175, 176, 177, 181, 182, 184, 185, 186, 188, 189, 197, 198, 199, 200, 205, 207, 212, 215, 219, 225, 226, 227, 233, 234, 235, 244, 245, 250, 258, 263, 275, 278, 280], "from": [1, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 26, 33, 35, 38, 39, 40, 41, 42, 46, 49, 50, 51, 52, 54, 55, 56, 58, 65, 66, 67, 70, 71, 72, 73, 75, 76, 77, 78, 85, 86, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 116, 117, 118, 119, 121, 123, 126, 130, 131, 132, 133, 134, 135, 136, 137, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 185, 186, 188, 192, 193, 194, 196, 198, 200, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 220, 225, 226, 227, 229, 232, 233, 234, 235, 241, 244, 245, 247, 248, 250, 256, 257, 259, 260, 262, 264, 267, 270, 271, 272, 274, 275, 276, 278, 279, 280], "ground": [1, 15, 46, 78, 191], "up": [1, 3, 6, 7, 10, 11, 15, 17, 19, 21, 22, 33, 35, 38, 52, 55, 58, 63, 74, 77, 85, 88, 93, 94, 96, 97, 98, 101, 103, 104, 105, 107, 108, 110, 111, 113, 118, 130, 131, 132, 133, 134, 135, 138, 139, 143, 144, 145, 147, 148, 149, 152, 153, 159, 162, 164, 165, 167, 170, 171, 172, 173, 174, 177, 181, 182, 186, 188, 189, 192, 199, 210, 212, 213, 215, 221, 225, 226, 228, 229, 234, 245, 250, 260, 263, 264, 274, 275, 276, 278, 279, 280], "us": [1, 4, 5, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 33, 34, 35, 38, 39, 40, 42, 43, 46, 47, 49, 51, 52, 54, 55, 57, 58, 59, 60, 63, 65, 66, 68, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 115, 119, 123, 126, 129, 130, 132, 134, 135, 136, 137, 138, 139, 142, 144, 147, 152, 153, 154, 155, 156, 159, 160, 162, 163, 165, 167, 169, 170, 171, 172, 177, 178, 179, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 199, 205, 206, 208, 210, 212, 213, 214, 215, 217, 219, 221, 223, 224, 226, 230, 232, 233, 234, 244, 245, 246, 247, 248, 251, 256, 257, 259, 262, 263, 264, 265, 267, 269, 270, 271, 273, 275, 277, 280], "To": [1, 4, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 22, 33, 34, 38, 39, 40, 43, 49, 52, 53, 54, 60, 68, 76, 85, 86, 88, 91, 94, 100, 102, 103, 104, 105, 107, 108, 110, 111, 112, 115, 119, 120, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 151, 153, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 176, 177, 181, 182, 184, 188, 189, 192, 194, 196, 198, 199, 200, 205, 207, 208, 209, 213, 215, 217, 220, 228, 229, 233, 234, 235, 241, 244, 245, 247, 249, 250, 257, 258, 259, 260, 261, 262, 263, 268, 272, 274, 275, 276, 278], "aim": [1, 7, 103, 106, 134, 162, 172, 175, 208, 235], "we": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 58, 65, 66, 68, 71, 72, 78, 85, 86, 88, 91, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 241, 243, 245, 247, 249, 250, 251, 257, 258, 259, 261, 262, 263, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279], "focus": [1, 3, 94, 103, 106, 168, 177, 189, 235], "which": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 33, 34, 37, 38, 39, 40, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 58, 59, 63, 65, 66, 70, 71, 72, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 126, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 156, 159, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 186, 188, 189, 191, 192, 193, 194, 197, 198, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 221, 224, 225, 226, 227, 228, 229, 232, 235, 241, 243, 244, 245, 246, 247, 249, 250, 257, 259, 260, 261, 262, 263, 265, 269, 270, 272, 273, 274, 275, 276, 278, 279], "i": [1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 61, 62, 63, 65, 66, 68, 71, 75, 76, 78, 80, 81, 82, 83, 84, 85, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 115, 116, 118, 119, 121, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 159, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 200, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 222, 223, 224, 226, 227, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 278, 280], "rel": [1, 6, 7, 94, 102, 126, 136, 154, 159, 175, 177, 192, 199, 235, 264], "straightforward": [1, 6, 7, 18, 19, 52, 93, 96, 101, 103, 104, 153, 165, 188, 192, 264], "deep": [1, 7, 13, 14, 37, 49, 52, 55, 72, 75, 76, 96, 97, 98, 101, 103, 107, 109, 110, 119, 129, 130, 138, 139, 140, 141, 145, 153, 154, 155, 163, 169, 172, 177, 184, 189, 221, 223, 224, 235, 241, 247, 259, 260, 265, 278, 280], "determinist": [1, 12, 15, 133, 148, 171, 172, 259, 260], "gradient": [1, 4, 7, 11, 12, 14, 15, 17, 18, 38, 45, 46, 49, 52, 55, 59, 63, 65, 66, 68, 71, 75, 76, 93, 96, 98, 101, 102, 103, 104, 105, 107, 111, 119, 126, 130, 131, 132, 135, 136, 138, 140, 142, 143, 145, 147, 151, 154, 155, 162, 169, 171, 173, 174, 175, 178, 182, 184, 189, 205, 219, 227, 243, 248, 256, 264, 279, 280], "simpl": [1, 3, 4, 6, 7, 10, 13, 16, 18, 19, 22, 26, 49, 52, 54, 57, 59, 70, 78, 88, 91, 94, 96, 98, 101, 102, 103, 111, 112, 115, 119, 120, 129, 130, 131, 136, 137, 140, 142, 147, 149, 153, 154, 159, 164, 165, 167, 169, 171, 173, 174, 175, 176, 178, 179, 181, 186, 188, 189, 194, 209, 212, 215, 221, 223, 224, 227, 229, 232, 234, 235, 245, 249, 258, 259, 260, 262, 272, 275, 276, 279, 280], "continu": [1, 6, 52, 56, 88, 91, 96, 101, 103, 108, 111, 130, 133, 134, 135, 139, 143, 147, 171, 175, 177, 181, 186, 196, 197, 205, 207, 208, 215, 228, 245, 247, 250, 260, 261, 262, 263, 265], "control": [1, 10, 11, 15, 33, 35, 38, 45, 69, 73, 86, 88, 93, 103, 113, 114, 115, 116, 123, 130, 132, 133, 134, 136, 137, 147, 151, 163, 171, 172, 173, 186, 214, 228, 241, 245, 264, 265, 267, 280], "It": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 26, 27, 28, 29, 30, 31, 33, 43, 45, 46, 47, 49, 52, 54, 55, 78, 79, 85, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 115, 120, 126, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 159, 162, 163, 164, 165, 169, 172, 173, 175, 177, 179, 180, 181, 183, 184, 187, 188, 189, 191, 192, 193, 194, 196, 210, 215, 217, 219, 225, 226, 227, 229, 245, 246, 258, 260, 263, 268, 270, 272, 274, 275, 278], "consist": [1, 3, 4, 7, 15, 16, 26, 33, 34, 35, 38, 45, 103, 105, 111, 133, 135, 143, 152, 155, 159, 162, 171, 172, 176, 177, 181, 185, 189, 192, 193, 194, 196, 207, 208, 224, 245, 250, 260], "learn": [1, 4, 7, 14, 15, 17, 19, 20, 33, 34, 35, 38, 39, 40, 42, 43, 45, 47, 49, 52, 54, 55, 56, 57, 58, 59, 63, 72, 75, 76, 78, 85, 87, 89, 90, 91, 93, 94, 96, 97, 98, 101, 102, 103, 107, 109, 110, 111, 112, 113, 115, 116, 120, 121, 123, 130, 131, 132, 134, 137, 138, 139, 140, 143, 144, 145, 147, 148, 153, 154, 156, 160, 162, 163, 164, 167, 169, 170, 174, 177, 178, 179, 182, 184, 185, 188, 189, 191, 192, 194, 197, 198, 205, 206, 207, 208, 209, 210, 213, 214, 215, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 235, 241, 243, 249, 257, 260, 264, 265, 268, 269, 270, 273, 275, 279, 280], "parametr": [1, 2, 19, 130, 171, 178, 215, 280], "an": [1, 2, 3, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 37, 38, 39, 40, 42, 45, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 68, 70, 72, 78, 85, 86, 88, 90, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 115, 118, 119, 126, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 147, 149, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 168, 169, 170, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 191, 192, 193, 194, 197, 198, 199, 200, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 221, 223, 225, 226, 227, 229, 232, 233, 234, 235, 241, 243, 244, 245, 246, 247, 248, 250, 251, 256, 257, 259, 260, 262, 264, 265, 267, 269, 272, 273, 274, 275, 276, 280], "action": [1, 22, 98, 102, 107, 111, 131, 132, 155, 169, 171, 172, 173, 174, 175, 181, 194, 250, 259, 264, 275], "pair": [1, 7, 49, 52, 55, 94, 138, 139, 141, 164, 171, 172, 177, 181, 191, 193, 224, 241, 259], "output": [1, 2, 3, 4, 6, 7, 11, 12, 13, 15, 17, 18, 19, 22, 33, 34, 38, 42, 45, 46, 47, 49, 51, 52, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 123, 126, 131, 132, 133, 135, 136, 138, 139, 140, 145, 147, 148, 149, 151, 153, 154, 156, 159, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 179, 182, 184, 186, 188, 191, 192, 193, 194, 196, 198, 200, 209, 210, 212, 215, 220, 221, 223, 225, 228, 232, 233, 234, 243, 245, 247, 250, 251, 258, 260, 268, 276, 279], "maxim": [1, 15, 55, 78, 85, 103, 105, 137, 155, 172, 186, 260, 278], "given": [1, 4, 7, 10, 11, 13, 15, 17, 19, 33, 35, 38, 42, 43, 45, 51, 52, 55, 58, 78, 85, 88, 94, 98, 102, 103, 106, 107, 110, 111, 120, 132, 138, 139, 147, 149, 151, 154, 155, 156, 164, 169, 171, 172, 174, 175, 177, 186, 188, 189, 191, 197, 208, 215, 233, 245, 251, 260, 271, 275, 279], "certain": [1, 6, 7, 11, 12, 16, 52, 58, 94, 107, 129, 132, 135, 136, 141, 151, 154, 156, 171, 176, 186, 188, 189, 196, 205, 208, 210, 243, 247, 271, 272, 275, 278], "what": [1, 2, 3, 4, 6, 10, 15, 17, 21, 22, 33, 34, 35, 45, 47, 48, 56, 57, 58, 63, 78, 90, 91, 94, 96, 98, 101, 102, 104, 105, 107, 108, 110, 112, 116, 121, 123, 130, 132, 134, 135, 136, 137, 139, 140, 143, 144, 147, 148, 155, 156, 162, 167, 169, 171, 172, 173, 176, 182, 184, 185, 188, 189, 191, 192, 194, 197, 207, 214, 223, 226, 244, 245, 246, 247, 248, 249, 256, 259, 260, 264, 275, 280], "how": [1, 2, 4, 6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 33, 35, 38, 39, 40, 45, 46, 47, 49, 52, 53, 54, 55, 58, 59, 60, 78, 85, 88, 90, 91, 93, 94, 96, 98, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 116, 118, 126, 129, 130, 134, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 151, 152, 153, 155, 156, 159, 160, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 205, 206, 207, 208, 209, 210, 212, 213, 215, 221, 224, 226, 228, 232, 233, 235, 243, 244, 245, 248, 249, 250, 256, 257, 259, 260, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280], "write": [1, 4, 8, 10, 11, 17, 20, 46, 52, 63, 66, 100, 104, 105, 106, 107, 111, 119, 121, 126, 130, 134, 136, 137, 142, 143, 145, 148, 151, 153, 156, 159, 163, 165, 168, 171, 174, 175, 177, 181, 184, 186, 188, 192, 196, 197, 208, 212, 216, 219, 220, 227, 244, 245, 246, 247, 251, 260, 275, 280], "custom": [1, 7, 10, 12, 19, 20, 52, 55, 66, 69, 73, 94, 111, 118, 121, 130, 133, 137, 148, 155, 165, 171, 174, 178, 184, 185, 186, 189, 192, 193, 212, 215, 217, 232, 234, 235, 241, 244, 248, 257, 260, 264, 268, 271, 272, 280], "its": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 33, 34, 38, 43, 45, 49, 52, 54, 55, 56, 58, 71, 85, 93, 94, 96, 98, 101, 103, 105, 107, 108, 110, 111, 113, 118, 119, 120, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 145, 147, 148, 149, 151, 152, 153, 155, 156, 162, 163, 167, 169, 171, 172, 173, 174, 175, 177, 181, 182, 186, 188, 189, 198, 207, 208, 210, 214, 215, 217, 220, 221, 227, 229, 234, 241, 244, 245, 247, 249, 250, 257, 260, 261, 262, 263, 279], "includ": [1, 2, 3, 4, 6, 7, 10, 15, 16, 17, 26, 38, 39, 42, 51, 52, 56, 58, 63, 72, 78, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 111, 113, 115, 116, 118, 135, 137, 138, 139, 140, 142, 143, 145, 147, 148, 153, 155, 165, 167, 168, 169, 171, 174, 177, 181, 182, 185, 186, 188, 189, 191, 192, 196, 198, 205, 207, 209, 212, 214, 220, 225, 227, 228, 233, 234, 235, 241, 243, 244, 245, 247, 250, 257, 260, 270, 272, 273, 278], "design": [1, 6, 7, 15, 19, 26, 55, 59, 78, 88, 94, 110, 111, 139, 145, 148, 165, 171, 172, 173, 175, 176, 181, 182, 188, 193, 194, 205, 206, 207, 212, 215, 219, 221, 233, 245, 247, 260, 268, 272, 275, 278], "effici": [1, 6, 11, 13, 16, 19, 33, 52, 54, 78, 85, 101, 103, 107, 110, 131, 132, 135, 137, 145, 147, 148, 154, 159, 169, 171, 175, 176, 181, 184, 189, 196, 199, 208, 209, 210, 215, 216, 226, 245, 249, 268, 272, 278, 280], "store": [1, 6, 7, 18, 19, 22, 33, 34, 35, 39, 40, 42, 45, 51, 54, 56, 71, 91, 93, 100, 101, 104, 105, 107, 110, 111, 113, 119, 134, 136, 137, 139, 147, 148, 153, 155, 156, 163, 165, 167, 168, 169, 171, 172, 173, 174, 175, 177, 188, 189, 194, 198, 208, 209, 215, 250, 259, 260, 269, 270, 276], "them": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 19, 21, 22, 33, 35, 38, 45, 46, 49, 51, 52, 54, 56, 58, 63, 71, 91, 93, 94, 96, 98, 100, 101, 102, 103, 106, 107, 108, 110, 111, 112, 113, 115, 116, 119, 120, 130, 132, 133, 135, 137, 138, 139, 141, 142, 147, 148, 149, 152, 153, 154, 159, 162, 163, 164, 165, 169, 170, 172, 173, 174, 175, 184, 185, 186, 188, 191, 192, 194, 198, 207, 209, 210, 214, 215, 217, 224, 233, 234, 235, 244, 245, 249, 257, 259, 260, 264, 269, 270, 278], "trajectori": [1, 15, 148, 171, 172], "transit": [1, 15, 88, 90, 104, 148, 165, 172], "assum": [1, 2, 7, 10, 11, 15, 16, 22, 37, 45, 46, 54, 57, 78, 93, 96, 97, 103, 104, 106, 108, 111, 116, 135, 136, 138, 139, 147, 148, 163, 169, 171, 174, 176, 177, 191, 207, 208, 210, 227, 249, 250, 257, 259, 275], "have": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 38, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 60, 71, 72, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 224, 226, 227, 228, 229, 232, 233, 234, 241, 244, 245, 246, 247, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 272, 273, 274, 275, 278, 279], "complet": [1, 6, 7, 16, 37, 88, 91, 93, 96, 104, 105, 107, 116, 130, 132, 134, 135, 137, 138, 140, 142, 147, 165, 167, 169, 170, 171, 174, 184, 186, 191, 196, 198, 207, 208, 212, 243, 260, 274, 275], "ppo": [1, 130, 178, 280], "give": [1, 2, 6, 7, 12, 15, 19, 38, 47, 49, 52, 53, 55, 78, 93, 94, 96, 98, 103, 105, 107, 108, 110, 111, 120, 139, 143, 149, 152, 153, 154, 155, 164, 170, 174, 177, 181, 184, 186, 188, 189, 192, 206, 210, 215, 233, 245], "compon": [1, 6, 7, 10, 11, 15, 55, 88, 98, 103, 107, 120, 130, 137, 138, 140, 148, 155, 171, 175, 179, 181, 185, 186, 188, 192, 210, 221, 270], "depend": [1, 6, 7, 10, 12, 49, 53, 55, 78, 85, 88, 93, 94, 100, 101, 103, 104, 108, 111, 130, 135, 137, 138, 141, 142, 147, 148, 151, 152, 154, 155, 165, 168, 170, 171, 174, 181, 186, 192, 198, 207, 213, 220, 221, 223, 233, 245, 246, 251, 257, 260, 265, 278], "tensordict": [1, 15, 148, 155, 165, 171], "nn": [1, 2, 6, 7, 12, 13, 14, 15, 16, 18, 19, 21, 22, 38, 39, 40, 45, 46, 47, 49, 52, 58, 69, 72, 73, 91, 93, 96, 100, 102, 105, 110, 115, 118, 121, 126, 130, 131, 132, 133, 135, 136, 138, 139, 140, 141, 145, 148, 151, 154, 159, 163, 164, 167, 171, 172, 173, 174, 175, 176, 182, 184, 185, 186, 188, 189, 193, 194, 206, 209, 210, 215, 217, 223, 225, 226, 227, 229, 233, 234, 235, 241, 244, 247, 248, 250, 251, 256, 260, 261, 262, 264, 265, 268, 276, 279, 280], "tensordictmodul": [1, 148, 171], "although": [1, 13, 18, 45, 52, 104, 105, 110, 111, 113, 116, 134, 136, 155, 163, 165, 174, 186, 188, 233], "should": [1, 2, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 21, 22, 33, 45, 46, 52, 53, 54, 55, 56, 58, 72, 78, 85, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 119, 126, 130, 132, 133, 134, 136, 137, 140, 142, 145, 147, 148, 149, 152, 155, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 182, 184, 185, 186, 188, 189, 191, 196, 197, 198, 200, 205, 206, 207, 212, 214, 219, 220, 226, 227, 233, 241, 244, 245, 250, 258, 259, 260, 263, 264, 271, 275, 278], "suffici": [1, 7, 52, 55, 103, 104, 126, 143, 145, 162, 165, 188], "transpar": [1, 13, 94, 105, 148, 174, 220, 228, 234, 269], "understood": [1, 4, 17, 272], "without": [1, 6, 7, 10, 11, 15, 17, 19, 33, 52, 56, 58, 98, 101, 103, 104, 115, 130, 131, 133, 135, 136, 139, 140, 147, 151, 152, 154, 155, 156, 162, 165, 168, 169, 170, 171, 172, 173, 176, 181, 184, 188, 197, 205, 207, 208, 210, 214, 215, 224, 226, 229, 234, 244, 249, 251, 257, 260, 270, 271, 273, 279], "understand": [1, 2, 4, 7, 8, 16, 45, 46, 55, 60, 85, 88, 93, 95, 96, 97, 98, 100, 101, 102, 104, 107, 111, 112, 116, 126, 130, 133, 136, 137, 138, 139, 142, 147, 151, 153, 165, 177, 184, 188, 189, 197, 206, 209, 226, 229, 241, 243, 258, 262, 265, 269, 270, 272, 274, 275, 278], "class": [1, 2, 6, 7, 10, 11, 14, 16, 22, 26, 33, 35, 37, 39, 40, 46, 49, 52, 55, 56, 68, 70, 78, 86, 88, 94, 96, 98, 100, 101, 102, 105, 106, 110, 111, 116, 119, 120, 126, 130, 131, 132, 133, 137, 138, 140, 142, 143, 145, 147, 148, 152, 153, 155, 156, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 182, 184, 188, 191, 193, 196, 205, 206, 207, 209, 210, 217, 225, 226, 227, 229, 233, 235, 241, 243, 245, 247, 251, 259, 263, 265, 275, 276], "do": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 33, 34, 40, 49, 52, 53, 54, 55, 57, 65, 66, 72, 88, 91, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 113, 119, 120, 123, 130, 131, 135, 136, 137, 138, 144, 145, 147, 148, 149, 152, 153, 154, 155, 159, 162, 163, 165, 168, 169, 170, 171, 172, 175, 177, 182, 184, 188, 189, 191, 192, 194, 196, 198, 206, 207, 208, 210, 214, 215, 217, 219, 227, 235, 241, 244, 245, 246, 249, 257, 258, 259, 260, 261, 263, 264, 272, 273, 274], "sota": 1, "implement": [1, 2, 3, 6, 7, 11, 12, 13, 14, 15, 16, 19, 26, 34, 35, 37, 45, 47, 49, 52, 54, 58, 60, 63, 65, 66, 68, 70, 71, 72, 75, 76, 88, 93, 96, 102, 110, 111, 112, 119, 129, 130, 133, 135, 136, 138, 140, 142, 147, 148, 149, 151, 153, 154, 155, 156, 159, 164, 165, 167, 169, 171, 172, 175, 178, 181, 185, 188, 189, 191, 192, 193, 194, 196, 199, 206, 208, 209, 210, 212, 214, 215, 220, 221, 226, 233, 234, 235, 245, 249, 257, 260, 268, 269, 271, 272, 275, 278, 280], "rather": [1, 14, 52, 55, 72, 78, 88, 98, 101, 103, 110, 111, 120, 130, 139, 141, 153, 163, 164, 165, 171, 184, 188, 192, 196, 198, 205, 221, 245, 260, 269, 273], "provid": [1, 4, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 26, 34, 35, 46, 52, 54, 55, 58, 59, 78, 85, 86, 88, 91, 93, 94, 96, 101, 102, 103, 104, 105, 111, 112, 115, 116, 119, 120, 129, 130, 132, 134, 135, 136, 137, 143, 144, 145, 147, 148, 152, 153, 154, 155, 165, 169, 170, 171, 173, 174, 176, 181, 184, 185, 186, 188, 189, 191, 192, 196, 207, 208, 213, 215, 217, 219, 221, 227, 228, 232, 233, 234, 235, 241, 243, 244, 245, 247, 249, 250, 258, 259, 260, 265, 270, 273, 274, 275, 278], "high": [1, 2, 6, 7, 16, 22, 46, 52, 55, 56, 58, 60, 63, 85, 88, 98, 105, 110, 113, 118, 130, 131, 132, 135, 137, 140, 141, 147, 171, 178, 181, 182, 184, 188, 189, 199, 208, 212, 213, 225, 259, 260, 272, 278, 279, 280], "level": [1, 2, 4, 6, 7, 17, 19, 22, 46, 52, 56, 58, 60, 63, 71, 98, 106, 113, 119, 130, 131, 132, 135, 140, 143, 145, 147, 151, 153, 156, 160, 176, 177, 178, 181, 184, 186, 188, 189, 192, 212, 213, 215, 225, 228, 229, 235, 269, 279, 280], "illustr": [1, 22, 34, 46, 49, 59, 126, 135, 136, 137, 149, 165, 172, 182, 184, 191, 207, 208, 229, 241, 243, 250, 257], "": [1, 2, 3, 4, 6, 7, 8, 10, 12, 13, 15, 18, 19, 21, 22, 26, 33, 34, 35, 37, 38, 39, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 58, 60, 71, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 126, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 141, 142, 143, 145, 147, 148, 149, 151, 152, 153, 154, 156, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 199, 200, 205, 207, 208, 210, 213, 214, 215, 217, 219, 221, 223, 225, 226, 227, 228, 229, 233, 243, 244, 245, 247, 249, 250, 257, 258, 259, 260, 262, 263, 264, 265, 269, 270, 272, 278, 279], "librari": [1, 3, 4, 6, 7, 8, 10, 13, 15, 17, 21, 35, 39, 46, 53, 54, 60, 63, 91, 94, 111, 115, 116, 130, 134, 137, 141, 142, 152, 165, 167, 168, 170, 171, 175, 181, 189, 192, 196, 200, 209, 218, 220, 221, 229, 233, 234, 241, 264, 265, 272, 274], "featur": [1, 7, 11, 12, 13, 15, 22, 35, 39, 43, 52, 53, 54, 55, 85, 86, 88, 93, 96, 98, 100, 101, 103, 104, 110, 111, 115, 119, 130, 131, 136, 140, 148, 153, 154, 155, 162, 165, 168, 170, 171, 175, 176, 182, 186, 188, 191, 192, 199, 208, 209, 210, 212, 213, 214, 215, 219, 220, 221, 225, 232, 233, 241, 243, 247, 249, 257, 259, 260, 263, 264, 265, 269, 272, 275], "context": [1, 2, 6, 10, 15, 18, 19, 45, 52, 78, 93, 98, 110, 111, 118, 129, 130, 135, 140, 151, 163, 165, 171, 174, 175, 176, 177, 181, 186, 192, 197, 199, 209, 213, 215, 220, 225, 228, 244, 246, 249, 250, 251, 260, 273, 275, 276, 278], "bash": [1, 21, 155, 172, 241], "pip3": [1, 21, 53, 132, 148, 165, 171, 172, 181, 189, 198], "instal": [1, 4, 6, 7, 10, 19, 26, 37, 53, 54, 56, 58, 60, 91, 97, 100, 111, 115, 131, 132, 135, 138, 139, 143, 144, 147, 148, 151, 152, 155, 160, 165, 168, 171, 172, 173, 177, 181, 184, 186, 191, 196, 197, 198, 214, 220, 233, 241, 243, 245, 247, 250, 259, 261, 262, 263, 265, 272, 278], "mujoco": [1, 148, 171], "glfw": 1, "cuda": [1, 7, 10, 11, 12, 13, 16, 19, 21, 22, 26, 34, 39, 42, 45, 46, 47, 56, 57, 58, 65, 66, 76, 78, 86, 91, 101, 105, 111, 118, 119, 120, 126, 130, 131, 132, 133, 134, 135, 138, 141, 143, 144, 145, 147, 156, 162, 163, 167, 168, 171, 172, 173, 174, 175, 176, 181, 184, 186, 189, 194, 196, 197, 198, 199, 209, 210, 215, 223, 224, 226, 227, 229, 232, 244, 245, 246, 250, 264, 270, 273, 274, 275, 276, 279], "avail": [1, 2, 3, 4, 6, 7, 11, 13, 16, 19, 21, 22, 33, 34, 35, 38, 39, 40, 42, 45, 46, 51, 52, 53, 54, 55, 56, 65, 78, 91, 94, 96, 98, 101, 102, 103, 107, 111, 113, 119, 126, 132, 136, 138, 147, 148, 151, 155, 156, 165, 169, 170, 171, 172, 175, 176, 177, 181, 184, 185, 188, 189, 191, 196, 212, 213, 215, 219, 225, 227, 234, 241, 243, 245, 246, 247, 260, 261, 262, 263, 265, 274, 276], "seri": [1, 7, 16, 55, 56, 57, 58, 59, 85, 95, 98, 101, 102, 129, 130, 134, 138, 139, 143, 144, 152, 160, 169, 171, 177, 192, 207, 233, 278], "easili": [1, 6, 13, 22, 26, 34, 47, 63, 78, 94, 101, 102, 103, 111, 118, 119, 120, 132, 135, 137, 138, 145, 147, 152, 153, 159, 169, 171, 172, 175, 184, 186, 188, 191, 194, 198, 212, 213, 217, 226, 227, 229, 235, 245, 262], "reusabl": [1, 7], "swappabl": 1, "signatur": [1, 6, 10, 11, 15, 16, 116, 147, 163, 174, 185, 188, 276], "main": [1, 3, 6, 7, 12, 18, 22, 38, 55, 56, 58, 91, 103, 111, 116, 119, 131, 132, 138, 143, 147, 153, 165, 172, 173, 174, 175, 179, 188, 189, 191, 192, 198, 199, 219, 220, 226, 234, 235, 241, 260, 276, 279], "characterist": [1, 15, 45, 140, 152, 154, 155, 170, 176, 188, 275], "thei": [1, 3, 6, 7, 10, 11, 13, 15, 17, 18, 22, 34, 35, 42, 46, 51, 52, 55, 58, 78, 85, 88, 93, 96, 98, 101, 102, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 132, 136, 137, 138, 139, 142, 145, 147, 148, 153, 154, 156, 162, 163, 171, 172, 173, 175, 177, 184, 188, 189, 192, 193, 200, 205, 206, 207, 208, 210, 217, 221, 227, 229, 234, 245, 249, 250, 258, 259, 262, 263], "copi": [1, 6, 7, 13, 21, 37, 42, 46, 47, 53, 58, 78, 85, 93, 97, 102, 103, 118, 120, 123, 130, 131, 136, 141, 145, 147, 148, 152, 155, 163, 174, 181, 184, 185, 188, 194, 196, 212, 220, 225, 226, 232, 233, 249, 260], "loss_modul": [1, 171], "whatev": [1, 10, 96, 101, 102, 105, 107, 111, 120, 241], "need": [1, 3, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 52, 53, 54, 56, 57, 58, 63, 65, 66, 70, 85, 86, 91, 94, 96, 100, 101, 102, 103, 105, 107, 108, 110, 111, 113, 119, 120, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 184, 185, 186, 188, 189, 191, 193, 196, 197, 198, 205, 209, 210, 214, 215, 217, 220, 225, 226, 227, 229, 233, 234, 235, 241, 244, 245, 247, 250, 257, 258, 259, 260, 261, 262, 263, 265, 269, 273, 274, 275], "follow": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 33, 34, 35, 37, 38, 42, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 78, 85, 86, 88, 90, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 113, 115, 116, 120, 123, 126, 130, 131, 132, 133, 135, 136, 137, 140, 143, 144, 145, 147, 148, 152, 153, 154, 155, 156, 160, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 176, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 199, 206, 208, 209, 210, 212, 214, 215, 217, 219, 220, 227, 229, 233, 234, 241, 244, 247, 249, 250, 251, 257, 258, 265, 268, 269, 270, 272, 274, 275, 278], "convent": [1, 15, 55, 111, 120, 148, 184, 192, 245], "torch": [1, 2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25, 34, 35, 36, 38, 39, 40, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58, 60, 63, 65, 66, 70, 76, 78, 88, 91, 93, 94, 96, 100, 101, 102, 103, 105, 108, 110, 113, 115, 116, 118, 119, 121, 126, 130, 131, 132, 133, 134, 135, 139, 142, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 184, 189, 191, 193, 194, 196, 198, 199, 205, 206, 208, 209, 210, 213, 214, 215, 216, 217, 220, 221, 224, 225, 226, 227, 229, 230, 233, 234, 235, 241, 246, 247, 248, 250, 251, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 277, 279, 280], "receiv": [1, 7, 15, 18, 58, 91, 101, 107, 119, 147, 165, 167, 171, 173, 174, 175, 186, 189, 196, 244, 247, 260], "input": [1, 2, 4, 6, 7, 10, 11, 13, 14, 15, 17, 18, 33, 34, 37, 38, 42, 45, 46, 47, 49, 51, 52, 59, 63, 65, 66, 68, 70, 71, 72, 75, 76, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 120, 129, 131, 132, 135, 137, 138, 139, 140, 141, 143, 145, 147, 148, 149, 151, 153, 154, 155, 156, 159, 162, 164, 167, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 191, 193, 194, 198, 208, 210, 212, 215, 219, 220, 221, 223, 225, 227, 233, 234, 235, 243, 244, 247, 250, 251, 263, 269, 273, 275, 276, 278], "all": [1, 2, 3, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 33, 34, 35, 38, 39, 42, 43, 45, 46, 47, 49, 52, 53, 54, 55, 56, 58, 59, 63, 78, 85, 88, 93, 94, 96, 98, 101, 102, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 156, 159, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 184, 185, 186, 188, 189, 191, 193, 194, 196, 197, 198, 205, 206, 208, 210, 212, 213, 214, 215, 217, 219, 220, 225, 228, 232, 234, 235, 241, 243, 245, 247, 249, 251, 257, 258, 259, 261, 262, 263, 264, 265, 269, 270, 272, 273, 275, 276, 278, 279, 280], "necessari": [1, 4, 6, 7, 10, 11, 13, 16, 21, 22, 26, 40, 46, 55, 56, 58, 88, 91, 101, 102, 104, 111, 120, 131, 132, 135, 141, 145, 155, 167, 171, 173, 174, 175, 181, 188, 193, 194, 207, 210, 212, 214, 244, 260, 265, 273], "inform": [1, 2, 4, 6, 8, 10, 11, 15, 17, 33, 47, 52, 56, 78, 85, 91, 93, 98, 100, 101, 103, 107, 108, 110, 120, 131, 136, 137, 138, 139, 145, 147, 148, 151, 152, 155, 170, 171, 172, 174, 176, 177, 181, 182, 184, 186, 188, 189, 191, 193, 196, 197, 198, 208, 210, 212, 217, 219, 220, 221, 227, 228, 229, 241, 244, 245, 259, 260, 262, 263, 273, 276, 278], "return": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 34, 35, 39, 42, 47, 49, 52, 54, 55, 78, 85, 93, 94, 100, 101, 102, 103, 105, 107, 108, 111, 113, 116, 118, 120, 131, 132, 133, 135, 139, 140, 142, 145, 147, 148, 151, 153, 154, 155, 156, 159, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 181, 182, 184, 186, 188, 189, 191, 193, 199, 200, 205, 207, 209, 210, 212, 214, 215, 219, 220, 223, 225, 226, 227, 229, 233, 234, 235, 241, 243, 245, 247, 250, 251, 259, 270, 273, 275, 276], "replay_buff": [1, 171], "sampl": [1, 4, 7, 10, 34, 35, 38, 39, 42, 46, 49, 51, 52, 54, 55, 58, 63, 91, 96, 98, 100, 101, 103, 120, 126, 130, 131, 138, 141, 147, 154, 155, 162, 163, 171, 172, 173, 175, 178, 184, 188, 191, 192, 210, 219, 223, 243, 250, 259, 260, 273, 280], "loss_dict": 1, "instanc": [1, 6, 7, 12, 13, 15, 34, 40, 47, 56, 57, 58, 63, 85, 91, 96, 98, 101, 102, 103, 104, 105, 108, 110, 111, 112, 119, 131, 132, 136, 137, 140, 143, 144, 145, 148, 153, 155, 165, 167, 171, 173, 174, 175, 186, 214, 217, 232, 233, 234, 241, 244, 250, 258, 259, 260, 265, 275, 278, 279], "written": [1, 4, 6, 7, 10, 11, 15, 17, 88, 100, 106, 111, 112, 142, 148, 152, 159, 163, 164, 167, 176, 181, 184, 196, 197, 198, 205, 234, 258, 270, 272, 276], "under": [1, 6, 10, 21, 22, 33, 49, 52, 53, 55, 57, 59, 63, 100, 103, 105, 118, 119, 133, 135, 136, 140, 147, 154, 155, 163, 165, 169, 175, 181, 182, 191, 193, 197, 206, 208, 225, 227, 228, 235, 241, 244, 269, 272], "loss_": 1, "smth": 1, "where": [1, 3, 4, 7, 10, 12, 13, 14, 15, 18, 19, 21, 26, 33, 35, 49, 52, 54, 63, 66, 71, 86, 88, 91, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 119, 130, 132, 135, 137, 138, 139, 142, 144, 145, 147, 149, 153, 156, 159, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 182, 186, 188, 189, 191, 192, 193, 194, 196, 198, 205, 208, 209, 210, 215, 226, 229, 241, 244, 245, 247, 257, 258, 259, 263, 264, 275, 278], "string": [1, 4, 10, 16, 52, 101, 113, 137, 138, 139, 148, 169, 171, 177, 184, 189, 196, 241, 245, 259], "describ": [1, 6, 7, 10, 11, 15, 16, 18, 22, 40, 42, 51, 52, 55, 63, 78, 96, 103, 113, 116, 123, 129, 147, 159, 167, 171, 172, 175, 181, 184, 188, 189, 213, 217, 229, 232, 245, 278], "addit": [1, 2, 4, 6, 10, 12, 16, 19, 22, 53, 58, 78, 94, 101, 103, 108, 111, 113, 118, 132, 135, 136, 138, 145, 147, 149, 153, 156, 169, 173, 174, 177, 182, 185, 186, 188, 192, 205, 206, 207, 208, 212, 213, 214, 215, 220, 226, 233, 234, 245, 250, 260, 271, 272, 274, 275, 278], "kei": [1, 4, 7, 10, 12, 15, 16, 52, 85, 106, 110, 113, 118, 120, 123, 132, 133, 134, 137, 148, 155, 165, 170, 171, 173, 176, 177, 181, 182, 184, 188, 189, 192, 194, 210, 214, 215, 223, 224, 232, 234, 249, 258, 260, 261, 271, 272, 276], "mai": [1, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 38, 52, 53, 55, 71, 78, 88, 93, 94, 96, 98, 101, 105, 112, 116, 119, 120, 131, 134, 135, 136, 137, 140, 141, 142, 147, 148, 149, 151, 153, 154, 159, 162, 163, 165, 170, 171, 174, 177, 181, 184, 186, 188, 192, 193, 196, 207, 210, 215, 217, 221, 223, 227, 229, 245, 250, 260, 263, 270, 272, 273, 275], "metric": [1, 19, 91, 100, 101, 103, 118, 132, 181, 184, 191, 215, 235, 241, 245, 258], "log": [1, 21, 38, 52, 53, 55, 56, 100, 104, 105, 108, 110, 111, 131, 134, 137, 144, 170, 171, 173, 175, 181, 182, 184, 188, 189, 209, 224, 228, 235, 264, 270, 276, 278], "dure": [1, 3, 10, 13, 15, 21, 22, 33, 34, 38, 39, 40, 52, 55, 65, 66, 88, 93, 96, 98, 101, 102, 103, 105, 110, 111, 112, 119, 120, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 145, 148, 152, 153, 159, 163, 170, 171, 172, 173, 175, 181, 185, 186, 188, 191, 196, 197, 200, 209, 212, 213, 217, 220, 227, 234, 241, 250, 257, 258, 265], "reason": [1, 6, 7, 10, 15, 16, 17, 19, 33, 55, 85, 93, 96, 103, 105, 108, 111, 120, 126, 136, 141, 147, 153, 171, 176, 177, 188, 189, 196, 198, 207, 215, 227, 245, 248, 249, 256, 264, 274, 276, 280], "independ": [1, 52, 110, 111, 154, 155, 159, 174, 205, 214, 232], "let": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 26, 34, 38, 45, 46, 47, 49, 52, 54, 55, 71, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 120, 126, 133, 135, 137, 142, 145, 147, 148, 149, 152, 153, 154, 156, 159, 162, 163, 164, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 198, 200, 205, 206, 210, 215, 223, 227, 229, 233, 243, 245, 247, 249, 250, 257, 258, 259, 260, 263, 265, 274, 275], "user": [1, 3, 6, 15, 19, 21, 22, 26, 43, 46, 52, 53, 85, 86, 88, 94, 103, 107, 116, 123, 132, 133, 134, 135, 138, 139, 145, 153, 156, 165, 173, 175, 176, 177, 181, 184, 188, 189, 191, 192, 193, 194, 205, 206, 207, 208, 213, 214, 215, 221, 225, 226, 227, 228, 229, 234, 235, 241, 250, 264, 265, 267, 269, 270, 271, 276, 278, 280], "differ": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 26, 33, 38, 42, 49, 51, 52, 54, 55, 63, 76, 78, 85, 86, 88, 91, 94, 96, 98, 101, 102, 103, 104, 105, 110, 111, 113, 130, 131, 132, 133, 135, 137, 138, 139, 141, 144, 145, 147, 149, 152, 153, 154, 156, 159, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 184, 185, 186, 188, 189, 192, 193, 196, 198, 199, 205, 206, 207, 208, 209, 210, 215, 217, 220, 226, 227, 228, 229, 232, 233, 241, 245, 248, 250, 256, 258, 259, 260, 264, 265, 270, 273, 275, 278, 279, 280], "set": [1, 2, 3, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 26, 33, 38, 40, 45, 46, 49, 51, 52, 53, 55, 56, 58, 63, 65, 66, 71, 78, 85, 86, 90, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 113, 115, 119, 120, 126, 130, 131, 132, 133, 135, 138, 139, 140, 143, 144, 145, 147, 148, 153, 155, 162, 163, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 185, 186, 188, 189, 191, 192, 205, 207, 209, 210, 212, 214, 215, 220, 221, 226, 227, 229, 233, 234, 235, 241, 245, 246, 249, 257, 259, 261, 263, 270, 276, 278], "sum": [1, 2, 4, 6, 8, 12, 15, 17, 21, 22, 34, 45, 52, 55, 75, 85, 93, 94, 104, 105, 107, 111, 119, 131, 132, 133, 139, 140, 142, 147, 154, 171, 172, 173, 174, 175, 181, 186, 188, 189, 206, 223, 225, 226, 227, 235, 245, 263, 279], "can": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 37, 38, 39, 40, 42, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 63, 71, 76, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 200, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 219, 220, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 241, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279], "simpli": [1, 3, 6, 7, 10, 14, 22, 45, 46, 52, 56, 88, 96, 107, 110, 119, 120, 134, 135, 137, 139, 142, 147, 153, 154, 162, 168, 169, 171, 172, 173, 174, 177, 179, 181, 182, 186, 188, 189, 192, 193, 194, 196, 206, 214, 217, 219, 227, 234, 245, 259, 261, 262, 263], "done": [1, 4, 6, 7, 10, 11, 15, 18, 19, 22, 52, 57, 85, 88, 98, 101, 103, 104, 105, 111, 131, 132, 135, 136, 139, 141, 148, 149, 152, 153, 155, 156, 165, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 182, 184, 188, 189, 196, 198, 215, 217, 234, 249, 260, 274, 276], "via": [1, 3, 4, 6, 7, 8, 18, 19, 21, 40, 57, 58, 78, 88, 103, 130, 131, 132, 135, 137, 147, 148, 154, 163, 170, 171, 176, 182, 184, 186, 188, 189, 191, 192, 197, 200, 209, 212, 215, 225, 229, 233, 234, 235, 241, 249, 257, 258, 260, 264, 269, 272], "loss_val": [1, 171], "item": [1, 2, 7, 11, 12, 16, 35, 42, 52, 71, 100, 111, 119, 120, 123, 131, 132, 133, 138, 139, 147, 148, 170, 171, 173, 174, 175, 182, 184, 188, 193, 210, 235, 244, 260], "startswith": [1, 86], "parent": [1, 4, 15, 111, 229], "As": [1, 2, 3, 6, 7, 10, 11, 12, 13, 15, 18, 22, 40, 45, 52, 53, 55, 78, 88, 91, 94, 96, 98, 101, 102, 103, 111, 113, 119, 120, 131, 132, 133, 134, 135, 136, 137, 145, 147, 148, 151, 152, 153, 154, 155, 162, 163, 165, 167, 169, 171, 172, 173, 174, 175, 176, 181, 184, 185, 188, 189, 191, 192, 193, 198, 208, 210, 214, 221, 225, 228, 233, 235, 241, 245, 249, 260, 265, 272, 278, 279], "mani": [1, 2, 6, 7, 11, 15, 16, 17, 19, 21, 33, 34, 38, 39, 52, 54, 55, 68, 72, 78, 85, 93, 94, 96, 98, 101, 103, 105, 106, 107, 111, 113, 115, 119, 132, 135, 137, 141, 147, 149, 154, 156, 159, 164, 165, 171, 173, 174, 177, 185, 186, 188, 189, 192, 207, 215, 219, 234, 235, 243, 244, 245, 247, 260, 265, 272, 278], "other": [1, 6, 7, 10, 11, 12, 15, 19, 22, 33, 34, 37, 42, 46, 49, 51, 52, 55, 56, 58, 59, 60, 71, 72, 78, 85, 86, 91, 93, 94, 96, 101, 103, 105, 107, 108, 110, 111, 119, 120, 123, 131, 133, 134, 135, 138, 139, 141, 143, 144, 145, 147, 148, 151, 152, 153, 154, 155, 159, 162, 163, 164, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 182, 185, 186, 188, 189, 191, 192, 193, 196, 198, 205, 206, 207, 208, 210, 215, 217, 227, 229, 244, 245, 247, 249, 250, 257, 258, 259, 260, 261, 262, 263, 265, 269, 270, 271, 272, 273, 279], "expect": [1, 4, 6, 7, 11, 12, 15, 47, 49, 52, 54, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 107, 108, 110, 111, 112, 120, 126, 134, 137, 141, 145, 148, 154, 155, 162, 163, 169, 170, 171, 172, 173, 174, 176, 184, 188, 189, 191, 193, 196, 212, 228, 234, 241, 243, 244, 245, 250, 257, 260, 273, 275, 279], "ani": [1, 2, 4, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 33, 43, 45, 47, 49, 52, 54, 56, 58, 93, 96, 98, 101, 103, 104, 106, 107, 110, 111, 113, 115, 120, 129, 131, 133, 135, 136, 138, 140, 142, 143, 147, 149, 151, 152, 155, 156, 162, 163, 164, 165, 167, 170, 171, 172, 174, 175, 179, 181, 184, 185, 188, 189, 197, 199, 205, 206, 207, 208, 209, 212, 215, 217, 221, 223, 224, 226, 227, 229, 232, 241, 244, 247, 249, 251, 257, 259, 263, 269, 270, 272, 273, 274, 276, 278], "similar": [1, 3, 4, 6, 10, 11, 12, 15, 16, 22, 42, 51, 52, 85, 86, 94, 96, 98, 101, 103, 104, 110, 111, 116, 119, 135, 138, 142, 147, 148, 163, 171, 173, 174, 175, 176, 177, 181, 182, 184, 188, 191, 193, 197, 205, 206, 207, 208, 209, 210, 233, 244, 245, 259, 260, 269, 275, 279], "structur": [1, 6, 7, 10, 15, 20, 21, 22, 34, 39, 40, 42, 51, 52, 55, 56, 88, 93, 96, 98, 102, 103, 104, 108, 113, 120, 130, 140, 143, 149, 152, 155, 156, 163, 164, 169, 171, 175, 182, 184, 186, 191, 208, 213, 219, 258, 272, 274, 280], "format": [1, 6, 13, 19, 22, 43, 100, 111, 115, 120, 130, 131, 132, 134, 147, 152, 153, 170, 173, 175, 178, 181, 182, 184, 189, 191, 205, 207, 208, 215, 221, 234, 235, 243, 245, 264, 280], "make": [1, 4, 6, 7, 10, 11, 13, 15, 21, 22, 34, 38, 39, 43, 45, 46, 47, 49, 52, 53, 54, 56, 57, 58, 60, 71, 78, 91, 93, 96, 98, 100, 101, 103, 105, 106, 107, 109, 110, 111, 112, 115, 116, 120, 123, 126, 130, 131, 132, 133, 135, 137, 138, 139, 140, 141, 145, 147, 148, 152, 153, 154, 155, 162, 163, 165, 168, 169, 171, 172, 173, 174, 175, 177, 182, 184, 185, 186, 188, 189, 191, 192, 194, 196, 198, 205, 206, 207, 208, 210, 219, 225, 227, 228, 229, 233, 234, 243, 244, 245, 249, 251, 258, 259, 260, 264, 269, 270, 272, 275, 276, 280], "possibl": [1, 2, 4, 6, 7, 8, 10, 11, 15, 16, 19, 93, 94, 98, 101, 104, 107, 115, 133, 136, 140, 141, 142, 148, 149, 151, 152, 154, 155, 165, 170, 171, 173, 174, 177, 185, 186, 188, 189, 191, 192, 196, 210, 215, 217, 221, 232, 234, 235, 244, 249, 260, 272, 278], "re": [1, 4, 6, 7, 8, 11, 15, 18, 22, 26, 37, 39, 42, 46, 51, 52, 53, 94, 96, 98, 100, 101, 102, 103, 104, 111, 119, 126, 136, 138, 139, 148, 149, 151, 154, 159, 162, 164, 165, 170, 171, 172, 173, 174, 177, 188, 189, 191, 197, 198, 205, 217, 219, 227, 229, 244, 245, 249, 259, 260], "across": [1, 4, 6, 10, 12, 15, 18, 21, 26, 42, 52, 55, 57, 58, 59, 85, 94, 101, 103, 113, 129, 131, 132, 133, 135, 143, 144, 145, 147, 149, 155, 165, 167, 169, 172, 174, 175, 185, 188, 189, 194, 224, 227, 229, 232, 243, 258, 260, 261, 263, 264, 269, 273, 275, 278, 279], "modal": [1, 165, 243], "complex": [1, 7, 34, 35, 53, 70, 71, 93, 94, 98, 103, 113, 119, 120, 129, 131, 145, 159, 163, 165, 173, 175, 182, 185, 186, 188, 189, 196, 210, 228, 229, 251, 261, 272], "read": [1, 2, 6, 7, 8, 15, 22, 39, 49, 52, 54, 78, 96, 107, 108, 111, 120, 126, 129, 132, 133, 134, 136, 137, 138, 139, 140, 147, 153, 162, 165, 170, 171, 172, 174, 177, 179, 182, 185, 186, 192, 197, 244, 245, 275, 278], "multipl": [1, 4, 6, 10, 11, 12, 15, 17, 18, 19, 21, 22, 42, 47, 51, 52, 56, 57, 58, 59, 63, 68, 85, 91, 93, 94, 98, 100, 101, 102, 103, 107, 111, 119, 129, 131, 133, 135, 136, 137, 138, 139, 145, 147, 149, 153, 155, 165, 167, 170, 171, 173, 174, 175, 177, 181, 182, 184, 186, 188, 189, 192, 194, 196, 198, 209, 210, 215, 221, 227, 233, 244, 245, 250, 259, 260, 261, 264, 274, 278], "entri": [1, 12, 15, 56, 107, 110, 118, 120, 143, 148, 153, 169, 171, 173, 181, 188, 196, 207, 208, 210, 214, 225, 262, 269], "In": [1, 2, 3, 4, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 37, 39, 40, 42, 45, 47, 51, 52, 53, 54, 55, 56, 58, 59, 60, 66, 71, 78, 85, 86, 88, 90, 91, 94, 96, 98, 100, 102, 103, 104, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 152, 153, 154, 155, 156, 159, 160, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 241, 243, 244, 245, 247, 249, 250, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279], "word": [1, 7, 11, 12, 15, 46, 52, 78, 85, 94, 98, 103, 104, 106, 108, 109, 120, 130, 138, 139, 147, 160, 162, 163, 169, 175, 177, 189, 206, 208, 210, 275, 280], "allow": [1, 2, 6, 7, 10, 11, 12, 13, 15, 22, 26, 33, 34, 35, 45, 52, 53, 54, 55, 56, 85, 86, 88, 91, 93, 94, 98, 101, 103, 105, 107, 108, 110, 111, 112, 113, 119, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 145, 147, 148, 155, 156, 159, 162, 163, 165, 168, 169, 171, 172, 173, 175, 176, 177, 179, 184, 185, 186, 188, 189, 191, 192, 194, 196, 199, 205, 206, 210, 212, 220, 225, 229, 232, 241, 244, 245, 250, 257, 258, 259, 269, 278], "u": [1, 4, 6, 7, 10, 11, 12, 15, 17, 19, 22, 33, 35, 46, 49, 52, 54, 55, 72, 85, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 110, 111, 116, 119, 132, 135, 138, 141, 143, 147, 148, 149, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 170, 171, 172, 174, 177, 182, 184, 185, 186, 188, 189, 192, 198, 205, 206, 208, 210, 212, 215, 219, 223, 243, 245, 247, 249, 257, 259, 273, 276], "oblivi": [1, 171], "type": [1, 4, 6, 7, 10, 11, 15, 21, 22, 42, 51, 52, 53, 78, 85, 88, 94, 96, 97, 100, 102, 107, 111, 113, 116, 129, 131, 132, 135, 137, 149, 153, 164, 165, 168, 169, 171, 173, 174, 175, 176, 181, 184, 186, 188, 192, 193, 205, 209, 212, 217, 221, 225, 226, 227, 234, 235, 241, 243, 257, 258, 260, 261, 268, 271, 276, 278], "being": [1, 3, 4, 6, 7, 11, 13, 15, 19, 49, 52, 55, 85, 94, 102, 103, 104, 105, 107, 111, 113, 126, 132, 135, 137, 141, 147, 148, 163, 165, 167, 169, 171, 172, 174, 186, 188, 189, 206, 207, 210, 215, 217, 226, 234, 245, 249, 260, 274, 278], "run": [1, 2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 26, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 49, 51, 54, 55, 59, 60, 63, 66, 71, 75, 76, 85, 91, 93, 94, 96, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 182, 185, 186, 189, 191, 192, 196, 198, 199, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 219, 220, 221, 226, 227, 228, 229, 233, 234, 241, 244, 245, 246, 249, 251, 257, 259, 260, 264, 265, 267, 269, 271, 272, 273, 274, 275, 276, 278, 280], "elementari": [1, 2], "onli": [1, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 21, 22, 33, 40, 45, 46, 47, 49, 52, 56, 58, 59, 78, 85, 91, 93, 96, 98, 101, 103, 104, 105, 110, 111, 118, 120, 123, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 175, 176, 177, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 197, 198, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 219, 220, 223, 224, 225, 229, 232, 241, 244, 245, 250, 257, 260, 261, 262, 265, 269, 272, 273, 275, 278, 279], "those": [1, 4, 6, 7, 8, 11, 12, 15, 19, 33, 40, 45, 91, 93, 101, 104, 110, 111, 116, 134, 135, 136, 138, 149, 152, 162, 167, 168, 169, 175, 177, 182, 184, 188, 189, 198, 206, 215, 217, 219, 220, 221, 227, 235, 241, 244, 245, 259, 269, 272, 274, 278], "keep": [1, 4, 7, 11, 12, 15, 33, 42, 45, 52, 55, 78, 85, 88, 96, 98, 101, 103, 105, 107, 108, 111, 119, 120, 130, 131, 132, 133, 134, 135, 136, 139, 144, 145, 148, 153, 159, 165, 171, 175, 177, 188, 189, 192, 245, 260, 279], "didact": [1, 147], "ll": [1, 4, 6, 7, 10, 11, 17, 19, 22, 34, 35, 37, 42, 51, 52, 53, 80, 81, 82, 83, 91, 93, 94, 96, 98, 100, 101, 102, 104, 111, 113, 133, 138, 139, 145, 147, 148, 149, 151, 154, 159, 162, 164, 170, 171, 172, 174, 177, 182, 188, 189, 192, 198, 205, 207, 209, 215, 223, 224, 232, 245, 271, 276], "displai": [1, 2, 6, 7, 13, 35, 46, 94, 100, 102, 118, 126, 141, 177, 181, 225, 228, 244, 245, 258], "each": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 26, 33, 34, 35, 37, 38, 39, 42, 45, 46, 47, 51, 52, 54, 55, 56, 58, 59, 63, 68, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 115, 118, 119, 120, 126, 129, 130, 131, 132, 133, 135, 137, 138, 139, 140, 142, 143, 144, 145, 147, 148, 149, 151, 152, 154, 155, 156, 159, 162, 163, 164, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 188, 189, 191, 192, 194, 196, 197, 199, 205, 208, 210, 215, 224, 225, 228, 229, 234, 235, 241, 243, 244, 245, 247, 249, 250, 251, 257, 258, 259, 260, 262, 263, 275, 276, 278, 279], "popul": [1, 33, 45, 52, 91, 101, 132, 148, 155, 171, 173, 196, 224, 232, 259, 270], "later": [1, 3, 4, 6, 7, 12, 17, 33, 42, 49, 52, 78, 91, 94, 98, 103, 107, 108, 111, 120, 131, 132, 134, 135, 139, 140, 142, 147, 149, 151, 152, 153, 154, 155, 159, 164, 167, 171, 172, 175, 176, 177, 182, 184, 185, 188, 189, 192, 194, 196, 197, 200, 205, 214, 223, 224, 226, 228, 232, 241, 244, 245, 246, 249, 257, 260, 265, 269, 270, 271, 272, 274, 275, 276], "stage": [1, 15, 18, 98, 111, 167, 199, 209, 220, 225, 226, 232], "start": [1, 6, 7, 12, 18, 19, 21, 22, 26, 33, 37, 45, 46, 52, 53, 55, 56, 57, 58, 63, 78, 91, 93, 94, 97, 98, 101, 102, 103, 106, 107, 111, 112, 113, 116, 129, 130, 132, 134, 135, 136, 137, 138, 139, 140, 141, 147, 153, 154, 155, 162, 163, 165, 170, 172, 173, 174, 177, 181, 182, 184, 186, 188, 189, 191, 194, 196, 198, 200, 207, 212, 215, 216, 225, 226, 233, 241, 245, 248, 250, 251, 256, 258, 263, 264, 267, 269, 270, 272, 276, 279, 280], "solv": [1, 7, 15, 52, 54, 103, 110, 126, 163, 171, 173, 175, 207, 245, 249, 260], "task": [1, 7, 14, 15, 19, 26, 38, 39, 52, 102, 103, 104, 110, 118, 126, 129, 130, 131, 138, 148, 163, 165, 171, 172, 177, 179, 184, 191, 215, 245, 250, 259, 260, 269, 275, 278], "strategi": [1, 6, 19, 21, 26, 55, 85, 130, 139, 147, 153, 154, 164, 165, 173, 174, 215, 221, 226, 228, 229, 235, 260], "predict": [1, 22, 34, 37, 38, 39, 40, 45, 46, 52, 55, 65, 66, 70, 71, 72, 75, 76, 93, 94, 96, 98, 102, 103, 104, 108, 110, 111, 119, 135, 137, 138, 139, 149, 154, 155, 165, 172, 177, 182, 189, 191, 215, 233, 243, 247, 264, 275], "henc": [1, 15, 19, 42, 45, 51, 85, 131, 136, 145, 156, 159, 165, 168, 171, 173, 175, 189, 215, 233, 234, 245, 275], "our": [1, 2, 3, 4, 6, 7, 8, 10, 11, 13, 18, 19, 22, 33, 34, 35, 37, 38, 39, 42, 43, 45, 46, 47, 51, 52, 53, 54, 55, 56, 58, 63, 65, 66, 68, 70, 71, 72, 78, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 108, 110, 111, 113, 116, 118, 119, 126, 130, 131, 132, 134, 137, 138, 139, 140, 142, 143, 144, 148, 151, 152, 153, 154, 155, 156, 159, 163, 164, 165, 167, 169, 171, 172, 173, 174, 176, 177, 179, 182, 184, 186, 188, 189, 191, 192, 193, 194, 198, 200, 205, 206, 207, 208, 214, 215, 219, 224, 226, 227, 232, 233, 243, 245, 259, 264, 265, 270, 271, 279], "two": [1, 4, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 26, 33, 35, 38, 39, 42, 43, 45, 51, 52, 53, 55, 60, 78, 86, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 118, 119, 126, 131, 132, 137, 138, 140, 141, 142, 144, 145, 147, 148, 151, 152, 153, 154, 155, 156, 159, 163, 164, 165, 167, 168, 169, 171, 172, 173, 175, 176, 177, 184, 189, 191, 192, 193, 194, 196, 198, 199, 206, 208, 210, 212, 215, 217, 221, 225, 229, 232, 233, 235, 241, 245, 247, 249, 250, 257, 259, 260, 261, 264, 270, 272, 274, 278, 279], "constructor": [1, 7, 11, 12, 13, 70, 72, 88, 98, 102, 119, 131, 132, 145, 165, 168, 169, 171, 173, 175, 208, 217, 244, 245], "both": [1, 2, 6, 7, 10, 11, 12, 13, 15, 18, 22, 26, 35, 52, 54, 55, 63, 78, 85, 88, 94, 101, 102, 103, 110, 111, 118, 119, 132, 133, 135, 137, 141, 144, 145, 147, 151, 153, 154, 156, 159, 165, 169, 171, 173, 174, 175, 176, 177, 185, 188, 189, 191, 192, 193, 198, 199, 205, 208, 209, 225, 226, 227, 229, 233, 234, 235, 241, 243, 244, 245, 257, 259, 269, 270, 275, 278], "compat": [1, 6, 7, 10, 12, 19, 53, 100, 101, 107, 112, 134, 140, 148, 176, 186, 188, 214, 217, 274, 275], "comput": [1, 3, 4, 6, 7, 10, 12, 13, 14, 17, 18, 19, 22, 26, 38, 42, 46, 49, 51, 52, 54, 55, 56, 60, 63, 65, 66, 68, 71, 75, 76, 78, 86, 88, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 111, 113, 115, 119, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 151, 153, 155, 162, 163, 164, 165, 167, 169, 170, 171, 172, 174, 176, 177, 181, 184, 185, 186, 188, 189, 191, 192, 194, 196, 198, 209, 210, 213, 215, 217, 219, 220, 221, 223, 224, 232, 233, 241, 244, 245, 247, 249, 251, 259, 272, 275, 278], "fit": [1, 7, 11, 12, 63, 91, 110, 119, 131, 132, 133, 135, 145, 165, 175, 189, 244, 278], "gener": [1, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 56, 65, 66, 68, 70, 71, 72, 75, 76, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 121, 123, 126, 130, 135, 136, 138, 140, 141, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 169, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 212, 215, 219, 221, 224, 226, 227, 232, 233, 234, 235, 241, 243, 244, 246, 247, 249, 250, 251, 257, 258, 259, 261, 262, 263, 264, 265, 270, 271, 272, 273, 274, 275, 276, 278, 280], "crucial": [1, 2, 13, 15, 85, 107, 148, 165, 171, 189, 260], "convert_to_funct": 1, "extract": [1, 6, 52, 55, 78, 100, 103, 126, 130, 138, 139, 151, 153, 164, 171, 177, 186, 188, 191, 225, 232, 247], "convert": [1, 6, 11, 13, 22, 34, 35, 42, 43, 46, 52, 54, 55, 58, 96, 98, 101, 103, 111, 113, 115, 120, 130, 133, 138, 139, 170, 171, 173, 174, 182, 189, 198, 205, 206, 208, 209, 210, 212, 213, 227, 234, 243, 257, 260, 264], "strictli": [1, 101, 171], "speak": [1, 10, 45, 101, 136, 147, 260], "one": [1, 4, 6, 7, 8, 10, 12, 13, 15, 16, 19, 21, 22, 33, 35, 37, 42, 43, 47, 49, 51, 52, 54, 55, 58, 59, 63, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 106, 107, 108, 110, 111, 116, 119, 120, 123, 126, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 184, 185, 188, 189, 191, 193, 196, 197, 198, 205, 206, 207, 209, 210, 215, 219, 226, 227, 228, 229, 245, 247, 249, 250, 260, 261, 263, 264, 272, 273, 274, 275, 278, 279], "perfectli": [1, 15], "howev": [1, 4, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 33, 40, 47, 49, 52, 54, 55, 78, 88, 91, 103, 104, 119, 126, 135, 136, 140, 141, 142, 147, 148, 149, 152, 156, 162, 165, 168, 169, 172, 173, 174, 175, 176, 177, 182, 184, 185, 186, 188, 189, 193, 199, 200, 206, 207, 210, 215, 219, 221, 227, 228, 232, 233, 245, 249, 257, 259, 260, 265, 272, 275, 278], "encourag": [1, 7, 22, 98, 172, 177, 184], "usag": [1, 3, 4, 12, 14, 16, 85, 93, 118, 130, 131, 133, 136, 147, 148, 153, 154, 167, 171, 173, 175, 176, 178, 181, 192, 194, 198, 200, 209, 210, 221, 226, 234, 241, 244, 258, 260, 264, 273, 278, 280], "doe": [1, 2, 4, 6, 7, 10, 14, 15, 16, 17, 22, 33, 43, 45, 49, 75, 76, 78, 88, 93, 94, 96, 98, 100, 101, 102, 103, 105, 107, 110, 111, 113, 116, 119, 120, 126, 131, 132, 133, 134, 140, 142, 145, 147, 148, 154, 155, 156, 162, 163, 165, 167, 170, 171, 172, 174, 175, 176, 177, 181, 182, 185, 186, 188, 189, 191, 192, 196, 197, 198, 206, 207, 208, 217, 219, 226, 241, 244, 245, 249, 257, 259, 260, 272, 274, 278], "often": [1, 6, 7, 11, 15, 19, 42, 52, 78, 91, 93, 94, 96, 101, 103, 105, 107, 110, 111, 119, 120, 135, 136, 137, 139, 155, 163, 188, 189, 196, 210, 215, 223, 226, 244, 259, 260], "same": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 16, 19, 22, 33, 34, 40, 42, 45, 46, 49, 52, 54, 55, 56, 58, 68, 76, 78, 88, 91, 93, 101, 102, 103, 105, 107, 108, 110, 111, 113, 116, 118, 119, 120, 131, 132, 133, 134, 135, 136, 138, 140, 141, 144, 145, 147, 149, 151, 153, 154, 155, 156, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 186, 188, 189, 192, 193, 194, 197, 199, 205, 206, 207, 208, 210, 215, 226, 227, 241, 244, 245, 250, 252, 253, 254, 255, 257, 260, 263, 269, 270, 273, 274, 278, 279], "usual": [1, 6, 7, 10, 17, 22, 45, 94, 96, 98, 100, 101, 105, 106, 108, 110, 111, 126, 135, 136, 139, 141, 142, 145, 147, 148, 153, 156, 162, 165, 169, 171, 188, 192, 219, 244, 249, 250, 260, 278], "former": [1, 6, 138, 139, 177], "some": [1, 3, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 33, 34, 35, 38, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 65, 71, 78, 85, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 116, 118, 119, 120, 130, 131, 132, 134, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 152, 153, 154, 159, 162, 164, 165, 167, 169, 171, 172, 174, 175, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 196, 198, 205, 206, 207, 208, 210, 212, 214, 215, 217, 219, 227, 234, 235, 244, 245, 247, 249, 250, 251, 259, 260, 261, 265, 272, 273, 275, 278], "lag": [1, 171], "absolut": [1, 7, 11, 85, 105, 169, 172, 259], "dilut": 1, "move": [1, 6, 8, 13, 27, 28, 29, 30, 31, 32, 34, 39, 42, 45, 49, 51, 79, 92, 93, 105, 111, 131, 132, 133, 135, 144, 145, 148, 150, 162, 163, 165, 168, 172, 174, 175, 180, 181, 183, 187, 191, 201, 204, 206, 220, 225, 226, 227, 233, 245, 259, 260], "averag": [1, 3, 22, 52, 55, 63, 85, 91, 94, 96, 100, 102, 103, 111, 131, 134, 139, 147, 164, 171, 172, 175, 177, 181, 245, 260], "These": [1, 6, 10, 12, 13, 15, 19, 22, 40, 45, 52, 55, 58, 63, 85, 91, 98, 106, 108, 110, 111, 118, 126, 147, 155, 171, 174, 176, 177, 184, 185, 188, 189, 192, 198, 212, 215, 233, 245, 259, 260, 269, 270, 272], "associ": [1, 4, 6, 7, 10, 11, 34, 35, 53, 85, 94, 142, 151, 165, 169, 176, 184, 189, 197, 206, 215, 217, 247, 257, 260, 274], "One": [1, 2, 4, 6, 7, 11, 12, 16, 52, 54, 78, 85, 93, 98, 101, 103, 104, 105, 107, 131, 132, 133, 134, 135, 136, 139, 145, 147, 149, 162, 163, 165, 179, 182, 185, 186, 188, 189, 191, 192, 196, 207, 219, 226, 227, 235, 245, 251, 257, 259, 260, 275], "advantag": [1, 3, 7, 15, 19, 52, 88, 101, 104, 111, 129, 132, 133, 136, 147, 148, 163, 165, 171, 186, 192, 208, 215, 226, 227, 234, 241, 260, 270, 274], "match": [1, 6, 11, 15, 19, 22, 71, 96, 101, 103, 111, 113, 116, 119, 120, 149, 153, 156, 162, 164, 171, 174, 186, 188, 206, 208, 215, 233, 234, 244, 247, 251, 261, 278], "exactli": [1, 6, 10, 11, 13, 19, 33, 45, 54, 55, 96, 107, 110, 111, 113, 119, 148, 153, 163, 188, 189, 215], "current": [1, 4, 6, 7, 10, 11, 12, 13, 15, 16, 22, 34, 39, 42, 52, 55, 65, 78, 85, 94, 103, 111, 119, 126, 131, 132, 134, 136, 137, 138, 139, 147, 148, 151, 155, 156, 164, 165, 167, 169, 171, 172, 173, 174, 175, 176, 177, 181, 188, 189, 192, 193, 196, 205, 207, 208, 210, 227, 233, 250, 260, 269, 272], "configur": [1, 6, 7, 15, 21, 22, 26, 52, 53, 85, 94, 102, 132, 135, 143, 145, 153, 162, 171, 174, 181, 184, 189, 198, 200, 209, 225, 233, 234, 235, 260, 264, 265, 270, 272, 275, 278], "pessimist": [1, 171], "bound": [1, 52, 120, 133, 137, 153, 171, 172, 181, 188, 189, 191, 192, 198, 244, 245, 250, 260, 278], "pai": [1, 11, 47, 52, 134, 260, 273], "attent": [1, 11, 47, 52, 98, 130, 134, 135, 138, 139, 160, 178, 179, 194, 198, 210, 213, 272, 280], "create_target_param": 1, "keyword": [1, 6, 169, 171, 184, 249, 257], "argument": [1, 2, 4, 6, 7, 10, 15, 17, 33, 39, 42, 45, 46, 51, 54, 58, 72, 85, 93, 94, 98, 100, 101, 103, 105, 108, 110, 112, 118, 119, 120, 131, 132, 139, 144, 145, 147, 148, 149, 153, 154, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 181, 184, 186, 188, 189, 193, 194, 196, 207, 209, 219, 220, 225, 228, 232, 244, 245, 249, 250, 257, 258, 260, 261, 272, 278], "below": [1, 2, 4, 7, 11, 12, 13, 15, 18, 21, 22, 26, 35, 40, 42, 45, 47, 51, 54, 55, 56, 57, 58, 59, 60, 85, 88, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 123, 133, 134, 135, 137, 140, 141, 143, 144, 145, 147, 148, 151, 153, 156, 162, 168, 171, 172, 173, 174, 175, 176, 181, 182, 184, 186, 188, 189, 191, 192, 196, 198, 199, 200, 206, 207, 208, 209, 210, 212, 214, 217, 224, 225, 226, 227, 228, 232, 233, 235, 241, 244, 245, 249, 250, 265, 268, 269, 272, 273, 274, 275, 278, 279], "tell": [1, 17, 21, 72, 91, 93, 96, 98, 102, 110, 111, 119, 137, 138, 148, 149, 151, 162, 172, 173, 175, 177, 188, 245, 250], "creat": [1, 2, 6, 7, 11, 13, 15, 17, 18, 20, 21, 22, 26, 33, 34, 37, 40, 42, 43, 45, 46, 49, 51, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 93, 94, 96, 98, 100, 102, 103, 104, 106, 108, 110, 112, 113, 116, 119, 120, 123, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 151, 155, 156, 160, 163, 164, 165, 167, 168, 170, 171, 172, 174, 175, 177, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 197, 198, 200, 205, 208, 210, 212, 217, 220, 223, 224, 226, 227, 229, 232, 233, 241, 244, 245, 247, 250, 251, 257, 258, 261, 262, 263, 264, 265, 272, 274, 275, 279, 280], "If": [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 21, 26, 33, 34, 37, 39, 42, 45, 46, 47, 49, 51, 52, 53, 55, 56, 58, 63, 65, 78, 85, 91, 93, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 119, 120, 123, 126, 131, 132, 133, 134, 135, 136, 139, 141, 145, 147, 148, 149, 151, 153, 154, 156, 162, 163, 164, 165, 168, 170, 171, 172, 173, 174, 175, 176, 177, 181, 184, 186, 188, 189, 191, 192, 193, 196, 197, 198, 199, 205, 206, 208, 209, 210, 214, 215, 217, 219, 220, 221, 226, 227, 234, 235, 241, 243, 244, 246, 249, 250, 257, 258, 259, 260, 261, 263, 265, 272, 273, 278], "fals": [1, 2, 4, 7, 11, 12, 15, 22, 35, 40, 45, 58, 65, 66, 85, 86, 93, 100, 107, 119, 120, 126, 131, 132, 133, 135, 141, 151, 153, 156, 162, 163, 165, 170, 171, 173, 174, 182, 184, 186, 188, 193, 196, 199, 206, 207, 209, 212, 214, 215, 220, 223, 233, 234, 235, 244, 251, 257, 260, 261, 268, 275, 276, 278, 279], "see": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 15, 17, 19, 21, 22, 26, 34, 38, 39, 42, 46, 47, 49, 51, 52, 53, 54, 55, 58, 63, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 118, 120, 131, 132, 133, 135, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 151, 152, 153, 155, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 205, 207, 208, 209, 212, 213, 214, 215, 217, 219, 220, 221, 224, 227, 228, 229, 232, 233, 236, 241, 243, 244, 245, 250, 257, 258, 259, 260, 261, 262, 263, 269, 270, 271, 273, 274, 276, 278], "target_actor_network_param": 1, "attribut": [1, 7, 12, 15, 33, 45, 49, 56, 85, 88, 98, 110, 111, 116, 136, 148, 151, 156, 163, 167, 169, 188, 210, 213, 221, 244, 263, 264, 275], "still": [1, 6, 7, 10, 11, 12, 13, 15, 16, 19, 21, 22, 49, 55, 78, 91, 93, 101, 103, 107, 111, 118, 120, 132, 138, 139, 140, 145, 147, 148, 151, 152, 156, 162, 165, 175, 186, 188, 189, 193, 194, 198, 199, 205, 207, 209, 215, 226, 227, 229, 233, 259, 260, 273, 279], "access": [1, 6, 7, 11, 15, 19, 22, 34, 35, 53, 71, 78, 91, 93, 96, 98, 101, 102, 103, 108, 111, 119, 120, 130, 132, 136, 143, 147, 163, 165, 170, 172, 174, 184, 185, 188, 197, 205, 206, 208, 209, 212, 215, 226, 229, 241, 259, 263, 269], "just": [1, 2, 3, 4, 6, 7, 10, 11, 15, 17, 18, 19, 22, 33, 46, 47, 49, 52, 53, 54, 55, 56, 59, 75, 76, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 120, 126, 131, 132, 135, 137, 138, 139, 145, 148, 153, 154, 159, 162, 163, 165, 168, 169, 170, 171, 172, 173, 174, 175, 182, 184, 185, 186, 188, 189, 191, 198, 199, 207, 215, 227, 229, 234, 245, 246, 247, 259, 260, 263, 265, 278], "detach": [1, 2, 7, 12, 33, 93, 101, 107, 134, 159, 164, 194], "version": [1, 3, 4, 6, 7, 10, 11, 13, 15, 94, 96, 98, 101, 102, 111, 112, 113, 115, 116, 131, 132, 136, 147, 148, 149, 151, 154, 156, 163, 165, 167, 168, 169, 170, 171, 179, 181, 182, 184, 189, 191, 192, 196, 197, 198, 200, 205, 214, 220, 232, 233, 234, 235, 244, 245, 249, 259, 265, 270, 274], "q": [1, 45, 52, 130, 135, 155, 176, 184, 215], "base": [1, 6, 7, 11, 12, 15, 18, 19, 21, 26, 35, 46, 52, 60, 78, 88, 91, 93, 94, 98, 102, 103, 105, 113, 118, 120, 129, 130, 131, 132, 133, 134, 137, 138, 140, 148, 155, 165, 167, 168, 169, 172, 174, 177, 181, 182, 184, 185, 188, 189, 191, 194, 199, 207, 209, 212, 213, 214, 215, 225, 233, 244, 257, 259, 260, 264, 270, 274, 275], "empir": [1, 159, 171], "bootstrap": [1, 148], "td": 1, "0": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 58, 66, 67, 71, 73, 75, 76, 77, 78, 85, 88, 89, 91, 93, 94, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 123, 126, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 186, 189, 191, 192, 193, 194, 196, 197, 198, 199, 205, 206, 208, 209, 210, 214, 215, 216, 220, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 241, 245, 246, 247, 249, 250, 251, 256, 257, 259, 260, 265, 267, 268, 271, 272, 273, 274, 275, 276, 278, 279, 280], "low": [1, 4, 6, 7, 15, 17, 26, 52, 55, 71, 85, 98, 105, 119, 130, 138, 171, 181, 188, 192, 212, 234, 235, 259], "varianc": [1, 7, 22, 100, 171], "bia": [1, 2, 6, 7, 22, 45, 49, 71, 105, 111, 119, 120, 131, 140, 141, 148, 154, 169, 171, 175, 176, 192, 193, 209, 210, 215, 251, 257], "mean": [1, 2, 4, 6, 7, 11, 13, 15, 22, 38, 49, 52, 54, 55, 71, 78, 85, 88, 93, 96, 98, 100, 101, 103, 104, 105, 107, 110, 111, 118, 119, 120, 132, 135, 137, 138, 141, 145, 147, 156, 163, 165, 170, 171, 172, 174, 175, 177, 181, 182, 184, 188, 189, 197, 205, 207, 210, 214, 219, 220, 221, 223, 227, 245, 249, 250, 259, 260, 265, 275, 278], "obtain": [1, 26, 33, 38, 52, 71, 91, 111, 119, 137, 138, 141, 147, 154, 164, 171, 172, 174, 181, 184, 191, 197, 250, 274], "reward": [1, 15, 148, 155, 171, 172, 173, 175], "noth": [1, 78, 96, 111, 142, 165, 171, 175, 181, 193], "els": [1, 6, 10, 12, 21, 22, 49, 52, 91, 93, 100, 110, 111, 112, 132, 133, 147, 167, 168, 171, 173, 174, 175, 182, 184, 186, 188, 194, 199, 209, 210, 215, 225, 229, 244, 275, 276, 279], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 19, 21, 26, 33, 34, 35, 37, 43, 45, 49, 52, 55, 56, 58, 66, 71, 78, 89, 91, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 112, 115, 116, 118, 119, 120, 123, 126, 131, 132, 133, 135, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 152, 153, 154, 155, 156, 160, 162, 163, 164, 169, 170, 171, 172, 173, 174, 175, 176, 184, 185, 186, 189, 192, 194, 196, 198, 199, 200, 205, 206, 207, 208, 209, 210, 213, 214, 215, 217, 220, 221, 225, 226, 227, 228, 229, 233, 234, 235, 241, 244, 249, 251, 258, 260, 268, 269, 274, 275, 276, 278, 279], "case": [1, 2, 3, 4, 6, 7, 10, 11, 12, 14, 15, 18, 19, 33, 40, 45, 52, 54, 63, 71, 78, 85, 88, 93, 94, 100, 101, 103, 104, 105, 107, 108, 110, 111, 116, 119, 120, 129, 131, 132, 133, 135, 136, 137, 140, 141, 142, 147, 148, 149, 151, 153, 154, 156, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 184, 186, 188, 189, 191, 192, 193, 194, 198, 205, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 227, 234, 243, 244, 245, 250, 251, 257, 259, 263, 265, 270, 272, 273, 275, 278], "whole": [1, 3, 46, 49, 98, 111, 120, 130, 134, 147, 169, 171, 177, 189, 206, 219, 265], "sequenc": [1, 6, 7, 13, 42, 51, 52, 70, 71, 98, 104, 106, 109, 110, 119, 120, 130, 138, 139, 148, 160, 163, 171, 176, 178, 185, 192, 194, 198, 210, 213, 219, 223, 224, 229, 232, 244, 250, 260, 280], "upcom": 1, "intermedi": [1, 5, 25, 79, 93, 98, 101, 130, 143, 151, 153, 154, 155, 162, 165, 178, 187, 192, 215, 245, 251], "lambda": [1, 6, 111, 140, 170, 173, 188, 215, 244, 245, 276], "also": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 26, 33, 39, 42, 45, 49, 51, 52, 54, 55, 56, 57, 63, 71, 78, 85, 88, 91, 93, 94, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 118, 119, 120, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 145, 147, 148, 151, 153, 154, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 181, 184, 186, 188, 189, 191, 192, 193, 194, 196, 200, 205, 206, 207, 208, 214, 215, 217, 219, 220, 221, 224, 226, 227, 228, 229, 232, 233, 234, 235, 241, 244, 245, 246, 249, 250, 257, 258, 259, 260, 262, 263, 265, 269, 270, 271, 273, 274, 276, 278, 279], "compromis": 1, "easi": [1, 2, 6, 7, 26, 35, 46, 47, 54, 71, 93, 94, 101, 103, 105, 132, 133, 135, 137, 147, 154, 159, 163, 167, 171, 181, 185, 188, 189, 199, 215, 219, 234, 245, 259, 275], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 8, 174], "defin": [1, 2, 6, 13, 15, 16, 17, 18, 19, 21, 33, 38, 39, 40, 43, 45, 47, 55, 64, 67, 68, 70, 71, 72, 78, 88, 91, 93, 98, 100, 102, 104, 105, 110, 111, 113, 116, 120, 130, 131, 132, 136, 138, 140, 143, 147, 148, 149, 152, 155, 159, 162, 164, 165, 172, 173, 174, 176, 179, 181, 182, 185, 186, 188, 192, 196, 205, 212, 214, 215, 223, 226, 227, 233, 234, 235, 248, 249, 250, 256, 257, 264, 265, 267, 271, 273, 274, 275, 279, 280], "default": [1, 3, 4, 6, 7, 10, 11, 12, 16, 19, 22, 26, 33, 38, 42, 45, 47, 52, 54, 55, 58, 65, 66, 85, 96, 98, 100, 101, 105, 107, 112, 116, 119, 126, 130, 131, 132, 133, 134, 135, 138, 147, 148, 149, 151, 153, 156, 162, 165, 168, 170, 171, 173, 174, 175, 181, 182, 184, 186, 188, 189, 192, 193, 194, 196, 199, 208, 209, 210, 212, 214, 217, 220, 221, 226, 227, 233, 234, 241, 245, 248, 249, 250, 256, 258, 260, 263, 265, 268, 269, 270, 273, 275, 278, 279, 280], "here": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 26, 35, 38, 39, 42, 43, 46, 49, 51, 53, 54, 55, 56, 58, 72, 78, 84, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 118, 119, 120, 123, 126, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 169, 171, 172, 174, 175, 176, 177, 181, 182, 185, 186, 188, 189, 191, 192, 193, 200, 205, 207, 208, 209, 210, 212, 215, 224, 227, 228, 233, 234, 235, 244, 245, 246, 249, 250, 260, 265, 270, 272, 275, 278], "take": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 19, 22, 34, 35, 42, 45, 46, 49, 51, 52, 53, 54, 55, 71, 78, 85, 88, 93, 94, 96, 98, 100, 101, 102, 103, 105, 107, 108, 110, 111, 116, 119, 120, 126, 134, 135, 136, 137, 138, 139, 140, 142, 145, 147, 152, 154, 155, 162, 165, 170, 171, 172, 173, 174, 175, 177, 181, 182, 184, 186, 188, 189, 191, 192, 194, 198, 200, 205, 208, 210, 212, 215, 219, 226, 227, 233, 234, 235, 245, 246, 247, 250, 257, 259, 260, 261, 262, 263, 265, 270, 275, 278], "simplest": [1, 7, 33, 49, 93, 101, 105, 148, 171, 177, 260], "show": [1, 6, 11, 12, 17, 19, 21, 22, 26, 35, 46, 54, 55, 63, 78, 85, 86, 88, 91, 93, 94, 96, 98, 101, 102, 111, 116, 118, 131, 134, 137, 138, 139, 141, 142, 145, 148, 153, 154, 156, 165, 168, 170, 171, 172, 173, 175, 181, 182, 184, 186, 188, 189, 192, 193, 205, 215, 224, 225, 226, 227, 229, 234, 241, 244, 245, 250, 258, 259, 260, 265, 274, 275, 278, 279], "chang": [1, 2, 6, 7, 11, 12, 13, 15, 22, 26, 33, 42, 45, 51, 53, 54, 55, 56, 58, 85, 86, 88, 91, 93, 94, 96, 97, 102, 103, 104, 106, 107, 108, 113, 120, 130, 131, 134, 135, 137, 138, 140, 143, 144, 147, 148, 151, 153, 154, 155, 162, 163, 165, 168, 169, 173, 181, 184, 186, 188, 189, 192, 198, 199, 207, 209, 210, 212, 214, 220, 221, 224, 225, 226, 227, 232, 234, 235, 244, 245, 248, 256, 257, 258, 260, 261, 268, 273, 274, 275, 276, 278, 280], "instruct": [1, 7, 22, 26, 37, 94, 97, 100, 102, 138, 139, 148, 151, 167, 169, 171, 173, 175, 177, 220, 221, 233, 234, 241, 243, 260, 264, 278], "queri": [1, 15, 52, 96, 101, 120, 134, 174, 176, 191, 192, 194, 210], "correspond": [1, 2, 3, 4, 6, 7, 10, 11, 13, 15, 16, 34, 35, 39, 45, 52, 58, 85, 93, 94, 98, 100, 105, 108, 118, 120, 131, 136, 137, 140, 153, 162, 167, 169, 171, 174, 177, 179, 181, 182, 184, 186, 188, 189, 191, 192, 197, 208, 214, 227, 235, 243, 249, 250, 260, 264, 278], "make_value_estim": 1, "central": [1, 10, 78, 93, 101, 102, 108, 110, 143, 263], "quit": [1, 7, 19, 52, 78, 136, 147, 162, 171, 175, 188, 189, 205, 215, 226, 229, 232, 245, 259], "weight": [1, 2, 3, 6, 7, 13, 14, 15, 19, 22, 26, 33, 34, 45, 46, 52, 65, 66, 69, 71, 72, 73, 75, 76, 78, 93, 96, 98, 101, 102, 103, 105, 106, 108, 111, 120, 126, 130, 131, 138, 140, 141, 143, 148, 149, 153, 154, 156, 162, 163, 164, 169, 171, 172, 175, 177, 181, 184, 185, 189, 192, 193, 198, 209, 212, 215, 217, 226, 233, 235, 247, 257, 262, 263, 268, 275, 280], "when": [1, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 21, 33, 35, 38, 40, 42, 45, 46, 47, 49, 51, 52, 53, 55, 56, 58, 63, 78, 85, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 107, 110, 111, 112, 115, 116, 118, 119, 120, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 144, 145, 147, 148, 151, 152, 153, 155, 156, 159, 162, 163, 165, 168, 169, 171, 172, 173, 175, 176, 177, 181, 184, 186, 188, 189, 191, 192, 196, 198, 205, 208, 209, 210, 212, 214, 215, 217, 220, 221, 224, 225, 227, 228, 229, 233, 241, 244, 245, 247, 249, 250, 251, 257, 259, 260, 261, 263, 264, 269, 270, 272, 273, 275, 278, 279], "must": [1, 2, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 34, 35, 52, 55, 78, 88, 93, 94, 101, 104, 110, 115, 116, 120, 132, 145, 147, 148, 149, 151, 165, 171, 174, 181, 184, 186, 188, 189, 193, 196, 197, 205, 206, 208, 210, 217, 219, 225, 228, 249, 251, 257, 260, 272], "sure": [1, 6, 7, 10, 11, 12, 15, 22, 40, 54, 60, 91, 96, 100, 103, 104, 110, 116, 120, 131, 135, 140, 145, 147, 148, 152, 165, 171, 173, 184, 189, 206, 208, 219, 225, 234, 243, 244, 249, 258, 260, 269, 270, 272], "out": [1, 2, 4, 6, 7, 10, 11, 12, 15, 16, 17, 19, 26, 33, 37, 38, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 61, 62, 63, 78, 80, 81, 82, 83, 84, 86, 88, 91, 93, 94, 96, 98, 101, 103, 104, 106, 108, 111, 115, 118, 130, 131, 133, 134, 135, 136, 137, 138, 142, 143, 145, 147, 148, 149, 152, 153, 154, 162, 165, 168, 169, 170, 171, 173, 174, 175, 177, 181, 182, 184, 188, 189, 192, 194, 196, 202, 203, 205, 206, 207, 208, 210, 211, 212, 213, 215, 219, 220, 221, 222, 229, 234, 235, 237, 238, 239, 240, 242, 243, 248, 250, 251, 256, 257, 260, 264, 270, 273, 274, 275, 278, 280], "graph": [1, 6, 11, 15, 17, 49, 52, 65, 68, 71, 75, 76, 85, 88, 90, 93, 104, 106, 112, 115, 116, 119, 130, 136, 138, 142, 152, 153, 154, 156, 174, 175, 181, 182, 184, 185, 192, 193, 199, 200, 220, 221, 234, 235, 247, 258, 265, 269, 270, 274, 276], "otherwis": [1, 4, 10, 11, 22, 34, 39, 52, 58, 65, 78, 85, 88, 101, 111, 119, 120, 126, 131, 136, 142, 145, 148, 153, 154, 156, 162, 171, 172, 174, 186, 189, 215, 219, 220, 225, 259, 273, 278], "mix": [1, 10, 16, 63, 118, 156, 212, 234, 235, 248, 256, 264, 280], "For": [1, 2, 4, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 33, 38, 39, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 65, 66, 71, 78, 85, 86, 91, 94, 98, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 113, 119, 120, 123, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 147, 148, 149, 152, 153, 155, 156, 163, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 181, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 197, 198, 199, 205, 206, 207, 208, 210, 212, 214, 215, 217, 220, 221, 223, 224, 226, 227, 228, 229, 232, 233, 234, 235, 241, 243, 244, 245, 247, 249, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 276, 278, 279], "hold_out_param": 1, "now": [1, 2, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 21, 26, 38, 39, 45, 46, 47, 49, 52, 53, 54, 55, 58, 78, 88, 91, 92, 93, 94, 100, 101, 103, 105, 107, 110, 111, 113, 116, 119, 126, 130, 132, 135, 136, 137, 138, 140, 141, 142, 145, 147, 148, 152, 153, 154, 155, 159, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 175, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 194, 198, 200, 205, 206, 210, 212, 214, 215, 217, 219, 224, 226, 227, 246, 247, 257, 258, 259, 262, 270], "reli": [1, 3, 4, 7, 10, 15, 40, 52, 93, 110, 113, 136, 155, 162, 165, 169, 171, 188, 200, 207, 209, 221, 225, 260], "miss": [1, 54, 120, 140, 145, 148, 181, 186, 194, 206, 244, 259, 261, 278], "glue": [1, 175], "cost": [1, 6, 15, 52, 103, 105, 118, 131, 132, 135, 136, 140, 159, 181, 188, 226, 246, 260, 273, 274], "deliv": [1, 221, 234, 272], "most": [1, 2, 6, 12, 15, 19, 33, 37, 45, 52, 54, 55, 78, 91, 93, 94, 96, 98, 101, 105, 107, 108, 111, 118, 119, 120, 126, 129, 131, 135, 136, 137, 139, 141, 142, 147, 152, 153, 155, 156, 162, 165, 170, 171, 173, 174, 175, 176, 177, 181, 184, 186, 188, 189, 192, 207, 208, 209, 215, 226, 234, 235, 243, 250, 257, 259, 260, 265, 269, 273, 275, 278], "first": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 26, 37, 40, 43, 46, 47, 52, 53, 54, 55, 56, 58, 63, 71, 72, 78, 85, 86, 88, 91, 93, 96, 98, 101, 103, 105, 107, 108, 110, 111, 116, 118, 119, 120, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 147, 148, 149, 151, 152, 153, 154, 159, 162, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 177, 181, 184, 185, 186, 188, 189, 191, 192, 193, 194, 196, 198, 200, 205, 207, 208, 210, 215, 219, 225, 226, 227, 229, 233, 235, 244, 245, 247, 249, 250, 257, 260, 265, 270, 272, 273, 274, 275, 278], "taken": [1, 7, 10, 15, 22, 85, 86, 98, 148, 162, 171, 184, 188, 198, 212, 251, 274], "care": [1, 4, 6, 15, 78, 91, 93, 103, 142, 147, 165, 171, 175, 192, 205, 226, 245, 246, 259], "condit": [1, 15, 52, 58, 101, 108, 112, 131, 147, 163, 165, 186, 188, 214, 217], "remaind": [1, 96, 151], "cheetah": 1, "goal": [1, 7, 15, 16, 46, 52, 55, 63, 78, 88, 103, 136, 137, 147, 148, 152, 171, 173, 175, 196, 205, 235], "half": [1, 10, 19, 126, 167, 215, 244, 279], "fast": [1, 6, 7, 19, 21, 52, 93, 111, 131, 135, 145, 159, 165, 171, 176, 184, 189, 192, 196, 198, 213, 215, 259], "dm_control": 1, "gym": [1, 15, 130, 148, 155, 171, 172, 173, 175, 192], "env": [1, 21, 134, 144, 147, 148, 171, 172, 173, 175, 194, 196, 220, 245, 259, 275], "gymenv": [1, 171], "halfcheetah": 1, "v4": [1, 171], "dmcontrolenv": 1, "By": [1, 10, 19, 22, 33, 42, 45, 65, 66, 85, 91, 93, 101, 107, 110, 111, 112, 119, 132, 135, 137, 147, 149, 151, 152, 153, 162, 169, 172, 181, 185, 188, 196, 199, 206, 208, 210, 215, 220, 226, 227, 232, 241, 247, 250, 260, 265, 269, 270, 272, 275, 278], "disabl": [1, 12, 16, 131, 132, 140, 155, 159, 170, 174, 176, 181, 186, 198, 205, 206, 207, 208, 214, 220, 227, 244, 269, 278], "render": [1, 7, 85, 94, 100, 155, 165, 171], "easier": [1, 19, 21, 26, 53, 54, 104, 111, 131, 137, 153, 162, 173, 177, 182, 198, 205, 208, 215, 219, 227, 245, 259, 272], "than": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 19, 22, 46, 51, 52, 53, 55, 56, 63, 70, 72, 78, 85, 88, 93, 96, 98, 101, 103, 104, 105, 107, 110, 111, 113, 119, 120, 126, 130, 131, 132, 134, 137, 139, 141, 144, 145, 147, 149, 153, 154, 155, 159, 162, 163, 164, 165, 170, 171, 172, 173, 181, 182, 184, 185, 186, 189, 191, 192, 196, 198, 205, 210, 215, 220, 221, 245, 249, 260, 261, 264, 269, 275, 278], "imag": [1, 22, 34, 35, 37, 43, 45, 49, 52, 54, 55, 60, 78, 85, 91, 94, 96, 98, 101, 102, 103, 111, 130, 135, 140, 149, 155, 156, 162, 164, 172, 179, 181, 182, 189, 191, 210, 212, 220, 221, 229, 243, 247, 258, 261, 262, 264], "focu": [1, 4, 7, 11, 21, 94, 103, 105, 132, 135, 136, 171, 173, 175, 177, 188, 198, 206, 235], "pass": [1, 2, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 22, 33, 34, 35, 38, 39, 40, 45, 46, 52, 54, 55, 56, 59, 65, 66, 68, 75, 76, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 111, 112, 119, 120, 130, 131, 132, 135, 136, 137, 138, 141, 142, 143, 145, 147, 148, 149, 151, 152, 155, 156, 159, 163, 164, 167, 169, 171, 172, 173, 174, 175, 177, 178, 181, 184, 186, 188, 189, 192, 193, 194, 198, 205, 208, 210, 217, 224, 225, 227, 228, 232, 233, 244, 245, 249, 250, 251, 257, 260, 263, 279, 280], "pixel": [1, 34, 43, 46, 78, 98, 101, 103, 148, 156, 179, 184, 275], "from_pixel": 1, "true": [1, 2, 4, 6, 7, 11, 12, 13, 16, 17, 22, 26, 33, 35, 38, 40, 45, 49, 52, 54, 65, 66, 85, 91, 93, 96, 100, 101, 107, 111, 112, 113, 115, 118, 119, 120, 126, 131, 132, 133, 134, 135, 137, 140, 141, 142, 145, 147, 148, 151, 153, 154, 156, 163, 170, 171, 173, 174, 175, 176, 181, 182, 184, 186, 188, 191, 192, 193, 194, 196, 199, 206, 207, 208, 209, 210, 212, 214, 215, 220, 225, 226, 227, 234, 235, 250, 251, 257, 263, 265, 268, 272, 276, 278, 279], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 10, 18, 19, 49, 54, 58, 94, 100, 102, 103, 104, 112, 131, 132, 137, 138, 139, 147, 148, 172, 173, 174, 175, 177, 179, 182, 184, 191, 215, 223, 224, 250, 275], "either": [1, 2, 4, 6, 7, 10, 17, 22, 46, 52, 76, 91, 102, 103, 111, 113, 120, 126, 132, 135, 145, 148, 156, 169, 172, 173, 174, 181, 186, 188, 192, 208, 210, 214, 215, 234, 235, 241, 244, 250, 257, 260, 272], "backend": [1, 6, 7, 12, 15, 21, 26, 56, 58, 129, 130, 137, 140, 144, 145, 148, 156, 170, 171, 178, 181, 186, 188, 189, 194, 200, 209, 213, 214, 221, 225, 233, 241, 244, 264, 271, 275, 280], "consid": [1, 4, 7, 11, 12, 15, 33, 40, 52, 71, 78, 85, 119, 131, 133, 142, 145, 147, 156, 159, 162, 163, 165, 168, 173, 177, 181, 186, 188, 189, 191, 196, 205, 206, 207, 209, 219, 226, 249, 250, 251, 270], "abov": [1, 3, 4, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 45, 46, 52, 54, 55, 68, 70, 71, 78, 85, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 119, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 151, 153, 154, 155, 156, 159, 162, 163, 164, 165, 167, 169, 171, 173, 174, 175, 176, 181, 184, 186, 188, 189, 191, 193, 194, 196, 198, 200, 205, 206, 207, 208, 209, 214, 226, 227, 228, 229, 233, 234, 235, 241, 243, 245, 249, 250, 257, 258, 269, 275, 278], "dm": 1, "want": [1, 2, 4, 6, 7, 8, 10, 11, 13, 15, 16, 18, 22, 26, 33, 34, 35, 38, 40, 45, 46, 49, 52, 54, 55, 63, 65, 66, 70, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 119, 120, 126, 134, 135, 136, 137, 147, 148, 149, 151, 152, 154, 156, 159, 163, 165, 167, 169, 170, 171, 174, 176, 177, 179, 184, 185, 186, 188, 189, 191, 192, 205, 207, 212, 213, 219, 227, 228, 235, 241, 244, 245, 249, 257, 259, 261, 272, 274], "modifi": [1, 3, 7, 11, 12, 15, 22, 39, 43, 45, 46, 55, 78, 103, 104, 135, 138, 147, 152, 153, 168, 171, 173, 177, 188, 192, 193, 194, 257, 273, 275], "represent": [1, 11, 15, 45, 55, 88, 94, 98, 100, 103, 105, 108, 110, 112, 113, 115, 130, 137, 152, 155, 177, 181, 182, 185, 188, 189, 192, 210, 213, 245, 257, 259, 274], "more": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 15, 16, 17, 19, 22, 35, 37, 38, 39, 42, 45, 46, 47, 51, 52, 53, 54, 55, 56, 58, 59, 63, 70, 78, 88, 94, 96, 98, 100, 102, 103, 104, 105, 107, 108, 110, 111, 113, 115, 118, 119, 120, 126, 129, 130, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 151, 152, 155, 159, 162, 163, 165, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 182, 184, 185, 186, 188, 189, 191, 192, 193, 196, 198, 205, 206, 207, 208, 210, 212, 213, 215, 219, 220, 221, 225, 227, 228, 229, 233, 234, 235, 241, 243, 249, 257, 259, 260, 265, 270, 272, 273, 274, 275, 276, 278, 279, 280], "friendli": [1, 16, 244], "append": [1, 10, 15, 18, 21, 22, 52, 101, 118, 120, 132, 147, 169, 171, 173, 174, 175, 177, 182, 215, 276, 278], "special": [1, 11, 21, 42, 51, 96, 98, 105, 107, 110, 111, 116, 136, 148, 156, 168, 169, 181, 184, 210, 212, 217, 227, 257, 260, 275], "torchr": 1, "transformedenv": [1, 15, 171], "common": [1, 7, 10, 11, 15, 17, 19, 22, 38, 39, 46, 52, 54, 63, 85, 96, 101, 103, 105, 107, 110, 112, 120, 126, 130, 135, 145, 152, 154, 155, 163, 165, 169, 170, 171, 176, 184, 188, 189, 191, 207, 210, 215, 235, 245, 246, 259, 260, 261, 264, 265, 271], "rescal": [1, 54, 191, 198], "heurist": [1, 85, 196, 233, 272], "multipli": [1, 4, 6, 13, 22, 51, 52, 93, 94, 96, 101, 111, 177, 185, 259, 271], "5": [1, 2, 3, 6, 7, 12, 19, 35, 37, 47, 49, 50, 52, 55, 68, 85, 88, 91, 96, 98, 100, 102, 105, 108, 109, 110, 111, 115, 118, 119, 120, 131, 132, 141, 145, 147, 153, 156, 170, 173, 174, 175, 184, 188, 189, 191, 192, 196, 200, 210, 214, 215, 217, 219, 221, 223, 229, 233, 234, 235, 241, 251, 265, 268, 276], "interfac": [1, 4, 6, 7, 15, 16, 52, 101, 111, 137, 144, 147, 171, 184, 189, 199, 234, 241, 275], "between": [1, 6, 7, 10, 12, 13, 15, 18, 19, 22, 34, 42, 49, 51, 52, 68, 76, 78, 85, 86, 88, 91, 93, 96, 98, 101, 103, 104, 105, 108, 110, 111, 119, 130, 131, 133, 135, 137, 147, 148, 152, 156, 159, 165, 167, 169, 172, 174, 175, 176, 177, 182, 184, 186, 188, 189, 191, 192, 194, 196, 197, 198, 199, 205, 206, 208, 212, 213, 215, 226, 228, 244, 245, 246, 250, 260, 265, 275, 276, 279], "simul": [1, 19, 21, 22, 98, 140, 171, 215, 229], "work": [1, 2, 4, 6, 7, 8, 13, 15, 17, 19, 21, 37, 38, 45, 52, 53, 54, 55, 58, 59, 63, 78, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 106, 110, 111, 112, 115, 130, 136, 138, 139, 141, 142, 143, 145, 147, 148, 149, 151, 152, 154, 162, 163, 164, 165, 168, 169, 170, 171, 173, 175, 176, 177, 181, 184, 185, 188, 189, 191, 192, 196, 198, 205, 206, 207, 208, 210, 215, 217, 219, 220, 221, 226, 229, 233, 234, 244, 245, 250, 257, 259, 260, 265, 268, 269, 272, 275], "doubl": [1, 2, 4, 6, 7, 38, 93, 100, 111, 118, 130, 141, 148, 155, 164, 171, 182, 233, 244], "precis": [1, 10, 11, 16, 63, 136, 141, 142, 156, 165, 171, 182, 212, 233, 234, 235, 248, 256, 264, 265, 280], "number": [1, 4, 6, 7, 12, 13, 16, 21, 22, 35, 38, 43, 46, 54, 55, 56, 58, 68, 85, 88, 91, 93, 96, 98, 103, 105, 107, 110, 111, 118, 119, 120, 131, 132, 134, 135, 136, 137, 138, 144, 145, 147, 148, 149, 151, 153, 154, 159, 163, 165, 167, 169, 170, 171, 172, 173, 174, 175, 181, 184, 186, 189, 191, 196, 198, 208, 209, 210, 219, 220, 223, 227, 233, 245, 247, 250, 259, 260, 270, 276, 278], "presum": 1, "singl": [1, 2, 4, 6, 7, 10, 11, 12, 16, 19, 21, 39, 42, 45, 49, 54, 56, 57, 58, 59, 63, 88, 91, 93, 94, 98, 100, 101, 102, 103, 105, 111, 130, 131, 132, 133, 135, 138, 140, 141, 142, 143, 144, 145, 147, 148, 154, 155, 159, 164, 165, 167, 171, 172, 173, 174, 175, 177, 181, 184, 186, 188, 189, 192, 193, 194, 196, 198, 210, 215, 219, 227, 233, 245, 259, 260, 275, 278], "ones": [1, 2, 4, 7, 12, 15, 17, 22, 98, 101, 103, 147, 149, 152, 163, 164, 165, 167, 168, 171, 172, 181, 188, 192, 193, 206, 217, 234, 259, 275, 276], "goe": [1, 6, 54, 101, 104, 105, 130, 134, 142, 154, 168, 171, 174, 189], "wai": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 33, 37, 39, 42, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 70, 75, 78, 85, 91, 93, 94, 96, 97, 101, 104, 105, 107, 110, 111, 113, 115, 116, 120, 129, 131, 135, 136, 137, 138, 142, 144, 145, 151, 152, 153, 154, 155, 156, 159, 162, 163, 167, 169, 171, 173, 174, 176, 179, 182, 185, 188, 189, 191, 192, 193, 194, 198, 206, 207, 208, 210, 213, 217, 227, 243, 246, 250, 251, 257, 260, 272], "repres": [1, 4, 6, 11, 13, 14, 21, 34, 45, 52, 54, 55, 63, 65, 78, 85, 88, 93, 94, 96, 98, 102, 103, 110, 112, 113, 115, 118, 119, 131, 132, 133, 135, 137, 138, 140, 148, 151, 152, 155, 156, 171, 172, 175, 177, 184, 188, 189, 191, 192, 196, 205, 210, 245, 247, 257, 259], "doubletofloat": [1, 171], "in_kei": [1, 15, 148, 171], "list": [1, 4, 6, 7, 10, 12, 13, 15, 16, 18, 22, 26, 35, 39, 42, 46, 49, 51, 52, 53, 55, 71, 78, 91, 94, 98, 101, 107, 108, 110, 112, 113, 115, 116, 119, 136, 139, 147, 156, 163, 165, 170, 171, 173, 174, 175, 177, 181, 182, 184, 186, 188, 189, 199, 207, 210, 212, 215, 220, 225, 229, 232, 243, 245, 249, 250, 264, 269, 275, 278], "refer": [1, 4, 6, 7, 8, 10, 14, 16, 19, 26, 33, 39, 63, 78, 85, 88, 93, 94, 101, 103, 105, 107, 108, 110, 112, 113, 115, 116, 118, 120, 131, 132, 133, 135, 136, 139, 140, 144, 145, 147, 153, 162, 165, 169, 171, 173, 174, 175, 181, 184, 188, 189, 191, 192, 196, 200, 205, 208, 212, 214, 215, 233, 235, 243, 244, 245, 247, 249, 250, 257, 260, 270, 272, 275, 278], "float": [1, 4, 6, 7, 10, 12, 22, 96, 101, 107, 110, 111, 118, 131, 132, 135, 137, 147, 156, 168, 169, 173, 175, 188, 189, 191, 193, 196, 198, 199, 207, 208, 209, 210, 220, 233, 235, 244, 250, 257], "while": [1, 2, 3, 6, 7, 12, 13, 14, 15, 19, 22, 35, 38, 52, 55, 58, 85, 94, 101, 112, 113, 118, 129, 130, 132, 133, 134, 136, 137, 140, 143, 145, 147, 148, 153, 154, 156, 162, 165, 169, 170, 171, 174, 175, 176, 177, 179, 186, 188, 189, 192, 193, 196, 198, 205, 206, 207, 208, 209, 210, 212, 215, 226, 244, 245, 249, 250, 257, 265, 269, 272, 275], "in_keys_inv": [1, 15], "befor": [1, 3, 4, 6, 7, 10, 11, 12, 13, 15, 18, 22, 33, 38, 40, 45, 46, 47, 49, 52, 54, 55, 58, 63, 78, 88, 93, 94, 98, 103, 104, 105, 107, 108, 110, 111, 113, 115, 116, 118, 119, 120, 126, 130, 132, 133, 135, 137, 138, 140, 145, 147, 148, 151, 153, 155, 160, 162, 163, 165, 167, 169, 170, 171, 173, 174, 175, 177, 181, 182, 185, 186, 188, 189, 191, 193, 196, 205, 206, 208, 214, 226, 229, 244, 245, 247, 249, 258, 260, 261, 262, 263, 265, 269, 270, 272, 273, 276, 278, 279], "concaten": [1, 15, 42, 51, 52, 107, 108, 135, 139, 172], "cattensor": 1, "leav": [1, 10, 17, 19, 33, 45, 52, 54, 56, 88, 93, 137, 162, 163, 170, 215, 233, 257], "constant": [1, 2, 7, 42, 51, 85, 91, 93, 101, 105, 134, 148, 163, 171, 172, 182, 186, 188, 209, 215, 260, 276], "significantli": [1, 22, 108, 129, 135, 141, 165, 186, 198, 212, 251, 270, 278], "speed": [1, 6, 7, 11, 15, 22, 33, 35, 38, 51, 52, 88, 93, 96, 97, 103, 111, 129, 130, 132, 133, 135, 138, 143, 148, 149, 153, 156, 165, 170, 171, 173, 176, 186, 192, 198, 199, 212, 213, 221, 225, 226, 245, 258, 260, 264, 274, 275, 278], "throughput": [1, 132, 165, 260, 278], "choos": [1, 10, 11, 13, 16, 52, 55, 58, 63, 68, 91, 94, 105, 119, 120, 134, 135, 139, 145, 147, 155, 163, 170, 171, 172, 177, 181, 184, 189, 191, 194, 198, 200, 225, 241, 244, 250, 265], "whether": [1, 7, 10, 11, 12, 15, 52, 55, 93, 94, 96, 100, 101, 103, 111, 113, 120, 142, 147, 152, 155, 162, 165, 171, 173, 181, 182, 184, 188, 193, 208, 245, 250, 260, 261], "individu": [1, 6, 7, 13, 34, 52, 88, 93, 94, 98, 119, 133, 135, 137, 141, 164, 165, 169, 174, 177, 182, 186, 188, 189, 192, 193, 241, 244, 245, 260, 270], "approach": [1, 4, 6, 7, 8, 40, 59, 94, 111, 113, 115, 120, 134, 138, 143, 163, 164, 165, 171, 172, 174, 177, 186, 188, 191, 196, 205, 208, 209, 212, 219, 235, 245, 257, 264, 265], "parallelenv": [1, 171], "num_work": [1, 46, 54, 91, 100, 131, 132, 181, 182, 260], "4": [1, 2, 3, 4, 6, 7, 10, 13, 17, 18, 20, 26, 35, 37, 47, 54, 56, 57, 58, 65, 66, 68, 73, 78, 91, 94, 96, 98, 100, 101, 102, 104, 105, 107, 110, 111, 117, 119, 130, 131, 132, 134, 140, 141, 143, 144, 147, 148, 153, 155, 156, 162, 167, 169, 171, 172, 173, 174, 175, 184, 186, 188, 191, 192, 194, 196, 198, 200, 208, 210, 213, 221, 226, 229, 233, 258, 265, 269, 270, 275, 276, 278, 280], "leverag": [1, 7, 52, 78, 103, 113, 116, 120, 130, 132, 135, 145, 147, 154, 191, 199, 209, 213, 214, 228, 229, 232, 260, 261, 264, 274, 278], "vector": [1, 2, 6, 7, 13, 15, 33, 52, 55, 85, 93, 94, 98, 100, 101, 103, 105, 107, 108, 110, 111, 138, 139, 140, 148, 151, 164, 168, 177, 189, 199, 209, 219, 221, 233, 234, 260, 272], "capabl": [1, 3, 12, 16, 19, 52, 78, 135, 156, 165, 176, 181, 185, 215, 221, 223, 224, 232, 244, 260], "pytorch": [1, 2, 4, 5, 10, 12, 15, 17, 19, 20, 21, 25, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 47, 51, 52, 54, 55, 56, 58, 59, 61, 62, 64, 67, 69, 73, 74, 77, 78, 79, 80, 81, 82, 83, 86, 87, 88, 91, 93, 94, 103, 104, 109, 111, 112, 114, 115, 120, 121, 123, 126, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 159, 160, 162, 164, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 187, 188, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 218, 219, 223, 224, 225, 226, 227, 228, 229, 232, 237, 239, 240, 243, 244, 245, 246, 249, 252, 253, 254, 255, 256, 257, 259, 265, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280], "adopt": [1, 26, 63, 162, 168, 174, 214, 235], "frame_skip": [1, 171], "frame": [1, 7, 148, 155, 170, 171, 181, 196, 275, 276], "count": [1, 7, 12, 22, 38, 46, 52, 85, 105, 147, 148, 171, 175, 177, 181, 184, 228], "frames_per_batch": [1, 171], "total_fram": [1, 171], "adjust": [1, 15, 22, 33, 38, 39, 45, 55, 78, 93, 96, 102, 135, 137, 138, 159, 173, 260], "total": [1, 6, 12, 13, 14, 15, 17, 18, 19, 20, 33, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 49, 50, 51, 52, 54, 55, 56, 58, 67, 71, 73, 75, 76, 77, 78, 86, 88, 89, 91, 93, 96, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 121, 123, 126, 132, 134, 136, 137, 138, 139, 141, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 169, 170, 171, 172, 174, 176, 177, 178, 179, 181, 184, 186, 188, 189, 191, 192, 198, 205, 206, 207, 208, 210, 216, 224, 225, 232, 233, 235, 245, 246, 249, 250, 251, 256, 257, 259, 265, 267, 271, 272, 273, 274, 276, 278, 280], "rais": [1, 10, 12, 17, 22, 78, 112, 134, 135, 136, 153, 156, 170, 171, 186, 188, 226, 260, 273, 275], "skip": [1, 6, 11, 15, 19, 22, 45, 104, 120, 142, 151, 155, 173, 175, 181, 186, 188, 192, 213, 214, 215, 225, 245, 250, 263, 276, 278], "unchang": [1, 10, 86, 93], "seem": [1, 46, 55, 136, 138, 148, 165, 167, 189, 245], "like": [1, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 21, 34, 35, 38, 39, 42, 45, 46, 47, 49, 51, 52, 54, 55, 56, 58, 63, 71, 85, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 118, 119, 123, 126, 129, 130, 131, 135, 136, 137, 139, 142, 144, 145, 147, 148, 149, 151, 152, 153, 154, 156, 159, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 176, 177, 181, 182, 184, 185, 188, 189, 191, 192, 193, 199, 206, 207, 208, 212, 213, 214, 215, 219, 220, 221, 227, 228, 229, 233, 234, 235, 241, 243, 244, 245, 246, 247, 250, 259, 260, 269, 270, 271, 272, 273, 275, 278], "cheat": [1, 101, 130, 177], "compar": [1, 6, 11, 16, 19, 22, 38, 46, 86, 94, 101, 103, 108, 111, 116, 126, 131, 133, 134, 135, 137, 147, 152, 153, 154, 156, 159, 162, 164, 165, 169, 171, 172, 173, 175, 177, 181, 184, 186, 188, 192, 194, 197, 198, 199, 205, 213, 215, 221, 225, 226, 232, 233, 234, 249, 258, 259, 260, 264, 273, 274, 278], "dataset": [1, 7, 19, 26, 33, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 49, 52, 55, 56, 58, 60, 78, 94, 98, 103, 105, 121, 126, 129, 130, 131, 132, 137, 138, 139, 143, 147, 149, 164, 165, 170, 174, 176, 177, 179, 181, 182, 184, 189, 212, 215, 234, 235, 236, 247, 260, 264, 268, 275, 280], "10m": 1, "element": [1, 6, 7, 13, 19, 22, 39, 42, 51, 52, 93, 94, 98, 101, 105, 107, 108, 110, 130, 136, 147, 153, 159, 163, 171, 184, 188, 191, 206, 207, 208, 210, 215, 245, 247, 260], "2": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 20, 21, 26, 34, 35, 37, 45, 49, 52, 54, 55, 56, 58, 65, 66, 67, 71, 72, 75, 77, 78, 91, 93, 94, 96, 100, 101, 103, 104, 105, 107, 110, 111, 112, 115, 116, 119, 120, 123, 126, 130, 131, 132, 133, 135, 137, 140, 141, 142, 143, 144, 145, 147, 148, 149, 153, 154, 156, 160, 162, 164, 169, 170, 171, 172, 173, 174, 175, 176, 184, 186, 188, 189, 192, 194, 196, 197, 198, 199, 200, 205, 210, 213, 214, 217, 220, 221, 223, 224, 225, 228, 229, 233, 234, 235, 244, 246, 249, 251, 257, 260, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280], "anoth": [1, 4, 6, 10, 12, 15, 33, 42, 45, 51, 52, 55, 65, 78, 88, 96, 98, 101, 102, 104, 108, 111, 118, 119, 120, 130, 139, 140, 141, 142, 144, 147, 148, 151, 163, 165, 169, 171, 173, 174, 175, 176, 177, 185, 186, 188, 189, 191, 193, 198, 220, 243, 245, 250, 260, 261, 278], "actual": [1, 3, 6, 7, 10, 12, 14, 15, 16, 22, 33, 40, 52, 54, 55, 78, 88, 96, 103, 104, 107, 110, 116, 130, 133, 136, 137, 138, 141, 145, 147, 152, 162, 165, 171, 177, 181, 182, 186, 188, 189, 197, 198, 205, 207, 219, 245, 271], "ratio": [1, 85, 103, 153, 165, 171, 181, 191], "interact": [1, 6, 7, 15, 52, 94, 100, 101, 137, 140, 142, 155, 171, 174, 182, 186, 188, 189, 228, 272], "nutshel": [1, 207], "cautiou": 1, "about": [1, 4, 6, 7, 10, 11, 15, 16, 19, 22, 37, 38, 39, 42, 45, 52, 55, 56, 57, 58, 60, 75, 76, 78, 91, 93, 96, 98, 100, 101, 103, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 126, 129, 130, 132, 134, 137, 138, 139, 142, 144, 145, 147, 149, 152, 153, 154, 162, 164, 165, 170, 171, 172, 173, 175, 176, 177, 179, 181, 184, 186, 188, 189, 191, 192, 196, 197, 198, 206, 207, 208, 213, 214, 215, 226, 228, 229, 248, 249, 256, 257, 259, 262, 264, 270, 274, 275, 280], "deal": [1, 6, 46, 52, 54, 55, 96, 103, 111, 119, 120, 132, 154, 165, 171, 188, 189, 228, 235, 262], "lead": [1, 4, 6, 7, 15, 17, 52, 55, 78, 85, 91, 103, 111, 138, 140, 142, 148, 165, 188, 207, 219, 226, 257, 260, 265, 278], "bias": [1, 34, 45, 98, 103, 120, 176, 192, 257, 262, 263], "comparison": [1, 19, 86, 94, 101, 102, 103, 104, 131, 153, 154, 194, 198, 205, 207, 210, 212, 215, 259], "scale": [1, 7, 22, 34, 43, 54, 59, 78, 98, 100, 103, 113, 129, 130, 131, 132, 134, 145, 147, 148, 155, 167, 171, 172, 178, 179, 189, 193, 194, 198, 228, 229, 235, 244, 260, 265, 272, 280], "help": [1, 4, 6, 10, 11, 16, 19, 21, 22, 33, 34, 45, 52, 55, 71, 85, 91, 94, 103, 104, 107, 108, 110, 111, 120, 129, 130, 131, 132, 137, 144, 145, 148, 149, 153, 154, 159, 162, 168, 171, 172, 173, 174, 175, 176, 177, 184, 186, 188, 189, 196, 198, 206, 207, 208, 210, 212, 214, 215, 219, 223, 225, 226, 227, 229, 235, 241, 243, 244, 245, 247, 258, 260, 261, 264, 270, 272, 273, 276, 278], "signal": [1, 45, 94, 96, 171, 173, 250, 259], "magnitud": [1, 19, 93, 169, 189, 215, 244], "truncat": [1, 101, 118, 153, 171, 215], "A": [1, 6, 7, 10, 12, 13, 15, 19, 33, 34, 35, 39, 42, 49, 50, 51, 52, 54, 55, 56, 58, 65, 66, 70, 71, 72, 75, 76, 78, 85, 86, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 112, 119, 120, 129, 130, 132, 136, 137, 138, 139, 142, 143, 147, 149, 152, 156, 162, 163, 164, 171, 172, 173, 174, 176, 177, 178, 179, 182, 184, 186, 188, 189, 192, 196, 197, 209, 210, 214, 215, 227, 233, 234, 245, 249, 257, 260, 262, 270, 272, 275, 278, 280], "thousand": [1, 110, 129, 135, 138, 148, 177, 184], "500": [1, 7, 26, 154, 156, 167, 172, 175, 245], "good": [1, 2, 6, 7, 46, 53, 55, 96, 100, 101, 103, 110, 113, 130, 131, 137, 147, 148, 153, 159, 170, 171, 172, 176, 178, 182, 184, 188, 189, 191, 192, 209, 241, 245, 260, 265, 278, 280], "statist": [1, 55, 96, 130, 141, 152, 169, 171, 177, 181, 182, 184, 235, 245], "arbitrari": [1, 6, 10, 15, 17, 33, 76, 94, 103, 108, 132, 149, 155, 164, 182, 186, 192, 250, 251], "random": [1, 7, 15, 18, 22, 42, 45, 46, 47, 49, 51, 54, 55, 65, 66, 68, 75, 76, 78, 94, 96, 100, 107, 108, 111, 112, 113, 118, 119, 126, 131, 132, 137, 139, 140, 145, 147, 149, 155, 159, 162, 163, 169, 171, 172, 173, 175, 177, 182, 186, 210, 225, 245, 247, 251, 260, 276], "standard": [1, 6, 10, 42, 46, 51, 55, 85, 91, 94, 96, 103, 104, 105, 111, 113, 115, 116, 147, 170, 179, 186, 188, 189, 191, 198, 210, 247, 260], "deviat": [1, 85, 96, 103], "observationnorm": [1, 171], "init_stat": [1, 171], "purpos": [1, 6, 60, 78, 88, 93, 98, 102, 119, 131, 136, 137, 139, 147, 148, 152, 153, 162, 167, 170, 171, 174, 175, 181, 185, 186, 189, 196, 198, 206, 209, 227, 235, 257, 260, 265, 269], "get": [1, 2, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 22, 26, 35, 37, 45, 46, 47, 52, 53, 54, 55, 58, 59, 63, 78, 86, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 118, 119, 120, 126, 129, 130, 132, 134, 135, 137, 138, 139, 140, 147, 149, 152, 154, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 174, 177, 181, 182, 184, 185, 188, 189, 191, 196, 197, 198, 200, 205, 212, 214, 215, 216, 220, 221, 225, 226, 233, 241, 245, 250, 260, 263, 264, 265, 275, 278, 279, 280], "summari": [1, 85, 110, 137, 148, 165, 171, 181, 188, 258, 259], "dummi": [1, 4, 10, 17, 49, 88, 96, 102, 145, 149, 154, 164, 167, 168, 189, 212, 227, 235, 275], "over": [1, 4, 6, 7, 11, 12, 15, 17, 19, 21, 22, 34, 35, 38, 39, 42, 46, 49, 51, 52, 53, 54, 55, 56, 58, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 111, 118, 119, 130, 131, 132, 133, 134, 135, 138, 140, 144, 145, 147, 149, 152, 153, 154, 155, 156, 159, 164, 169, 171, 172, 173, 174, 175, 176, 177, 181, 182, 184, 186, 188, 189, 191, 192, 194, 198, 209, 215, 219, 233, 244, 260, 263, 273, 274], "earlier": [1, 6, 7, 78, 96, 98, 101, 104, 105, 108, 111, 131, 133, 135, 148, 162, 165, 171, 177, 188, 244, 245], "turn": [1, 6, 7, 10, 15, 16, 22, 43, 52, 94, 98, 100, 101, 118, 139, 148, 154, 162, 163, 165, 169, 173, 177, 189, 199, 206, 207, 209], "seen": [1, 11, 12, 21, 22, 46, 49, 52, 54, 98, 101, 103, 108, 110, 111, 118, 148, 164, 174, 186, 188, 189, 209, 245, 272], "requir": [1, 2, 4, 6, 7, 10, 11, 13, 15, 16, 17, 21, 22, 26, 37, 43, 45, 52, 53, 54, 55, 58, 63, 86, 88, 91, 93, 97, 102, 110, 111, 115, 116, 131, 135, 137, 139, 141, 142, 144, 145, 147, 148, 149, 151, 154, 159, 162, 163, 164, 165, 167, 170, 171, 173, 174, 175, 176, 177, 184, 185, 186, 188, 189, 191, 192, 196, 197, 198, 199, 200, 206, 207, 208, 212, 217, 219, 221, 223, 224, 226, 227, 229, 233, 234, 235, 244, 246, 247, 249, 250, 257, 259, 260, 265, 269, 270, 271, 272, 273, 276], "select": [1, 4, 6, 11, 53, 85, 91, 100, 103, 111, 113, 156, 169, 172, 173, 175, 181, 182, 186, 188, 196, 200, 207, 209, 213, 215, 220, 233, 250, 260, 270, 272], "recal": [1, 7, 55, 93, 101, 104, 110, 145, 171, 182, 206, 207, 208, 257, 259], "wrap": [1, 4, 6, 7, 11, 18, 35, 39, 47, 91, 96, 105, 107, 108, 113, 118, 131, 133, 136, 141, 145, 148, 155, 165, 171, 174, 175, 184, 185, 188, 189, 197, 223, 224, 227, 228, 241, 244, 250, 279], "flow": [1, 6, 15, 33, 45, 55, 69, 73, 88, 100, 103, 113, 114, 115, 116, 130, 133, 171, 172, 181, 186, 197, 212, 260, 264, 280], "handl": [1, 6, 10, 11, 17, 52, 55, 56, 88, 98, 101, 111, 112, 116, 130, 131, 138, 149, 160, 164, 165, 167, 169, 170, 171, 174, 175, 176, 184, 185, 186, 188, 189, 205, 207, 210, 219, 221, 226, 227, 234, 243, 249, 250, 259, 275, 278], "specifi": [1, 4, 6, 7, 10, 12, 17, 19, 22, 26, 35, 39, 54, 55, 85, 91, 93, 94, 96, 98, 101, 102, 107, 112, 119, 131, 132, 133, 134, 135, 137, 138, 142, 148, 149, 151, 168, 169, 171, 174, 175, 181, 184, 188, 193, 194, 205, 206, 207, 208, 210, 212, 213, 215, 219, 220, 225, 235, 249, 250, 258, 260, 261, 269, 272, 274, 275, 278], "scenario": [1, 7, 15, 112, 113, 115, 116, 120, 126, 136, 165, 172, 175, 188, 196, 209, 233, 257, 261, 278], "tensordictsequenti": [1, 148], "valueoper": [1, 171], "automat": [1, 2, 4, 6, 7, 10, 11, 16, 34, 36, 37, 39, 42, 45, 47, 48, 49, 51, 56, 60, 63, 100, 102, 104, 111, 119, 123, 130, 131, 132, 133, 135, 136, 137, 142, 153, 156, 165, 167, 171, 172, 175, 178, 179, 181, 184, 185, 188, 189, 194, 196, 214, 221, 225, 226, 227, 233, 234, 235, 241, 246, 248, 249, 250, 256, 259, 260, 264, 272, 280], "out_kei": [1, 15, 148, 171], "state_action_valu": 1, "state_valu": [1, 171], "built": [1, 4, 6, 7, 8, 10, 20, 33, 49, 93, 94, 96, 98, 105, 130, 138, 147, 148, 171, 176, 182, 186, 188, 191, 235, 243, 245, 247, 263, 270, 280], "present": [1, 7, 10, 21, 38, 85, 86, 103, 112, 163, 168, 169, 172, 173, 175, 184, 186, 188, 191, 210, 260, 279], "origin": [1, 6, 7, 10, 13, 15, 19, 22, 33, 52, 55, 78, 91, 94, 101, 103, 108, 112, 113, 133, 135, 136, 138, 139, 159, 160, 163, 164, 165, 169, 172, 184, 185, 186, 188, 193, 198, 199, 208, 212, 215, 234, 235, 241, 275, 276], "paper": [1, 6, 13, 18, 19, 55, 78, 123, 132, 135, 171, 172, 174, 176, 177, 179, 189, 192, 210, 215], "found": [1, 4, 6, 7, 11, 18, 52, 53, 94, 103, 133, 137, 145, 147, 148, 152, 156, 165, 174, 175, 176, 184, 188, 210, 220, 234, 241, 260, 275], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 6, 10, 11, 12, 14, 15, 18, 22, 46, 52, 54, 55, 56, 78, 88, 93, 94, 96, 103, 104, 105, 107, 108, 110, 111, 126, 133, 134, 135, 137, 138, 139, 140, 142, 143, 147, 148, 152, 162, 163, 165, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 184, 186, 188, 189, 191, 192, 193, 198, 205, 206, 207, 221, 223, 225, 226, 227, 241, 245, 249, 250, 251, 263, 265, 273, 275, 279], "lazi": 1, "materi": [1, 131, 135, 154, 189, 192, 197, 205, 217, 251, 257], "abl": [1, 3, 4, 6, 7, 15, 16, 19, 33, 34, 52, 65, 78, 88, 96, 103, 104, 106, 110, 111, 119, 126, 137, 141, 142, 143, 144, 147, 148, 149, 153, 155, 156, 162, 164, 171, 174, 182, 186, 188, 189, 191, 192, 196, 207, 215, 221, 232, 247, 257, 263, 272, 275], "devic": [1, 3, 4, 7, 10, 11, 12, 15, 17, 18, 19, 21, 22, 42, 45, 46, 47, 51, 52, 53, 55, 56, 58, 59, 63, 66, 76, 91, 101, 103, 105, 111, 113, 119, 129, 130, 131, 133, 135, 137, 138, 144, 145, 147, 148, 153, 156, 162, 165, 167, 169, 170, 171, 174, 175, 181, 189, 191, 193, 194, 196, 197, 199, 200, 210, 212, 214, 215, 217, 223, 224, 226, 227, 229, 232, 233, 234, 245, 248, 250, 251, 256, 257, 261, 263, 264, 270, 271, 272, 274, 275, 276, 279, 280], "achiev": [1, 3, 4, 7, 15, 19, 22, 26, 33, 46, 52, 59, 85, 91, 103, 130, 133, 136, 141, 147, 148, 153, 162, 163, 165, 169, 171, 172, 181, 189, 192, 193, 197, 198, 215, 225, 233, 260, 264, 272, 274, 278], "oper": [1, 7, 14, 15, 16, 19, 20, 21, 22, 33, 34, 39, 45, 47, 49, 52, 54, 63, 65, 66, 76, 85, 86, 88, 96, 97, 100, 101, 103, 104, 105, 110, 111, 112, 113, 114, 115, 118, 119, 130, 131, 133, 134, 135, 136, 138, 140, 142, 147, 148, 149, 151, 153, 154, 156, 159, 164, 167, 168, 170, 171, 173, 177, 181, 182, 184, 185, 186, 188, 189, 192, 198, 205, 206, 209, 212, 213, 215, 219, 220, 227, 228, 232, 233, 234, 241, 243, 244, 245, 247, 250, 251, 259, 263, 264, 270, 271, 272, 275, 278, 279, 280], "practic": [1, 6, 7, 12, 40, 49, 52, 54, 55, 93, 94, 96, 101, 103, 105, 111, 112, 119, 123, 126, 130, 135, 136, 143, 148, 153, 156, 163, 169, 171, 172, 188, 192, 205, 206, 210, 245, 246, 249, 260, 265, 274, 275, 278], "small": [1, 3, 6, 7, 19, 21, 26, 45, 46, 49, 60, 78, 93, 96, 98, 100, 101, 103, 105, 106, 108, 113, 119, 126, 131, 132, 134, 137, 138, 139, 141, 152, 162, 163, 165, 170, 171, 172, 175, 177, 179, 184, 189, 191, 196, 198, 205, 215, 233, 244, 245, 247, 260, 275, 276], "fake": [1, 7, 19, 22, 49, 55, 162, 188, 210, 215], "spec": [1, 116, 148, 171, 175, 188, 193, 245], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 13, 55, 90, 103, 133, 139, 153, 154, 155, 156, 159, 181, 184, 196], "ou": 1, "nois": [1, 7, 13, 55, 78, 228, 259], "reach": [1, 11, 19, 55, 63, 103, 138, 145, 147, 155, 156, 171, 175, 188, 215, 235, 245], "minimum": [1, 4, 85, 133, 171, 175, 207], "iter": [1, 3, 7, 12, 13, 15, 26, 33, 34, 38, 39, 45, 46, 49, 55, 56, 58, 88, 91, 93, 94, 96, 98, 100, 104, 111, 113, 120, 137, 140, 143, 145, 148, 153, 171, 172, 173, 174, 175, 181, 182, 186, 189, 191, 224, 241, 244, 260, 263, 273, 275, 276, 279], "reset": [1, 22, 38, 96, 101, 111, 126, 148, 171, 172, 173, 175, 181, 186, 199, 235, 276], "develop": [1, 3, 4, 6, 10, 11, 13, 16, 26, 85, 88, 94, 107, 111, 113, 115, 140, 147, 156, 168, 175, 181, 186, 192, 193, 198, 199, 200, 205, 208, 209, 227, 228, 232, 234, 235, 248, 260], "tight": [1, 112, 113, 115, 116], "per": [1, 4, 6, 7, 10, 12, 22, 100, 103, 110, 130, 132, 138, 139, 141, 145, 147, 148, 154, 156, 162, 167, 169, 171, 175, 176, 177, 178, 181, 182, 184, 188, 189, 191, 194, 196, 197, 205, 219, 221, 225, 226, 227, 235, 245, 249, 259, 269, 278, 279, 280], "sync": [1, 11, 12, 18, 58, 130, 131, 132, 133, 134, 155, 189], "natur": [1, 6, 7, 19, 21, 26, 47, 78, 98, 103, 111, 137, 138, 148, 165, 174, 184, 207, 210, 215, 221], "resourc": [1, 56, 78, 91, 113, 115, 131, 145, 147, 162, 171, 181, 184, 196, 232, 245, 260, 265, 268, 278], "alloc": [1, 7, 21, 42, 51, 58, 101, 141, 147, 162, 165, 181, 188, 189, 210, 217, 227, 249, 250, 279], "gpu": [1, 3, 13, 19, 21, 22, 42, 45, 49, 51, 52, 53, 55, 56, 57, 59, 60, 63, 66, 76, 85, 86, 96, 97, 101, 102, 103, 105, 113, 119, 123, 126, 129, 130, 131, 132, 133, 135, 136, 138, 143, 144, 145, 147, 148, 149, 153, 156, 159, 162, 164, 167, 171, 172, 174, 175, 176, 184, 186, 191, 194, 196, 197, 199, 200, 212, 213, 215, 216, 220, 221, 223, 226, 227, 241, 244, 245, 250, 263, 264, 270, 272, 280], "worker": [1, 7, 12, 18, 54, 55, 96, 129, 131, 132, 134, 147, 156, 171, 174, 175, 181, 225, 260], "so": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 26, 33, 46, 49, 52, 54, 55, 56, 68, 71, 78, 86, 88, 91, 93, 94, 96, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 113, 118, 119, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 153, 154, 155, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 184, 186, 188, 189, 191, 192, 193, 196, 197, 198, 205, 207, 208, 209, 210, 215, 217, 220, 233, 234, 241, 244, 245, 249, 259, 260, 263, 264, 273, 274, 275, 278, 279], "syncdatacollector": [1, 171], "process": [1, 4, 6, 7, 12, 13, 15, 16, 18, 19, 21, 26, 35, 38, 39, 43, 49, 52, 53, 54, 55, 59, 63, 78, 85, 88, 93, 94, 96, 98, 102, 103, 111, 112, 113, 120, 123, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 143, 144, 147, 148, 152, 153, 155, 156, 164, 165, 170, 172, 174, 175, 176, 177, 181, 184, 188, 189, 196, 197, 198, 209, 210, 212, 213, 214, 215, 221, 225, 226, 227, 229, 235, 245, 247, 249, 250, 259, 260, 261, 263, 264, 269, 274, 275, 276, 278, 279], "offer": [1, 4, 8, 12, 15, 17, 21, 39, 43, 45, 56, 63, 93, 94, 105, 132, 133, 135, 149, 151, 153, 154, 165, 189, 192, 227, 243, 245, 250, 259, 260, 265, 278], "multiasyncdatacollector": [1, 171], "rollout": [1, 171], "asynchron": [1, 129, 130, 134, 137, 168, 171, 175, 250, 264], "manner": [1, 6, 10, 15, 22, 33, 93, 111, 171, 184, 189], "therebi": [1, 199, 205, 210, 275], "decoupl": [1, 35, 163], "factori": [1, 7, 101, 107, 206, 207, 246, 249], "empti": [1, 4, 6, 7, 10, 15, 22, 101, 139, 153, 170, 177, 181, 184, 188, 192, 197, 210, 217, 220, 250, 259], "maximum": [1, 12, 52, 85, 98, 108, 137, 139, 148, 153, 171, 176, 177, 209, 260], "non": [1, 2, 3, 6, 10, 12, 15, 22, 34, 52, 54, 56, 57, 59, 85, 88, 98, 101, 103, 104, 106, 110, 111, 120, 132, 133, 137, 141, 142, 147, 148, 151, 154, 156, 159, 169, 173, 176, 177, 181, 186, 189, 192, 198, 205, 212, 217, 227, 245, 257, 261, 274, 278], "termin": [1, 15, 56, 91, 171, 172, 174, 175, 184, 220], "max_frames_per_traj": [1, 171], "effect": [1, 6, 7, 10, 12, 17, 58, 78, 85, 94, 98, 101, 103, 111, 116, 135, 138, 139, 145, 149, 162, 164, 165, 169, 172, 176, 177, 184, 189, 207, 219, 226, 228, 244, 260, 265, 274], "regist": [1, 8, 17, 38, 45, 49, 98, 116, 118, 120, 130, 132, 133, 135, 145, 151, 162, 163, 171, 185, 188, 196, 197, 221, 234, 241, 244, 251, 262], "new": [1, 2, 4, 6, 7, 8, 10, 13, 15, 17, 26, 32, 33, 37, 42, 45, 47, 51, 52, 53, 55, 58, 64, 67, 78, 80, 81, 82, 83, 85, 88, 100, 101, 102, 103, 105, 108, 110, 115, 116, 118, 120, 126, 130, 131, 132, 133, 134, 136, 140, 148, 151, 153, 155, 162, 163, 164, 165, 168, 169, 171, 172, 173, 176, 177, 181, 184, 185, 188, 189, 191, 193, 196, 197, 199, 200, 205, 210, 213, 219, 220, 221, 241, 250, 257, 260, 261, 264, 266, 280], "stepcount": [1, 148, 171], "infer": [1, 3, 7, 8, 10, 11, 22, 40, 42, 51, 52, 94, 96, 98, 102, 103, 107, 110, 111, 113, 130, 133, 136, 137, 140, 141, 153, 171, 173, 184, 185, 186, 188, 189, 191, 209, 210, 212, 213, 215, 220, 221, 227, 235, 241, 247, 248, 262, 264, 265, 272, 275, 278], "manual": [1, 4, 6, 10, 13, 17, 35, 49, 52, 56, 72, 75, 76, 101, 103, 111, 119, 120, 133, 142, 148, 149, 163, 164, 165, 167, 188, 189, 210, 221, 225, 229, 241, 244, 260, 278], "around": [1, 6, 7, 12, 26, 35, 39, 52, 58, 94, 96, 98, 101, 103, 126, 130, 139, 149, 153, 154, 159, 164, 177, 181, 182, 188, 189, 197, 205, 206, 233, 251], "1m": [1, 35, 100, 148, 171, 194], "outer": [1, 7, 132, 154], "loop": [1, 3, 6, 10, 12, 18, 22, 37, 39, 46, 49, 52, 54, 55, 78, 88, 93, 96, 100, 103, 111, 119, 131, 133, 137, 138, 140, 149, 153, 154, 155, 162, 164, 165, 174, 175, 182, 189, 215, 233, 245, 250, 260, 263], "equal": [1, 11, 93, 101, 103, 136, 156, 169, 171, 172, 184, 188, 196, 208, 275, 278], "length": [1, 13, 15, 52, 55, 93, 94, 98, 110, 111, 135, 139, 171, 176, 177, 189, 192, 194, 207, 210, 213, 215, 219, 264, 274], "sub": [1, 7, 93, 118, 135, 140, 167, 171, 175, 181, 186, 189, 229, 269, 278], "shape": [1, 4, 17, 19, 33, 35, 42, 45, 49, 51, 52, 55, 71, 88, 93, 96, 103, 104, 107, 110, 111, 118, 119, 132, 135, 138, 139, 140, 149, 151, 154, 164, 171, 181, 184, 185, 189, 191, 192, 198, 208, 210, 215, 217, 233, 241, 245, 248, 250, 256, 264, 269, 270, 272, 273, 275, 280], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 33, 34, 38, 39, 43, 45, 46, 47, 52, 59, 66, 75, 78, 85, 88, 91, 93, 96, 98, 101, 102, 103, 104, 105, 110, 111, 120, 129, 130, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 147, 148, 151, 154, 155, 159, 165, 167, 168, 171, 172, 173, 175, 178, 179, 182, 184, 185, 186, 188, 189, 191, 192, 194, 197, 198, 199, 205, 206, 210, 212, 213, 215, 217, 221, 223, 225, 229, 232, 234, 241, 244, 245, 246, 248, 249, 250, 256, 259, 263, 264, 265, 268, 272, 274, 275, 276, 280], "assess": [1, 165, 189], "mode": [1, 13, 40, 45, 52, 55, 58, 78, 85, 88, 90, 94, 100, 120, 130, 132, 140, 141, 142, 148, 153, 155, 156, 159, 167, 173, 176, 177, 178, 182, 184, 185, 186, 188, 189, 192, 193, 196, 212, 213, 227, 233, 235, 245, 260, 264, 267, 274, 275, 278, 280], "dedic": [1, 11, 58, 101, 174, 175, 243, 244, 279], "frequenc": [1, 86, 137], "everi": [1, 2, 7, 10, 11, 15, 16, 19, 21, 22, 26, 33, 34, 35, 39, 45, 46, 49, 52, 54, 55, 58, 63, 93, 96, 98, 100, 101, 102, 126, 135, 136, 138, 139, 141, 147, 148, 151, 156, 162, 163, 164, 165, 169, 171, 172, 173, 175, 177, 181, 182, 186, 188, 189, 210, 215, 223, 246, 258, 260, 271, 279], "10": [1, 3, 7, 10, 12, 19, 22, 34, 35, 43, 45, 46, 47, 49, 52, 56, 75, 78, 86, 91, 96, 100, 102, 111, 118, 120, 131, 132, 134, 140, 145, 147, 149, 154, 156, 170, 171, 173, 174, 175, 176, 177, 178, 181, 182, 184, 188, 189, 192, 193, 196, 198, 200, 213, 215, 217, 220, 223, 225, 226, 229, 233, 235, 241, 245, 247, 250, 251, 259, 275, 276, 280], "come": [1, 6, 7, 11, 19, 22, 43, 54, 55, 78, 88, 91, 93, 98, 101, 103, 104, 116, 120, 131, 135, 137, 147, 148, 153, 162, 163, 165, 168, 171, 176, 186, 188, 189, 192, 198, 215, 235, 245, 270, 279], "flavor": [1, 4, 6], "priorit": [1, 210, 260], "error": [1, 4, 6, 7, 10, 11, 12, 13, 17, 38, 39, 45, 49, 52, 53, 56, 71, 93, 96, 98, 101, 103, 107, 111, 115, 116, 119, 132, 134, 136, 142, 162, 168, 171, 172, 186, 189, 192, 196, 198, 205, 214, 229, 234, 245, 257, 260, 263, 273], "higher": [1, 22, 46, 51, 56, 85, 93, 94, 98, 103, 105, 119, 131, 132, 138, 139, 142, 151, 154, 170, 171, 172, 181, 182, 184, 188, 189, 212, 219, 221, 224, 229, 232], "likelihood": [1, 38, 52, 98, 105, 111], "regular": [1, 6, 7, 10, 11, 22, 26, 103, 111, 123, 138, 139, 154, 163, 164, 165, 179, 189, 192, 205, 207, 210, 212, 234, 260, 272], "circular": [1, 196, 214], "compos": [1, 4, 6, 7, 8, 11, 17, 19, 22, 63, 96, 98, 100, 105, 130, 131, 147, 151, 159, 164, 170, 171, 174, 176, 178, 182, 184, 192, 229, 234, 235, 247, 250, 265, 268, 270, 280], "pick": [1, 7, 22, 46, 104, 138, 172, 177, 241, 259, 264, 270], "tensor": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 34, 35, 36, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 50, 52, 60, 63, 64, 66, 67, 68, 70, 71, 72, 74, 77, 78, 88, 93, 94, 95, 97, 98, 100, 102, 103, 105, 108, 111, 112, 113, 116, 118, 120, 130, 131, 132, 133, 139, 140, 141, 142, 145, 147, 148, 149, 151, 153, 154, 156, 159, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 184, 185, 186, 188, 189, 191, 194, 196, 197, 198, 199, 200, 205, 206, 207, 213, 215, 216, 217, 219, 220, 225, 228, 229, 232, 233, 234, 243, 244, 245, 247, 248, 249, 250, 251, 256, 259, 262, 263, 264, 269, 272, 276, 280], "physic": [1, 15, 110, 165, 249, 260, 278], "memori": [1, 6, 7, 10, 11, 18, 19, 21, 22, 42, 51, 52, 54, 58, 91, 98, 101, 102, 103, 106, 109, 111, 113, 120, 130, 131, 132, 133, 135, 143, 147, 148, 153, 154, 155, 159, 169, 174, 176, 178, 181, 184, 188, 189, 191, 192, 194, 196, 197, 198, 205, 208, 210, 215, 221, 225, 234, 244, 245, 249, 251, 264, 269, 279, 280], "map": [1, 7, 13, 34, 52, 55, 94, 96, 98, 103, 108, 110, 111, 120, 133, 138, 148, 149, 154, 162, 163, 164, 171, 172, 175, 184, 188, 191, 215, 219, 225, 227, 249, 259, 260, 262, 276], "arrai": [1, 7, 33, 34, 45, 46, 49, 54, 63, 75, 76, 88, 93, 94, 101, 110, 111, 118, 119, 138, 139, 155, 170, 177, 184, 208, 243], "desir": [1, 4, 6, 10, 13, 15, 18, 52, 55, 78, 85, 103, 120, 133, 147, 169, 181, 184, 188, 194, 196, 198, 206, 217, 241, 244, 247, 275, 278], "hyperparamet": [1, 7, 15, 19, 55, 111, 120, 121, 130, 137, 138, 205, 210, 262, 280], "temporari": [1, 6, 137], "directori": [1, 6, 7, 13, 35, 52, 54, 55, 91, 100, 103, 120, 123, 126, 137, 138, 139, 153, 177, 181, 184, 196, 198, 227, 235, 241, 258, 269, 278], "disk": [1, 35, 96, 100, 113, 120, 148, 165, 196, 197, 245, 249, 250, 258, 269, 270], "along": [1, 6, 7, 10, 15, 19, 33, 34, 42, 45, 51, 52, 56, 57, 58, 59, 86, 93, 94, 96, 97, 98, 100, 101, 102, 103, 107, 108, 111, 112, 126, 131, 132, 138, 139, 143, 144, 148, 162, 169, 172, 174, 182, 184, 188, 189, 194, 207, 212, 213, 215, 217, 274], "dimens": [1, 6, 7, 13, 15, 21, 34, 42, 49, 51, 52, 94, 96, 98, 100, 107, 108, 110, 111, 130, 135, 138, 148, 149, 156, 164, 170, 171, 173, 185, 188, 189, 194, 206, 210, 213, 219, 244, 251, 260, 275], "feed": [1, 7, 13, 22, 46, 49, 52, 96, 98, 102, 103, 106, 108, 113, 120, 135, 138, 139, 145, 155, 172, 177, 182, 227, 247, 263], "adapt": [1, 2, 15, 19, 26, 91, 96, 113, 137, 194, 215, 245], "divid": [1, 10, 11, 12, 13, 15, 16, 22, 88, 103, 105, 134, 147, 163, 165, 175, 275, 278], "yield": [1, 7, 12, 13, 19, 22, 38, 40, 101, 111, 120, 135, 136, 173, 175, 192, 198, 208, 215, 233, 235, 260], "regard": [1, 7, 12, 15, 120, 153, 154, 171, 181, 189, 274], "200": [1, 7, 148, 156, 175, 198, 233], "random_crop_len": 1, "25": [1, 35, 75, 78, 93, 100, 103, 111, 118, 121, 126, 131, 171, 174, 184, 198, 233, 245, 250, 280], "balanc": [1, 7, 21, 145, 181, 189, 241], "choic": [1, 4, 7, 10, 17, 91, 137, 139, 147, 165, 189, 223, 260], "heterogen": [1, 213], "figur": [1, 10, 13, 15, 35, 52, 78, 85, 96, 103, 130, 134, 135, 137, 148, 153, 165, 171, 173, 181, 182, 184, 188], "dataflow": 1, "8": [1, 3, 6, 7, 19, 22, 35, 91, 98, 99, 108, 111, 118, 119, 132, 135, 141, 145, 153, 154, 156, 167, 170, 171, 181, 184, 185, 188, 189, 194, 196, 198, 200, 210, 215, 216, 220, 221, 225, 226, 227, 228, 229, 233, 235, 244, 250, 260, 267, 276, 278, 279], "1000": [1, 2, 22, 45, 100, 102, 126, 131, 132, 136, 153, 171, 182, 215, 225, 241, 245, 259], "known": [1, 4, 6, 13, 19, 93, 135, 147, 151, 152, 169, 172, 177, 188, 189, 196, 215, 221, 245, 259, 270], "utd": 1, "64": [1, 6, 7, 16, 19, 21, 22, 35, 39, 45, 91, 101, 108, 111, 131, 132, 135, 148, 149, 154, 164, 170, 171, 173, 174, 189, 194, 209, 215, 219, 221, 233, 235, 245, 250, 265], "reproduc": [1, 13, 55, 78, 96, 101, 103, 153, 171, 172, 175, 186, 233, 245, 260], "realiz": [1, 19, 215], "sever": [1, 2, 3, 4, 11, 12, 16, 18, 22, 33, 39, 43, 47, 49, 55, 56, 57, 78, 103, 105, 132, 138, 144, 147, 155, 162, 163, 165, 168, 171, 173, 174, 181, 182, 186, 188, 192, 207, 212, 233, 234, 245, 259, 269, 270, 278], "qnet": 1, "ve": [1, 6, 7, 10, 19, 47, 49, 53, 93, 94, 96, 98, 101, 102, 111, 130, 136, 148, 152, 154, 162, 164, 165, 174, 182, 188, 189, 198, 205, 207, 208, 209, 215, 226, 227, 245], "becaus": [1, 2, 4, 6, 7, 10, 13, 15, 16, 17, 18, 19, 22, 33, 35, 40, 42, 45, 46, 49, 51, 52, 54, 55, 58, 59, 78, 88, 91, 93, 94, 96, 98, 101, 103, 104, 105, 107, 111, 112, 113, 116, 120, 126, 132, 133, 136, 138, 141, 142, 145, 148, 151, 154, 155, 156, 159, 164, 165, 169, 173, 175, 177, 179, 181, 186, 188, 191, 192, 198, 205, 207, 215, 219, 223, 233, 245, 257, 260, 262, 263, 275, 276], "_must_": 1, "off": [1, 10, 18, 22, 26, 33, 35, 45, 52, 98, 100, 101, 120, 131, 137, 138, 153, 162, 171, 173, 174, 175, 184, 205, 226, 264], "dictat": [1, 15], "introduc": [1, 12, 16, 18, 19, 26, 34, 37, 57, 91, 94, 103, 105, 118, 119, 130, 132, 134, 140, 145, 153, 156, 162, 173, 175, 176, 177, 184, 186, 188, 189, 197, 199, 200, 205, 207, 208, 209, 212, 215, 219, 221, 225, 226, 234, 257, 260, 275, 276, 278], "outdat": 1, "trick": [1, 4, 7, 11, 52, 101, 142, 147, 154], "multi": [1, 6, 7, 15, 21, 49, 52, 55, 56, 57, 59, 63, 93, 94, 98, 101, 105, 130, 132, 133, 135, 143, 144, 145, 148, 171, 173, 176, 178, 181, 191, 210, 227, 229, 260, 278, 280], "altern": [1, 7, 11, 51, 52, 108, 126, 131, 149, 152, 156, 168, 171, 177, 181, 184, 186, 192, 198, 208, 209, 227, 257, 260, 276], "hack": [1, 205, 257], "find": [1, 2, 4, 6, 7, 10, 11, 19, 33, 35, 42, 51, 78, 85, 86, 88, 91, 96, 98, 101, 104, 107, 111, 130, 131, 134, 138, 147, 151, 153, 163, 172, 175, 177, 181, 188, 189, 205, 206, 207, 208, 209, 215, 235, 241, 243, 245, 258], "well": [1, 3, 4, 6, 7, 10, 11, 12, 22, 35, 42, 46, 51, 52, 56, 85, 88, 91, 94, 96, 103, 105, 107, 111, 113, 120, 126, 131, 132, 133, 136, 137, 138, 141, 142, 147, 148, 151, 162, 163, 165, 167, 170, 173, 174, 175, 176, 177, 181, 182, 184, 186, 189, 191, 205, 206, 207, 210, 217, 226, 227, 229, 234, 241, 245, 249, 257, 259, 262, 270, 271, 272, 275, 276, 278], "despit": [1, 78, 140, 145], "fact": [1, 3, 4, 6, 7, 10, 13, 15, 22, 33, 42, 78, 93, 94, 96, 98, 101, 103, 105, 110, 136, 163, 171, 172, 182, 188, 189, 192], "part": [1, 3, 6, 7, 10, 11, 14, 15, 16, 18, 38, 45, 47, 52, 55, 78, 91, 93, 94, 98, 104, 106, 110, 111, 112, 130, 132, 135, 136, 138, 139, 142, 143, 147, 148, 152, 153, 160, 162, 163, 171, 177, 188, 189, 194, 196, 198, 199, 205, 207, 209, 213, 235, 241, 243, 244, 257, 259, 265, 269, 272, 275], "made": [1, 7, 11, 16, 22, 55, 91, 94, 101, 103, 132, 134, 136, 147, 148, 165, 177, 182, 184, 188, 208, 213, 243, 260], "thank": [1, 22, 52, 111, 137, 138, 139, 147, 177, 192], "hardupd": 1, "softupd": [1, 148], "appropri": [1, 7, 10, 52, 94, 111, 137, 145, 163, 174, 182, 189, 192, 197, 212, 233, 234, 244], "locat": [1, 4, 7, 32, 35, 42, 51, 85, 94, 96, 110, 118, 147, 165, 171, 181, 191, 196, 227, 241, 250, 260, 269], "adam": [1, 7, 12, 14, 38, 49, 55, 72, 102, 105, 119, 133, 147, 162, 171, 172, 173, 175, 223, 224, 226, 227, 232, 279], "pretti": [1, 18, 46, 101, 118, 119, 154, 175, 219], "plot": [1, 7, 55, 78, 85, 93, 137, 148, 165, 171, 172, 173, 182, 184], "alreadi": [1, 2, 4, 6, 7, 11, 12, 16, 93, 96, 101, 103, 104, 111, 135, 137, 145, 156, 162, 165, 167, 170, 171, 176, 182, 189, 207, 209, 214, 225, 229, 233, 234, 245, 247, 260, 261, 262, 263, 265, 279], "mention": [1, 4, 6, 7, 11, 12, 16, 18, 55, 78, 88, 101, 103, 104, 120, 131, 135, 147, 148, 165, 172, 174, 181, 184, 188, 192, 227, 241, 249, 257, 269, 278], "greater": [1, 12, 52, 55, 94, 119, 136, 220, 278], "concret": [1, 6, 7, 10, 12, 93, 165, 171, 188, 205], "takeawai": [1, 123, 192, 260], "further": [1, 6, 7, 10, 22, 49, 78, 91, 98, 103, 111, 135, 147, 153, 165, 169, 171, 184, 185, 186, 188, 198, 210, 212, 213, 214, 226, 234, 249, 268], "might": [1, 4, 6, 10, 11, 16, 17, 18, 33, 40, 46, 53, 54, 55, 56, 93, 96, 101, 103, 104, 108, 110, 113, 116, 118, 133, 142, 143, 144, 145, 147, 152, 154, 163, 165, 172, 175, 176, 177, 181, 186, 188, 189, 191, 192, 196, 198, 205, 214, 220, 229, 245, 246, 250, 257, 260, 265, 275, 278], "dispatch": [1, 4, 6, 16, 130, 133, 168, 192, 221, 233, 241, 244, 271], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 26, 52, 88, 93, 111, 113, 120, 130, 132, 133, 143, 192, 212, 227, 245], "runnable_code_remov": [1, 13, 14, 15, 17, 19, 26, 33, 34, 37, 38, 39, 40, 42, 43, 45, 46, 47, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 76, 78, 88, 91, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 107, 108, 110, 112, 113, 115, 116, 118, 119, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 155, 156, 157, 159, 162, 163, 164, 165, 169, 172, 176, 177, 179, 181, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274], "minut": [1, 13, 14, 15, 17, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 71, 75, 76, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 123, 126, 134, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 169, 170, 171, 172, 176, 177, 179, 182, 186, 188, 189, 191, 192, 198, 205, 206, 207, 208, 224, 232, 246, 249, 251, 257, 265, 271, 272, 273, 274, 276], "002": [1, 13, 14, 15, 17, 20, 33, 34, 38, 39, 40, 41, 42, 43, 45, 47, 50, 51, 54, 71, 73, 76, 77, 91, 93, 98, 99, 101, 104, 108, 109, 110, 113, 116, 117, 121, 123, 132, 136, 137, 138, 141, 148, 149, 152, 155, 156, 159, 162, 163, 164, 169, 172, 177, 178, 179, 205, 206, 207, 208, 216, 224, 232, 246, 249, 256, 257, 265, 267, 271, 272, 273, 274, 280], "jupyt": [1, 13, 14, 15, 17, 19, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 171, 172, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 210, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "notebook": [1, 13, 14, 15, 17, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 171, 172, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 210, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "coding_ddpg": [1, 20, 280], "ipynb": [1, 13, 14, 15, 17, 19, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 171, 172, 176, 177, 179, 181, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 210, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "python": [1, 3, 7, 11, 13, 14, 15, 16, 19, 20, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 56, 58, 59, 60, 65, 66, 68, 70, 71, 72, 75, 76, 78, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 130, 131, 132, 136, 137, 138, 139, 140, 141, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 170, 171, 172, 174, 176, 177, 179, 181, 185, 186, 188, 189, 191, 192, 194, 196, 197, 198, 199, 205, 206, 207, 208, 210, 212, 213, 214, 219, 224, 227, 228, 229, 232, 234, 235, 241, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 271, 272, 273, 275, 278, 280], "sourc": [1, 3, 6, 7, 11, 12, 13, 14, 15, 17, 18, 19, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 58, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 132, 135, 136, 137, 138, 139, 141, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 168, 169, 171, 172, 173, 175, 176, 177, 179, 181, 184, 185, 186, 188, 189, 191, 192, 196, 197, 198, 199, 205, 206, 207, 208, 210, 213, 219, 220, 224, 232, 234, 235, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "py": [1, 4, 6, 7, 10, 11, 13, 14, 15, 17, 19, 20, 22, 26, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 58, 65, 66, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 87, 88, 89, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 126, 131, 132, 133, 136, 137, 138, 139, 140, 141, 143, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 167, 168, 169, 171, 172, 174, 176, 177, 178, 179, 181, 185, 186, 188, 189, 191, 192, 194, 196, 197, 198, 205, 206, 207, 208, 210, 214, 216, 219, 220, 224, 228, 229, 232, 235, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 271, 272, 273, 274, 275, 276, 278, 280], "zip": [1, 7, 13, 14, 15, 17, 19, 21, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 171, 172, 173, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 210, 215, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "galleri": [1, 13, 14, 15, 17, 19, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 171, 172, 176, 177, 179, 181, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 210, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276, 280], "sphinx": [1, 13, 14, 15, 17, 19, 26, 33, 34, 35, 37, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 54, 55, 65, 66, 68, 70, 71, 72, 75, 76, 78, 88, 91, 93, 94, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 115, 116, 118, 120, 123, 126, 136, 137, 138, 139, 141, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 162, 163, 164, 165, 169, 171, 172, 176, 177, 179, 181, 185, 186, 188, 189, 191, 192, 197, 198, 205, 206, 207, 208, 210, 219, 224, 232, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 265, 271, 272, 273, 274, 276], "The": [2, 3, 4, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 26, 33, 34, 35, 38, 39, 42, 43, 45, 46, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 63, 70, 71, 72, 76, 78, 85, 86, 88, 94, 95, 96, 98, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 127, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 169, 170, 171, 172, 173, 174, 175, 176, 179, 181, 184, 185, 186, 188, 189, 191, 193, 194, 196, 197, 198, 199, 205, 206, 207, 208, 209, 210, 212, 214, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 233, 234, 235, 236, 244, 245, 247, 249, 250, 257, 258, 259, 260, 263, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279], "packag": [2, 4, 6, 7, 19, 21, 26, 46, 49, 54, 60, 63, 71, 72, 91, 102, 103, 105, 111, 115, 119, 126, 129, 130, 131, 132, 145, 147, 152, 168, 170, 172, 175, 181, 184, 186, 214, 215, 229, 234, 243, 247, 250, 259, 263, 264, 275, 276], "build": [2, 7, 15, 22, 33, 35, 36, 37, 38, 39, 40, 42, 43, 49, 52, 63, 71, 72, 91, 93, 94, 95, 96, 97, 100, 101, 102, 104, 110, 111, 118, 119, 123, 129, 130, 138, 139, 147, 148, 151, 160, 162, 164, 165, 171, 172, 173, 174, 175, 178, 188, 189, 196, 200, 210, 213, 219, 234, 245, 247, 259, 260, 272, 275, 276, 280], "highli": [2, 6, 7, 11, 21, 52, 91, 177, 189, 219, 260], "dynam": [2, 6, 7, 10, 13, 15, 16, 22, 33, 45, 56, 68, 93, 103, 106, 109, 112, 119, 120, 130, 140, 156, 169, 171, 193, 198, 234, 235, 244, 248, 260, 264, 267, 270, 272, 275, 276, 280], "neural": [2, 6, 14, 15, 19, 20, 33, 36, 37, 39, 45, 48, 50, 52, 54, 60, 71, 78, 93, 94, 96, 98, 102, 103, 104, 105, 106, 107, 108, 110, 113, 115, 119, 126, 130, 137, 138, 139, 140, 141, 148, 160, 169, 171, 172, 174, 177, 178, 179, 182, 184, 209, 212, 213, 215, 221, 233, 234, 241, 248, 256, 260, 264, 265, 280], "network": [2, 3, 6, 10, 13, 14, 15, 19, 22, 33, 36, 37, 38, 39, 40, 45, 48, 50, 52, 54, 60, 71, 72, 78, 93, 94, 96, 98, 102, 103, 104, 106, 107, 109, 110, 111, 113, 115, 119, 126, 130, 136, 137, 140, 141, 144, 145, 159, 160, 163, 165, 169, 174, 178, 181, 182, 184, 196, 209, 212, 213, 215, 221, 233, 234, 235, 241, 248, 251, 256, 260, 264, 265, 280], "api": [2, 4, 6, 8, 9, 10, 11, 12, 15, 16, 17, 21, 26, 34, 35, 37, 39, 42, 43, 51, 59, 85, 94, 115, 118, 120, 130, 131, 132, 134, 135, 136, 137, 140, 145, 147, 152, 153, 154, 158, 164, 166, 167, 173, 174, 175, 181, 186, 188, 189, 191, 193, 194, 197, 198, 209, 212, 213, 219, 225, 226, 227, 228, 229, 234, 235, 243, 245, 246, 250, 259, 264, 267, 268, 269, 270, 271, 272, 273, 274, 275, 278, 280], "explor": [2, 7, 10, 15, 47, 52, 78, 116, 130, 137, 142, 148, 153, 155, 162, 165, 167, 171, 172, 176, 177, 189, 192, 196, 209, 228, 243, 264, 269, 272, 275, 278], "note": [2, 4, 6, 7, 10, 13, 16, 17, 18, 19, 21, 22, 26, 33, 45, 46, 47, 49, 52, 53, 55, 78, 88, 93, 94, 96, 98, 101, 102, 105, 106, 107, 108, 110, 111, 116, 118, 120, 126, 131, 132, 133, 135, 136, 141, 142, 144, 145, 147, 149, 151, 153, 154, 156, 162, 164, 165, 168, 169, 173, 174, 175, 176, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 196, 197, 205, 206, 207, 208, 210, 215, 217, 219, 221, 225, 226, 227, 229, 250, 259, 262, 265, 269, 270, 271, 272, 278, 279], "pleas": [2, 4, 5, 6, 7, 8, 10, 11, 17, 22, 23, 24, 25, 46, 47, 49, 54, 61, 62, 84, 91, 131, 132, 135, 145, 147, 149, 151, 152, 153, 156, 162, 164, 168, 173, 174, 175, 181, 184, 186, 188, 189, 191, 192, 193, 196, 197, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 219, 220, 222, 227, 229, 230, 233, 234, 235, 237, 238, 239, 240, 241, 242, 244, 246, 275, 277, 278], "differenti": [2, 6, 7, 15, 21, 36, 37, 42, 48, 49, 60, 93, 119, 130, 148, 164, 172, 178, 179, 207, 280], "requires_grad": [2, 4, 7, 10, 33, 45, 49, 65, 66, 93, 101, 107, 111, 119, 126, 140, 142, 194, 215, 249, 263, 276], "track": [2, 6, 10, 15, 34, 38, 45, 55, 85, 93, 98, 100, 101, 105, 107, 111, 119, 132, 134, 139, 140, 144, 148, 175, 177, 181, 214, 228, 250, 258, 263, 274, 275], "auto": [2, 3, 6, 7, 10, 11, 13, 58, 131, 132, 153, 168, 188, 189, 199, 209, 220, 234, 235, 245, 259, 278], "x": [2, 4, 6, 7, 13, 21, 22, 33, 42, 45, 49, 51, 52, 55, 65, 66, 70, 71, 72, 75, 76, 78, 88, 93, 96, 98, 100, 101, 103, 104, 105, 107, 111, 119, 120, 131, 133, 135, 136, 138, 139, 140, 142, 145, 147, 154, 163, 165, 167, 168, 170, 173, 174, 175, 182, 184, 185, 186, 188, 191, 193, 198, 199, 200, 209, 210, 212, 215, 225, 226, 227, 229, 233, 234, 235, 241, 245, 251, 259, 270, 272, 275, 276], "std": [2, 6, 7, 13, 16, 22, 54, 96, 103, 168, 170, 175, 184, 199, 205, 234, 245], "cout": [2, 7], "endl": [2, 7], "cpufloattyp": [2, 7], "y": [2, 6, 21, 33, 42, 43, 45, 49, 51, 55, 65, 66, 70, 71, 72, 75, 76, 78, 85, 88, 93, 98, 101, 103, 104, 107, 108, 111, 119, 132, 136, 167, 168, 181, 184, 186, 188, 199, 200, 207, 209, 225, 259, 270, 272, 276], "wa": [2, 3, 4, 6, 12, 17, 19, 46, 54, 55, 78, 93, 94, 96, 98, 101, 102, 103, 104, 105, 107, 111, 116, 120, 131, 135, 137, 140, 145, 147, 155, 159, 162, 163, 164, 165, 167, 169, 170, 171, 172, 175, 176, 177, 182, 188, 189, 192, 198, 207, 208, 215, 227, 241, 244, 245, 250, 252, 253, 254, 255, 275, 278], "result": [2, 4, 6, 7, 10, 11, 13, 15, 19, 22, 26, 33, 38, 40, 42, 45, 46, 54, 66, 75, 85, 86, 91, 93, 94, 96, 101, 102, 103, 107, 111, 112, 116, 119, 120, 123, 132, 133, 134, 135, 136, 139, 145, 147, 148, 151, 153, 154, 155, 159, 164, 165, 168, 169, 170, 172, 173, 174, 175, 176, 182, 184, 185, 186, 188, 191, 192, 193, 194, 196, 198, 206, 207, 208, 209, 210, 217, 220, 223, 225, 226, 232, 233, 235, 247, 249, 250, 257, 259, 260, 264, 265, 269, 270, 272, 273, 274, 276, 278, 279], "grad_fn": [2, 33, 45, 49, 93, 107, 111, 136, 142, 251], "name": [2, 4, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 33, 53, 54, 55, 85, 104, 110, 111, 113, 116, 118, 120, 130, 132, 135, 137, 140, 145, 148, 153, 160, 163, 167, 168, 169, 171, 172, 173, 174, 176, 177, 178, 181, 184, 186, 189, 191, 196, 212, 214, 215, 220, 227, 229, 233, 234, 235, 245, 249, 250, 251, 259, 261, 274, 276, 278, 280], "addbackward1": 2, "z": [2, 6, 55, 88, 101, 107, 188, 207, 276], "27": [2, 35, 54, 153, 171, 175, 198, 233, 245, 274], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 33, 107, 111, 154], "exist": [2, 7, 10, 11, 12, 17, 19, 49, 55, 56, 63, 70, 86, 88, 101, 107, 111, 119, 130, 140, 147, 169, 170, 175, 176, 177, 179, 181, 184, 186, 188, 192, 205, 206, 208, 214, 215, 225, 226, 228, 244, 245, 257, 260], "flag": [2, 4, 6, 15, 45, 93, 107, 163, 177, 188, 213, 249, 259, 265, 278], "place": [2, 6, 7, 12, 15, 21, 42, 45, 47, 51, 55, 88, 94, 98, 100, 105, 107, 111, 132, 137, 145, 147, 149, 162, 164, 165, 171, 177, 184, 186, 188, 189, 192, 194, 205, 212, 219, 225, 227, 249, 257, 259, 260], "randn": [2, 4, 6, 7, 13, 49, 75, 107, 111, 119, 120, 140, 145, 154, 173, 175, 199, 200, 209, 210, 212, 219, 225, 245, 251, 275, 279], "b": [2, 4, 6, 7, 19, 21, 33, 35, 45, 49, 65, 66, 75, 86, 93, 100, 101, 105, 108, 110, 111, 118, 119, 136, 138, 139, 153, 154, 156, 170, 172, 186, 188, 189, 192, 196, 200, 209, 210, 215, 245, 250, 270], "sumbackward0": 2, "backprop": [2, 45, 75, 107, 111, 119, 138, 155], "scalar": [2, 6, 15, 16, 33, 45, 52, 55, 65, 93, 96, 101, 107, 119, 182, 188, 220, 232], "backward": [2, 3, 4, 7, 10, 12, 13, 14, 16, 17, 18, 22, 33, 38, 45, 47, 49, 55, 65, 66, 75, 76, 93, 94, 96, 100, 102, 107, 108, 111, 119, 126, 130, 131, 135, 136, 139, 143, 145, 147, 151, 154, 159, 164, 167, 171, 173, 174, 175, 178, 181, 182, 188, 189, 192, 223, 224, 225, 226, 227, 232, 234, 235, 244, 250, 260, 263, 268, 272, 274, 279, 280], "equival": [2, 6, 12, 33, 45, 93, 105, 119, 133, 151, 164, 167, 172, 174, 184, 188, 189, 192, 199, 205, 207, 210, 215, 260, 276], "print": [2, 6, 7, 12, 15, 21, 22, 34, 35, 39, 46, 47, 49, 52, 54, 55, 56, 75, 78, 88, 91, 93, 96, 98, 100, 101, 103, 105, 110, 111, 112, 115, 119, 120, 131, 132, 133, 134, 139, 140, 141, 144, 145, 147, 148, 153, 154, 163, 167, 168, 170, 171, 173, 174, 175, 177, 182, 185, 186, 188, 189, 192, 193, 196, 200, 205, 207, 210, 214, 215, 220, 223, 225, 226, 227, 228, 229, 233, 234, 235, 244, 245, 250, 251, 260, 262, 276, 279], "d": [2, 4, 6, 7, 10, 22, 39, 55, 63, 65, 66, 75, 93, 94, 96, 98, 101, 105, 110, 111, 119, 132, 135, 137, 139, 141, 145, 147, 154, 155, 162, 167, 181, 184, 188, 192, 208, 210, 229, 234, 273], "dx": [2, 66, 105, 119, 142], "grad": [2, 4, 7, 13, 17, 33, 45, 49, 65, 93, 107, 111, 119, 131, 136, 140, 142, 145, 147, 151, 154, 159, 162, 171, 173, 174, 175, 192, 205, 219, 224, 232, 244, 263], "5000": [2, 100, 171, 245], "got": [2, 16, 22, 58, 94, 101, 104, 105, 107, 111, 145, 168, 174, 188, 275], "matrix": [2, 6, 7, 13, 19, 33, 42, 45, 51, 85, 93, 96, 98, 101, 104, 105, 107, 110, 111, 118, 135, 138, 139, 154, 159, 163, 176, 177, 184, 188, 189, 192, 208, 210, 215, 219, 233, 234, 235, 241, 247, 260, 264, 274], "explan": [2, 55, 182, 249], "arriv": [2, 7, 16, 132, 145, 173, 260], "valu": [2, 4, 6, 7, 13, 15, 21, 22, 33, 34, 38, 42, 43, 45, 49, 51, 52, 53, 58, 65, 78, 85, 88, 91, 93, 94, 96, 98, 101, 102, 103, 105, 107, 108, 110, 111, 113, 119, 135, 136, 137, 140, 144, 145, 147, 152, 155, 167, 168, 172, 173, 174, 175, 176, 177, 181, 184, 186, 189, 192, 194, 196, 205, 206, 207, 208, 210, 212, 213, 224, 244, 245, 250, 257, 258, 269, 278, 279], "section": [2, 4, 6, 7, 10, 12, 16, 21, 22, 34, 35, 37, 38, 39, 40, 42, 45, 46, 49, 53, 54, 55, 78, 94, 97, 101, 102, 103, 104, 105, 108, 110, 111, 116, 133, 136, 140, 141, 147, 153, 155, 159, 165, 172, 173, 175, 181, 184, 188, 189, 191, 192, 193, 206, 207, 217, 221, 224, 232, 234, 241, 244, 245, 249, 260, 270, 274], "look": [2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 21, 35, 40, 42, 45, 46, 49, 51, 52, 53, 54, 55, 58, 78, 88, 91, 93, 94, 96, 98, 100, 101, 102, 104, 105, 107, 108, 110, 111, 112, 113, 120, 126, 131, 133, 135, 136, 137, 142, 147, 148, 149, 156, 159, 162, 165, 169, 170, 171, 174, 175, 176, 177, 181, 182, 184, 188, 189, 191, 192, 199, 205, 208, 210, 212, 228, 232, 233, 234, 245, 247, 250, 258, 259, 261, 262, 263, 265, 270, 274], "jacobian": [2, 45, 93, 130, 151, 178, 219, 280], "product": [2, 3, 7, 42, 45, 51, 88, 93, 105, 113, 130, 132, 147, 151, 167, 177, 178, 189, 194, 219, 264, 272, 280], "norm": [2, 15, 19, 22, 55, 98, 103, 130, 135, 163, 167, 169, 171, 178, 184, 192, 215, 280], "1021": 2, "4020": 2, "314": [2, 276], "6695": 2, "613": [2, 233], "4944": 2, "v": [2, 19, 21, 22, 33, 45, 55, 56, 58, 93, 100, 102, 107, 108, 110, 132, 135, 151, 172, 174, 181, 182, 192, 197, 198, 207, 213, 215, 233, 273], "0001": [2, 22, 91, 153, 171, 235], "kfloat": [2, 3, 4, 199, 220], "102": [2, 171], "4000": [2, 96, 100, 171, 259], "1024": [2, 6, 21, 85, 103, 134, 223, 245, 251], "0000": [2, 171, 215], "stop": [2, 6, 33, 91, 93, 107, 139, 156, 162, 171, 173, 177, 181, 196, 250], "histori": [2, 33, 42, 49, 51, 93, 101, 107, 140, 169], "put": [2, 6, 7, 10, 13, 15, 18, 34, 47, 52, 54, 88, 96, 98, 101, 130, 131, 132, 147, 148, 163, 171, 172, 174, 175, 184], "nogradguard": 2, "block": [2, 4, 6, 7, 10, 11, 13, 19, 22, 33, 34, 49, 52, 85, 93, 107, 112, 131, 134, 135, 147, 148, 153, 165, 167, 173, 174, 175, 176, 181, 184, 194, 198, 209, 215, 221, 225, 260, 265], "pow": [2, 6, 205], "no_grad": [2, 22, 33, 45, 93, 105, 107, 108, 111, 119, 131, 132, 155, 170, 171, 174, 182, 188, 209, 212, 217, 234, 260, 268], "Or": [2, 140, 162, 175, 193, 220], "content": [2, 4, 6, 15, 53, 59, 100, 101, 102, 111, 120, 127, 136, 145, 147, 165, 170, 171, 175, 177, 186, 188, 196, 236, 245, 259, 274, 275], "eq": [2, 22, 52, 131, 174, 188, 235, 250], "bool": [2, 12, 15, 16, 168, 171, 184, 193, 209, 215, 278], "is_leaf": 2, "detach_": [2, 175], "register_hook": [2, 140], "retain_grad": 2, "doc": [2, 4, 5, 7, 8, 25, 52, 65, 78, 93, 101, 102, 103, 118, 119, 126, 133, 144, 147, 152, 165, 173, 175, 184, 188, 189, 210, 219, 241, 244, 258, 273, 274], "applic": [2, 3, 12, 13, 15, 16, 35, 52, 63, 94, 98, 103, 113, 126, 129, 130, 131, 136, 137, 141, 145, 152, 162, 165, 169, 173, 175, 184, 188, 198, 207, 214, 220, 225, 226, 227, 232, 233, 235, 241, 260, 264, 274, 276, 278], "calcul": [2, 13, 19, 33, 38, 45, 46, 52, 55, 59, 78, 85, 88, 91, 93, 94, 96, 102, 103, 111, 138, 139, 155, 172, 173, 175, 176, 177, 184, 189, 192, 194, 207, 210, 215, 229, 235, 263], "penalti": [2, 163, 170, 244], "h": [2, 4, 6, 7, 10, 11, 52, 135, 153, 156, 167, 168, 191, 234, 259, 278], "model": [2, 3, 6, 10, 12, 15, 18, 26, 33, 35, 36, 37, 42, 43, 45, 46, 49, 51, 55, 56, 57, 59, 65, 68, 70, 71, 72, 90, 91, 93, 95, 97, 101, 104, 105, 106, 107, 109, 111, 114, 115, 116, 118, 119, 121, 129, 130, 131, 137, 138, 139, 140, 141, 144, 147, 151, 153, 154, 160, 162, 163, 164, 171, 172, 173, 174, 175, 176, 178, 185, 186, 188, 189, 192, 194, 196, 198, 199, 209, 210, 213, 214, 215, 219, 221, 225, 226, 227, 228, 229, 233, 244, 248, 249, 251, 256, 257, 258, 263, 264, 265, 268, 270, 272, 273, 278, 279, 280], "linear": [2, 6, 7, 12, 18, 19, 22, 42, 45, 47, 49, 51, 71, 78, 96, 100, 101, 106, 118, 119, 120, 126, 131, 133, 135, 138, 139, 140, 145, 153, 154, 163, 167, 173, 174, 175, 177, 182, 188, 192, 193, 198, 205, 209, 210, 212, 215, 217, 221, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 241, 244, 249, 251, 257, 258, 262, 265, 279], "loss": [2, 3, 6, 7, 12, 15, 18, 19, 20, 22, 33, 39, 42, 45, 51, 68, 70, 71, 72, 75, 76, 78, 91, 93, 96, 100, 105, 110, 111, 119, 120, 130, 131, 132, 133, 138, 140, 147, 155, 156, 164, 167, 172, 174, 175, 177, 181, 182, 189, 215, 234, 235, 258, 268, 279, 280], "target": [2, 3, 7, 15, 18, 21, 22, 38, 46, 49, 52, 58, 78, 94, 100, 101, 103, 105, 108, 110, 111, 116, 131, 139, 147, 148, 153, 162, 164, 165, 167, 168, 170, 172, 173, 174, 175, 177, 182, 184, 186, 188, 191, 193, 212, 220, 234, 235, 241, 245, 247, 268, 276], "mseloss": [2, 13, 38, 49, 145, 173, 226, 227, 279], "grad_output": [2, 10, 11], "ones_lik": [2, 101], "create_graph": [2, 142], "gradient_penalti": 2, "dim": [2, 6, 12, 34, 96, 100, 101, 111, 131, 133, 167, 169, 170, 171, 173, 174, 175, 182, 184, 194, 206, 207, 210, 220, 233, 235, 275], "add": [2, 4, 7, 8, 10, 11, 13, 15, 16, 17, 19, 22, 38, 46, 49, 53, 78, 88, 91, 98, 101, 102, 105, 108, 116, 123, 130, 131, 132, 135, 139, 140, 141, 147, 148, 152, 153, 154, 162, 164, 165, 168, 170, 171, 173, 174, 175, 177, 181, 185, 188, 192, 194, 198, 199, 205, 207, 214, 215, 220, 227, 245, 247, 250, 264, 272, 276], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 6, 7, 17, 33, 49, 55, 63, 85, 88, 91, 93, 94, 98, 100, 101, 102, 107, 120, 126, 130, 145, 147, 148, 151, 152, 153, 174, 175, 176, 181, 184, 186, 188, 191, 193, 197, 207, 212, 219, 220, 227, 234, 235, 260, 269, 270, 272, 273, 276], "link": [2, 6, 7, 11, 13, 37, 39, 55, 85, 97, 111, 113, 123, 147, 151, 207, 209, 220, 234, 275], "ad": [2, 6, 7, 11, 16, 21, 26, 33, 52, 53, 56, 78, 86, 88, 93, 96, 98, 100, 101, 102, 105, 107, 120, 131, 132, 138, 139, 140, 145, 148, 151, 154, 159, 162, 168, 172, 176, 177, 188, 191, 214, 234, 235, 257, 259, 262, 273], "subclass": [2, 6, 7, 15, 19, 34, 35, 70, 93, 96, 98, 111, 119, 130, 133, 137, 148, 169, 174, 182, 191, 207, 210, 215, 233, 243, 244, 248, 256, 264, 272, 280], "encod": [2, 15, 42, 43, 49, 51, 98, 106, 109, 111, 132, 137, 148, 163, 171, 175, 184, 192, 198, 215, 244, 275, 280], "method": [2, 4, 6, 7, 10, 11, 12, 13, 15, 18, 19, 22, 33, 34, 40, 42, 46, 49, 52, 54, 58, 78, 86, 88, 93, 94, 96, 98, 100, 101, 103, 105, 107, 111, 112, 120, 129, 130, 134, 137, 138, 142, 145, 148, 151, 152, 153, 154, 155, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 182, 184, 186, 188, 189, 192, 205, 209, 212, 215, 226, 227, 235, 243, 244, 247, 258, 259, 260, 265, 275, 278], "forward": [2, 3, 10, 11, 12, 13, 15, 16, 18, 22, 33, 34, 39, 45, 47, 49, 52, 55, 59, 65, 66, 68, 75, 76, 88, 93, 96, 98, 100, 101, 103, 104, 105, 106, 108, 111, 112, 119, 120, 126, 130, 131, 132, 135, 136, 138, 141, 142, 143, 145, 147, 159, 162, 163, 164, 167, 169, 172, 173, 174, 175, 177, 178, 181, 182, 184, 186, 188, 189, 193, 209, 210, 220, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 241, 244, 247, 250, 251, 260, 275, 276, 279, 280], "detail": [2, 4, 6, 7, 10, 11, 13, 16, 17, 18, 35, 38, 45, 46, 47, 55, 56, 78, 85, 86, 88, 98, 101, 102, 112, 116, 131, 133, 135, 137, 139, 141, 143, 145, 153, 159, 162, 175, 176, 181, 182, 185, 186, 188, 189, 193, 194, 196, 205, 206, 207, 208, 212, 214, 219, 221, 224, 228, 232, 233, 234, 241, 243, 244, 245, 249, 259, 260, 270, 275], "namespac": [2, 4, 7, 10, 11, 34, 111, 116, 168, 186, 193, 210], "inherit": [2, 12, 16, 39, 54, 88, 96, 101, 102, 105, 152, 155, 171, 184, 191, 196, 207, 210, 275], "linearfunct": 2, "public": [2, 10, 11, 16, 133, 168], "static": [2, 4, 10, 11, 15, 93, 151, 168, 188, 189, 198, 235, 260, 276], "option": [2, 4, 6, 7, 10, 11, 12, 37, 46, 48, 50, 54, 56, 85, 91, 93, 94, 97, 98, 101, 103, 113, 116, 118, 129, 133, 134, 137, 143, 148, 149, 153, 156, 165, 167, 169, 170, 184, 186, 188, 189, 196, 198, 210, 225, 232, 244, 245, 250, 260, 264, 268, 269, 270, 273, 274, 276, 280], "autogradcontext": [2, 10, 11], "ctx": [2, 4, 6, 10, 11, 21, 142, 225], "save_for_backward": [2, 4, 6, 142], "mm": [2, 6, 199, 220, 221], "t": [2, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 19, 22, 33, 35, 37, 38, 42, 45, 46, 49, 53, 55, 56, 58, 63, 75, 78, 91, 93, 94, 96, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 113, 116, 119, 120, 126, 131, 132, 136, 142, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 164, 165, 169, 170, 171, 172, 173, 175, 176, 177, 182, 184, 185, 186, 188, 189, 192, 193, 194, 196, 198, 205, 206, 207, 209, 210, 215, 219, 220, 223, 224, 232, 233, 241, 244, 245, 247, 251, 259, 260, 261, 262, 263, 271, 272, 273, 275, 276, 278], "unsqueez": [2, 15, 49, 71, 100, 101, 111, 119, 164, 170, 173, 175, 182, 220], "expand_a": [2, 22], "tensor_list": [2, 10, 11, 147], "save": [2, 4, 7, 12, 13, 22, 33, 34, 35, 36, 37, 38, 42, 43, 46, 51, 52, 53, 55, 78, 91, 100, 102, 103, 121, 126, 130, 131, 133, 135, 137, 141, 153, 154, 167, 169, 173, 174, 175, 177, 178, 181, 184, 189, 196, 216, 220, 234, 235, 247, 248, 249, 250, 258, 259, 260, 262, 263, 264, 265, 270, 274, 280], "get_saved_vari": 2, "grad_input": [2, 142], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 13, 16, 19, 26, 46, 47, 55, 78, 88, 104, 105, 108, 110, 111, 116, 123, 130, 131, 145, 162, 167, 168, 169, 171, 172, 173, 175, 177, 181, 194, 214, 215, 225, 229, 257], "appli": [2, 3, 6, 7, 10, 11, 15, 16, 19, 22, 33, 34, 43, 54, 55, 71, 85, 88, 93, 96, 98, 101, 103, 105, 119, 130, 131, 133, 138, 140, 141, 142, 145, 147, 149, 154, 155, 156, 159, 162, 163, 164, 167, 169, 171, 173, 174, 175, 177, 179, 184, 185, 188, 189, 191, 192, 194, 196, 198, 205, 206, 210, 215, 217, 219, 221, 223, 227, 228, 229, 234, 243, 257, 260, 265, 268, 269, 272, 274, 276], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 6, 7, 11, 12, 15, 20, 22, 33, 34, 35, 38, 39, 45, 49, 52, 55, 93, 94, 96, 98, 101, 103, 107, 111, 119, 120, 126, 130, 136, 138, 141, 147, 151, 152, 154, 165, 168, 171, 173, 174, 175, 176, 178, 181, 182, 184, 188, 194, 210, 226, 227, 234, 235, 245, 257, 259, 260, 262, 264, 265, 275, 280], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 13, 19, 21, 33, 55, 86, 88, 93, 98, 101, 103, 105, 107, 111, 123, 137, 140, 144, 145, 149, 156, 163, 171, 172, 174, 176, 177, 185, 188, 189, 192, 197, 205, 215, 219, 232, 241, 245, 249, 250, 257, 275, 278], "todoubl": 2, "On": [2, 6, 7, 10, 22, 97, 101, 111, 126, 132, 145, 147, 156, 163, 169, 173, 174, 186, 189, 191, 192, 213, 215, 233, 241, 244, 260, 278], "easiest": [2, 6, 37, 97, 111, 154, 171, 188, 260], "your": [2, 4, 7, 8, 10, 12, 13, 16, 17, 19, 20, 21, 22, 33, 34, 37, 39, 45, 46, 47, 49, 52, 53, 54, 56, 57, 58, 70, 78, 85, 91, 93, 94, 97, 98, 101, 102, 105, 107, 108, 110, 112, 113, 115, 116, 119, 120, 121, 123, 130, 131, 132, 133, 136, 138, 141, 142, 143, 144, 145, 147, 148, 151, 152, 154, 155, 156, 160, 162, 163, 165, 168, 169, 170, 171, 174, 175, 176, 179, 181, 182, 184, 186, 188, 189, 192, 196, 199, 200, 209, 213, 214, 215, 217, 219, 220, 223, 228, 243, 244, 245, 250, 258, 259, 261, 262, 263, 264, 265, 272, 273, 274, 275, 280], "tabl": [2, 18, 110, 118, 130, 132, 147, 153, 174, 175, 181, 188, 189, 233, 245, 250], "set_data": 2, "data": [2, 3, 4, 6, 8, 12, 13, 15, 18, 19, 21, 26, 33, 34, 37, 38, 42, 43, 45, 48, 49, 50, 51, 54, 63, 75, 76, 78, 85, 88, 93, 94, 96, 100, 102, 103, 104, 105, 106, 107, 108, 110, 113, 119, 120, 129, 130, 136, 137, 143, 147, 148, 149, 152, 153, 154, 155, 156, 159, 160, 162, 164, 165, 167, 170, 172, 173, 174, 175, 186, 191, 192, 197, 198, 206, 208, 209, 210, 212, 213, 215, 219, 220, 221, 227, 228, 229, 233, 234, 235, 241, 243, 244, 245, 249, 250, 251, 257, 258, 264, 265, 268, 274, 275, 279, 280], "output_nr": 2, "after": [2, 3, 6, 7, 11, 13, 15, 16, 17, 19, 21, 22, 26, 33, 34, 35, 42, 45, 47, 49, 52, 55, 56, 91, 93, 94, 98, 103, 104, 105, 108, 110, 111, 113, 120, 130, 132, 133, 134, 135, 138, 139, 140, 141, 144, 145, 147, 148, 149, 153, 155, 156, 162, 163, 165, 167, 168, 169, 170, 171, 172, 174, 175, 177, 179, 181, 182, 188, 189, 191, 193, 212, 214, 215, 217, 220, 227, 244, 245, 249, 250, 257, 258, 260, 270, 272, 274, 279], "file": [2, 4, 6, 7, 10, 11, 16, 20, 22, 41, 50, 53, 54, 55, 58, 67, 73, 77, 85, 86, 89, 91, 93, 94, 99, 107, 109, 111, 117, 118, 121, 123, 132, 136, 138, 139, 145, 147, 153, 162, 165, 168, 170, 178, 181, 184, 188, 191, 194, 197, 199, 200, 208, 209, 210, 214, 216, 220, 221, 227, 228, 229, 234, 235, 244, 245, 249, 250, 256, 258, 259, 261, 264, 267, 269, 270, 274, 275, 276, 278, 280], "bug": [2, 6, 11, 100, 153, 192, 196, 199, 209, 275], "report": [2, 11, 19, 55, 78, 91, 93, 96, 98, 102, 130, 134, 153, 165, 173, 175, 176, 196, 199, 209, 215, 250, 272], "github": [2, 3, 7, 11, 12, 18, 22, 26, 52, 56, 57, 58, 63, 111, 116, 130, 131, 132, 134, 135, 141, 143, 144, 145, 147, 149, 151, 152, 155, 156, 164, 167, 168, 173, 174, 175, 181, 184, 185, 191, 193, 194, 197, 198, 199, 209, 219, 220, 221, 227, 229, 234, 235, 243, 275], "issu": [2, 6, 7, 10, 22, 54, 132, 133, 144, 149, 152, 153, 156, 164, 165, 170, 181, 186, 188, 189, 192, 196, 197, 198, 199, 205, 207, 209, 210, 214, 219, 221, 227, 228, 241, 244, 246, 257, 275], "fix": [2, 15, 19, 26, 33, 52, 53, 54, 55, 103, 136, 172, 173, 198, 215, 241, 259, 260, 273], "soon": [2, 6, 55, 156, 162, 226, 234], "overview": [2, 6, 7, 12, 56, 58, 96, 129, 130, 138, 139, 145, 147, 168, 171, 173, 174, 175, 177, 181, 192, 205, 206, 208, 213, 216, 221, 223, 280], "alwai": [2, 3, 4, 7, 15, 18, 21, 22, 43, 55, 96, 98, 102, 108, 110, 111, 133, 134, 135, 136, 141, 147, 148, 165, 170, 171, 172, 173, 175, 188, 189, 191, 205, 209, 221, 273], "problem": [2, 7, 12, 15, 16, 21, 52, 54, 55, 104, 106, 110, 111, 119, 126, 137, 148, 153, 154, 163, 171, 173, 175, 181, 185, 186, 189, 205, 207, 221, 245, 246, 249, 260, 275, 278], "question": [2, 6, 7, 10, 11, 19, 52, 94, 132, 147, 152, 177, 189, 206, 215, 221, 245], "forum": [2, 6, 7, 46, 152, 221], "touch": [2, 7, 15, 221], "view": [3, 11, 12, 15, 16, 18, 22, 49, 53, 56, 58, 59, 63, 85, 94, 100, 101, 107, 110, 111, 113, 119, 120, 131, 134, 135, 137, 143, 144, 145, 147, 153, 167, 168, 173, 174, 175, 176, 177, 182, 194, 196, 210, 220, 224, 227, 228, 229, 232, 241, 243, 251, 258, 276], "edit": [3, 7, 12, 13, 18, 22, 51, 53, 63, 134, 135, 145, 147, 152, 153, 167, 168, 170, 173, 174, 175, 194, 198, 227, 229], "code": [3, 4, 6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 26, 33, 34, 35, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 115, 116, 118, 119, 120, 123, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 162, 163, 164, 165, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 194, 196, 197, 198, 206, 207, 208, 209, 210, 214, 215, 219, 221, 224, 225, 227, 228, 229, 232, 234, 235, 243, 244, 245, 246, 247, 249, 250, 251, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 271, 272, 273, 274, 275, 276, 279, 280], "prerequisit": [3, 4, 17, 56, 58, 59, 106, 123, 132, 134, 135, 140, 143, 144, 145, 147, 148, 156, 167, 168, 173, 174, 175, 184, 185, 189, 192, 194, 197, 214, 226, 227, 229, 260], "frontend": [3, 4, 11, 87, 89, 130, 199, 210, 213, 234, 235, 268, 280], "semant": [3, 4, 7, 52, 71, 101, 106, 108, 109, 119, 133, 147, 188, 189, 207, 208, 210, 213, 216, 219, 280], "11": [3, 6, 7, 12, 19, 21, 35, 75, 118, 121, 131, 132, 151, 170, 171, 175, 184, 186, 189, 228, 229, 233, 245, 250], "nvidia": [3, 6, 19, 53, 141, 147, 156, 186, 215, 229, 244, 260, 264], "toolkit": [3, 106, 155, 165, 188, 258], "releas": [3, 4, 7, 11, 19, 53, 118, 120, 131, 132, 136, 162, 174, 176, 181, 185, 215, 225, 226, 233, 234, 235, 250, 260, 265, 275], "greatli": [3, 7, 52, 93, 111, 172], "reduc": [3, 7, 12, 19, 22, 35, 38, 45, 59, 96, 98, 103, 118, 131, 132, 133, 135, 137, 138, 141, 143, 145, 147, 154, 155, 156, 162, 165, 169, 170, 173, 175, 181, 184, 186, 189, 194, 199, 215, 228, 244, 245, 248, 249, 264, 267, 269, 270, 278, 279, 280], "cpu": [3, 4, 6, 7, 10, 11, 12, 15, 16, 21, 22, 34, 39, 42, 45, 46, 51, 52, 55, 65, 76, 78, 85, 86, 91, 101, 103, 105, 111, 113, 118, 119, 126, 130, 131, 133, 134, 135, 138, 145, 147, 156, 163, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 181, 184, 189, 191, 196, 197, 199, 210, 212, 213, 217, 220, 225, 226, 233, 244, 245, 246, 249, 250, 257, 264, 275, 280], "overhead": [3, 6, 7, 11, 19, 59, 85, 118, 131, 132, 135, 140, 145, 154, 156, 165, 170, 173, 175, 176, 181, 186, 192, 196, 198, 199, 210, 215, 226, 245, 250, 260, 271, 278], "increas": [3, 6, 7, 21, 22, 26, 38, 39, 46, 78, 85, 86, 91, 94, 103, 111, 131, 132, 133, 135, 137, 138, 139, 143, 162, 165, 170, 181, 189, 198, 210, 228, 233, 243, 244, 245, 259, 260, 263, 264, 265, 278], "mostli": [3, 11, 22, 88, 93, 103, 138, 175, 177, 193], "util": [3, 4, 6, 11, 16, 22, 26, 35, 39, 46, 52, 54, 56, 58, 85, 96, 100, 102, 111, 118, 119, 120, 126, 130, 131, 132, 133, 135, 138, 140, 147, 151, 153, 154, 156, 163, 165, 167, 168, 170, 171, 174, 176, 177, 181, 182, 184, 185, 186, 191, 197, 210, 212, 215, 217, 220, 223, 226, 227, 234, 235, 241, 243, 244, 258, 259, 264, 267, 268, 270, 272, 274, 276, 278, 280], "deploy": [3, 103, 137, 199, 212, 234, 264, 274], "import": [3, 4, 6, 7, 10, 11, 12, 15, 19, 21, 22, 26, 33, 35, 45, 49, 52, 53, 54, 55, 56, 75, 78, 85, 88, 93, 94, 96, 98, 100, 101, 103, 105, 108, 111, 115, 119, 120, 123, 131, 132, 133, 134, 135, 140, 141, 142, 145, 147, 148, 151, 152, 154, 162, 164, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 181, 182, 185, 186, 188, 189, 193, 194, 196, 199, 200, 205, 207, 208, 209, 210, 212, 214, 215, 217, 220, 221, 223, 224, 225, 226, 227, 229, 233, 234, 235, 241, 245, 251, 257, 258, 259, 260, 265, 268, 270, 275, 276, 278, 279], "appear": [3, 12, 15, 110, 188, 241], "won": [3, 6, 11, 45, 111, 119, 131, 142, 151, 159, 164, 171, 188, 189, 209, 244], "heart": [3, 52, 233], "veri": [3, 4, 6, 7, 10, 15, 16, 21, 22, 26, 42, 47, 49, 51, 52, 68, 78, 88, 94, 98, 105, 107, 111, 119, 126, 131, 135, 136, 138, 162, 163, 172, 173, 175, 176, 177, 179, 181, 182, 189, 191, 205, 207, 241, 250, 259, 273], "time": [3, 4, 6, 7, 10, 12, 13, 14, 15, 16, 17, 19, 22, 33, 34, 35, 38, 39, 40, 42, 43, 45, 46, 47, 49, 51, 52, 53, 54, 55, 63, 68, 71, 75, 76, 78, 86, 88, 91, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 107, 108, 110, 111, 112, 113, 116, 119, 120, 123, 126, 130, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 145, 147, 148, 149, 151, 152, 153, 154, 155, 156, 159, 162, 163, 164, 165, 169, 171, 172, 173, 174, 175, 176, 177, 179, 181, 182, 184, 186, 188, 189, 191, 192, 196, 198, 205, 206, 207, 208, 209, 212, 213, 215, 220, 224, 225, 226, 227, 232, 233, 241, 244, 245, 246, 248, 249, 251, 257, 260, 264, 271, 272, 273, 274, 276], "tool": [3, 7, 10, 15, 54, 85, 91, 93, 94, 98, 102, 104, 119, 131, 145, 147, 148, 153, 165, 173, 176, 181, 182, 184, 192, 196, 228, 241, 249, 272, 278], "compil": [3, 7, 8, 10, 11, 17, 19, 88, 104, 130, 147, 152, 178, 188, 198, 199, 210, 213, 221, 234, 245, 248, 250, 259, 260, 264, 267, 268, 275, 280], "boost": [3, 103, 105, 153, 154, 198, 209, 213, 221, 234, 235], "would": [3, 4, 6, 7, 10, 15, 17, 18, 21, 22, 33, 45, 52, 56, 58, 78, 91, 93, 96, 98, 101, 103, 107, 110, 111, 116, 120, 126, 131, 134, 135, 136, 137, 138, 139, 141, 142, 145, 148, 152, 153, 154, 156, 162, 163, 164, 168, 170, 171, 172, 173, 174, 175, 177, 184, 186, 188, 189, 191, 192, 196, 197, 207, 208, 213, 219, 221, 227, 229, 241, 269, 270, 274, 278], "demonstr": [3, 4, 15, 17, 18, 19, 40, 45, 53, 60, 85, 88, 94, 96, 102, 112, 116, 129, 130, 131, 132, 134, 135, 136, 141, 142, 145, 149, 151, 152, 153, 156, 159, 165, 167, 168, 171, 173, 174, 175, 176, 181, 184, 185, 188, 189, 192, 193, 194, 196, 197, 198, 199, 207, 209, 210, 212, 214, 215, 217, 224, 226, 227, 229, 232, 233, 235, 244, 245, 249, 250, 263, 264, 269, 271, 272, 273, 274, 276, 278, 279], "mnist": [3, 7, 35, 46, 49, 78, 96, 100, 102, 129, 130, 131, 137, 141, 147, 149, 164, 174, 179, 182, 235, 247, 264], "libtorch": [3, 4, 7, 220, 234, 264], "counterpart": [3, 19, 153, 188, 215, 229, 234], "syntax": [3, 51, 87, 89, 90, 120, 130, 245, 280], "step": [3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 33, 37, 38, 45, 46, 49, 52, 55, 63, 78, 85, 88, 93, 96, 100, 102, 103, 104, 105, 111, 113, 116, 129, 130, 131, 132, 133, 138, 139, 140, 141, 143, 145, 147, 148, 153, 155, 159, 163, 165, 172, 173, 174, 175, 176, 177, 178, 182, 184, 186, 188, 189, 193, 196, 197, 198, 200, 209, 210, 212, 215, 217, 220, 223, 224, 226, 227, 234, 235, 241, 244, 257, 258, 260, 268, 274, 276, 279, 280], "depict": [3, 100, 189], "chunk": [3, 6, 58, 147, 162, 165, 167, 194], "batch": [3, 6, 7, 18, 19, 22, 35, 38, 39, 40, 47, 49, 52, 54, 55, 56, 58, 59, 78, 85, 91, 93, 94, 96, 100, 101, 102, 103, 108, 111, 120, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 143, 147, 148, 149, 155, 156, 159, 162, 164, 165, 167, 170, 171, 172, 174, 175, 176, 178, 179, 181, 182, 184, 186, 189, 191, 192, 194, 198, 207, 210, 213, 215, 219, 235, 244, 245, 251, 280], "data_load": [3, 7, 22], "optim": [3, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 33, 34, 35, 36, 37, 40, 42, 43, 45, 49, 52, 56, 58, 63, 68, 69, 70, 73, 85, 88, 91, 93, 96, 100, 103, 104, 112, 116, 120, 126, 130, 131, 132, 135, 140, 141, 143, 145, 147, 148, 149, 153, 155, 156, 163, 164, 165, 169, 170, 171, 172, 173, 174, 177, 178, 181, 182, 184, 185, 186, 188, 191, 192, 198, 200, 205, 210, 212, 213, 215, 220, 221, 226, 227, 232, 234, 235, 244, 245, 249, 257, 261, 264, 265, 267, 268, 269, 272, 274, 275, 280], "zero_grad": [3, 7, 22, 38, 49, 93, 100, 111, 131, 132, 133, 145, 147, 162, 171, 173, 175, 182, 189, 226, 227, 234, 235, 263, 268], "nll_loss": [3, 131, 147, 174, 235], "updat": [3, 7, 11, 12, 13, 14, 15, 18, 19, 22, 38, 45, 46, 52, 55, 72, 75, 85, 93, 103, 105, 110, 111, 112, 119, 120, 130, 131, 132, 133, 137, 141, 145, 148, 156, 162, 171, 172, 174, 175, 181, 189, 192, 205, 214, 215, 221, 223, 227, 232, 235, 244, 257, 262, 279], "captur": [3, 7, 55, 93, 112, 113, 115, 130, 131, 151, 184, 185, 186, 188, 189, 192, 196, 199, 245, 275], "But": [3, 7, 10, 11, 46, 47, 55, 78, 94, 101, 107, 110, 136, 145, 156, 162, 163, 164, 172, 188, 191, 205, 208, 219, 235, 245], "slightli": [3, 6, 15, 132, 147, 148, 165, 170, 177, 208, 245, 260], "prealloc": 3, "reus": [3, 11, 68, 111, 119, 142, 151, 163, 172, 189, 260, 264, 265, 278], "tensoropt": [3, 199], "floatcuda": 3, "dtype": [3, 4, 10, 11, 15, 16, 17, 101, 107, 133, 142, 167, 171, 188, 193, 194, 197, 199, 208, 210, 220, 234, 244, 257, 268, 270, 276], "longcuda": 3, "klong": 3, "zero": [3, 7, 12, 19, 22, 33, 38, 43, 49, 52, 93, 94, 96, 98, 101, 102, 110, 111, 131, 132, 139, 147, 148, 159, 163, 165, 168, 169, 173, 175, 177, 182, 205, 207, 208, 214, 215, 235, 244, 248, 250, 256, 259, 260, 264, 275, 276, 279, 280], "ktrainbatchs": 3, "28": [3, 7, 19, 35, 49, 98, 100, 111, 149, 164, 171, 182, 215, 233, 235, 245, 251, 259], "copy_": [3, 42, 51, 118, 133, 153, 173, 249, 257], "training_step": 3, "call": [3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 26, 33, 34, 35, 38, 40, 42, 43, 45, 46, 47, 49, 52, 54, 55, 56, 58, 70, 78, 88, 93, 94, 96, 98, 100, 101, 103, 105, 107, 110, 111, 116, 118, 119, 120, 129, 130, 131, 133, 134, 135, 136, 137, 139, 140, 145, 147, 148, 151, 152, 153, 155, 156, 159, 162, 163, 164, 165, 167, 168, 169, 171, 173, 174, 175, 176, 177, 179, 181, 184, 188, 189, 196, 199, 214, 215, 219, 220, 221, 224, 226, 227, 228, 233, 244, 245, 246, 247, 249, 250, 258, 259, 260, 263, 270, 271, 272, 273, 275, 276, 278], "void": [3, 4, 6, 7, 16, 153, 168, 199, 209, 245, 250, 259], "net": [3, 7, 22, 46, 47, 49, 52, 55, 78, 88, 91, 96, 100, 101, 103, 131, 147, 159, 170, 174, 181, 182, 235, 247, 251], "stream": [3, 16, 85, 101, 104, 133, 165, 170, 199, 234, 276], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 74, 77, 118, 181, 186, 210, 232, 233, 245, 250, 280], "side": [3, 54, 55, 85, 110, 149, 156, 162, 164, 165, 168, 172, 173, 181, 241], "prepar": [3, 12, 19, 22, 46, 54, 55, 71, 72, 100, 108, 119, 120, 149, 162, 167, 168, 171, 173, 210, 212, 213, 215, 225, 250, 264], "cach": [3, 140, 153, 181, 192, 198, 209, 260, 264, 273, 276, 278], "cubla": [3, 245], "cudnn": [3, 6, 138, 141, 148, 156, 244], "warmupstream": 3, "int": [3, 4, 6, 7, 12, 21, 22, 54, 56, 58, 131, 132, 134, 145, 147, 153, 167, 168, 173, 174, 175, 181, 186, 188, 191, 194, 196, 209, 210, 220, 229, 234, 276, 278], "num_warmup_it": 3, "success": [3, 7, 15, 78, 107, 137, 153, 177, 220, 241], "replac": [3, 4, 7, 22, 26, 45, 58, 60, 94, 105, 111, 112, 116, 118, 126, 130, 131, 133, 147, 151, 169, 175, 177, 181, 185, 188, 191, 194, 198, 207, 210, 218, 234, 245, 275], "replai": [3, 15, 155], "spin": [3, 96], "ordinari": 3, "epoch": [3, 7, 18, 22, 35, 38, 39, 55, 56, 58, 91, 96, 100, 103, 105, 111, 120, 126, 131, 132, 133, 137, 138, 147, 156, 162, 171, 175, 182, 191, 235, 258], "59584": 3, "60000": [3, 147], "3921": 3, "test": [3, 10, 22, 26, 35, 38, 39, 52, 86, 88, 94, 96, 102, 103, 105, 106, 112, 123, 130, 131, 132, 138, 147, 149, 151, 153, 156, 165, 170, 171, 174, 177, 179, 182, 186, 188, 196, 198, 213, 219, 232, 233, 234, 235, 245, 276], "2051": 3, "accuraci": [3, 19, 22, 26, 39, 46, 96, 102, 103, 111, 129, 130, 131, 132, 133, 137, 159, 169, 170, 174, 179, 182, 184, 212, 215, 233, 244, 258, 263, 264], "938": [3, 7, 156], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 156], "968": 3, "1603": [3, 276], "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 7, 12, 22, 35, 37, 49, 52, 75, 88, 94, 96, 98, 100, 101, 110, 112, 116, 118, 119, 120, 141, 142, 147, 153, 154, 156, 168, 169, 170, 171, 173, 175, 184, 186, 188, 192, 198, 200, 210, 215, 229, 233, 235, 244, 251, 272, 273, 274, 278], "0511": 3, "0704": 3, "977": [3, 156, 233], "7": [3, 6, 7, 19, 20, 21, 22, 35, 37, 54, 88, 100, 118, 126, 131, 132, 147, 155, 156, 170, 184, 185, 186, 189, 194, 197, 198, 200, 209, 217, 220, 221, 223, 224, 229, 232, 233, 235, 244, 271, 275, 276], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 6, 7, 19, 21, 22, 35, 41, 45, 52, 75, 91, 96, 100, 110, 111, 118, 120, 153, 163, 170, 171, 173, 182, 184, 189, 200, 215, 220, 233, 234, 235, 245, 247, 250, 251, 268], "0669": 3, "0544": 3, "984": [3, 233], "0219": 3, "0517": 3, "983": [3, 41], "real": [3, 7, 15, 33, 39, 55, 57, 93, 103, 104, 105, 106, 110, 130, 131, 138, 139, 147, 148, 162, 168, 172, 177, 186, 188, 189, 196, 207, 210, 233, 245], "0m44": 3, "287": 3, "018": 3, "sy": [3, 21, 22, 56, 58, 145, 147, 168, 223, 276], "0m1": 3, "116": [3, 171, 196], "produc": [3, 6, 7, 12, 71, 103, 112, 119, 137, 140, 148, 149, 151, 152, 154, 156, 165, 171, 172, 177, 184, 188, 189, 193, 212, 220, 227, 244, 260, 265], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 49, 215], "0520": 3, "0710": 3, "0935": 3, "0666": 3, "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 153], "0m7": 3, "048": [3, 221], "0m0": 3, "619": 3, "gain": [3, 6, 19, 85, 154, 181, 194, 213, 215], "six": [3, 171], "kind": [3, 6, 7, 22, 38, 46, 49, 52, 78, 94, 102, 104, 108, 120, 130, 278], "larg": [3, 4, 6, 7, 8, 13, 17, 18, 19, 21, 38, 42, 52, 63, 91, 94, 98, 100, 103, 108, 110, 111, 113, 119, 126, 129, 130, 131, 132, 134, 137, 141, 145, 147, 149, 159, 165, 167, 171, 172, 174, 175, 176, 184, 186, 189, 191, 194, 196, 207, 215, 217, 223, 229, 233, 244, 250, 251, 260, 265], "improv": [3, 6, 7, 10, 11, 19, 22, 26, 38, 52, 59, 96, 101, 103, 111, 116, 129, 130, 131, 132, 133, 134, 135, 138, 141, 154, 156, 163, 172, 176, 177, 184, 185, 186, 192, 196, 197, 198, 209, 213, 215, 221, 223, 225, 232, 234, 244, 245, 258, 260, 268, 272], "due": [3, 6, 7, 19, 21, 55, 85, 88, 101, 112, 116, 131, 135, 140, 145, 162, 163, 174, 186, 192, 196, 198, 207, 212, 215, 217, 224, 228, 235, 275, 276, 278], "size": [3, 4, 6, 7, 10, 12, 13, 15, 19, 21, 22, 33, 34, 35, 38, 39, 43, 45, 46, 47, 49, 52, 54, 55, 58, 85, 91, 94, 96, 98, 101, 102, 103, 107, 108, 110, 111, 120, 126, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 147, 148, 149, 153, 154, 155, 156, 159, 162, 164, 165, 168, 170, 171, 172, 173, 174, 177, 181, 184, 185, 186, 188, 189, 191, 192, 194, 196, 197, 198, 205, 208, 210, 213, 215, 226, 227, 228, 234, 244, 245, 249, 251, 259, 260, 264, 276, 279], "larger": [3, 10, 13, 78, 85, 93, 103, 111, 115, 120, 130, 131, 132, 135, 137, 143, 165, 172, 175, 177, 181, 184, 185, 186, 198, 210, 226, 227, 233, 245, 265], "heavi": [3, 7, 52, 103, 107], "less": [3, 6, 7, 8, 10, 17, 22, 59, 85, 98, 103, 104, 111, 115, 126, 132, 137, 148, 151, 162, 165, 171, 172, 173, 181, 182, 186, 188, 189, 192, 196, 198, 229, 245, 249], "impact": [3, 13, 19, 38, 91, 103, 148, 165, 173, 176, 198, 215, 243, 278, 279], "smaller": [3, 38, 98, 103, 110, 111, 131, 135, 171, 173, 184, 245, 249, 265], "nevertheless": [3, 6, 22, 156, 171], "richard": 4, "zou": 4, "integr": [4, 7, 11, 15, 17, 37, 91, 112, 116, 118, 130, 137, 140, 167, 181, 182, 186, 192, 193, 209, 213, 214, 220, 226, 233, 241, 243, 257, 262, 272, 278], "opcheck": [4, 17], "basic": [4, 10, 12, 16, 17, 18, 26, 33, 34, 35, 38, 39, 40, 41, 42, 43, 52, 57, 59, 60, 76, 80, 83, 90, 93, 96, 97, 98, 100, 101, 103, 106, 110, 111, 112, 113, 115, 116, 119, 130, 135, 138, 141, 153, 160, 167, 171, 176, 189, 192, 206, 210, 226, 227, 245, 258, 264, 269, 270, 274, 275, 280], "program": [4, 6, 21, 63, 98, 104, 106, 107, 110, 130, 135, 138, 152, 165, 167, 174, 186, 194, 196, 200, 214, 227, 245, 260, 274, 275, 278], "amd": [4, 6], "rocm": [4, 6, 181], "modif": [4, 15, 16, 22, 91, 104, 111, 141, 147, 169, 171, 174, 179, 182, 188, 192, 259, 265, 275], "e": [4, 6, 7, 8, 10, 11, 12, 17, 21, 33, 34, 39, 45, 46, 52, 54, 55, 63, 78, 88, 91, 93, 96, 98, 101, 103, 106, 110, 111, 120, 126, 130, 131, 133, 134, 135, 137, 138, 139, 142, 144, 145, 147, 149, 156, 163, 164, 168, 169, 171, 173, 175, 177, 181, 185, 186, 188, 192, 193, 207, 208, 210, 212, 213, 217, 219, 220, 225, 229, 232, 234, 245, 247, 250, 259, 260, 262, 263], "g": [4, 6, 7, 8, 10, 11, 12, 15, 17, 21, 45, 52, 54, 55, 63, 91, 93, 96, 98, 101, 103, 105, 106, 110, 126, 130, 131, 133, 137, 138, 139, 145, 147, 149, 153, 162, 164, 168, 171, 173, 175, 177, 181, 186, 188, 192, 193, 199, 208, 212, 213, 219, 220, 229, 232, 245, 250, 259, 260], "etc": [4, 8, 11, 17, 46, 47, 49, 52, 54, 72, 96, 98, 101, 104, 105, 106, 107, 111, 120, 135, 165, 169, 171, 172, 177, 188, 189, 192, 207, 212, 225, 233, 234, 245, 247, 260, 262], "wish": [4, 6, 7, 8, 17, 55, 78, 94, 101, 120, 134, 159, 164, 174, 184, 189, 193, 206, 227, 244, 273], "bring": [4, 8, 94, 134, 165, 171, 181, 184, 189, 198, 208, 219, 250, 260, 278], "bless": 4, "path": [4, 6, 7, 21, 22, 35, 52, 53, 55, 56, 78, 85, 91, 93, 96, 101, 102, 103, 104, 111, 120, 131, 132, 153, 168, 184, 186, 192, 196, 197, 198, 205, 212, 220, 221, 226, 227, 241, 245, 257, 259, 260, 261, 276, 278], "fuse": [4, 6, 19, 22, 130, 153, 170, 178, 192, 193, 198, 209, 215, 220, 232, 264, 280], "subsystem": [4, 8, 17, 188, 272], "def": [4, 6, 7, 10, 12, 15, 21, 22, 35, 49, 56, 58, 88, 100, 111, 120, 131, 132, 133, 134, 135, 140, 142, 145, 147, 153, 154, 163, 167, 168, 173, 174, 175, 182, 184, 193, 194, 199, 200, 205, 209, 210, 212, 214, 215, 217, 223, 225, 226, 227, 229, 233, 235, 241, 245, 251, 270, 275, 276, 279], "mymuladd": 4, "bind": [4, 7, 8, 11, 130, 134, 197, 260, 278], "precompil": 4, "instead": [4, 5, 6, 7, 8, 10, 11, 17, 19, 22, 23, 24, 25, 33, 46, 47, 52, 54, 55, 56, 66, 93, 96, 101, 104, 105, 110, 111, 118, 119, 126, 131, 132, 133, 136, 137, 139, 142, 143, 147, 152, 154, 155, 156, 159, 162, 168, 169, 170, 173, 174, 175, 177, 179, 181, 182, 184, 185, 186, 188, 189, 191, 192, 193, 198, 205, 207, 208, 209, 210, 215, 219, 220, 227, 230, 233, 236, 241, 251, 265, 271, 273, 277, 279], "cpp_extens": [4, 6, 11, 168, 245], "extens": [4, 7, 8, 16, 20, 55, 94, 120, 130, 133, 140, 142, 147, 184, 199, 205, 207, 213, 233, 235, 245, 248, 256, 264, 271, 280], "ahead": [4, 6, 38, 96, 140, 162, 182, 188, 193, 227, 260, 274], "setuptool": [4, 11, 168, 181], "load_inlin": [4, 245], "setup": [4, 6, 7, 11, 18, 22, 37, 55, 56, 58, 131, 132, 137, 145, 162, 168, 175, 196, 198, 207, 208, 214, 219, 220, 226, 227, 229, 245, 259], "extension_cpp": 4, "ext_modul": [4, 6, 11, 168], "cppextens": [4, 6, 11, 168], "muladd": 4, "cpp": [4, 6, 7, 10, 129, 130, 153, 209, 213, 234, 259, 274], "py_limited_api": 4, "min": [4, 22, 55, 85, 98, 103, 111, 126, 147, 168, 171, 173, 175, 184, 188, 275], "expos": [4, 6, 7, 10, 102, 133, 175, 189, 214, 220, 260], "stabl": [4, 27, 28, 29, 30, 31, 52, 65, 78, 103, 104, 119, 126, 134, 150, 170, 180, 181, 183, 218, 235, 244], "limit": [4, 7, 11, 12, 16, 19, 22, 40, 52, 63, 78, 112, 131, 135, 138, 148, 149, 155, 156, 164, 165, 177, 185, 186, 188, 189, 198, 215, 226, 245, 257], "subset": [4, 15, 88, 91, 96, 100, 103, 115, 126, 147, 168, 184, 207, 208, 233, 245], "extra_compile_arg": [4, 11], "cxx": [4, 7, 200, 220, 234], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 52, 103, 171, 181, 213], "cmdclass": [4, 6, 11, 168], "build_ext": [4, 6, 11, 168], "buildextens": [4, 6, 11, 168], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 168], "cpython": [4, 6, 259], "agnost": [4, 6, 185, 246], "pure": [4, 6, 7, 11, 49, 130, 138, 142, 149, 164, 188, 191, 199, 209], "agnostic": 4, "minim": [4, 7, 11, 13, 19, 38, 55, 65, 66, 70, 71, 72, 75, 76, 78, 85, 93, 105, 110, 111, 119, 130, 132, 137, 144, 153, 167, 172, 186, 205, 212, 215, 260, 263, 265], "oldest": 4, "hexcod": 4, "throughout": [4, 13, 55, 108, 147, 162, 165, 171, 182, 207, 257], "environ": [4, 6, 7, 8, 12, 17, 20, 21, 37, 58, 85, 88, 94, 97, 100, 113, 123, 130, 131, 132, 135, 140, 144, 145, 147, 153, 165, 167, 168, 172, 173, 174, 175, 186, 188, 189, 192, 194, 196, 209, 214, 220, 221, 225, 226, 227, 228, 229, 233, 241, 243, 245, 259, 260, 269, 274, 276, 278, 279, 280], "unknown": 4, "behavior": [4, 10, 11, 12, 13, 15, 38, 52, 54, 98, 108, 111, 112, 148, 152, 153, 156, 162, 165, 186, 188, 206, 207, 217, 249, 260, 271, 273, 278], "runnabl": [4, 137, 153, 263], "three": [4, 7, 11, 13, 15, 16, 35, 38, 54, 55, 66, 78, 85, 88, 93, 94, 100, 101, 104, 111, 116, 119, 120, 130, 134, 135, 138, 139, 156, 160, 163, 165, 168, 171, 175, 176, 177, 179, 181, 182, 189, 196, 198, 208, 209, 241, 250], "line": [4, 6, 7, 10, 13, 17, 52, 53, 54, 58, 59, 85, 96, 100, 101, 102, 103, 105, 111, 118, 137, 138, 139, 145, 147, 153, 170, 172, 174, 175, 177, 181, 182, 186, 188, 196, 199, 200, 205, 207, 226, 227, 229, 234, 235, 249, 258, 260, 275, 276, 278], "specif": [4, 6, 7, 10, 11, 12, 19, 21, 22, 35, 39, 46, 58, 78, 85, 91, 93, 94, 96, 98, 100, 102, 105, 106, 107, 111, 112, 113, 115, 116, 120, 123, 131, 132, 135, 138, 139, 141, 147, 148, 153, 165, 167, 169, 171, 173, 174, 175, 176, 177, 181, 182, 185, 188, 189, 191, 192, 193, 206, 209, 210, 212, 214, 215, 220, 221, 225, 226, 227, 233, 234, 241, 243, 250, 257, 259, 264, 269, 272, 274, 278, 279], "verifi": [4, 7, 88, 93, 101, 116, 123, 142, 149, 151, 154, 156, 169, 170, 185, 189, 191, 197, 220, 233, 234, 241], "met": [4, 15, 131, 165], "crash": [4, 7, 196], "wors": [4, 22], "silent": [4, 17, 153, 186, 257], "incorrect": [4, 17, 55, 93, 96, 136, 142, 165, 186], "avoid": [4, 6, 18, 46, 91, 100, 103, 131, 132, 133, 135, 141, 145, 147, 156, 159, 162, 171, 173, 186, 188, 197, 198, 205, 206, 210, 213, 214, 215, 217, 226, 244, 245, 249, 250, 257, 269, 278], "unstabl": 4, "libtorch_python": 4, "particular": [4, 6, 7, 10, 12, 35, 46, 54, 85, 86, 91, 93, 94, 96, 98, 110, 135, 137, 138, 140, 147, 149, 159, 164, 167, 174, 184, 188, 191, 192, 193, 205, 206, 208, 210, 249, 260, 269], "aten": [4, 6, 10, 11, 16, 116, 118, 153, 181, 188, 199, 209, 212, 233, 234, 241, 250, 259, 276], "strongli": [4, 16, 148, 163, 192], "recommend": [4, 7, 8, 10, 11, 16, 21, 22, 63, 85, 94, 100, 111, 113, 115, 130, 133, 139, 145, 160, 170, 177, 181, 188, 189, 191, 192, 194, 196, 207, 212, 213, 221, 226, 233, 234, 241, 249, 258, 259, 260], "ascertain": [4, 197], "compliant": [4, 191, 226, 227], "safe": [4, 22, 103, 165], "guarante": [4, 11, 103, 144, 147, 156, 165, 169, 174, 175, 188, 206, 275], "better": [4, 6, 7, 15, 19, 22, 35, 38, 39, 46, 55, 59, 93, 96, 98, 100, 103, 110, 111, 115, 118, 130, 133, 134, 137, 138, 139, 140, 153, 154, 155, 162, 164, 165, 171, 172, 177, 181, 182, 184, 188, 194, 198, 205, 206, 215, 221, 245, 260, 268, 278], "wild": 4, "west": 4, "There": [4, 7, 10, 11, 15, 16, 19, 33, 49, 78, 88, 93, 94, 96, 98, 101, 102, 103, 104, 105, 108, 110, 111, 126, 129, 139, 140, 144, 148, 149, 152, 154, 156, 159, 162, 164, 167, 170, 171, 174, 175, 177, 188, 189, 190, 191, 192, 193, 196, 207, 215, 245, 247, 252, 253, 254, 255, 259, 260, 263, 266, 269, 274, 276, 278], "caveat": [4, 145, 173, 196, 245, 249], "yourself": [4, 6, 7, 10, 37, 96, 107, 130, 155, 189], "truli": [4, 7, 52, 155], "relev": [4, 7, 15, 56, 104, 106, 110, 123, 132, 135, 169, 184, 188, 197, 260, 262, 269, 275], "third": [4, 7, 10, 13, 17, 55, 65, 66, 68, 70, 71, 72, 75, 76, 98, 101, 108, 119, 130, 134, 142, 168, 177, 205, 219], "intend": [4, 6, 7, 10, 13, 93, 103, 131, 135, 153, 156, 176, 186, 188, 192, 205, 225, 247, 260, 270], "influenc": [4, 7, 55, 98, 165, 278], "accordingli": [4, 11, 21, 148, 162, 173, 184, 221], "command": [4, 6, 7, 15, 53, 94, 100, 102, 115, 123, 130, 133, 144, 145, 165, 168, 171, 173, 174, 175, 177, 181, 182, 184, 191, 194, 196, 200, 227, 229, 233, 234, 250, 258, 260, 274, 275, 276], "consequ": [4, 135, 165, 172, 188], "properli": [4, 10, 11, 15, 53, 58, 103, 142, 145, 147, 156, 162, 163, 171, 173, 174, 175, 177, 192, 205, 207, 217, 257], "could": [4, 6, 7, 10, 11, 12, 55, 91, 93, 98, 103, 104, 105, 107, 108, 110, 113, 118, 131, 132, 135, 136, 139, 147, 156, 162, 165, 171, 172, 173, 174, 175, 177, 181, 182, 184, 188, 191, 193, 205, 207, 209, 212, 219, 227, 228, 229, 234, 235, 241, 249, 250, 278], "outsid": [4, 11, 15, 16, 47, 130, 133, 135, 141, 181, 184, 188, 205, 257, 265, 273], "cannot": [4, 6, 7, 12, 15, 21, 52, 63, 85, 101, 112, 116, 119, 120, 133, 134, 142, 145, 147, 148, 156, 165, 171, 186, 188, 198, 219, 272], "mymuladd_cpu": 4, "const": [4, 6, 7, 10, 11, 16, 153, 168, 199, 209, 234, 245, 259], "torch_check": [4, 6, 10], "torch_internal_assert": [4, 10], "devicetyp": [4, 10, 16], "a_contig": 4, "contigu": [4, 6, 10, 34, 156, 171, 209, 260], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 10, 199], "b_ptr": 4, "result_ptr": [4, 10], "int64_t": [4, 7, 10, 209], "numel": [4, 10, 171, 173, 205, 259], "order": [4, 7, 8, 12, 13, 16, 17, 19, 33, 34, 35, 46, 47, 52, 53, 58, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 91, 93, 94, 96, 101, 111, 112, 113, 115, 116, 118, 119, 130, 131, 133, 136, 137, 139, 142, 145, 147, 152, 153, 154, 156, 168, 169, 174, 177, 179, 184, 186, 188, 189, 191, 192, 193, 194, 207, 210, 215, 219, 249, 259, 269, 270, 278], "torch_librari": [4, 7, 8, 10, 17, 234], "ensur": [4, 6, 10, 11, 12, 13, 15, 16, 22, 39, 52, 56, 59, 66, 103, 111, 112, 118, 119, 120, 131, 144, 145, 147, 151, 165, 167, 171, 172, 174, 176, 184, 185, 186, 189, 197, 199, 209, 214, 217, 226, 245, 247, 257, 263, 272, 278], "awar": [4, 78, 93, 101, 135, 137, 147, 148, 156, 176, 188, 205, 272], "top": [4, 6, 7, 10, 19, 22, 37, 53, 55, 85, 86, 94, 97, 100, 103, 111, 135, 147, 170, 175, 176, 181, 182, 186, 191, 212, 215, 233, 241, 243], "project": [4, 6, 7, 55, 93, 100, 120, 135, 168, 172, 177, 182, 210, 234, 235, 241, 264, 279], "schema": [4, 11], "mutat": [4, 10, 11, 17, 119, 149, 164, 165, 188, 219, 224], "m": [4, 6, 7, 10, 11, 15, 16, 22, 33, 45, 52, 93, 98, 107, 111, 131, 132, 153, 154, 168, 170, 173, 175, 209, 215, 217, 227, 233, 241, 260, 278], "torch_library_impl": [4, 10, 11, 16], "impl": [4, 10, 11, 16, 259], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 22, 35, 170, 182, 215], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 13, 103, 184, 193, 250], "256": [4, 7, 19, 22, 54, 91, 135, 136, 155, 171, 177, 188, 215, 221, 233, 250, 276], "faketensor": [4, 17, 188, 197, 276], "kernel": [4, 6, 7, 8, 10, 14, 17, 19, 21, 49, 86, 98, 101, 111, 116, 130, 133, 138, 149, 153, 156, 163, 164, 165, 176, 177, 178, 181, 185, 186, 188, 189, 192, 198, 199, 200, 209, 212, 215, 218, 221, 241, 245, 247, 249, 250, 260, 264, 267, 270, 275, 276, 280], "meta": [4, 17, 21, 133, 135, 137, 149, 164, 171, 188, 217, 251, 257, 264], "abstract": [4, 6, 12, 15, 35, 54, 63, 91, 101, 102, 106, 111, 119, 135, 137, 147, 165, 168, 171, 189, 228, 229], "metadata": [4, 11, 17, 19, 100, 140, 171, 182, 188, 197, 215, 249], "correct": [4, 6, 7, 10, 11, 12, 13, 14, 17, 22, 38, 45, 46, 49, 52, 66, 78, 88, 91, 93, 94, 96, 98, 101, 102, 104, 105, 111, 119, 131, 132, 136, 141, 148, 153, 156, 163, 171, 173, 174, 177, 179, 181, 182, 189, 194, 197, 210, 229, 235, 244, 257, 275], "stride": [4, 6, 7, 17, 22, 49, 55, 94, 98, 111, 131, 141, 153, 156, 184, 188, 193, 197, 208, 249, 251, 276], "register_fak": [4, 17], "though": [4, 7, 11, 49, 78, 93, 101, 103, 104, 126, 141, 142, 149, 152, 164, 171, 182, 188, 189, 198, 205, 234, 245, 259], "definit": [4, 6, 7, 10, 11, 40, 49, 71, 78, 88, 105, 119, 130, 152, 163, 172, 176, 206, 235, 259, 260], "load": [4, 6, 19, 21, 22, 26, 33, 34, 36, 37, 38, 42, 43, 45, 49, 54, 55, 58, 78, 91, 96, 101, 102, 104, 111, 113, 121, 130, 131, 133, 138, 153, 156, 162, 165, 167, 171, 181, 182, 184, 188, 191, 196, 198, 199, 214, 215, 216, 220, 226, 234, 235, 244, 248, 256, 257, 259, 264, 265, 274, 275, 276, 280], "strive": 4, "load_librari": 4, "next": [4, 6, 7, 10, 12, 13, 15, 16, 18, 19, 22, 35, 45, 52, 54, 56, 58, 59, 85, 88, 93, 96, 98, 100, 101, 103, 104, 108, 111, 113, 120, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 144, 148, 149, 152, 153, 155, 159, 162, 164, 165, 172, 173, 174, 175, 177, 181, 182, 188, 189, 194, 198, 200, 207, 208, 215, 233, 234, 241, 249, 250, 265, 270], "_c": [4, 134, 196, 276], "_": [4, 5, 6, 12, 13, 15, 16, 22, 25, 42, 51, 52, 55, 101, 104, 111, 133, 134, 138, 147, 154, 159, 171, 173, 175, 182, 194, 212, 223, 225, 233, 244, 249, 275, 276, 279], "_check": 4, "empty_lik": [4, 101, 156, 205], "formula": [4, 11, 17, 103, 151, 171], "matter": [4, 6, 184, 205, 207, 223, 244], "wrong": [4, 55, 78, 105, 138, 153, 186], "hold": [4, 6, 15, 18, 21, 49, 65, 66, 68, 70, 71, 72, 91, 111, 119, 131, 132, 133, 138, 144, 162, 172, 173, 175, 249, 257, 260], "happen": [4, 10, 33, 34, 35, 38, 45, 55, 93, 96, 98, 101, 103, 105, 111, 113, 132, 133, 135, 142, 145, 147, 165, 169, 173, 181, 182, 188, 189, 198, 228, 245, 249, 260, 263, 273, 275], "modul": [4, 6, 13, 14, 15, 18, 21, 22, 26, 34, 39, 40, 43, 46, 47, 49, 52, 56, 58, 63, 69, 71, 73, 93, 94, 96, 100, 101, 102, 105, 110, 115, 120, 121, 126, 130, 131, 132, 133, 135, 136, 140, 141, 145, 147, 152, 153, 156, 159, 162, 164, 167, 168, 170, 171, 173, 174, 175, 176, 179, 182, 184, 185, 186, 188, 192, 193, 196, 198, 199, 209, 210, 212, 213, 214, 215, 220, 225, 226, 227, 228, 229, 233, 234, 235, 241, 245, 247, 248, 250, 251, 256, 260, 262, 264, 265, 276, 278, 280], "initi": [4, 7, 10, 12, 15, 18, 21, 22, 34, 35, 38, 45, 52, 58, 66, 75, 76, 78, 94, 96, 101, 102, 103, 105, 108, 110, 111, 118, 119, 120, 126, 131, 132, 135, 138, 139, 148, 149, 153, 156, 162, 165, 167, 169, 170, 172, 173, 174, 175, 177, 181, 185, 186, 189, 192, 194, 196, 208, 213, 220, 226, 227, 229, 233, 241, 243, 245, 249, 257, 260, 265, 276], "pybind11_modul": [4, 6, 168], "notic": [4, 6, 10, 15, 33, 45, 46, 55, 78, 88, 93, 96, 101, 103, 105, 120, 142, 147, 153, 155, 163, 164, 171, 181, 186, 188, 192, 205, 207, 263, 275], "pybind11": [4, 6, 10, 168, 245], "promis": [4, 111, 209], "With": [4, 10, 11, 16, 18, 19, 21, 22, 42, 51, 55, 78, 88, 93, 94, 100, 107, 133, 135, 142, 145, 147, 153, 159, 162, 167, 173, 174, 175, 176, 177, 178, 194, 198, 199, 215, 221, 224, 225, 226, 229, 241, 243, 249, 257, 260, 274, 278, 279, 280], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 105, 162, 165, 189, 192], "sai": [4, 6, 7, 17, 26, 45, 54, 101, 105, 107, 110, 133, 136, 149, 154, 162, 169, 181, 198], "not_agnost": 4, "csrc": [4, 6, 168], "extension_bad": 4, "__init__": [4, 6, 7, 12, 15, 22, 34, 39, 49, 54, 56, 96, 98, 100, 105, 111, 120, 131, 138, 140, 145, 147, 167, 169, 173, 174, 175, 182, 184, 193, 209, 210, 214, 217, 225, 226, 227, 229, 233, 235, 241, 247, 249, 251, 275, 276], "successfulli": [4, 7, 53, 113, 134, 137, 147, 153, 167, 174, 188, 189, 207, 220, 232, 233, 247, 261, 262, 263], "extern": [4, 54, 103, 120, 137, 152, 153, 199, 209, 260], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 16], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 196, 241], "interpret": [4, 6, 7, 59, 85, 88, 94, 110, 130, 139, 140, 177, 186, 188, 199, 213, 245, 248, 256, 259, 264, 275, 278, 280], "global": [4, 6, 7, 52, 59, 91, 135, 154, 162, 167, 174, 179, 188, 214, 215, 223, 225, 228, 246, 257, 259, 260, 276], "variabl": [4, 6, 7, 10, 33, 52, 85, 91, 93, 101, 104, 105, 107, 111, 123, 140, 144, 147, 153, 167, 173, 176, 188, 189, 192, 196, 198, 200, 207, 209, 210, 214, 219, 220, 221, 233, 241, 269, 276, 278], "pymodule_cr": 4, "entir": [4, 6, 7, 15, 18, 21, 22, 49, 52, 56, 103, 105, 108, 111, 126, 130, 131, 132, 138, 140, 141, 162, 164, 167, 169, 171, 175, 177, 185, 188, 189, 205, 206, 207, 227, 244, 249, 251, 260, 264, 265, 275], "statement": [4, 10, 33, 45, 47, 112, 177, 188, 214, 244, 246], "trigger": [4, 133, 145, 153, 165, 173, 175, 185, 260, 276], "challeng": [4, 15, 107, 108, 112, 131, 134, 135, 147, 163, 172, 184, 185, 227, 228, 229, 245, 264], "shift": [4, 171], "toward": [4, 22, 52, 103, 139, 172], "trivial": [4, 15, 54, 59, 101, 136, 189, 217, 228], "pathlib": [4, 111, 132, 184], "so_fil": 4, "__file__": [4, 6, 168, 245, 276], "glob": 4, "assert": [4, 6, 12, 21, 22, 100, 133, 140, 145, 153, 154, 174, 176, 182, 188, 194, 196, 210, 215, 223, 270], "len": [4, 22, 35, 49, 54, 58, 100, 111, 126, 131, 132, 133, 147, 173, 174, 182, 184, 215, 229, 235], "f": [4, 6, 10, 12, 13, 17, 21, 22, 33, 35, 45, 49, 56, 58, 75, 93, 100, 105, 111, 119, 120, 131, 132, 134, 135, 136, 145, 147, 153, 154, 167, 168, 170, 171, 173, 174, 175, 182, 184, 194, 196, 199, 210, 215, 219, 223, 225, 226, 227, 229, 233, 235, 241, 245, 251, 276, 279], "register_autograd": [4, 17, 272], "prefer": [4, 7, 10, 17, 56, 154, 159, 168, 171, 186, 189, 196, 209, 244, 272], "directli": [4, 6, 7, 10, 12, 13, 15, 17, 34, 42, 51, 55, 88, 91, 93, 94, 101, 112, 113, 115, 116, 133, 134, 135, 140, 142, 143, 154, 165, 170, 171, 175, 177, 189, 196, 198, 207, 208, 210, 217, 220, 225, 227, 235, 278], "_backward": 4, "saved_tensor": [4, 6, 142], "grad_a": [4, 75, 119], "grad_b": [4, 75, 119], "none": [4, 12, 15, 16, 21, 22, 35, 49, 52, 91, 93, 103, 111, 131, 132, 133, 147, 149, 153, 154, 156, 164, 167, 174, 184, 188, 193, 212, 215, 217, 221, 226, 227, 229, 258, 270, 276], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 8, 12, 17, 105, 106, 154, 167, 171, 229, 272], "had": [4, 7, 49, 54, 93, 96, 101, 108, 111, 113, 119, 162, 163, 172, 182, 234, 241, 257], "own": [4, 6, 7, 10, 11, 12, 15, 18, 19, 21, 34, 35, 52, 55, 66, 78, 91, 93, 94, 96, 111, 116, 118, 119, 130, 131, 132, 133, 139, 140, 141, 145, 153, 162, 163, 169, 170, 171, 174, 175, 177, 184, 186, 188, 189, 191, 192, 193, 196, 198, 215, 226, 228, 245, 257], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 13, 17, 52, 55, 78, 93, 94, 96, 123, 130, 133, 151, 156, 162, 165, 167, 169, 170, 184, 186, 189, 192, 207, 229, 263], "mathemat": [4, 11, 14, 17, 45, 51, 66, 93, 96, 98, 107, 147, 171, 188], "plan": [4, 7, 8, 11, 21, 120, 132, 135, 184, 189, 208, 220], "gradcheck": [4, 17, 141, 142, 151, 260], "sample_input": [4, 120], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 7, 22, 35, 75, 85, 88, 91, 100, 101, 118, 131, 137, 138, 145, 147, 148, 156, 162, 169, 171, 173, 175, 181, 215, 235, 245, 250, 259, 275, 279], "14": [4, 7, 26, 49, 96, 131, 153, 171, 184, 192, 233, 234, 235, 245, 250, 251, 278], "123": [4, 54, 171, 175, 233], "reference_muladd": 4, "extend": [4, 6, 7, 10, 22, 26, 55, 91, 112, 113, 114, 115, 130, 131, 139, 148, 170, 171, 174, 175, 184, 185, 189, 193, 196, 199, 213, 234, 235, 260, 265, 269, 271], "arg": [4, 21, 22, 56, 58, 107, 120, 131, 132, 145, 147, 152, 172, 173, 174, 175, 184, 186, 188, 199, 210, 223, 225, 226, 227, 234, 275, 276, 279], "assert_clos": 4, "check": [4, 6, 7, 10, 14, 15, 16, 22, 37, 38, 39, 42, 45, 46, 47, 52, 53, 55, 58, 61, 62, 78, 84, 88, 93, 96, 98, 100, 101, 102, 103, 104, 107, 111, 113, 118, 130, 131, 132, 133, 134, 137, 138, 145, 147, 148, 151, 153, 156, 164, 165, 169, 170, 171, 174, 184, 185, 186, 188, 189, 191, 192, 200, 202, 203, 208, 209, 210, 211, 212, 214, 220, 222, 227, 233, 234, 237, 238, 239, 240, 241, 242, 244, 250, 268, 270, 274, 275], "undefin": [4, 147, 192, 205, 206, 207], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 156, 259], "caus": [4, 13, 16, 78, 85, 93, 101, 111, 136, 153, 165, 170, 173, 177, 181, 184, 188, 189, 196, 205, 214, 241, 246, 260, 273, 278], "incompat": [4, 134, 188, 275], "went": [4, 55, 98, 101, 140, 153], "fairli": [4, 6, 103, 111, 147, 162, 172, 192], "torchscript": [5, 23, 24, 25, 113, 130, 213, 230, 250, 264, 277], "export": [5, 8, 10, 23, 24, 25, 49, 88, 93, 114, 115, 130, 144, 145, 153, 176, 178, 186, 209, 214, 221, 230, 233, 244, 260, 264, 277, 280], "http": [5, 7, 21, 22, 25, 26, 27, 28, 29, 30, 31, 36, 47, 48, 52, 65, 78, 79, 80, 81, 82, 83, 84, 87, 95, 100, 103, 106, 111, 113, 114, 116, 119, 126, 131, 138, 139, 141, 150, 151, 152, 156, 162, 164, 170, 177, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 193, 198, 201, 204, 206, 208, 218, 219, 220, 235, 243, 244, 245, 248, 249, 252, 253, 254, 255, 258, 275], "org": [5, 7, 25, 27, 28, 29, 30, 31, 36, 47, 48, 52, 65, 78, 79, 80, 81, 82, 83, 84, 87, 95, 98, 100, 102, 103, 106, 114, 119, 126, 138, 139, 150, 151, 152, 162, 170, 177, 180, 181, 183, 186, 187, 188, 189, 198, 201, 204, 206, 208, 213, 218, 219, 220, 235, 241, 244, 248, 249, 252, 253, 254, 255], "torch_export_tutori": [5, 25, 178, 187, 188, 280], "html": [5, 25, 27, 28, 29, 30, 31, 36, 47, 48, 52, 65, 78, 79, 80, 81, 82, 83, 87, 95, 103, 106, 114, 119, 123, 126, 150, 152, 180, 183, 184, 187, 188, 189, 201, 204, 206, 208, 218, 244, 248, 249, 252, 253, 254, 255], "peter": 6, "goldsborough": 6, "newest": [6, 10], "date": [6, 7, 10, 11, 78, 80, 81, 82, 83, 84, 132, 174, 234, 257, 274], "plethora": 6, "relat": [6, 12, 15, 55, 93, 94, 101, 102, 107, 110, 130, 135, 153, 163, 188, 192, 209, 245, 260], "algebra": [6, 15, 42, 51, 96, 101, 105, 233], "wrangl": 6, "novel": [6, 94, 194], "activ": [6, 7, 11, 13, 15, 16, 19, 22, 34, 49, 55, 61, 62, 85, 93, 94, 96, 103, 105, 111, 132, 135, 140, 143, 147, 154, 162, 169, 170, 181, 192, 193, 194, 199, 200, 202, 203, 211, 212, 215, 221, 222, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 250, 260], "research": [6, 7, 19, 22, 52, 55, 78, 88, 94, 101, 105, 123, 147, 159, 164, 169, 184, 215, 275], "outlin": [6, 7, 165, 189], "power": [6, 7, 45, 52, 60, 68, 78, 91, 93, 96, 103, 105, 111, 119, 130, 131, 137, 145, 147, 153, 155, 159, 168, 169, 170, 177, 184, 185, 198, 208, 232, 245, 272, 278], "spare": [6, 7], "deriv": [6, 7, 11, 17, 19, 33, 38, 42, 45, 51, 93, 101, 105, 107, 108, 110, 119, 136, 138, 142, 151, 154, 215, 260], "express": [6, 8, 17, 93, 96, 98, 101, 104, 115, 123, 135, 188, 192, 207, 212, 232], "realli": [6, 10, 46, 93, 98, 101, 104, 105, 110, 119, 121, 130, 136, 182, 205, 207, 219, 245, 280], "frequent": [6, 33, 85, 110, 119, 131, 207, 234, 273], "expens": [6, 19, 42, 103, 118, 175, 188, 198, 215, 250, 259, 273], "even": [6, 7, 10, 11, 15, 18, 45, 46, 54, 78, 93, 96, 98, 101, 110, 111, 120, 131, 132, 135, 140, 142, 145, 152, 154, 163, 165, 171, 173, 176, 184, 188, 189, 192, 198, 205, 207, 208, 233, 245, 260, 261], "few": [6, 7, 10, 11, 16, 22, 49, 54, 59, 88, 93, 94, 96, 101, 103, 105, 106, 107, 108, 110, 120, 129, 132, 133, 136, 138, 139, 140, 145, 147, 148, 163, 165, 170, 171, 174, 177, 186, 192, 193, 198, 206, 207, 208, 224, 227, 234, 235, 244, 259, 260, 261, 269], "plausibl": 6, "address": [6, 13, 21, 26, 85, 98, 130, 134, 147, 165, 173, 174, 188, 189, 192, 214, 228, 235, 257, 264, 278], "mechan": [6, 7, 12, 15, 16, 26, 33, 52, 59, 102, 130, 142, 152, 163, 177, 179, 181, 188, 212, 213, 234, 235, 241, 269, 270], "nativ": [6, 7, 10, 16, 17, 58, 91, 115, 116, 130, 132, 135, 148, 167, 175, 192, 193, 194, 198, 205, 208, 233, 234, 250, 259, 260, 264], "much": [6, 7, 10, 11, 13, 15, 19, 22, 38, 55, 59, 93, 94, 103, 104, 105, 110, 111, 120, 132, 136, 137, 154, 155, 162, 165, 170, 171, 174, 175, 177, 181, 182, 185, 186, 188, 189, 196, 198, 205, 208, 215, 241, 244, 245, 249, 258, 260, 261, 264, 265, 278], "boilerpl": [6, 7, 22, 46, 105, 182, 205], "degre": [6, 38, 66, 98, 119, 137, 177, 181, 194, 208], "onc": [6, 7, 10, 11, 12, 15, 18, 19, 33, 35, 38, 54, 55, 59, 85, 94, 96, 100, 101, 102, 103, 104, 108, 113, 143, 148, 156, 162, 163, 169, 170, 171, 172, 174, 177, 181, 182, 188, 189, 197, 198, 210, 215, 228, 234, 241, 244, 245, 260, 274, 275], "organ": [6, 10, 15, 54, 96, 120, 138, 194, 245, 278], "tackl": [6, 118], "decid": [6, 7, 10, 11, 19, 21, 55, 63, 91, 93, 172, 188, 189, 208, 213, 215, 263], "contribut": [6, 55, 63, 85, 94, 101, 156, 181], "upstream": [6, 234, 260], "rest": [6, 7, 15, 46, 126, 133, 148, 152, 171, 173, 174, 189, 192, 207, 257], "walk": [6, 7, 11, 16, 18, 26, 45, 57, 93, 106, 111, 123, 129, 130, 136, 153, 155, 174, 193, 198, 199, 200, 212, 244, 258], "chase": 6, "someon": [6, 177], "fire": [6, 145], "don": [6, 7, 10, 11, 17, 45, 46, 55, 56, 58, 91, 98, 101, 104, 105, 108, 111, 116, 120, 126, 136, 142, 152, 154, 155, 162, 165, 171, 172, 175, 176, 185, 188, 189, 205, 206, 207, 224, 241, 244, 272, 273], "dai": [6, 135, 189, 257], "head": [6, 8, 19, 37, 86, 98, 118, 135, 145, 176, 191, 210, 215], "straight": [6, 7, 177], "recurr": [6, 46, 52, 104, 108, 130, 138, 139, 160, 163, 177, 178, 280], "unit": [6, 7, 52, 98, 101, 131, 132, 154, 165, 169, 171, 172, 177, 184, 188, 192, 247, 260], "superior": [6, 134, 209], "properti": [6, 7, 12, 15, 33, 42, 51, 93, 96, 101, 107, 110, 137, 163, 177, 188, 206, 234, 244, 245, 257, 262], "art": [6, 46, 55, 94, 96, 98, 169, 243], "lstm": [6, 46, 52, 98, 106, 109, 138, 139, 175, 280], "lack": [6, 16, 85, 94, 205, 228], "forget": [6, 7, 111, 120, 186], "gate": [6, 52, 98, 192, 257], "exponenti": [6, 52, 93, 101, 105, 107, 163, 172, 198], "elu": [6, 212], "intern": [6, 10, 11, 12, 16, 39, 40, 52, 59, 71, 98, 103, 119, 130, 131, 133, 137, 147, 181, 196, 205, 213, 221, 226, 259], "never": [6, 93, 104, 105, 106, 110, 136, 169, 179], "lltm": 6, "long": [6, 7, 11, 52, 53, 85, 91, 98, 101, 105, 106, 107, 109, 111, 132, 134, 136, 139, 148, 152, 153, 163, 167, 172, 175, 181, 189, 192, 194, 196, 199, 245, 259, 260, 263, 273, 280], "term": [6, 7, 16, 42, 55, 63, 78, 93, 94, 98, 102, 105, 106, 107, 109, 118, 132, 134, 135, 159, 169, 171, 188, 189, 192, 198, 208, 217, 251, 278, 280], "vanilla": [6, 7, 52, 68, 105, 119, 184, 192, 205, 279], "signific": [6, 7, 22, 55, 85, 94, 132, 134, 138, 141, 153, 154, 156, 162, 165, 171, 176, 181, 186, 189, 196, 227, 228, 229, 233, 235, 244, 245, 260, 272], "enough": [6, 7, 19, 52, 85, 96, 107, 111, 119, 136, 141, 170, 188, 196, 215, 226, 233, 244], "lstmcell": 6, "cell": [6, 53, 93, 94, 96, 98, 101, 102, 118, 165, 171, 172, 176, 184, 189, 198, 260], "plain": [6, 7, 52, 111, 133, 138, 139, 177, 191, 257, 259], "someth": [6, 7, 12, 15, 22, 46, 91, 96, 101, 105, 107, 147, 153, 170, 171, 177, 188, 192, 219, 245, 259], "self": [6, 7, 10, 11, 12, 15, 16, 22, 26, 35, 49, 52, 56, 58, 100, 105, 111, 118, 119, 120, 130, 131, 135, 140, 145, 147, 153, 155, 163, 167, 173, 174, 175, 181, 182, 184, 188, 192, 193, 209, 210, 217, 225, 226, 227, 229, 233, 235, 241, 250, 251, 257, 265, 275, 276], "input_featur": [6, 275], "state_s": 6, "super": [6, 7, 12, 21, 22, 49, 100, 111, 120, 131, 134, 140, 145, 155, 167, 173, 174, 175, 182, 184, 193, 209, 210, 217, 225, 226, 227, 229, 233, 235, 241, 251, 275], "candid": [6, 153], "reset_paramet": [6, 133], "stdv": 6, "math": [6, 11, 75, 88, 93, 107, 111, 119, 159, 170, 260, 276], "sqrt": [6, 88, 111, 192, 205, 217], "uniform_": [6, 7, 175, 217], "old_h": 6, "old_cel": 6, "cat": [6, 42, 46, 51, 94, 96, 104, 107, 153, 175, 177, 182, 191, 243], "gate_weight": 6, "split": [6, 10, 21, 22, 47, 52, 55, 88, 91, 96, 100, 102, 130, 138, 139, 145, 167, 171, 174, 175, 177, 189, 191, 210, 225, 241], "combin": [6, 11, 38, 58, 63, 91, 93, 96, 98, 103, 104, 107, 110, 111, 129, 130, 131, 136, 138, 139, 141, 149, 159, 165, 169, 172, 175, 177, 188, 189, 192, 199, 210, 228, 229, 235, 245, 260], "input_g": 6, "sigmoid": [6, 7, 55, 98, 193, 260], "output_g": 6, "tanh": [6, 7, 55, 98, 105, 154, 171, 260], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 52, 94, 98, 103, 104, 108, 111, 135, 137, 138, 139, 148, 175, 176, 177, 185, 243], "new_h": 6, "batch_siz": [6, 7, 15, 22, 35, 52, 54, 55, 58, 91, 100, 111, 131, 132, 133, 135, 147, 154, 171, 172, 173, 174, 181, 182, 184, 185, 189, 209, 210, 215, 234, 235, 244, 268, 275], "rnn": [6, 47, 52, 98, 130, 148, 160, 163, 174, 177, 178, 260, 280], "new_c": 6, "intel": [6, 147, 153, 156, 212, 214, 220, 264], "mkl": [6, 153, 209, 250, 278], "nnpack": 6, "why": [6, 7, 10, 12, 15, 17, 46, 55, 88, 94, 103, 105, 110, 120, 123, 142, 145, 153, 162, 177, 186, 188, 189, 206, 208, 245, 274, 275], "circumst": [6, 165, 244], "room": [6, 103, 165, 233], "obviou": [6, 188, 245], "knowledg": [6, 52, 55, 78, 105, 106, 121, 123, 130, 153, 155, 280], "know": [6, 7, 10, 12, 21, 22, 33, 45, 52, 75, 76, 78, 96, 98, 101, 105, 107, 110, 111, 119, 136, 138, 139, 142, 147, 148, 149, 153, 155, 156, 159, 164, 165, 167, 171, 172, 173, 177, 182, 188, 189, 191, 193, 206, 235, 245, 271], "execut": [6, 7, 10, 12, 16, 18, 20, 33, 34, 40, 41, 45, 47, 50, 53, 67, 73, 77, 85, 89, 93, 96, 99, 101, 104, 109, 112, 116, 117, 121, 129, 130, 133, 134, 136, 137, 140, 147, 148, 152, 153, 156, 165, 168, 171, 172, 174, 175, 176, 178, 186, 188, 192, 194, 196, 199, 209, 216, 220, 221, 225, 233, 241, 244, 256, 259, 267, 270, 274, 275, 278, 280], "involv": [6, 10, 16, 19, 22, 37, 40, 53, 88, 93, 94, 101, 104, 107, 113, 120, 129, 136, 138, 144, 155, 162, 175, 177, 188, 196, 197, 198, 210, 215, 251, 260, 265, 272, 275], "launch": [6, 7, 56, 63, 134, 137, 144, 145, 173, 174, 175, 176, 181, 194, 220, 233, 235, 245, 250, 260, 278], "amount": [6, 22, 78, 85, 120, 135, 145, 165, 169, 186, 189, 198, 250, 260], "becom": [6, 7, 12, 26, 55, 78, 88, 94, 103, 135, 142, 154, 156, 165, 181, 182, 189, 196, 199, 210, 223, 233, 244, 278], "furthermor": [6, 22, 103, 149, 154, 182, 199, 228, 245], "itself": [6, 12, 33, 34, 45, 85, 88, 98, 101, 103, 107, 108, 111, 116, 120, 135, 136, 138, 142, 147, 155, 171, 174, 175, 177, 189, 244, 250, 274], "slow": [6, 7, 10, 38, 131, 133, 165, 189, 192, 250, 260], "down": [6, 10, 11, 12, 22, 34, 35, 53, 85, 91, 93, 98, 100, 105, 111, 131, 148, 153, 154, 155, 174, 179, 182, 188, 196, 205, 259, 260], "thing": [6, 7, 10, 16, 17, 33, 45, 46, 49, 52, 88, 91, 93, 96, 101, 102, 103, 104, 105, 107, 108, 110, 111, 130, 133, 135, 136, 137, 142, 143, 144, 147, 148, 152, 153, 156, 163, 170, 171, 179, 188, 198, 214, 226, 245, 263], "therefor": [6, 7, 16, 22, 52, 54, 103, 120, 129, 138, 145, 156, 159, 165, 168, 169, 174, 175, 188, 200, 207, 208, 220, 244, 278], "rewrit": [6, 47, 140, 163, 188, 219, 220], "group": [6, 12, 21, 22, 26, 52, 63, 86, 98, 101, 118, 129, 130, 131, 132, 133, 134, 139, 141, 143, 145, 147, 153, 167, 181, 189, 191, 192, 196, 226, 227, 229, 245, 275, 278, 279], "profit": 6, "fewer": [6, 12, 141, 154], "visibl": [6, 46, 91, 100, 184], "begin": [6, 7, 12, 13, 19, 22, 33, 45, 52, 53, 55, 58, 78, 88, 93, 96, 108, 110, 132, 135, 160, 162, 172, 174, 181, 182, 189, 207, 210, 215, 232, 244, 245, 247, 250, 261, 262, 263, 265], "translat": [6, 52, 113, 115, 116, 130, 138, 139, 159, 160, 178, 207, 260, 275, 280], "benefit": [6, 7, 19, 21, 45, 88, 91, 132, 134, 151, 156, 162, 165, 176, 192, 198, 215, 233, 234, 244, 260, 271, 278], "massiv": [6, 46, 107, 110, 189, 234], "parallel": [6, 7, 12, 18, 21, 46, 48, 50, 52, 54, 58, 78, 91, 96, 120, 130, 137, 143, 147, 159, 171, 174, 175, 189, 196, 209, 213, 226, 227, 228, 232, 244, 250, 276, 278, 279, 280], "discuss": [6, 7, 10, 11, 16, 18, 46, 78, 93, 96, 98, 102, 107, 108, 131, 132, 140, 147, 152, 153, 159, 165, 167, 186, 192, 196, 205, 206, 207, 208, 249, 270, 272], "latter": [6, 7, 137, 173], "lltm_cpp": 6, "conveni": [6, 10, 15, 46, 49, 52, 94, 107, 111, 136, 139, 149, 154, 168, 171, 196, 206, 208, 227, 234, 244, 245, 259], "wrapper": [6, 7, 10, 58, 111, 120, 131, 132, 142, 148, 155, 171, 184, 189, 197, 213, 226, 227, 272, 276], "languag": [6, 7, 26, 46, 52, 98, 104, 106, 108, 130, 135, 137, 138, 139, 160, 175, 177, 194, 199, 221, 233, 260, 265, 270, 272, 275, 276], "include_dir": [6, 11, 168], "include_path": 6, "manag": [6, 34, 45, 52, 63, 93, 111, 118, 129, 133, 135, 140, 143, 144, 145, 163, 176, 181, 186, 189, 197, 226, 227, 228, 229, 244, 245, 246, 249, 250, 251, 260, 273, 278], "And": [6, 7, 11, 17, 26, 55, 94, 107, 113, 138, 142, 153, 154, 156, 159, 170, 181, 182, 186, 188, 245, 259], "overal": [6, 22, 52, 98, 131, 132, 147, 165, 172, 184, 188, 189, 233, 245, 260], "iostream": [6, 7, 234], "d_sigmoid": 6, "header": [6, 7, 10, 168, 245], "bit": [6, 16, 71, 96, 101, 118, 119, 148, 170, 171, 177, 189, 198, 205, 221, 235, 245], "primari": [6, 7, 16, 165, 185, 199, 209, 210, 220, 228, 259, 260, 278], "datatyp": [6, 42, 51, 76, 96, 101, 118, 234, 244], "Its": [6, 103, 105, 210], "inspect": [6, 93, 103, 116, 132, 133, 137, 152, 176, 179, 186, 188, 189, 245, 274], "dispos": 6, "nvcc": 6, "hit": [6, 22, 78, 135, 181], "pars": [6, 52, 54, 110, 131, 132, 137, 196, 245], "window": [6, 7, 46, 54, 98, 110, 113, 130, 145, 174, 181, 191, 213, 220, 241, 260], "workaround": [6, 88, 142, 151, 275], "logic": [6, 7, 12, 19, 38, 43, 88, 104, 112, 130, 131, 137, 144, 167, 169, 174, 175, 184, 185, 215, 217, 227, 278], "sigmoidalphablendforwardcuda": 6, "open": [6, 37, 39, 53, 91, 94, 96, 97, 100, 102, 110, 111, 113, 115, 130, 132, 147, 149, 152, 162, 164, 177, 181, 184, 192, 200, 220, 234, 235, 241], "port": [6, 18, 134, 147, 174, 189, 196, 241, 269], "lltm_forward": 6, "addmm": [6, 7, 118, 153, 220, 221, 233, 250], "transpos": [6, 7, 13, 42, 51, 52, 55, 100, 153, 182, 210, 220, 275], "alpha": [6, 7, 16, 155, 184, 205, 210], "respect": [6, 8, 17, 18, 33, 35, 37, 38, 39, 45, 52, 55, 65, 66, 75, 93, 94, 105, 107, 119, 123, 135, 136, 148, 151, 153, 154, 164, 165, 171, 175, 177, 181, 189, 194, 225, 257, 262, 272, 278], "ultim": [6, 22, 52, 55, 88, 205, 221], "plop": 6, "autograd": [6, 8, 13, 16, 17, 18, 34, 35, 37, 38, 39, 40, 42, 43, 48, 49, 50, 60, 64, 67, 71, 94, 95, 96, 97, 98, 100, 101, 102, 106, 107, 111, 130, 138, 139, 142, 145, 153, 154, 159, 164, 172, 173, 174, 177, 178, 188, 219, 225, 241, 244, 260, 272, 280], "nice": [6, 52, 111, 162, 164, 171, 188, 189, 192], "dig": [6, 94, 105, 176, 188], "deeper": [6, 12, 13, 39, 94, 101, 103, 105, 152, 153, 176, 188, 224, 232], "interest": [6, 7, 11, 15, 19, 46, 52, 54, 91, 93, 94, 103, 105, 112, 113, 115, 116, 126, 132, 137, 154, 162, 163, 171, 179, 188, 189, 191, 192, 215, 219, 245, 259, 262, 263], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 13, 22, 49, 55, 98, 100, 105, 111, 120, 131, 145, 153, 170, 173, 174, 175, 182, 209, 212, 226, 227, 228, 229, 233, 234, 235, 244, 251, 260], "exp": [6, 104, 105, 111, 142, 207], "d_elu": 6, "mask": [6, 19, 94, 98, 118, 130, 148, 163, 169, 176, 184, 191, 198, 205, 206, 208, 210, 213, 215, 234, 275], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 22, 131, 174, 235], "d_x": 6, "d_old_h": 6, "slice": [6, 42, 51, 108, 111, 169, 192, 210, 220, 229, 259], "d_input": 6, "span": [6, 19, 104, 145, 181, 215, 241], "four": [6, 15, 21, 88, 96, 98, 100, 101, 119, 132, 147, 167, 182, 192, 212, 275], "torch_extension_nam": [6, 168], "macro": [6, 7, 10, 16], "maintain": [6, 11, 15, 33, 34, 35, 45, 52, 78, 98, 103, 108, 130, 134, 143, 147, 155, 172, 175, 188, 214, 220, 226, 244, 279], "mismatch": [6, 103, 188, 196], "nasti": [6, 257], "hard": [6, 7, 10, 16, 35, 105, 137, 165, 169, 188, 245, 269], "At": [6, 7, 10, 15, 16, 19, 45, 49, 52, 53, 88, 91, 108, 111, 119, 131, 132, 135, 148, 151, 155, 171, 172, 173, 176, 177, 181, 205, 208, 215, 220, 250, 257, 260, 274], "point": [6, 7, 10, 11, 12, 15, 19, 21, 22, 45, 49, 52, 53, 54, 55, 56, 85, 88, 93, 96, 98, 101, 103, 104, 106, 107, 108, 110, 111, 119, 131, 133, 135, 136, 137, 142, 143, 145, 152, 155, 159, 165, 171, 173, 177, 182, 184, 188, 189, 196, 198, 205, 207, 208, 214, 215, 235, 248, 256, 258, 260, 264, 271, 275, 280], "bdist_egg": 6, "egg_info": 6, "egg": 6, "info": [6, 7, 85, 134, 144, 147, 155, 171, 184, 188, 221, 234, 235], "pkg": 6, "dependency_link": 6, "txt": [6, 7, 52, 138, 139, 153, 170, 177, 228, 234], "top_level": 6, "manifest": [6, 207], "bdist": 6, "linux": [6, 7, 21, 113, 135, 145, 147, 170, 181, 191, 220, 234, 260, 278], "x86_64": [6, 21], "install_lib": 6, "temp": [6, 22, 140, 269], "gcc": [6, 153, 209], "pthread": [6, 7, 234], "local": [6, 7, 10, 18, 21, 22, 37, 52, 53, 63, 93, 97, 104, 112, 120, 123, 132, 133, 135, 137, 145, 147, 162, 169, 173, 174, 175, 177, 179, 189, 194, 196, 197, 225, 244, 247, 260, 269, 270, 276, 278, 279], "miniconda": [6, 21], "compiler_compat": 6, "wl": 6, "sysroot": 6, "wsign": 6, "dndebug": 6, "fwrapv": 6, "o3": [6, 245], "wall": [6, 104, 152, 245], "wstrict": 6, "prototyp": [6, 11, 12, 16, 35, 188, 189, 199, 201, 209, 210, 216, 219, 220, 225, 232, 280], "fpic": 6, "lib": [6, 7, 11, 21, 153, 171, 196, 234, 259, 275, 276, 278], "python3": [6, 21, 181, 196, 233, 259, 275, 276], "site": [6, 8, 21, 53, 55, 152, 177, 250, 259, 275], "th": [6, 15, 54, 105, 110, 147, 155], "thc": 6, "7m": 6, "o": [6, 7, 12, 21, 22, 35, 52, 53, 56, 58, 103, 131, 132, 134, 145, 147, 159, 162, 165, 167, 168, 170, 173, 174, 175, 184, 194, 196, 197, 214, 215, 225, 226, 227, 229, 245, 249, 276, 279], "dtorch_api_include_extension_h": 6, "dtorch_extension_nam": 6, "d_glibcxx_use_cxx11_abi": 6, "cc1plu": 6, "warn": [6, 22, 54, 153, 171, 184, 205, 206, 207, 208, 245, 250, 259], "valid": [6, 26, 38, 52, 91, 98, 100, 102, 103, 115, 118, 120, 126, 131, 132, 137, 138, 141, 142, 165, 168, 184, 185, 188, 191, 206, 207, 215, 245, 270, 273], "objc": 6, "share": [6, 7, 11, 12, 21, 42, 51, 58, 69, 73, 91, 103, 107, 130, 132, 136, 145, 147, 148, 155, 165, 171, 174, 175, 188, 196, 227, 234, 245, 249, 259, 269, 274, 278, 280], "l": [6, 13, 15, 45, 54, 55, 93, 105, 171, 172, 188, 196, 210, 245, 274, 276], "rpath": 6, "37m": 6, "gnu": [6, 7, 234, 260, 278], "stub": 6, "loader": [6, 7, 26, 39, 46, 102, 111, 171, 174, 191, 245], "byte": [6, 188, 197, 275], "37": [6, 19, 35, 118, 170, 171, 175, 215, 233, 250], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 22, 85, 130, 162, 171, 186, 188, 259, 275], "archiv": [6, 7, 156, 188, 274], "__pycache__": 6, "dist": [6, 12, 21, 131, 132, 134, 145, 147, 167, 168, 174, 194, 196, 226, 227, 229, 276, 279], "py3": 6, "remov": [6, 19, 22, 52, 55, 56, 86, 111, 116, 118, 123, 133, 136, 145, 153, 162, 170, 176, 177, 184, 185, 186, 188, 189, 192, 198, 205, 206, 210, 215, 245, 259], "everyth": [6, 17, 45, 91, 101, 103, 105, 137, 138, 142, 148, 170, 171, 172, 173, 177, 182, 189, 197, 225], "pth": [6, 22, 120, 184, 198, 227, 234, 235, 275], "finish": [6, 7, 18, 47, 96, 100, 145, 173, 175, 182, 212, 225, 226, 241, 247, 260], "abi": [6, 7, 220, 234], "ubuntu": [6, 7, 181, 278], "16": [6, 19, 22, 49, 75, 91, 96, 98, 100, 103, 111, 120, 145, 148, 154, 156, 170, 171, 175, 182, 184, 188, 191, 198, 209, 215, 226, 227, 233, 245, 250, 251, 274, 275, 276], "04": [6, 41, 171, 181, 200, 233, 245, 280], "recent": [6, 52, 108, 118, 134, 135, 147, 153, 159, 163, 172, 181, 275, 278], "distribut": [6, 7, 15, 16, 22, 55, 78, 91, 96, 101, 102, 103, 105, 110, 130, 131, 132, 133, 134, 135, 137, 143, 144, 156, 162, 168, 171, 173, 181, 192, 194, 196, 210, 212, 213, 217, 225, 228, 229, 245, 264, 278, 279], "maco": [6, 7, 113, 147, 184, 260], "clang": [6, 200, 220], "worst": 6, "resolv": [6, 103, 156, 185, 188, 207, 228, 275], "symbol": [6, 245, 259, 275], "linker": 6, "pycapsul": 6, "builtin": [6, 168, 245, 259], "arg0": 6, "arg1": [6, 174], "arg2": [6, 174], "arg3": 6, "arg4": 6, "citizen": [6, 205, 207], "lltmfunction": 6, "staticmethod": [6, 142, 173, 184], "benchmark": [6, 16, 19, 26, 35, 118, 130, 137, 153, 154, 165, 170, 176, 186, 192, 198, 209, 210, 212, 215, 232, 234, 235, 250, 256, 259, 260, 264, 270, 275, 278, 280], "measur": [6, 13, 38, 85, 93, 94, 96, 98, 103, 110, 131, 134, 152, 154, 165, 171, 172, 176, 179, 186, 198, 209, 225, 233, 244, 245, 250, 259, 264, 265, 274], "durat": [6, 86, 168, 172, 181, 196], "32": [6, 21, 22, 49, 58, 91, 96, 98, 101, 103, 108, 118, 131, 154, 159, 164, 167, 170, 171, 174, 175, 178, 181, 184, 188, 194, 209, 233, 235, 245, 251, 276], "128": [6, 7, 54, 55, 58, 91, 103, 131, 135, 138, 147, 149, 170, 173, 174, 175, 189, 192, 221, 225, 234, 245, 259, 268], "rang": [6, 7, 12, 13, 15, 21, 22, 35, 43, 46, 54, 55, 56, 75, 78, 85, 91, 94, 100, 103, 111, 112, 113, 115, 116, 119, 131, 132, 133, 134, 137, 147, 167, 170, 171, 173, 175, 177, 181, 182, 188, 191, 193, 194, 196, 198, 199, 210, 215, 223, 225, 226, 229, 233, 235, 241, 243, 244, 250, 260, 272, 275, 278, 279], "100000": [6, 245], "3f": [6, 22, 210, 215], "wrote": [6, 186, 191], "post": [6, 7, 12, 52, 103, 131, 132, 133, 137, 156, 179, 189, 194, 210, 235, 243], "my": [6, 53, 104, 110, 192], "machin": [6, 7, 21, 37, 39, 43, 46, 52, 53, 54, 56, 57, 58, 59, 63, 78, 91, 93, 94, 97, 113, 115, 130, 131, 132, 137, 143, 144, 145, 147, 152, 164, 165, 170, 174, 175, 176, 177, 189, 191, 196, 223, 232, 233, 241, 258, 260, 269, 270, 275, 278], "506": 6, "480": [6, 250], "444": 6, "694": 6, "349": [6, 96, 171], "335": [6, 156, 171, 175, 276, 279], "443": [6, 175, 250], "523": 6, "speedup": [6, 19, 46, 119, 130, 149, 153, 164, 192, 198, 209, 210, 215, 233, 260, 265, 274], "30": [6, 7, 22, 47, 85, 105, 130, 132, 134, 156, 169, 171, 173, 175, 215, 245, 250], "albeit": [6, 15], "major": [6, 11, 12, 22, 98, 101, 110, 126, 134, 153, 162, 176, 186, 189, 208, 233, 265, 272, 276, 279], "particularli": [6, 14, 19, 56, 111, 163, 177, 209, 215, 260], "engin": [6, 7, 15, 33, 45, 91, 93, 131, 140, 165, 170, 175, 184, 188, 189, 191, 196, 219, 221, 234, 275], "correspondingli": 6, "big": [6, 55, 98, 104, 110, 119, 133, 139, 149, 162, 171, 177, 184], "win": [6, 162], "No": [6, 7, 56, 116, 133, 153, 193, 224, 272], "cuda_devic": 6, "creation": [6, 7, 11, 101, 208, 217, 249], "is_avail": [6, 7, 13, 91, 101, 111, 167, 168, 171, 172, 174, 194, 210, 214, 275], "synchron": [6, 12, 18, 58, 59, 85, 131, 133, 145, 147, 171, 173, 174, 181, 186, 196, 197, 210, 225, 226, 241, 244, 245, 273, 279], "1e6": [6, 22, 223, 279], "1e5": 6, "again": [6, 7, 46, 53, 93, 94, 98, 100, 101, 103, 104, 111, 112, 136, 141, 147, 148, 162, 173, 175, 177, 181, 184, 186, 189, 197, 198, 214, 245], "187": [6, 245], "719": 6, "410": [6, 156], "815": [6, 121], "149": 6, "802": [6, 153], "393": 6, "458": [6, 153], "That": [6, 7, 19, 45, 46, 47, 52, 93, 94, 96, 101, 105, 107, 108, 110, 111, 113, 135, 138, 145, 151, 152, 154, 156, 159, 162, 171, 172, 176, 181, 188, 189, 191, 205, 206, 208, 215, 259, 264], "great": [6, 52, 113, 119, 120, 207, 245, 262], "pull": [6, 94, 101, 102, 152, 214], "dive": [6, 7, 12, 39, 140, 145, 153, 209, 259], "previous": [6, 10, 33, 88, 107, 111, 140, 151, 167, 169, 171, 172, 173, 181, 188, 205, 219, 257, 264, 274], "cover": [6, 8, 15, 16, 18, 21, 35, 49, 101, 106, 116, 123, 130, 132, 137, 147, 167, 168, 171, 174, 175, 182, 186, 188, 207, 209, 210, 225, 233, 234, 244, 252, 253, 254, 255, 258, 259, 260, 271, 278], "elabor": [6, 7, 135, 153, 173], "fly": [6, 15, 54, 104, 171, 192], "background": [6, 7, 34, 78, 100, 170, 182, 184, 191, 270, 271], "tmp": [6, 153, 184, 196, 199, 269, 270, 276], "torch_extens": 6, "emit": [6, 7, 104, 188, 276], "ninja": 6, "verbos": [6, 144, 184, 188, 221, 228], "root": [6, 7, 15, 33, 35, 45, 54, 55, 96, 104, 133, 141, 148, 153, 174, 175, 196, 234, 241, 258, 268], "complic": [6, 15, 104, 105, 110, 111, 119, 137, 188, 219, 229, 244, 245], "techniqu": [6, 18, 19, 22, 52, 63, 103, 104, 110, 112, 130, 135, 141, 142, 143, 152, 160, 163, 165, 167, 169, 175, 184, 189, 192, 198, 205, 210, 215, 260, 275, 278], "fine": [6, 7, 19, 22, 52, 54, 93, 104, 129, 136, 147, 153, 170, 181, 186, 189, 205, 215, 244, 245, 259, 260, 278], "system": [6, 7, 10, 11, 13, 15, 16, 58, 103, 130, 133, 137, 147, 163, 165, 170, 171, 173, 185, 186, 188, 189, 196, 220, 221, 226, 247, 260, 269, 278], "increment": [6, 12, 88, 107, 111, 147, 172], "thu": [6, 7, 10, 11, 22, 33, 40, 52, 88, 91, 103, 111, 132, 149, 162, 165, 177, 209, 217, 241, 245, 250, 260, 278], "didn": [6, 10, 94, 113, 152, 173, 219], "hand": [6, 7, 10, 15, 19, 21, 78, 101, 104, 110, 111, 139, 147, 164, 165, 186, 188, 189, 206, 215, 226, 227, 265], "prospect": 6, "pointwis": [6, 10, 156, 185, 232, 260, 264, 276], "declar": [6, 7, 14, 78], "best": [6, 7, 10, 40, 45, 55, 63, 78, 91, 113, 116, 118, 120, 126, 130, 143, 147, 149, 153, 164, 165, 170, 173, 175, 179, 188, 192, 198, 209, 215, 233, 234, 235, 250, 259, 260, 263, 264, 270, 272, 278], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": 6, "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 224], "cuda_runtim": 6, "templat": [6, 10, 121, 147, 153, 185, 209, 235, 280], "typenam": 6, "scalar_t": [6, 153], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 21, 38, 42, 45, 51, 55, 56, 91, 93, 107, 133, 134, 135, 144, 148, 156, 175, 176, 179, 188, 208, 210, 214, 241, 260], "zeros_lik": [6, 101, 173], "thread": [6, 7, 10, 55, 118, 133, 134, 145, 154, 165, 170, 173, 174, 175, 234, 241, 245, 250, 259, 260, 278], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 11, 12, 15, 34, 52, 65, 66, 85, 93, 94, 96, 98, 100, 104, 105, 110, 116, 118, 119, 137, 138, 148, 153, 169, 171, 172, 174, 181, 182, 184, 189, 196, 205, 207, 208, 221, 243, 245, 275], "awai": [6, 7, 49, 98, 100, 104, 105, 107, 171, 172, 173, 189, 208, 228], "runtim": [6, 10, 15, 21, 42, 53, 85, 88, 93, 96, 97, 101, 115, 116, 118, 130, 134, 135, 140, 141, 152, 162, 165, 167, 181, 186, 188, 189, 198, 200, 209, 220, 221, 223, 233, 244, 245, 250, 263, 264, 271, 276], "back": [6, 7, 10, 11, 15, 16, 22, 33, 46, 49, 54, 78, 91, 93, 100, 101, 103, 107, 111, 113, 118, 133, 136, 156, 162, 165, 171, 173, 174, 175, 177, 184, 186, 188, 189, 192, 205, 210, 227, 257, 260, 272, 273], "determin": [6, 7, 10, 12, 19, 22, 42, 51, 94, 96, 101, 102, 103, 104, 107, 110, 113, 134, 135, 137, 149, 162, 163, 164, 169, 186, 188, 189, 196, 210, 214, 215, 245, 250, 251, 260], "conceptu": [6, 7, 33, 45, 52, 119, 259], "switch": [6, 10, 16, 22, 100, 101, 120, 162, 189, 220, 233, 244, 246, 250, 263], "scalartyp": 6, "messag": [6, 17, 52, 93, 116, 140, 147, 184, 188, 221, 278], "insid": [6, 7, 11, 18, 21, 34, 38, 47, 133, 135, 181, 186, 191, 209, 215, 219, 221], "alia": [6, 11, 101], "instanti": [6, 7, 11, 15, 35, 40, 54, 55, 68, 70, 88, 96, 103, 111, 113, 119, 137, 168, 169, 172, 184, 217, 232, 249], "retriev": [6, 7, 15, 18, 33, 35, 52, 136, 137, 167, 171, 173, 174, 189, 241, 278], "at_dispatch_all_typ": 6, "sens": [6, 10, 13, 15, 103, 110, 111, 149, 165, 182], "routin": [6, 7, 189], "convolut": [6, 7, 10, 13, 14, 49, 55, 94, 96, 101, 103, 111, 120, 126, 130, 156, 159, 169, 178, 179, 188, 220, 221, 233, 234, 241, 244, 247, 250, 251, 262, 263, 274, 280], "harder": [6, 103, 198], "ourselv": [6, 7, 38, 52, 141, 171], "grid": [6, 49, 100, 102, 111, 126, 179, 182, 199], "fill": [6, 7, 15, 96, 110, 111, 138, 148, 206, 207], "matric": [6, 13, 19, 42, 51, 93, 107, 154, 163, 215, 221], "2048": [6, 21, 103, 154], "heard": 6, "introductori": 6, "ever": [6, 7, 136, 145, 188, 249], "__restrict__": [6, 209], "size_t": 6, "column": [6, 21, 93, 101, 105, 107, 118, 135, 138, 153, 154, 159, 181, 184, 189, 206, 207, 208, 210, 250], "index": [6, 7, 16, 35, 42, 43, 46, 51, 52, 54, 86, 101, 104, 105, 107, 108, 110, 111, 118, 131, 136, 137, 138, 147, 163, 167, 173, 177, 181, 184, 186, 188, 189, 198, 210, 219, 276, 278], "gates_row": 6, "primarili": [6, 85, 174, 186, 228, 244, 260], "imagin": [6, 93, 101, 104, 110, 142, 147, 162, 163, 177, 189, 245, 257], "giant": [6, 177], "million": [6, 126, 132, 148], "serial": [6, 7, 11, 39, 40, 111, 120, 130, 188, 197, 241, 245, 274], "faster": [6, 7, 10, 13, 22, 52, 59, 78, 98, 101, 103, 111, 120, 130, 132, 134, 144, 145, 148, 149, 154, 156, 164, 165, 173, 177, 186, 191, 196, 209, 244, 245, 259, 260, 261, 264, 278], "right": [6, 7, 10, 11, 13, 15, 33, 37, 42, 45, 51, 52, 55, 66, 85, 93, 98, 100, 103, 105, 107, 110, 119, 138, 147, 155, 159, 162, 171, 172, 173, 176, 177, 181, 184, 191, 192, 219, 233, 241], "inde": [6, 15, 17, 103, 141, 154, 165, 171, 176, 186, 189, 207, 208, 245], "ineffici": [6, 85, 210], "eas": [6, 88, 101, 102, 132, 192, 234, 249, 264], "readabl": [6, 35, 54, 94, 101, 104, 139, 181, 196, 245, 259], "especi": [6, 8, 19, 22, 52, 55, 78, 94, 101, 132, 134, 145, 152, 159, 162, 165, 188, 192, 198, 206, 215, 235], "dimension": [6, 34, 42, 49, 51, 52, 55, 63, 75, 76, 93, 98, 100, 101, 103, 106, 107, 108, 110, 119, 135, 140, 156, 169, 176, 177, 182, 184, 189, 208, 221, 229], "row": [6, 21, 35, 54, 78, 93, 98, 101, 105, 107, 108, 110, 111, 133, 135, 137, 138, 154, 173, 189, 206, 208, 219, 241], "n": [6, 7, 13, 19, 22, 33, 45, 49, 63, 75, 76, 85, 88, 93, 98, 100, 101, 103, 111, 119, 131, 132, 133, 145, 147, 154, 155, 159, 167, 169, 173, 174, 175, 177, 182, 188, 189, 191, 196, 198, 209, 210, 215, 219, 234, 260], "arithmet": [6, 22, 42, 96, 101, 165], "within": [6, 15, 21, 63, 88, 93, 94, 100, 111, 112, 113, 118, 135, 140, 142, 153, 163, 169, 172, 174, 184, 185, 186, 189, 192, 197, 199, 208, 209, 210, 214, 220, 229, 233, 245, 251, 260, 269, 271, 274, 278], "accept": [6, 43, 91, 93, 103, 108, 135, 137, 151, 154, 159, 164, 165, 171, 174, 181, 184, 193, 217, 219, 225, 233, 250, 260], "fortun": [6, 7, 11, 16, 91, 147, 148, 245], "foo": [6, 174, 200, 214, 217, 259], "rand": [6, 7, 16, 88, 101, 142, 193, 194, 215, 220, 223, 226, 227, 233, 234, 241, 251, 260, 268, 270], "12": [6, 35, 75, 96, 100, 118, 131, 132, 153, 171, 173, 182, 193, 198, 210, 215, 233, 235, 245], "foo_a": 6, "trace": [6, 10, 11, 17, 33, 45, 93, 100, 118, 130, 140, 153, 159, 165, 176, 181, 185, 188, 196, 209, 213, 228, 234, 264, 271, 272, 276], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 52, 153, 171, 173, 175, 209, 210, 225], "integ": [6, 7, 10, 43, 96, 101, 105, 107, 110, 137, 169, 188, 191, 198, 208, 221, 250], "fundament": [6, 52, 95, 98, 107, 110, 119, 130, 155, 165, 188, 189, 206, 227, 259], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 11, 19, 131, 188, 215], "packedaccessor32": 6, "variant": [6, 52, 96, 98, 100, 102, 135, 141, 170, 176, 189, 192, 194, 232], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 19, 59, 145, 154, 165, 170, 172, 186, 191, 198, 199, 210, 215], "host": [6, 21, 37, 57, 85, 97, 104, 131, 132, 135, 145, 147, 165, 167, 174, 175, 181, 229, 250, 260, 269], "reshap": [6, 7, 13, 22, 98, 101, 110, 111, 167, 171, 210, 220, 235], "pattern": [6, 19, 98, 100, 130, 135, 147, 153, 163, 174, 205, 207, 212, 215, 217, 229, 234], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "enabl": [6, 7, 10, 12, 15, 16, 18, 21, 22, 26, 35, 49, 58, 59, 85, 93, 101, 103, 115, 120, 131, 132, 134, 135, 137, 140, 141, 142, 145, 147, 153, 156, 165, 167, 169, 170, 171, 181, 182, 184, 185, 188, 189, 193, 197, 198, 205, 207, 209, 210, 213, 214, 221, 226, 227, 228, 233, 234, 241, 244, 250, 257, 264, 265, 269, 270, 271, 273, 274, 278, 279], "hassl": [6, 7], "entail": [6, 188], "simpler": [6, 111, 133, 135, 141, 151, 163, 219, 245], "hope": [6, 52, 155, 162, 186, 192, 233], "fastest": [6, 176, 270], "129": [6, 118], "431": 6, "304": [6, 52], "641": [6, 156], "equip": [6, 142, 148, 205, 278], "faq": 6, "blog": [6, 131, 132, 138, 143, 192, 233, 243], "framework": [7, 11, 26, 37, 55, 93, 105, 106, 119, 129, 130, 165, 167, 173, 176, 184, 192, 196, 212, 221, 225, 235, 275], "sit": [7, 112, 113, 115, 116, 163], "atop": 7, "substanti": [7, 137, 165], "codebas": [7, 11, 15], "foundat": [7, 138, 171, 184, 189], "underli": [7, 10, 15, 42, 51, 63, 78, 101, 103, 120, 137, 149, 153, 164, 174, 188, 196, 207, 208, 210, 229, 260], "popular": [7, 71, 78, 103, 119, 137, 147, 148, 189, 192, 198, 209, 234, 235, 264, 275], "stochast": [7, 38, 49, 55, 68, 93, 96, 102, 111, 119, 147, 171, 172], "descent": [7, 38, 45, 49, 68, 93, 96, 102, 111, 119, 147, 189, 198, 263], "digit": [7, 49, 96, 111, 130, 131, 132, 184, 275], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 102, 143, 147], "lightn": [7, 137], "talk": [7, 10, 52, 55, 58, 96, 107, 165, 171, 174, 188, 189], "cppcon": 7, "2018": 7, "quick": [7, 19, 34, 51, 93, 103, 105, 108, 110, 130, 132, 145, 149, 154, 164, 189, 198, 215, 245, 248, 256, 264, 280], "humor": 7, "sweep": [7, 176], "philosophi": 7, "ecosystem": [7, 116, 140], "cppdoc": 7, "descript": [7, 53, 131, 132, 153, 171, 173, 174, 175, 176, 184, 188, 212, 245, 260, 275, 276], "embark": 7, "excit": [7, 152, 162], "journei": [7, 55], "team": [7, 116, 137, 172, 184, 192], "job": [7, 47, 55, 56, 57, 63, 85, 103, 134, 137, 143, 144, 145, 147, 167, 213], "latenc": [7, 19, 130, 135, 137, 144, 153, 165, 170, 186, 215, 233, 269, 270, 276, 278], "reinforc": [7, 15, 102, 130, 155, 173, 174, 178, 280], "game": [7, 46, 55, 155, 275], "tractabl": [7, 104], "multithread": [7, 45, 59, 118, 165, 241, 245, 278], "lock": [7, 15, 59, 147, 165, 173, 174, 226], "gil": [7, 59, 145], "multiprocess": [7, 12, 15, 35, 39, 54, 56, 58, 59, 131, 132, 145, 147, 171, 174, 175, 196, 225, 226, 227, 276, 278, 279], "scalabl": [7, 130, 134, 137, 189, 205, 221, 233, 234, 260, 278], "shortcom": [7, 207], "constraint": [7, 13, 19, 21, 88, 105, 130, 135, 137, 163, 171, 184, 189, 194, 196, 215, 226, 244, 245, 257, 275], "neuroevolut": 7, "owner": [7, 173, 174, 175], "anyth": [7, 14, 17, 46, 75, 76, 96, 98, 101, 104, 107, 108, 110, 111, 119, 170, 192, 198, 241, 257, 258, 275], "serv": [7, 60, 63, 88, 96, 103, 108, 119, 130, 145, 152, 155, 168, 174, 175, 189, 197, 207, 225, 228, 232, 244, 245, 259, 269], "web": [7, 113, 241], "page": [7, 8, 11, 17, 53, 57, 63, 92, 111, 118, 119, 130, 138, 140, 165, 175, 181, 188, 189, 221, 226, 231, 234, 260, 273], "server": [7, 18, 129, 130, 134, 145, 168, 175, 193, 227, 234, 241, 269, 275, 278], "3d": [7, 63, 98, 100, 107, 108, 167, 184, 260], "graphic": [7, 176, 220], "photo": [7, 94], "softwar": [7, 168, 181, 196, 220], "remain": [7, 91, 93, 103, 133, 134, 147, 162, 165, 169, 177, 193, 194, 196, 198, 207, 210, 260], "forth": [7, 111], "retain": [7, 42, 51, 101, 120], "intuit": [7, 55, 78, 96, 101, 105, 120, 153, 177, 184, 188, 206, 241, 257], "tradit": [7, 55, 103, 105, 154, 174, 188, 189, 192, 196, 209], "experi": [7, 11, 103, 104, 132, 134, 147, 155, 165, 168, 171, 172, 176, 177, 179, 184, 186, 188, 189, 192, 198, 205, 213, 214, 219, 225, 228, 244, 259, 261, 269, 275, 276, 278], "compet": [7, 137, 165], "meant": [7, 8, 12, 88, 93, 98, 132, 189, 196, 207, 260], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 78, 132, 141, 165, 171, 172, 209, 229, 245], "core": [7, 10, 11, 12, 47, 104, 105, 106, 111, 119, 120, 130, 135, 147, 148, 153, 156, 165, 170, 181, 188, 196, 213, 241, 244, 259, 278], "principl": [7, 10, 108, 110, 137], "curiou": [7, 149, 162, 164, 224], "paragraph": 7, "tri": [7, 21, 55, 93, 104, 110, 172, 188, 220, 244, 275], "close": [7, 15, 19, 22, 55, 93, 98, 100, 101, 103, 104, 132, 137, 162, 182, 215, 258, 260], "experienc": [7, 88], "ask": [7, 19, 94, 96, 98, 139, 148, 165, 171, 188, 189, 214, 215, 245], "rememb": [7, 46, 55, 78, 108, 111, 118, 120, 154, 155, 162, 165, 177, 189, 192, 245], "dot": [7, 15, 33, 55, 108, 110, 130, 154, 177, 178, 194, 219, 245, 272, 280], "colon": [7, 184], "grab": [7, 8, 55, 100, 170, 175], "readi": [7, 11, 18, 52, 94, 96, 102, 104, 105, 110, 111, 130, 132, 147, 159, 167, 168, 171, 173, 174, 175, 189, 191, 250, 275], "cmake": [7, 220, 234], "websit": [7, 94, 172, 241, 243], "free": [7, 11, 22, 38, 45, 52, 78, 88, 103, 112, 113, 115, 116, 120, 132, 133, 137, 147, 152, 155, 156, 162, 165, 171, 173, 177, 181, 188, 259], "too": [7, 11, 15, 22, 46, 66, 71, 85, 91, 96, 98, 103, 104, 110, 111, 118, 119, 133, 135, 145, 162, 165, 169, 172, 173, 175, 177, 188, 205, 259, 273], "debug": [7, 10, 22, 63, 104, 130, 136, 172, 178, 188, 199, 213, 228, 245, 259, 269, 276, 280], "try": [7, 13, 15, 16, 19, 22, 38, 42, 46, 49, 51, 52, 55, 56, 63, 78, 93, 101, 102, 103, 104, 105, 106, 107, 111, 112, 113, 118, 134, 137, 138, 139, 140, 148, 153, 155, 159, 162, 165, 167, 168, 169, 171, 172, 177, 181, 185, 186, 188, 192, 194, 198, 206, 215, 233, 234, 244, 245, 257, 258, 275, 278], "support": [7, 12, 15, 16, 18, 19, 21, 22, 26, 33, 39, 49, 54, 59, 61, 62, 78, 86, 88, 93, 94, 95, 96, 97, 98, 101, 102, 103, 112, 113, 114, 115, 118, 130, 131, 132, 133, 134, 137, 142, 144, 145, 147, 148, 151, 153, 156, 163, 165, 167, 168, 169, 170, 171, 173, 174, 175, 181, 184, 186, 188, 191, 193, 196, 197, 200, 202, 203, 205, 206, 207, 209, 210, 211, 212, 214, 215, 220, 221, 222, 223, 224, 225, 227, 232, 233, 234, 235, 237, 238, 239, 240, 242, 243, 245, 250, 260, 264, 269, 271, 274, 275, 276, 278], "cu90": 7, "url": [7, 22, 111, 181, 186, 189, 198, 258], "wget": [7, 21, 191, 198], "nightli": [7, 21, 151, 186, 191, 196, 198, 213, 219, 235, 275], "dep": 7, "latest": [7, 9, 11, 15, 91, 94, 119, 120, 130, 132, 140, 147, 158, 166, 170, 171, 174, 177, 179, 184, 186], "unzip": [7, 22, 53, 184, 191, 274], "tini": [7, 131, 162, 275], "ident": [7, 19, 58, 88, 93, 101, 102, 111, 119, 135, 144, 159, 182, 185, 188, 208, 215, 245], "ey": [7, 154, 165], "fledg": 7, "cmakelist": [7, 234], "cmake_minimum_requir": [7, 234], "fatal_error": [7, 234], "find_packag": [7, 234], "add_execut": [7, 234], "target_link_librari": [7, 234], "set_properti": [7, 234], "cxx_standard": [7, 234], "visual": [7, 15, 45, 55, 78, 85, 86, 96, 102, 130, 132, 136, 137, 142, 152, 171, 181, 184, 199, 200, 207, 228, 250, 258, 264], "studio": [7, 200], "qmake": 7, "makefil": 7, "feel": [7, 11, 22, 38, 45, 52, 103, 112, 113, 115, 116, 120, 132, 152, 153, 155, 156, 162, 181, 188], "comfort": 7, "box": [7, 10, 11, 12, 17, 19, 43, 78, 130, 133, 137, 140, 142, 147, 170, 173, 181, 188, 191, 192, 215, 219, 221, 234, 241, 243, 275], "cmake_prefix_path": 7, "invok": [7, 10, 103, 145, 147, 151, 152, 153, 165, 168, 174, 175, 199, 207, 221, 241, 257, 268, 272, 278], "agre": [7, 279], "break": [7, 10, 11, 12, 17, 22, 34, 35, 85, 93, 98, 112, 120, 133, 134, 140, 162, 173, 175, 186, 194, 205, 274], "unexpect": [7, 54, 207, 260], "pwd": [7, 241], "fa350df05ecf": 7, "home": [7, 42, 51, 205, 220, 231], "mkdir": [7, 111, 181, 184], "cd": [7, 181, 191, 220, 241], "dcmake_prefix_path": [7, 234], "identif": [7, 234], "usr": [7, 21, 147, 234, 276], "bin": [7, 96, 147, 199, 234, 241, 274, 276], "cc": [7, 45, 220, 234, 276], "detect": [7, 12, 13, 21, 55, 98, 130, 170, 178, 181, 186, 188, 234, 247, 260, 273, 278, 280], "pthread_creat": [7, 234], "config": [7, 11, 19, 91, 131, 133, 137, 140, 170, 185, 193, 197, 198, 199, 209, 215, 234, 235, 257, 265, 269, 272, 275, 276], "scan": [7, 96, 98, 184, 188], "50": [7, 19, 22, 35, 55, 56, 96, 111, 148, 156, 169, 171, 172, 175, 191, 212, 215, 233, 235, 260], "cmakefil": 7, "dir": [7, 85, 100, 137, 196, 259, 269], "100": [7, 22, 35, 51, 75, 100, 105, 119, 131, 134, 140, 145, 153, 154, 156, 170, 171, 172, 175, 182, 184, 209, 215, 229, 233, 235, 245, 259, 270], "folder": [7, 22, 53, 55, 85, 86, 94, 96, 132, 182, 191, 196, 220], "enter": [7, 52, 132, 145, 147], "ran": [7, 110, 134, 171, 174, 176, 245], "binari": [7, 52, 55, 101, 113, 147, 156, 186, 206, 213, 225, 234, 274], "me": [7, 19, 52, 162, 177, 215], "besid": [7, 96, 110, 163, 173, 235, 243, 260], "encapsul": [7, 38, 49, 98, 102, 140, 162, 173], "buffer": [7, 15, 46, 49, 120, 132, 133, 141, 145, 149, 151, 155, 159, 162, 163, 164, 165, 169, 172, 188, 194, 196, 197, 217, 220, 226, 249, 262, 263], "form": [7, 13, 16, 19, 43, 49, 52, 55, 63, 104, 111, 113, 136, 139, 153, 177, 184, 192, 198, 210, 215, 217, 226, 227, 241, 260, 270, 278], "record": [7, 10, 22, 33, 45, 52, 111, 120, 130, 131, 132, 140, 141, 142, 162, 171, 172, 174, 175, 188, 213, 235, 250, 275], "normal": [7, 10, 12, 13, 22, 38, 40, 43, 52, 54, 55, 88, 94, 96, 98, 100, 102, 103, 105, 110, 119, 120, 126, 131, 141, 147, 148, 163, 165, 170, 173, 174, 176, 177, 182, 184, 186, 189, 192, 198, 206, 234, 235, 260, 268, 273], "nest": [7, 15, 34, 45, 96, 101, 130, 133, 171, 173, 175, 176, 185, 213, 216, 280], "similarli": [7, 13, 54, 86, 94, 101, 133, 136, 137, 138, 153, 154, 162, 165, 167, 193, 197, 208, 227], "kcuda": [7, 199], "w": [7, 33, 38, 45, 49, 78, 108, 110, 132, 156, 175, 181, 188, 191, 198, 209], "register_paramet": [7, 217], "reflect": [7, 10, 42, 51, 96, 101, 171, 188], "magic": [7, 105, 139, 147, 154], "assign": [7, 43, 47, 49, 56, 94, 98, 101, 103, 104, 105, 108, 110, 112, 133, 147, 163, 171, 189, 229, 241, 257, 260, 278], "behind": [7, 10, 19, 47, 85, 103, 105, 111, 119, 141, 172, 193, 206, 208, 213, 215, 217], "scene": [7, 111, 119, 217, 275], "another_bia": 7, "recurs": [7, 18, 46, 133, 140, 186, 217, 258], "0808": [7, 111], "8613": 7, "2017": [7, 78], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": 7, "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 184], "1230": 7, "0516": 7, "aptli": [7, 14], "register_modul": 7, "dropout": [7, 22, 40, 52, 78, 98, 100, 111, 120, 131, 135, 137, 139, 148, 173, 175, 177, 210, 215, 235], "conv2d": [7, 13, 22, 46, 49, 55, 96, 100, 111, 120, 131, 141, 170, 174, 182, 185, 188, 193, 212, 221, 234, 235, 241, 250, 251, 260], "subtleti": [7, 208], "bodi": [7, 153], "upon": [7, 20, 52, 59, 126, 147, 151, 177, 182, 186, 192, 196, 243, 260, 280], "tree": [7, 11, 16, 52, 104, 110, 141, 213, 228], "p": [7, 21, 22, 52, 71, 98, 104, 110, 111, 119, 131, 132, 141, 147, 156, 159, 162, 173, 174, 175, 185, 191, 215, 220, 221, 225, 276], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": 7, "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 171, 274], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": [7, 100], "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 12, 22, 35, 45, 49, 99, 100, 118, 147, 171, 175, 192, 200, 223, 233, 235, 274, 279, 280], "6861": 7, "1166": 7, "45": [7, 137, 153, 171, 175, 233], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 34, 189], "ordereddict": [7, 191], "13": [7, 35, 75, 96, 118, 171, 175, 184, 192, 233, 241], "48": [7, 19, 153, 156, 171, 182, 215, 233, 250], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": 7, "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": 7, "8060": 7, "topic": [7, 52, 63, 78, 94, 101, 112, 113, 115, 116, 123, 129, 190, 218, 252, 253, 254, 255, 266], "devour": 7, "menu": [7, 53], "concept": [7, 12, 37, 38, 58, 97, 106, 107, 111, 119, 123, 130, 137, 155, 165, 173, 176, 177, 189, 196, 199, 209, 250, 259, 278], "pipelin": [7, 18, 63, 111, 130, 171, 184, 191, 196], "briefli": [7, 38, 63, 130, 135, 171, 186, 192, 221], "who": [7, 52, 78, 103, 106, 134, 147, 162, 188, 227, 241, 245, 270, 274], "heap": 7, "live": [7, 11, 16, 101, 130, 136, 165, 174, 175, 208], "referenc": [7, 175], "lower": [7, 15, 19, 53, 78, 85, 98, 100, 130, 132, 133, 134, 137, 145, 151, 153, 162, 163, 171, 172, 176, 182, 184, 188, 189, 192, 193, 208, 215, 259, 260, 275], "realm": 7, "heavili": [7, 165, 177, 198], "ergonom": 7, "shown": [7, 10, 19, 22, 55, 93, 101, 111, 133, 135, 137, 153, 155, 172, 173, 175, 176, 181, 184, 186, 189, 196, 206, 207, 208, 214, 215, 227, 233, 234, 241, 274, 275, 276, 278, 279], "far": [7, 15, 49, 52, 66, 93, 96, 98, 101, 103, 104, 105, 119, 136, 147, 162, 169, 172, 177, 188, 189, 192, 205, 245], "stack": [7, 10, 15, 16, 42, 51, 96, 118, 130, 135, 149, 154, 155, 159, 165, 168, 173, 177, 181, 182, 184, 189, 192, 196, 276], "shared_ptr": 7, "cognit": 7, "think": [7, 46, 55, 71, 94, 96, 104, 105, 107, 108, 110, 119, 154, 171, 174, 176, 189, 192, 208, 219], "everywher": [7, 101, 110], "make_shar": 7, "stai": [7, 85, 134, 135, 140, 171, 172, 173], "shorten": 7, "wait": [7, 18, 85, 134, 139, 145, 147, 148, 165, 168, 173, 174, 175, 181, 184, 189, 196, 226, 249, 250, 260, 276], "mymodul": [7, 217, 225], "hell": 7, "lot": [7, 10, 11, 16, 22, 54, 93, 104, 111, 131, 133, 147, 159, 174, 177, 181, 186, 189, 198, 205, 244, 245, 259], "came": [7, 55, 206], "scheme": [7, 21, 102, 103, 130, 189, 205, 212, 217, 249, 257], "hide": [7, 141, 171, 219], "reserv": [7, 11, 16, 181, 197], "simplifi": [7, 11, 15, 26, 111, 138, 145, 167, 177, 184, 191, 196, 205, 208, 212, 213, 229], "linearimpl": 7, "torch_modul": 7, "brief": [7, 26, 85, 93, 104, 171, 189, 192], "typedef": 7, "among": [7, 10, 56, 85, 91, 102, 135, 169, 181, 243, 278], "holder": 7, "arrow": [7, 45, 135], "resembl": [7, 13, 104, 143, 172], "extra": [7, 10, 59, 96, 101, 103, 107, 108, 111, 115, 133, 138, 139, 141, 148, 151, 163, 171, 177, 184, 186, 191, 234, 250, 259, 260], "netimpl": 7, "subtl": [7, 101, 244], "deserv": 7, "construct": [7, 15, 33, 49, 55, 68, 70, 88, 103, 119, 126, 130, 133, 139, 142, 148, 149, 154, 160, 164, 171, 172, 174, 177, 189, 191, 192, 210, 213, 217, 219, 233, 235, 244, 247, 262, 279], "tricki": [7, 19, 142, 185, 188, 189, 215], "nullptr": [7, 199], "familiar": [7, 10, 11, 37, 38, 42, 46, 51, 56, 57, 59, 88, 96, 97, 101, 102, 104, 106, 111, 120, 130, 132, 136, 143, 144, 147, 155, 167, 174, 188, 214, 241, 245, 259], "pythonista": 7, "disadvantag": [7, 120], "said": [7, 155, 162, 171, 172, 205, 206], "introduct": [7, 12, 17, 19, 48, 50, 56, 57, 58, 59, 60, 87, 88, 93, 98, 105, 106, 109, 112, 113, 114, 116, 130, 140, 143, 144, 153, 178, 192, 207, 215, 234, 245, 260, 264, 272, 275, 280], "sooner": [7, 132], "technic": [7, 147, 148, 162, 189, 205, 223, 224, 232], "henceforth": 7, "recap": [7, 49, 172, 208, 249], "adversari": [7, 46, 102, 121, 130, 280], "architectur": [7, 19, 34, 55, 59, 78, 88, 98, 103, 104, 130, 132, 135, 137, 143, 149, 159, 165, 167, 169, 176, 182, 184, 186, 192, 209, 212, 215, 234, 241, 244, 260], "repositori": [7, 11, 57, 86, 123, 132, 135, 147, 167, 168, 175, 176, 177, 191, 196, 220], "distinct": [7, 19, 55, 85, 101, 110, 132, 175, 182, 188, 189, 215, 275], "transform": [7, 13, 19, 20, 22, 26, 33, 34, 35, 36, 37, 38, 39, 40, 42, 46, 52, 55, 91, 93, 94, 96, 100, 101, 102, 118, 121, 129, 130, 131, 133, 147, 148, 149, 151, 153, 155, 159, 162, 163, 170, 174, 177, 178, 181, 182, 184, 185, 191, 194, 198, 210, 212, 215, 233, 234, 235, 245, 247, 257, 259, 260, 265, 268, 272, 275, 280], "probabl": [7, 10, 34, 52, 55, 94, 98, 101, 103, 104, 107, 110, 131, 136, 137, 139, 170, 172, 182, 184, 210, 233], "judg": 7, "closer": [7, 93, 103, 172], "feedback": [7, 22, 132, 152, 155, 156, 197, 213, 232], "authent": 7, "theori": [7, 52, 55, 93, 103, 136, 165], "delic": 7, "tandem": [7, 271], "indistinguish": 7, "fool": [7, 52, 78], "excel": [7, 54, 182, 226], "realist": [7, 192, 210], "2d": [7, 34, 55, 98, 111, 133, 138, 173, 184, 185, 189, 229], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 49, 98, 100, 111, 120, 131, 164, 169, 174, 182, 235, 251], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 49, 98, 100, 111, 120, 131, 174, 182, 235, 251], "pad": [7, 22, 52, 98, 111, 141, 176, 192, 207, 210, 215, 251, 260], "batch_norm2": 7, "conv3": [7, 111], "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 22, 55, 111, 141, 193, 260], "dcgangener": 7, "chosen": [7, 94, 98, 134, 172, 186, 244, 245, 275], "cours": [7, 15, 19, 22, 56, 93, 94, 101, 103, 106, 107, 110, 111, 136, 147, 182, 215, 241], "student": [7, 103], "harm": [7, 103], "discoveri": [7, 188], "fed": [7, 13, 39, 52, 55, 184, 189], "soylent": 7, "regularli": [7, 56], "channel": [7, 11, 13, 22, 45, 46, 49, 55, 94, 96, 98, 101, 103, 111, 130, 135, 169, 178, 182, 185, 191, 225, 234, 247, 260, 280], "moduleopt": 7, "linearopt": 7, "leaki": [7, 55], "squash": [7, 148, 155], "sequenti": [7, 13, 22, 52, 71, 98, 110, 119, 148, 163, 171, 185, 210, 217, 219, 223, 233, 260, 278, 279], "orient": [7, 179], "layer": [7, 10, 11, 12, 13, 14, 16, 18, 19, 22, 33, 39, 40, 45, 49, 52, 55, 58, 63, 71, 78, 91, 93, 96, 100, 101, 102, 103, 105, 111, 119, 120, 126, 130, 131, 132, 133, 137, 138, 139, 140, 148, 156, 163, 167, 169, 170, 171, 174, 175, 177, 179, 188, 189, 191, 194, 198, 209, 212, 215, 223, 224, 225, 228, 232, 233, 243, 244, 247, 249, 251, 257, 261, 262, 265], "conv2dopt": 7, "leakyrelu": [7, 55], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 68, 119, 142], "knob": [7, 278], "sampler": [7, 22, 35, 58, 102, 131, 132, 171, 179], "collat": [7, 54], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 12, 21, 52, 55, 56, 58, 63, 131, 145, 147, 173, 174, 175, 196, 225, 226, 227, 279], "concurr": [7, 118, 135, 137, 165, 194, 226, 260, 278], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 182, 184], "label": [7, 35, 38, 39, 43, 45, 46, 54, 55, 78, 91, 93, 94, 96, 100, 101, 102, 105, 110, 118, 126, 132, 135, 138, 145, 165, 170, 173, 177, 182, 189, 191, 215, 235, 241, 245, 247, 250, 264, 275, 279], "field": [7, 11, 12, 15, 16, 34, 52, 98, 108, 110, 147, 162, 171, 173, 181, 188, 191, 196, 207], "rebuild": [7, 245], "danc": [7, 13], "generator_optim": 7, "adamopt": 7, "2e": [7, 93], "beta": [7, 20, 130, 178, 208, 264, 267, 280], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 102, 119, 208, 213, 216, 280], "lbfg": [7, 13], "rmsprop": [7, 38, 49, 72, 105, 119], "sgd": [7, 22, 38, 45, 46, 49, 70, 72, 91, 100, 102, 105, 111, 119, 120, 145, 147, 173, 174, 175, 179, 182, 234, 235, 262, 263, 268], "exhaust": [7, 12, 188], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 244], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 181], "g_loss": 7, "printf": 7, "r": [7, 12, 15, 22, 38, 45, 49, 78, 88, 104, 130, 153, 154, 155, 156, 159, 172, 173, 175, 184, 191, 219, 234, 245, 260, 278], "2ld": 7, "3ld": 7, "4f": [7, 131, 132, 154, 171], "batches_per_epoch": 7, "evalu": [7, 13, 19, 22, 26, 38, 40, 78, 93, 94, 100, 103, 113, 120, 140, 154, 159, 167, 171, 172, 174, 182, 186, 188, 191, 215, 235, 275], "uniformli": [7, 91, 172, 260], "robust": [7, 52, 56, 57, 78, 101, 134, 172, 233], "smooth": [7, 103, 112, 184], "propag": [7, 11, 18, 33, 38, 45, 47, 49, 55, 103, 107, 108, 111, 142, 151, 156, 171, 260], "repeat": [7, 15, 21, 22, 93, 138, 139, 171, 181, 188, 194, 205, 225, 250, 259, 265, 276], "spiel": 7, "ideal": [7, 15, 35, 93, 96, 101, 103, 165, 177, 188, 221, 270], "progress": [7, 10, 16, 26, 55, 56, 100, 102, 148, 177, 182, 196, 209, 227], "yet": [7, 11, 12, 21, 53, 78, 93, 96, 101, 115, 116, 140, 147, 165, 174, 177, 189, 193, 210, 227, 234, 275], "moment": [7, 12, 193, 208, 220], "observ": [7, 15, 22, 49, 54, 85, 102, 126, 131, 132, 137, 140, 148, 155, 156, 162, 165, 171, 172, 173, 175, 176, 177, 186, 192, 193, 208, 212, 223, 233, 244, 245, 251, 257, 264, 265, 276, 279], "meaning": [7, 52, 103, 156, 196], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 132, 175, 233, 245, 259], "3652": 7, "6626": 7, "400": [7, 49, 120, 245, 251, 259, 275], "8057": 7, "2795": [7, 245], "3531": 7, "4452": 7, "600": [7, 156, 172], "3501": 7, "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": [7, 267, 276, 280], "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 37, 46, 85, 103, 104, 105, 110, 111, 119, 135, 162, 172, 177, 196, 235], "onto": [7, 10, 15, 18, 21, 46, 98, 100, 101, 130, 148, 162, 174, 175, 189, 196, 217, 260], "somewher": [7, 98, 104, 105, 120], "kcpu": [7, 199, 220], "last": [7, 12, 15, 22, 34, 45, 52, 55, 56, 78, 86, 88, 91, 96, 98, 101, 102, 105, 108, 113, 126, 130, 135, 136, 139, 147, 148, 153, 162, 171, 172, 173, 175, 176, 177, 178, 182, 188, 191, 205, 208, 210, 212, 234, 244, 260, 264, 275, 280], "whose": [7, 85, 88, 93, 94, 103, 110, 132, 136, 156, 165, 184, 243, 245], "insert": [7, 13, 19, 22, 98, 175, 188, 193, 212, 215], "explicit": [7, 130, 133, 156, 165, 175, 188, 192, 206, 214, 241, 244, 264, 267, 272, 280], "suppli": [7, 107, 156, 170], "op": [7, 11, 12, 16, 51, 85, 116, 130, 131, 132, 133, 135, 140, 141, 145, 147, 153, 156, 170, 181, 192, 193, 198, 199, 206, 207, 209, 210, 217, 221, 225, 232, 235, 244, 249, 264, 276], "previou": [7, 12, 15, 16, 18, 19, 38, 52, 56, 58, 101, 102, 103, 111, 116, 126, 132, 133, 134, 138, 139, 142, 143, 144, 148, 155, 162, 165, 167, 169, 171, 172, 173, 175, 176, 177, 181, 182, 184, 186, 188, 189, 215, 221, 245, 251, 260, 275], "resid": [7, 103, 165], "downstream": [7, 184], "portabl": [7, 270], "augment": [7, 26, 54, 111, 126, 130, 179, 188, 191], "period": [7, 52, 55, 134, 137, 155, 181, 196], "middl": 7, "procedur": [7, 49, 129, 172, 179], "restor": [7, 78, 120, 145, 156, 262], "session": [7, 103, 113], "essenti": [7, 11, 15, 17, 33, 52, 104, 105, 107, 130, 140, 147, 160, 165, 172, 188, 212, 217, 235, 278], "deseri": [7, 120], "filenam": [7, 111, 118, 184, 196, 244, 276], "interv": [7, 15, 93, 137, 175], "kcheckpointeveri": 7, "pt": [7, 56, 120, 131, 132, 133, 220, 234, 235, 270], "str": [7, 21, 22, 86, 132, 167, 171, 174, 184, 188, 278], "checkpoint_count": 7, "counter": [7, 12, 52, 55, 140, 147, 185, 272], "bump": 7, "beta1": [7, 55], "krestorefromcheckpoint": 7, "intermediari": [7, 136], "xxx": [7, 16, 54], "matplotlib": [7, 13, 35, 55, 60, 93, 94, 96, 100, 111, 171, 172, 177, 182, 184], "argpars": [7, 131, 132, 173, 174, 175], "pyplot": [7, 13, 35, 100, 111, 171, 182, 184], "plt": [7, 13, 35, 100, 171, 177, 182, 184], "parser": [7, 104, 131, 132, 173, 174, 175], "argumentpars": [7, 131, 132, 173, 174, 175], "add_argu": [7, 131, 132, 173, 174, 175], "png": [7, 54, 130, 191], "parse_arg": [7, 131, 132, 173, 174, 175], "jit": [7, 10, 16, 22, 88, 186, 220, 221, 234, 245, 250, 265, 272, 274, 275, 276], "sample_fil": 7, "mul": [7, 140, 153, 188, 220, 245, 259], "uint8": [7, 191], "numpi": [7, 13, 17, 20, 22, 43, 46, 54, 60, 74, 76, 77, 93, 100, 111, 113, 118, 130, 142, 170, 175, 182, 184, 186, 205, 210, 213, 215, 243, 259, 275, 280], "axi": [7, 35, 85, 107, 108, 138, 165, 169, 184], "subplot": [7, 171], "imshow": [7, 13, 35, 100, 111, 182, 184], "cmap": [7, 35, 100, 111, 182], "grai": [7, 35, 111, 155], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "17": [7, 96, 100, 118, 153, 171, 188, 233, 245], "57": [7, 19, 118, 153, 171, 250, 280], "4953": 7, "0195": 7, "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 49, 100, 120, 126, 175, 182, 250, 251], "8084": 7, "hoorai": 7, "ball": 7, "court": 7, "hopefulli": [7, 53, 54, 78, 88, 105, 120, 261], "digest": [7, 259], "necess": [7, 52, 100], "broad": [7, 60, 94, 102], "did": [7, 10, 17, 22, 46, 55, 93, 96, 98, 101, 113, 134, 147, 151, 163, 171, 174, 177, 189, 196, 245], "space": [7, 15, 52, 55, 78, 93, 94, 98, 103, 104, 108, 110, 137, 148, 155, 162, 165, 171, 172, 175, 177, 181, 182, 184, 189, 192, 197], "consult": [7, 162, 243], "stuck": [7, 213], "whenev": [7, 56, 70, 101, 104, 105, 221, 263], "rate": [7, 38, 45, 55, 91, 96, 98, 102, 103, 105, 111, 126, 131, 132, 137, 138, 155, 171, 172, 174, 189, 191, 196, 258, 260], "vmap": [8, 10, 130, 151, 154, 159, 164, 213, 216, 280], "oppos": [8, 52, 55, 126, 147, 154, 159, 174, 245], "treat": [8, 17, 93, 110, 164, 173, 186, 188, 189], "opaqu": [8, 17, 259, 272], "callabl": [8, 17, 43, 54, 111, 181, 186, 188, 243, 272], "aotinductor": [8, 188, 264, 272, 275], "toe": 8, "registr": [8, 10, 11, 16, 17, 234, 235, 241], "doesn": [8, 10, 11, 14, 17, 19, 63, 105, 107, 110, 111, 136, 154, 156, 165, 169, 184, 186, 188, 193, 198, 205, 215, 219, 223, 224, 232, 259, 260, 271, 275, 276, 278], "pybind": 8, "ed": [8, 274], "respons": [10, 12, 18, 21, 52, 93, 94, 102, 111, 130, 135, 141, 145, 147, 173, 174, 177, 186, 188, 223, 225, 243], "nontrivi": 10, "cross": [10, 14, 46, 55, 96, 98, 102, 135, 137, 260, 263, 278], "cut": [10, 167, 188], "concern": [10, 105, 189, 205, 235], "rule": [10, 33, 45, 49, 93, 101, 108, 136, 149, 154, 163, 164, 171, 172, 188, 244], "convers": [10, 52, 93, 101, 156, 177, 205, 232, 257], "highest": [10, 22, 46, 52, 100, 134, 139, 172, 184, 186, 260], "prioriti": [10, 134], "transfer": [10, 20, 46, 54, 103, 111, 120, 121, 130, 147, 165, 170, 174, 181, 191, 197, 220, 246, 261, 280], "redispatch": 10, "unlik": [10, 13, 19, 94, 101, 103, 119, 136, 151, 156, 177, 185, 188, 214, 215, 272, 278], "style": [10, 135, 167, 188, 191, 227], "abid": [10, 55], "myop": 10, "myadd": [10, 11], "myadd_cpu": 10, "self_": 10, "other_": 10, "self_ptr": 10, "other_ptr": 10, "catch": [10, 12, 186, 188, 234, 273], "myadd_cuda": 10, "boundari": [10, 133, 171, 269], "myops_cpu": 10, "myops_cuda": 10, "subdivid": 10, "xla": [10, 11, 16, 257], "torch_xla": [10, 11], "useabl": 10, "behav": [10, 17, 101, 111, 156, 163, 173, 241], "autogradnotimplementedfallback": 10, "notimpl": 10, "node": [10, 21, 33, 45, 49, 56, 57, 58, 59, 63, 65, 93, 100, 104, 116, 119, 129, 132, 133, 134, 138, 140, 143, 144, 145, 152, 153, 174, 177, 188, 194, 199, 212, 229, 260, 276, 278], "preserv": [10, 19, 101, 130, 133, 156, 169, 206, 212, 215, 257, 262], "require_grad": 10, "ness": 10, "pin": [10, 102, 136, 165, 260], "lost": [10, 19, 215], "alias": [10, 11, 188], "adinplaceorview": [10, 276], "bookkeep": [10, 245], "autogradnotimplementedinplaceorviewfallback": 10, "logi": 10, "annot": [10, 11, 21, 35, 54, 105, 116, 184, 186, 188, 245], "guess": [10, 38, 45, 52, 55, 138, 177], "twist": 10, "constitut": [10, 15], "hood": [10, 22, 52, 55, 57, 59, 63, 119, 135, 136, 154, 155, 165, 175, 208, 225, 228], "singleton": [10, 174], "findschemaorthrow": 10, "decltyp": 10, "qualifi": [10, 227], "overload": 10, "typic": [10, 12, 15, 22, 35, 45, 49, 51, 57, 58, 85, 96, 104, 105, 110, 133, 135, 137, 141, 143, 153, 162, 165, 171, 174, 184, 186, 188, 189, 232, 233, 234, 235, 244, 246, 260, 265, 275, 278], "cast": [10, 19, 21, 76, 118, 132, 133, 165, 188, 215, 244], "lookup": [10, 18, 110, 140, 175], "typo": 10, "myaddfunct": [10, 11], "autononvariabletypemod": [10, 11], "myadd_autograd": [10, 11], "except": [10, 12, 19, 42, 45, 51, 52, 55, 94, 98, 101, 105, 108, 111, 112, 126, 133, 134, 138, 149, 151, 154, 156, 164, 168, 177, 188, 197, 210, 213, 215, 217, 219, 220, 234, 251, 269, 275], "raii": 10, "guard": [10, 145, 224, 276], "infinit": 10, "overflow": [10, 52, 198, 244], "send": [10, 11, 12, 13, 46, 47, 63, 91, 147, 155, 165, 167, 168, 173, 174, 175, 189, 225, 250], "exclud": [10, 45, 133, 186, 212, 250], "consider": [10, 11, 131, 188, 189, 275], "handler": [10, 184, 257, 276], "autogradcpu": 10, "autogradcuda": [10, 276], "pythondispatch": 10, "_python_dispatch": 10, "isn": [10, 93, 104, 151, 165, 170, 182, 188, 189, 207, 245, 247, 261, 262], "glorifi": 10, "add_cpu": 10, "add_cuda": 10, "unsupport": [10, 112, 116, 130, 186, 188, 275], "decentr": 10, "importantli": [10, 22, 142, 162, 165, 205, 245], "parti": [10, 17, 133, 134, 168], "aspect": [10, 16, 78, 147, 191, 245], "patch": [10, 11, 172], "c10": [10, 11, 16, 168, 199, 209, 233, 234, 245, 259], "dispatchkei": [10, 11], "varieti": [10, 26, 34, 52, 93, 94, 98, 102, 111, 120, 139, 165, 192, 208, 278], "fallback": [10, 11, 16, 112, 192], "opt": [10, 111, 137, 156, 168, 174, 175, 181, 198, 217, 223, 276], "amp": [10, 16, 63, 133, 156, 209, 221, 234, 264, 268], "incom": [10, 96, 181], "float16": [10, 16, 132, 156, 221, 244], "float32": [10, 15, 132, 133, 170, 171, 175, 194, 199, 209, 244, 257, 276], "matmul": [10, 135, 153, 188, 198, 210, 215, 219, 221, 233, 244], "impair": 10, "converg": [10, 38, 52, 55, 66, 102, 103, 119, 120, 135, 147, 163, 172, 177, 224, 244, 261, 264], "hypothet": 10, "autocast_mod": 10, "mymatmul_autocast": 10, "excludedispatchkeyguard": 10, "no_autocast": 10, "mymatmul": 10, "cached_cast": 10, "khalf": 10, "elig": [10, 260], "polici": [10, 16, 130, 131, 133, 155, 172, 173, 175, 178, 278, 280], "mixtur": [10, 232], "meanwhil": [10, 136, 153, 206, 234], "float64": 10, "unaffect": [10, 103], "forc": [10, 15, 19, 52, 98, 130, 177, 186, 192, 205, 207, 215, 244, 260, 269], "fallthrough": 10, "occur": [10, 12, 17, 22, 56, 85, 103, 153, 156, 165, 173, 174, 181, 184, 188, 189, 196, 198, 228, 250, 271], "fall": [10, 16, 94, 163, 172, 273], "unfortun": [10, 119, 147, 188], "aren": [10, 142, 148, 188, 189, 207, 260, 263], "dri": [10, 181], "guidanc": [10, 134, 244, 278], "reduct": [10, 101, 131, 132, 133, 136, 141, 162, 168, 181, 184, 192, 205, 207, 213, 244, 260], "gemm": [10, 153, 209, 233], "unless": [10, 42, 51, 101, 105, 112, 171, 188, 198, 219, 249], "categori": [10, 11, 22, 78, 85, 94, 101, 126, 138, 139, 181, 188], "promote_typ": 10, "widest": 10, "safest": 10, "my_multiple_input_op_autocast": 10, "t0": [10, 132, 223, 245], "t1": [10, 245], "optimist": 10, "exec_typ": 10, "my_multiple_input_op": 10, "myadd_autocast": 10, "gymnast": 10, "suitabl": [10, 43, 143, 147, 184, 259], "invoc": [10, 152, 173, 241, 265, 271], "stabil": [10, 103, 172], "41478": 10, "repo": [11, 16, 21, 22, 57, 85, 130, 143, 147, 165, 173, 174, 189, 197, 198, 235], "mainten": [11, 184], "solut": [11, 19, 55, 112, 120, 130, 153, 164, 165, 184, 186, 189, 207, 210, 215, 228, 245, 260, 264, 270], "pr": [11, 182, 192, 234, 259], "propos": [11, 26, 135, 148, 163, 205, 207, 228], "request": [11, 33, 45, 91, 101, 111, 132, 163, 170, 173, 174, 199, 207, 208, 209, 214, 225, 226], "hardwar": [11, 16, 19, 42, 51, 53, 101, 103, 113, 138, 147, 149, 154, 156, 164, 165, 168, 169, 189, 192, 198, 215, 221, 233, 234, 235, 246, 260, 268, 272, 275], "googl": [11, 19, 26, 37, 52, 55, 100, 111, 130, 147, 148, 171, 172, 181, 189, 278], "tpu": [11, 168, 263], "chip": 11, "layout": [11, 19, 135, 192, 205, 208, 210, 213, 215, 229, 260], "spars": [11, 18, 98, 105, 110, 130, 148, 169, 189, 192, 207, 213, 216, 257, 280], "quantiz": [11, 103, 126, 130, 162, 216, 221, 248, 257, 264, 280], "enforc": [11, 15, 137, 163, 205, 206], "mainli": [11, 15, 16, 21, 153, 181, 186, 212, 235, 274], "haven": [11, 91, 93, 96, 101, 104, 108, 110, 149, 152, 164], "identifi": [11, 19, 35, 56, 58, 78, 85, 86, 94, 111, 118, 144, 155, 156, 160, 169, 174, 188, 191, 196, 208, 215, 228, 275], "carri": [11, 15, 52, 55, 93, 101, 103, 107, 143, 148, 156, 177, 249], "privateuse1": [11, 130, 214], "autogradprivateuse1": [11, 16], "privateuse2": [11, 16], "autogradprivateuse2": [11, 16], "privateuse3": [11, 16], "autogradprivateuse3": [11, 16], "tensorimpl": [11, 16, 245, 259], "storag": [11, 16, 17, 102, 107, 120, 136, 148, 149, 156, 165, 171, 181, 196, 205, 207, 208, 213, 216, 217, 226, 227, 244, 249, 257, 280], "dispatchkeyset": [11, 16, 276], "k": [11, 13, 22, 85, 94, 104, 135, 173, 174, 176, 196, 209, 215], "caffe2": [11, 88], "typemeta": 11, "data_typ": [11, 107], "opaquetensorimpl": 11, "tweak": [11, 52, 263], "overrid": [11, 16, 54, 96, 105, 134, 152, 156, 168, 184, 264, 271], "vulkan": [11, 213], "submit": [11, 234], "src": [11, 12, 116, 147, 168, 220, 259], "registrationdeclar": 11, "snippet": [11, 131, 132, 134, 140, 147, 153, 168, 176, 194, 197, 205, 209, 214, 229, 244, 249, 260, 264], "ab": [11, 186, 210, 221, 250], "abs_": 11, "abs_out": 11, "absolute_": 11, "absolute_out": 11, "angl": [11, 15, 110], "angle_out": 11, "sgn": 11, "uniqu": [11, 19, 52, 56, 58, 104, 105, 106, 108, 110, 132, 144, 174, 177, 189, 191, 205, 215, 275], "boolean": [11, 148, 188], "impli": [11, 103, 108, 188, 226, 249, 259, 272], "schema_my_op1": 11, "my_op1": 11, "schema_my_op2": 11, "my_op2": 11, "schema_my_op2_backward": 11, "my_op2_backward": 11, "zoom": [11, 85, 100, 137, 181, 184], "1600": [11, 245, 259], "grow": [11, 52, 105, 134, 136, 143, 226], "unrealist": 11, "classifi": [11, 13, 22, 26, 34, 45, 48, 49, 50, 55, 60, 78, 85, 91, 96, 98, 103, 120, 126, 130, 133, 139, 155, 160, 177, 178, 191, 192, 243, 264, 275, 280], "accompani": 11, "comment": [11, 147, 162, 177, 205, 219, 234, 235, 246], "sacrif": [11, 169], "max_pool2d": [11, 49, 131, 174, 220, 235, 250], "worri": [11, 55, 105, 142, 145, 162, 175, 229], "my_op": 11, "squeez": [11, 15, 35, 101, 182, 198], "max": [11, 12, 22, 52, 55, 85, 98, 111, 131, 137, 147, 171, 182, 184, 188, 192, 198, 210, 213, 215, 260, 275, 278, 279], "op_backward": 11, "proper": [11, 33, 132, 135, 145, 156, 171, 175, 184, 189, 205, 260], "rare": [11, 16, 52, 126, 165, 177, 260], "assumpt": [11, 15, 78, 103, 110, 111, 159, 165], "myadd_schema": 11, "train": [11, 13, 18, 19, 21, 33, 37, 38, 39, 43, 45, 48, 49, 50, 54, 57, 59, 60, 63, 65, 66, 68, 70, 71, 72, 75, 76, 78, 85, 88, 94, 95, 97, 98, 101, 103, 104, 106, 108, 110, 111, 113, 119, 130, 131, 133, 134, 137, 140, 141, 145, 156, 157, 159, 160, 163, 164, 167, 168, 170, 173, 174, 175, 176, 178, 181, 184, 185, 186, 188, 191, 194, 196, 197, 207, 215, 221, 223, 224, 226, 227, 228, 229, 244, 247, 250, 258, 261, 262, 264, 265, 275, 279, 280], "my_add": 11, "_xlac": 11, "torch_xla_sourc": 11, "library_dir": 11, "extra_link_arg": 11, "make_relative_rpath": 11, "seamlessli": [11, 15, 56, 135, 189, 192, 245, 270], "nm": [11, 234], "torchvsion": 11, "torchvis": [11, 13, 22, 35, 37, 39, 43, 45, 46, 53, 60, 91, 94, 96, 97, 100, 102, 103, 126, 130, 131, 132, 152, 162, 170, 173, 174, 178, 181, 182, 184, 186, 198, 212, 220, 234, 235, 250, 258, 260, 263, 268, 274, 275, 280], "adhoc": 11, "unbox": 11, "potenti": [11, 15, 78, 93, 104, 132, 134, 140, 165, 174, 186, 188, 191, 196, 212, 213, 270, 272], "eager": [11, 88, 90, 140, 153, 156, 176, 186, 188, 192, 212, 223, 232, 235, 260, 273, 275], "wiki": [11, 151, 156], "suit": [11, 94, 118, 171, 209, 233], "ship": [11, 46, 96], "delet": [11, 86, 136, 145, 162, 167, 175, 184, 198], "old": [11, 22, 120, 133, 134, 169, 181, 210], "until": [11, 52, 85, 93, 132, 134, 138, 139, 147, 148, 153, 162, 165, 171, 173, 174, 175, 181, 194, 205, 225, 245], "interrupt": [11, 56, 91, 177], "quarterli": 11, "cadenc": 11, "join": [11, 21, 35, 42, 51, 52, 53, 56, 129, 131, 138, 145, 147, 171, 173, 174, 175, 196, 225, 226, 227, 245, 279], "announc": 11, "slack": [11, 46], "com": [11, 21, 22, 26, 52, 111, 116, 131, 138, 139, 141, 151, 152, 156, 164, 177, 184, 185, 191, 193, 198, 219, 220, 243, 245, 275], "Not": [11, 145, 170, 279], "search": [11, 21, 52, 130, 137, 153, 169, 188, 198, 278], "instantiate_device_type_test": 11, "testtorchdevicetyp": 11, "testviewop": 11, "testtensordeviceop": 11, "testtypepromot": 11, "__reduce_ex__": 11, "monkei": 11, "direct": [11, 33, 45, 49, 55, 78, 93, 94, 96, 102, 110, 137, 147, 151, 155, 159, 163, 177, 197, 198, 208, 226, 264, 273], "suppos": [11, 103, 104, 105, 110, 131, 186, 191, 193, 214, 234], "vice": [11, 42, 51], "versa": [11, 42, 51], "Such": [11, 12, 93], "seamless": [11, 189, 213, 228], "coverag": [11, 151, 154, 156, 210, 212, 244], "comprehens": [11, 26, 42, 51, 94, 116, 153, 188, 232, 259, 260], "refactor": [11, 120, 143], "codegen": [11, 153, 276], "dev": [11, 105, 140, 170, 181, 184, 186, 213, 241, 244], "andrew": [12, 193], "gu": 12, "subject": [12, 15, 131, 151, 177, 188, 209, 210, 212, 219, 220, 221, 225, 232, 245, 274], "shard": [12, 129, 130, 143, 194, 225, 227, 228, 229, 264], "saw": [12, 15, 38, 52, 96, 98, 101, 105, 107, 151, 154, 155], "skeleton": [12, 15, 257], "implicitli": [12, 45, 52, 93, 131, 142, 176, 188, 241], "schedul": [12, 85, 91, 102, 126, 131, 132, 133, 145, 167, 171, 172, 181, 191, 250, 260, 264, 267, 278, 280], "rank": [12, 18, 21, 47, 56, 58, 85, 130, 131, 132, 133, 134, 145, 147, 167, 168, 173, 174, 175, 189, 194, 196, 210, 225, 226, 227, 229, 278, 279], "commun": [12, 16, 21, 58, 130, 131, 132, 133, 135, 137, 143, 144, 145, 167, 168, 171, 173, 174, 175, 181, 184, 188, 189, 194, 196, 200, 213, 228, 229, 260, 264], "particip": [12, 98, 144, 174, 244, 260], "hang": [12, 58, 139], "persist": [12, 40, 226, 244], "facilit": [12, 15, 52, 94, 101, 103, 120, 130, 133, 135, 148, 210, 214, 260], "earli": [12, 55, 91, 145, 147, 165, 193, 207, 232], "shadow": 12, "hook": [12, 133, 135, 140, 145, 169, 178, 251, 276, 280], "mp": [12, 16, 34, 39, 42, 56, 58, 65, 78, 101, 119, 126, 130, 131, 132, 145, 147, 173, 174, 175, 225, 226, 227, 279], "ddp": [12, 18, 56, 57, 63, 130, 131, 132, 133, 135, 144, 181, 229, 279], "nccl": [12, 21, 56, 58, 85, 131, 132, 134, 135, 145, 147, 181, 189, 194, 196, 227, 229], "world_siz": [12, 18, 21, 56, 58, 131, 132, 134, 145, 147, 167, 168, 173, 174, 175, 194, 196, 225, 226, 227, 229, 279], "num_input": 12, "master_addr": [12, 21, 56, 58, 131, 134, 145, 147, 168, 173, 174, 175, 196, 225, 226, 227, 279], "localhost": [12, 21, 56, 58, 100, 131, 134, 145, 168, 173, 174, 175, 181, 182, 189, 225, 226, 227, 229, 258, 269, 279], "master_port": [12, 21, 56, 58, 131, 134, 145, 147, 168, 173, 174, 175, 196, 225, 226, 227, 279], "29500": [12, 21, 147, 168, 173, 174, 175, 225, 279], "init_process_group": [12, 18, 21, 56, 58, 131, 132, 134, 145, 147, 167, 168, 194, 196, 226, 227, 229, 279], "device_id": [12, 58, 120, 132, 133, 145, 279], "nproc": [12, 56, 58, 131, 145, 173, 175, 194, 225, 226, 227, 279], "__name__": [12, 54, 56, 58, 131, 132, 134, 145, 147, 167, 173, 174, 175, 194, 225, 226, 227, 241, 276, 279], "__main__": [12, 54, 56, 58, 131, 132, 145, 147, 167, 173, 174, 175, 194, 225, 226, 227, 241, 245, 276, 279], "arbitrarili": [12, 52, 103, 251], "prior": [12, 16, 22, 53, 55, 93, 98, 103, 145, 155, 169, 182, 192, 225, 227], "togeth": [12, 19, 34, 40, 52, 54, 63, 88, 96, 98, 101, 102, 103, 107, 111, 131, 133, 141, 145, 148, 149, 165, 173, 175, 177, 184, 192, 215, 259, 272], "examin": [12, 85, 93, 94, 100, 102, 103, 147, 152, 165, 189], "lr": [12, 22, 49, 55, 91, 96, 100, 111, 120, 126, 131, 132, 133, 145, 147, 153, 155, 171, 172, 173, 174, 175, 182, 223, 226, 227, 234, 235, 264, 267, 268, 279, 280], "notabl": [12, 22, 91, 257], "addition": [12, 13, 38, 85, 136, 137, 145, 165, 188, 191, 196, 214, 226, 227, 269, 278], "divide_by_initial_world_s": 12, "world": [12, 15, 21, 39, 57, 93, 101, 105, 135, 147, 152, 155, 168, 172, 173, 174, 188, 189, 196, 210, 226, 227, 229, 233], "nonetheless": [12, 103], "mind": [12, 42, 52, 55, 88, 103, 144, 159], "preliminari": [12, 147], "delv": [12, 153, 272], "insight": [12, 78, 85, 147, 176, 245, 259], "join_hook": 12, "kwarg": [12, 120, 133, 152, 156, 171, 174, 188, 189, 209, 210, 217, 223, 275, 276], "join_devic": 12, "join_process_group": 12, "processgroup": [12, 18, 21, 63, 129, 130, 135, 175, 189, 196, 229, 260], "throw_on_early_termin": 12, "explain": [12, 13, 19, 45, 49, 55, 78, 94, 105, 111, 134, 135, 153, 186, 188, 199, 209, 212, 215, 250, 270, 275], "joinconfig": 12, "_join_config": 12, "main_hook": 12, "repeatedli": [12, 98, 171, 175, 197], "post_hook": 12, "is_last_join": 12, "broadcast": [12, 71, 111, 119, 133, 145, 147, 168, 188, 259, 279], "vacuou": 12, "contextlib": [12, 184], "nullcontext": 12, "conform": [12, 184], "interleav": [12, 194], "syncbatchnorm": [12, 58], "proce": [12, 103, 105, 153, 188, 196, 260], "__exit__": 12, "heartbeat": 12, "notify_join_context": 12, "serializ": 12, "fulli": [12, 13, 15, 16, 37, 49, 63, 85, 91, 96, 97, 98, 111, 126, 129, 130, 137, 140, 143, 156, 159, 172, 174, 176, 181, 207, 215, 221, 227, 232, 234, 247], "proceed": [12, 49, 103, 116, 165], "overlap": [12, 59, 131, 132, 133, 138, 143, 145, 165, 181, 184, 194, 260], "moreov": [12, 165, 205, 234, 245], "permit": [12, 244], "customiz": [12, 148], "idea": [12, 26, 78, 88, 103, 105, 106, 107, 110, 119, 135, 141, 148, 153, 163, 172, 175, 177, 205, 219, 225, 241, 245, 260, 278, 279], "counterjoinhook": 12, "sync_max_count": 12, "all_reduc": [12, 63, 131, 132, 147, 168, 196, 228], "get_rank": [12, 133, 145, 147], "process_group": [12, 196, 229], "common_rank": 12, "find_common_rank": 12, "max_count": 12, "clone": [12, 57, 101, 138, 142, 143, 147, 153, 154, 156, 167, 194, 275], "__call__": [12, 54, 169, 276], "meth": [12, 15], "to_consid": 12, "reduceop": [12, 131, 132, 147], "device_count": [12, 56, 58, 91, 101, 131, 145, 226, 227, 229], "highlight": [12, 52, 88, 112, 123, 132, 133, 176, 181, 186, 188, 189, 225, 234, 235, 272], "alexi": 13, "jacq": 13, "winston": 13, "her": [13, 168], "leon": 13, "gati": 13, "alexand": [13, 212], "ecker": 13, "matthia": 13, "bethg": 13, "artist": 13, "distanc": [13, 65, 66, 70, 71, 72, 75, 76, 93, 103, 119], "d_c": 13, "d_": 13, "indispens": [13, 171], "pil": [13, 43, 54, 170, 184, 191], "pretrain": [13, 26, 45, 78, 94, 110, 126, 130, 170, 177, 184, 212, 220, 234, 235, 274, 275], "longer": [13, 55, 61, 62, 93, 105, 111, 113, 119, 133, 136, 140, 153, 162, 169, 172, 173, 186, 188, 202, 203, 209, 210, 211, 220, 222, 224, 237, 238, 239, 240, 242, 245, 260], "resiz": [13, 22, 49, 55, 148, 234, 268], "unabl": [13, 17, 149, 164, 188, 207], "caff": 13, "picasso": 13, "jpg": [13, 35, 54, 55, 94], "reconvert": 13, "f_": [13, 171], "xl": [13, 233], "w_": [13, 110], "cl": [13, 200], "c": [13, 16, 17, 21, 22, 45, 65, 66, 75, 88, 93, 94, 100, 101, 103, 110, 111, 119, 130, 132, 139, 140, 142, 147, 153, 156, 165, 170, 175, 176, 184, 186, 188, 189, 196, 200, 209, 235, 241, 244, 245, 257, 258, 264, 274], "squar": [13, 38, 49, 54, 65, 66, 70, 71, 72, 75, 76, 93, 98, 101, 103, 119, 141, 142, 155, 163, 172, 176, 193], "contentloss": 13, "recomput": [13, 103, 141, 143, 163, 260], "act": [13, 45, 52, 93, 98, 101, 137, 148, 169, 172, 174, 188, 189], "gram": 13, "g_": 13, "hat": [13, 108], "counteract": 13, "pool": [13, 21, 55, 98, 100, 103, 111, 120, 182, 189, 251], "tend": [13, 19, 93, 98, 103, 198, 215], "almost": [13, 22, 108, 110, 131, 135, 148, 170, 188, 198], "sl": 13, "19": [13, 19, 35, 100, 153, 171, 172, 188, 198, 199, 215, 233, 250, 276], "vgg": 13, "child": [13, 118, 181, 229], "connect": [13, 49, 91, 96, 98, 110, 126, 130, 134, 135, 147, 151, 152, 159, 169, 170, 172, 192, 196, 229, 247], "eval": [13, 19, 22, 40, 52, 111, 120, 131, 132, 141, 171, 174, 177, 184, 185, 212, 215, 220, 234, 235, 268, 275, 276], "485": [13, 22, 54, 103, 170], "456": [13, 22, 54, 103, 170, 171], "406": [13, 22, 54, 103, 170], "229": [13, 22, 54, 103, 170], "224": [13, 22, 54, 103, 170, 184, 212, 220, 234, 268, 275, 276, 278], "225": [13, 22, 54, 103, 118, 170], "vgg19": [13, 156], "maxpool2d": [13, 49, 100, 120, 152, 182, 251], "align": [13, 130, 176, 177, 197, 206, 241, 276], "depth": [13, 45, 55, 59, 93, 96, 101, 107, 136, 153, 188, 223, 260], "immedi": [13, 21, 42, 51, 55, 98, 101, 108, 147, 162, 173, 174, 181, 198], "white": [13, 17, 19, 78, 98, 111, 182, 184, 215], "input_img": 13, "content_img": 13, "bfg": 13, "closur": [13, 188], "reevalu": 13, "exce": [13, 78, 141, 189], "sphinx_gallery_thumbnail_numb": 13, "neural_style_tutori": [13, 20, 280], "paszk": [14, 147, 172], "dziedzic": 14, "shall": [14, 49, 55], "learnabl": [14, 49, 70, 119, 120, 130, 217, 262], "badfftfunct": 14, "literatur": [14, 172], "confusingli": 14, "correl": [14, 85, 98, 111, 153], "filter": [14, 26, 52, 86, 94, 103, 136, 177, 189, 196, 259], "flip": [14, 154], "wrt": [14, 142], "numpy_extensions_tutori": [14, 20, 280], "freeli": 15, "inspir": [15, 147, 154, 159, 176, 219], "v1": [15, 19, 156, 172, 173, 175, 215, 225, 245], "openai": [15, 130, 155, 171, 172, 173, 175, 275], "farama": [15, 171], "gymnasium": [15, 171, 172], "stateless": [15, 149, 151], "encount": [15, 52, 132, 140, 153, 186, 188, 189, 192, 214, 260, 269, 275], "undertaken": 15, "broader": 15, "wider": [15, 154], "acquaint": 15, "set_se": 15, "avenu": [15, 88], "backpropag": [15, 38, 39, 45, 49, 52, 78, 93, 104, 105, 106, 108, 110, 111, 119, 136, 155, 189], "_set_se": 15, "torqu": 15, "upward": 15, "posit": [15, 94, 98, 105, 130, 163, 171, 172, 176, 177, 184, 188, 192, 196, 215, 243, 278], "angular": 15, "stand": [15, 88, 93, 111, 155, 192, 208], "equat": [15, 55, 171, 172, 247, 251], "motion": 15, "veloc": [15, 172], "theta": [15, 78, 105, 171], "_t": [15, 155], "sin": [15, 17, 65, 66, 70, 71, 72, 75, 76, 93, 101, 119, 154, 200, 260, 270], "theta_t": 15, "dt": 15, "rad": 15, "sec": [15, 131], "gravit": 15, "mass": 15, "accord": [15, 16, 26, 33, 101, 102, 120, 153, 155, 167, 169, 172, 176, 184, 208, 217, 221, 269], "theta_": [15, 155], "001": [15, 100, 120, 145, 173, 182, 234, 268], "deleg": [15, 130, 220], "privat": [15, 16, 134, 168, 169, 205], "merg": [15, 47, 94, 98, 170, 184, 234], "is_shar": [15, 171], "new_th": 15, "plu": [15, 105], "new_thdot": 15, "neg": [15, 38, 52, 94, 98, 104, 105, 111, 112, 153, 165, 169, 171, 243], "discourag": [15, 42, 51, 171], "possibli": [15, 55, 133, 171, 188, 196, 270], "omit": [15, 93, 100, 118, 133, 153, 171, 192, 250, 257, 259], "agent": [15, 130, 172, 173, 175, 178, 280], "param": [15, 22, 49, 54, 120, 131, 132, 133, 142, 145, 147, 149, 151, 164, 174, 175, 193, 205, 257, 279], "mandatori": [15, 151, 171], "domain": [15, 26, 35, 39, 52, 53, 78, 102, 116, 130, 171, 185, 210, 260], "accur": [15, 22, 78, 91, 96, 118, 137, 152, 165, 175, 186, 207, 212, 273], "lazili": [15, 162], "costli": [15, 136, 260], "observation_spec": [15, 171], "compositespec": 15, "dictionari": [15, 39, 40, 52, 85, 110, 113, 120, 139, 162, 164, 171, 173, 174, 177, 184, 189, 197, 249, 262, 264], "action_spec": [15, 171], "reward_spec": [15, 171], "done_spec": 15, "input_spec": [15, 171], "state_spec": 15, "output_spec": 15, "neither": [15, 101, 193, 278], "shortcut": 15, "tensorspec": 15, "irrelev": [15, 168], "incorpor": [15, 103, 112, 130, 148, 176], "pseudo": [15, 26], "_make_spec": 15, "pendulumenv": 15, "gen_param": 15, "batch_lock": 15, "homonym": [15, 165], "check_env_spec": [15, 171], "coupl": [15, 37, 52, 97, 101, 102, 110, 132, 135, 142, 148, 149, 162, 165, 182, 188, 260], "rand_step": 15, "randomli": [15, 46, 54, 55, 75, 76, 91, 96, 98, 119, 139, 155, 172, 177, 189], "invers": [15, 101, 197, 206, 225], "showcas": [15, 68, 132, 133, 159, 162, 189, 199, 213], "thdot": 15, "effort": [15, 52, 54, 55, 116, 259], "summar": [15, 52, 54, 111, 123, 129, 132, 137, 181, 188], "_apply_transform": 15, "_call": 15, "inv": 15, "_inv_apply_transform": 15, "eventu": [15, 134, 141, 148], "out_keys_inv": 15, "unitari": 15, "sine": [15, 119], "cosin": [15, 233], "raw": [15, 34, 46, 52, 71, 85, 111, 119, 196, 273], "del_kei": 15, "mdp": 15, "gather": [15, 58, 94, 100, 131, 133, 135, 145, 147, 148, 152, 171, 194, 213, 219, 244], "unexplor": 15, "abil": [15, 101, 111, 120, 135, 136, 147, 179, 182, 186, 192, 207, 220], "recreat": [15, 33, 45], "Of": [15, 103, 107, 111, 136, 147, 182, 206, 208, 241, 274], "clip": [15, 52, 78, 171], "scratch": [15, 33, 45, 52, 56, 103, 104, 120, 123, 126, 130, 178, 196, 261, 264, 280], "advanc": [16, 19, 20, 22, 45, 91, 106, 109, 112, 113, 115, 116, 129, 130, 133, 145, 165, 184, 189, 192, 205, 208, 209, 212, 213, 215, 216, 219, 228, 234, 235, 260, 264, 278, 280], "verif": [16, 174], "rapid": [16, 93, 208], "manufactur": 16, "imposs": [16, 96, 104, 162, 219], "simultan": [16, 33, 45, 59, 130, 137, 147, 165, 170, 260], "began": 16, "enhanc": [16, 94, 134, 138, 165, 179, 200, 209, 214, 221, 260, 275, 278], "rapidli": 16, "situat": [16, 93, 101, 133, 141, 142, 145, 147, 191, 198], "wrapper_custom_tensor_add": 16, "torch_fn": 16, "custom_cpu_fallback": 16, "operatorhandl": 16, "hint": [16, 21, 93, 103, 104, 108, 116, 136, 147, 173, 181, 188, 276], "cpu_fallback": 16, "cppfunction": 16, "makefromboxedfunct": 16, "cumtomselufunct": 16, "selu": 16, "wrapper_autogradcumstom__selu": 16, "wrapper_autogradcustom__selu": 16, "autocastprivateuse1": 16, "autocast": [16, 209, 215, 221, 234, 268], "kernel_privateuseon": 16, "makefallthrough": 16, "backendmodul": 16, "_register_device_modul": 16, "backend_nam": 16, "get_amp_supported_dtyp": 16, "is_autocast_en": 16, "get_autocast_dtyp": 16, "set_autocast_dtyp": 16, "set_autocast_en": 16, "generatorimpl": 16, "builder": [16, 188, 276], "register_generator_privateuse1": 16, "customgeneratorimpl": 16, "make_custom_gener": 16, "deviceindex": 16, "device_index": 16, "make_gener": 16, "make_cumstom_gener": 16, "event": [16, 85, 118, 131, 132, 173, 186, 196, 250, 258, 273, 276], "deviceguard": 16, "deviceguardimplinterfac": 16, "c10_register_guard_impl": 16, "customguardimpl": 16, "backend_meta_": 16, "extrameta": 16, "backendmeta": 16, "custombackendmetadata": 16, "unordered_map": 16, "tensorbackendmetaregistri": 16, "for_seri": 16, "for_deseri": 16, "expand": [16, 93, 107, 113, 153, 160, 182, 210, 226, 275], "timer": [16, 55, 154, 177, 215, 223, 248, 256, 280], "ascend": [16, 55, 86, 214], "npu": [16, 212, 214], "meet": [16, 53, 55, 217, 235, 245], "usabl": [16, 120, 148, 196, 261], "compli": 16, "habit": 16, "torch_npu": [16, 214], "exclus": [16, 169], "rename_privateuse1_backend": 16, "register_privateuse1_backend": 16, "unsupported_dtyp": 16, "quint8": [16, 193], "generate_methods_for_privateuse1_backend": 16, "for_tensor": 16, "for_modul": 16, "for_storag": 16, "is_npu": 16, "perhap": [17, 78, 138, 169, 227], "prevent": [17, 38, 52, 58, 111, 118, 136, 139, 145, 153, 155, 165, 188, 189, 214, 244, 245, 260, 265, 278], "custom_op": [17, 116, 272], "land": [17, 130, 140, 155, 192, 207, 234, 279], "induc": [17, 169, 196], "bad": [17, 91, 136, 198, 260], "fullgraph": [17, 140, 186, 223, 272], "uncom": [17, 52, 54, 66, 76, 96, 100, 107, 111, 119, 167, 172], "cropped_img": 17, "img": [17, 35, 94, 100, 130, 182, 184], "black": [17, 78, 85, 98, 111, 130, 135, 137, 173, 177], "aka": [17, 154, 156, 165, 192, 234, 274], "mutates_arg": 17, "led": 17, "past": [17, 52, 53, 102, 107, 188, 192], "exercis": [17, 22, 46, 147, 244], "reader": [17, 108, 147, 192, 259], "region": [17, 94, 101, 137, 152, 179, 184, 191, 241, 244, 248, 260, 264, 267, 271, 273, 280], "unus": [17, 153, 168], "against": [17, 38, 39, 46, 98, 100, 113, 134, 147, 156, 171, 192, 225, 234, 245], "forgot": [17, 196], "python_custom_op": [17, 20, 280], "pritam": 18, "damania": 18, "yi": [18, 188, 274], "wang": [18, 26, 113, 115, 116, 153, 155, 196], "distributeddataparallel": [18, 58, 59, 63, 129, 131, 132, 133, 147, 168, 175, 244, 279], "paradigm": [18, 19, 63, 103, 119, 129, 174, 175, 215], "embed": [18, 52, 98, 104, 106, 108, 109, 120, 130, 132, 133, 135, 167, 174, 175, 177, 182, 192, 194, 210, 228, 280], "dens": [18, 19, 189, 192, 205, 210, 215], "fc": [18, 45, 155, 217], "replic": [18, 21, 59, 63, 130, 131, 135, 143, 145, 147, 174, 175, 189, 229], "trainer": [18, 26, 58, 137, 143, 173, 174, 175, 215, 227], "hybrid": [18, 87, 89, 229, 280], "pipedream": 18, "master": [18, 22, 52, 131, 141, 147, 152, 156, 174, 175, 191, 193, 196, 213, 220, 225, 234], "embeddingbag": [18, 21], "drive": [18, 55, 93, 96, 98, 130, 155, 165, 205, 225], "respond": [18, 94, 155, 174], "amongst": [18, 189, 206], "themselv": [18, 98, 189, 207], "remotemodul": 18, "kick": [18, 33, 45, 162, 173, 174, 175], "remot": [18, 63, 129, 137, 173, 174, 175, 181, 225, 241, 269, 278], "hybridmodel": 18, "allreduc": [18, 85, 131, 135, 145, 168, 196, 260], "firstli": [18, 116, 153, 172], "tcp": [18, 58, 134, 143, 144, 147, 225], "init_method": [18, 145, 147, 194], "_run_train": [18, 175], "rpc_async": [18, 173, 175], "exit": [18, 151, 173, 174, 175, 196, 223, 224, 232, 271, 276, 278], "conflict": [18, 153, 188], "remote_emb_modul": 18, "rref": [18, 173, 174, 225], "distributedoptim": [18, 174, 175, 225], "remote_paramet": 18, "cannnot": 18, "crossentropyloss": [18, 22, 38, 100, 105, 135, 167, 175, 182, 234, 268], "get_next_batch": [18, 173, 175], "jess": [19, 215], "cai": [19, 215], "seek": [19, 88, 94, 215, 228], "grain": [19, 35, 93, 132, 147, 181, 186, 215, 244, 245, 259], "2n": [19, 215], "degrad": [19, 78, 215], "sparsifi": [19, 130, 169, 215], "answer": [19, 38, 94, 98, 105, 147, 152, 162, 177, 188, 189, 215], "tune": [19, 22, 38, 85, 103, 111, 121, 129, 130, 131, 137, 140, 170, 198, 209, 212, 215, 235, 248, 256, 259, 264, 278, 280], "recov": [19, 131, 132, 145, 156, 215], "nearli": [19, 111, 182, 215, 245], "f1": [19, 186, 215], "86": [19, 153, 170, 171, 175, 192, 215, 233, 245, 276], "92": [19, 171, 215, 233, 245], "3x": [19, 66, 119, 215, 221, 244, 260], "beginn": [19, 36, 41, 47, 48, 50, 67, 73, 77, 80, 81, 82, 83, 87, 89, 95, 97, 99, 106, 109, 114, 117, 119, 121, 130, 215, 252, 253, 254, 255], "to_sparse_semi_structur": [19, 215], "motiv": [19, 78, 134, 153, 174, 193, 199, 206, 207, 210, 215], "affect": [19, 94, 98, 102, 103, 142, 165, 167, 215, 260], "swap": [19, 54, 105, 135, 165, 171, 192, 198, 210, 215, 257], "compress": [19, 94, 169, 205, 208, 212, 215, 235], "arrang": [19, 119, 215], "drawback": [19, 110, 188, 215, 226, 227], "2020": [19, 215], "amper": [19, 132, 159, 164, 215, 244], "cutlass": [19, 209, 215], "cusparselt": [19, 215], "milder": [19, 215], "account": [19, 53, 111, 148, 162, 165, 177, 182, 192, 212, 215, 274], "retrain": [19, 215], "sweet": [19, 215], "spot": [19, 96, 100, 101, 138, 215], "2x": [19, 88, 130, 142, 162, 215, 233], "theoret": [19, 55, 165, 205, 215, 265], "granular": [19, 132, 153, 189, 215, 250, 260, 278], "fp16": [19, 132, 156, 198, 209, 215], "resnet": [19, 45, 46, 94, 136, 181, 215, 260], "imagenet": [19, 46, 54, 94, 126, 170, 215], "76": [19, 156, 171, 175, 192, 215, 245], "resnext": [19, 215], "101_32x8d": [19, 215], "79": [19, 153, 171, 215, 245, 250, 276], "xception": [19, 215], "ssd": [19, 215, 260], "rn50": [19, 215], "coco2017": [19, 215], "bbap": [19, 215], "24": [19, 22, 153, 170, 171, 192, 215, 233, 245], "maskrcnn": [19, 215], "fairseq": [19, 215], "en": [19, 151, 177, 184, 215], "de": [19, 21, 177, 215], "wmt14": [19, 215], "bleu": [19, 215], "squad": [19, 215], "91": [19, 171, 175, 215, 233, 245], "workflow": [19, 22, 37, 85, 90, 91, 112, 130, 131, 189, 208, 213, 215, 264], "perspect": [19, 107, 171, 215, 278], "subproblem": [19, 215], "bmatrix": [19, 108, 215], "handoff": [19, 215], "anticip": [19, 215], "area": [19, 94, 98, 182, 191, 198, 208, 215, 243], "littl": [19, 55, 96, 103, 105, 111, 148, 171, 173, 175, 176, 179, 181, 215], "colab": [19, 21, 26, 37, 42, 51, 97, 100, 111, 130, 147, 148, 154, 171, 172, 184, 189], "pip": [19, 26, 53, 85, 94, 100, 113, 115, 155, 170, 172, 181, 184, 186, 191, 196, 198, 212, 220, 233, 235, 243, 245, 247, 250, 258, 261, 262, 263, 265, 272, 278], "panda": [19, 35, 54, 78, 184], "hug": [19, 153], "face": [19, 46, 54, 55, 78, 153, 275], "token": [19, 52, 110, 132, 135, 139, 167, 176, 177, 192, 215, 260, 275], "val": [19, 22, 132, 170, 215], "segment": [19, 130, 192, 198, 215], "text": [19, 35, 46, 55, 78, 88, 94, 104, 105, 107, 108, 110, 129, 130, 132, 138, 139, 147, 160, 165, 171, 172, 177, 181, 184, 192, 215, 241, 243, 275], "wikipedia": [19, 151, 215], "articl": [19, 35, 215], "score": [19, 52, 94, 104, 108, 110, 118, 176, 177, 191, 192, 194, 215, 243, 275], "fair": [19, 103, 210, 215], "lowest": [19, 131, 169, 215], "l1": [19, 91, 169, 215], "ao": [19, 22, 193, 198, 212, 215], "satisfi": [19, 137, 215, 217, 260], "anytim": [19, 215], "pruner": [19, 215], "update_mask": [19, 215], "shot": [19, 173, 215, 275], "wouldn": [19, 110, 131, 148, 215], "squash_mask": [19, 215], "left": [19, 33, 45, 49, 52, 55, 66, 88, 93, 100, 101, 105, 110, 119, 120, 147, 155, 159, 171, 172, 174, 176, 181, 182, 215, 241, 264], "quickstart": [19, 33, 34, 35, 36, 37, 38, 40, 42, 43, 130, 215], "28x": [19, 215], "amen": [19, 215], "spent": [19, 85, 176, 181, 215, 245, 250, 265], "delta": [19, 153, 154, 172, 215, 245, 259], "exact": [19, 103, 120, 141, 176, 188, 192, 196, 215, 223], "78": [19, 171, 215, 245], "53": [19, 154, 156, 171, 215, 233, 250, 276], "44": [19, 100, 153, 171, 175, 215], "09": [19, 35, 52, 153, 171, 175, 215, 233], "93": [19, 118, 175, 215, 233, 245, 250], "49": [19, 99, 100, 156, 175, 215, 245, 280], "15": [19, 26, 35, 47, 78, 96, 98, 100, 126, 171, 182, 184, 191, 215, 233, 245, 250, 256], "54": [19, 156, 171, 245, 276], "71x": 19, "35": [19, 135, 156, 233, 235], "74": [19, 171, 175, 233, 245, 250], "23x": 19, "72": [19, 100, 170, 171, 245, 250], "71": [19, 22, 54, 153, 175, 276], "59": [19, 170, 171, 184, 245, 250, 276], "41": [19, 131, 170, 171, 245, 250, 276], "22x": 19, "286": [19, 156, 184, 215], "65": [19, 35, 54, 100, 171, 175, 191, 192, 245], "247": [19, 175], "63": [19, 171, 250], "14x": 19, "46": [19, 153, 156, 170, 171], "02x": 19, "ye": [19, 53, 162, 272], "47": [19, 75, 91, 156, 171, 233, 245, 250], "68": [19, 54, 153, 171, 245], "18x": [19, 215], "36": [19, 35, 170, 171, 233], "13x": 19, "159": 19, "22": [19, 35, 100, 153, 156, 171, 175, 233, 245], "142": [19, 233], "23": [19, 153, 171, 175, 178, 233, 245, 250, 259, 276, 280], "12x": [19, 192], "sparsesemistructuredtensor": [19, 215], "semi_structured_spars": [19, 20, 280], "00": [20, 35, 41, 50, 67, 73, 77, 89, 96, 99, 100, 109, 117, 118, 121, 153, 171, 175, 178, 184, 198, 200, 216, 233, 250, 256, 267, 280], "012": [20, 109, 216], "mem": [20, 41, 50, 67, 73, 77, 85, 89, 99, 109, 117, 118, 121, 178, 216, 250, 256, 267, 280], "mb": [20, 22, 41, 50, 67, 73, 77, 89, 99, 109, 117, 118, 121, 131, 178, 216, 250, 256, 267, 279, 280], "torchrl": [20, 130, 148, 155, 178, 280], "ddpg": [20, 130, 280], "scipi": [20, 46, 130, 142, 186, 280], "pendulum": [20, 130, 171, 280], "acceler": [20, 34, 39, 42, 51, 52, 53, 60, 63, 65, 78, 103, 115, 119, 126, 130, 138, 156, 165, 210, 213, 216, 221, 224, 233, 234, 260, 280], "bert": [20, 98, 130, 131, 212, 213, 280], "semi": [20, 130, 192, 210, 213, 280], "sparsiti": [20, 110, 130, 169, 192, 205, 207, 213, 216, 280], "000": [20, 22, 35, 41, 67, 73, 99, 112, 117, 121, 137, 155, 156, 178, 182, 184, 216, 256, 280], "supervis": [20, 105, 130, 179, 184, 280], "usb": [20, 130, 170, 280], "usb_semisup_learn": [20, 26, 280], "embeddingplann": [21, 130], "conda": [21, 85, 94, 100, 147, 153, 196, 198, 213, 235, 243, 258, 259, 278], "cudatoolkit": 21, "sudo": [21, 181, 220], "rm": [21, 225], "miniconda3": [21, 259], "py37_4": 21, "sh": [21, 145, 220, 241], "anaconda": [21, 85, 94, 147, 258], "chmod": 21, "fbgemm": [21, 22, 189, 193], "ipython": [21, 111, 118], "cp": [21, 194, 220], "restart": [21, 94, 100, 144, 172], "newli": [21, 126, 147], "python37": 21, "dynload": 21, "enviro": 21, "spmd": [21, 135, 227], "mimic": [21, 22, 103, 198, 205], "launcher": 21, "embeddingbagcollect": 21, "bag": [21, 35, 37, 100, 182, 189], "ebc": [21, 189], "4096": [21, 189, 233], "parameterconstraint": 21, "placement": [21, 133, 212, 278], "evenli": [21, 93], "intra": [21, 132, 135, 229], "interconnect": [21, 247], "nvlink": [21, 135, 225], "data_parallel": 21, "planner": 21, "embedding_typ": 21, "embeddingcomputekernel": 21, "shardingtyp": 21, "dict": [21, 52, 54, 162, 171, 188, 191, 226, 227, 232, 244, 249], "large_table_cnt": 21, "small_table_cnt": 21, "large_t": 21, "embeddingbagconfig": 21, "large_table_": 21, "embedding_dim": [21, 98], "num_embed": 21, "feature_nam": 21, "large_table_feature_": 21, "poolingtyp": 21, "small_tabl": 21, "small_table_": 21, "small_table_feature_": 21, "gen_constraint": 21, "sharding_typ": 21, "table_wis": 21, "large_table_constraint": 21, "small_table_constraint": 21, "mimick": 21, "single_rank_execut": 21, "embeddingbagcollectionshard": [21, 189], "model_parallel": 21, "embeddingshardingplann": 21, "topologi": [21, 189, 227, 229, 234, 241], "moduleshard": 21, "shardingenv": 21, "init_distributed_single_host": 21, "pyre": 21, "fixm": 21, "set_devic": [21, 56, 58, 131, 132, 145, 194, 199, 226, 227, 229, 276], "compute_devic": 21, "pg": [21, 196], "sharder": [21, 189], "shardingplan": 21, "collective_plan": 21, "sharded_model": 21, "from_process_group": 21, "spmd_sharing_simul": 21, "get_context": [21, 147, 276], "exitcod": 21, "factor": [21, 98, 126, 165, 172, 173, 186, 189, 198, 226], "medium": [21, 134, 191, 260], "large_table_0": 21, "parametershard": 21, "compute_kernel": 21, "batched_fus": 21, "sharding_spec": 21, "enumerableshardingspec": 21, "shardmetadata": 21, "shard_offset": 21, "shard_siz": 21, "large_table_1": 21, "small_table_0": 21, "small_table_1": 21, "finer": [21, 35, 250], "halv": [21, 118], "row_wis": 21, "512": [21, 132, 154, 167, 188, 210, 215, 221, 234, 245, 250], "imbal": [21, 260], "vertic": 21, "column_wis": 21, "unfortu": 21, "futur": [21, 52, 111, 116, 118, 131, 151, 155, 162, 168, 172, 173, 174, 175, 193, 208, 226, 233, 262, 273], "batched_dens": 21, "raghuraman": 22, "krishnamoorthi": 22, "seth": [22, 37], "weidman": 22, "jerri": 22, "zhang": [22, 226, 227, 229], "decreas": [22, 39, 52, 78, 86, 103, 111, 135, 138, 189, 208], "mobilenetv2": [22, 213], "np": [22, 54, 75, 100, 104, 111, 119, 170, 175, 182, 184, 206, 210, 215, 259, 275], "dataload": [22, 33, 34, 36, 37, 38, 39, 40, 42, 43, 46, 47, 55, 58, 78, 91, 100, 103, 121, 131, 132, 138, 147, 165, 167, 174, 181, 182, 184, 212, 234, 235, 236, 248, 260, 268, 280], "filterwarn": [22, 171, 184], "ignor": [22, 54, 103, 108, 110, 120, 168, 171, 184, 188, 191, 193, 206, 207, 210, 244, 250, 261, 273], "deprecationwarn": 22, "seed": [22, 55, 78, 96, 103, 131, 132, 147, 172, 173, 175, 210], "manual_se": [22, 101, 131, 132, 147, 154, 172, 173, 194, 210, 215, 279], "191009": 22, "floatfunct": 22, "quantstub": 22, "dequantstub": 22, "relu6": 22, "_make_divis": 22, "divisor": 22, "min_valu": 22, "tf": [22, 100], "divis": [22, 101, 188, 210, 276], "tensorflow": [22, 100, 104, 106, 119], "blob": [22, 116, 131, 181, 185, 193, 220], "slim": [22, 119], "mobilenet": [22, 130, 170], "new_v": 22, "round": [22, 116, 132, 173, 245, 259], "convbnrelu": 22, "in_plan": 22, "out_plan": 22, "kernel_s": [22, 49, 111, 131, 193, 235, 251], "momentum": [22, 45, 46, 68, 72, 91, 96, 100, 102, 111, 119, 120, 141, 147, 173, 182, 189, 193, 234, 235, 262, 263, 268], "inplac": [22, 131, 215], "invertedresidu": 22, "inp": [22, 174, 188, 209, 228, 251], "oup": 22, "expand_ratio": 22, "hidden_dim": [22, 98], "use_res_connect": 22, "pw": 22, "dw": 22, "conv": [22, 55, 98, 141, 156, 174, 185, 241, 250, 251], "skip_add": 22, "num_class": [22, 173, 182, 184, 191], "width_mult": 22, "inverted_residual_set": 22, "round_nearest": 22, "v2": [22, 103, 123, 148, 170, 185, 189, 214, 221, 226, 232], "width": [22, 45, 46, 49, 98, 101, 137, 159, 184, 185, 191, 275], "input_channel": 22, "last_channel": 22, "1280": [22, 191], "96": [22, 35, 153, 171, 175, 233], "160": [22, 171, 175, 184, 245, 250, 276], "320": [22, 235], "valueerror": [22, 275], "invert": [22, 130, 171, 206], "residu": [22, 135], "output_channel": 22, "quant": [22, 193], "dequant": [22, 193, 198, 235], "isinst": [22, 133, 199, 215], "init": [22, 134, 171, 214, 217, 276], "kaiming_normal_": 22, "fan_out": 22, "zeros_": 22, "elif": [22, 167], "ones_": 22, "normal_": 22, "bn": [22, 141, 185, 193], "numer": [22, 42, 52, 75, 76, 101, 103, 104, 113, 119, 133, 137, 171, 194, 215, 244, 260], "fuse_model": 22, "is_qat": [22, 193], "fuse_modul": 22, "fuse_modules_qat": 22, "averagemet": 22, "fmt": 22, "avg": [22, 233, 250], "__str__": [22, 189], "fmtstr": 22, "__dict__": [22, 212, 257, 276], "topk": [22, 235], "maxk": 22, "pred": [22, 111, 131, 135, 174, 182, 235], "correct_k": 22, "mul_": 22, "criterion": [22, 49, 100, 175, 177, 182, 234, 268], "neval_batch": 22, "top1": [22, 235], "acc": [22, 184], "2f": [22, 131, 170, 173, 175], "top5": 22, "cnt": 22, "acc1": 22, "acc5": 22, "load_model": 22, "model_fil": 22, "state_dict": [22, 40, 52, 56, 58, 91, 131, 132, 133, 145, 169, 186, 226, 227, 234, 244, 247, 248, 256, 257, 261, 264, 280], "weights_onli": [22, 40, 120, 133, 145, 184, 235], "load_state_dict": [22, 40, 56, 91, 102, 120, 133, 145, 184, 226, 227, 235, 244, 248, 256, 261, 280], "print_size_of_model": 22, "getsiz": 22, "data_path": [22, 91, 111], "prepare_data_load": 22, "randomresizedcrop": [22, 54], "randomhorizontalflip": [22, 54], "totensor": [22, 35, 54, 96, 100, 131, 147, 170, 174, 182, 184, 220, 234, 235, 268], "dataset_test": 22, "centercrop": 22, "train_sampl": 22, "randomsampl": 22, "test_sampl": 22, "sequentialsampl": 22, "train_batch_s": 22, "data_loader_test": 22, "eval_batch_s": 22, "pre": [22, 35, 104, 130, 132, 135, 147, 170, 184, 189, 191, 192, 198, 209, 227, 270, 278], "saved_model_dir": 22, "float_model_fil": 22, "mobilenet_pretrained_float": 22, "scripted_float_model_fil": 22, "mobilenet_quantization_script": 22, "scripted_quantized_model_fil": 22, "mobilenet_quantization_scripted_quant": 22, "float_model": [22, 212], "fusion": [22, 85, 130, 153, 189, 198, 209, 234, 260, 264, 267, 276, 280], "baselin": [22, 26, 94, 103, 184, 198, 215, 245, 259], "un": [22, 101, 177], "num_eval_batch": 22, "sophist": [22, 119, 171], "num_calibration_batch": 22, "mymodel": [22, 193], "estim": [22, 49, 54, 55, 98, 137, 171, 172, 177, 189, 198, 245, 265], "qconfig": [22, 193], "default_qconfig": 22, "calibr": [22, 165, 193, 212, 235], "56": [22, 100, 156, 170, 171, 215, 245, 250, 278], "4x": [22, 132], "x86": [22, 193, 209, 221], "basi": [22, 132], "histogram": [22, 258], "per_channel_quantized_model": 22, "get_default_qconfig": 22, "67": [22, 118, 153, 171, 193, 233, 276], "qat": [22, 193], "int8": [22, 170, 198, 209, 221, 235], "train_one_epoch": 22, "ntrain_batch": 22, "avgloss": 22, "5f": 22, "start_tim": 22, "global_avg": 22, "qat_model": 22, "get_default_qat_qconfig": 22, "prepare_qat": 22, "freez": [22, 45, 126, 213, 234], "num_train_batch": 22, "nepoch": 22, "disable_observ": 22, "intrins": [22, 193], "freeze_bn_stat": 22, "quantized_model": [22, 212], "confirm": [22, 91, 94, 111, 112, 132, 154, 173], "allud": [22, 78], "run_benchmark": 22, "img_load": 22, "elaps": [22, 131, 177], "num_batch": [22, 147], "enumer": [22, 91, 100, 102, 131, 133, 135, 170, 171, 174, 181, 182, 210, 215, 234, 235, 268], "num_imag": 22, "0f": [22, 235], "macbook": [22, 177], "pro": [22, 97], "61": [22, 118, 156, 171, 215, 233], "welcom": 22, "hao": 26, "chen": [26, 188], "unifi": [26, 130, 141, 228, 243, 275], "ssl": 26, "modular": [26, 35, 120, 186, 262], "fixmatch": 26, "defixmatch": 26, "vision": [26, 39, 46, 54, 94, 98, 121, 130, 156, 162, 213, 243, 275, 280], "speech": [26, 78, 98, 104, 106, 110, 130, 139, 260], "light": [26, 55, 96, 100, 101, 141, 243], "vit": [26, 275], "famou": [26, 78], "strong": [26, 104, 188, 208, 275], "unlabel": [26, 101], "confid": [26, 55, 94, 96, 102, 105, 137, 171, 172, 182, 244], "threshold": [26, 52, 85, 137, 171, 175, 184, 233, 260], "statu": [26, 134, 137, 140, 175, 188, 274], "absorb": 26, "gaussian": [26, 49, 55, 137, 171], "overcom": [26, 112], "quantiti": [26, 103, 130, 135, 154, 159, 164], "qualiti": [26, 155, 177], "trade": [26, 137, 162, 209], "afford": 26, "cv": [26, 210], "nlp": [26, 96, 98, 105, 108, 109, 110, 123, 130, 178, 210, 244, 260, 280], "audio": [26, 35, 46, 130, 150, 180, 183], "semilearn": 26, "get_dataset": 26, "get_data_load": 26, "weak": 26, "get_net_build": 26, "get_algorithm": 26, "get_config": 26, "hyper": [26, 176, 278], "87": [26, 35, 118, 175, 209, 233, 245], "lb_imb_ratio": 26, "ulb_imb_ratio": 26, "microsoft": [26, 37, 115, 116, 181, 200], "kihyuk": 26, "sohn": 26, "et": [26, 52, 55, 78, 147, 169, 177], "al": [26, 52, 55, 78, 169, 177], "yidong": 26, "audio_data_augmentation_tutori": [27, 29], "audio_datasets_tutori": 28, "audio_feature_extractions_tutori": 30, "audio_io_tutori": 31, "frac": [33, 45, 66, 88, 93, 104, 105, 107, 110, 119, 136, 142, 147, 171, 172, 192], "partial": [33, 45, 91, 93, 107, 120, 131, 132, 133, 135, 136, 140, 148, 154, 194, 234, 261, 264], "leaf": [33, 45, 93, 186], "retain_graph": [33, 140], "surround": [33, 165], "mark": [33, 52, 135, 140, 156, 172, 173, 188, 207, 241], "frozen": [33, 45, 133, 155, 209], "acycl": [33, 45], "dag": 33, "chain": [33, 45, 93, 101, 105, 106, 133, 141, 153, 173, 207], "accumul": [33, 45, 49, 52, 55, 93, 96, 107, 142, 155, 162, 172, 173, 174, 175, 244, 263], "vec": [33, 45, 93, 154, 209], "langl": 33, "x_1": [33, 107, 159], "x_n": [33, 55], "rangl": 33, "y_1": [33, 107], "y_m": 33, "j": [33, 45, 78, 93, 100, 103, 104, 108, 133, 177, 196], "ccc": [33, 45, 93], "y_": [33, 45, 93, 104], "x_": [33, 45, 93], "cdot": [33, 45, 55, 93, 110, 136], "vdot": [33, 45, 93], "ddot": [33, 45, 93], "v_1": 33, "v_m": 33, "life": [33, 103, 138, 139, 226], "autogradqs_tutori": [33, 36, 41, 80, 280], "compris": [34, 35, 55, 120], "fashionmnist": [34, 35, 37, 39, 43, 100, 182], "mtia": [34, 39, 42, 65, 78, 101, 119, 126], "xpu": [34, 39, 42, 65, 78, 101, 119, 126, 234, 250], "neuralnetwork": 34, "minibatch": [34, 35, 100, 111, 138, 149, 164, 167], "28x28": [34, 111, 182, 247], "784": [34, 100, 111, 149, 182], "nonlinear": 34, "wide": [34, 63, 93, 98, 111, 134, 135, 138, 139, 147, 168, 177, 198, 243, 260], "phenomena": 34, "seq_modul": 34, "logit": [34, 38, 103, 233], "infti": [34, 172], "parameter": [34, 215], "preview": 34, "buildmodel_tutori": [34, 36, 41, 280], "messi": 35, "primit": [35, 39, 119, 130, 135, 154, 165, 189, 192, 196, 221], "fashion": [35, 52, 100, 102, 115, 132, 135, 137, 174, 179, 182, 184, 186, 189, 234], "zalando": 35, "60": [35, 113, 132, 138, 139, 156, 170, 171, 175, 177, 182, 188, 233, 250], "grayscal": [35, 148, 155], "internet": [35, 170], "target_transform": [35, 39, 43], "training_data": [35, 108], "test_data": 35, "26": [35, 100, 153, 155, 156, 170, 171, 175, 233], "4m": [35, 100], "5k": [35, 100], "363kb": 35, "229k": [35, 100], "38": [35, 100, 118, 171, 175, 233, 259], "678kb": 35, "918k": 35, "59mb": 35, "93m": [35, 100], "06": [35, 100, 171, 233], "08mb": [35, 100], "52m": 35, "0mb": [35, 100, 279], "73m": 35, "5mb": [35, 100], "4mb": [35, 100], "69": [35, 245], "18": [35, 116, 118, 138, 153, 170, 171, 175, 198, 210, 233, 245, 274], "2m": [35, 100], "2mb": 35, "83": [35, 54, 154, 171, 233, 259], "0m": 35, "29": [35, 100, 170, 171, 175, 245], "9mb": [35, 100], "1mb": [35, 100], "3mb": [35, 100], "323kb": 35, "42m": [35, 100], "359kb": 35, "197k": 35, "05": [35, 78, 100, 132, 154, 171, 175, 193, 233], "732kb": 35, "492k": 35, "03": [35, 96, 171, 174, 175, 184, 194, 233, 259], "27mb": 35, "57m": 35, "99mb": 35, "83m": 35, "04mb": 35, "15k": [35, 100], "52": [35, 156, 171, 233], "labels_map": 35, "shirt": [35, 37, 100, 182], "trouser": [35, 37, 100, 182], "pullov": [35, 37, 100, 182], "dress": [35, 37, 100, 182], "coat": [35, 37, 100, 182], "sandal": [35, 37, 100, 182], "sneaker": [35, 37, 100, 182], "ankl": [35, 37, 100, 182], "boot": [35, 37, 100, 170, 182], "figsiz": [35, 171, 182], "col": 35, "sample_idx": [35, 215], "randint": [35, 54, 55, 133, 167, 234], "add_subplot": [35, 182], "titl": [35, 78, 138, 165, 171, 177, 184], "img_dir": 35, "csv": [35, 52, 54, 132], "annotations_fil": 35, "pd": [35, 184], "io": [35, 52, 54, 100, 130, 173, 176, 184, 213, 264], "decode_imag": 35, "customimagedataset": 35, "img_label": 35, "read_csv": 35, "img_path": 35, "iloc": 35, "tshirt1": 35, "tshirt2": 35, "ankleboot999": 35, "tupl": [35, 42, 51, 85, 96, 98, 101, 103, 108, 110, 113, 172, 188, 191, 194, 208, 259], "read_imag": 35, "reshuffl": 35, "overfit": [35, 96, 111, 120, 139], "train_dataload": 35, "shuffl": [35, 39, 54, 58, 96, 100, 102, 111, 131, 132, 147, 170, 174, 181, 182, 194, 235], "test_dataload": 35, "train_featur": 35, "train_label": 35, "967": [35, 41, 280], "data_tutori": [35, 36, 41, 280], "intro": [36, 37, 41, 58, 105, 106, 129, 148, 171, 182, 224, 232, 280], "quickstart_tutori": [36, 39, 41, 280], "tensorqs_tutori": [36, 41, 42, 83, 280], "tensor_tutori": [36, 48, 50, 51, 280], "transforms_tutori": [36, 41, 43, 280], "autograd_tutori": [36, 45, 48, 50, 280], "optimization_tutori": [36, 38, 41, 280], "saveloadrun_tutori": [36, 40, 41, 280], "sphx_glr_beginner_basics_autogradqs_tutori": [36, 41, 280], "sphx_glr_beginner_basics_buildmodel_tutori": [36, 41, 280], "sphx_glr_beginner_basics_intro": [36, 41, 280], "sphx_glr_beginner_basics_saveloadrun_tutori": [36, 41, 280], "sphx_glr_beginner_basics_transforms_tutori": [36, 41, 280], "sphx_glr_beginner_basics_optimization_tutori": [36, 41, 280], "sphx_glr_beginner_basics_quickstart_tutori": [36, 41, 280], "sphx_glr_beginner_basics_tensorqs_tutori": [36, 41, 280], "sphx_glr_beginner_basics_data_tutori": [36, 41, 280], "suraj": [37, 56, 57, 58, 59, 118, 143, 144, 155], "subramanian": [37, 56, 57, 58, 59, 118, 143, 144, 155], "juarez": 37, "cassi": 37, "breviu": 37, "dmitri": 37, "soshnikov": 37, "ari": 37, "bornstein": 37, "ml": [37, 78, 101, 103, 129, 130, 137, 189, 213, 232, 233], "belong": [37, 138, 189], "cloud": [37, 57, 97, 111, 113, 278], "favorit": [37, 97, 147, 152], "id": [37, 85, 97, 140, 145, 173, 174, 175, 184, 188, 189, 215, 226, 227, 276, 278], "walkthrough": [38, 45, 51, 85, 118], "video": [38, 45, 46, 56, 58, 59, 93, 94, 96, 98, 100, 101, 102, 123, 129, 130, 143, 144, 181], "3blue1brown": [38, 45], "unpredict": [38, 93, 145], "jump": [38, 78, 108, 112, 113, 115, 116, 155, 270], "untrain": 38, "dissimilar": [38, 101, 110], "regress": [38, 111, 179, 245, 258], "nllloss": [38, 105], "classif": [38, 46, 55, 78, 91, 94, 96, 101, 102, 103, 105, 126, 130, 131, 139, 170, 179, 191, 192, 220, 263], "logsoftmax": 38, "deposit": [38, 45], "train_loop": 38, "test_loop": 38, "warmstart": [38, 248, 256, 264, 280], "torchtext": [39, 53, 96, 102, 130], "torchaudio": [39, 53, 96, 102, 130, 132, 170, 181, 198], "cifar": [39, 46, 96, 182], "coco": [39, 191], "conduct": [39, 94, 153, 168, 198], "unpickl": [40, 120, 196], "inferenc": 40, "fail": [40, 93, 101, 112, 120, 153, 165, 170, 172, 176, 186, 188, 196, 213, 214, 234, 244, 275], "inconsist": [40, 120, 153], "legaci": [40, 113, 134], "pickl": [40, 91, 111, 120, 162, 196, 245], "checkpoint": [40, 52, 91, 133, 143, 162, 167, 197, 198, 234, 244, 248, 256, 262, 264, 280], "tip": [40, 55, 97, 110, 182, 248, 256, 264, 280], "ndarrai": [42, 43, 51, 101, 184], "elimin": [42, 118, 141, 149, 153, 154, 170, 188, 192, 210, 214], "overridden": [42, 51, 148, 249], "1200": [42, 245], "manipul": [42, 43, 96, 100, 119, 133, 152, 162], "breez": [42, 51], "subtli": [42, 51], "y1": [42, 191], "y2": 42, "y3": 42, "wise": [42, 51, 78, 101, 105, 135, 147, 153, 156, 159, 188, 189, 260, 274], "z1": [42, 153], "z2": 42, "z3": 42, "aggreg": [42, 45, 96, 118, 155, 184, 206, 250], "operand": [42, 93, 188], "denot": [42, 105, 108, 189, 205, 206, 210], "suffix": [42, 51, 85, 153], "t_": [42, 51], "problemat": [42, 51, 153, 163, 260], "commonli": [43, 52, 72, 91, 98, 103, 119, 167, 170, 177, 181, 193, 234, 251, 260, 265], "hot": [43, 52, 78, 98, 110, 138, 139, 148, 177], "floattensor": [43, 101], "intens": [43, 88, 153, 165, 221, 278], "scatter_": [43, 173], "prop": 45, "proportion": [45, 162], "travers": [45, 175, 235], "resnet18": [45, 156, 170, 181, 184, 212, 274], "height": [45, 49, 98, 101, 184, 185, 191, 241, 275], "3a": [45, 170], "9a": 45, "2b": 45, "dq": 45, "bf": 45, "external_grad": 45, "blue": [45, 132, 135, 241], "finetun": [45, 130, 136, 162, 178, 280], "unfrozen": 45, "exclusionari": 45, "revers": [45, 52, 93, 133, 151, 159, 163, 170, 177, 189], "autodiff": [45, 130, 154], "pillow": [46, 96], "opencv": 46, "librosa": 46, "cython": 46, "nltk": 46, "spaci": 46, "viz": [46, 94], "huge": [46, 105, 110, 119, 135, 145, 148], "airplan": [46, 96, 103], "automobil": [46, 96, 103], "bird": [46, 96], "deer": [46, 96], "dog": [46, 96, 103, 191, 243], "frog": [46, 96], "hors": [46, 96], "truck": [46, 96, 103], "3x32x32": 46, "color": [46, 55, 94, 96, 98, 100, 101, 137, 155, 156, 170, 182, 184, 191], "32x32": [46, 49, 96, 103, 113, 182], "extrem": [46, 110, 156, 189], "pilimag": 46, "brokenpipeerror": 46, "fun": [46, 52, 112, 113, 115, 116, 171], "entropi": [46, 55, 96, 98, 102, 135, 263], "learnt": 46, "truth": [46, 78, 113, 191, 213], "okai": 46, "wasn": [46, 104, 107, 188], "energi": [46, 52], "chanc": [46, 52, 103, 155], "hmmm": 46, "plai": [46, 52, 55, 103, 105, 130, 171, 178, 278, 280], "chat": [46, 52, 177], "003": [46, 50, 52, 55, 78, 88, 89, 96, 99, 102, 103, 105, 107, 109, 121, 126, 139, 151, 153, 165, 176, 178, 186, 188, 189, 191, 192, 198, 216, 280], "cifar10_tutori": [46, 48, 50, 280], "sung": 47, "kim": 47, "jenni": 47, "kang": 47, "mytensor": 47, "my_tensor": [47, 120], "parallelli": 47, "getitem": 47, "demo": [47, 130, 168, 181, 233], "cnn": [47, 103, 130, 159, 163, 164, 179, 184, 191, 234], "capsul": 47, "monitor": [47, 111, 147], "output_s": [47, 196], "former_torchi": 47, "parallelism_tutori": 47, "data_parallel_tutori": [47, 48, 50, 82, 280], "neural_networks_tutori": [48, 49, 50, 280], "gentl": [48, 50, 59, 60, 129, 280], "glimps": 49, "convnet": [49, 94, 148, 155, 174], "learning_r": [49, 75, 103, 119], "5x5": [49, 98], "affin": [49, 108, 141, 179, 193, 260, 278], "wx": 49, "fc1": [49, 100, 120, 131, 149, 174, 182, 235, 251], "fc2": [49, 100, 120, 131, 174, 182, 235, 251], "84": [49, 54, 100, 118, 120, 155, 171, 182, 251], "fc3": [49, 100, 120, 182, 251], "c1": [49, 96, 153], "subsampl": 49, "s2": [49, 96, 188], "2x2": [49, 98], "c3": [49, 96], "s4": [49, 96, 188], "flatten": [49, 71, 103, 111, 119, 131, 135, 174, 188, 210, 233, 251], "f5": [49, 96], "f6": [49, 96], "in_featur": [49, 131, 193, 209, 215, 217, 251], "out_featur": [49, 131, 193, 209, 215, 251], "lenet": [49, 78, 96, 100, 102, 169, 235], "0944": 49, "0247": 49, "1287": 49, "0485": 49, "0176": 49, "0074": 49, "0049": 49, "0136": 49, "0324": 49, "addmmbackward0": 49, "mini": [49, 52, 55, 100, 108, 111, 164, 170, 182, 235], "4d": [49, 156], "nsampl": 49, "nchannel": 49, "least": [49, 78, 101, 120, 137, 139, 145, 155, 165, 170, 177, 188, 227, 245, 279], "6393": 49, "mselossbackward0": 49, "next_funct": [49, 93], "0x7f924979d4b0": 49, "0x7f924979d660": 49, "accumulategrad": 49, "0x7f9249671630": 49, "clear": [49, 54, 78, 93, 104, 105, 110, 136, 140, 153, 165, 175, 184, 185, 199, 207, 245, 276], "0032": 49, "0007": 49, "0004": 49, "0079": 49, "0061": 49, "0013": 49, "sub_": 49, "nesterov": [49, 120], "141": [49, 50, 233, 245, 280], "150": [50, 132, 175], "blitz": [50, 82, 113, 138, 139, 177, 182, 280], "matthew": [52, 90, 120], "inkawhich": [52, 55, 78, 88, 90, 120], "movi": [52, 53, 94], "cornel": [52, 53], "dialog": [52, 53], "corpu": [52, 53, 210], "artifici": [52, 103, 247], "intellig": 52, "servic": [52, 170, 234, 265, 278], "onlin": [52, 148, 155, 171, 174], "helpdesk": 52, "bot": 52, "predefin": [52, 103, 111, 148, 235, 260], "restrict": [52, 88, 147, 181, 186, 188, 193, 219], "compani": 52, "IT": 52, "teach": [52, 55, 103, 177], "human": [52, 78, 94, 139, 155, 177, 184, 196], "boom": 52, "hello": [52, 105, 162], "am": [52, 107, 139, 177], "hospit": 52, "lawyer": 52, "friend": [52, 162], "arrest": 52, "kid": 52, "sorri": 52, "san": 52, "francisco": [52, 111], "goodby": [52, 210], "luong": [52, 177], "jointli": [52, 177], "acknowledg": [52, 147], "borrow": [52, 175], "yuan": 52, "kuei": 52, "wu": [52, 134, 194, 199, 209], "ywk991112": 52, "sean": [52, 138, 139, 177], "robertson": [52, 138, 139, 177], "spro": 52, "floydhub": 52, "textutil": 52, "__": [52, 65, 78, 103, 119, 126, 184, 189], "reformat": 52, "rich": [52, 241], "charact": [52, 110, 130, 143, 160, 171, 177, 178, 280], "220": [52, 175], "579": [52, 156], "exchang": [52, 113, 115, 132, 147, 177, 181], "292": [52, 91], "035": 52, "617": 52, "713": [52, 96], "utter": [52, 53], "divers": 52, "variat": [52, 102, 111, 142, 192, 205, 245, 259], "formal": [52, 205, 227], "sentiment": 52, "datafil": 52, "tab": [52, 100, 102, 177, 182, 241], "sentenc": [52, 98, 104, 105, 108, 110, 139, 147, 177, 192, 210], "jsonl": [52, 53], "loadlinesandconvers": 52, "lineid": 52, "characterid": 52, "conversationid": 52, "movieid": 52, "extractsentencepair": 52, "formatted_movie_lin": 52, "unescap": 52, "delimit": 52, "busi": [52, 139, 278], "vocabulari": [52, 96, 98, 110, 135, 138, 210, 260], "implicit": [52, 93, 133, 188, 241, 260], "discret": [52, 171, 234], "voc": 52, "addword": 52, "addsent": 52, "infrequ": 52, "unicod": [52, 138, 139, 177], "ascii": [52, 110, 138, 139, 177], "unicodetoascii": 52, "letter": [52, 138, 139, 177], "lowercas": [52, 111, 177], "punctuat": [52, 177], "normalizestr": 52, "aid": [52, 120, 189, 249], "max_length": [52, 215], "filterpair": 52, "stackoverflow": [52, 138, 139, 177, 245], "518232": [52, 138, 139, 177], "2809427": [52, 138, 139, 177], "tactic": 52, "benefici": [52, 98, 129, 172, 209, 214, 260, 263, 278], "soften": 52, "difficulti": [52, 171], "approxim": [52, 94, 132, 141, 152, 155, 159, 169, 172, 233, 247, 260], "min_count": 52, "massag": 52, "accommod": 52, "shorter": [52, 54, 111, 177, 181, 205], "eos_token": 52, "english": [52, 105, 108, 138, 160, 177], "indexesfromsent": 52, "zeropad": 52, "inputvar": 52, "outputvar": 52, "pad_token": 52, "batch2traindata": 52, "bunch": [52, 138, 139, 241, 274], "aforement": [52, 85, 103, 192, 235, 270], "brain": 52, "sutskev": 52, "discov": [52, 116, 147, 174, 192, 214], "accomplish": [52, 55, 138, 147, 159, 217, 229, 245, 259], "jeddy92": 52, "ts_seq2seq_intro": 52, "invent": [52, 55, 171], "cho": 52, "2014": [52, 55], "bidirect": [52, 148], "gru": [52, 98, 138, 139, 177], "colah": 52, "2015": [52, 103], "fp": [52, 91, 130, 159], "hidden_s": 52, "unpack": [52, 220], "pack_padded_sequ": 52, "pad_packed_sequ": 52, "input_seq": 52, "input_length": [52, 132], "n_layer": [52, 167], "num_direct": 52, "sole": [52, 181], "combat": [52, 110], "bahdanau": [52, 177], "groundwork": 52, "h_t": [52, 108], "bar": [52, 85, 174, 184, 186, 217, 241], "attn": [52, 177], "softmax": [52, 98, 103, 108, 110, 111, 138, 170, 173, 175, 182, 192, 210, 233], "submodul": [52, 88, 98, 112, 133, 163, 176, 214, 217], "unidirect": 52, "input_step": 52, "last_hidden": 52, "encoder_output": 52, "num_word": 52, "masknllloss": 52, "clever": [52, 105], "teacher": [52, 103, 130, 177], "teacher_forcing_ratio": [52, 177], "instabl": [52, 177], "craft": [52, 78, 110, 139], "explod": [52, 98], "essenc": [52, 107], "nan": [52, 206, 276], "overshoot": 52, "steep": 52, "cliff": 52, "goodfellow": [52, 55, 78], "2016": 52, "www": [52, 177, 191], "deeplearningbook": 52, "sos_token": 52, "realiti": [52, 55, 78, 107, 111, 176, 259], "tie": 52, "trainit": [52, 177], "n_iter": 52, "explanatori": 52, "lift": [52, 219], "tarbal": 52, "NOT": [52, 88, 120, 140, 142, 143, 145, 162], "decoder_output": 52, "greedysearchdecod": 52, "searcher": 52, "evaluateinput": 52, "press": [52, 55], "gracefulli": [52, 56, 174, 227], "prompt": [52, 53, 198, 275], "regardless": [52, 101, 102, 154, 165, 174, 185], "attn_model": 52, "concat": [52, 107], "loadfilenam": 52, "save_dir": [52, 184], "model_nam": [52, 132, 212, 215, 234], "corpus_nam": [52, 53], "encoder_n_lay": 52, "decoder_n_lay": 52, "_checkpoint": [52, 132], "tar": [52, 120], "checkpoint_it": 52, "folk": 52, "congratul": [52, 116, 136, 138, 189, 247, 261, 262, 263], "tailor": [52, 147, 165, 189, 278], "cool": [52, 55, 162, 164, 219], "chatbot_tutori": [52, 121, 280], "wen": [53, 186, 188, 273], "uninstal": 53, "reinstal": 53, "torchdata": 53, "chatbot": [53, 121, 280], "browser": [53, 100, 102, 113, 181, 228], "click": [53, 100, 111, 113, 181, 182, 189, 241], "subfold": 53, "visit": [53, 198, 235], "in_": 53, "_colab": 53, "_name": 53, "mount": [53, 196], "gdrive": 53, "upload": [53, 228], "button": [53, 55, 113, 181, 241], "rerun": [53, 140, 162], "evolv": [53, 153, 159], "drop": [53, 98, 100, 113, 143, 162, 175, 198, 233], "t4": 53, "sasank": [54, 126], "chilamkurthi": [54, 126], "preprocess": [54, 103, 111, 130, 138, 177, 184], "scikit": 54, "facial": 54, "pose": [54, 228, 229], "landmark": 54, "dlib": 54, "tag": [54, 98, 106, 110, 188, 197, 249, 258], "image_nam": 54, "part_0_x": 54, "part_0_i": 54, "part_1_x": 54, "part_1_i": 54, "part_2_x": 54, "part_67_x": 54, "part_67_i": 54, "0805personali01": 54, "98": [54, 153, 154, 171, 175, 233], "134": [54, 171], "1084239450_e76e00b7e7": 54, "70": [54, 154, 156, 171, 175, 215, 245], "236": [54, 75, 77, 280], "257": [54, 245], "312": [54, 156, 275], "person": [54, 189, 191], "img_nam": 54, "__len__": [54, 111, 138, 147, 191], "__getitem__": [54, 111, 138, 147, 191], "randomcrop": 54, "crop": [54, 96, 137, 179, 191], "ax": [54, 105, 108, 130, 177, 178, 182, 280], "tsfm": 54, "transformed_sampl": 54, "safer": [54, 245], "stick": [54, 147, 156], "lose": [54, 56, 101, 103, 155], "collate_fn": 54, "indent": [54, 245], "imagefold": [54, 55, 96], "ant": [54, 126], "xxy": 54, "jpeg": 54, "xxz": 54, "bee": [54, 126], "nsdf3": 54, "asd932_": 54, "data_transform": 54, "hymenoptera_dataset": 54, "hymenoptera_data": 54, "dataset_load": 54, "data_loading_tutori": [54, 121, 280], "nathan": [55, 78, 88, 90], "celebr": [55, 130], "pictur": [55, 78, 133, 135, 177], "thorough": 55, "shed": [55, 243], "spend": [55, 85, 162, 245, 250], "sake": [55, 148, 169, 172, 261, 262], "ian": 55, "constantli": [55, 78, 172], "outsmart": 55, "equilibrium": 55, "perfect": [55, 93, 145, 207], "notat": [55, 78], "chw": [55, 170], "3x64x64": 55, "thought": [55, 86, 206, 259], "latent": [55, 110], "p_": 55, "p_g": 55, "minimax": 55, "logd": 55, "underset": 55, "mathbb": [55, 88, 159, 172], "sim": 55, "radford": 55, "unsupervis": 55, "drawn": [55, 111, 171], "rgb": [55, 96, 103, 155, 170, 184], "volum": [55, 131], "inlin": [55, 93, 96, 100, 102, 140, 153, 185, 205, 209, 213, 265], "manualse": 55, "10000": [55, 96, 100, 167, 171, 175, 245, 259], "dataroot": 55, "image_s": [55, 275], "spatial": [55, 94, 96, 98, 130, 178, 185, 191, 280], "64x64": 55, "nc": [55, 209], "nz": 55, "ngf": 55, "ndf": 55, "num_epoch": [55, 171], "0002": [55, 171], "ngpu": 55, "celeb": 55, "img_align_celeba": 55, "celeba": 55, "188242": 55, "173822": 55, "284702": 55, "537394": 55, "subdirectori": [55, 191], "stdev": 55, "02": [55, 153, 171, 175, 178, 200, 233, 267, 280], "weights_init": 55, "reiniti": 55, "criteria": 55, "netg": 55, "netd": 55, "worth": [55, 162, 165, 174], "critic": [55, 88, 133, 144, 165, 194, 226, 259], "batchnorm": [55, 58, 120, 156, 185, 212, 260, 262], "downsampl": [55, 96, 155], "promot": 55, "healthi": 55, "bceloss": 55, "ell": [55, 177], "l_1": 55, "l_n": 55, "quad": [55, 172], "y_n": 55, "bce": 55, "gt": [55, 118], "fixed_nois": 55, "establish": 55, "Be": [55, 93], "somewhat": [55, 165], "collaps": 55, "ganhack": 55, "secondli": 55, "push": [55, 78, 98, 103, 154, 198, 219], "loss_d": 55, "loss_g": 55, "versu": [55, 78, 130, 138, 221], "anim": [55, 96], "music": 55, "dcgan_faces_tutori": [55, 121, 280], "mingpt": [56, 57, 58, 59, 143, 144], "aw": [56, 58, 131, 143, 144, 264], "p3": [56, 57, 58, 66, 119, 143, 144], "8xlarg": [56, 58], "youtub": [56, 57, 58, 59, 93, 94, 96, 98, 100, 101, 102, 130, 143, 144], "failur": [56, 112, 144, 145, 153, 188, 196, 224, 275], "disrupt": [56, 196, 273], "suscept": [56, 229], "elast": [56, 132, 145, 229], "attempt": [56, 93, 101, 105, 132, 165, 188, 196, 221, 249, 273], "minutia": 56, "multinod": [56, 143, 189], "load_snapshot": 56, "snapshot_path": 56, "train_step": 56, "should_checkpoint": 56, "save_snapshot": 56, "membership": [56, 144], "intervent": [56, 103, 270], "diff": [56, 58, 85, 130, 245, 259], "multigpu": [56, 58, 144], "multigpu_torchrun": 56, "envvari": 56, "ddp_setup": [56, 58], "12355": [56, 58, 131, 145, 226, 227], "local_rank": [56, 132, 144, 145, 167, 196], "gpu_id": [56, 58, 144], "_save_snapshot": 56, "model_st": 56, "epochs_run": 56, "_load_snapshot": 56, "max_epoch": 56, "_run_epoch": [56, 58], "total_epoch": [56, 58], "argv": [56, 58, 234, 276], "save_everi": [56, 58], "standalon": [56, 194, 244, 272], "nproc_per_nod": [56, 132, 133, 145, 167, 196, 229], "migrat": [56, 58, 260], "fault": [57, 58, 59, 91, 143, 144, 165], "toler": [57, 58, 59, 91, 93, 143, 144], "deploi": [57, 113, 130, 137, 144, 169, 170], "cluster": [57, 100, 132, 137, 143, 144, 145, 147, 227, 229, 269], "torchrun": [57, 63, 132, 133, 143, 144, 167, 194, 196, 229], "amazon": 57, "ec2": [57, 131], "gentli": 57, "gpt": [57, 131, 143, 144, 167], "stat": [58, 132, 140, 171, 181, 189, 250, 259], "replica": [58, 59, 63, 131, 133, 145, 147, 279], "convert_sync_batchnorm": 58, "single_gpu": 58, "mytraindataset": 58, "distributedsampl": [58, 59, 131, 132], "destroy_process_group": [58, 131, 132, 134, 145, 167, 194, 226, 227], "excess": [58, 85, 135, 186, 234, 244], "train_data": 58, "train_dataset": [58, 103, 132, 215, 234, 268], "set_epoch": [58, 131, 132], "b_sz": 58, "_run_batch": 58, "ckp": 58, "_save_checkpoint": 58, "load_train_obj": 58, "prepare_dataload": 58, "shorthand": 58, "ring": [59, 135, 194], "older": [59, 118, 119, 149, 164, 165, 172, 198], "destroi": [59, 93, 151], "soumith": [60, 147], "chintala": [60, 147], "scientif": [60, 98, 101, 119], "cifar10": [60, 91, 96, 181, 234, 263, 268], "mobil": [61, 62, 103, 193, 200, 202, 203, 211, 213, 220, 222, 239, 240, 248, 264], "executorch": [61, 62, 130, 202, 203, 211, 218, 220, 222, 237, 238, 239, 240, 242, 275], "Will": [63, 133, 185], "constabl": [63, 133], "categor": [63, 85, 100, 148, 173, 175, 189], "navig": [63, 181, 182, 241], "technologi": [63, 103, 130, 147, 192, 264], "infrastructur": 63, "fsdp": [63, 133, 135, 143, 226, 227, 229], "tp": [63, 196, 229], "pp": 63, "dtensor": [63, 135, 228, 264], "devicemesh": [63, 135, 264], "reshard": [63, 133, 227], "mesh": [63, 129, 133, 135, 229], "recip": [63, 118, 130, 204, 220, 223, 225, 228, 232, 241, 243, 244, 245, 246, 247, 249, 250, 256, 257, 261, 262, 263, 265, 267, 269, 270, 271, 272, 273, 274, 275, 279, 280], "c10d": [63, 145, 168, 196, 260], "all_gath": [63, 131, 132, 147, 168], "p2p": 63, "isend": [63, 147], "guidelin": [63, 260], "fullyshardeddataparallel": [63, 131, 132, 133, 135, 226, 227, 229], "torchtitan": [63, 167, 194], "polynomi": [65, 66, 68, 70, 71, 72, 75, 76, 119], "pi": [65, 66, 70, 71, 72, 75, 76, 93, 119, 130, 172], "euclidean": [65, 66, 70, 71, 72, 75, 76, 93, 103, 119], "polynomial_autograd": [65, 67, 280], "bx": [66, 119], "cx": [66, 105, 119], "p_3": [66, 119], "5x": [66, 119], "legendr": [66, 119], "polynomial_custom_funct": [66, 67, 280], "examples_autograd": [67, 280], "strang": [68, 88, 119], "fifth": [68, 119], "tough": [68, 119], "dynamic_net": [68, 73, 280], "member": [70, 119, 213, 214], "polynomial_modul": [70, 73, 280], "2000": [71, 75, 96, 100, 103, 119, 171, 182, 184, 188, 196, 245, 279], "flaten": [71, 119], "1d": [71, 98, 119, 219, 260], "mse": [71, 98, 103, 119], "polynomial_nn": [71, 73, 280], "polynomial_optim": [72, 73, 280], "examples_nn": [73, 280], "99": [75, 119, 171, 175], "2270": 75, "152699713069": 75, "199": 75, "1511": 75, "2578058503454": 75, "299": [75, 184], "1007": 75, "3538250849856": 75, "399": 75, "672": 75, "671585590853": 75, "499": 75, "450": 75, "31865798344074": 75, "599": [75, 276], "302": 75, "5487910973602": 75, "699": 75, "204": [75, 170, 233, 245], "31301967206088": 75, "799": 75, "138": 75, "98455344130795": 75, "899": [75, 153], "95": [75, 137, 171, 175, 193, 233], "52423107184426": 75, "999": [75, 100, 182], "66": [75, 131, 171, 233, 245], "6007780083506": 75, "1099": 75, "344006718486135": 75, "1199": 75, "34": [75, 118, 170, 171, 178, 233, 245, 250, 259], "51766697974894": 75, "1299": 75, "9705801060503": 75, "1399": 75, "27234771365008": 75, "1499": 75, "471506174512253": 75, "1599": 75, "934928346757633": 75, "1699": 75, "241148254334677": 75, "1799": 75, "109482563015415": 75, "1899": 75, "352921932506671": 75, "1999": 75, "846810429147736": 75, "015535142892627278": 75, "8290024886413754": 75, "002680070654871763": 75, "08938484967030423": 75, "linspac": [75, 93, 119], "1e": [75, 91, 98, 119, 133, 141, 171, 173, 175, 193, 194, 215], "y_pred": [75, 119, 233], "grad_y_pr": [75, 119], "grad_c": [75, 119], "grad_d": [75, 119], "polynomial_numpi": [75, 77, 280], "biggest": [76, 196], "polynomial_tensor": [76, 77, 280], "238": 77, "examples_tensor": [77, 280], "appreci": [78, 104], "overlook": [78, 245], "secur": [78, 181], "vulner": 78, "surpris": [78, 163], "impercept": 78, "perturb": [78, 94], "drastic": [78, 188, 274], "overarch": 78, "misclassif": 78, "alter": [78, 120, 198, 251, 262], "har": 78, "remark": [78, 186], "mathbf": 78, "nabla_": [78, 105], "007": 78, "misclassifi": 78, "gibbon": 78, "clearli": [78, 137, 196, 205, 206], "pretrained_model": [78, 184], "fgsm_attack": 78, "clean": [78, 131, 132, 138, 145, 162, 167, 189, 194, 205], "data_grad": 78, "_imag": 78, "_grad": 78, "strength": [78, 182], "_data": 78, "trend": [78, 86, 181], "curv": [78, 181, 182], "linearli": 78, "lunch": 78, "BUT": [78, 107], "percept": 78, "tradeoff": [78, 130, 136, 137, 147, 171, 265], "evid": [78, 134], "subsequ": [78, 94, 103, 120, 131, 138, 148, 173, 175, 177, 186, 196, 198, 260, 263, 269, 278], "defend": 78, "nip": 78, "defens": 78, "competit": [78, 149, 164, 278], "defenc": 78, "dirti": 78, "fgsm_tutori": [78, 121, 280], "torchvision_tutori": [79, 178, 191, 280], "nn_tutori": [81, 111, 121, 280], "anupam": [85, 86], "bhatnagar": [85, 86], "offici": [85, 116, 134, 147, 172, 186, 188, 234], "holistictraceanalysi": 85, "env_nam": [85, 171], "deactiv": 85, "trace_dir": 85, "trace_analysi": 85, "traceanalysi": 85, "engag": [85, 213], "datafram": [85, 137, 184], "time_spent_df": 85, "get_temporal_breakdown": 85, "enqueu": 85, "slowdown": [85, 132, 136], "consecut": [85, 139, 148, 155, 165, 170, 184, 278], "insuffici": [85, 172], "delai": [85, 145, 173, 189], "stall": [85, 196, 278], "gap": [85, 88], "nanosecond": 85, "consecutive_kernel_delai": 85, "get_idle_time_breakdown": 85, "idle_time_df": 85, "show_idle_interval_stat": 85, "percentag": [85, 169, 210], "visualize_pctg": 85, "comm": 85, "comp": 85, "proport": [85, 162], "pie": [85, 162], "chart": [85, 100, 272], "kernel_type_metrics_df": 85, "kernel_metrics_df": 85, "get_gpu_kernel_breakdown": 85, "bottleneck": [85, 118, 132, 135, 144, 162, 165, 173, 181, 186, 223, 241], "plotli": [85, 94, 137], "hover": [85, 137, 170], "pan": 85, "num_kernel": 85, "duration_ratio": 85, "preced": [85, 93, 101, 141, 148, 185, 212], "lab": [85, 182], "image_render": 85, "jupyterlab": 85, "gpu_kernel_breakdown": 85, "tflop": 85, "oversubscrib": 85, "unresolv": [85, 207], "extent": [85, 101], "overlap_df": 85, "get_comm_comp_overlap": 85, "h2d": [85, 225], "d2h": [85, 225], "d2d": 85, "memcpi": 85, "memset": 85, "outstand": 85, "generate_trace_with_count": 85, "_with_count": 85, "screenshot": [85, 241], "profil": [85, 121, 130, 131, 165, 176, 178, 209, 233, 245, 248, 256, 260, 264, 280], "portion": [85, 162, 165, 167, 169, 196, 233, 241, 259], "get_memory_bw_summari": 85, "get_queue_length_summari": 85, "get_memory_bw_time_seri": 85, "get_queue_length_time_seri": 85, "mem_bw_summari": 85, "queue_len_summari": 85, "mem_bw_seri": 85, "queue_len_seri": 85, "get_queue_length_seri": 85, "25th": 85, "50th": 85, "75th": 85, "percentil": 85, "cudalaunchkernel": 85, "cudamemcpyasync": 85, "cudamemsetasync": 85, "kernel_info_df": 85, "get_cuda_kernel_launch_stat": 85, "short": [85, 98, 101, 104, 106, 109, 129, 139, 147, 163, 165, 171, 177, 179, 188, 260, 263, 280], "outlier": [85, 172], "microsecond": [85, 154, 176, 245], "cutoff": 85, "runtime_cutoff": 85, "launch_delay_cutoff": 85, "occasion": [86, 174, 177], "hta": [86, 181], "tracediff": 86, "cumul": [86, 171, 172], "compare_trac": 86, "ops_diff": 86, "absent": 86, "visualize_counts_diff": 86, "visualize_duration_diff": 86, "ten": [86, 96, 100, 103], "df": 86, "compare_traces_output": 86, "sort_valu": 86, "diff_count": 86, "largest": [86, 111, 184], "diff_dur": 86, "differer": 86, "overshadow": 86, "profilerstep": [86, 153], "loc": [86, 171, 244], "trace_diff_demo": 86, "learning_hybrid_frontend_through_example_tutori": [87, 88, 89, 280], "hybrid_frontend": [87, 89, 280], "introduction_to_hybrid_frontend_tutori": 87, "shini": 88, "enjoi": [88, 155], "aquaint": 88, "opportun": [88, 113, 148, 189], "bridg": [88, 228], "refin": [88, 188], "gradual": [88, 162], "proven": [88, 208], "resouc": 88, "consumpt": [88, 96, 98, 100, 102, 118, 132, 135, 137, 153, 165, 169, 181, 260, 264, 279], "discrep": [88, 212], "interwork": 88, "intrus": [88, 162], "decor": [88, 93, 116, 129, 140, 155, 173, 186, 260, 273], "broken": [88, 107], "epsilon": [88, 141, 148, 171, 172], "biggl": 88, "lfloor": 88, "prod_": 88, "biggr": 88, "rfloor": 88, "hline": 88, "190": [88, 175, 184, 245], "4377": 88, "59051": 88, "accomod": [88, 143], "scriptmodul": 88, "script_method": 88, "tracedmodul": 88, "onnx": [88, 117, 130, 280], "dramat": [91, 111], "industri": [91, 94], "analysi": [91, 93, 102, 130, 131, 152, 153, 176, 181, 184, 188, 194, 198, 241, 259, 275], "slight": [91, 134, 142, 233, 246], "trial": [91, 137, 244], "train_cifar": 91, "data_dir": [91, 132], "l2": [91, 98, 169], "get_checkpoint": 91, "as_directori": 91, "checkpoint_dir": [91, 226, 227], "pkl": [91, 111], "rb": [91, 111], "checkpoint_st": 91, "start_epoch": 91, "net_state_dict": 91, "optimizer_state_dict": [91, 120, 226, 227, 234], "80": [91, 137, 138, 156, 171, 175, 275, 276], "luckili": [91, 153, 188, 189, 207, 245], "trainload": [91, 182], "fraction": [91, 245], "checkpoint_data": 91, "tempfil": [91, 145, 276], "temporarydirectori": 91, "wb": [91, 111], "dump": [91, 153, 221, 228], "from_directori": 91, "val_loss": [91, 111, 132], "val_step": 91, "wast": [91, 181, 210, 213, 217, 245, 249, 251, 265], "lastli": [91, 130, 162, 188], "loguniform": [91, 245], "ashaschedul": 91, "functool": [91, 131, 132, 154], "gpus_per_tri": 91, "resources_per_tri": 91, "num_sampl": [91, 132], "checkpoint_at_end": 91, "000668163": 91, "31479": 91, "0977": 91, "0331514": 91, "31605": 91, "0983": 91, "000150295": 91, "30755": 91, "1023": 91, "0128248": 91, "66912": 91, "4391": 91, "00464561": 91, "7316": 91, "3463": 91, "00031556": 91, "19409": 91, "1736": 91, "00574329": 91, "85679": 91, "3368": 91, "00325652": 91, "30272": 91, "0984": 91, "000342987": 91, "76044": 91, "003734": 91, "53101": 91, "4761": 91, "0037339984519545164": 91, "5310075663924216": 91, "4737": 91, "hyperparameter_tuning_tutori": [91, 121, 280], "tensorboard": [93, 94, 95, 96, 97, 98, 101, 102, 130, 137, 178, 248, 250, 256, 264, 280], "decis": [93, 106, 109, 148, 165, 188, 205, 206, 208, 221, 260, 270, 276, 280], "branch": [93, 112, 188, 191, 220, 234], "rigidli": 93, "sign": [93, 163], "contextu": 93, "nudg": [93, 96, 102], "calculu": 93, "drill": [93, 259], "machineri": [93, 245], "took": [93, 147, 152, 162, 176, 186, 196, 273], "co": [93, 110, 200, 250, 260], "ins": [93, 186], "ideal_output": 93, "layer2": 93, "blow": 93, "b1": 93, "b2": 93, "temporarili": 93, "enable_grad": 93, "throw": [93, 101, 134, 173], "sin_": 93, "handi": [93, 96, 111, 147, 155, 182], "bake": [93, 185], "chrome": [93, 165, 176, 181, 250], "hessian": [93, 130, 178, 219, 280], "twice": [93, 111, 142, 165, 198, 233, 245, 250, 279], "jvp": [93, 151, 154], "vjp": [93, 154, 159, 219], "vhp": [93, 130, 178, 280], "hvp": [93, 130, 178, 280], "autogradyt_tutori": [93, 95, 99, 280], "latin": [94, 111], "increasingli": [94, 192], "ai": [94, 105, 106, 111, 131, 137, 155, 177, 196, 209, 221, 227, 234, 243, 260], "review": [94, 143, 160, 188, 205, 206, 208, 214, 220, 234, 265], "neuron": [94, 103, 243], "analag": 94, "ablat": 94, "permut": [94, 103, 156, 170, 184, 232], "valuabl": [94, 103, 177, 210, 232], "certainli": [94, 152, 206, 208], "attr": [94, 168, 221], "widget": 94, "toolset": 94, "flask": 94, "renam": [94, 193], "virtual": [94, 165, 168, 200, 249], "recogn": [94, 98, 168, 185, 247], "224x224": [94, 170], "visualize_image_attr": 94, "integrated_gradi": 94, "strongest": [94, 96, 98, 102], "visualize_image_attr_multipl": 94, "heat": [94, 170], "upsampl": 94, "interpol": 94, "layerattribut": 94, "teapot": 94, "trilobit": 94, "fossil": 94, "attributionvisu": 94, "imagefeatur": 94, "heatmap": 94, "captumyt": [94, 99, 280], "introyt": [95, 99, 280], "introyt1_tutori": [95, 96, 99, 280], "tensors_deeper_tutori": [95, 99, 101, 280], "modelsyt_tutori": [95, 98, 99, 280], "tensorboardyt_tutori": [95, 99, 100, 280], "trainingyt_tutori": 95, "captumyt_tutori": 95, "captum": [95, 248, 256, 264, 280], "sphx_glr_beginner_introyt_introyt_index": [95, 99, 280], "sphx_glr_beginner_introyt_modelsyt_tutori": [95, 99, 280], "sphx_glr_beginner_introyt_autogradyt_tutori": [95, 99, 280], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [95, 99, 280], "sphx_glr_beginner_introyt_captumyt": [95, 99, 280], "sphx_glr_beginner_introyt_introyt1_tutori": [95, 99, 280], "sphx_glr_beginner_introyt_trainingyt": [95, 99, 280], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [95, 99, 280], "5x3": 96, "helpfulli": 96, "prng": 96, "r3": 96, "r1": 96, "r2": 96, "trigonometr": [96, 101], "singular": [96, 163, 176, 274], "decomposit": [96, 116, 133, 153], "diagram": [96, 172], "earliest": 96, "driver": [96, 181], "explos": 96, "handwritten": [96, 131], "abridg": 96, "artifact": [96, 143, 188, 269, 270, 274], "gist": 96, "tile": [96, 100, 102, 184, 215, 221], "hasn": 96, "shouldn": [96, 169], "center": [96, 98, 102, 172, 181, 260], "concatdataset": 96, "trainset": [96, 182], "50000": [96, 111, 171], "4914": 96, "4822": 96, "4465": 96, "2470": 96, "2435": 96, "2616": 96, "rotat": [96, 100, 179, 182], "vehicl": [96, 175], "filesystem": [96, 147, 197], "told": [96, 171], "strip": [96, 215, 259], "ingredi": 96, "inner": [96, 165, 171], "235": [96, 118], "940": 96, "6000": [96, 100, 171], "8000": [96, 100, 171, 259], "573": 96, "507": 96, "12000": [96, 100, 171], "442": 96, "378": 96, "364": 96, "319": [96, 233, 250], "284": [96, 175], "267": 96, "monoton": 96, "descend": 96, "memor": 96, "roughli": [96, 104, 119, 132, 145, 153, 260], "brad": 97, "heintz": 97, "introyt_index": [97, 99, 280], "lin": [98, 111], "pop": [98, 215], "nearbi": 98, "lenet5": 98, "1x32x32": 98, "liken": 98, "3x5": 98, "presenc": [98, 186, 188, 243], "6x28x28": 98, "resolut": [98, 184], "6x14x14": 98, "sought": 98, "3x3": 98, "16x12x12": 98, "16x6x6": 98, "576": 98, "edg": [98, 113, 119, 130, 152, 181, 193, 247, 275], "instrument": [98, 152, 264], "dna": 98, "nucleotid": 98, "sort": [98, 104, 108, 118, 170, 192, 250, 260, 276], "moder": 98, "beyond": [98, 101, 107, 168, 169, 260], "scope": [98, 101, 107, 118, 136, 140, 188, 241, 265], "tagger": [98, 104], "noun": 98, "verb": 98, "vocab_s": [98, 133, 167, 234], "tagset_s": 98, "log_softmax": [98, 111, 131, 174, 235], "decod": [98, 104, 132, 167, 175, 176, 192, 198, 244, 275], "transformerencod": [98, 192], "transformerdecod": [98, 192], "subcompon": [98, 186], "transformerencoderlay": [98, 176, 192], "transformerdecoderlay": [98, 167, 192], "twin": 98, "maxpool": 98, "quadrant": 98, "6x6": 98, "vanish": [98, 105], "offset": [98, 189, 197, 215, 226], "neighborhood": 98, "sometim": [98, 101, 119, 136, 142, 144, 145, 148, 154, 172, 175, 177, 188, 198, 207, 208, 260], "suffer": [98, 181], "steepest": 98, "feasibl": [98, 131, 133], "hardtanh": 98, "021": [99, 256], "009": [99, 100, 280], "trainingyt": [99, 102, 280], "garment": 100, "summarywrit": [100, 182, 258], "tb": [100, 275], "gfile": 100, "tensorflow_stub": 100, "training_set": 100, "validation_set": 100, "training_load": 100, "validation_load": 100, "matplotlib_imshow": [100, 182], "one_channel": [100, 182], "unnorm": [100, 182], "npimg": [100, 182], "grei": [100, 182], "datait": [100, 182], "img_grid": [100, 182], "make_grid": [100, 182], "362kb": 100, "682kb": 100, "852k": 100, "40mb": 100, "14mb": 100, "49m": [100, 176], "58": [100, 138, 156, 171, 215, 235], "85": [100, 131, 233, 245, 250], "5m": 100, "325kb": 100, "360kb": 100, "681kb": 100, "885k": 100, "44mb": 100, "7mb": 100, "add_imag": [100, 182], "flush": [100, 244, 258], "log_dir": [100, 137, 182], "writer": [100, 138, 170, 171, 182, 196, 226, 258], "fashion_mnist_experiment_1": [100, 182], "logdir": [100, 181, 182, 258], "6006": [100, 181, 182, 258], "efficaci": 100, "running_loss": [100, 182], "running_vloss": 100, "eg": [100, 133], "regularis": 100, "vdata": 100, "vinput": 100, "vlabel": 100, "voutput": 100, "vloss": 100, "avg_loss": 100, "avg_vloss": 100, "add_scalar": [100, 182, 258], "3000": [100, 171, 182, 188, 275], "7000": [100, 171], "9000": [100, 171], "11000": [100, 171], "13000": [100, 171], "14000": [100, 171], "15000": [100, 171], "add_graph": [100, 182], "add_embed": [100, 182], "select_n_random": [100, 182], "perm": [100, 182], "randperm": [100, 182], "class_label": [100, 182, 184], "label_img": [100, 182], "projector": 100, "toggl": [100, 197, 279], "night": [100, 182], "icon": 100, "dark": [100, 184], "upack": 101, "attach": [101, 172, 278], "terminologi": [101, 107], "likewis": [101, 162], "fctori": 101, "assur": [101, 165], "random1": 101, "random3": 101, "random2": 101, "random4": 101, "rng": [101, 147], "_like": [101, 156], "rand_lik": 101, "int16": 101, "cue": 101, "intent": [101, 206, 227], "subtract": [101, 103, 260], "2x4": 101, "1x4": 101, "honor": 101, "3rd": [101, 133, 140, 221, 234], "2nd": [101, 108, 133, 140, 174, 210], "hundr": [101, 129, 135, 184, 189], "bitwis": [101, 244], "inventori": [101, 102], "occupi": [101, 241], "discard": [101, 131, 132, 181, 250, 259], "underscor": 101, "add_": [101, 188, 205, 220], "deepli": 101, "nor": [101, 147, 193, 205, 278], "mid": 101, "someplac": 101, "ram": [101, 132, 165, 189, 249], "colloqui": 101, "fragil": 101, "robustli": [101, 115], "whichev": 101, "acquir": [101, 120, 169, 171, 175], "thrown": [101, 208, 220], "226": 101, "zeroth": 101, "bracket": [101, 193], "rescu": 101, "squeeze_": 101, "unsqueeze_": 101, "radic": 101, "parenthes": 101, "comma": 101, "convinc": [101, 162], "kinship": 101, "autom": [102, 119, 137, 152, 156, 184], "outcom": [102, 137, 196], "saniti": [102, 137, 171, 184], "nb": [102, 219], "chose": [102, 170], "saved_model": 102, "garmentclassifi": 102, "alexandro": 103, "chariton": 103, "computation": [103, 184], "lightweight": [103, 130, 169, 244], "drone": 103, "phone": [103, 113], "4gb": [103, 162, 170], "3072": [103, 215], "satur": [103, 244], "held": [103, 138, 174], "greedi": [103, 148, 172], "num_images_to_keep": 103, "50_000": [103, 171], "test_dataset": 103, "10_000": 103, "extractor": [103, 184], "emploi": [103, 177, 181, 192, 226], "train_load": [103, 131, 132, 174, 181, 234, 235, 268], "detriment": 103, "workload": [103, 118, 129, 130, 133, 144, 145, 181, 189, 200, 209, 226, 229, 233, 234, 264, 278], "test_load": [103, 131, 174, 235], "sensit": [103, 143, 151], "conclud": [103, 142, 147, 188], "interven": [103, 188], "soft": [103, 172], "mistaken": 103, "alon": [103, 120, 135, 177, 182], "exploit": [103, 155, 177], "meaningfulli": 103, "temperatur": 103, "smoother": 103, "soft_target_loss_weight": 103, "ce_loss_weight": 103, "train_knowledge_distil": 103, "75": [103, 126, 131, 171], "ce": [103, 177], "coeffici": 103, "convei": 103, "naiv": [103, 136, 154, 164, 176, 210], "rational": 103, "capac": [103, 143, 171, 184, 260], "cosineembeddingloss": 103, "obvious": [103, 107, 175], "somehow": [103, 110, 189], "hidden_represent": 103, "hidden_representation_s": 103, "avg_pool1d": 103, "modifiedlightnnregressor": 103, "cosineloss": 103, "wiggl": 103, "hinton": 103, "vinyal": 103, "dean": 103, "workshop": 103, "romero": 103, "balla": 103, "kahou": 103, "chassang": 103, "gatta": 103, "bengio": 103, "fitnet": 103, "thin": [103, 197], "confer": 103, "knowledge_distillation_tutori": [103, 121, 280], "kit": 104, "dynet": [104, 106], "opposit": [104, 165, 206], "theano": [104, 106], "kera": [104, 106, 119], "difficult": [104, 154, 163, 177, 189, 207, 219, 232], "constitu": 104, "bottom": [104, 181, 184, 188, 241], "green": [104, 132, 135, 182], "fat": 104, "exception": 104, "entiti": [104, 110, 189, 262, 263], "recognit": [104, 130, 221, 260], "ner": 104, "sound": [104, 107, 119], "scari": 104, "viterbi": [104, 108], "sum_": [104, 110, 172], "psi_i": 104, "sum_i": 104, "partit": [104, 130, 135, 140, 147, 227, 260], "emiss": 104, "timestep": [104, 108, 138, 139, 172], "textbf": 104, "psi_": 104, "y_i": [104, 108], "rightarrow": [104, 147, 172], "x_i": [104, 105], "tran": [104, 184], "h_i": [104, 108], "michael": [104, 223, 224, 232, 244, 271, 276], "collin": 104, "robert": [104, 105, 107, 108, 110], "guthri": [104, 105, 107, 108, 110], "prepare_sequ": 104, "anywai": [104, 107, 165], "gold": [104, 177], "perceptron": 104, "score_sent": 104, "advanced_tutori": [104, 106, 109, 280], "workhors": 105, "2x5": 105, "acx": 105, "ac": [105, 184], "sigma": [105, 171], "plenti": 105, "peopl": [105, 106, 126], "shy": 105, "linearit": 105, "sum_j": 105, "x_j": 105, "unseen": [105, 110], "eta": 105, "vari": [105, 133, 141, 155, 165, 177, 186, 188, 192, 207, 210, 223, 244], "spanish": [105, 138, 139], "bow": 105, "vocab": [105, 108, 135], "word_to_ix": [105, 108, 110], "bowclassifi": 105, "creo": 105, "bigger": [105, 138, 139, 170, 184], "deep_learning_tutori": [105, 106, 109, 280], "russel": 106, "norvig": 106, "book": 106, "rip": 106, "pytorch_tutori": [106, 107, 109, 280], "word_embeddings_tutori": [106, 109, 110, 280], "lexic": [106, 109, 280], "sequence_models_tutori": [106, 108, 109, 280], "bi": [106, 109, 280], "crf": [106, 109, 280], "2x2x2": 107, "complain": [107, 188], "x_2": [107, 159], "vagu": 107, "programm": [107, 110], "mayb": [107, 110, 149, 188, 213], "x_0": 107, "overbrac": [107, 108, 110], "y_0": 107, "z_0": 107, "z_1": 107, "y_2": 107, "z_2": 107, "gloss": 107, "new_z": 107, "NO": 107, "forgotten": 107, "classic": [108, 111, 156, 163, 179, 257], "markov": 108, "myriad": 108, "cow": 108, "q_": [108, 110, 155], "1st": [108, 131, 133, 140], "unfamiliar": 108, "w_1": 108, "w_m": 108, "w_i": [108, 110], "_i": 108, "_1": 108, "_m": 108, "argmax": [108, 111, 131, 174, 233, 235], "_j": 108, "ah_i": 108, "affix": [108, 110], "bear": 108, "ly": 108, "adverb": 108, "c_w": 108, "x_w": 108, "po": [108, 184], "emb": [108, 110, 175], "capit": 110, "enorm": [110, 184], "notion": 110, "mathematician": 110, "physicist": 110, "ok": [110, 134, 173], "role": [110, 169, 175, 189, 278], "orthograph": 110, "linguist": 110, "hypothesi": 110, "coffe": 110, "phi": 110, "gave": 110, "pain": 110, "earth": 110, "herself": 110, "longtensor": [110, 139, 173, 175], "ith": [110, 210], "shakespear": [110, 176], "sonnet": 110, "word_i": 110, "context_s": 110, "beauti": 110, "cbow": 110, "probabilist": [110, 171], "percent": [110, 154], "q_w": 110, "raw_text": 110, "dedupl": 110, "jeremi": 111, "howard": [111, 155, 167, 168], "rachel": 111, "thoma": 111, "ingham": 111, "elegantli": [111, 247], "concis": 111, "exist_ok": 111, "_static": [111, 130], "gz": 111, "gzip": 111, "as_posix": 111, "x_train": 111, "y_train": 111, "x_valid": 111, "y_valid": 111, "importerror": 111, "trail": 111, "signifi": 111, "xavier": [111, 112], "initialis": 111, "prewritten": 111, "xb": 111, "7334": 111, "2072": 111, "5363": 111, "1884": 111, "5464": 111, "2631": 111, "4170": 111, "2084": 111, "7147": 111, "6818": 111, "selectbackward0": 111, "nll": 111, "loss_func": 111, "yb": 111, "3985": 111, "negbackward0": 111, "1250": 111, "talli": 111, "debugg": 111, "set_trac": 111, "start_i": 111, "end_i": 111, "zero_": [111, 168, 175], "logist": 111, "0806": 111, "wherea": [111, 140, 182, 184, 198, 206, 207], "cross_entropi": [111, 135], "nlllossbackward0": 111, "clearer": [111, 182], "uppercas": 111, "confus": [111, 138, 151, 184, 189, 198, 206, 207, 208], "mnist_logist": 111, "3058": 111, "prone": [111, 140, 192, 229], "gone": [111, 136], "0791": 111, "2200": 111, "0812": 111, "get_model": [111, 173], "2996": 111, "0816": 111, "faciallandmarkdataset": 111, "tensordataset": 111, "train_d": 111, "0831": 111, "train_dl": 111, "cleaner": [111, 205, 207, 213], "valid_d": 111, "valid_dl": 111, "phase": [111, 147, 175, 250, 276], "valid_loss": 111, "3055": [111, 171], "3025": [111, 171, 276], "loss_batch": 111, "num": [111, 173], "32021536286473273": 111, "28480436491370204": 111, "mnist_cnn": [111, 131], "avg_pool2d": [111, 220], "34361942048072813": 111, "2603839255332947": 111, "func": [111, 130, 149, 151, 154, 159, 164, 210, 219, 271, 275, 276], "avgpool2d": 111, "33921751887798307": 111, "23700647422075272": 111, "rid": [111, 112, 133, 154, 275], "wrappeddataload": 111, "dl": [111, 198, 221, 235], "__iter__": 111, "adaptiveavgpool2d": [111, 148], "34137935374975203": 111, "2836669520378113": 111, "lucki": [111, 169], "rent": 111, "hour": [111, 275], "current_acceler": 111, "1926848725795746": 111, "17989633659124374": 111, "mnist_sampl": 111, "fastai": 111, "practition": [111, 147, 208], "794": [111, 121, 280], "dupr\u00e9": 112, "circumv": 112, "forwardwithcontrolflowtest": 112, "modelwithcontrolflowtest": 112, "mlp": [112, 135, 149, 189], "unexpectedli": [112, 241], "succe": [112, 115, 188], "assertionerror": [112, 153], "dynamo": [112, 113, 115, 140, 153, 199, 275, 276], "faithfulli": [112, 205], "identity2": 112, "fx": [112, 113, 130, 153, 178, 188, 193, 200, 235, 269, 276, 280], "imperfect": 112, "faith": 112, "pitfal": [112, 188], "necessarili": [112, 113, 115, 116, 140, 142, 165, 188], "export_control_flow_model_to_onnx_tutori": [112, 114, 117, 280], "ti": [113, 115, 116], "tai": [113, 115, 116], "justin": [113, 116, 119], "chu": [113, 116], "thiago": [113, 115], "crepaldi": [113, 115], "gamut": 113, "platform": [113, 145, 147, 181, 221, 233, 241, 260, 268, 278], "supercomput": 113, "constrain": [113, 137, 163], "onnxscript": [113, 115, 116], "upgrad": [113, 115, 163, 170, 181, 213], "onnxprogram": [113, 116], "protobuf": 113, "app": [113, 130, 226, 227, 234, 264, 276], "drag": [113, 162, 181, 182, 228], "image_classifier_model": 113, "onnxruntim": [113, 115], "export_simple_model_to_onnx_tutori": [113, 114, 117, 280], "intro_onnx": [114, 115, 117, 280], "onnx_registry_tutori": [114, 116, 117, 280], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [114, 117, 280], "sphx_glr_beginner_onnx_intro_onnx": [114, 117, 280], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [114, 117, 280], "sphx_glr_beginner_onnx_onnx_registry_tutori": [114, 117, 280], "consum": [115, 118, 136, 153, 165, 171, 173, 175, 176, 250, 260], "exportedprogram": [115, 116, 120, 188, 274, 275], "newer": [115, 146, 156, 162, 164, 190, 218, 252, 253, 254, 255, 260], "__version__": [115, 170, 220], "registri": 116, "_op": 116, "opoverload": 116, "opset": 116, "native_funct": 116, "yaml": [116, 143, 235], "custom_translation_t": 116, "redund": [116, 148], "node_add_0": 116, "input_i": 116, "input_x": 116, "gelu": [116, 212], "op_typ": 116, "mylibrari": 116, "add_and_round_op": 116, "005": 117, "json": [118, 165, 176, 181, 228, 250, 274], "quicker": 118, "record_funct": [118, 153, 233, 250], "incur": [118, 135, 196, 225, 226, 260], "investig": [118, 156, 169, 184, 186, 188, 259], "with_stack": [118, 181], "key_averag": [118, 233], "group_by_stack_n": 118, "traceback": [118, 153, 275], "sort_bi": [118, 233, 250], "193a910735e8": 118, "stacktrac": 118, "88": [118, 171, 175], "212": 118, "953": 118, "mnt": [118, 147], "xarfus": 118, "au": 118, "07": [118, 132, 171, 233, 250, 259, 276], "715": 118, "848m": 118, "350": 118, "151u": 118, "293": [118, 156], "342u": 118, "095u": 118, "931": 118, "footprint": [118, 131, 132, 133, 143, 162, 233, 244, 279], "006": 118, "476": 118, "338": 118, "759m": 118, "as_strid": [118, 153], "281": [118, 156, 276], "808u": 118, "275": 118, "721u": 118, "_local": 118, "268": 118, "650u": [118, 250], "_scalar_dens": 118, "347": [118, 171], "argwher": 118, "nonzero": [118, 260], "089m": 118, "402m": 118, "491m": 118, "119": 118, "21": [118, 170, 171, 233, 245, 250, 259], "441": 118, "587u": 118, "_numpi": 118, "395": [118, 175], "602u": 118, "801m": 118, "rpc": [118, 130, 264], "johnson": 119, "brows": 119, "utf": 119, "modern": [119, 165, 186, 189], "50x": 119, "hairi": 119, "thankfulli": 119, "wave": 119, "tflearn": 119, "burden": [119, 177, 260], "facil": 120, "running_mean": [120, 262], "themodelclass": 120, "param_tensor": 120, "var_nam": 120, "param_group": [120, 171, 224], "dampen": 120, "weight_decai": 120, "4675713712": 120, "4675713784": 120, "4675714000": 120, "4675714072": 120, "4675714216": 120, "4675714288": 120, "4675714432": 120, "4675714504": 120, "4675714648": 120, "4675714720": 120, "_use_new_zipfile_seri": 120, "best_model_st": 120, "deepcopi": 120, "pt2": [120, 188, 223, 224, 229, 232, 274], "simplemodel": 120, "exported_program": [120, 275], "saved_exported_program": 120, "model_state_dict": [120, 133, 226, 227, 234], "theoptimizerclass": 120, "modela_state_dict": 120, "modela": 120, "modelb_state_dict": 120, "modelb": 120, "optimizera_state_dict": 120, "optimizera": 120, "optimizerb_state_dict": 120, "optimizerb": 120, "themodelaclass": 120, "themodelbclass": 120, "theoptimizeraclass": 120, "theoptimizerbclass": 120, "gan": [120, 130, 163], "ensembl": [120, 130, 178, 280], "strict": [120, 184, 206, 234, 261], "map_loc": [120, 133, 145, 184, 244, 249], "remap": 120, "overwrit": 120, "saving_loading_model": [120, 121, 252, 253, 254, 255, 280], "distil": [121, 130, 235, 280], "dcgan": [121, 130, 280], "transfer_learning_tutori": [121, 126, 280], "rai": [121, 130, 280], "template_tutori": [121, 123, 280], "firstnam": 123, "lastnam": 123, "gallery_pattern": 123, "neural_style_transfer_tutori": 123, "_build": 123, "beginner_sourc": [123, 280], "link1": [123, 132], "link2": [123, 132], "cs231n": 126, "quot": 126, "licens": [126, 179], "bsd": [126, 179], "todai": [126, 189, 207], "lr_schedul": [126, 131, 132, 171], "num_ftr": 126, "class_nam": [126, 184], "decai": [126, 148, 172], "checkout": [126, 220], "spread": [129, 184], "demand": [129, 196], "distributeddata": 129, "uneven": 129, "huggingfac": [129, 131, 132, 192, 215, 275], "hf": 129, "t5": 129, "async_execut": [129, 130, 173], "dataparallel": [129, 130, 136, 244, 260], "plug": [129, 168, 179], "horizont": [130, 264, 267, 280], "foreach_map": [130, 264, 267, 280], "inductor": [130, 140, 178, 188, 198, 200, 209, 212, 213, 270, 272, 276, 280], "bite": [130, 264], "non_block": [130, 178, 280], "pin_memori": [130, 131, 132, 178, 260, 280], "slide": [130, 260], "tiatoolbox": 130, "resampl": 130, "waveform": 130, "wav2vec2": 130, "torchdynamo": [130, 140, 188, 200, 212, 276], "dqn": [130, 178, 280], "cartpol": [130, 148, 172, 175], "v0": [130, 155, 172, 191], "proxim": [130, 171], "mario": [130, 163, 178, 280], "thumbnail": [130, 184], "holist": 130, "nchw": [130, 156, 234], "inter": [130, 135, 144, 159, 192, 229, 260], "raspberri": 130, "nerur": 130, "netork": 130, "exploresever": 130, "tangent": [130, 151, 154, 178, 280], "plugin": [130, 181], "orthogon": [130, 163], "symmetr": [130, 163, 212], "prune": [130, 163, 178, 213, 235, 280], "snapshot": [130, 143, 188], "torchx": 130, "fuser": [130, 178, 280], "matcher": [130, 185], "scaled_dot_product_attent": [130, 176, 192, 194, 210], "paral": 130, "fsdp2": [130, 131], "fully_shard": [130, 133, 226, 227], "fsdp1": [130, 131], "libuv": 130, "tcpstore": [130, 145], "sdk": 130, "v3": 130, "camera": [130, 170], "xnnpack": [130, 193], "metal": 130, "shader": 130, "android": [130, 213, 264], "deeplab": 130, "fp32": [130, 132, 143, 156, 176, 193, 198, 209, 221, 235, 276], "torchrec": [130, 178, 280], "distributedmodelparallel": 130, "sheet": 130, "hamid": [131, 132], "shojanazeri": [131, 132], "yanli": [131, 132], "zhao": [131, 132], "shen": [131, 145, 168, 173, 175], "li": [131, 145, 147, 165, 168, 173, 175, 186], "1t": [131, 143], "courtesi": 131, "patrick": 131, "hu": 131, "reduce_scatt": [131, 132, 135], "scatter": [131, 133, 145, 147, 184], "possess": [131, 198, 249], "toi": [131, 145, 175, 185, 188, 189, 227, 257], "fsdp_mnist": 131, "size_based_auto_wrap_polici": 131, "default_auto_wrap_polici": 131, "fsdp_auto_wrap_polici": 131, "auto_wrap_polici": [131, 132, 133], "steplr": [131, 132], "fully_sharded_data_parallel": 131, "cpuoffload": [131, 133], "backwardprefetch": [131, 132], "enable_wrap": [131, 132], "cleanup": [131, 132, 145, 226, 227], "dropout1": [131, 174], "dropout2": [131, 174], "9216": [131, 174], "ddp_loss": 131, "batch_idx": [131, 234, 235, 268], "tloss": [131, 235], "6f": [131, 235], "view_a": [131, 174, 235], "test_loss": 131, "fsdp_main": [131, 132], "1307": [131, 147, 174, 235], "3081": [131, 147, 174, 235], "dataset1": 131, "dataset2": 131, "sampler1": [131, 132], "num_replica": [131, 132], "sampler2": [131, 132], "train_kwarg": [131, 132], "test_kwarg": [131, 132], "test_batch_s": [131, 132], "cuda_kwarg": [131, 132], "my_auto_wrap_polici": 131, "min_num_param": 131, "init_start_ev": [131, 132], "enable_tim": [131, 132], "init_end_ev": [131, 132], "adadelta": 131, "step_siz": [131, 132], "gamma": [131, 132, 155, 171, 172, 173, 175], "elapsed_tim": 131, "save_model": [131, 132], "barrier": [131, 132, 134, 145, 147, 194], "metavar": [131, 132, 173, 175], "store_tru": [131, 132], "110": [131, 175, 245], "40": [131, 155, 156, 171, 175, 177, 192, 199, 209, 215, 233, 245, 274], "67462890625sec": 131, "_fsdp_wrapped_modul": 131, "flattenparamswrapp": 131, "_fpw_modul": 131, "peak": [131, 133, 141, 162, 170, 192, 194, 198, 226, 272, 278, 279], "g4dn": 131, "xlarg": 131, "allgath": [131, 132, 135, 168, 260], "seal": 131, "experiment": [131, 137, 175, 193, 194, 196, 199, 212, 235, 258, 260, 276], "20000": [131, 171], "89130859375sec": 131, "auto_wrap": 131, "offload": [131, 132, 133, 233, 241], "cpu_offload": [131, 133], "offload_param": [131, 133], "dpp": 131, "ddp_mnist": 131, "39": [131, 171, 175, 192, 233, 245, 276], "77766015625sec": 131, "wright": 132, "rohan": [132, 174], "varma": [132, 174], "wikihow": 132, "p4dn": 132, "a100": [132, 136, 164, 186, 192, 198, 215], "pressur": [132, 226], "fdsp": 132, "xxl": 132, "billion": [132, 135], "3b": [132, 170], "wikihowal": 132, "wikihowsep": 132, "summarization_dataset": 132, "t5_train": 132, "autotoken": [132, 215], "gpt2tokenizerfast": 132, "t5token": 132, "t5forconditionalgener": 132, "modeling_t5": 132, "t5block": 132, "checkpoint_wrapp": 132, "checkpointimpl": 132, "apply_activation_checkpointing_wrapp": 132, "mixedprecis": 132, "shardingstrategi": [132, 229], "fullstatedictconfig": 132, "statedicttyp": 132, "transformer_auto_wrap_polici": 132, "tqdm": [132, 148, 171, 215], "datetim": [132, 134, 196], "setup_model": 132, "from_pretrain": [132, 215, 234, 275], "get_date_of_run": 132, "2022": [132, 200], "08": [132, 153, 171, 175, 194, 233, 235, 245, 274], "31": [132, 153, 154, 171, 233, 245, 250, 259, 276], "12_pm": 132, "date_of_run": 132, "strftime": 132, "s_": [132, 172], "format_metrics_to_gb": 132, "gigabyt": 132, "metric_num": 132, "g_gigabyt": 132, "ndigit": 132, "fsdp_loss": 132, "inner_pbar": 132, "colour": 132, "desc": [132, 196], "r0": 132, "input_id": [132, 135, 215, 275], "source_id": 132, "attention_mask": [132, 275], "source_mask": 132, "target_id": 132, "train_accuraci": 132, "val_load": 132, "load_dataset": [132, 215, 275], "type_path": 132, "output_length": 132, "print_text": 132, "1500": [132, 245], "val_dataset": 132, "t5_auto_wrap_polici": 132, "transformer_layer_cl": 132, "sharding_strategi": [132, 133, 229], "shard_grad_op": [132, 133], "zero2": 132, "full_shard": [132, 133], "zero3": 132, "bf16_readi": 132, "is_bf16_support": 132, "loosevers": 132, "is_nccl_avail": [132, 194], "mp_polici": [132, 133], "bfsixteen": 132, "mixed_precis": [132, 133], "current_devic": [132, 244, 276], "adamw": [132, 172], "best_val_loss": 132, "inf": [132, 188, 207, 210, 276], "curr_val_loss": 132, "file_save_nam": 132, "time_of_run": 132, "dur": 132, "train_acc_track": 132, "val_acc_track": 132, "training_start_tim": 132, "track_memori": 132, "mem_alloc_track": 132, "mem_reserved_track": 132, "run_valid": 132, "zone": 132, "memory_alloc": 132, "memory_reserv": 132, "save_polici": 132, "offload_to_cpu": 132, "rank0_onli": 132, "state_dict_typ": 132, "full_state_dict": [132, 133], "cpu_stat": 132, "currepoch": 132, "prefix": [132, 136, 140, 148, 181, 186, 188, 196, 198, 245, 259, 278, 279], "save_nam": 132, "store_fals": 132, "nnode": [132, 145, 167, 194, 196], "transfom": 132, "mhsa": 132, "ffn": [132, 192], "bfloat16": [132, 133, 194, 198, 209, 221, 244, 257, 268], "v100": [132, 186], "fpsixteen": 132, "param_dtyp": [132, 133], "reduce_dtyp": [132, 133], "buffer_dtyp": [132, 133], "fp32_polici": 132, "grad_bf16": 132, "oom": [132, 162, 244], "freed": [132, 162], "backward_pr": [132, 133], "backward_prefetch": [132, 133], "backward_post": [132, 133], "contact": [132, 219], "wei": 133, "feng": [133, 155, 168, 185], "yifan": 133, "mao": 133, "unshard": [133, 189, 194], "recordstream": 133, "float8": 133, "nf4": 133, "qlora": 133, "fsdpmodul": 133, "fsdptransform": 133, "tok_embed": [133, 135, 167], "fsdptransformerblock": 133, "joint": [133, 270], "to_loc": 133, "clip_grad_norm_": [133, 171], "seq_len": 133, "queu": [133, 226], "set_modules_to_forward_prefetch": 133, "set_modules_to_backward_prefetch": 133, "perf": [133, 215], "layers_to_prefetch": 133, "num_to_forward_prefetch": 133, "num_to_backward_prefetch": 133, "upcast": 133, "model_arg": [133, 167], "fsdp_kwarg": 133, "mixedprecisionpolici": 133, "max_norm": 133, "resum": [133, 186, 227, 264, 275], "distributed_tensor": 133, "distribute_tensor": 133, "mmap": 133, "full_sd": 133, "meta_sharded_sd": 133, "sharded_sd": 133, "param_nam": [133, 257], "full_tensor": 133, "sharded_meta_param": 133, "sharded_tensor": 133, "device_mesh": [133, 135, 194, 229], "full_param": 133, "cpu_state_dict": 133, "sharded_param": 133, "del": [133, 167, 171, 199, 276], "set_model_state_dict": 133, "broadcast_from_rank0": 133, "statedictopt": 133, "get_model_state_dict": 133, "set_optimizer_state_dict": 133, "get_optimizer_state_dict": 133, "modulewrappolici": 133, "transformerblock": [133, 135], "param_init_fn": 133, "itertool": [133, 175], "to_empti": [133, 217, 257], "sublay": 133, "reshard_after_forward": 133, "hybrid_shard": [133, 229], "_hybrid_shard_zero2": 133, "offload_polici": 133, "cpuoffloadpolici": 133, "cast_forward_input": 133, "cast_root_forward_input": 133, "output_dtyp": [133, 193, 196], "sync_module_st": 133, "rank0": [133, 173, 175, 196], "forward_prefetch": 133, "fsdp_modul": 133, "limit_all_gath": 133, "use_orig_param": [133, 135], "flat": 133, "no_sync": [133, 260], "set_requires_gradient_sync": 133, "ignored_param": 133, "ignored_st": 133, "xilun": [134, 194], "roll": 134, "1k": [134, 135], "98304": 134, "96k": 134, "perf_count": 134, "logger": [134, 184], "getlogg": [134, 184], "var": [134, 276], "preset": [134, 212], "env_rank": 134, "env_world_s": 134, "env_master_addr": 134, "env_master_port": 134, "23456": [134, 147], "tcp_store": 134, "is_mast": 134, "time_elaps": [134, 276], "client": 134, "timeout": [134, 145, 168, 196], "store_based_barri": 134, "timedelta": [134, 196], "diststoreerror": 134, "_diststoreerror": 134, "_store_based_barri": 134, "group_nam": 134, "rendezvous_count": 134, "default_pg_timeout": 134, "logging_interv": 134, "store_kei": 134, "store_based_barrier_kei": 134, "worker_count": 134, "last_worker_kei": 134, "last_work": 134, "runtimeerror": [134, 168, 170, 275], "num_workers_join": 134, "tcpstore_test": 134, "number_run": 134, "spectrum": 134, "listen_fd": 134, "socket": [134, 147, 153, 260, 278], "listen_sock": 134, "af_inet": 134, "sock_stream": 134, "addr": [134, 196], "getsocknam": 134, "master_listen_fd": 134, "notimplementederror": 134, "gloo": [134, 145, 147, 168, 181, 189, 226, 279], "vairabl": 134, "plane": 134, "notifi": [134, 173], "wanchao": [135, 229], "liang": [135, 229], "tianyu": 135, "liu": 135, "megatron": 135, "lm": [135, 225], "sp": 135, "parallelstyl": 135, "parallelize_modul": 135, "foward": 135, "aris": [135, 188, 192, 198, 207, 275], "exceed": [135, 171], "domin": [135, 156, 184], "ballpark": 135, "flop": [135, 189, 272], "llm": [135, 167, 209], "trillion": [135, 143], "month": 135, "llama": [135, 192, 212], "70b": 135, "2k": 135, "llama2": 135, "colwiseparallel": 135, "rowwiseparallel": 135, "sequenceparallel": 135, "rmsnormpython": 135, "preparemoduleinput": 135, "preparemoduleoutput": 135, "init_device_mesh": [135, 194, 229], "tp_mesh": [135, 229], "feedforward": 135, "swiglu": 135, "w2": 135, "silu": 135, "w1": 135, "w3": 135, "colwis": 135, "rowwis": 135, "parallelize_plan": 135, "layer_tp_plan": 135, "feed_foward": 135, "feed_forward": 135, "wq": 135, "wk": 135, "wv": 135, "wo": 135, "tp_plan": 135, "draft": [135, 147], "num_head": 135, "layer_id": [135, 167], "transformer_block": 135, "attn_lay": 135, "n_head": [135, 167], "n_kv_head": 135, "input_layout": 135, "output_layout": 135, "attention_norm": 135, "ffn_norm": 135, "desired_input_layout": 135, "yellow": 135, "red": [135, 140, 182, 241], "loss_parallel": 135, "use_local_output": 135, "seq": 135, "dp": [135, 196], "mesh_2d": [135, 229], "submesh": 135, "dp_mesh": 135, "model_tp": 135, "model_2d": 135, "broadli": 136, "torchviz": [136, 142], "orang": [136, 170], "_save": 136, "kept": [136, 196], "_saved_self": 136, "_saved_oth": 136, "cycl": [136, 181, 221, 245, 250], "thumb": [136, 154, 171, 244], "pack_hook": 136, "unpack_hook": 136, "silli": 136, "harmless": 136, "debat": 136, "__repr__": [136, 245], "152": 136, "48gb": 136, "5gb": 136, "6x": 136, "leak": 136, "autograd_saved_tensors_hooks_tutori": [136, 178, 280], "david": 137, "eriksson": 137, "balandat": 137, "methodologi": [137, 234], "laptop": 137, "sustain": [137, 226], "studi": [137, 169, 184], "botorch": 137, "bayesian": 137, "mnist_train_na": [137, 157, 178, 280], "appdef": 137, "kubernet": 137, "local_cwd": 137, "fetch": [137, 139, 173, 174, 175, 189, 270], "proxi": [137, 205, 208, 245, 265], "tensorboardcurvemetr": 137, "curve_nam": 137, "lower_is_bett": 137, "favor": [137, 159, 171, 188], "multiobjectiveoptimizationconfig": 137, "94": [137, 171, 233, 250, 276], "generationstrategi": 137, "scheduleropt": 137, "max_pending_tri": 137, "pareto": 137, "frontier": 137, "surrog": 137, "uncertainti": 137, "num_param": 137, "val_acc": 137, "contour": 137, "hidden_size_1": 137, "kiuk": 137, "chung": 137, "tristan": [137, 170], "rice": [137, 170], "ax_multiobjective_nas_tutori": [137, 157, 178, 280], "surnam": 138, "spell": 138, "lua": [138, 139, 177], "unreason": [138, 139], "roman": 138, "alphabet": 138, "n_letter": 138, "line_length": 138, "all_lett": 138, "linetotensor": 138, "namesdataset": 138, "20074": 138, "charrnn": 138, "label_from_output": 138, "histor": [138, 139], "all_loss": [138, 139], "minu": [138, 181], "bright": 138, "incorrectli": 138, "chines": [138, 139], "korean": 138, "italian": 138, "greek": 138, "poorli": 138, "gender": 138, "subreddit": 138, "char_rnn_classification_tutori": [138, 178, 280], "russian": 139, "ru": 139, "rovakov": 139, "uantov": 139, "shavakov": 139, "german": 139, "ger": 139, "gerren": 139, "ereng": 139, "rosher": 139, "spa": 139, "salla": 139, "parer": 139, "allan": 139, "chi": 139, "chan": 139, "iun": 139, "category_lin": 139, "o2o": 139, "muscl": [139, 184], "fuzz": 139, "chao": 139, "abcd": 139, "eo": [139, 177], "n_categori": 139, "randomtrainingexampl": 139, "contrast": [139, 145, 164, 165, 188, 205], "timesinc": 139, "timestamp": [139, 152, 241], "print_everi": 139, "plot_everi": 139, "output_nam": 139, "fiction": 139, "countri": 139, "citi": 139, "char_rnn_generation_tutori": [139, 178, 280], "simon": 140, "fan": [140, 170], "torch_log": [140, 188, 209, 264, 265, 267, 275, 280], "_dynamo": [140, 153, 186, 188, 265, 275, 276], "compiled_autograd": 140, "intercept": 140, "bytecod": [140, 186], "aotdispatch": 140, "rout": [140, 153, 188], "rewritten": 140, "compiled_autograd_verbos": 140, "stderr": 140, "aot0_": 140, "aot0_view_2": 140, "view_2": 140, "aot": [140, 153, 272, 276], "unoptim": [140, 186], "aot_eag": [140, 153], "fn": [140, 147, 151, 153, 186, 199, 223, 270, 273, 276], "graph_break": [140, 275, 276], "unique_graph": 140, "call_hook": 140, "div": [140, 153, 205], "adjac": 141, "hardcod": [141, 188], "dilat": [141, 251], "ep": [141, 175, 188, 193, 205, 215, 275], "track_running_statist": 141, "denomin": 141, "nenadmarku": [141, 185], "bulk": 141, "fusedconvbn": 141, "geforc": 141, "rtx": 141, "3070": 141, "56gb": 141, "unfus": 141, "68gb": 141, "shallow": [141, 148], "custom_function_conv_bn_tutori": [141, 178, 280], "grad_out": 142, "finit": [142, 159], "differenc": 142, "magnifi": 142, "gradgradcheck": [142, 260], "grad_x": 142, "make_dot": 142, "dout": [142, 154], "ouptut": 142, "sinh": 142, "cosh": 142, "expx": 142, "expnegx": 142, "_grad_out_exp": 142, "_grad_out_negexp": 142, "sinhbad": 142, "cube_backward": 142, "cubebackward": 142, "cube_forward": 142, "cube_backward_backward": 142, "sav_grad_out": 142, "cube_backward_backward_grad_out": 142, "cube": 142, "dgrad_out": 142, "reachabl": [143, 144, 147], "2xlarg": [143, 144], "hydra": 143, "slurm": [143, 144, 145, 147], "char_dataset": 143, "gpt2_train_cfg": 143, "bucket": [143, 260], "aggress": 143, "rendezv": [144, 168], "nccl_debug": 144, "diagnos": 144, "nccl_socket_ifnam": 144, "eth0": 144, "joe": 145, "zhu": [145, 153], "chirag": [145, 196], "pandya": [145, 196], "clarifi": 145, "filestor": 145, "libtmp": 145, "some_fil": 145, "toymodel": [145, 226, 227, 229], "net1": [145, 226, 227, 228, 229], "net2": [145, 226, 227, 228, 229], "demo_bas": 145, "ddp_model": [145, 279], "loss_fn": [145, 167, 173, 226, 227, 279], "run_demo": 145, "demo_fn": 145, "caution": 145, "straggler": [145, 181], "inevit": 145, "spike": [145, 170], "AND": 145, "recoveri": 145, "torchelast": 145, "demo_checkpoint": 145, "checkpoint_path": 145, "gettempdir": 145, "toympmodel": 145, "dev0": 145, "dev1": 145, "output_devic": 145, "demo_model_parallel": 145, "mp_model": 145, "ddp_mp_model": 145, "n_gpu": 145, "elastic_ddp": 145, "rdzv_id": [145, 229], "rdzv_backend": 145, "rdzv_endpoint": [145, 229], "29400": [145, 229], "scontrol": 145, "hostnam": 145, "slurm_nodelist": 145, "srun": 145, "torchrun_script": 145, "s\u00e9b": 147, "arnold": 147, "sysadmin": 147, "coordin": [147, 179, 191, 198, 208, 278], "pdsh": 147, "clustershel": 147, "init_process": 147, "127": [147, 171, 193], "set_start_method": 147, "ip": 147, "recv": [147, 167, 175], "irecv": 147, "dst": 147, "req": 147, "sent": [147, 165, 173, 188, 225], "behaviour": 147, "fanci": 147, "baidu": 147, "deepspeech": 147, "facebook": 147, "communc": 147, "new_group": [147, 167, 229], "commut": 147, "band": 147, "bor": 147, "bxor": 147, "premul_sum": 147, "scatter_list": 147, "gather_list": 147, "all_to_al": 147, "output_tensor_list": 147, "input_tensor_list": 147, "random_split": 147, "data_idx": 147, "datapartition": 147, "1234": 147, "data_len": 147, "part_len": 147, "partition_dataset": 147, "get_world_s": 147, "bsz": 147, "partition_s": 147, "train_set": [147, 181], "30000": [147, 171], "ceil": 147, "epoch_loss": 147, "average_gradi": 147, "voil\u00e0": 147, "send_buff": 147, "recv_buff": 147, "accum": [147, 209], "send_req": 147, "bandwidth": [147, 181, 189, 213, 233], "subsect": 147, "mpi": 147, "eleg": 147, "smi": [147, 244], "mvapich2": 147, "ipc": [147, 181], "recompil": [147, 186, 224, 265, 269, 270], "requisit": 147, "forg": [147, 235, 278], "openmpi": 147, "mpirun": 147, "myscript": 147, "handshak": 147, "superflu": 147, "everybodi": 147, "readili": 147, "race": 147, "fcntl": 147, "nf": [147, 196], "sharedfil": 147, "everyon": 147, "unclear": [147, 188], "natalia": 147, "gimelshein": 147, "actor": 148, "carrier": [148, 171], "step_mdp": 148, "brought": [148, 165, 171, 188], "84x84": 148, "accessori": [148, 170], "inittrack": 148, "stamp": 148, "is_init": 148, "tensordictprim": 148, "primer": [148, 208], "disappear": 148, "lstmmodul": 148, "backbon": [148, 184], "flank": 148, "assist": [148, 229], "tensordictmodulebas": 148, "batch_first": 148, "make_tensordict_prim": 148, "qvaluemodul": 148, "action_valu": 148, "qvalueactor": 148, "set_recurrent_mod": 148, "uniniti": [148, 217], "dqnloss": 148, "delay_valu": 148, "lazymemmapstorag": 148, "dqn_with_rnn_tutori": [148, 178, 280], "tradition": [149, 217], "pretend": [149, 164], "stack_module_st": 149, "functional_cal": [149, 159, 164], "num_model": 149, "front": [149, 169, 188], "in_dim": [149, 154, 164, 219], "weren": [149, 164], "forced_alignment_tutori": 150, "incomplet": [151, 165], "eagerli": [151, 162, 188, 273], "alongsid": [151, 182, 184, 189, 244], "primal": [151, 154], "dual": 151, "dual_level": 151, "fresh": [151, 244], "check_forward_ad": 151, "check_backward_ad": 151, "check_undefined_grad": 151, "check_batched_grad": 151, "functorch": 151, "downsid": [151, 165], "reformul": [151, 159], "ft": 151, "make_functional_with_buff": 151, "analog": [151, 188, 189, 207, 208], "consolid": [151, 173, 189], "dual_numb": 151, "forward_ad_usag": [151, 178, 280], "jame": 152, "reed": 152, "longest": 152, "nicer": 152, "tabul": [152, 186, 196, 272], "ca": 152, "graphmodul": [152, 193, 276], "symbolic_trac": 152, "profilinginterpret": 152, "clock": [152, 245], "51393": 152, "happi": 152, "hear": 152, "tracker": 152, "fx_profiling_tutori": [152, 178, 280], "xuan": 153, "liao": 153, "haozh": 153, "jiong": [153, 199, 209], "gong": [153, 199, 209], "weihan": 153, "intricaci": 153, "troubleshoot": 153, "pinpoint": [153, 188, 228], "narrow": [153, 188, 196, 210], "torch_compile_debug": 153, "xx": 153, "ir": [153, 270], "_inductor": [153, 188, 199, 209, 274, 276], "model___20": 153, "torchinductor_root": 153, "rx": 153, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 153, "fx_graph_runn": 153, "fx_graph_transform": 153, "ir_pre_fus": 153, "ir_post_fus": 153, "output_cod": [153, 209, 276], "triton": [153, 186, 200, 209, 264, 267, 269, 274, 276, 280], "gv": 153, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 153, "tmp2": [153, 209, 276], "tmp1": [153, 209, 276], "exc": [153, 275], "backendcompilerfail": 153, "cppcompileerror": 153, "xg": 153, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 153, "unsign": [153, 245], "char": [153, 234], "max_propagate_nan": 153, "tmp3": [153, 209, 276], "tmp0": [153, 209, 276], "deduct": 153, "substitut": [153, 154, 162], "deduc": 153, "in_ptr0": [153, 276], "in_ptr1": [153, 276], "out_ptr0": [153, 276], "pragma": [153, 209], "ivdep": [153, 209], "i0": 153, "static_cast": [153, 209], "0l": [153, 209], "8390l": 153, "1l": [153, 199, 209], "i1": 153, "8l": 153, "buf0": [153, 199, 276], "schedulernod": 153, "computedbuff": 153, "memorydep": 153, "c0": 153, "67120": 153, "unmet_depend": 153, "met_depend": 153, "arg0_1": [153, 199, 276], "8390": 153, "arg1_1": [153, 276], "nodeus": 153, "can_inplac": 153, "buf0_loop_bodi": 153, "var_rang": 153, "z0": 153, "index0": 153, "index1": 153, "get_index": 153, "get_index_1": 153, "load_1": 153, "get_index_2": 153, "minifi": 153, "dead": 153, "minif": 153, "allclos": [153, 154, 194, 215], "tol": 153, "test_script": 153, "expected_result": 153, "actual_result": 153, "torchdynamo_repro_aft": 153, "torchdynamo_repro_level": 153, "mobilebertforquestionansw": 153, "xeon": [153, 156, 221, 234, 264], "platinum": 153, "8358": 153, "60ghz": 153, "kmp_blocktim": [153, 260, 278], "kmp_set": 153, "kmp_affin": [153, 260, 278], "compact": [153, 260, 278], "ld_preload": [153, 260, 278], "conda_prefix": [153, 245], "dirnam": [153, 168, 241], "libiomp5": [153, 260, 278], "libjemalloc": [153, 278], "malloc_conf": [153, 278], "oversize_threshold": [153, 278], "background_thread": [153, 278], "metadata_thp": [153, 278], "dirty_decay_m": 153, "muzzy_decay_m": 153, "numactl": [153, 260, 278], "bench": 153, "eager_t": 153, "num_it": [153, 171], "inductor_t": 153, "1023553796113": 153, "339": 153, "95180135127157": 153, "359459053287382": 153, "355x": 153, "enable_kernel_profil": 153, "73": [153, 171, 175, 215, 245], "370": [153, 171], "814m": 153, "362": 153, "89": [153, 171, 175, 250], "161": 153, "276m": 153, "363": 153, "97": [153, 175, 233], "121": [153, 171, 250, 276, 280], "416m": 153, "488": [153, 245], "154m": 153, "194": 153, "clamp_min": [153, 233], "81": [153, 171, 233], "444m": 153, "bmm": [153, 210, 221, 245], "258m": [153, 233], "810": 153, "920m": 153, "447m": 153, "_softmax": 153, "087m": 153, "376": 153, "888m": 153, "77": 153, "430m": 153, "502m": 153, "161m": 153, "850": 153, "377m": 153, "386": [153, 175, 210, 250], "index_select": 153, "000u": [153, 250], "986": 153, "420m": 153, "703": 153, "656": [153, 279], "963": 153, "864m": 153, "_mkl_linear": [153, 209], "231": [153, 245, 250], "573m": [153, 250], "992m": 153, "336": [153, 250], "642m": 153, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 153, "915": [153, 154, 178, 280], "911": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 153, "901": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 153, "898": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 153, "895": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 153, "893": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 153, "892": [153, 170, 245], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 153, "891": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 153, "890": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 153, "889": 153, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 153, "graph_0_cpp_fused_": 153, "63x": 153, "cblas_sgemm_comput": 153, "339m": 153, "94x": 153, "impress": [153, 188], "cpp_fused__mkl_linear_add_mul_relu_151": 153, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 153, "bottl": [153, 226], "neck": [153, 226], "780875144992024": 153, "9588955780491233": 153, "0286805751604735": 153, "smallest": [153, 169], "solid": 153, "analyt": 153, "hotspot": [153, 241], "phenomenon": 153, "inductor_debug_cpu": [153, 178, 280], "annoi": 154, "jax": [154, 159, 219], "compute_jac": 154, "xp": 154, "jacobian_row": 154, "unit_vector": 154, "5956": 154, "6096": 154, "1326": 154, "2295": 154, "4490": 154, "3661": 154, "1672": 154, "1190": 154, "1705": 154, "6683": 154, "1851": 154, "1630": 154, "0634": 154, "6547": 154, "5908": 154, "1308": 154, "vjp_fn": 154, "ft_jacobian": 154, "argnum": 154, "millisecond": [154, 168, 260], "get_perf": 154, "first_descriptor": 154, "second_descriptor": 154, "final_gain": 154, "without_vmap": 154, "stmt": [154, 215, 223, 245], "with_vmap": 154, "no_vmap_tim": 154, "timeit": [154, 210, 251, 259], "with_vmap_tim": 154, "0x7f9249478fd0": 154, "0x7f92799ca620": 154, "388": 154, "6147": 154, "ft_jac_weight": 154, "ft_jac_bia": 154, "rigor": 154, "taller": 154, "din": 154, "using_fwd": 154, "using_bwd": 154, "jacfwd_tim": 154, "jacrev_tim": 154, "0x7f9276e97df0": 154, "698": 154, "43": [154, 171, 233, 245], "0x7f9279448eb0": 154, "1163": 154, "9837": 154, "0x7f92794b3eb0": 154, "0x7f92794eb760": 154, "472": 154, "1377": 154, "9120": 154, "hessiani": 154, "overwhelm": 154, "hess_api": 154, "hess_fwdfwd": 154, "hess_revrev": 154, "33": [154, 170, 171, 175, 233, 245], "compute_batch_jacobian": 154, "batch_jacobian0": 154, "predict_with_output_sum": 154, "batch_jacobian1": 154, "movedim": 154, "compute_batch_hessian": 154, "batch_hess": 154, "hvp_revrev": 154, "result_hvp_revrev": 154, "jacobians_hessian": [154, 178, 280], "yuansong": 155, "steven": 155, "guo": 155, "cheatsheet": 155, "companion": 155, "bro": 155, "ne": [155, 177, 250], "emul": 155, "tube": 155, "mushroom": 155, "screen": [155, 172, 241], "next_stat": [155, 172], "240": [155, 175, 250], "pipe": 155, "sky": 155, "grayscaleobserv": 155, "resizeobserv": 155, "skipfram": 155, "framestack": 155, "hi": [155, 210], "movement": 155, "exploration_r": 155, "he": [155, 177, 185], "marionet": 155, "ddqn": 155, "_e": 155, "argmax_": 155, "td_target": 155, "td_t": 155, "td_e": 155, "leftarrow": 155, "nabla": 155, "episod": [155, 172, 173, 175], "mario_rl_tutori": [155, 178, 280], "vitali": 156, "fedyunin": 156, "densest": 156, "4x4": 156, "10x3x16x16": 156, "768": [156, 215], "minor": [156, 175, 182, 234, 235], "ambigu": [156, 206, 207], "n1hw": 156, "contrari": [156, 165, 169], "restrid": 156, "unintend": 156, "apex": 156, "main_amp": 156, "resnet50": [156, 170, 173, 234, 268], "o2": 156, "opt_level": 156, "keep_batchnorm_fp32": 156, "nonetyp": 156, "loss_scal": 156, "7603": 156, "cast_model_typ": 156, "patch_torch_funct": 156, "master_weight": 156, "125": [156, 250], "866": 156, "230": [156, 175, 184], "949": 156, "6735125184": 156, "6735": 156, "prec": 156, "259": 156, "562": 156, "773": 156, "481": 156, "355": [156, 171], "693": 156, "6968704462": 156, "6852": 156, "55": [156, 171, 245, 278], "258": 156, "461": 156, "775": 156, "089": 156, "433": 156, "965": 156, "7877287269": 156, "7194": 156, "51": [156, 171, 175, 233], "833": 156, "771": 156, "710": 156, "487": 156, "8285319805": 156, "7467": 156, "260": [156, 175], "380": 156, "770": 156, "090": 156, "525": 156, "908": 156, "7370464802": 156, "7447": 156, "360": 156, "623": 156, "555": 156, "728": 156, "7592862844": 156, "7472": 156, "917": 156, "345": [156, 171, 191], "774": 156, "746": [156, 245], "115": [156, 171, 233], "9698858261": 156, "9218": 156, "324": [156, 171], "597": 156, "659": 156, "2505953312": 156, "0879": 156, "767": 156, "785": 156, "7579724789": 156, "7580": 156, "198": 156, "482": 156, "135": [156, 170, 245], "414": 156, "716": [156, 233, 245], "7007197738": 156, "7293": 156, "250": [156, 175, 250], "387": 156, "1010": 156, "516": 156, "7113101482": 156, "7233": 156, "667": 156, "197": 156, "340": 156, "1013": 156, "023": 156, "588": 156, "333": 156, "8943189979": 156, "7661": 156, "541": 156, "7113249302": 156, "9551": 156, "1011": 156, "163": 156, "683": 156, "574": 156, "8537774086": 156, "7716": 156, "279": 156, "453": 156, "7595844269": 156, "3413": 156, "429": 156, "269": 156, "827": 156, "743": [156, 276], "883": 156, "8196096420": 156, "4011": 156, "volta": [156, 244, 260], "alexnet": 156, "mnasnet0_5": 156, "mnasnet0_75": 156, "mnasnet1_0": 156, "mnasnet1_3": 156, "mobilenet_v2": [156, 170, 191, 220], "resnet101": 156, "resnet152": 156, "resnet34": 156, "resnext50_32x4d": 156, "shufflenet_v2_x0_5": [156, 170], "shufflenet_v2_x1_0": [156, 170], "shufflenet_v2_x1_5": [156, 170], "shufflenet_v2_x2_0": [156, 170], "squeezenet1_0": 156, "squeezenet1_1": 156, "vgg11": 156, "vgg11_bn": 156, "vgg13": 156, "vgg13_bn": 156, "vgg16": 156, "vgg16_bn": 156, "vgg19_bn": 156, "wide_resnet101_2": 156, "wide_resnet50_2": 156, "ic": 156, "lake": [156, 234], "densenet121": 156, "densenet161": 156, "densenet169": 156, "googlenet": [156, 170], "inception_v3": [156, 170], "resnext101_32x8d": [156, 170], "spite": 156, "nc11": 156, "memory_format_tutori": [156, 178, 280], "year": [159, 163, 192], "j_": 159, "diagon": 159, "beforehand": 159, "asymptot": 159, "i_o": 159, "i_": 159, "e_o": 159, "textrm": 159, "_o": 159, "tensorfloat": 159, "sacrific": 159, "empirical_ntk_ntk_vp": 159, "luck": [159, 162, 189], "altogeth": [159, 207], "neural_tangent_kernel": [159, 178, 280], "french": [160, 177], "homepag": [161, 195], "ooz": 162, "_might_": 162, "2p": 162, "ephemer": 162, "timelin": [162, 181, 241], "memory_viz": 162, "devot": 162, "bat": [162, 200], "2gb": [162, 170], "6gb": 162, "foreach": [162, 232], "reveal": [162, 176, 186, 243, 245], "silver": 162, "bullet": 162, "sizabl": [162, 165], "tantamount": 162, "eat": 162, "lora": 162, "unlock": [162, 212], "vit_l_16": 162, "neat": 162, "lrschedul": [162, 264], "slate": 162, "woohoo": 162, "apart": 162, "shrunk": 162, "0gb": 162, "optimizer_step_in_backward_tutori": [162, 178, 280], "lezcano": 163, "surprisingli": 163, "ill": 163, "frobeniu": 163, "spectral": 163, "lipschitz": 163, "x\u1d40": 163, "upper": [163, 176, 188, 250], "triangular": 163, "reimplement": [163, 169, 188], "skew": [163, 181, 250], "unparametr": 163, "linearsymmetr": 163, "moduledict": [163, 167, 215], "parametrizationlist": [163, 215], "modulelist": 163, "inbuilt": 163, "caylei": 163, "spd": 163, "right_invers": 163, "succinctli": 163, "relax": [163, 275], "remove_parametr": 163, "parametri": 163, "leave_parametr": 163, "privaci": [164, 169], "sample_grad": 164, "compute_loss": 164, "ft_compute_grad": 164, "0th": [164, 169, 176, 210], "25x": [164, 184, 215], "opacu": 164, "per_sample_grad": [164, 178, 280], "cpu_tensor": 165, "cuda_tensor": [165, 260], "erron": 165, "carefulli": [165, 260], "distinguish": [165, 175, 182], "isol": [165, 186], "illus": 165, "anywher": 165, "cudastreamsynchron": 165, "dma": 165, "volterra": 165, "tesla": 165, "h100": [165, 186], "t3_cuda": 165, "belief": [165, 188], "brand": 165, "cudahostalloc": 165, "cudamemcpi": 165, "doubt": 165, "interestingli": 165, "pronounc": 165, "tick": 165, "__whenev": 165, "memory__": 165, "corrupt": 165, "garbag": 165, "reliabl": [165, 245], "annihil": 165, "legitim": 165, "notori": 165, "inher": [165, 188, 189, 227], "blockag": 165, "afterward": [165, 188, 197], "non_blocking_pin": 165, "ration": 165, "outweigh": [165, 233], "perman": [165, 169], "shuttl": 165, "expedit": 165, "advers": 165, "bu": 165, "monopol": 165, "pinmem_nonblock": [165, 178, 280], "huang": [167, 168, 194, 226, 227], "microbatch": 167, "micro": 167, "educ": [167, 192], "dataclass": 167, "modelarg": 167, "witout": 167, "layernorm": [167, 192, 215], "splitpoint": 167, "pipelinestag": 167, "schedulegpip": 167, "pp_group": 167, "stage_index": 167, "num_stag": 167, "init_distribut": 167, "peer": [167, 279], "manual_model_split": 167, "tracer": 167, "split_spec": 167, "4th": [167, 221], "mirror": 167, "build_stag": 167, "gpipe": 167, "1f1b": 167, "interleaved1f1b": 167, "loopedbf": 167, "num_microbatch": 167, "example_input_microbatch": 167, "tracer_model_split": 167, "tokenwise_loss_fn": 167, "n_microbatch": 167, "pipelining_tutori": 167, "tian": 168, "si": 168, "zeroredundancyoptim": [168, 264], "processgroupnccl": 168, "processgroupgloo": 168, "processgroupmpi": 168, "ucc": 168, "oneccl": [168, 260], "trainum": 168, "emerg": 168, "backenddummi": 168, "hpp": 168, "chrono": 168, "intrusive_ptr": [168, 245, 259], "outputtensor": [168, 220], "inputtensor": [168, 220], "allgatheropt": 168, "allreduceopt": 168, "workdummi": 168, "optyp": 168, "ivalu": [168, 220, 234], "recvanysourc": 168, "future_": 168, "iscomplet": 168, "issuccess": 168, "kunsettimeout": 168, "getfutur": 168, "outputtensorvec": 168, "make_intrus": 168, "listtyp": 168, "tensortyp": 168, "markcomplet": 168, "createbackenddummi": 168, "backenddummyconstructor": 168, "__attribute__": 168, "register_backend": 168, "cpp_function": [168, 245], "libraries_dir": 168, "abspath": 168, "dummy_collect": 168, "michela": 169, "paganini": 169, "biolog": 169, "batteri": 169, "subnetwork": 169, "lotteri": 169, "ticket": 169, "destruct": [169, 278], "0a0": [169, 220], "8e8a5e0": 169, "lecun": 169, "1998": 169, "unprun": 169, "basepruningmethod": 169, "adequ": [169, 171], "weight_orig": 169, "_orig": 169, "intact": [169, 173, 257], "weight_mask": 169, "_mask": 169, "forward_pre_hook": 169, "l1_unstructur": 169, "bias_orig": 169, "bias_mask": 169, "pruningcontain": 169, "compute_mask": 169, "ln_structur": 169, "undo": 169, "reassign": 169, "global_unstructur": 169, "apply_mask": 169, "unstructur": 169, "preprun": 169, "pruning_typ": 169, "pruning_tutori": [169, 178, 280], "sink": 170, "5v": 170, "sd": 170, "card": [170, 176], "8gb": 170, "arm": [170, 233], "64bit": 170, "aarch64": 170, "arm64": [170, 220], "raspberrypi": 170, "raspios_arm64": 170, "rpi": 170, "sdcard": 170, "start_x": 170, "128m": 170, "gpu_mem": 170, "commment": 170, "camera_auto_detect": 170, "v4l2": 170, "reboot": 170, "video4linux2": 170, "video0": 170, "picamera": 170, "36fp": 170, "30fp": 170, "framer": 170, "cv2": 170, "cap": [170, 171, 181], "videocaptur": 170, "cap_prop_frame_width": 170, "cap_prop_frame_height": 170, "cap_prop_fp": 170, "bgr": 170, "ret": [170, 173], "input_tensor": 170, "input_batch": 170, "qnnpack": [170, 193], "mobilenet_v3_larg": 170, "109": 170, "233": [170, 175], "885": [170, 233], "195": [170, 175, 276], "132": 170, "82": [170, 171, 233, 250], "prequant": 170, "20fp": 170, "cap_v4l2": 170, "last_log": 170, "frame_count": 170, "ui": [170, 181, 241, 258, 264], "htop": 170, "mug": 170, "allevi": 170, "set_num_thread": 170, "repetit": [171, 245], "maximis": 171, "clipppoloss": 171, "theta_k": 171, "pi_": 171, "lingua": 171, "franca": 171, "defaultdict": [171, 215], "normalparamextractor": 171, "replaybuff": 171, "samplerwithoutreplac": 171, "lazytensorstorag": 171, "explorationtyp": 171, "set_exploration_typ": 171, "probabilisticactor": 171, "tanhnorm": 171, "gae": 171, "is_fork": 171, "get_start_method": 171, "fork": [171, 172, 278], "num_cel": 171, "3e": 171, "max_grad_norm": 171, "sub_batch_s": 171, "cardin": [171, 189], "clip_epsilon": 171, "lmbda": 171, "entropy_ep": 171, "deepmind": [171, 179], "interchang": 171, "panel": [171, 181], "base_env": 171, "inverteddoublependulum": 171, "transmit": 171, "gymwrapp": 171, "loos": 171, "supplementari": 171, "reduce_dim": 171, "cat_dim": 171, "stringent": 171, "unboundedcontinu": 171, "continuousbox": 171, "step_count": 171, "boundeddiscret": 171, "int64": [171, 208], "full_state_spec": 171, "full_action_spec": 171, "boundedcontinu": 171, "943": [171, 233], "succeed": 171, "n_step": [171, 173, 175], "mu_": 171, "d_ob": 171, "d_action": 171, "mu": [171, 184], "actor_net": 171, "lazylinear": 171, "policy_modul": 171, "distribution_class": 171, "distribution_kwarg": 171, "return_log_prob": 171, "prob": [171, 173, 175, 182], "discount": [171, 172, 173], "amort": [171, 173], "value_net": 171, "value_modul": 171, "sample_log_prob": 171, "datacollector": 171, "multisyncdatacollector": 171, "split_traj": 171, "refil": 171, "max_siz": 171, "value_target": 171, "advantage_modul": 171, "value_network": 171, "average_ga": 171, "actor_network": 171, "critic_network": 171, "entropy_bonu": 171, "entropy_coef": 171, "critic_coef": 171, "loss_critic_typ": 171, "smooth_l1": 171, "cosineannealinglr": 171, "pbar": 171, "eval_str": 171, "tensordict_data": 171, "data_view": 171, "subdata": 171, "loss_valu": 171, "loss_object": 171, "loss_crit": 171, "loss_entropi": 171, "cum_reward_str": 171, "stepcount_str": 171, "lr_str": 171, "horizon": 171, "eval_rollout": 171, "set_descript": 171, "322": [171, 175, 233], "46it": 171, "8308": 171, "0966": 171, "0003": 171, "29it": 171, "1264": 171, "38it": 171, "1653": 171, "341": 171, "82it": 171, "2059": 171, "87it": 171, "2163": 171, "348": 171, "01it": 171, "2343": 171, "44it": 171, "2350": 171, "344": 171, "89it": 171, "2524": [171, 276], "11it": 171, "2532": 171, "351": 171, "64it": 171, "2544": 171, "353": 171, "51it": 171, "3695": 171, "2490": 171, "352": 171, "28it": 171, "2535": 171, "95it": 171, "2469": 171, "354": 171, "85it": 171, "2575": 171, "343": 171, "67it": 171, "2643": 171, "16000": [171, 245], "2737": 171, "17000": 171, "21it": 171, "2778": 171, "18000": [171, 259], "91it": 171, "2840": 171, "19000": 171, "2746": 171, "356": 171, "42it": 171, "2823": 171, "42": [171, 172, 175, 245, 276], "21000": 171, "1962": 171, "2830": 171, "22000": 171, "49it": 171, "23000": 171, "2919": 171, "24000": [171, 245, 259], "41it": 171, "3017": 171, "25000": 171, "86it": 171, "2857": 171, "26000": 171, "2977": 171, "27000": 171, "93it": 171, "2936": 171, "28000": 171, "357": 171, "77it": 171, "3069": 171, "29000": 171, "47it": 171, "2845": 171, "31it": 171, "2779": 171, "62": [171, 175, 215], "31000": 171, "58it": 171, "4910": 171, "2827": 171, "32000": 171, "08it": 171, "2880": 171, "33000": 171, "69it": 171, "34000": 171, "2952": 171, "35000": 171, "358": [171, 233], "02it": 171, "3011": 171, "36000": [171, 245], "12it": 171, "2925": 171, "37000": 171, "38000": 171, "3019": 171, "39000": 171, "3078": 171, "40000": [171, 245], "50it": 171, "3023": 171, "41000": [171, 245], "359": [171, 275], "23it": 171, "8879": 171, "3109": 171, "42000": 171, "24it": 171, "3092": 171, "43000": 171, "3006": 171, "44000": 171, "37it": 171, "3068": 171, "90": [171, 175, 233], "45000": 171, "3087": 171, "46000": 171, "00it": 171, "3076": 171, "113": 171, "47000": 171, "54it": 171, "3004": 171, "48000": 171, "07it": 171, "3121": 171, "49000": 171, "04it": 171, "3110": 171, "34it": 171, "3080": 171, "214": 171, "videorecord": 171, "615": [171, 178, 280], "reinforcement_ppo": [171, 178, 280], "tower": 172, "cart": 172, "pole": 172, "upright": 172, "classic_control": 172, "action_spac": 172, "observation_spac": 172, "decorrel": 172, "replaymemori": 172, "cyclic": 172, "formul": 172, "r_": 172, "t_0": 172, "r_t": 172, "uncertain": 172, "tempor": 172, "max_a": 172, "univers": [172, 184], "obei": 172, "bellman": 172, "huber": 172, "noisi": [172, 245, 259], "mathcal": 172, "le": [172, 177], "mathrm": 172, "select_act": [172, 173, 175], "eps_start": 172, "eps_end": 172, "eps_decai": 172, "plot_dur": 172, "underneath": [172, 188], "tau": 172, "optimize_model": 172, "s_t": 172, "a_t": 172, "num_episod": [172, 173], "target_net": 172, "reinforcement_q_learn": [172, 178, 280], "calle": [173, 174, 225], "unblock": 173, "idl": [173, 181, 250], "callback": 173, "paus": 173, "update_and_fetch_model": 173, "future_model": 173, "batch_update_s": 173, "batchupdateparameterserv": 173, "curr_update_s": 173, "ps_rref": 173, "local_valu": [173, 174], "fut": [173, 175], "setti": 173, "set_result": 173, "rpc_sync": [173, 174, 175, 225], "image_w": 173, "image_h": 173, "one_hot_indic": 173, "random_": 173, "get_worker_info": [173, 175], "543": 173, "affine1": [173, 175], "affine2": [173, 175], "action_scor": [173, 175], "govern": 173, "select_action_batch": 173, "shortli": 173, "run_episod": [173, 175], "agent_rref": [173, 175], "ep_reward": [173, 175], "num_step": 173, "start_step": 173, "from_numpi": [173, 175], "curr_reward": 173, "saved_log_prob": [173, 175], "rob": 173, "ob_rref": [173, 175], "running_reward": [173, 175], "ob_rank": [173, 175], "ob_info": [173, 175], "observer_nam": [173, 175], "future_act": 173, "pending_st": 173, "select_acion": 173, "ob_id": [173, 175], "log_prob": [173, 175], "stitch": [173, 174], "async": [173, 175, 189, 226, 260], "oberv": [173, 175], "wait_al": 173, "policy_loss": [173, 175], "passiv": [173, 175], "run_work": [173, 174, 175, 225], "n_episod": 173, "print_log": 173, "init_rpc": [173, 174, 175, 225], "agent_nam": [173, 175], "i_episod": [173, 175], "last_reward": [173, 175], "tlast": [173, 175], "taverag": [173, 175], "shutdown": [173, 174, 175, 225], "tik": [173, 225], "tok": [173, 225], "dist_autograd": [174, 175], "num_gpu": 174, "dropout2d": [174, 235], "next_devic": 174, "caller": [174, 225], "call_method": 174, "remote_method": 174, "foo_inst": 174, "parameterserv": 174, "input_devic": 174, "intention": [174, 175, 225], "miscellan": 174, "get_dist_gradi": 174, "get_gradi": 174, "get_param_rref": 174, "cid": 174, "cpu_grad": 174, "k_cpu": 174, "v_cpu": 174, "paramt": 174, "param_rref": [174, 175], "run_parameter_serv": 174, "param_serv": 174, "global_lock": 174, "get_parameter_serv": 174, "parameter_serv": 174, "shut": 174, "offlin": 174, "trainernet": 174, "param_server_rref": 174, "get_global_param_rref": 174, "paramat": 174, "remote_param": [174, 175], "model_output": 174, "run_training_loop": 174, "nueral": 174, "context_id": [174, 175], "get_accuraci": 174, "correct_sum": 174, "trainer_": 174, "traffic": 174, "listen": [174, 276], "subprocess": [174, 245, 260], "rpc_parameter_serv": 174, "solver": 175, "formatter_class": 175, "argumentdefaultshelpformatt": 175, "log_interv": 175, "report_reward": 175, "_max_episode_step": 175, "lifetim": 175, "finfo": 175, "reward_threshold": 175, "finish_episod": 175, "min_reward": 175, "surpass": 175, "ob": 175, "ctrl": 175, "475": 175, "111": [175, 245, 278], "131": 175, "130": [175, 233], "137": 175, "140": 175, "104": 175, "170": [175, 191], "126": 175, "180": [175, 188, 233, 245], "213": 175, "165": 175, "272": [175, 233], "210": 175, "168": [175, 278], "184": 175, "208": [175, 184, 243], "270": [175, 184], "405": 175, "280": 175, "290": 175, "464": 175, "3163778435275": 175, "embeddingt": 175, "destin": [175, 225], "rnnmodel": 175, "ntoken": 175, "ninp": 175, "nhid": 175, "nlayer": 175, "emb_table_rref": 175, "decoder_rref": 175, "_remote_method": 175, "rremot": 175, "_parameter_rref": 175, "parameter_rref": [175, 225], "run_train": 175, "nindic": 175, "driss": 176, "guessou": 176, "multiheadattent": [176, 210], "flashattent": 176, "flash": [176, 198], "andrej": 176, "karpathi": 176, "nanogpt": 176, "causalselfattent": 176, "mine": 176, "166": 176, "616": 176, "726": 176, "amaz": 176, "prof": [176, 233, 250], "export_chrome_trac": 176, "compiled_causal_attention_trac": 176, "concentr": 176, "6090": 176, "3273": 176, "17m": 176, "commit": [176, 213, 221], "ae3a8d5": 176, "causal_upper_left": 176, "causal_lower_right": 176, "is_caus": [176, 192, 194, 210], "causalbia": 176, "corner": 176, "attn_scor": 176, "sdpa_kernel": [176, 194], "scaled_dot_product_attention_tutori": [176, 178, 280], "il": 177, "est": [177, 181], "peindr": 177, "tableau": 177, "paint": 177, "pourquoi": 177, "pa": 177, "essay": 177, "vin": 177, "delicieux": 177, "delici": 177, "wine": 177, "poet": 177, "romancier": 177, "she": 177, "novelist": 177, "vou": 177, "trop": 177, "maigr": 177, "skinni": 177, "condens": [177, 259], "unfold": 177, "phrase": 177, "tatoeba": 177, "eng": 177, "manyth": 177, "anki": 177, "fra": 177, "cold": [177, 248, 264, 267, 269, 280], "froid": 177, "dozen": 177, "trim": [177, 259], "lang": 177, "word2index": 177, "index2word": 177, "word2count": 177, "apostroph": 177, "je": 177, "sui": 177, "noir": 177, "attn_appli": 177, "exhibit": 177, "coher": 177, "grammar": 177, "wander": 177, "freedom": 177, "plot_loss": 177, "judgement": 177, "matshow": 177, "iot": 177, "word2vec": 177, "glove": 177, "autoencod": 177, "seq2seq_translation_tutori": [177, 178, 280], "595": 178, "torchrec_intro_tutori": [178, 189, 280], "torch_compile_tutori": [178, 186, 280], "sdpa": [178, 192, 194, 210, 280], "sphx_glr_intermediate_transformer_building_block": [178, 280], "transformer_building_block": [178, 192, 280], "spatial_transformer_tutori": [178, 179, 280], "na": [178, 280], "sphx_glr_intermediate_mnist_train_na": [178, 280], "tensorboard_profiler_tutori": [178, 181, 280], "torch_compile_conv_bn_fus": [178, 185, 280], "ghassen": 179, "hamrouni": 179, "geometr": 179, "invari": [179, 206], "boil": 179, "affine_grid": 179, "grid_sampl": 179, "speech_recognition_pipeline_tutori": 180, "perfetto": 181, "warmup": [181, 192, 223, 224, 232, 233, 250, 273, 274], "on_trace_readi": [181, 250], "tensorboard_trace_handl": 181, "record_shap": [181, 250], "profile_memori": [181, 250], "dealloc": [181, 260], "torch_tb_profil": 181, "safari": 181, "pytorch_profil": 181, "breakdown": 181, "dropdown": 181, "callstack": 181, "sm": 181, "multiprocessor": 181, "occup": 181, "tooltip": 181, "toolbar": 181, "keyboard": 181, "mous": 181, "resnet18_4work": 181, "76m": 181, "132m": 181, "azur": 181, "torchtbprofil": 181, "memory_demo_1_10": 181, "gpu0": 181, "children": [181, 250], "distributed_bert": 181, "docker": 181, "profiler_tutori": 181, "test_cifar10": 181, "vi": 181, "hub": 181, "kfd": 181, "sys_ptrac": 181, "seccomp": 181, "unconfin": 181, "shm": [181, 225], "8g": 181, "apt": [181, 184, 278], "libjpeg": 181, "whl": [181, 186, 189, 198], "rocm5": 181, "scp": 181, "testset": 182, "testload": 182, "plot_classes_pr": 182, "four_fashion_mnist_imag": 182, "refresh": [182, 189], "datapoint": 182, "thoroughli": 182, "images_to_prob": 182, "preds_tensor": 182, "el": 182, "fig": 182, "arang": [182, 210, 276], "xtick": 182, "ytick": 182, "set_titl": 182, "1f": 182, "add_figur": 182, "global_step": [182, 258], "scroll": 182, "test_siz": 182, "class_prob": 182, "class_probs_batch": 182, "test_prob": 182, "test_label": 182, "add_pr_curve_tensorboard": 182, "class_index": 182, "tensorboard_truth": 182, "tensorboard_prob": 182, "add_pr_curv": 182, "poke": 182, "tacotron2_pipeline_tutori": 183, "wsi": 184, "tissu": 184, "surgeri": 184, "biopsi": 184, "scanner": 184, "pathologist": 184, "diseas": 184, "cancer": 184, "microscop": 184, "tumor": 184, "growth": [184, 208], "treatment": [184, 207, 208], "patient": 184, "000x100": 184, "25x0": 184, "micron": 184, "pyramid": 184, "magnif": 184, "sketch": 184, "histoencod": 184, "jopo666": 184, "openjpeg": 184, "openslid": 184, "pixman": 184, "qq": 184, "libopenjp2": 184, "libpixman": 184, "echo": 184, "brew": 184, "__future__": [184, 249, 257], "hashandl": 184, "nopython": 184, "shutil": 184, "zipfil": 184, "mpl": 184, "cm": 184, "sklearn": 184, "accuracy_scor": 184, "confusion_matrix": 184, "patch_predictor": 184, "iopatchpredictorconfig": 184, "misc": 184, "download_data": 184, "grab_files_from_dir": 184, "overlay_prediction_mask": 184, "wsicor": 184, "wsiread": 184, "rcparam": 184, "dpi": 184, "facecolor": 184, "on_gpu": 184, "suppress": 184, "overli": 184, "suppress_console_output": 184, "redirect_stderr": 184, "stringio": 184, "abnorm": [184, 241], "global_save_dir": 184, "rmdir": 184, "dir_path": 184, "is_dir": 184, "rmtree": 184, "kather": 184, "100k": 184, "wsi_path": 184, "sample_wsi": 184, "sv": 184, "patches_path": 184, "kather100k": 184, "weights_path": 184, "dc": 184, "warwick": 184, "uk": 184, "tcga": 184, "3l": 184, "aa1b": 184, "01z": 184, "dx1": 184, "8923a151": 184, "a690": 184, "40b7": 184, "9e5a": 184, "fcbedfc2394f": 184, "extractal": 184, "pc": 184, "label_list": 184, "patch_list": 184, "dataset_path": 184, "image_ext": 184, "tif": 184, "label_dict": 184, "glass": 184, "mucosa": 184, "deb": 184, "debri": 184, "tum": 184, "colorect": 184, "adenocarcinoma": 184, "epithelium": 184, "adi": 184, "adipos": 184, "muc": 184, "mucu": 184, "stroma": 184, "lym": 184, "lymphocyt": 184, "dataset_class_path": 184, "patch_list_single_class": 184, "file_typ": 184, "xlabel": 184, "ylabel": 184, "211": [184, 233, 250], "176": 184, "178": 184, "209": 184, "232": [184, 245], "abc": 184, "modelabc": 184, "tia": 184, "toolbox": 184, "readthedoc": 184, "_autosummari": 184, "models_abc": 184, "preproc_func": 184, "predictor": [184, 275], "pretrained_weight": 184, "cnnmodel": 184, "fromarrai": 184, "conf": [184, 235, 276], "df_cm": 184, "215": 184, "993000": 184, "000000": 184, "00000": 184, "988636": 184, "011364": 184, "991304": 184, "008696": 184, "996503": 184, "003497": 184, "004808": 184, "990385": 184, "988764": 184, "011236": 184, "996296": 184, "003704": 184, "004785": 184, "985646": 184, "004310": 184, "99569": 184, "input_resolut": 184, "patch_input_shap": 184, "stride_shap": 184, "wsi_ioconfig": 184, "mpp": 184, "return_prob": 184, "ioconfig": 184, "greatest": [184, 244], "unnecessari": [184, 188, 192, 225, 263, 278], "merge_predict": 184, "wsi_output": 184, "wsi_predict": 184, "overlai": 184, "overlay_patch_predict": 184, "overview_resolut": 184, "overview_unit": 184, "wsi_overview": 184, "slide_thumbnail": 184, "label_color_dict": 184, "get_cmap": 184, "set1": 184, "pred_map": 184, "label_info": 184, "return_ax": 184, "histologi": 184, "pohjonen": 184, "joona": 184, "helsinki": 184, "umap": 184, "semantic_segmentor": 184, "deepfeatureextractor": 184, "iosegmentorconfig": 184, "histoencwrapp": 184, "histoenc": 184, "feat_extract": 184, "extract_featur": 184, "num_block": 184, "avg_pool": 184, "infer_batch": 184, "batch_data": 184, "img_patches_devic": 184, "inference_mod": [184, 215], "create_encod": 184, "prostate_medium": 184, "662": 184, "446": 184, "605": 184, "169": [184, 233], "155": 184, "output_resolut": 184, "patch_output_shap": 184, "auto_generate_mask": 184, "otsu": 184, "num_loader_work": 184, "num_postproc_work": 184, "wsi_featur": 184, "umap_reduc": 184, "n_neighbor": 184, "n_compon": 184, "manhattan": 184, "random_st": 184, "fit_transform": 184, "npy": 184, "feat": 184, "5mpp": 184, "4mpp": 184, "histolog": 184, "horac": 185, "orig": 185, "clariti": 185, "batch_norm": [185, 250], "conv_bn_pattern": 185, "conv_bn_replac": 185, "conv_weight": 185, "out_channel": 185, "in_channel": 185, "kernel_h": 185, "kernel_w": 185, "conv_bia": 185, "bn_mean": 185, "bn_var": 185, "bn_weight": 185, "bn_bia": 185, "num_featur": 185, "simplif": 185, "example_input": [185, 193, 212], "conclus": 185, "william": [186, 188, 273], "devel": 186, "elsewher": 186, "torchinductor": [186, 199, 200, 209, 260, 269], "torchtriton": 186, "cu117": 186, "opt_mod": 186, "mod": [186, 188, 275], "complex_funct": 186, "complex_conjug": 186, "outer_funct": 186, "_orig_": 186, "dashboard": [186, 258], "struggl": 186, "fn1": 186, "fn2": 186, "f2": 186, "disallow": 186, "zhengxu": 188, "angela": [188, 274], "pian": 188, "pawakapan": 188, "synonym": 188, "dynamic_shap": [188, 275], "graph_signatur": 188, "range_constraint": 188, "stronger": [188, 275], "safeti": [188, 275], "cond": 188, "predic": 188, "true_fn": 188, "false_fn": 188, "while_loop": 188, "associative_scan": 188, "adher": [188, 217], "x0": [188, 191, 209, 276], "x1": [188, 191, 209], "s0": 188, "s1": 188, "x2": 188, "x3": 188, "s3": 188, "s5": 188, "proof": 188, "_log": [188, 276], "set_log": [188, 276], "spit": 188, "create_symbol": 188, "int_oo": 188, "2841": 188, "runtime_assert": 188, "ncreate_symbol": 188, "nruntime_assert": 188, "dynamic_shapes_tutori": 188, "_subclass": [188, 275], "fake_impl": 188, "845": 188, "infer_s": [188, 259], "torchdynamo_extended_debug_guard_ad": 188, "_meta_registr": 188, "2127": 188, "meta_mm": 188, "marker": 188, "aliv": 188, "attract": 188, "friction": 188, "believ": [188, 206], "stanc": [188, 273], "constraintviol": 188, "unrel": [188, 273], "univari": 188, "diverg": [188, 205, 207, 245], "tolist": [188, 215], "unbind": [188, 210], "unback": 188, "nomenclatur": 188, "absenc": [188, 228, 243], "u0": 188, "unhint": 188, "is_compil": 188, "invas": 188, "smart": 188, "bypass": [188, 209], "offend": 188, "smarter": 188, "prevail": 188, "prohibit": 188, "_check_is_s": 188, "guard_size_oblivi": 188, "starter": 188, "guardondatadependentsymnod": 188, "_schema": 188, "is_mut": 188, "export_for_train": 188, "run_decomposit": 188, "mutabl": 188, "conv1d": [188, 221, 260], "cond_pred": 188, "tensorrt": [188, 193], "pt2_path": 188, "aoti_compile_and_packag": [188, 274], "compiler_aot_inductor": 188, "aoti_compil": 188, "aoti_load_packag": [188, 274], "cu121": [189, 198], "fbgemm_gpu": 189, "torchmetr": 189, "relationship": 189, "hash": 189, "conjunct": [189, 196, 197, 260], "ctr": 189, "dlrm": [189, 260], "embedding_collect": 189, "embedding_bag_collect": 189, "vast": [189, 208], "collis": [189, 259], "80g": 189, "embeddingcollect": 189, "jaggedtensor": 189, "keyedjaggedtensor": 189, "keyedtensor": 189, "product_t": 189, "user_t": 189, "id_list_featur": 189, "id_score_list_featur": 189, "id_list_feature_offset": 189, "q1": 189, "product_jt": 189, "user_jt": 189, "q2": 189, "reread": 189, "to_dict": 189, "congrat": 189, "pat": 189, "grasp": 189, "scarc": [189, 226], "hbm": 189, "gb": [189, 192], "shardedembeddingbagcollect": 189, "incredibli": 189, "ton": 189, "everytim": 189, "await": 189, "input_dist": 189, "tbe": 189, "output_dist": 189, "twpooledembeddingshard": 189, "kjt": 189, "canon": 189, "dmp": 189, "hyperoptim": 189, "combinedoptim": 189, "keyedoptim": 189, "in_backward_optimizer_filt": 189, "fused_optim": 189, "fused_param": 189, "apply_optimizer_in_backward": 189, "criteo": 189, "1tb": 189, "penn": 191, "fudan": 191, "databas": [191, 269, 270], "pedestrian": 191, "keypoint": 191, "tv_tensor": 191, "boundingbox": 191, "y0": 191, "image_id": 191, "iscrowd": 191, "pycocotool": 191, "gautamchitni": 191, "git": [191, 198], "cocoapi": 191, "cocodataset": 191, "pythonapi": 191, "get_height_and_width": 191, "ci": 191, "upenn": 191, "edu": 191, "jshi": 191, "ped_html": 191, "pennfudanp": 191, "pedmask": 191, "fudanped00001_mask": 191, "fudanped00002_mask": 191, "fudanped00003_mask": 191, "fudanped00004_mask": 191, "pngimag": 191, "fudanped00001": 191, "fudanped00002": 191, "fudanped00003": 191, "fudanped00004": 191, "tvtensor": 191, "zoo": 191, "fasterrcnn": 191, "rpn": 191, "anchor": 191, "featmap_nam": 191, "rcnn": 191, "train2017": 191, "mikayla": [192, 249, 257], "gawarecki": [192, 249, 257], "jag": [192, 210], "famili": [192, 233, 278], "xformer": 192, "torchtun": 192, "rag": [192, 210], "ux": [192, 210, 212], "key_padding_mask": 192, "qk": 192, "premis": 192, "rmsnorm": 192, "sinusoid": 192, "rotari": [192, 194], "alibi": 192, "threefold": 192, "query_padding_mask": 192, "mha": [192, 206, 210], "nestedtensor": [192, 210, 213, 216, 280], "cleanli": [192, 223, 224, 232, 271, 276], "zipf": [192, 210], "pariti": 192, "attn_mask": 192, "padded_tim": 192, "03454": 192, "padded_peak_memori": 192, "nested_tim": 192, "00612": 192, "nested_peak_memori": 192, "padded_bw_tim": 192, "09337": 192, "padded_bw_peak_mem": 192, "nested_bw_tim": 192, "01452": 192, "nested_bw_peak_mem": 192, "144": [192, 233], "out_proj": [192, 210], "000244140625": 192, "packed_proj": 192, "001556396484375": 192, "001953125": 192, "causal": 192, "breviti": [192, 205, 257], "trust": 192, "ragged": 192, "alibi_mod": 192, "block_mask": 192, "create_nested_block_mask": 192, "e_q": [192, 210], "e_tot": [192, 210], "05x": 192, "swish": 192, "08x": [192, 233], "kv": [192, 194], "lucidrain": 192, "navit": 192, "visiontransform": 192, "readm": 193, "prepare_fx": 193, "convert_fx": 193, "default_weight_observ": 193, "get_default_qconfig_map": 193, "minmaxobserv": 193, "backend_config": 193, "backendpatternconfig": 193, "dtypewithconstraint": 193, "observationtyp": 193, "quantize_fx": 193, "fp32_linear": 193, "quant1": 193, "dequant1": 193, "quant2": 193, "dequant2": 193, "fp32_conv_relu": 193, "quint8_with_constraint": 193, "quant_min_lower_bound": 193, "quant_max_upper_bound": 193, "scale_min_lower_bound": 193, "weighted_int8_dtype_config": 193, "input_dtyp": [193, 196], "weight_dtyp": 193, "qint8": 193, "bias_dtyp": 193, "fuse_conv2d_relu": 193, "convrelu2d": 193, "linear_config": 193, "set_pattern": 193, "set_observation_typ": 193, "output_use_different_observer_as_input": 193, "add_dtype_config": 193, "set_root_modul": 193, "set_qat_modul": 193, "set_reference_quantized_modul": 193, "conv_relu_config": 193, "set_fused_modul": 193, "set_fuser_method": 193, "fused_conv_relu_config": 193, "my_backend": 193, "set_backend_pattern_config": 193, "quant_max": 193, "activation_observ": 193, "with_arg": 193, "quant_min": 193, "qconfig_map": 193, "set_object_typ": 193, "use_bn": 193, "quantizedlinear": 193, "012136868201196194": 193, "zero_point": 193, "qscheme": 193, "per_tensor_affin": 193, "quantizedconvrelu2d": 193, "0029353597201406956": 193, "linear_input_scale_0": 193, "linear_input_zero_point_0": 193, "quantize_per_tensor": [193, 235], "dequantize_2": 193, "015307803638279438": 193, "track_running_stat": 193, "dequantize_1": 193, "get_fbgemm_backend_config": 193, "get_qnnpack_backend_config": 193, "get_native_backend_config": 193, "union": 193, "md": 193, "rfc": [193, 206, 209, 214], "0019": 193, "chien": [194, 226, 227], "chin": [194, 226, 227], "llama3": 194, "freq_ci": 194, "context_parallel": 194, "buffer_seq_dim": 194, "miscalcul": 194, "set_rotate_method": 194, "sdpbackend": 194, "sdpa_exampl": 194, "nhead": [194, 210], "qkv_len": 194, "8192": [194, 245], "flash_attent": 194, "cudnn_attent": 194, "qkv": 194, "cp_sdpa_exampl": 194, "_attent": 194, "context_parallel_unshard": 194, "context_parallel_sdpa_exampl": 194, "device_typ": [194, 268], "mesh_shap": 194, "mesh_dim_nam": [194, 229], "cp_qkv": 194, "cp_out": 194, "atol": [194, 215], "alltoal": [194, 260], "junji": 196, "impedi": 196, "starvat": 196, "deadlock": 196, "indefinit": 196, "diagnost": 196, "flight_record": 196, "torch_nccl_trace_buffer_s": 196, "torch_nccl_dump_on_timeout": 196, "torch_nccl_debug_info_temp_fil": 196, "nccl_trace_rank_": 196, "torch_nccl_trace_cpp_stack": 196, "torch_symbolize_mod": 196, "torch_nccl_enable_tim": 196, "dladdr": 196, "addr2lin": 196, "debuginfowrit": 196, "registerwrit": 196, "_distributed_c10d": [196, 276], "_dump_nccl_trac": 196, "includecollect": 196, "includestacktrac": 196, "onlyact": 196, "pg_config": 196, "default_pg": 196, "pg_statu": 196, "last_enqueued_collect": 196, "last_started_collect": 196, "last_completed_collect": 196, "test_short_pickl": 196, "test_c10d_nccl": 196, "3647": 196, "spawn_main": 196, "record_id": 196, "pg_id": 196, "collective_seq_id": 196, "p2p_seq_id": 196, "op_id": 196, "profiling_nam": 196, "time_created_n": 196, "1724779239936775119": 196, "input_s": 196, "time_discovered_started_n": 196, "time_discovered_completed_n": 196, "1724779239975811724": 196, "retir": 196, "timeout_m": 196, "600000": 196, "is_p2p": 196, "fr_trace": 196, "use_distribut": 196, "torchfrtrac": 196, "culprit": 196, "recod": 196, "trace_": 196, "trace_0": 196, "trace_1": 196, "bounc": 197, "gd": 197, "cufil": 197, "4kb": 197, "storage_align": 197, "gdsfile": 197, "skip_data": 197, "faketensormod": 197, "gds_register_buff": 197, "cufilebufregist": 197, "save_storag": 197, "cufilewrit": 197, "load_storag": 197, "cufileread": 197, "gpu_direct_storag": [197, 216, 280], "hdcharl": 198, "pg509": 198, "330": 198, "myenv": 198, "facebookresearch": 198, "vit_h": 198, "fbaipublicfil": 198, "segment_anyth": 198, "sam_vit_h_4b8939": 198, "sam_checkpoint_base_path": 198, "image_encod": 198, "instant": 198, "protect": 198, "bf16": [198, 209, 221, 233], "43m": 198, "17gb": 198, "7x": 198, "186": [198, 233], "16m": 198, "95m": 198, "24gb": 198, "autotun": [198, 213, 260, 269, 270, 272], "int4": 198, "int8dynamicactivationint8weightconfig": 198, "int8weightonlyconfig": 198, "int4weightonlyconfig": 198, "apply_dynamic_qu": 198, "apply_weight_only_int8_qu": 198, "04m": 198, "58gb": 198, "int32": 198, "force_fuse_int_mm_with_mul": 198, "78m": 198, "37gb": 198, "unquant": 198, "epilogu": [198, 209], "enlarg": 198, "39gb": 198, "10x": [198, 221], "appl": 198, "677": 198, "28m": 198, "729": 198, "65m": 198, "gpu_quantization_torchao_tutori": [198, 216, 280], "chunyuan": [199, 209], "bao": [199, 274], "cpp_wrapper": 199, "opt_fn": 199, "assert_size_strid": [199, 276], "empty_strid": [199, 220, 250, 276], "cpp_fused_add_lift_fresh_0": 199, "c_void_p": [199, 276], "constant0": 199, "inductor_entry_cpp": 199, "19l": 199, "cppwrappercodecach": 199, "cpp_wrapper_src": 199, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 199, "_wrap_func": 199, "args_tensor": 199, "constants_tensor": 199, "_deviceguard": [199, 276], "lift_fresh": 199, "stream0": [199, 276], "get_cuda_stream": 199, "triton_poi_fused_add_lift_fresh_0": 199, "run_intermediate_hook": [199, 276], "cudaguard": 199, "device_guard": 199, "loadkernel": 199, "torchinductor_us": 199, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 199, "cubin": [199, 270, 274], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 199, "cudeviceptr": 199, "var_0": 199, "reinterpret_cast": 199, "var_1": 199, "var_2": 199, "var_3": 199, "kernel_args_var_0": 199, "cudastream_t": 199, "getcurrentcudastream": 199, "launchkernel": 199, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 199, "zhaoqiong": 200, "zheng": 200, "xu": 200, "han": 200, "msvc": 200, "desktop": 200, "checkmark": 200, "cmd": [200, 276], "ex": [200, 215, 241], "vc": 200, "auxiliari": [200, 221], "vcvars64": 200, "opt_foo1": 200, "9074e": 200, "3994e": 200, "3894e": 200, "2630e": 200, "3060e": 200, "1833e": 200, "4016e": 200, "1905e": 200, "0637e": 200, "3648e": 200, "3728e": 200, "2863e": 200, "6888e": 200, "5442e": 200, "6790e": 200, "2025e": 200, "2647e": 200, "2684e": 200, "2483e": 200, "2845e": 200, "7747e": 200, "2028e": 200, "1431e": 200, "7196e": 200, "5304e": 200, "1945e": 200, "6654e": 200, "7376e": 200, "3644e": 200, "3600e": 200, "0157e": 200, "7200e": 200, "0146e": 200, "8175e": 200, "4057e": 200, "8119e": 200, "2853e": 200, "2773e": 200, "5082e": 200, "4615e": 200, "4140e": 200, "2130e": 200, "0762e": 200, "3914e": 200, "1122e": 200, "6895e": 200, "8852e": 200, "3310e": 200, "4101e": 200, "8318e": 200, "2355e": 200, "9290e": 200, "3707e": 200, "3754e": 200, "3768e": 200, "8970e": 200, "1171e": 200, "9944e": 200, "2553e": 200, "3394e": 200, "3428e": 200, "8400e": 200, "1756e": 200, "0654e": 200, "7973e": 200, "4019e": 200, "1886e": 200, "9194e": 200, "3632e": 200, "1811e": 200, "1615e": 200, "6622e": 200, "2089e": 200, "2011e": 200, "0659e": 200, "0892e": 200, "1932e": 200, "3888e": 200, "3898e": 200, "3218e": 200, "4139e": 200, "4000e": 200, "1192e": 200, "0175e": 200, "6432e": 200, "0498e": 200, "4115e": 200, "3212e": 200, "0964e": 200, "0127e": 200, "7244e": 200, "2799e": 200, "3595e": 200, "0907e": 200, "7191e": 200, "4062e": 200, "3672e": 200, "8502e": 200, "5216e": 200, "6046e": 200, "icx": 200, "win64": 200, "inductor_window": 201, "mobile_interpret": 204, "1369": 205, "weed": 205, "state_sum": 205, "addcmul_": 205, "addcdiv_": 205, "clr": 205, "_make_spars": 205, "grad_indic": 205, "sparse_coo_tensor": [205, 208], "coalesc": [205, 244], "_indic": 205, "grad_valu": 205, "_valu": 205, "sparse_mask": [205, 208], "std_valu": 205, "sqrt_": 205, "state_sum2": 205, "masked_grad": 205, "get_data": [205, 207], "std2": 205, "masked_tensor": [205, 207, 208], "to_spars": [205, 208], "param2": [205, 217], "glanc": [205, 257], "dodg": 205, "make_spars": 205, "brittl": 205, "argu": 205, "densif": 205, "csc": [205, 208], "bsr": [205, 208], "bsc": 205, "inconveni": 205, "conflat": 205, "disentangl": 205, "purposefulli": 205, "relianc": 205, "unreli": [205, 207], "maskedarrai": [205, 213], "maskedtensor_adagrad": [205, 216, 280], "maskedtensor_overview": [206, 207, 208, 216, 280], "Their": [206, 208], "unspecifi": [206, 207, 208, 213], "invalid": [206, 207, 208, 245, 260], "intersect": 206, "logical_or": 206, "to_tensor": [206, 207], "mt0": 206, "get_mask": [206, 207], "mt1": 206, "revisit": 206, "ma": 206, "masked_arrai": 206, "mask0": 206, "mask1": 206, "necessit": 206, "maskedtensor_advanced_semant": [206, 216, 280], "as_masked_tensor": 207, "as_tensor": 207, "afterthought": 207, "born": 207, "recur": 207, "inabl": 207, "10729": 207, "troubl": 207, "52248": 207, "frustrat": 207, "4132": 207, "67180": 207, "longstand": 207, "unsaf": 207, "61474": 207, "nanmax": 207, "nanmin": 207, "lend": 207, "substructur": 208, "sparse_coo": 208, "sparse_csr": 208, "ndim": 208, "nse": 208, "sparse_tensor_data": 208, "sparse_tensor_mask": 208, "dense_masked_tensor": 208, "to_sparse_coo": 208, "to_sparse_csr": 208, "nuanc": 208, "crow_indic": 208, "col_indic": 208, "nnz": 208, "to_dens": 208, "is_spars": 208, "is_sparse_coo": 208, "is_sparse_csr": 208, "mt": 208, "mt2": 208, "surfac": 208, "synergi": 208, "invest": 208, "maskedtensor_spars": [208, 216, 280], "lesli": 209, "fang": 209, "onednn": [209, 221, 233, 234, 241], "torchinductor_max_autotune_gemm_backend": 209, "upfront": [209, 249], "torchinductor_freez": 209, "log_autotuning_result": 209, "amp_en": 209, "outperform": 209, "linear_unari": 209, "64x16": 209, "32x16": 209, "cpp_packed_gemm_0": 209, "2142": 209, "_linear_pointwis": 209, "2441": 209, "mkldnn": [209, 221, 233], "anymor": [209, 258], "cpp_fused__to_copy_relu_1": 209, "async_compil": [209, 276], "cpp_pybind": 209, "kernel_micro_gemm_amx_kernel_32_2": 209, "amxstat": 209, "amx_stat": 209, "lda": 209, "ldb": 209, "ldc": 209, "uint8_t": 209, "tilecfg_row": 209, "kernel_micro_gemm": 209, "constexpr": [209, 276], "num_thread": [209, 245], "64l": 209, "omp": [209, 278], "tid": 209, "omp_get_thread_num": 209, "mc_block_id": 209, "num_mc_blocks_per_thread": 209, "n_block_start": 209, "n_block_end": 209, "nc_block": 209, "kc": 209, "k_block_start": 209, "k_block_end": 209, "kc_block": 209, "nci": 209, "nc_block_end": 209, "m_end": 209, "m_start": 209, "16l": 209, "div_floor_integ": 209, "n_end": 209, "n_start": 209, "loadu": 209, "local_acc_buf": 209, "nr": 209, "tmp4": [209, 276], "tmp5": 209, "tmp6": 209, "tmp7": 209, "tmp8": 209, "32l": 209, "invalu": 210, "nt": 210, "nested_tensor": 210, "padded_out_tensor": 210, "to_padded_tensor": 210, "poss": 210, "is_nest": 210, "irregularli": 210, "sep": 210, "legal": 210, "nt_reshap": 210, "nt_transpos": 210, "nt_mm": 210, "nt3": 210, "nt4": 210, "nt5": 210, "embrac": 210, "padded_sent": 210, "nested_sent": 210, "semnat": 210, "padded_sentences_for_softmax": 210, "e_k": 210, "e_v": 210, "dropout_p": 210, "query_proj": 210, "key_proj": 210, "value_proj": 210, "e_out": 210, "e_head": 210, "l_t": 210, "l_": 210, "attn_output": 210, "todo": 210, "unflatten": 210, "law": 210, "zipf_sentence_length": 210, "unigram": 210, "wikitext": 210, "858": 210, "sentence_length": 210, "ibatch": 210, "gen_batch": 210, "jagged_to_pad": 210, "jt": 210, "padding_v": 210, "padded_queri": 210, "padded_kei": 210, "padded_valu": 210, "default_tim": [210, 251], "output_nest": 210, "time_nest": 210, "output_pad": 210, "time_pad": 210, "entry_length": 210, "compiled_mha": 210, "compiled_output_nest": 210, "compiled_time_nest": 210, "compiled_output_pad": 210, "compiled_time_pad": 210, "daniil": 212, "lyakhov": 212, "aamir": 212, "nazir": 212, "suslov": 212, "yamini": 212, "nimmagadda": 212, "kozlov": 212, "openvinoquant": 212, "quantize_pt2": 212, "prepare_pt2": 212, "convert_pt2": 212, "traced_b": 212, "disable_patch": 212, "exported_model": 212, "asymmetr": 212, "prelu": 212, "quantizationpreset": 212, "model_typ": 212, "modeltyp": 212, "ignored_scop": 212, "layer_1": 212, "layer_2": 212, "layer_3": 212, "ignoredscop": 212, "regex": 212, "layer_": 212, "subgraph": 212, "target_devic": 212, "cpu_spr": 212, "targetdevic": 212, "fold": 212, "prepared_model": 212, "fold_quant": 212, "optimized_model": 212, "smoothquant": 212, "biascorrect": 212, "calibration_load": 212, "transform_fn": 212, "data_item": 212, "calibration_dataset": 212, "smooth_quant": 212, "fast_bias_correct": 212, "pypi": [213, 235], "optimizi": 213, "nnapi": 213, "autovector": [213, 219], "maskedtensor": [213, 216, 280], "coo": 213, "csr": 213, "flight": 213, "flightrecord": 213, "autoload": 213, "gpudirect": [213, 216, 280], "yuanhao": 214, "ji": 214, "effortless": 214, "gaudi": 214, "hpu": 214, "huawei": 214, "torch_device_backend_autoload": 214, "torch_foo": 214, "_autoload": 214, "entry_point": 214, "habana_framework": 214, "__autoload": 214, "device_backend": 214, "is_load": 214, "entrypoint": 214, "_force_cutlass": 215, "2560": 215, "10240": 215, "dense_output": 215, "dense_t": 215, "blocked_autorang": [215, 223, 245], "median": [215, 245, 259], "1e3": 215, "sparse_output": 215, "sparse_t": 215, "80gb": 215, "870m": 215, "630m": 215, "382x": 215, "weightnormsparsifi": 215, "preprocess_validation_funct": 215, "384": [215, 275], "only_second": 215, "return_overflowing_token": 215, "return_offsets_map": 215, "sample_map": 215, "overflow_to_sample_map": 215, "example_id": 215, "sequence_id": 215, "offset_map": 215, "preprocess_train_funct": 215, "start_posit": 215, "end_posit": 215, "start_char": 215, "answer_start": 215, "end_char": 215, "context_start": 215, "context_end": 215, "compute_metr": 215, "start_logit": 215, "end_logit": 215, "n_best": 215, "max_answer_length": 215, "example_to_featur": 215, "predicted_answ": 215, "feature_index": 215, "start_index": 215, "argsort": 215, "end_index": 215, "logit_scor": 215, "best_answ": 215, "prediction_text": 215, "theoretical_answ": 215, "measure_execution_tim": 215, "dataset_for_model": 215, "remove_column": 215, "set_format": 215, "batch_size_to_time_sec": 215, "column_nam": 215, "p50": 215, "automodelforquestionansw": 215, "squad_dataset": 215, "tokenized_squad_dataset": 215, "data_col": 215, "datacollatorwithpad": 215, "hyperparam": 215, "training_arg": 215, "trainingargu": 215, "num_train_epoch": 215, "lr_scheduler_typ": 215, "per_device_train_batch_s": 215, "per_device_eval_batch_s": 215, "eval_dataset": 215, "fp16_baselin": 215, "fp16_time": 215, "cuda_fp16": 215, "exact_match": 215, "53358561967833": 215, "9280493093186": 215, "927572380751371": 215, "607915310189128": 215, "18846387788653": 215, "91255673766136": 215, "sparsity_level": 215, "elemen": 215, "sparse_block_shap": 215, "zeros_per_block": 215, "sparse_config": 215, "tensor_fqn": 215, "fqn": [215, 226, 227], "named_modul": [215, 251], "paramter": 215, "bertoutput": 215, "parametrizedlinear": 215, "fakespars": 215, "elementwise_affin": 215, "59602649006622": 215, "51610004515979": 215, "set_printopt": [215, 245], "edgeitem": 215, "0237": 215, "0130": 215, "0462": 215, "0272": 215, "0436": 215, "0492": 215, "0844": 215, "0340": 215, "0302": 215, "0350": 215, "0303": 215, "0175": 215, "0529": 215, "0327": 215, "0213": 215, "0258": 215, "0239": 215, "0380": 215, "0562": 215, "0432": 215, "0598": 215, "0262": 215, "0227": 215, "0244": 215, "0921": 215, "0784": 215, "0761": 215, "0225": 215, "0395": 215, "0684": 215, "0344": 215, "metrics_spars": 215, "sparse_perf": 215, "43897824030275": 215, "48718950090766": 215, "621004460379481": 215, "368514601141214": 215, "702805917710066": 215, "244": [215, 241], "19364519417286": 215, "87x": 215, "torchao": [216, 280], "vmap_recip": [216, 219, 280], "uniform": [217, 278], "orthogonal_": 217, "skip_init": 217, "param1": 217, "kaiming_uniform_": 217, "register_buff": 217, "some_buff": 217, "intial": 217, "42368": 219, "unsuccessfulli": 219, "rummag": 219, "shenanigin": 219, "8304": 219, "23475": 219, "performantli": 219, "7786": 219, "batch_of_sampl": 219, "grad_sampl": 219, "ivan": 220, "kobzarev": 220, "mac": 220, "use_vulkan": 220, "vulkan_wrapp": 220, "use_vulkan_wrapp": 220, "libvulkan": 220, "vulkansdk": 220, "lunarg": 220, "vulkan_sdk": 220, "vulkan_sdk_root": 220, "install_vulkan": 220, "pytorch_root": 220, "use_vulkan_shaderc_runtim": 220, "macosx_deployment_target": 220, "41237a4": 220, "android_abi": 220, "v8a": 220, "build_android": 220, "pytorch_android": 220, "aar": 220, "build_pytorch_android": 220, "script_model": 220, "mobilenet2": 220, "32bit": 220, "mobile_optim": 220, "optimize_for_mobil": 220, "script_model_vulkan": 220, "optimization_blocklist": 220, "mobileoptimizertyp": 220, "vulkan_automatic_gpu_transf": 220, "is_vulkan_avail": 220, "tensor_vulkan": 220, "tensor_output_vulkan": 220, "tensor_output": 220, "_adaptive_avg_pool2d": 220, "_cat": 220, "clamp": 220, "memory_format": [220, 221, 234], "hardtanh_": 220, "relu_": 220, "transpose_": 220, "upsample_nearest2d": 220, "floatbuff": 220, "allocatefloatbuff": 220, "fromblob": 220, "mmodul": 220, "test_app": 220, "testapp": 220, "mainact": 220, "l133": 220, "apploc": 220, "asset": 220, "gradl": 220, "installmbvulkanlocalbasedebug": 220, "mbq": 220, "swiftshad": 220, "googlesourc": 220, "tmul": 221, "gen": 221, "processor": [221, 234, 260, 264, 278], "avx": [221, 234], "vnni": [221, 234], "024": 221, "channels_last": [221, 234], "conv3d": [221, 260], "conv_transpose1d": 221, "conv_transpose2d": 221, "conv_transpose3d": 221, "baddbmm": 221, "addbmm": 221, "onednn_verbos": 221, "verbose_on": 221, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 221, "openmp": [221, 241], "nthr": 221, "isa": 221, "prim_templ": 221, "prop_kind": 221, "memory_descriptor": 221, "problem_desc": 221, "exec_tim": 221, "exec": [221, 276], "reorder": [221, 233, 241, 260], "undef": 221, "src_f32": 221, "f0": 221, "dst_f32": 221, "scratchpad": 221, "2561": 221, "avx512_core_amx_bf16": 221, "forward_train": 221, "src_bf16": 221, "acdb": 221, "wei_bf16": 221, "abcd16b16a2b": 221, "bia_f32": 221, "dst_bf16": 221, "alg": 221, "convolution_direct": 221, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 221, "628906": 221, "brg": 221, "avx512_core_amx_int8": 221, "src_s8": 221, "wei_s8": 221, "ba16a64b4a": 221, "dst_s8": 221, "1x30522": 221, "30522x768": 221, "1x768": 221, "66382": 221, "lazo": [223, 224, 232, 271, 276], "get_device_cap": [223, 276], "benchmark_torch_function_in_microsecond": 223, "eager_runtim": 223, "compiled_runtim": 223, "747": 223, "2437149845064u": 223, "392": 223, "07384741178u": 223, "linearlr": 224, "compiling_optimizer_lr_schedul": [224, 267, 280], "set_device_map": 225, "worker0": 225, "worker1": 225, "payload": [225, 257], "infiniband": 225, "cma": 225, "comm_mod": [225, 228], "pend": [225, 258], "current_stream": 225, "tensorpiperpcbackendopt": 225, "num_worker_thread": 225, "rpc_backend_opt": 225, "34x": 225, "3145179748535156": 225, "06867480278015137": 225, "luca": [226, 227], "pasqualin": [226, 227], "iri": [226, 227, 229], "rodrigo": [226, 227], "kumpera": [226, 227], "async_sav": 226, "checkpoint_size_per_rank": 226, "number_of_rank": 226, "pageabl": 226, "get_state_dict": [226, 227], "set_state_dict": [226, 227], "appstat": [226, 227], "protocol": [226, 227], "load_stat_dict": [226, 227], "sharded_state_dict": [226, 227], "optim_state_dict": [226, 227], "run_fsdp_checkpoint_save_exampl": [226, 227], "checkpoint_futur": 226, "checkpoint_id": [226, 227], "_step": 226, "attack": 226, "filesystemwrit": 226, "storagewrit": 226, "cached_state_dict": 226, "cache_staged_state_dict": 226, "storage_writ": 226, "adddition": 227, "run_fsdp_checkpoint_load_exampl": 227, "run_checkpoint_load_exampl": 227, "format_util": 227, "torch_to_dcp": 227, "dcp_to_torch": 227, "dcp_to_torch_sav": 227, "torch_save_to_dcp": 227, "torch_save_checkpoint_dir": 227, "torch_save_checkpoint": 227, "_new": 227, "anshul": 228, "sinha": 228, "distributedtensor": 228, "interoper": 228, "mlpmodul": 228, "generate_comm_debug_tracing_t": 228, "noise_level": 228, "log_comm_debug_tracing_table_to_fil": 228, "file_nam": [228, 275], "transformer_operation_log": 228, "generate_json_dump": 228, "c10d_function": 228, "comm_mode_features_exampl": 228, "effortlessli": 229, "homogen": 229, "num_node_devic": 229, "shard_rank_list": 229, "shard_group": 229, "current_shard_group": 229, "current_replicate_group": 229, "shard_factor": 229, "replicate_group_rank": 229, "replicate_group": 229, "2d_setup": 229, "thru": 229, "get_group": 229, "mesh_dim": 229, "2d_setup_with_device_mesh": 229, "meshshap": 229, "mesh_3d": 229, "hsdp_mesh": 229, "tp_group": 229, "_foreach": 232, "horizton": 232, "sunita": 233, "nadamp": 233, "graviton3": 233, "sve": 233, "simd": 233, "graviton2": 233, "bla": 233, "acl": 233, "c7g": 233, "bfloa16": 233, "r7g": 233, "m7g": 233, "4vcpu": 233, "profileract": [233, 250], "myneuralnetwork": 233, "linear_relu_stack": 233, "11008": 233, "pred_probab": 233, "set_grad_en": 233, "mymodel_infer": 233, "self_cpu_time_tot": [233, 250], "813": 233, "255m": 233, "177": 233, "032m": 233, "160u": 233, "162": [233, 245], "054m": 233, "540": 233, "180u": 233, "738m": 233, "201": 233, "955m": 233, "985": 233, "282m": 233, "421m": 233, "043m": 233, "810u": 233, "356m": 233, "179": 233, "388m": 233, "896": 233, "940u": 233, "mmla": 233, "torchbench": 233, "dnnl_default_fpmath_mod": 233, "052": 233, "507m": 233, "167": [233, 278], "653m": 233, "838": 233, "265u": 233, "107": 233, "593m": 233, "643u": 233, "167m": 233, "262": [233, 276], "911m": 233, "060": 233, "533m": 233, "414m": 233, "892m": 233, "307u": 233, "281m": 233, "934m": 233, "849": [233, 245], "670u": 233, "fastmath": 233, "821": 233, "914": 233, "713m": 233, "244m": 233, "711": 233, "220u": 233, "322m": 233, "307": 233, "740u": 233, "094": 233, "495m": 233, "921": 233, "736m": 233, "131m": 233, "441m": 233, "803u": 233, "942m": 233, "186m": 233, "720": 233, "930u": 233, "848": 233, "944": 233, "148m": 233, "309m": 233, "706": 233, "545u": 233, "916m": 233, "720u": 233, "431m": 233, "471m": 233, "951": 233, "170m": 233, "027m": 233, "243m": 233, "143u": 233, "928m": 233, "143": [233, 278], "237m": 233, "185u": 233, "47x": 233, "noteworthi": 233, "till": 233, "torch_mkldnn_matmul_min_dim": 233, "958": 233, "612m": 233, "124m": 233, "620u": 233, "951m": 233, "170u": 233, "423m": 233, "034": 233, "691m": 233, "988": 233, "628m": 233, "520m": 233, "945m": 233, "817u": 233, "382m": 233, "136": 233, "910u": 233, "781": 233, "604m": 233, "295": 233, "437m": 233, "477m": 233, "516m": 233, "558": 233, "387u": 233, "708m": 233, "499m": 233, "788": 233, "627m": 233, "982m": 233, "385m": 233, "617u": 233, "932m": 233, "297": 233, "369m": 233, "487m": 233, "038m": 233, "060m": 233, "300u": 233, "013m": 233, "106": 233, "710u": 233, "521m": 233, "750m": 233, "216": 233, "475m": 233, "033m": 233, "110u": 233, "285m": 233, "345m": 233, "725u": 233, "margin": 233, "thp_mem_alloc_en": 233, "321": 233, "069m": 233, "568m": 233, "613m": 233, "602m": 233, "682": 233, "007u": 233, "777m": 233, "697": 233, "082m": 233, "329": 233, "097m": 233, "547m": 233, "325": 233, "115m": 233, "626m": 233, "avx512": 234, "amx": [234, 235], "xmx": 234, "claus": [234, 235, 279], "nhwc": 234, "cooper": 234, "roialign": 234, "intel_extension_for_pytorch": [234, 268], "ipex": [234, 264, 268], "bertmodel": 234, "seq_length": 234, "check_trac": 234, "cache_en": 234, "argc": 234, "cerr": 234, "push_back": 234, "memoryformat": 234, "channelslast": 234, "intel_ext_pt_cpu": 234, "libpytorch_path": 234, "ldd": 234, "workspac": [234, 276], "cmake_have_libc_pthread": 234, "0x00007f3cf98e0000": 234, "libc10": 234, "0x00007f3cf985a000": 234, "libintel": 234, "ext": 234, "0x00007f3cf70fc000": 234, "libtorch_cpu": [234, 259], "0x00007f3ce16ac000": 234, "libdnnl_graph": 234, "0x00007f3cde954000": 234, "mitig": [235, 260], "conv2_drop": 235, "fc1_drop": 235, "lenet_mnist_model": 235, "pytorch_fx": 235, "accuracy_criterion": 235, "neural_compressor": 235, "calib_dataload": 235, "eval_dataload": 235, "q_model": 235, "top1metr": 235, "quant_aware_train": 235, "training_func": 235, "q_func": 235, "dummy_dataset": 235, "dummydataset": 235, "2021": 235, "linearrelu": 235, "best_configur": 235, "best_model_weight": 235, "int8_model": 235, "gui": [241, 264], "emit_itt": 241, "8080": 241, "path_of_launch": 241, "iteration_n": 241, "range_push": 241, "range_pop": 241, "oneapi": 241, "brown": 241, "percerntag": 241, "jitter": [241, 245], "enrich": 241, "queue": [241, 260], "ittsampl": 241, "292820": 241, "unmark": 241, "iteration_": 241, "basefold": 241, "bash_sourc": 241, "gradcam": 243, "283": 243, "occlus": 243, "deconvolut": 243, "guidedbackprop": 243, "deeplift": 243, "gradientshap": 243, "forward_func": 243, "pictori": 243, "textual": 243, "distractor": 243, "visualize_text": 243, "imdb_torchtext_interpret": 243, "gilbert": 243, "tanner": 243, "gilberttann": 243, "captum_recip": [243, 248, 256, 280], "carilli": 244, "ordinarili": 244, "ture": 244, "kepler": 244, "maxwel": 244, "pascal": 244, "modest": 244, "in_siz": 244, "out_siz": 244, "num_lay": 244, "underflow": 244, "scaler": 244, "unscal": 244, "unscale_": 244, "rough": 244, "binary_cross_entropy_with_logit": 244, "suspect": 244, "docstr": 244, "subregion": 244, "backtrac": 244, "torch_show_cpp_stacktrac": 244, "amp_recip": [244, 248, 256, 280], "tediou": 245, "mistak": 245, "mul_sum": 245, "0x7fb10400d0f0": 245, "batched_dot_mul_sum": 245, "379": 245, "0x7fb103d67048": 245, "batched_dot_bmm": 245, "sub_label": 245, "0x7fb103d54080": 245, "118": 245, "0x7fb16935d2e8": 245, "2775": 245, "0x7fb10400d080": 245, "181": 245, "min_run_tim": [245, 259], "274": 245, "748": 245, "432": [245, 250], "22657": 245, "11899": 245, "609": 245, "23098": 245, "27246": 245, "267073": 245, "118823": 245, "189": 245, "2782": 245, "7471": 245, "11874": 245, "173": 245, "7264": 245, "27824": 245, "100060": 245, "121499": 245, "188": 245, "2773": 245, "6111": 245, "12833": 245, "6295": 245, "27062": 245, "71804": 245, "120365": 245, "103": 245, "2804": 245, "6764": 245, "11871": 245, "6640": 245, "27592": 245, "73003": 245, "120083": 245, "callgrindstat": [245, 259], "trip": [245, 259], "batched_dot": 245, "stark": 245, "fuzzer": 245, "10000000": 245, "k0": 245, "k1": 245, "discontigu": 245, "725": 245, "383": 245, "1468": 245, "5039": 245, "2140": 245, "1296": 245, "1598": 245, "310": 245, "519": 245, "763": 245, "1082": 245, "473": 245, "16384": 245, "12642115": 245, "4800": 245, "20400": 245, "110000": 245, "400000": 245, "493": 245, "1100": [245, 259], "2440": 245, "870": 245, "2030": 245, "495": 245, "23600": 245, "62374": 245, "90000": 245, "240372": 245, "40156": 245, "2670": 245, "opac": 245, "complementari": 245, "insensit": 245, "environment": 245, "cpp_lib": 245, "cpp_sourc": 245, "batched_dot_src": 245, "extra_cflag": 245, "extra_include_path": 245, "getenv": 245, "batched_dot_mul_sum_v0": 245, "batched_dot_mul_sum_v1": 245, "module_import_str": 245, "67631": 245, "importlib": 245, "spec_from_file_loc": 245, "repr": 245, "module_from_spec": 245, "exec_modul": 245, "textwrap": 245, "pretty_print": 245, "t_baselin": 245, "stats_v0": 245, "collect_callgrind": 245, "stats_v1": 245, "as_standard": [245, 259], "denois": 245, "cancel": [245, 260], "ing": 245, "wrap_pybind_function_impl_": 245, "linewidth": 245, "valgrind_wrapp": [245, 259], "timer_interfac": [245, 259], "0x7fb0f06e7630": 245, "2392671": 245, "4367": 245, "rel_with_deb_info": [245, 259], "0x7fb10400d208": 245, "2378978": 245, "functioncount": [245, 259], "0x7fb1000ab358": 245, "0x000000000020d9e0": 245, "0x000000000020db10": 245, "integer_sequ": 245, "0ul": 245, "1ul": 245, "5200": 245, "undefinedtensorimpl": 245, "reset_": 245, "5935": 245, "0x000000000022c0e0": 245, "13693": 245, "impos": [246, 257], "changing_default_devic": [246, 256, 280], "subsidiari": [247, 261, 262], "neighbor": 247, "sharp": 247, "blurri": 247, "defining_a_neural_network": [247, 248, 256, 280], "what_is_state_dict": [248, 256, 262, 280], "saving_and_loading_models_for_infer": 248, "custom_dataset_transforms_load": 248, "dynamic_quant": 248, "warmstarting_model_using_parameters_from_a_different_model": [248, 256, 261, 280], "zeroing_out_gradi": [248, 256, 263, 280], "mobile_perf": 248, "regional_compil": [248, 265, 267, 280], "syntaxerror": [248, 256, 280], "undesir": 249, "unload": 249, "somemodul": 249, "overwritten": [249, 263, 278], "param_in_model": 249, "param_in_state_dict": 249, "set_swap_module_params_on_convers": [249, 257], "swap_tensor": [249, 256, 280], "module_load_state_dict_tip": [249, 256, 280], "shivam": 250, "raikundalia": 250, "model_infer": 250, "_fork": 250, "509m": 250, "503m": 250, "931m": 250, "597m": 250, "700m": 250, "585m": 250, "_convolut": 250, "450m": 250, "mkldnn_convolut": 250, "838m": 250, "114m": 250, "556m": 250, "693m": 250, "734": 250, "_batch_norm_impl_index": 250, "482m": 250, "724": 250, "100u": 250, "native_batch_norm": 250, "229m": 250, "109m": 250, "705": 250, "450u": 250, "332": 250, "631m": 250, "286u": 250, "668m": 250, "292m": 250, "988u": 250, "549m": 250, "dnn": 250, "group_by_input_shap": 250, "008m": 250, "956m": 250, "909m": 250, "834m": 250, "332m": 250, "303m": 250, "273m": 250, "233m": 250, "751m": 250, "occurr": 250, "666m": 250, "484m": 250, "_convolution_nogroup": 250, "thnn_conv2d": 250, "thnn_conv2d_forward": 250, "im2col_kernel": 250, "844m": 250, "sgemm_32x32x32_nn": 250, "206m": 250, "sgemm_32x32x32_nn_vec": 250, "093m": 250, "015m": 250, "567m": 250, "871m": 250, "560u": 250, "convolution_overrid": 250, "gen_conv": 250, "216u": 250, "640u": 250, "632u": 250, "conv_reord": 250, "880u": 250, "448u": 250, "712": 250, "486m": 250, "max_pool2d_with_indic": 250, "kb": 250, "572": 250, "resize_": 250, "masked_select": 250, "112": [250, 275, 276, 278], "122": 250, "064m": 250, "viewer": 250, "439": 250, "_conv_forward": 250, "1051": 250, "_call_impl": 250, "016m": 250, "659m": 250, "skip_first": 250, "step_num": 250, "profiler_recip": [250, 256, 280], "convolutionbackward0": 251, "00045206799995867186": 251, "t_larg": 251, "65535": 251, "00010236100001748127": 251, "fw_hook": 251, "register_forward_hook": 251, "ceil_mod": 251, "014": [251, 256, 280], "reasoning_about_shap": [251, 256, 280], "tensorboard_with_pytorch": [256, 258, 280], "timer_quick_start": [256, 259, 280], "tuning_guid": [256, 260, 280], "hereaft": 257, "__class__": 257, "__slots__": 257, "pertin": 257, "__torch_dispatch__": [257, 275], "new_param": 257, "myquantizedlinearweight": 257, "elem": 257, "__setattr__": 257, "module_load": 257, "__torch_function__": 257, "param_kei": 257, "scalar_valu": 258, "walltim": 258, "tfevent": 258, "OR": 258, "0x7f1929a38ed0": 259, "iqr": 259, "424": 259, "0x7f192b019ed0": 259, "unsurprisingli": 259, "0x7f1929a35850": 259, "563600": 259, "tensormethod": 259, "ab_ref": 259, "0x7f192a6dfd90": 259, "47264": 259, "_int_fre": 259, "25963": 259, "_int_malloc": 259, "19900": 259, "tensorit": 259, "tensoriteratorconfig": 259, "__tls_get_addr": 259, "13500": 259, "malloc": [259, 260, 278], "11300": 259, "smallvector": 259, "10345": 259, "_int_memalign": 259, "9200": 259, "iteratorbas": 259, "get_strid": 259, "173472": 259, "0x7f192995d750": 259, "118200": 259, "tensoriter": 259, "65000": 259, "20900": 259, "15900": 259, "15100": 259, "cpualloc": 259, "12500": 259, "352327": 259, "a0": 259, "b0": 259, "a1": 259, "a127": 259, "pickleabl": 259, "broadcasting_stat": 259, "17600": 259, "tensoriteratorbas": 259, "compute_strid": 259, "12700": 259, "allocate_or_resize_output": 259, "10200": 259, "smallvectorimpl": 259, "7400": 259, "6200": 259, "invert_perm": 259, "6064": 259, "5100": 259, "reorder_dimens": 259, "4300": 259, "compatible_strid": 259, "check_tensor_options_and_extract_memory_format": 259, "__memcmp_avx2_movb": 259, "empty_cpu": 259, "1300": 259, "2400": 259, "6100": 259, "compute_fast_setup_typ": 259, "22600": 259, "fast_set_up": 259, "58091": 259, "580": 259, "0x7f19299544d0": 259, "compute_shap": 259, "2300": 259, "coalesce_dimens": 259, "promin": 259, "__add__": 259, "__sub__": 259, "dice": 259, "szymon": 260, "migacz": 260, "set_to_non": 260, "elementwis": [260, 276], "anomali": 260, "detect_anomali": 260, "set_detect_anomali": 260, "emit_nvtx": 260, "nth": 260, "cpunodebind": 260, "membind": 260, "pytorch_script": 260, "omp_num_thread": [260, 278], "thrash": 260, "gomp_cpu_affin": 260, "omp_proc_bind": 260, "omp_schedul": 260, "libgomp": [260, 278], "sleep": 260, "jemalloc": [260, 278], "tcmalloc": [260, 278], "emphas": 260, "fragment": [260, 276], "ccl": 260, "set_float32_matmul_precis": 260, "judgment": 263, "itt": 264, "vtune": 264, "set_stanc": [264, 267, 280], "usecas": 264, "torchcompil": 264, "prebuilt": 264, "torchscipt": 264, "pod": 264, "andriod": 264, "run_cpu": 264, "graviton": 264, "compressor": 264, "tensorpip": 264, "dcp": 264, "commdebugmod": 264, "animesh": 265, "jain": 265, "startup": 265, "inline_inbuilt_nn_modul": 265, "graph_cod": 265, "strateg": 265, "916": 267, "torch_compiler_set_stance_tutori": [267, 273, 280], "torch_compile_user_defined_triton_kernel_tutori": [267, 272, 280], "torch_compile_torch_function_mod": [267, 271, 280], "sphx_glr_recipes_torch_export_aoti_python": [267, 280], "torch_export_aoti_python": [267, 274, 280], "compile_model": 268, "resnet50_weight": 268, "weights_prepack": 268, "oguz": [269, 270, 272], "ulgen": [269, 270, 272], "sam": [269, 275], "larsen": 269, "fxgraphcach": [269, 270], "aotautogradcach": [269, 270], "redi": [269, 270], "usernam": 269, "aotautograd": [269, 270], "fxgraph": 269, "torchinductor_": 269, "torchinductor_myusernam": [269, 270], "triton_cache_dir": 269, "torchinductor_redis_host": 269, "torchinductor_redis_port": 269, "6379": 269, "cachebench": 270, "onward": 270, "save_cache_artifact": 270, "load_cache_artifact": 270, "artifact_byt": 270, "cache_info": 270, "pgo": [270, 276], "tritoncach": 270, "inductorcach": 270, "bundl": 270, "autotuningcach": 270, "torchinductor_cache_dir": 270, "basetorchfunctionmod": 271, "flopcountermod": 272, "wrap_triton": 272, "footgun": 272, "register_kernel": 272, "register_flop_formula": 272, "flop_count": 272, "mysin": 272, "reappli": 273, "force_eag": 273, "eager_on_recompil": 273, "fail_on_recompil": 273, "torch.export": 274, "torch._inductor.aoti_compile_and_packag": 274, "aot_compil": 274, "torch._export.aoti_load_packag": 274, "ankith": [274, 275], "gunap": [274, 275], "_export": 274, "aot_load": 274, "max_autotun": [274, 276], "runner": 274, "archive_format": 274, "10088": 274, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 274, "17160": 274, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 274, "16616": 274, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 274, "17776": 274, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 274, "10856": 274, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 274, "14608": 274, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 274, "11376": 274, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 274, "10984": 274, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 274, "14736": 274, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 274, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 274, "11624": 274, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 274, "15632": 274, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 274, "25472": 274, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 274, "139389": 274, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 274, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 274, "47195424": 274, "47523148": 274, "jordi": 275, "ramon": 275, "marco": 275, "carranza": 275, "mvit": 275, "whisper": 275, "blip": 275, "sam2": 275, "timm": 275, "multiscal": 275, "kinet": 275, "mvit_v1_b_weight": 275, "mvit_v1_b": 275, "224x224x3": 275, "input_fram": 275, "num_clip": 275, "print_exc": 275, "batch_dim": 275, "asr": 275, "transcrib": 275, "spoken": 275, "680k": 275, "whisperprocessor": 275, "whisperforconditionalgener": 275, "decoder_input_id": 275, "decoder_start_token_id": 275, "internaltorchdynamoerror": 275, "attributeerror": 275, "dynamiccach": 275, "key_cach": 275, "non_strict": 275, "proxytensor": 275, "gameplai": 275, "gamer": 275, "salesforc": 275, "blip_decod": 275, "caption_input": 275, "model_url": 275, "googleapi": 275, "sfr": 275, "model_base_capfilt_larg": 275, "exportdb": 275, "bos_token_id": 275, "anaconda3": 275, "functional_tensor": 275, "545": 275, "outs_unwrap": 275, "_op_dk": 275, "sam2imagepredictor": 275, "_predict": 275, "unnorm_coord": 275, "unnorm_box": 275, "mask_input": 275, "multimask_output": 275, "return_logit": 275, "image_predict": 275, "sam2_image_predictor": 275, "exporthelp": 275, "model_to_export": 275, "aoti": 275, "i0714": 276, "382000": 276, "22423": 276, "chromiumeventlogg": 276, "c38d085c": 276, "fe92": 276, "4312": 276, "9050": 276, "0e46449e330b": 276, "v0714": 276, "384000": 276, "convert_fram": 276, "1003": 276, "recipes_sourc": [276, 280], "elid": 276, "313": 276, "make_main": 276, "make_mod": 276, "run_make_mod": 276, "run_generic_build": 276, "148": 276, "build_main": 276, "276": 276, "sourcedir": 276, "confdir": 276, "outputdir": 276, "_init_build": 276, "sphinx_galleri": 276, "gen_galleri": 276, "generate_gallery_rst": 276, "generate_dir_rst": 276, "gen_rst": 276, "598": 276, "genexpr": 276, "p_fun": 276, "fname": 276, "target_dir": 276, "src_dir": 276, "gallery_conf": 276, "_popen": 276, "_default_context": 276, "process_obj": 276, "popen": 276, "popen_fork": 276, "_launch": 276, "_bootstrap": 276, "parent_sentinel": 276, "child_r": 276, "108": 276, "_target": 276, "_arg": 276, "_kwarg": 276, "call_fn": 276, "1346": 276, "generate_file_rst": 276, "output_block": 276, "execute_script": 276, "1164": 276, "execute_code_block": 276, "1020": 276, "is_last_expr": 276, "mem_max": 276, "_exec_and_get_memori": 276, "865": 276, "call_memori": 276, "1700": 276, "_sg_call_memory_noop": 276, "783": 276, "fake_main": 276, "388000": 276, "symbolic_convert": 276, "3324": 276, "389000": 276, "symbolic_shap": 276, "3334": 276, "create_env": 276, "392000": 276, "1216": 276, "__trace_sourc": 276, "starts_lin": 276, "394000": 276, "1239": 276, "__trace_bytecod": 276, "load_fast": 276, "lazyvariabletrack": 276, "binary_add": 276, "395000": 276, "wrap_to_fak": 276, "statefulsymboliccontext": 276, "dynamic_s": 276, "dimdynam": 276, "dynamic_strid": 276, "infer_strid": 276, "constraint_s": 276, "constraint_strid": 276, "view_base_context": 276, "tensor_sourc": 276, "localsourc": 276, "local_nam": 276, "is_input": 276, "is_derefed_cell_cont": 276, "shape_env_to_source_to_symbol_cach": 276, "397000": 276, "output_graph": 276, "2271": 276, "create_graph_input": 276, "l_x_": 276, "debug_level": 276, "398000": 276, "399000": 276, "l_y_": 276, "402000": 276, "store_fast": 276, "tensorvari": 276, "403000": 276, "load_const": 276, "constantvari": 276, "404000": 276, "return_valu": 276, "405000": 276, "3681": 276, "3685": 276, "1008": 276, "graphcompilereason": 276, "user_stack": 276, "framesummari": 276, "407000": 276, "1408": 276, "__graph_cod": 276, "__compiled_fn_1": 276, "_lazy_graph_modul": 276, "f32": 276, "add_1": 276, "409000": 276, "1515": 276, "789000": 276, "4734": 276, "produce_guard": 276, "794000": 276, "1520": 276, "796000": 276, "4954": 276, "track_symint": 276, "797000": 276, "storage_offset": 276, "798000": 276, "799000": 276, "5156": 276, "800000": 276, "801000": 276, "802000": 276, "2557": 276, "__guard": 276, "2495": 276, "tree_guard_manag": 276, "rootguardmanag": 276, "default_devic": 276, "utils_devic": 276, "520": 276, "init_ambient_guard": 276, "global_st": 276, "___check_global_st": 276, "torch_function_mode_stack": 276, "___check_torch_function_mode_stack": 276, "guardmanag": 276, "accessed_bi": 276, "framelocalsguardaccessor": 276, "framelocals_idx": 276, "tensor_match": 276, "check_tensor": 276, "backendselect": 276, "no_hasattr": 276, "hasattr": 276, "_dynamo_dynamic_indic": 276, "no_tensor_alias": 276, "check_no_alias": 276, "804000": 276, "660": 276, "put_code_st": 276, "805000": 276, "1121": 276, "run_gc_after_compil": 276, "gc": 276, "808000": 276, "1395": 276, "_fn": 276, "skipfil": 276, "eval_fram": 276, "809000": 276, "145": 276, "reset_code_cach": 276, "900000": 276, "codecach": 276, "1093": 276, "__output_cod": 276, "0_infer": 276, "ctype": 276, "c_long": 276, "c_int": 276, "cmath": 276, "nanj": 276, "maybe_profil": 276, "memory_plan": 276, "_align": 276, "asynccompil": 276, "select_algorithm": 276, "extern_kernel": 276, "multi_kernel": 276, "multikernelcal": 276, "tl": 276, "triton_heurist": 276, "start_graph": 276, "end_graph": 276, "_cuda_getcurrentrawstream": 276, "get_raw_stream": 276, "inductor_op": 276, "_quantiz": 276, "empty_strided_cpu": 276, "_empty_strided_cpu": 276, "empty_strided_cuda": 276, "_empty_strided_cuda": 276, "empty_strided_xpu": 276, "_empty_strided_xpu": 276, "reinterpret_tensor": 276, "_reinterpret_tensor": 276, "alloc_from_pool": 276, "_alloc_from_pool": 276, "empty_strided_p2p": 276, "_symmetricmemori": 276, "torchinductor_ci": 276, "ld": 276, "cld7tar7n7kytdxqq7n73fjc5nptwpbw7wqmdbp24zf62axk3q3a": 276, "topolog": 276, "num_us": 276, "call_funct": 276, "triton_poi_fused_add_0": 276, "triton_help": 276, "libdevic": 276, "tl_math": 276, "autotunehint": 276, "reductionhint": 276, "tilehint": 276, "deviceproperti": 276, "set_driver_to_gpu": 276, "size_hint": 276, "triton_meta": 276, "xnumel": 276, "i32": 276, "xblock": 276, "multi_processor_count": 276, "regs_per_multiprocessor": 276, "65536": 276, "max_threads_per_multi_processor": 276, "1536": 276, "warp_siz": 276, "tt": 276, "inductor_meta": 276, "grid_typ": 276, "grid1d": 276, "autotune_hint": 276, "kernel_nam": 276, "mutated_arg_nam": 276, "optimize_mem": 276, "no_x_dim": 276, "num_load": 276, "num_reduct": 276, "backend_hash": 276, "1e2c16421d4c3dba4ad92bfc4278a3cb24c43deda6ee7ff9e3fbb1dbb80802db": 276, "are_deterministic_algorithms_en": 276, "assert_indirect_index": 276, "autotune_local_cach": 276, "autotune_pointwis": 276, "autotune_remote_cach": 276, "force_disable_cach": 276, "dynamic_scale_rblock": 276, "max_autotune_pointwis": 276, "min_split_scan_rblock": 276, "spill_threshold": 276, "store_cubin": 276, "min_elem_per_thread": 276, "xoffset": 276, "program_id": 276, "xindex": 276, "xmask": 276, "device_str": 276, "benchmark_compiled_modul": 276, "rand_strid": 276, "print_perform": 276, "wrapper_benchmark": 276, "compiled_module_main": 276, "906000": 276, "1094": 276, "nk": 276, "cnk55csixpane7aredk4kvfxz3fx2bb7zgzf4vpzqkzufdznzojb": 276, "preload": 278, "tunabl": 278, "taskset": 278, "uma": 278, "lscpu": 278, "9480": 278, "223": 278, "vendor": 278, "genuineintel": 278, "node0": 278, "node1": 278, "cento": 278, "yum": 278, "libiomp": 278, "perftool": 278, "gperftool": 278, "libjemalloc2": 278, "ninstanc": 278, "ncore": 278, "program_arg": 278, "iomp": 278, "prepend": 278, "core_id": 278, "dafault": 278, "ncores_per_inst": 278, "libtcmalloc": 278, "preliminarili": 278, "deepspe": 279, "marian": 279, "oftentim": 279, "exp_avg": 279, "exp_avg_sq": 279, "print_peak_memori": 279, "max_memory_alloc": 279, "use_zero": 279, "optimizer_class": 279, "992": 279, "1361": 279, "3453": 279, "6123046875": 279, "1697": 279, "782": 280, "intermediate_sourc": 280, "prototype_sourc": 280, "advanced_sourc": 280}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 112, 113, 114, 115, 116], "live": 0, "tutori": [0, 37, 40, 52, 53, 55, 57, 60, 90, 97, 103, 123, 126, 129, 130, 132, 163, 169, 171, 172, 179, 187, 188, 191, 192, 193, 199, 234, 235, 274], "torchrl": [1, 15, 171], "object": [1, 105, 137, 191], "code": [1, 2, 8, 15, 37, 38, 57, 97, 199, 205, 220, 241], "ddpg": 1, "loss": [1, 13, 38, 46, 49, 52, 55, 98, 102, 103, 104, 135, 139, 148, 171, 244, 263], "overview": [1, 19, 63, 112, 116, 123, 140, 148, 153, 176, 189, 196, 207, 226, 235, 260], "prerequisit": [1, 38, 103, 112, 116, 170, 196, 199, 209, 212, 228, 232, 250, 265, 269, 270, 272, 273, 274, 275], "import": [1, 13, 47, 58, 91, 184, 247, 250, 261, 262, 263], "setup": [1, 19, 21, 91, 111, 140, 147, 148, 159, 167, 170, 181, 182, 193, 194, 215, 223, 224, 232, 247, 250, 261, 262, 263, 265, 276], "lossmodul": 1, "The": [1, 7, 8, 91, 93, 102, 136, 167, 168, 177, 192, 241], "__init__": [1, 35], "method": [1, 16, 147, 159, 191, 208, 257], "valu": [1, 148, 163, 171, 188], "estim": [1, 155], "actor": 1, "put": [1, 155, 170, 191], "thing": [1, 15], "togeth": [1, 15, 135, 155, 162, 170, 191, 244], "forward": [1, 6, 7, 118, 133, 140, 151, 154, 191, 192], "call": [1, 186], "environ": [1, 15, 56, 134, 148, 155, 171, 184, 198, 200], "transform": [1, 9, 15, 43, 44, 54, 98, 127, 128, 132, 135, 154, 164, 166, 167, 171, 176, 179, 192], "parallel": [1, 9, 47, 57, 59, 63, 129, 131, 132, 133, 135, 145, 146, 158, 166, 167, 194, 229, 260], "execut": [1, 15, 21, 113, 167, 173, 181, 250, 260], "normal": [1, 46, 171, 263], "observ": 1, "stat": 1, "build": [1, 4, 6, 11, 34, 98, 105, 152, 168, 185, 192, 218, 220, 263], "model": [1, 7, 9, 13, 19, 21, 22, 34, 38, 39, 40, 47, 52, 58, 63, 78, 79, 88, 94, 96, 98, 100, 102, 103, 108, 110, 112, 113, 120, 122, 126, 127, 132, 133, 135, 136, 143, 145, 148, 149, 152, 155, 156, 158, 159, 166, 167, 169, 170, 177, 179, 181, 182, 184, 191, 193, 212, 220, 223, 224, 232, 234, 235, 239, 240, 241, 243, 247, 250, 254, 255, 260, 261, 262, 274, 275], "explor": [1, 21], "data": [1, 7, 9, 22, 27, 35, 39, 46, 47, 52, 53, 55, 57, 58, 59, 91, 98, 101, 111, 126, 131, 132, 133, 135, 138, 139, 145, 171, 177, 179, 181, 182, 184, 188, 189, 196, 207, 236, 247, 260, 261, 262, 263], "collector": [1, 148, 171], "evalu": [1, 52, 126, 136, 137, 138, 177, 244], "your": [1, 6, 11, 15, 35, 63, 96, 100, 111, 118, 161, 191, 198, 229, 247], "record": [1, 181, 196], "replai": [1, 148, 171, 172], "buffer": [1, 148, 171, 260], "storag": [1, 197, 275], "batch": [1, 10, 15, 141, 154, 173, 185, 233, 260, 275], "size": [1, 275], "modul": [1, 7, 16, 70, 88, 98, 111, 118, 119, 148, 151, 163, 169, 189, 217, 249, 257, 275], "construct": [1, 21, 58, 207, 208], "target": [1, 155, 260], "network": [1, 7, 34, 46, 49, 55, 91, 105, 108, 138, 139, 148, 155, 171, 172, 177, 179, 192, 244, 247, 261, 262, 263], "updat": [1, 49, 155, 173, 217], "optim": [1, 38, 39, 46, 55, 72, 102, 105, 111, 119, 133, 137, 162, 175, 189, 223, 224, 233, 260, 262, 263, 266, 278, 279], "time": [1, 20, 41, 50, 67, 73, 77, 85, 89, 99, 109, 117, 118, 121, 170, 178, 216, 250, 256, 259, 265, 267, 269, 270, 280], "train": [1, 3, 4, 7, 9, 12, 15, 17, 22, 26, 34, 35, 46, 52, 55, 56, 58, 91, 93, 96, 100, 102, 105, 120, 126, 129, 132, 135, 136, 138, 139, 143, 144, 147, 148, 155, 162, 166, 171, 172, 177, 179, 182, 189, 212, 234, 235, 260, 263, 268, 272], "polici": [1, 15, 132, 148, 171], "experi": [1, 15, 16, 137, 193], "result": [1, 3, 47, 55, 78, 113, 118, 137, 138, 142, 171, 177, 179, 181, 189, 215, 241, 243, 245], "conclus": [1, 2, 3, 4, 6, 7, 15, 16, 17, 19, 22, 52, 85, 103, 112, 113, 116, 123, 134, 135, 140, 148, 152, 153, 155, 156, 162, 165, 167, 171, 176, 186, 188, 189, 192, 194, 196, 197, 198, 199, 200, 205, 206, 207, 208, 209, 210, 212, 214, 215, 221, 224, 226, 227, 228, 229, 232, 233, 249, 257, 260, 265, 269, 270, 271, 272, 273, 274, 275, 276, 278], "next": [1, 46, 55, 78, 170, 171], "step": [1, 123, 162, 167, 168, 170, 171, 181, 192, 245, 247, 250, 261, 262, 263, 265], "autograd": [2, 4, 10, 11, 33, 45, 65, 66, 80, 93, 119, 136, 140, 151, 175], "c": [2, 3, 4, 6, 7, 8, 10, 11, 199, 220, 234, 259], "frontend": [2, 7, 88, 90], "basic": [2, 7, 36, 37, 140, 145, 151, 165, 168, 173, 186, 188, 233, 272], "oper": [2, 4, 6, 8, 10, 11, 17, 42, 51, 93, 107, 116, 165, 193, 207, 208, 210, 221, 260], "comput": [2, 15, 20, 33, 41, 45, 50, 67, 73, 77, 85, 89, 99, 107, 109, 110, 117, 121, 126, 154, 159, 178, 216, 243, 256, 260, 267, 280], "higher": 2, "order": [2, 260], "gradient": [2, 13, 33, 78, 94, 133, 164, 207, 244, 260, 263], "us": [2, 3, 6, 7, 9, 12, 13, 14, 26, 37, 45, 53, 56, 86, 111, 112, 113, 116, 118, 120, 125, 131, 133, 140, 141, 143, 145, 146, 148, 149, 151, 164, 166, 168, 173, 174, 175, 176, 181, 182, 184, 197, 200, 203, 207, 209, 220, 222, 225, 227, 228, 229, 235, 241, 243, 249, 250, 258, 260, 261, 272, 274, 276, 278, 279], "custom": [2, 4, 6, 8, 11, 15, 16, 17, 35, 54, 70, 116, 119, 125, 126, 129, 141, 142, 151, 168, 169, 188, 191, 229], "function": [2, 13, 16, 22, 33, 38, 46, 49, 55, 66, 78, 88, 91, 98, 102, 103, 104, 105, 111, 119, 141, 142, 151, 154, 159, 164, 169, 171, 232, 245, 250, 260, 263, 271], "translat": [2, 122, 128, 177], "from": [2, 8, 22, 45, 53, 111, 113, 120, 138, 139, 143, 160, 177, 184, 189, 191, 249, 261], "python": [2, 4, 6, 8, 17, 88, 168, 220, 274, 276], "cuda": [3, 4, 6, 8, 53, 85, 165, 225, 260], "graph": [3, 33, 45, 100, 107, 113, 140, 186, 188, 212, 260, 275], "pytorch": [3, 6, 7, 8, 11, 13, 16, 22, 26, 45, 48, 53, 57, 60, 63, 65, 66, 68, 70, 71, 72, 76, 84, 92, 95, 96, 97, 98, 100, 101, 102, 105, 106, 107, 108, 110, 113, 116, 118, 119, 130, 147, 156, 165, 170, 181, 184, 189, 192, 193, 195, 203, 212, 213, 220, 221, 222, 231, 233, 234, 235, 236, 238, 241, 242, 247, 248, 250, 251, 258, 260, 261, 262, 263, 264, 268], "api": [3, 7, 63, 93, 133, 151, 156, 162, 168, 196, 199, 220, 241, 260, 276], "get": [3, 11, 34, 85, 110, 131, 133, 145, 153, 161, 175, 210, 227, 228, 229, 234, 235], "start": [3, 85, 100, 131, 133, 145, 161, 175, 210, 227, 228, 229, 234, 235, 259, 265, 278], "set": [4, 91, 134, 137, 184, 193, 196, 198, 200, 223, 224, 232, 260, 269], "up": [4, 75, 119, 137, 184, 191, 193, 198, 200, 223, 224, 232, 233, 259], "system": 4, "defin": [4, 7, 10, 22, 34, 46, 49, 52, 66, 103, 112, 119, 137, 167, 171, 184, 191, 193, 245, 247, 259, 261, 262, 263, 272], "op": [4, 6, 10, 188, 271], "ad": [4, 10, 17, 91, 182, 189, 244, 272], "backend": [4, 10, 11, 16, 134, 147, 153, 168, 193, 212, 220, 260, 268, 278], "implement": [4, 10, 38, 55, 78, 104, 116, 141, 163, 168, 173, 174, 176, 205, 207, 217, 232], "an": [4, 11, 15, 46, 108, 110, 116, 120, 136, 148, 171, 189, 196, 224, 249, 278], "regist": [4, 7, 10, 11, 16], "torch": [4, 33, 45, 84, 98, 107, 111, 112, 120, 138, 140, 145, 169, 176, 185, 186, 187, 188, 192, 197, 200, 207, 212, 219, 223, 232, 244, 245, 249, 257, 265, 270, 271, 272, 273, 274, 275, 276, 278], "compil": [4, 6, 140, 153, 176, 185, 186, 192, 200, 209, 212, 223, 224, 232, 265, 269, 270, 271, 272, 273, 274, 276], "support": [4, 10, 11, 17, 91, 100, 116, 176, 208, 217, 272], "hybrid": [4, 88, 90], "registr": 4, "test": [4, 11, 15, 17, 46, 78, 91, 141, 185, 191, 220, 247, 259], "creat": [4, 8, 14, 35, 39, 47, 52, 101, 105, 107, 111, 137, 138, 139, 152, 159, 169, 260], "mutabl": [4, 17], "extens": [6, 11, 14, 129, 168, 214, 221, 224, 234, 257, 268], "motiv": [6, 7, 88, 205], "exampl": [6, 14, 17, 78, 82, 88, 93, 94, 105, 108, 110, 119, 120, 136, 192, 196, 199, 209, 214, 234, 268, 273, 278], "write": [6, 7, 15, 54, 147, 182, 191, 205], "setuptool": 6, "pass": [6, 12, 118, 134, 140, 162, 185, 247], "backward": [6, 11, 132, 133, 140, 141, 142, 162], "bind": 6, "perform": [6, 118, 134, 149, 152, 153, 156, 164, 170, 176, 181, 200, 209, 226, 233, 235, 238, 260, 273, 278], "comparison": [6, 141, 145, 164, 186], "gpu": [6, 7, 46, 47, 58, 82, 91, 120, 165, 181, 189, 198, 203, 234, 260], "devic": [6, 13, 16, 34, 120, 132, 220, 225, 246, 249, 252, 260], "jit": [6, 11, 112, 170], "mix": [6, 132, 133, 143, 244, 260], "accessor": 6, "integr": [6, 8, 16, 94], "applic": [7, 147, 168, 222, 257], "neural": [7, 13, 34, 46, 49, 91, 111, 155, 159, 235, 247, 261, 262, 263], "paramet": [7, 14, 34, 38, 39, 47, 98, 120, 169, 171, 173, 174, 217, 245, 260, 261], "submodul": 7, "travers": 7, "hierarchi": [7, 241], "run": [7, 37, 47, 52, 53, 56, 57, 58, 78, 88, 97, 103, 137, 145, 181, 184, 188, 223, 224, 232, 250, 258], "mode": [7, 21, 22, 151, 154, 209, 234, 271], "ownership": 7, "dcgan": [7, 55], "what": [7, 11, 12, 16, 19, 46, 55, 59, 60, 93, 111, 120, 142, 149, 164, 165, 196, 215, 219, 224, 225, 228, 229, 241, 262, 274, 278, 279], "wa": 7, "gan": [7, 55], "agan": 7, "gener": [7, 16, 55, 78, 120, 137, 139, 245, 253, 260], "discrimin": [7, 55, 104], "load": [7, 13, 35, 39, 40, 46, 52, 56, 103, 120, 126, 143, 145, 177, 179, 197, 227, 236, 245, 247, 249, 252, 253, 254, 260, 261, 262, 263], "loop": [7, 15, 38, 102, 148, 171, 172], "move": [7, 101], "checkpoint": [7, 58, 120, 132, 145, 155, 226, 227, 249, 253, 260], "recov": 7, "state": [7, 133, 279], "inspect": [7, 140, 163, 169, 182, 244], "imag": [7, 13, 46, 61, 62, 100, 113, 126, 170, 184, 275], "author": [8, 113], "manual": 8, "when": [8, 135, 142, 143, 207, 274], "should": [8, 59, 135], "i": [8, 12, 16, 31, 46, 55, 59, 60, 111, 120, 142, 143, 149, 162, 164, 192, 207, 219, 221, 225, 228, 229, 241, 244, 262, 275, 279], "why": [8, 56, 59, 135, 136, 207, 210, 228, 229], "distribut": [9, 12, 18, 21, 56, 57, 58, 59, 63, 85, 129, 145, 146, 147, 167, 174, 175, 189, 226, 227, 260], "pipelin": [9, 146, 166, 167], "dispatch": [10, 11, 176], "schema": 10, "For": [10, 93, 254], "do": [10, 46, 93, 142, 156], "need": [10, 93, 192], "In": [10, 93, 101, 255], "place": [10, 93, 101], "view": [10, 181], "go": [10, 46, 55, 78, 184, 192], "beyond": 10, "autocast": [10, 244], "tracer": 10, "extend": [11, 116, 169, 192], "new": [11, 16, 66, 104, 119, 141], "": [11, 17, 107, 155, 206], "kei": [11, 275], "full": [11, 38, 91], "list": 11, "kernel": [11, 16, 85, 159, 232, 233, 272], "against": 11, "nativ": [11, 222], "compat": 11, "known": 11, "issu": 11, "addit": [11, 123, 130, 165, 167, 181, 196], "note": [11, 104, 243], "futur": [11, 16], "work": [11, 12, 16, 39, 131, 132, 133, 135, 156, 214, 227], "stai": 11, "touch": 11, "uneven": 12, "input": [12, 55, 58, 78, 142, 189, 192, 245, 260], "join": 12, "context": [12, 194], "manag": [12, 165], "requir": [12, 19, 113, 136, 169, 215, 225, 241, 275, 279], "distributeddataparallel": [12, 145, 260], "zeroredundancyoptim": [12, 279], "keyword": 12, "argument": 12, "how": [12, 16, 37, 131, 132, 133, 135, 162, 200, 214, 225, 227, 229, 241, 247, 258, 279], "doe": [12, 19, 136, 215], "joinabl": 12, "joinhook": 12, "make": [12, 104, 222], "toi": 12, "class": [12, 15, 34, 54, 103, 163, 189], "transfer": [13, 126], "introduct": [13, 26, 45, 55, 63, 85, 92, 94, 95, 96, 97, 100, 101, 102, 107, 115, 134, 163, 165, 167, 181, 184, 186, 189, 190, 194, 199, 200, 205, 208, 209, 212, 217, 220, 221, 247, 250, 261, 262, 263, 269, 270, 278], "underli": 13, "principl": [13, 208], "packag": [13, 81], "select": [13, 148, 194, 218], "content": [13, 119, 233], "style": [13, 192], "descent": 13, "numpi": [14, 42, 51, 75, 101, 119, 206], "scipi": 14, "less": 14, "parametr": [14, 163, 169], "pendulum": 15, "effect": 15, "action": [15, 148], "_step": 15, "reset": 15, "simul": 15, "_reset": 15, "metadata": [15, 16], "env": 15, "_spec": 15, "spec": 15, "shape": [15, 40, 101, 188, 251], "reproduc": 15, "seed": [15, 101], "wrap": [15, 17, 111, 132, 191, 259, 272], "envbas": 15, "our": [15, 21, 141, 147, 162, 185, 247, 261, 262, 263], "rollout": 15, "simpl": [15, 47, 93, 113, 152, 177, 244, 250], "facilit": 16, "privateuse1": 16, "via": [16, 196], "guard": [16, 188], "serial": [16, 169], "deseri": 16, "other": [16, 21, 98, 100, 102, 165, 181], "improv": [16, 118, 181, 212, 233], "user": [16, 84, 220, 272], "renam": 16, "name": [16, 138, 139, 188], "properti": 16, "relat": [16, 40, 184, 257], "pil": 17, "crop": 17, "combin": [18, 135, 145], "dataparallel": [18, 47, 59, 91, 120, 145], "rpc": [18, 129, 146, 173, 174, 175, 195, 225, 231], "framework": [18, 174, 175], "beta": [19, 22, 151, 152, 176, 211, 223, 224, 233, 237, 271, 274, 276], "acceler": [19, 101, 111, 161, 192, 197, 215], "bert": [19, 215], "semi": [19, 26, 215], "structur": [19, 215], "2": [19, 22, 46, 47, 88, 113, 134, 159, 167, 168, 181, 182, 191, 193, 212, 215, 245, 247, 250, 259, 261, 262, 263], "4": [19, 22, 46, 88, 113, 168, 170, 181, 182, 193, 212, 215, 245, 247, 250, 259, 261, 262, 263], "sparsiti": [19, 208, 215], "problem": [19, 215], "solv": [19, 215], "intro": [19, 215], "establish": 19, "baselin": 19, "prune": [19, 169, 215], "spars": [19, 205, 208, 215], "infer": [19, 44, 120, 126, 170, 233, 234, 244, 254, 260, 268, 274], "torchrec": [21, 189, 190], "shard": [21, 63, 131, 132, 133, 135, 189, 279], "instal": [21, 85, 94, 113, 170, 189, 200, 212, 235, 258], "embed": [21, 100, 110, 189], "distributedmodelparallel": [21, 189], "multiprocess": 21, "tabl": [21, 119], "wise": 21, "static": [22, 104, 275], "quantiz": [22, 170, 193, 198, 212, 235], "eager": 22, "1": [22, 46, 88, 113, 134, 159, 167, 168, 181, 182, 188, 191, 193, 212, 245, 247, 250, 259, 261, 262, 263], "architectur": 22, "helper": [22, 208, 232], "3": [22, 46, 47, 88, 113, 134, 167, 168, 181, 182, 193, 212, 245, 247, 250, 259, 261, 262, 263], "dataset": [22, 28, 35, 47, 54, 96, 100, 102, 111, 125, 191, 263], "loader": [22, 91], "imagenet": 22, "post": [22, 212], "5": [22, 46, 113, 181, 182, 193, 245, 250, 259, 263], "awar": [22, 235], "speedup": [22, 186, 244], "supervis": 26, "learn": [26, 36, 37, 48, 60, 88, 104, 105, 106, 119, 126, 129, 155, 165, 171, 172, 173, 175, 181, 196, 245, 247, 250, 258, 261, 262, 263, 274, 278], "usb": 26, "built": [26, 193], "upon": 26, "freematch": 26, "softmatch": 26, "cifar": [26, 103], "10": [26, 103, 162], "onli": [26, 234, 235], "40": 26, "label": [26, 184], "specif": [26, 184, 260], "imbalanc": 26, "algorithm": [26, 172], "audio": [27, 28, 29, 30, 31, 32], "augment": [27, 29, 85, 108, 260], "featur": [29, 30, 94, 108, 126, 132, 181, 184, 189, 234, 235], "extract": [30, 184], "o": 31, "resampl": 32, "automat": [33, 107, 151, 244, 275], "differenti": [33, 45, 107, 151], "tensor": [33, 42, 51, 65, 76, 83, 96, 101, 107, 119, 129, 135, 136, 138, 162, 176, 192, 208, 210, 224, 257, 260, 275], "disabl": [33, 260], "track": [33, 142, 182], "more": [33, 93, 101, 136, 153, 154, 173, 181, 226, 245, 247, 250, 258, 261, 262, 263], "option": [33, 45, 47, 123, 191, 212, 220, 247, 278], "read": [33, 34, 35, 38, 43, 45, 56, 58, 59, 112, 113, 115, 116, 118, 123, 143, 144, 148, 184, 193, 205, 207, 208, 241, 260], "jacobian": [33, 154, 159], "product": [33, 154, 159, 176], "further": [33, 34, 35, 38, 43, 45, 56, 58, 59, 112, 113, 115, 116, 118, 123, 126, 143, 144, 148, 192, 193, 205, 207, 208, 260], "layer": [34, 94, 98, 135, 141, 192, 260], "nn": [34, 70, 71, 81, 88, 98, 111, 119, 120, 127, 128, 169, 192, 249, 257, 275], "flatten": 34, "linear": [34, 98, 105, 111], "relu": [34, 193], "sequenti": [34, 111], "softmax": [34, 105, 207], "dataload": [35, 54, 96, 102, 111], "iter": [35, 52, 54, 169], "visual": [35, 94, 100, 113, 126, 162, 177, 179, 182, 241, 243], "file": [35, 52, 113, 120, 143, 177, 196, 255], "__len__": 35, "__getitem__": 35, "prepar": [35, 52, 138, 139, 177, 181, 193, 205, 206, 207, 220, 239, 240], "through": [35, 54, 88, 193, 247], "thi": [37, 60, 132, 162, 192, 214], "guid": [37, 133, 165, 260], "hyperparamet": [38, 91, 171, 172], "quickstart": 39, "save": [39, 40, 56, 58, 113, 120, 132, 136, 142, 143, 145, 155, 162, 197, 226, 227, 244, 245, 252, 253, 254, 255, 261], "weight": [40, 49, 55, 68, 119], "initi": [42, 51, 55, 56, 133, 134, 145, 147, 155, 163, 210, 217, 247, 261, 262], "attribut": [42, 51, 94, 243], "bridg": [42, 51, 101], "arrai": [42, 51], "totensor": 43, "lambda": 43, "fast": [44, 78, 233], "better": [44, 200, 209], "A": [45, 48, 60, 93, 94, 104, 141, 165, 241, 244, 253, 259, 261], "gentl": 45, "background": [45, 165], "usag": [45, 140, 141, 151, 162, 165, 186, 188, 220, 233, 235, 268, 272], "vector": [45, 149, 154, 159], "calculu": 45, "exclus": 45, "dag": 45, "classifi": [46, 105, 113, 138, 184], "about": [46, 251], "cifar10": 46, "convolut": [46, 98, 141, 148, 185, 260], "multipl": [46, 120, 169, 255], "where": [46, 55, 78, 184, 207], "dummi": 47, "8": [47, 245, 259], "summari": [47, 132, 176, 242], "deep": [48, 60, 104, 105, 106], "60": [48, 60], "minut": [48, 60], "blitz": [48, 60], "backprop": 49, "chatbot": 52, "preprocess": [52, 125, 155, 170], "format": [52, 113, 156, 196, 227, 260], "trim": 52, "seq2seq": [52, 177], "encod": [52, 110, 177], "decod": [52, 177], "procedur": 52, "mask": [52, 192, 207], "singl": [52, 158], "greedi": 52, "my": 52, "text": [52, 124, 125, 183], "googl": 53, "colab": 53, "version": [53, 159], "drive": 53, "enabl": [53, 133, 194, 196, 199, 260], "compos": [54, 154, 272], "afterword": 54, "torchvis": [54, 79, 191], "adversari": [55, 78], "fault": 56, "toler": 56, "torchrun": [56, 145], "grace": 56, "restart": 56, "process": [56, 58, 145, 167, 168, 173], "group": [56, 58, 168], "provid": 56, "variabl": [56, 134, 260], "snapshot": [56, 162], "trainer": 56, "constructor": [56, 260], "resum": [56, 120, 244], "script": [56, 88, 161, 266, 278], "video": [57, 170, 275], "section": 57, "multi": [58, 82, 91, 137], "ddp": [58, 59, 129, 143, 145, 260], "job": [58, 196, 250], "you": [59, 100, 135, 165, 192, 196, 243, 274, 278], "prefer": 59, "over": 59, "dp": 59, "goal": 60, "segment": [61, 62, 191, 275], "deeplabv3": [61, 62], "android": [61, 204, 218, 220, 222, 237, 239], "io": [62, 203, 204, 218, 237, 240], "primit": 63, "commun": [63, 85, 91, 147, 225], "launcher": 63, "appli": [63, 135, 212, 214, 278], "To": 63, "scale": [63, 135, 144, 176], "develop": 63, "control": [68, 112, 119, 176, 188, 260, 273, 278], "flow": [68, 112, 119, 188, 275], "share": [68, 119], "warm": [75, 119], "threat": 78, "sign": 78, "attack": 78, "under": 78, "fgsm": 78, "accuraci": [78, 91, 153, 235], "v": [78, 154, 165, 206], "epsilon": 78, "sampl": [78, 139, 164, 241], "finetun": [79, 126, 191], "former": 84, "holist": [85, 86], "trace": [85, 86, 88, 112, 152, 186, 218, 241, 250, 275], "analysi": [85, 86], "hta": 85, "tempor": 85, "breakdown": 85, "idl": 85, "durat": 85, "overlap": 85, "counter": 85, "memori": [85, 108, 118, 136, 141, 156, 162, 165, 172, 226, 233, 250, 260, 278], "bandwidth": 85, "queue": 85, "length": [85, 260], "launch": [85, 167, 241], "statist": 85, "diff": 86, "syntax": 88, "inform": [88, 153], "part": [88, 108], "pure": 88, "top": 88, "level": [88, 93, 108, 138, 139], "tune": [91, 132, 233, 260], "rai": 91, "configur": [91, 137, 241, 269], "search": 91, "space": 91, "youtub": [92, 95, 97], "seri": [92, 97], "fundament": 93, "we": 93, "turn": [93, 138], "off": 93, "On": 93, "profil": [93, 118, 152, 153, 181, 195, 231, 241, 250], "advanc": [93, 104, 132, 147, 181, 206, 221, 244, 272], "topic": [93, 147, 244], "detail": [93, 217], "high": [93, 176], "understand": 94, "captum": [94, 243], "first": [94, 112, 163], "occlus": 94, "gradcam": 94, "insight": 94, "common": [98, 140, 275], "type": [98, 101, 189, 244, 275], "recurr": [98, 148], "manipul": [98, 101], "activ": [98, 102, 209], "tensorboard": [100, 181, 182, 258], "befor": [100, 184, 243], "show": 100, "scalar": [100, 258], "resourc": [100, 102, 130, 165, 167], "random": [101, 104], "math": [101, 233], "logic": 101, "brief": 101, "broadcast": 101, "alter": 101, "copi": [101, 165], "chang": [101, 246], "number": 101, "dimens": [101, 233], "per": [102, 164], "epoch": 102, "knowledg": 103, "distil": 103, "util": [103, 169, 172, 192, 221, 245, 257, 260, 271], "cross": [103, 192], "entropi": 103, "cosin": 103, "minim": 103, "intermedi": [103, 142, 260], "regressor": 103, "dynam": [104, 188, 273], "decis": 104, "bi": 104, "lstm": [104, 108, 148], "crf": 104, "versu": 104, "toolkit": 104, "condit": 104, "field": 104, "discuss": 104, "exercis": [104, 108, 110, 123, 138, 139, 177], "tag": [104, 108], "block": [105, 192, 245], "affin": 105, "map": 105, "non": [105, 165, 188, 224, 260], "probabl": 105, "compon": [105, 153], "logist": 105, "regress": 105, "bag": [105, 110], "word": [105, 110], "nlp": [106, 138, 139, 160, 177], "librari": [107, 124, 184, 222, 247, 250, 260, 261, 262, 263, 278], "reshap": 107, "sequenc": [108, 135, 177], "long": [108, 250], "short": [108, 241], "term": 108, "speech": [108, 180, 183, 275], "tagger": 108, "charact": [108, 138, 139], "lexic": 110, "semant": [110, 205, 206], "dens": [110, 176], "n": 110, "gram": 110, "languag": [110, 127, 128], "continu": 110, "realli": 111, "mnist": 111, "net": 111, "scratch": [111, 138, 139, 160, 177], "without": [111, 220], "refactor": [111, 112], "add": [111, 134, 191, 271], "valid": [111, 260], "fit": [111, 162], "get_data": 111, "switch": [111, 260], "cnn": 111, "close": 111, "thought": 111, "export": [112, 113, 116, 120, 187, 188, 212, 274, 275], "attempt": 112, "suggest": [112, 188], "patch": [112, 184], "cond": 112, "depend": [113, 115, 176, 188, 189], "netron": 113, "6": [113, 181, 182, 193, 245, 250, 259], "runtim": [113, 260, 274, 278], "7": [113, 181, 193, 245, 250, 259], "compar": [113, 245], "ones": 113, "overrid": 116, "exist": [116, 156], "debug": [118, 153, 196, 260], "print": 118, "state_dict": [120, 262], "recommend": [120, 138, 165, 186], "entir": 120, "program": [120, 188], "One": [120, 255], "warmstart": [120, 261], "differ": [120, 140, 191, 261], "across": [120, 252], "cpu": [120, 132, 136, 152, 153, 165, 200, 209, 221, 234, 241, 260, 268, 272, 278], "t5": [122, 132], "base": [122, 195, 218, 231], "summar": 122, "sentiment": 122, "classif": [122, 124, 184, 275], "templat": 123, "torchtext": [124, 125, 127, 128], "vision": [126, 260], "few": 126, "predict": [126, 184], "convnet": 126, "fix": [126, 188], "extractor": 126, "fsdp": [129, 131, 132], "tp": [129, 135], "devicemesh": [129, 229], "welcom": 130, "fulli": [131, 132, 133, 135, 192], "recap": 132, "fine": 132, "hf": 132, "precis": [132, 133, 143, 244, 260], "intial": 132, "strategi": [132, 137], "prefetch": [132, 133], "stream": 132, "rank0": 132, "fsdp2": 133, "clip": [133, 244], "dtensor": 133, "dict": 133, "dcp": [133, 226, 227], "fsdp1": 133, "migrat": 133, "libuv": 134, "tcpstore": 134, "benchmark": [134, 185, 223, 245], "impact": 134, "exit": 134, "rout": 134, "use_libuv": 134, "fals": 134, "0": [134, 188, 207], "init_method": 134, "processgroup": 134, "larg": 135, "layernorm": 135, "rmsnorm": 135, "hook": [136, 162], "typic": 136, "than": 136, "concept": [136, 188], "pack": [136, 192], "unpack": 136, "some": 136, "unconvent": 136, "return": 136, "int": 136, "tupl": 136, "str": 136, "disk": 136, "na": 137, "ax": 137, "torchx": 137, "app": [137, 220], "runner": 137, "searchspac": 137, "metric": [137, 212], "optimizationconfig": 137, "choos": [137, 278], "schedul": [137, 224], "acknowledg": 137, "rnn": [138, 139, 175], "plot": [138, 139, 177], "captur": [140, 152, 162, 170, 212], "larger": 140, "log": [140, 153, 155, 258], "flag": 140, "address": [140, 275], "certain": 140, "limit": [140, 272], "aotautograd": 140, "recompil": [140, 273], "reason": [140, 251], "fuse": [141, 162, 176, 185, 189, 260], "norm": [141, 185, 260], "formula": [141, 272], "batchnorm": 141, "out": [141, 185, 214, 263], "doubl": 142, "output": [142, 189, 235], "real": [143, 170], "world": 143, "cloud": 143, "enough": 143, "multinod": 144, "local": 144, "global": [144, 169], "rank": 144, "heteregen": 144, "troubleshoot": [144, 170, 244], "between": [145, 207], "case": [145, 260], "skew": 145, "speed": [145, 233], "point": [147, 257], "collect": [147, 171, 245], "own": 147, "ring": 147, "allreduc": 147, "dqn": [148, 172], "mlp": 148, "q": [148, 172], "ensembl": 149, "vmap": [149, 219], "forc": 150, "align": 150, "wav2vec2": [150, 180], "fx": [152, 186, 212], "symbol": [152, 188], "interpret": [152, 204, 218, 237, 243], "investig": 152, "resnet18": [152, 185], "inductor": [153, 199, 269], "determin": 153, "error": [153, 188, 244, 275], "hessian": 154, "hvp": 154, "vhp": 154, "revers": 154, "jacrev": 154, "jacfwd": 154, "functorch": 154, "mario": 155, "plai": 155, "rl": 155, "agent": 155, "definit": 155, "act": 155, "cach": [155, 163, 269, 270], "recal": 155, "td": 155, "all": [155, 162, 192, 244, 250, 260], "let": 155, "channel": 156, "last": 156, "gain": [156, 273], "convert": [156, 193, 202, 211], "machin": 158, "best": [158, 186, 189], "practic": [158, 165, 181, 186, 189], "tangent": 159, "ntk": 159, "contract": 159, "nvfuser": 161, "dure": [162, 260], "disclaim": 162, "techniqu": 162, "register_post_accumulate_grad_hook": 162, "everyth": [162, 191], "line": 162, "hand": 163, "ar": [163, 192], "citizen": 163, "concaten": 163, "remov": [163, 169], "grad": [164, 207, 260], "effici": [164, 205, 237, 260], "wai": 164, "good": 165, "non_block": 165, "pin_memori": 165, "preambl": 165, "pageabl": 165, "asynchron": [165, 173, 226, 260], "synchron": [165, 260], "true": [165, 249, 260], "cudamemcpyasync": 165, "perspect": 165, "synergi": 165, "direct": [165, 225], "mp": 165, "consider": 165, "partit": 167, "main": 167, "cpp": 168, "subclass": [168, 176, 257], "expos": 168, "re": 169, "raspberri": 170, "pi": 170, "30": 170, "fp": 170, "opencv": 170, "choic": 170, "mobilenetv2": [170, 202, 211], "It": 170, "reinforc": [171, 172, 175], "ppo": 171, "server": [173, 174], "cartpol": 173, "solver": 173, "rref": 175, "dot": 176, "attent": [176, 177, 192], "sdpa": 176, "explicit": [176, 232], "hardwar": 176, "causal": 176, "self": 176, "nestedtensor": 176, "attn_bia": 176, "spatial": 179, "depict": 179, "stn": 179, "recognit": [180, 275], "With": 181, "event": 181, "analyz": [181, 196, 250], "help": 181, "amd": 181, "projector": 182, "assess": 182, "tacotron2": 183, "whole": 184, "slide": 184, "tiatoolbox": 184, "clean": 184, "download": 184, "patchpredictor": 184, "pathologi": 184, "here": 184, "fuser": 185, "pattern": [185, 193], "match": [185, 260], "fusion": [185, 193, 232], "nest": [186, 192, 210], "demonstr": [186, 275], "torchscript": [186, 234], "torchdynamo": [186, 270, 275], "nightli": 187, "break": [188, 275], "strict": [188, 275], "constraint": [188, 193], "special": 188, "dim": 188, "violat": 188, "_check": 188, "ir": 188, "decomposit": 188, "exportdb": 188, "recsi": 189, "embeddingbag": 189, "embeddingbagcollect": 189, "planner": 189, "lazyawait": 189, "anatomi": 189, "lookup": 189, "detect": 191, "pennfudan": 191, "pretrain": 191, "modifi": [191, 244], "backbon": 191, "instanc": 191, "replac": 192, "me": 192, "introduc": [192, 204], "abov": 192, "octob": 192, "2024": 192, "multiheadattent": 192, "gpt": 192, "one": 192, "row": 192, "longer": 192, "caus": 192, "nan": [192, 207, 244], "flexattent": 192, "njt": 192, "project": 192, "swiglu": 192, "feed": 192, "prototyp": [193, 196, 197, 198, 202, 203, 204, 205, 206, 207, 208, 213, 215, 218], "backendconfig": 193, "deriv": 193, "refer": 193, "each": 193, "dtypeconfig": 193, "conv": 193, "qconfigmap": 193, "satisfi": 193, "faulti": 193, "rotat": 194, "approach": 194, "workload": [195, 221, 231, 241, 260], "flight": 196, "stuck": 196, "retriev": 196, "dump": 196, "end": [196, 270], "gpudirect": 197, "torchao": 198, "wrapper": [199, 220], "window": 200, "xpu": [200, 241], "softwar": 200, "altern": 200, "intel": [200, 221, 234, 235, 241, 260, 268, 278], "llvm": 200, "core": [202, 260], "ml": 202, "lite": 204, "workflow": [204, 220], "adagrad": 205, "maskedtensor": [205, 206, 207, 208], "simpler": 205, "origin": 205, "maskedarrai": 206, "reduct": [206, 208], "access": [207, 260, 262, 278], "index": 207, "slice": 207, "distinguish": 207, "anoth": 207, "x": 207, "yield": 207, "nansum": 207, "nanmean": 207, "safe": 207, "miss": 207, "coo": 208, "csr": 208, "unari": 208, "binari": 208, "appendix": 208, "max": 209, "autotun": 209, "see": [210, 223, 272], "also": [210, 223, 272], "nnapi": 211, "openvino": 212, "nncf": 212, "lower": 212, "represent": 212, "recip": [213, 238, 239, 240, 242, 248, 264, 266], "autoload": 214, "tree": 214, "mechan": 214, "skip": [217, 260], "mobil": [218, 237, 238, 242, 266], "so": 219, "vulkan": 220, "desktop": 220, "sdk": 220, "java": 220, "upload": 220, "leverag": 221, "matrix": 221, "amx": 221, "guidelin": 221, "can": 221, "confirm": 221, "being": 221, "prebuilt": 222, "lr": 224, "happen": 224, "tensorpip": 225, "even": 226, "pin": 226, "commdebugmod": 228, "hsdp": 229, "solut": [229, 275], "horizont": 232, "foreach_map": 232, "aw": 233, "graviton": 233, "processor": 233, "bfloat16": [233, 234], "openbla": 233, "smaller": 233, "alloc": [233, 260, 278], "overhead": 233, "linux": 233, "transpar": 233, "huge": 233, "page": 233, "thp": 233, "float32": 234, "imper": 234, "float16": 234, "zoo": 234, "eas": 235, "compressor": 235, "driven": 235, "deploy": 235, "instrument": 241, "technologi": 241, "itt": 241, "vtune": 241, "showcas": 241, "begin": 243, "final": 243, "default": [244, 246], "gradscal": 244, "e": 244, "g": 244, "amp": [244, 260], "minor": 244, "inf": 244, "mismatch": 244, "mai": 244, "manifest": 244, "cudnn_status_bad_param": 244, "syntaxerror": 245, "timeit": 245, "timer": [245, 259], "autorang": 245, "fuzz": 245, "instruct": [245, 259], "count": [245, 259], "callgrind": [245, 259], "necessari": [247, 250, 261, 262, 263], "specifi": 247, "tip": 249, "mmap": 249, "meta": 249, "load_state_dict": [249, 257], "assign": 249, "instanti": 250, "resnet": 250, "consumpt": 250, "examin": 250, "stack": 250, "And": [253, 254], "swap_tensor": 257, "quick": [259, 278], "wall": 259, "blocked_autorang": 259, "snippet": 259, "collect_callgrind": 259, "delv": 259, "deeper": 259, "b": [259, 261], "footnot": 259, "calcul": 260, "bia": 260, "directli": 260, "follow": 260, "none": 260, "instead": 260, "zero_grad": 260, "channels_last": 260, "uniform": 260, "numa": [260, 278], "openmp": [260, 278], "libiomp": 260, "cudnn": 260, "auto": 260, "tuner": 260, "avoid": 260, "unnecessari": 260, "prealloc": 260, "reduc": [260, 265], "accumul": 260, "find_unused_paramet": 260, "balanc": 260, "zero": 263, "while": 263, "cold": 265, "region": 265, "fp32": 268, "bf16": 268, "torchinductor_fx_graph_cach": 269, "torchinductor_autograd_cach": 269, "torchinductor_cache_dir": 269, "torchinductor_fx_graph_remote_cach": 269, "torchinductor_autograd_remote_cach": 269, "torchinductor_autotune_remote_cach": 269, "torchinductor_force_disable_cach": 269, "offer": 270, "mega": 270, "modular": 270, "torchinductor": 270, "triton": [270, 272], "remot": 270, "rewrit": 271, "mul": 271, "triton_op": 272, "fallback": 272, "flopcount": 272, "set_stanc": 273, "descript": 273, "prevent": 273, "measur": 273, "crash": 273, "sooner": 273, "aotinductor": 274, "challeng": 275, "them": 275, "No": 275, "caption": 275, "cannot": 275, "mutat": 275, "frozen": 275, "promptabl": 275, "torch_log": 276, "xeon": 278, "run_cpu": 278, "Will": 278, "command": 278, "explan": 278}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [19, "overview"], [112, "overview"], [116, "overview"], [123, "overview"], [140, "overview"], [148, "overview"], [153, "overview"], [176, "overview"], [196, "overview"], [235, "overview"], [260, "overview"]], "Prerequisites": [[1, "prerequisites"], [103, "prerequisites"], [112, "prerequisites"], [116, "prerequisites"], [170, "prerequisites"], [196, "prerequisites"], [212, "prerequisites"], [228, "prerequisites"], [232, "prerequisites"], [250, "prerequisites"], [265, "prerequisites"], [269, "prerequisites"], [270, "prerequisites"], [272, "prerequisites"], [273, "prerequisites"], [274, "prerequisites"], [275, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [148, "environment"], [155, "environment"]], "Transforms": [[1, "transforms"], [43, "transforms"], [54, "transforms"], [171, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [171, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [171, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [38, "optimizer"], [102, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [15, "conclusion"], [16, "conclusion"], [17, "conclusion"], [19, "conclusion"], [22, "conclusion"], [52, "conclusion"], [85, "conclusion"], [103, "conclusion"], [112, "conclusion"], [113, "conclusion"], [116, "conclusion"], [123, "conclusion"], [134, "conclusion"], [135, "conclusion"], [140, "conclusion"], [148, "conclusion"], [152, "conclusion"], [153, "conclusion"], [155, "conclusion"], [156, "conclusion"], [162, "conclusion"], [165, "conclusion"], [167, "conclusion"], [176, "conclusion"], [186, "conclusion"], [188, "conclusion"], [189, "conclusion"], [192, "conclusion"], [194, "conclusion"], [196, "conclusion"], [197, "conclusion"], [198, "conclusion"], [199, "conclusion"], [200, "conclusion"], [205, "conclusion"], [206, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [212, "conclusion"], [214, "conclusion"], [215, "conclusion"], [221, "conclusion"], [224, "conclusion"], [226, "conclusion"], [227, "conclusion"], [228, "conclusion"], [229, "conclusion"], [232, "conclusion"], [233, "conclusion"], [249, "conclusion"], [257, "conclusion"], [260, "conclusion"], [265, "conclusion"], [269, "conclusion"], [270, "conclusion"], [271, "conclusion"], [272, "conclusion"], [273, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [278, "conclusion"]], "Next Steps": [[1, "next-steps"], [170, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [85, "getting-started"], [234, "getting-started"], [235, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "PyTorch Custom Operators": [[8, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[8, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[8, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[8, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[8, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[8, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[9, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[10, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[10, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[10, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[10, "in-place-or-view-ops"]], "Adding autograd support": [[10, "adding-autograd-support"]], "Going beyond autograd": [[10, "going-beyond-autograd"]], "Autocast": [[10, "autocast"]], "Batched": [[10, "batched"]], "Tracer": [[10, "tracer"]], "Extending dispatcher for a new backend in C++": [[11, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[11, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[11, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[11, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[11, "register-kernels-for-the-new-backend"], [16, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[11, "autograd-support-for-the-new-backend"]], "Build an extension": [[11, "build-an-extension"]], "Custom operator support": [[11, "custom-operator-support"]], "JIT support": [[11, "jit-support"]], "Testing your backend against native PyTorch backends": [[11, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[11, "backward-compatibility"]], "Known issues & additional notes": [[11, "known-issues-additional-notes"]], "Future Work": [[11, "future-work"], [16, "future-work"]], "Stay in touch": [[11, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[12, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[12, "requirements"], [19, "requirements"], [169, "requirements"], [215, "requirements"], [225, "requirements"], [241, "requirements"], [279, "requirements"]], "What is Join?": [[12, "what-is-join"]], "Using Join with DistributedDataParallel": [[12, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[12, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[12, "passing-keyword-arguments"]], "How Does Join Work?": [[12, "how-does-join-work"]], "Joinable": [[12, "joinable"]], "JoinHook": [[12, "joinhook"]], "Join": [[12, "join"]], "Making a Toy Class Work with Join": [[12, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[13, "neural-transfer-using-pytorch"]], "Introduction": [[13, "introduction"], [55, "introduction"], [63, "introduction"], [94, "id1"], [100, "id1"], [102, "id1"], [134, "introduction"], [165, "introduction"], [181, "introduction"], [184, "introduction"], [194, "introduction"], [199, "introduction"], [200, "introduction"], [208, "introduction"], [209, "introduction"], [212, "introduction"], [217, "introduction"], [220, "introduction"], [221, "introduction"], [247, "introduction"], [250, "introduction"], [261, "introduction"], [262, "introduction"], [263, "introduction"], [269, "introduction"], [270, "introduction"]], "Underlying Principle": [[13, "underlying-principle"]], "Importing Packages and Selecting a Device": [[13, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[13, "loading-the-images"]], "Loss Functions": [[13, "loss-functions"], [98, "loss-functions"]], "Content Loss": [[13, "content-loss"]], "Style Loss": [[13, "style-loss"]], "Importing the Model": [[13, "importing-the-model"]], "Gradient Descent": [[13, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[14, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[14, "parameter-less-example"]], "Parametrized example": [[14, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[15, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[15, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[15, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[15, "environment-metadata-env-spec"]], "Specs shape": [[15, "specs-shape"]], "Reproducible experiments: seeding": [[15, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[15, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[15, "testing-our-environment"]], "Transforming an environment": [[15, "transforming-an-environment"]], "Writing custom transforms": [[15, "writing-custom-transforms"]], "Executing a rollout": [[15, "executing-a-rollout"]], "Batching computations": [[15, "batching-computations"]], "Training a simple policy": [[15, "training-a-simple-policy"]], "Training loop": [[15, "training-loop"], [148, "training-loop"], [171, "training-loop"], [172, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[16, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[16, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[16, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[16, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[16, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[16, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[16, "other-modules"]], "How to Improve User Experience with Privateuse1": [[16, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[16, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[16, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[16, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[17, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[17, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[17, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[17, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[17, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[18, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[19, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[19, "what-problem-does-semi-structured-sparsity-solve"], [215, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[19, "intro-setup"], [215, "intro-setup"]], "Establishing a baseline": [[19, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[19, "pruning-bert-to-be-2-4-sparse"], [215, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[19, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[20, "computation-times"], [41, "computation-times"], [50, "computation-times"], [67, "computation-times"], [73, "computation-times"], [77, "computation-times"], [89, "computation-times"], [99, "computation-times"], [109, "computation-times"], [117, "computation-times"], [121, "computation-times"], [178, "computation-times"], [216, "computation-times"], [256, "computation-times"], [267, "computation-times"], [280, "computation-times"]], "Exploring TorchRec sharding": [[21, "exploring-torchrec-sharding"]], "Installation": [[21, "installation"], [94, "installation"], [235, "installation"], [258, "installation"]], "Distributed Setup": [[21, "distributed-setup"]], "Constructing our embedding model": [[21, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[21, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[21, "multiprocessing-execution"]], "Table Wise Sharding": [[21, "table-wise-sharding"]], "Explore other sharding modes": [[21, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[22, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[22, "model-architecture"]], "2. Helper functions": [[22, "helper-functions"]], "3. Define dataset and data loaders": [[22, "define-dataset-and-data-loaders"]], "ImageNet Data": [[22, "imagenet-data"]], "4. Post-training static quantization": [[22, "post-training-static-quantization"]], "5. Quantization-aware training": [[22, "quantization-aware-training"]], "Speedup from quantization": [[22, "speedup-from-quantization"]], "Semi-Supervised Learning using USB built upon PyTorch": [[26, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[26, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[26, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[26, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Audio Data Augmentation": [[27, "audio-data-augmentation"]], "Audio Datasets": [[28, "audio-datasets"]], "Audio Feature Augmentation": [[29, "audio-feature-augmentation"]], "Audio Feature Extractions": [[30, "audio-feature-extractions"]], "Audio I/O": [[31, "audio-i-o"]], "Audio Resampling": [[32, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[33, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[33, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[33, "computing-gradients"]], "Disabling Gradient Tracking": [[33, "disabling-gradient-tracking"]], "More on Computational Graphs": [[33, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[33, "optional-reading-tensor-gradients-and-jacobian-products"]], "Further Reading": [[33, "further-reading"], [34, "further-reading"], [35, "further-reading"], [38, "further-reading"], [43, "further-reading"], [56, "further-reading"], [58, "further-reading"], [59, "further-reading"], [118, "further-reading"], [123, "further-reading"], [143, "further-reading"], [144, "further-reading"], [148, "further-reading"], [193, "further-reading"], [205, "further-reading"], [207, "further-reading"], [208, "further-reading"], [260, "further-reading"]], "Build the Neural Network": [[34, "build-the-neural-network"]], "Get Device for Training": [[34, "get-device-for-training"]], "Define the Class": [[34, "define-the-class"]], "Model Layers": [[34, "model-layers"]], "nn.Flatten": [[34, "nn-flatten"]], "nn.Linear": [[34, "nn-linear"]], "nn.ReLU": [[34, "nn-relu"]], "nn.Sequential": [[34, "nn-sequential"]], "nn.Softmax": [[34, "nn-softmax"]], "Model Parameters": [[34, "model-parameters"]], "Datasets & DataLoaders": [[35, "datasets-dataloaders"]], "Loading a Dataset": [[35, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[35, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[35, "creating-a-custom-dataset-for-your-files"]], "__init__": [[35, "init"]], "__len__": [[35, "len"]], "__getitem__": [[35, "getitem"]], "Preparing your data for training with DataLoaders": [[35, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[35, "iterate-through-the-dataloader"]], "Learn the Basics": [[36, "learn-the-basics"], [37, "learn-the-basics"]], "Running the Tutorial Code": [[37, "running-the-tutorial-code"], [97, "running-the-tutorial-code"]], "How to Use this Guide": [[37, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[38, "optimizing-model-parameters"]], "Prerequisite Code": [[38, "prerequisite-code"]], "Hyperparameters": [[38, "hyperparameters"]], "Optimization Loop": [[38, "optimization-loop"]], "Loss Function": [[38, "loss-function"], [49, "loss-function"], [102, "loss-function"]], "Full Implementation": [[38, "full-implementation"]], "Quickstart": [[39, "quickstart"]], "Working with data": [[39, "working-with-data"]], "Creating Models": [[39, "creating-models"]], "Optimizing the Model Parameters": [[39, "optimizing-the-model-parameters"]], "Saving Models": [[39, "saving-models"]], "Loading Models": [[39, "loading-models"]], "Save and Load the Model": [[40, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[40, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[40, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[40, "related-tutorials"]], "Tensors": [[42, "tensors"], [51, "tensors"], [83, "tensors"], [119, "tensors"], [119, "id1"]], "Initializing a Tensor": [[42, "initializing-a-tensor"]], "Attributes of a Tensor": [[42, "attributes-of-a-tensor"]], "Operations on Tensors": [[42, "operations-on-tensors"]], "Bridge with NumPy": [[42, "bridge-with-numpy"], [51, "bridge-with-numpy"]], "Tensor to NumPy array": [[42, "tensor-to-numpy-array"], [51, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[42, "numpy-array-to-tensor"], [51, "numpy-array-to-tensor"]], "ToTensor()": [[43, "totensor"]], "Lambda Transforms": [[43, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[44, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[45, "a-gentle-introduction-to-torch-autograd"]], "Background": [[45, "background"], [165, "background"]], "Usage in PyTorch": [[45, "usage-in-pytorch"]], "Differentiation in Autograd": [[45, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[45, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[45, "computational-graph"]], "Exclusion from the DAG": [[45, "exclusion-from-the-dag"]], "Further readings:": [[45, "further-readings"]], "Training a Classifier": [[46, "training-a-classifier"]], "What about data?": [[46, "what-about-data"]], "Training an image classifier": [[46, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[46, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[46, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[46, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[46, "train-the-network"]], "5. Test the network on the test data": [[46, "test-the-network-on-the-test-data"]], "Training on GPU": [[46, "training-on-gpu"]], "Training on multiple GPUs": [[46, "training-on-multiple-gpus"]], "Where do I go next?": [[46, "where-do-i-go-next"]], "Optional: Data Parallelism": [[47, "optional-data-parallelism"]], "Imports and parameters": [[47, "imports-and-parameters"]], "Dummy DataSet": [[47, "dummy-dataset"]], "Simple Model": [[47, "simple-model"]], "Create Model and DataParallel": [[47, "create-model-and-dataparallel"]], "Run the Model": [[47, "run-the-model"]], "Results": [[47, "results"], [55, "results"], [78, "results"], [171, "results"]], "2 GPUs": [[47, "gpus"]], "3 GPUs": [[47, "id1"]], "8 GPUs": [[47, "id2"]], "Summary": [[47, "summary"], [132, "summary"], [176, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[48, "deep-learning-with-pytorch-a-60-minute-blitz"], [60, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[49, "neural-networks"]], "Define the network": [[49, "define-the-network"]], "Backprop": [[49, "backprop"]], "Update the weights": [[49, "update-the-weights"]], "Tensor Initialization": [[51, "tensor-initialization"]], "Tensor Attributes": [[51, "tensor-attributes"]], "Tensor Operations": [[51, "tensor-operations"]], "Chatbot Tutorial": [[52, "chatbot-tutorial"]], "Preparations": [[52, "preparations"]], "Load & Preprocess Data": [[52, "load-preprocess-data"]], "Create formatted data file": [[52, "create-formatted-data-file"]], "Load and trim data": [[52, "load-and-trim-data"]], "Prepare Data for Models": [[52, "prepare-data-for-models"]], "Define Models": [[52, "define-models"]], "Seq2Seq Model": [[52, "seq2seq-model"]], "Encoder": [[52, "encoder"]], "Decoder": [[52, "decoder"]], "Define Training Procedure": [[52, "define-training-procedure"]], "Masked loss": [[52, "masked-loss"]], "Single training iteration": [[52, "single-training-iteration"]], "Training iterations": [[52, "training-iterations"]], "Define Evaluation": [[52, "define-evaluation"]], "Greedy decoding": [[52, "greedy-decoding"]], "Evaluate my text": [[52, "evaluate-my-text"]], "Run Model": [[52, "run-model"]], "Run Training": [[52, "run-training"]], "Run Evaluation": [[52, "run-evaluation"]], "Running Tutorials in Google Colab": [[53, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[53, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[53, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[53, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[54, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[54, "dataset-class"]], "Compose transforms": [[54, "compose-transforms"]], "Iterating through the dataset": [[54, "iterating-through-the-dataset"]], "Afterword: torchvision": [[54, "afterword-torchvision"]], "DCGAN Tutorial": [[55, "dcgan-tutorial"]], "Generative Adversarial Networks": [[55, "generative-adversarial-networks"]], "What is a GAN?": [[55, "what-is-a-gan"]], "What is a DCGAN?": [[55, "what-is-a-dcgan"]], "Inputs": [[55, "inputs"], [78, "inputs"]], "Data": [[55, "data"]], "Implementation": [[55, "implementation"], [78, "implementation"]], "Weight Initialization": [[55, "weight-initialization"]], "Generator": [[55, "generator"]], "Discriminator": [[55, "discriminator"]], "Loss Functions and Optimizers": [[55, "loss-functions-and-optimizers"]], "Training": [[55, "training"], [138, "training"], [139, "training"], [172, "training"], [177, "training"], [234, "training"], [234, "id5"]], "Where to Go Next": [[55, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[56, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[56, "why-use-torchrun"]], "Graceful restarts": [[56, "graceful-restarts"]], "Process group initialization": [[56, "process-group-initialization"]], "Use torchrun-provided environment variables": [[56, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[56, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[56, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[56, "resuming-training"]], "Running the script": [[56, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[57, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[57, "running-the-code"]], "Tutorial sections": [[57, "tutorial-sections"]], "Multi GPU training with DDP": [[58, "multi-gpu-training-with-ddp"]], "Imports": [[58, "imports"]], "Constructing the process group": [[58, "constructing-the-process-group"]], "Constructing the DDP model": [[58, "constructing-the-ddp-model"]], "Distributing input data": [[58, "distributing-input-data"]], "Saving model checkpoints": [[58, "saving-model-checkpoints"]], "Running the distributed training job": [[58, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[59, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[59, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[60, "what-is-pytorch"]], "Goal of this tutorial:": [[60, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[61, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[62, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[63, "pytorch-distributed-overview"]], "Parallelism APIs": [[63, "parallelism-apis"]], "Sharding primitives": [[63, "sharding-primitives"]], "Communications APIs": [[63, "communications-apis"]], "Launcher": [[63, "launcher"]], "Applying Parallelism To Scale Your Model": [[63, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[63, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[65, "pytorch-tensors-and-autograd"], [119, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[66, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[68, "pytorch-control-flow-weight-sharing"], [119, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[70, "pytorch-custom-nn-modules"], [119, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[71, "pytorch-nn"], [119, "pytorch-nn"]], "PyTorch: optim": [[72, "pytorch-optim"], [119, "pytorch-optim"]], "Warm-up: numpy": [[75, "warm-up-numpy"], [119, "warm-up-numpy"]], "PyTorch: Tensors": [[76, "pytorch-tensors"], [119, "pytorch-tensors"]], "Adversarial Example Generation": [[78, "adversarial-example-generation"]], "Threat Model": [[78, "threat-model"]], "Fast Gradient Sign Attack": [[78, "fast-gradient-sign-attack"]], "Model Under Attack": [[78, "model-under-attack"]], "FGSM Attack": [[78, "fgsm-attack"]], "Testing Function": [[78, "testing-function"]], "Run Attack": [[78, "run-attack"]], "Accuracy vs Epsilon": [[78, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[78, "sample-adversarial-examples"]], "Where to go next?": [[78, "where-to-go-next"]], "Finetuning Torchvision Models": [[79, "finetuning-torchvision-models"]], "Autograd": [[80, "autograd"], [119, "autograd"], [119, "id2"]], "nn Package": [[81, "nn-package"]], "Multi-GPU Examples": [[82, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[84, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[85, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[85, "installing-hta"]], "Temporal Breakdown": [[85, "temporal-breakdown"]], "Idle Time Breakdown": [[85, "idle-time-breakdown"]], "Kernel Breakdown": [[85, "kernel-breakdown"]], "Kernel Duration Distribution": [[85, "kernel-duration-distribution"]], "Communication Computation Overlap": [[85, "communication-computation-overlap"]], "Augmented Counters": [[85, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[85, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[85, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[86, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[88, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[88, "hybrid-frontend-information"]], "Motivating Example": [[88, "motivating-example"]], "Part 1 - Tracing a pure python function": [[88, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[88, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[88, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[88, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[88, "top-level-module"]], "Running the Model": [[88, "running-the-model"]], "Tracing the Top-Level Model": [[88, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[90, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[91, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[91, "setup-imports"]], "Data loaders": [[91, "data-loaders"]], "Configurable neural network": [[91, "configurable-neural-network"]], "The train function": [[91, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[91, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[91, "communicating-with-ray-tune"]], "Full training function": [[91, "full-training-function"]], "Test set accuracy": [[91, "test-set-accuracy"]], "Configuring the search space": [[91, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[92, "introduction-to-pytorch-youtube-series"], [97, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[93, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[93, "what-do-we-need-autograd-for"]], "A Simple Example": [[93, "a-simple-example"]], "Autograd in Training": [[93, "autograd-in-training"]], "Turning Autograd Off and On": [[93, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[93, "autograd-and-in-place-operations"]], "Autograd Profiler": [[93, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[93, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[93, "the-high-level-api"]], "Model Understanding with Captum": [[94, "model-understanding-with-captum"]], "A First Example": [[94, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[94, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[94, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[94, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[94, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[95, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[96, "introduction-to-pytorch"], [107, "introduction-to-pytorch"]], "PyTorch Tensors": [[96, "pytorch-tensors"]], "PyTorch Models": [[96, "pytorch-models"]], "Datasets and Dataloaders": [[96, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[96, "training-your-pytorch-model"]], "Building Models with PyTorch": [[98, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[98, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[98, "common-layer-types"]], "Linear Layers": [[98, "linear-layers"]], "Convolutional Layers": [[98, "convolutional-layers"]], "Recurrent Layers": [[98, "recurrent-layers"]], "Transformers": [[98, "transformers"]], "Other Layers and Functions": [[98, "other-layers-and-functions"]], "Data Manipulation Layers": [[98, "data-manipulation-layers"]], "Activation Functions": [[98, "activation-functions"]], "PyTorch TensorBoard Support": [[100, "pytorch-tensorboard-support"]], "Before You Start": [[100, "before-you-start"]], "Showing Images in TensorBoard": [[100, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[100, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[100, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[100, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[100, "other-resources"], [102, "other-resources"]], "Introduction to PyTorch Tensors": [[101, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[101, "creating-tensors"], [107, "creating-tensors"]], "Random Tensors and Seeding": [[101, "random-tensors-and-seeding"]], "Tensor Shapes": [[101, "tensor-shapes"]], "Tensor Data Types": [[101, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[101, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[101, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[101, "more-math-with-tensors"]], "Altering Tensors in Place": [[101, "altering-tensors-in-place"]], "Copying Tensors": [[101, "copying-tensors"]], "Moving to Accelerator": [[101, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[101, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[101, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[101, "numpy-bridge"]], "Training with PyTorch": [[102, "training-with-pytorch"]], "Dataset and DataLoader": [[102, "dataset-and-dataloader"]], "The Model": [[102, "the-model"]], "The Training Loop": [[102, "the-training-loop"]], "Per-Epoch Activity": [[102, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[103, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[103, "loading-cifar-10"]], "Defining model classes and utility functions": [[103, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[103, "cross-entropy-runs"]], "Knowledge distillation run": [[103, "knowledge-distillation-run"]], "Cosine loss minimization run": [[103, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[103, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[104, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[104, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[104, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[104, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[104, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[105, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[105, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[105, "affine-maps"]], "Non-Linearities": [[105, "non-linearities"]], "Softmax and Probabilities": [[105, "softmax-and-probabilities"]], "Objective Functions": [[105, "objective-functions"]], "Optimization and Training": [[105, "optimization-and-training"]], "Creating Network Components in PyTorch": [[105, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[105, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[106, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[107, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[107, "operations-with-tensors"]], "Reshaping Tensors": [[107, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[107, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[108, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[108, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[108, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[108, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[110, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[110, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[110, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[110, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[110, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[111, "what-is-torch-nn-really"]], "MNIST data setup": [[111, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[111, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[111, "using-torch-nn-functional"]], "Refactor using nn.Module": [[111, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[111, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[111, "refactor-using-torch-optim"]], "Refactor using Dataset": [[111, "refactor-using-dataset"]], "Refactor using DataLoader": [[111, "refactor-using-dataloader"]], "Add validation": [[111, "add-validation"]], "Create fit() and get_data()": [[111, "create-fit-and-get-data"]], "Switch to CNN": [[111, "switch-to-cnn"]], "Using nn.Sequential": [[111, "using-nn-sequential"]], "Wrapping DataLoader": [[111, "wrapping-dataloader"]], "Using your Accelerator": [[111, "using-your-accelerator"]], "Closing thoughts": [[111, "closing-thoughts"]], "Export a model with control flow to ONNX": [[112, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[112, "define-the-models"]], "Exporting the Model: First Attempt": [[112, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[112, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[112, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[112, "further-reading"], [113, "further-reading"], [115, "further-reading"], [116, "further-reading"]], "Export a PyTorch model to ONNX": [[113, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[113, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[113, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[113, "export-the-model-to-onnx-format"]], "4. Save the ONNX model in a file": [[113, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[113, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[113, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[113, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[114, "onnx"]], "Introduction to ONNX": [[115, "introduction-to-onnx"]], "Dependencies": [[115, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[116, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[116, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[116, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[116, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[118, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[118, "performance-debugging-using-profiler"]], "Profile the forward pass": [[118, "profile-the-forward-pass"]], "Print profiler results": [[118, "print-profiler-results"]], "Improve memory performance": [[118, "improve-memory-performance"]], "Improve time performance": [[118, "improve-time-performance"]], "Learning PyTorch with Examples": [[119, "learning-pytorch-with-examples"]], "Table of Contents": [[119, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[119, "pytorch-defining-new-autograd-functions"]], "nn module": [[119, "nn-module"], [119, "id3"]], "Examples": [[119, "examples"], [214, "examples"], [273, "examples"]], "Saving and Loading Models": [[120, "saving-and-loading-models"]], "What is a state_dict?": [[120, "what-is-a-state-dict"]], "Example:": [[120, "example"]], "Saving & Loading Model for Inference": [[120, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[120, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[120, "save-load-entire-model"]], "Saving an Exported Program": [[120, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[120, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[120, "save"], [120, "id1"], [120, "id3"]], "Load:": [[120, "load"], [120, "id2"], [120, "id4"]], "Saving Multiple Models in One File": [[120, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[120, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[120, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[120, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[120, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[120, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[120, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[122, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[123, "template-tutorial"]], "Steps": [[123, "steps"], [181, "steps"], [245, "steps"], [247, "steps"], [250, "steps"], [261, "steps"], [262, "steps"], [263, "steps"], [265, "steps"]], "(Optional) Additional Exercises": [[123, "optional-additional-exercises"]], "Text classification with the torchtext library": [[124, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[125, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[126, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[126, "load-data"]], "Visualize a few images": [[126, "visualize-a-few-images"]], "Training the model": [[126, "training-the-model"], [179, "training-the-model"]], "Visualizing the model predictions": [[126, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[126, "finetuning-the-convnet"]], "Train and evaluate": [[126, "train-and-evaluate"], [126, "id1"]], "ConvNet as fixed feature extractor": [[126, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[126, "inference-on-custom-images"]], "Further Learning": [[126, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[127, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[128, "language-translation-with-nn-transformer-and-torchtext"]], "Distributed and Parallel Training Tutorials": [[129, "distributed-and-parallel-training-tutorials"]], "Learn DDP": [[129, "learn-ddp"]], "Learn FSDP": [[129, "learn-fsdp"]], "Learn Tensor Parallel (TP)": [[129, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[129, "learn-devicemesh"]], "Learn RPC": [[129, "learn-rpc"]], "Custom Extensions": [[129, "custom-extensions"]], "Welcome to PyTorch Tutorials": [[130, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[130, "additional-resources"], [167, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[131, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[131, "how-fsdp-works"]], "How to use FSDP": [[131, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[132, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[132, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[132, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[132, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[132, "transformer-wrapping-policy"]], "Mixed Precision": [[132, "mixed-precision"]], "Intializing FSDP Model on Device": [[132, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[132, "sharding-strategy"]], "Backward Prefetch": [[132, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[132, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[133, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[133, "how-fsdp2-works"]], "How to use FSDP2": [[133, "how-to-use-fsdp2"]], "Model Initialization": [[133, "model-initialization"]], "Forward/Backward with Prefetching": [[133, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[133, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[133, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[133, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[133, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[133, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[134, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[134, "performance-benchmark"]], "Impact": [[134, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[134, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[134, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[134, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[135, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[135, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[135, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[135, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[135, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[135, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[135, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[136, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[136, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[136, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[136, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[136, "saved-tensors-hooks"]], "Some unconventional examples": [[136, "some-unconventional-examples"]], "Returning an int": [[136, "returning-an-int"]], "Returning a tuple": [[136, "returning-a-tuple"]], "Returning a str": [[136, "returning-a-str"]], "Saving tensors to CPU": [[136, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[136, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[137, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[137, "defining-the-torchx-app"]], "Setting up the Runner": [[137, "setting-up-the-runner"]], "Setting up the SearchSpace": [[137, "setting-up-the-searchspace"]], "Setting up Metrics": [[137, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[137, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[137, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[137, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[137, "configuring-the-scheduler"]], "Running the optimization": [[137, "running-the-optimization"]], "Evaluating the results": [[137, "evaluating-the-results"]], "Acknowledgments": [[137, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[138, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[138, "recommended-preparation"]], "Preparing Torch": [[138, "preparing-torch"]], "Preparing the Data": [[138, "preparing-the-data"], [139, "preparing-the-data"]], "Turning Names into Tensors": [[138, "turning-names-into-tensors"]], "Creating the Network": [[138, "creating-the-network"], [139, "creating-the-network"]], "Training the Network": [[138, "training-the-network"], [139, "training-the-network"]], "Plotting the Results": [[138, "plotting-the-results"]], "Evaluating the Results": [[138, "evaluating-the-results"]], "Exercises": [[138, "exercises"], [139, "exercises"], [177, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[139, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[139, "preparing-for-training"]], "Plotting the Losses": [[139, "plotting-the-losses"]], "Sampling the Network": [[139, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[140, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[140, "setup"], [147, "setup"], [148, "setup"], [159, "setup"], [167, "setup"], [181, "setup"], [194, "setup"], [247, "setup"], [250, "setup"], [261, "setup"], [262, "setup"], [263, "setup"], [265, "setup"], [276, "setup"]], "Basic usage": [[140, "basic-usage"]], "Inspecting the compiled autograd logs": [[140, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[140, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[140, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[140, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[141, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[141, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[141, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[141, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[141, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[141, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[142, "double-backward-with-custom-functions"]], "Saving the Inputs": [[142, "saving-the-inputs"]], "Saving the Outputs": [[142, "saving-the-outputs"]], "Saving Intermediate Results": [[142, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[142, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[142, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[143, "training-real-world-models-with-ddp"]], "Files used for training": [[143, "files-used-for-training"]], "Saving and Loading from the cloud": [[143, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[143, "using-mixed-precision"]], "When is DDP not enough?": [[143, "when-is-ddp-not-enough"]], "Multinode Training": [[144, "multinode-training"]], "Local and Global ranks": [[144, "local-and-global-ranks"]], "Heteregeneous Scaling": [[144, "heteregeneous-scaling"]], "Troubleshooting": [[144, "troubleshooting"], [244, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[145, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[145, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[145, "basic-use-case"]], "Skewed Processing Speeds": [[145, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[145, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[145, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[145, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[146, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[147, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[147, "point-to-point-communication"]], "Collective Communication": [[147, "collective-communication"]], "Distributed Training": [[147, "distributed-training"]], "Our Own Ring-Allreduce": [[147, "our-own-ring-allreduce"]], "Advanced Topics": [[147, "advanced-topics"]], "Communication Backends": [[147, "communication-backends"]], "Initialization Methods": [[147, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[148, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[148, "policy"], [171, "policy"]], "Convolutional network": [[148, "convolutional-network"]], "LSTM Module": [[148, "lstm-module"]], "MLP": [[148, "mlp"]], "Using the Q-Values to select an action": [[148, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[148, "using-the-model-for-the-loss"]], "DQN Loss": [[148, "dqn-loss"]], "Collector and replay buffer": [[148, "collector-and-replay-buffer"]], "Model ensembling": [[149, "model-ensembling"]], "What is model ensembling?": [[149, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[149, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[149, "performance"]], "Forced Alignment with Wav2Vec2": [[150, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[151, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[151, "basic-usage"], [186, "basic-usage"], [188, "basic-usage"], [233, "basic-usage"], [272, "basic-usage"]], "Usage with Modules": [[151, "usage-with-modules"]], "Using the functional Module API (beta)": [[151, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[151, "custom-autograd-function"]], "Functional API (beta)": [[151, "functional-api-beta"]], "Using the functional API with Modules": [[151, "using-the-functional-api-with-modules"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[152, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[152, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[152, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[152, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[153, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[153, "debugging"]], "Get more logging information": [[153, "get-more-logging-information"]], "Determine component of error": [[153, "determine-component-of-error"]], "Compilation error": [[153, "compilation-error"]], "Accuracy debugging": [[153, "accuracy-debugging"]], "Performance profiling": [[153, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[154, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[154, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[154, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[154, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[154, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[154, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[155, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[155, "rl-definitions"]], "Initialize Environment": [[155, "initialize-environment"]], "Preprocess Environment": [[155, "preprocess-environment"]], "Agent": [[155, "agent"]], "Act": [[155, "act"]], "Cache and Recall": [[155, "cache-and-recall"]], "Learn": [[155, "learn"]], "Neural Network": [[155, "neural-network"]], "TD Estimate & TD Target": [[155, "td-estimate-td-target"]], "Updating the model": [[155, "updating-the-model"]], "Save checkpoint": [[155, "save-checkpoint"]], "Putting it all together": [[155, "putting-it-all-together"]], "Logging": [[155, "logging"]], "Let\u2019s play!": [[155, "lets-play"]], "Channels Last Memory Format in PyTorch": [[156, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[156, "memory-format-api"]], "Performance Gains": [[156, "performance-gains"]], "Converting existing models": [[156, "converting-existing-models"]], "Work to do": [[156, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[158, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[159, "neural-tangent-kernels"]], "Create a function version of the model": [[159, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[159, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[159, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[160, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[161, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[162, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[162, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[162, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[162, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[162, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[162, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[163, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[163, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[163, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[163, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[163, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[163, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[163, "concatenating-parametrizations"]], "Initializing parametrizations": [[163, "initializing-parametrizations"]], "Removing parametrizations": [[163, "removing-parametrizations"]], "Per-sample-gradients": [[164, "per-sample-gradients"]], "What is it?": [[164, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[164, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[164, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[165, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[165, "what-you-will-learn"], [196, "what-you-will-learn"], [274, "what-you-will-learn"]], "Preamble": [[165, "preamble"]], "Memory management basics": [[165, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[165, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[165, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[165, "a-pytorch-perspective"]], "pin_memory()": [[165, "pin-memory"]], "non_blocking=True": [[165, "non-blocking-true"]], "Synergies": [[165, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[165, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[165, "practical-recommendations"]], "Additional considerations": [[165, "additional-considerations"]], "Additional resources": [[165, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[166, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[167, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[167, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[167, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[167, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[168, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[168, "basics"], [173, "basics"]], "Step 1: Implement a Subclass of Backend": [[168, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[168, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[168, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[168, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[169, "pruning-tutorial"]], "Create a model": [[169, "create-a-model"]], "Inspect a Module": [[169, "inspect-a-module"]], "Pruning a Module": [[169, "pruning-a-module"]], "Iterative Pruning": [[169, "iterative-pruning"]], "Serializing a pruned model": [[169, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[169, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[169, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[169, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[169, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[170, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[170, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[170, "installing-pytorch-and-opencv"]], "Video Capture": [[170, "video-capture"]], "Image Preprocessing": [[170, "image-preprocessing"]], "Model Choices": [[170, "model-choices"]], "MobileNetV2: Quantization and JIT": [[170, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[170, "putting-it-together"]], "Troubleshooting: Performance": [[170, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[171, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[171, "define-hyperparameters"]], "Data collection parameters": [[171, "data-collection-parameters"]], "PPO parameters": [[171, "ppo-parameters"]], "Define an environment": [[171, "define-an-environment"]], "Normalization": [[171, "normalization"]], "Value network": [[171, "value-network"]], "Loss function": [[171, "loss-function"]], "Conclusion and next steps": [[171, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[172, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[172, "replay-memory"]], "DQN algorithm": [[172, "dqn-algorithm"]], "Q-network": [[172, "q-network"]], "Hyperparameters and utilities": [[172, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[173, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[173, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[173, "batch-processing-cartpole-solver"]], "Learn More": [[173, "learn-more"], [181, "learn-more"], [245, "learn-more"], [247, "learn-more"], [250, "learn-more"], [258, "learn-more"], [261, "learn-more"], [262, "learn-more"], [263, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[174, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[175, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[175, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[175, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[176, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[176, "fused-implementations"]], "Explicit Dispatcher Control": [[176, "explicit-dispatcher-control"]], "Hardware dependence": [[176, "hardware-dependence"]], "Causal Self Attention": [[176, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[176, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[176, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[176, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[177, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[177, "loading-data-files"]], "The Seq2Seq Model": [[177, "the-seq2seq-model"]], "The Encoder": [[177, "the-encoder"]], "The Decoder": [[177, "the-decoder"]], "Simple Decoder": [[177, "simple-decoder"]], "Attention Decoder": [[177, "attention-decoder"]], "Preparing Training Data": [[177, "preparing-training-data"]], "Training the Model": [[177, "training-the-model"]], "Plotting results": [[177, "plotting-results"]], "Evaluation": [[177, "evaluation"]], "Training and Evaluating": [[177, "training-and-evaluating"]], "Visualizing Attention": [[177, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[179, "spatial-transformer-networks-tutorial"]], "Loading the data": [[179, "loading-the-data"]], "Depicting spatial transformer networks": [[179, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[179, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[180, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[181, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[181, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[181, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[181, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[181, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[181, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[181, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[181, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[182, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[182, "tensorboard-setup"]], "2. Writing to TensorBoard": [[182, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[182, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[182, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[182, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[182, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[183, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[184, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[184, "setting-up-the-environment"]], "Importing related libraries": [[184, "importing-related-libraries"]], "Clean-up before a run": [[184, "clean-up-before-a-run"]], "Downloading the data": [[184, "downloading-the-data"]], "Reading the data": [[184, "reading-the-data"]], "Classify image patches": [[184, "classify-image-patches"]], "Define PatchPredictor model": [[184, "define-patchpredictor-model"]], "Predict patch labels": [[184, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[184, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[184, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[184, "where-to-go-from-here"]], "Building a Convolution/Batch Norm fuser with torch.compile": [[185, "building-a-convolution-batch-norm-fuser-with-torch-compile"]], "Fusing Convolution with Batch Norm": [[185, "fusing-convolution-with-batch-norm"], [185, "id1"]], "Pattern Matching with torch.compile": [[185, "pattern-matching-with-torch-compile"]], "Testing out our Fusion Pass": [[185, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[185, "benchmarking-our-fusion-on-resnet18"]], "Introduction to torch.compile": [[186, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[186, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[186, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[186, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[186, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[186, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[187, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[188, "torch-export-tutorial"]], "Graph Breaks": [[188, "graph-breaks"]], "Non-Strict Export": [[188, "non-strict-export"]], "Control Flow Ops": [[188, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[188, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[188, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[188, "specialization"]], "Named Dims": [[188, "named-dims"]], "Constraint violations, suggested fixes": [[188, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[188, "data-dependent-errors"]], "Guards, torch._check()": [[188, "guards-torch-check"]], "Specialized values": [[188, "specialized-values"]], "Custom Ops": [[188, "custom-ops"]], "IR/Decompositions": [[188, "ir-decompositions"]], "ExportDB": [[188, "exportdb"]], "Running the Exported Program": [[188, "running-the-exported-program"]], "Introduction to TorchRec": [[189, "introduction-to-torchrec"], [190, "introduction-to-torchrec"]], "Install Dependencies": [[189, "install-dependencies"]], "Embeddings": [[189, "embeddings"]], "Embeddings in RecSys": [[189, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[189, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[189, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[189, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[189, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[189, "distributed-training-and-sharding"]], "Distributed Embeddings": [[189, "distributed-embeddings"]], "Sharding": [[189, "sharding"]], "Sharded Modules": [[189, "sharded-modules"]], "Planner": [[189, "planner"]], "Planner Result": [[189, "planner-result"]], "GPU Training with LazyAwaitable": [[189, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[189, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[189, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[189, "distributedmodelparallel"]], "Sharding Best Practices": [[189, "sharding-best-practices"]], "Adding in the Optimizer": [[189, "adding-in-the-optimizer"]], "Optimizer Classes": [[189, "optimizer-classes"]], "Fused optimizer in TorchRec": [[189, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[189, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[191, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[191, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[191, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[191, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[191, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[191, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[191, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[191, "putting-everything-together"]], "Testing forward() method (Optional)": [[191, "testing-forward-method-optional"]], "Wrapping up": [[191, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[192, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[192, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[192, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[192, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[192, "multiheadattention"]], "Utilities": [[192, "utilities"]], "GPT-style layer": [[192, "gpt-style-layer"]], "Going one step further": [[192, "going-one-step-further"]], "Cross Attention": [[192, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[192, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[192, "flexattention-njt"]], "Packed Projection": [[192, "packed-projection"]], "Input projection for MultiheadAttention": [[192, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[192, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[192, "extended-examples"]], "(prototype) PyTorch BackendConfig Tutorial": [[193, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[193, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[193, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[193, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[193, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[193, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[193, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[193, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[193, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[194, "introduction-to-context-parallel"]], "Enable Context Parallel": [[194, "enable-context-parallel"]], "Select Rotation Approach": [[194, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[195, "profiling-pytorch-rpc-based-workloads"], [231, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[196, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[196, "enabling-flight-recorder"]], "Additional Settings": [[196, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[196, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[196, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[196, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[196, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[197, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[197, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[198, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[198, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[199, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[199, "prerequisites"], [209, "prerequisites"]], "Enabling the API": [[199, "enabling-the-api"]], "Example code": [[199, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[200, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[200, "software-installation"]], "Install a Compiler": [[200, "install-a-compiler"]], "Set Up Environment": [[200, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[200, "id1"]], "Intel Compiler": [[200, "id2"]], "LLVM Compiler": [[200, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[202, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[203, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[204, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[205, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[205, "introduction-and-motivation"]], "Preparation": [[205, "preparation"], [206, "preparation"], [207, "preparation"]], "Simpler Code with MaskedTensor": [[205, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[205, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[205, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[206, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[206, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[206, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[207, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[207, "using-maskedtensor"]], "Construction": [[207, "construction"]], "Accessing the data and mask": [[207, "accessing-the-data-and-mask"]], "Indexing and slicing": [[207, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[207, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[207, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[207, "torch-where"]], "Another torch.where": [[207, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[207, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[207, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[207, "safe-softmax"]], "Implementing missing torch.nan* operators": [[207, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[208, "prototype-maskedtensor-sparsity"]], "Principles": [[208, "principles"]], "Sparse COO tensors": [[208, "sparse-coo-tensors"]], "Sparse CSR tensors": [[208, "sparse-csr-tensors"]], "Supported Operations": [[208, "supported-operations"]], "Unary": [[208, "unary"]], "Binary": [[208, "binary"]], "Reductions": [[208, "reductions"]], "MaskedTensor Helper Methods": [[208, "maskedtensor-helper-methods"]], "Appendix": [[208, "appendix"]], "Sparse COO Construction": [[208, "sparse-coo-construction"]], "Sparse CSR Construction": [[208, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[209, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[209, "activating-the-max-autotune-mode"]], "Example": [[209, "example"]], "Getting Started with Nested Tensors": [[210, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[210, "nested-tensor-initialization"]], "Nested Tensor Operations": [[210, "nested-tensor-operations"]], "Why Nested Tensor": [[210, "why-nested-tensor"]], "See Also": [[210, "see-also"], [223, "see-also"], [272, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[211, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[212, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[212, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[212, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[212, "capture-fx-graph"]], "2. Apply Quantization": [[212, "apply-quantization"]], "3. Lower into OpenVINO representation": [[212, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[212, "optional-improve-quantized-model-metrics"]], "PyTorch Prototype Recipes": [[213, "pytorch-prototype-recipes"]], "Autoloading Out-of-Tree Extension": [[214, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[214, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[214, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[215, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[215, "id1"]], "Skipping Module Parameter Initialization": [[217, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[217, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[217, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[217, "implementation-details"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[218, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[219, "torch-vmap"]], "So, what is vmap?": [[219, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[220, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[220, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[220, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[220, "desktop-build"]], "Vulkan SDK": [[220, "vulkan-sdk"]], "Android build": [[220, "android-build"]], "Model preparation": [[220, "model-preparation"]], "Using Vulkan backend in code": [[220, "using-vulkan-backend-in-code"]], "C++ API": [[220, "c-api"]], "Python API": [[220, "python-api"]], "Android Java API": [[220, "android-java-api"]], "Building android test app with Vulkan": [[220, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[220, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[221, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[221, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[221, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[221, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[221, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[222, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[223, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[223, "model-setup"], [224, "model-setup"], [232, "model-setup"]], "Setting up and running the optimizer benchmark": [[223, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[224, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[224, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[224, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[225, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[225, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[225, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[226, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[226, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[226, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[227, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[227, "how-dcp-works"]], "How to use DCP": [[227, "how-to-use-dcp"]], "Saving": [[227, "saving"]], "Loading": [[227, "loading"]], "Formats": [[227, "formats"]], "Getting Started with CommDebugMode": [[228, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[228, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[228, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[229, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[229, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[229, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[229, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[229, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[232, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[232, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[232, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[233, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[233, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[233, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[233, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[233, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[234, "intel-extension-for-pytorch"]], "Features": [[234, "features"], [235, "features"]], "Examples \u2013 CPU": [[234, "examples-cpu"]], "Float32": [[234, "float32"], [234, "id1"], [234, "id3"], [234, "id6"], [234, "id9"], [234, "id12"]], "BFloat16": [[234, "bfloat16"], [234, "id2"], [234, "id4"], [234, "id7"], [234, "id10"], [234, "id13"]], "Inference - Imperative Mode": [[234, "inference-imperative-mode"], [234, "id8"]], "Inference - TorchScript Mode": [[234, "inference-torchscript-mode"], [234, "id11"]], "Examples \u2013 GPU": [[234, "examples-gpu"]], "Float16": [[234, "float16"], [234, "id14"]], "C++ (CPU only)": [[234, "c-cpu-only"]], "Model Zoo (CPU only)": [[234, "model-zoo-cpu-only"]], "Tutorials": [[234, "tutorials"], [235, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[235, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[235, "usages"]], "Model": [[235, "model"]], "Accuracy driven quantization": [[235, "accuracy-driven-quantization"]], "Quantization aware training": [[235, "quantization-aware-training"]], "Performance only quantization": [[235, "performance-only-quantization"]], "Quantization outputs": [[235, "quantization-outputs"]], "Deployment": [[235, "deployment"]], "Loading data in PyTorch": [[236, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[237, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[238, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[239, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[240, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[241, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[241, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[241, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[241, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[241, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[241, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[241, "configure-profiling-for-xpu"]], "Read Profiling Result": [[241, "read-profiling-result"]], "Read XPU Profiling Result": [[241, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[241, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[242, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[243, "model-interpretability-using-captum"]], "Before you begin": [[243, "before-you-begin"]], "Computing Attribution": [[243, "computing-attribution"]], "Visualizing the Results": [[243, "visualizing-the-results"]], "Final Notes": [[243, "final-notes"]], "Automatic Mixed Precision": [[244, "automatic-mixed-precision"]], "A simple network": [[244, "a-simple-network"]], "Default Precision": [[244, "default-precision"]], "Adding torch.autocast": [[244, "adding-torch-autocast"]], "Adding GradScaler": [[244, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[244, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[244, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[244, "saving-resuming"]], "Inference/Evaluation": [[244, "inference-evaluation"]], "Advanced topics": [[244, "advanced-topics"]], "Speedup with Amp is minor": [[244, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[244, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[244, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[245, "syntaxerror"]], "1. Defining functions to benchmark": [[245, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[245, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[245, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[245, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[245, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[245, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[245, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[245, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[246, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[247, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[247, "import-necessary-libraries-for-loading-our-data"], [261, "import-necessary-libraries-for-loading-our-data"], [262, "import-necessary-libraries-for-loading-our-data"], [263, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[247, "define-and-initialize-the-neural-network"], [262, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[247, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[247, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[248, "pytorch-recipes"], [264, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[249, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[249, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[249, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[249, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[250, "pytorch-profiler"]], "1. Import all necessary libraries": [[250, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[250, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[250, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[250, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[250, "using-tracing-functionality"]], "6. Examining stack traces": [[250, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[250, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[251, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[252, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[253, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[254, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[255, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[257, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[257, "torch-utils-swap-tensors"]], "Application to nn.Module": [[257, "application-to-nn-module"]], "nn.Module.to() and related methods": [[257, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[257, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[258, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[258, "using-tensorboard-in-pytorch"]], "Log scalars": [[258, "log-scalars"]], "Run TensorBoard": [[258, "run-tensorboard"]], "Timer quick start": [[259, "timer-quick-start"]], "1. Defining a Timer": [[259, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[259, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[259, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[259, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[259, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[259, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[259, "wrapping-up"]], "8. Footnotes": [[259, "footnotes"]], "Performance Tuning Guide": [[260, "performance-tuning-guide"]], "General optimizations": [[260, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[260, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[260, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[260, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[260, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[260, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[260, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[260, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[260, "disable-debugging-apis"]], "CPU specific optimizations": [[260, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[260, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[260, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[260, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[260, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[260, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[260, "gpu-specific-optimizations"]], "Enable Tensor cores": [[260, "enable-tensor-cores"]], "Use CUDA Graphs": [[260, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[260, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[260, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[260, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[260, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[260, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[260, "distributed-optimizations"]], "Use efficient data-parallel backend": [[260, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[260, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[260, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[260, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[261, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[261, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[261, "save-model-a"]], "4. Load into model B": [[261, "load-into-model-b"]], "What is a state_dict in PyTorch": [[262, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[262, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[262, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[263, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[263, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[263, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[263, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[263, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[265, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[266, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[268, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[268, "usage-example"]], "Train FP32": [[268, "train-fp32"]], "Train BF16": [[268, "train-bf16"]], "Inference FP32": [[268, "inference-fp32"]], "Inference BF16": [[268, "inference-bf16"]], "Compile Time Caching Configuration": [[269, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[269, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[269, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[269, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[269, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[269, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[269, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[269, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[269, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[270, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[270, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[270, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[270, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[270, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[271, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[271, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[272, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[272, "advanced-usage"]], "Composability": [[272, "composability"]], "Wrapping Triton kernels with triton_op": [[272, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[272, "adding-training-support"]], "Adding a CPU Fallback": [[272, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[272, "adding-a-flopcounter-formula"]], "Limitations": [[272, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[273, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[273, "description"]], "Preventing recompilation": [[273, "preventing-recompilation"]], "Measuring performance gains": [[273, "measuring-performance-gains"]], "Crashing sooner": [[273, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[274, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[274, "model-compilation"]], "Model Inference in Python": [[274, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[274, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[275, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[275, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[275, "video-classification"]], "Error: Static batch size": [[275, "error-static-batch-size"]], "Solution": [[275, "solution"], [275, "id1"], [275, "id2"], [275, "id3"]], "Automatic Speech Recognition": [[275, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[275, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[275, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[275, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[275, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[275, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[276, "beta-using-torch-logs-python-api-with-torch-compile"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[278, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[278, "what-you-will-learn"]], "Introduction of the Optimizations": [[278, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[278, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[278, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[278, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[278, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[278, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[278, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[279, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[279, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[279, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})