Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/dynamic_quantization_tutorial", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/super_resolution_with_onnxruntime", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/Intro_to_TorchScript_tutorial", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/flava_finetuning_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "distributed/home", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/dynamic_quantization_bert_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_conv_bn_fuser", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/quantized_transfer_learning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchserve_with_ipex", "intermediate/torchserve_with_ipex_2", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/fx_graph_mode_ptq_dynamic", "prototype/fx_graph_mode_ptq_static", "prototype/fx_graph_mode_quant_guide", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/graph_mode_dynamic_bert_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/numeric_suite_tutorial", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/pt2e_quant_ptq", "prototype/pt2e_quant_ptq_x86_inductor", "prototype/pt2e_quant_qat", "prototype/pt2e_quant_x86_inductor", "prototype/pt2e_quant_xpu_inductor", "prototype/pt2e_quantizer", "prototype/python_extension_autoload", "prototype/quantization_in_pytorch_2_0_export_tutorial", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/torchscript_freezing", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/fuse", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/quantization", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/dynamic_quantization", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/dynamic_quantization_tutorial.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/super_resolution_with_onnxruntime.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/Intro_to_TorchScript_tutorial.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/flava_finetuning_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "distributed/home.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/dynamic_quantization_bert_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_conv_bn_fuser.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/quantized_transfer_learning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchserve_with_ipex.rst", "intermediate/torchserve_with_ipex_2.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/fx_graph_mode_ptq_dynamic.rst", "prototype/fx_graph_mode_ptq_static.rst", "prototype/fx_graph_mode_quant_guide.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/graph_mode_dynamic_bert_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/numeric_suite_tutorial.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/pt2e_quant_ptq.rst", "prototype/pt2e_quant_ptq_x86_inductor.rst", "prototype/pt2e_quant_qat.rst", "prototype/pt2e_quant_x86_inductor.rst", "prototype/pt2e_quant_xpu_inductor.rst", "prototype/pt2e_quantizer.rst", "prototype/python_extension_autoload.rst", "prototype/quantization_in_pytorch_2_0_export_tutorial.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/torchscript_freezing.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/fuse.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/quantization.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/dynamic_quantization.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Loading a TorchScript Model in C++", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "(beta) Dynamic Quantization on an LSTM Word Language Model", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime", "Dynamic Parallelism in TorchScript", "Extending TorchScript with Custom C++ Classes", "Extending TorchScript with Custom C++ Operators", "Semi-Supervised Learning using USB built upon PyTorch", "Introduction to TorchScript", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "TorchMultimodal Tutorial: Finetuning FLAVA", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Distributed and Parallel Training Tutorials", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "(beta) Dynamic Quantization on BERT", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Convolution/Batch Norm fuser in FX", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "(beta) Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "(beta) Quantized Transfer Learning for Computer Vision Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "Grokking PyTorch Intel CPU performance from first principles", "Grokking PyTorch Intel CPU performance from first principles (Part 2)", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) FX Graph Mode Post Training Dynamic Quantization", "(prototype) FX Graph Mode Post Training Static Quantization", "(prototype) FX Graph Mode Quantization User Guide", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "(prototype) Graph Mode Dynamic Quantization on BERT", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch Numeric Suite Tutorial", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "PyTorch Prototype Recipes", "(prototype) PyTorch 2 Export Post Training Quantization", "Quantization in PyTorch 2.0 Export Tutorial", "(prototype) PyTorch 2 Export Quantization-Aware Training (QAT)", "PyTorch 2 Export Quantization with X86 Backend through Inductor", "PyTorch 2 Export Quantization with Intel GPU Backend through Inductor", "How to Write a <code class=\"docutils literal notranslate\"><span class=\"pre\">Quantizer</span></code> for PyTorch 2 Export Quantization", "Autoloading Out-of-Tree Extension", "Quantization in PyTorch 2.0 Export Tutorial", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "Model Freezing in TorchScript", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "Distributed Optimizer with TorchScript support", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "Fuse Modules Recipe", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Quantization Recipe", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "Dynamic Quantization", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "PyTorch Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "TorchScript for Deployment", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 42, 43, 45, 47, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 93, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "ha": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 16, 18, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 42, 47, 48, 49, 52, 55, 56, 68, 73, 80, 81, 82, 89, 91, 94, 95, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 118, 121, 122, 125, 127, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 158, 159, 161, 163, 164, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 181, 182, 183, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 198, 199, 201, 202, 205, 206, 207, 208, 209, 212, 215, 216, 217, 218, 219, 221, 223, 224, 226, 227, 228, 230, 231, 232, 233, 234, 236, 237, 238, 244, 245, 248, 250, 251, 255, 256, 264, 265, 267, 268, 270, 273, 280, 282, 283, 288, 289, 294, 295, 297, 298, 300, 301, 302], "been": [0, 1, 3, 5, 7, 9, 11, 16, 17, 20, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 47, 56, 74, 80, 81, 89, 91, 94, 95, 96, 97, 99, 104, 110, 114, 116, 125, 127, 128, 131, 134, 137, 142, 144, 145, 146, 149, 150, 151, 154, 156, 158, 159, 163, 164, 166, 167, 168, 171, 174, 176, 177, 178, 182, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 199, 201, 202, 205, 212, 215, 216, 219, 221, 227, 228, 229, 230, 231, 232, 233, 234, 238, 244, 250, 251, 255, 256, 262, 267, 280, 281, 289, 297, 298, 301], "deprec": [0, 6, 9, 10, 27, 47, 125, 127, 128, 130, 131, 134, 136, 137, 149, 151, 163, 166, 171, 187, 193, 202, 251, 257, 275, 276, 277, 278, 289], "redirect": [0, 9, 30, 31, 32, 33, 34, 35, 47, 64, 65, 81, 83, 84, 85, 86, 87, 95, 125, 127, 128, 131, 149, 154, 163, 166, 171, 186, 189, 192, 195, 202, 212, 213, 214, 222, 227, 233, 238, 242, 251, 258, 259, 260, 261, 263, 275, 276, 277, 278, 289], "3": [0, 2, 3, 4, 6, 7, 9, 16, 19, 20, 22, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 40, 47, 48, 58, 64, 65, 68, 69, 73, 74, 80, 81, 82, 83, 84, 85, 86, 87, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 111, 113, 114, 115, 118, 119, 121, 122, 123, 125, 126, 127, 128, 131, 134, 135, 136, 138, 143, 144, 145, 149, 150, 151, 154, 158, 160, 161, 163, 164, 165, 166, 167, 169, 171, 174, 175, 176, 177, 179, 180, 181, 182, 186, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 203, 206, 208, 211, 212, 213, 214, 221, 222, 226, 227, 228, 233, 234, 236, 238, 240, 241, 242, 244, 248, 249, 252, 254, 255, 256, 258, 259, 260, 261, 262, 263, 265, 266, 272, 275, 276, 277, 278, 280, 289, 291, 295, 297, 298, 300], "second": [0, 1, 4, 5, 6, 7, 9, 10, 11, 14, 15, 16, 18, 20, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 52, 54, 55, 57, 58, 64, 65, 68, 69, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 125, 126, 127, 128, 129, 131, 133, 134, 137, 139, 140, 141, 142, 143, 144, 145, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 177, 178, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 196, 198, 199, 203, 204, 207, 208, 209, 212, 213, 214, 216, 217, 218, 219, 221, 222, 223, 227, 231, 233, 237, 238, 239, 242, 244, 245, 248, 252, 253, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 269, 270, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 288, 289, 294, 295, 296, 297, 299, 301], "click": [1, 11, 14, 15, 16, 18, 20, 24, 25, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 188, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 262, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "here": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 87, 88, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 175, 177, 178, 180, 181, 182, 183, 185, 187, 188, 191, 193, 194, 196, 198, 199, 200, 204, 205, 206, 207, 208, 209, 211, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 234, 237, 239, 244, 247, 248, 250, 252, 253, 254, 255, 256, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 293, 294, 295, 296, 297, 298, 299, 301], "download": [1, 5, 7, 11, 14, 15, 16, 18, 20, 23, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 134, 135, 139, 140, 141, 142, 144, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 175, 176, 177, 178, 180, 182, 183, 185, 187, 188, 191, 193, 194, 198, 199, 205, 207, 208, 211, 216, 217, 218, 219, 221, 223, 226, 228, 230, 237, 239, 240, 244, 252, 255, 256, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 291, 293, 294, 295, 296, 297, 299], "full": [1, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 18, 20, 23, 24, 26, 28, 29, 36, 37, 38, 40, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 173, 174, 177, 178, 179, 182, 183, 185, 187, 191, 193, 194, 198, 199, 201, 203, 204, 205, 207, 208, 216, 217, 218, 219, 221, 223, 224, 228, 237, 239, 244, 252, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 295, 296, 297, 299, 300, 301], "exampl": [1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 66, 68, 69, 70, 72, 73, 74, 77, 78, 82, 88, 89, 90, 92, 94, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 114, 115, 116, 118, 119, 121, 124, 126, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 200, 201, 204, 205, 206, 207, 208, 209, 211, 216, 217, 218, 219, 221, 223, 224, 226, 228, 229, 230, 234, 236, 237, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 252, 254, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 302], "author": [1, 4, 6, 11, 13, 14, 15, 16, 19, 20, 23, 28, 40, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 80, 88, 89, 91, 93, 100, 106, 107, 108, 110, 111, 113, 114, 115, 118, 119, 121, 122, 123, 126, 129, 134, 135, 136, 137, 138, 140, 141, 142, 143, 146, 147, 148, 150, 151, 152, 156, 157, 158, 160, 161, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 191, 193, 196, 197, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 211, 220, 224, 226, 228, 229, 230, 231, 232, 234, 239, 240, 243, 244, 246, 247, 248, 249, 252, 254, 266, 272, 280, 283, 288, 292, 293, 294, 295, 296, 297, 298, 299], "vincent": [1, 16, 151, 170, 177], "moen": [1, 16, 151, 170, 177], "separ": [1, 4, 6, 7, 10, 18, 24, 26, 27, 29, 38, 55, 58, 91, 96, 103, 104, 105, 106, 114, 121, 138, 153, 158, 160, 168, 170, 175, 180, 183, 190, 198, 200, 204, 205, 216, 226, 231, 250, 267, 283, 293, 296, 299], "rl": [1, 133, 177, 178, 179, 184], "algorithm": [1, 6, 7, 12, 13, 14, 36, 41, 46, 55, 58, 62, 74, 88, 94, 97, 99, 105, 107, 108, 109, 110, 114, 122, 133, 135, 138, 140, 144, 150, 151, 160, 170, 173, 177, 180, 185, 201, 224, 243, 244, 250, 265, 269, 283], "variou": [1, 4, 10, 17, 45, 52, 54, 55, 56, 89, 91, 94, 99, 103, 111, 114, 121, 123, 140, 150, 157, 159, 174, 177, 180, 181, 190, 194, 199, 203, 208, 218, 221, 241, 248, 252, 270, 282, 286, 292, 295, 298], "piec": [1, 6, 10, 16, 91, 99, 114, 176, 177, 181, 190, 197, 198, 200], "assembl": [1, 10, 55, 99], "script": [1, 6, 7, 11, 12, 14, 15, 16, 18, 20, 23, 24, 25, 26, 28, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 61, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 174, 176, 177, 178, 180, 182, 183, 185, 187, 190, 191, 193, 194, 196, 197, 198, 199, 203, 204, 205, 207, 208, 216, 217, 218, 219, 221, 223, 228, 229, 230, 237, 239, 240, 244, 250, 252, 253, 254, 255, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 294, 295, 296, 297, 299, 300], "collect": [1, 5, 7, 13, 16, 17, 22, 23, 25, 41, 48, 49, 50, 55, 61, 66, 99, 104, 105, 108, 113, 133, 134, 135, 138, 148, 151, 157, 173, 178, 181, 193, 194, 197, 201, 203, 234, 247, 248, 249, 262, 282, 283, 287], "final": [1, 7, 11, 12, 13, 14, 16, 17, 19, 20, 23, 24, 25, 26, 27, 28, 46, 48, 52, 55, 58, 80, 82, 91, 94, 96, 99, 101, 104, 105, 106, 111, 114, 116, 119, 121, 123, 129, 133, 134, 135, 136, 138, 140, 141, 142, 144, 145, 150, 157, 158, 159, 160, 164, 167, 169, 172, 174, 175, 177, 178, 179, 180, 181, 183, 187, 188, 193, 194, 196, 197, 200, 201, 203, 208, 209, 216, 219, 224, 226, 228, 229, 230, 231, 234, 237, 250, 256], "function": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 38, 42, 43, 45, 46, 48, 54, 55, 57, 59, 61, 66, 67, 70, 72, 73, 74, 82, 88, 89, 96, 97, 99, 103, 104, 110, 113, 115, 118, 119, 121, 123, 129, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 150, 151, 153, 156, 157, 158, 160, 167, 168, 170, 172, 173, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 204, 209, 210, 216, 217, 218, 219, 223, 224, 231, 234, 236, 239, 240, 243, 244, 250, 254, 255, 256, 262, 266, 268, 269, 270, 280, 282, 284, 287, 290, 292, 295, 296, 297, 299, 300, 302], "ar": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 59, 61, 62, 66, 72, 73, 74, 80, 82, 88, 89, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 262, 264, 265, 266, 267, 269, 270, 272, 273, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302], "state": [1, 4, 6, 10, 12, 13, 16, 20, 26, 42, 43, 49, 55, 58, 59, 61, 94, 97, 99, 101, 105, 106, 107, 111, 114, 122, 123, 134, 135, 141, 142, 144, 146, 148, 151, 152, 153, 155, 160, 167, 169, 174, 177, 178, 179, 180, 181, 183, 187, 193, 203, 204, 207, 209, 219, 223, 232, 234, 246, 247, 250, 252, 265, 266, 270, 272, 285, 287], "contain": [1, 2, 5, 7, 10, 12, 14, 16, 17, 20, 24, 25, 26, 27, 29, 37, 38, 42, 46, 52, 55, 56, 61, 72, 73, 74, 82, 88, 91, 94, 96, 97, 101, 104, 105, 110, 111, 114, 115, 122, 123, 129, 133, 134, 135, 139, 140, 141, 146, 148, 151, 168, 172, 174, 175, 177, 178, 179, 181, 182, 183, 185, 187, 188, 190, 193, 194, 198, 199, 200, 203, 204, 205, 207, 219, 223, 228, 231, 234, 236, 240, 245, 256, 262, 266, 269, 272, 280, 282, 283, 285, 297, 298, 301], "trainabl": [1, 7, 73, 106, 108, 175, 194], "paramet": [1, 5, 6, 12, 13, 14, 16, 17, 19, 20, 23, 24, 26, 28, 29, 36, 38, 39, 40, 43, 45, 46, 48, 49, 52, 54, 55, 57, 58, 72, 73, 80, 91, 94, 96, 99, 105, 106, 107, 108, 110, 113, 114, 118, 119, 121, 122, 129, 132, 133, 134, 135, 136, 138, 140, 141, 146, 148, 150, 151, 152, 153, 155, 158, 159, 160, 164, 167, 168, 169, 175, 181, 182, 185, 187, 188, 190, 193, 194, 196, 197, 205, 208, 216, 224, 225, 226, 234, 237, 243, 245, 246, 247, 250, 252, 254, 255, 256, 262, 264, 266, 270, 271, 272, 273, 274, 279, 280, 285, 286, 287, 291, 295, 301, 302], "tutori": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 42, 47, 48, 49, 50, 51, 57, 59, 61, 62, 66, 80, 81, 83, 84, 85, 86, 87, 88, 90, 94, 97, 98, 101, 103, 105, 107, 109, 110, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 127, 128, 131, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 166, 167, 169, 170, 171, 172, 173, 176, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 194, 195, 197, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 215, 216, 217, 218, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 251, 252, 254, 264, 265, 266, 270, 271, 272, 273, 275, 276, 277, 278, 280, 281, 282, 283, 287, 289, 298, 299, 300, 301, 302], "guid": [1, 6, 10, 20, 27, 66, 88, 91, 119, 133, 134, 150, 161, 176, 184, 187, 193, 194, 196, 208, 224, 225, 234, 252, 262, 265, 267, 271, 279, 287, 301], "you": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 35, 36, 37, 38, 40, 41, 43, 45, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 66, 72, 73, 80, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 198, 201, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 254, 255, 262, 264, 266, 267, 268, 269, 270, 272, 273, 281, 283, 284, 285, 286, 287, 288, 292, 293, 295, 296, 298, 299, 300, 302], "through": [1, 3, 5, 6, 7, 10, 12, 15, 16, 17, 19, 23, 25, 26, 27, 28, 29, 36, 37, 41, 42, 48, 49, 52, 55, 58, 60, 61, 82, 90, 92, 94, 96, 99, 101, 103, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 118, 119, 122, 126, 132, 133, 135, 136, 137, 138, 139, 141, 143, 144, 145, 150, 153, 156, 157, 158, 159, 160, 161, 164, 167, 169, 170, 172, 173, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 193, 194, 196, 197, 205, 206, 207, 208, 210, 211, 216, 218, 223, 224, 225, 226, 231, 234, 239, 245, 246, 247, 254, 255, 256, 264, 266, 267, 273, 281, 286, 298, 301], "from": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 27, 28, 29, 36, 38, 41, 42, 43, 45, 49, 52, 54, 55, 57, 58, 59, 61, 68, 69, 72, 73, 74, 77, 78, 80, 82, 88, 89, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 118, 119, 121, 122, 126, 129, 133, 134, 135, 136, 137, 138, 139, 140, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 191, 193, 199, 200, 201, 203, 204, 205, 206, 208, 209, 211, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 240, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 262, 264, 266, 267, 269, 270, 271, 273, 279, 280, 282, 283, 285, 287, 293, 294, 295, 297, 298, 300, 301, 302], "ground": [1, 16, 49, 80, 198], "up": [1, 3, 5, 6, 7, 10, 12, 16, 18, 20, 22, 23, 24, 25, 26, 27, 36, 38, 41, 55, 58, 61, 66, 76, 79, 88, 91, 94, 96, 97, 99, 100, 101, 104, 106, 107, 108, 110, 111, 113, 114, 116, 121, 133, 134, 135, 136, 137, 138, 141, 142, 146, 147, 148, 150, 151, 153, 157, 158, 164, 167, 169, 170, 172, 175, 176, 177, 178, 179, 180, 183, 187, 188, 191, 193, 194, 196, 197, 199, 205, 209, 210, 221, 224, 225, 226, 228, 231, 234, 237, 241, 245, 246, 248, 249, 250, 255, 267, 273, 283, 286, 287, 297, 298, 299, 301, 302], "us": [1, 4, 5, 8, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 25, 36, 37, 38, 41, 42, 43, 45, 46, 49, 50, 52, 54, 55, 57, 58, 60, 61, 62, 63, 66, 68, 69, 70, 73, 74, 77, 78, 80, 82, 88, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 118, 122, 126, 129, 132, 133, 135, 137, 138, 139, 140, 141, 142, 145, 147, 150, 152, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 170, 172, 174, 175, 176, 177, 178, 183, 184, 185, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 208, 209, 210, 216, 217, 219, 221, 223, 224, 225, 226, 228, 229, 230, 232, 234, 236, 237, 239, 241, 243, 244, 246, 250, 252, 253, 254, 255, 266, 267, 268, 269, 270, 271, 274, 279, 280, 282, 285, 286, 287, 288, 290, 292, 293, 294, 296, 298], "To": [1, 4, 5, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 23, 24, 27, 36, 37, 41, 42, 43, 46, 52, 55, 56, 57, 63, 70, 78, 88, 89, 91, 94, 97, 103, 105, 106, 107, 108, 110, 111, 113, 114, 115, 118, 119, 122, 123, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 155, 158, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 193, 194, 196, 197, 199, 201, 203, 205, 208, 209, 210, 211, 216, 218, 219, 220, 225, 226, 228, 229, 231, 234, 236, 240, 248, 249, 254, 255, 256, 262, 264, 266, 267, 269, 272, 273, 280, 281, 282, 283, 284, 285, 286, 291, 295, 297, 298, 299, 301], "aim": [1, 7, 82, 106, 109, 137, 167, 178, 181, 219, 230, 256], "we": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 61, 68, 69, 70, 73, 74, 80, 82, 88, 89, 91, 94, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 262, 264, 265, 267, 269, 270, 272, 273, 274, 280, 281, 282, 284, 285, 286, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "focus": [1, 3, 24, 97, 106, 109, 173, 183, 194, 256], "which": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 40, 41, 42, 43, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 61, 62, 66, 68, 69, 72, 73, 74, 80, 82, 88, 89, 91, 94, 96, 97, 99, 100, 101, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 119, 121, 122, 123, 129, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 155, 157, 158, 159, 161, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 209, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 241, 244, 245, 246, 247, 248, 249, 250, 252, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 280, 282, 283, 284, 285, 286, 288, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302], "i": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 64, 65, 66, 68, 69, 70, 73, 77, 78, 80, 82, 83, 84, 85, 86, 87, 88, 91, 93, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 115, 116, 118, 119, 121, 122, 124, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 164, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 195, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 240, 242, 243, 244, 246, 247, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 299, 301], "rel": [1, 6, 7, 97, 105, 129, 139, 152, 159, 164, 181, 183, 196, 199, 210, 226, 256, 270, 287], "straightforward": [1, 6, 7, 19, 20, 55, 96, 99, 104, 106, 107, 158, 170, 193, 199, 231, 270, 287], "deep": [1, 7, 14, 15, 29, 40, 52, 55, 58, 74, 77, 78, 99, 100, 101, 104, 106, 110, 112, 113, 122, 132, 133, 141, 142, 143, 144, 148, 152, 158, 159, 160, 168, 174, 175, 178, 183, 190, 194, 197, 241, 243, 244, 253, 256, 262, 269, 282, 283, 288, 301], "determinist": [1, 13, 16, 136, 151, 178, 282, 283], "gradient": [1, 4, 7, 12, 13, 15, 16, 18, 19, 29, 41, 48, 49, 52, 55, 58, 62, 66, 68, 69, 70, 73, 77, 78, 94, 96, 99, 101, 104, 105, 106, 107, 108, 110, 114, 122, 129, 133, 134, 135, 138, 139, 141, 143, 145, 146, 148, 150, 155, 159, 160, 167, 174, 175, 177, 179, 180, 181, 184, 188, 190, 194, 216, 239, 247, 250, 265, 271, 279, 287, 302], "simpl": [1, 3, 4, 5, 6, 7, 10, 14, 17, 19, 20, 23, 25, 26, 27, 28, 29, 52, 55, 57, 60, 62, 72, 80, 91, 94, 97, 99, 101, 104, 105, 106, 114, 115, 118, 122, 123, 132, 133, 134, 139, 140, 143, 145, 150, 153, 158, 159, 164, 169, 170, 172, 174, 177, 179, 180, 181, 182, 184, 185, 187, 191, 193, 194, 201, 205, 209, 220, 224, 229, 230, 234, 241, 243, 244, 247, 249, 252, 255, 256, 264, 267, 270, 272, 281, 282, 283, 285, 287, 295, 298, 299, 302], "continu": [1, 6, 24, 25, 55, 59, 91, 94, 99, 104, 106, 111, 114, 133, 136, 137, 138, 142, 146, 150, 151, 157, 175, 177, 181, 183, 187, 191, 196, 203, 207, 216, 218, 219, 228, 229, 230, 231, 234, 248, 267, 269, 270, 273, 283, 284, 285, 286, 288], "control": [1, 5, 10, 12, 16, 25, 27, 29, 36, 38, 41, 48, 71, 75, 89, 91, 96, 106, 116, 117, 118, 119, 126, 133, 135, 136, 137, 139, 140, 150, 155, 168, 177, 178, 179, 191, 206, 226, 232, 248, 262, 267, 287, 288, 290], "It": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 22, 23, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 46, 48, 49, 50, 52, 55, 57, 58, 80, 81, 82, 88, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 116, 118, 123, 129, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 153, 154, 155, 157, 158, 159, 160, 164, 167, 168, 169, 170, 174, 175, 178, 179, 181, 183, 185, 186, 187, 189, 190, 192, 193, 194, 197, 198, 199, 200, 201, 203, 221, 231, 234, 236, 239, 245, 246, 247, 249, 250, 264, 267, 268, 281, 283, 286, 291, 293, 295, 297, 298, 300, 301], "consist": [1, 3, 4, 7, 16, 17, 26, 28, 29, 36, 37, 38, 41, 48, 82, 106, 108, 114, 136, 138, 146, 156, 157, 160, 164, 167, 177, 178, 182, 183, 187, 194, 197, 199, 200, 201, 203, 218, 219, 229, 230, 231, 244, 267, 273, 283], "learn": [1, 4, 5, 7, 11, 15, 16, 18, 20, 21, 24, 25, 29, 36, 37, 38, 41, 42, 43, 45, 46, 48, 50, 52, 55, 57, 58, 59, 60, 61, 62, 66, 74, 77, 78, 80, 88, 90, 92, 93, 94, 96, 97, 99, 100, 101, 104, 105, 106, 110, 112, 113, 114, 115, 116, 118, 119, 123, 124, 126, 133, 134, 135, 137, 140, 141, 142, 143, 146, 147, 148, 150, 151, 158, 159, 165, 167, 168, 169, 172, 174, 176, 180, 183, 184, 185, 188, 190, 193, 194, 197, 198, 199, 201, 207, 208, 216, 217, 218, 219, 220, 221, 225, 226, 229, 230, 231, 232, 234, 237, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 262, 265, 272, 280, 283, 287, 288, 291, 292, 293, 296, 298, 300, 302], "parametr": [1, 2, 20, 133, 177, 184, 234], "an": [1, 2, 3, 5, 6, 7, 8, 10, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 48, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 68, 70, 72, 74, 80, 82, 88, 89, 91, 93, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 118, 121, 122, 129, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 147, 148, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 173, 174, 176, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 204, 205, 207, 208, 209, 210, 211, 216, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 240, 241, 243, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 262, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 279, 280, 282, 283, 285, 287, 288, 290, 292, 295, 296, 297, 298, 299, 300], "action": [1, 23, 101, 105, 110, 114, 134, 135, 160, 174, 177, 178, 179, 180, 181, 187, 201, 205, 226, 228, 273, 282, 287, 298], "pair": [1, 7, 52, 55, 58, 97, 141, 142, 144, 152, 164, 169, 177, 178, 183, 187, 198, 200, 229, 230, 244, 262, 282], "output": [1, 2, 3, 4, 5, 6, 7, 12, 13, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 29, 36, 37, 41, 45, 48, 49, 50, 52, 54, 55, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 89, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 119, 121, 122, 123, 126, 129, 134, 135, 136, 138, 139, 141, 142, 143, 148, 150, 151, 152, 153, 155, 156, 158, 159, 161, 164, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 185, 188, 190, 191, 193, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 211, 220, 221, 223, 224, 226, 228, 229, 230, 231, 234, 240, 241, 243, 245, 248, 252, 253, 254, 255, 264, 265, 267, 269, 270, 273, 274, 281, 283, 291, 299, 300, 302], "maxim": [1, 16, 58, 80, 88, 106, 108, 140, 160, 178, 191, 196, 283, 301], "given": [1, 4, 7, 10, 12, 14, 16, 18, 20, 24, 25, 26, 27, 29, 36, 38, 41, 45, 46, 48, 54, 55, 58, 61, 80, 88, 91, 97, 101, 105, 106, 107, 109, 110, 113, 114, 123, 135, 141, 142, 150, 153, 155, 159, 160, 161, 169, 174, 177, 178, 180, 181, 183, 191, 193, 194, 197, 198, 207, 219, 223, 231, 234, 250, 254, 267, 274, 283, 294, 298, 302], "certain": [1, 5, 6, 7, 12, 13, 17, 55, 61, 97, 110, 132, 135, 138, 139, 144, 155, 159, 161, 177, 182, 191, 193, 194, 203, 216, 219, 221, 228, 265, 269, 280, 294, 295, 298, 301], "what": [1, 2, 3, 4, 6, 10, 16, 18, 22, 23, 24, 25, 26, 27, 29, 36, 37, 38, 48, 50, 51, 59, 60, 61, 66, 80, 93, 94, 97, 99, 101, 104, 105, 107, 108, 110, 111, 113, 115, 119, 124, 126, 133, 135, 137, 138, 139, 140, 142, 143, 146, 147, 150, 151, 160, 164, 167, 172, 174, 177, 178, 179, 182, 188, 190, 193, 194, 198, 199, 201, 207, 218, 223, 226, 231, 232, 243, 246, 266, 267, 268, 269, 271, 272, 279, 282, 287, 298], "how": [1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 38, 41, 42, 43, 48, 49, 50, 52, 55, 56, 57, 58, 61, 62, 63, 80, 82, 88, 91, 93, 94, 96, 97, 99, 101, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 119, 121, 129, 132, 133, 137, 139, 140, 141, 142, 143, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 161, 164, 165, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 207, 208, 209, 216, 217, 218, 219, 220, 221, 223, 224, 225, 229, 230, 234, 237, 241, 244, 246, 248, 252, 253, 254, 256, 264, 265, 266, 267, 270, 271, 272, 273, 279, 280, 282, 283, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301], "write": [1, 4, 5, 8, 10, 12, 18, 21, 25, 26, 27, 49, 55, 66, 69, 82, 103, 107, 108, 109, 110, 114, 122, 124, 129, 133, 137, 139, 140, 145, 146, 148, 151, 152, 155, 156, 158, 161, 164, 168, 170, 173, 177, 180, 181, 183, 187, 190, 191, 193, 199, 203, 207, 209, 219, 224, 225, 226, 228, 235, 239, 240, 247, 266, 267, 268, 269, 274, 283, 298], "custom": [1, 5, 7, 10, 13, 20, 21, 55, 58, 69, 71, 75, 94, 97, 114, 121, 124, 133, 136, 140, 151, 160, 170, 177, 180, 184, 190, 191, 194, 197, 199, 200, 206, 224, 226, 229, 231, 234, 236, 252, 255, 256, 262, 266, 271, 280, 283, 287, 291, 294, 295], "its": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 25, 26, 27, 29, 36, 37, 41, 46, 48, 52, 55, 57, 58, 59, 61, 73, 82, 88, 96, 97, 99, 101, 104, 106, 108, 110, 111, 113, 114, 116, 121, 122, 123, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 148, 150, 151, 152, 153, 155, 157, 158, 160, 161, 167, 168, 172, 174, 177, 178, 179, 180, 181, 183, 187, 188, 191, 193, 194, 196, 208, 218, 219, 221, 226, 231, 232, 234, 236, 240, 241, 247, 249, 253, 255, 262, 264, 266, 267, 269, 272, 273, 280, 283, 284, 285, 286, 302], "includ": [1, 2, 3, 4, 5, 6, 7, 10, 16, 17, 18, 26, 27, 28, 29, 41, 42, 45, 54, 55, 59, 61, 66, 74, 80, 82, 88, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 114, 116, 118, 119, 121, 138, 140, 141, 142, 143, 145, 146, 148, 150, 151, 158, 160, 161, 170, 172, 173, 174, 177, 180, 183, 187, 188, 191, 193, 194, 196, 197, 198, 199, 203, 205, 208, 216, 218, 220, 224, 229, 230, 231, 232, 240, 245, 247, 248, 250, 252, 254, 255, 256, 262, 264, 265, 266, 267, 269, 270, 273, 280, 283, 293, 295, 296, 300, 301], "design": [1, 6, 7, 16, 20, 28, 29, 58, 62, 80, 91, 97, 113, 114, 142, 148, 151, 170, 177, 178, 179, 181, 182, 187, 188, 193, 197, 200, 201, 216, 217, 218, 223, 224, 226, 231, 234, 239, 241, 254, 267, 269, 270, 283, 291, 295, 298, 301], "effici": [1, 6, 12, 14, 17, 20, 24, 27, 29, 36, 55, 57, 80, 88, 104, 106, 110, 113, 134, 135, 138, 140, 148, 150, 151, 159, 164, 174, 177, 181, 182, 187, 190, 194, 197, 203, 210, 219, 220, 221, 230, 234, 235, 246, 267, 272, 291, 295, 301], "store": [1, 5, 6, 7, 19, 20, 23, 26, 27, 36, 37, 38, 42, 43, 45, 48, 54, 57, 59, 73, 94, 96, 103, 104, 107, 108, 110, 113, 114, 116, 122, 137, 139, 140, 142, 150, 151, 158, 160, 161, 168, 170, 172, 173, 174, 177, 178, 179, 180, 181, 183, 193, 194, 201, 205, 208, 219, 220, 226, 228, 234, 250, 252, 270, 273, 282, 283, 292, 293], "them": [1, 2, 3, 4, 6, 7, 10, 12, 13, 14, 16, 20, 22, 23, 27, 29, 36, 38, 41, 48, 49, 52, 54, 55, 57, 59, 61, 66, 73, 82, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 118, 119, 122, 123, 133, 135, 136, 138, 140, 141, 142, 144, 145, 150, 151, 153, 157, 158, 159, 164, 167, 168, 169, 170, 174, 176, 178, 179, 180, 181, 190, 191, 193, 196, 197, 198, 199, 201, 204, 208, 218, 220, 221, 223, 231, 232, 234, 236, 244, 253, 254, 255, 256, 266, 267, 270, 272, 280, 282, 283, 287, 292, 293, 301], "trajectori": [1, 16, 151, 177, 178], "transit": [1, 16, 91, 93, 107, 151, 170, 178, 231], "assum": [1, 2, 5, 7, 10, 12, 16, 17, 23, 25, 26, 40, 48, 49, 57, 60, 80, 96, 99, 100, 106, 107, 109, 111, 114, 119, 138, 139, 141, 142, 150, 151, 168, 174, 177, 180, 182, 183, 198, 218, 219, 221, 229, 231, 247, 272, 273, 280, 282, 298], "have": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 63, 73, 74, 80, 88, 89, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 239, 240, 241, 244, 246, 247, 248, 249, 250, 252, 254, 255, 262, 264, 266, 267, 268, 269, 270, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 295, 296, 297, 298, 300, 301, 302], "complet": [1, 5, 6, 7, 17, 25, 29, 40, 91, 94, 96, 99, 107, 108, 110, 119, 133, 135, 137, 138, 140, 141, 143, 145, 150, 170, 172, 174, 175, 176, 177, 180, 190, 191, 197, 198, 203, 208, 218, 219, 224, 230, 264, 265, 270, 283, 297, 298, 300], "ppo": [1, 133, 184], "give": [1, 2, 6, 7, 13, 16, 20, 27, 29, 41, 50, 52, 55, 56, 58, 80, 82, 96, 97, 99, 101, 106, 107, 108, 110, 111, 113, 114, 123, 142, 146, 153, 156, 157, 158, 159, 160, 169, 176, 180, 183, 187, 190, 191, 193, 194, 196, 197, 199, 205, 217, 221, 234, 250, 254, 267, 270, 300], "compon": [1, 6, 7, 10, 12, 16, 24, 29, 58, 91, 101, 106, 110, 123, 133, 140, 141, 143, 151, 156, 160, 177, 181, 185, 187, 191, 193, 197, 199, 221, 241, 293, 300], "depend": [1, 6, 7, 10, 13, 25, 26, 27, 52, 56, 58, 80, 88, 91, 96, 97, 103, 104, 106, 107, 111, 114, 133, 138, 140, 141, 144, 145, 150, 151, 152, 155, 156, 157, 159, 160, 170, 173, 176, 177, 180, 187, 191, 199, 204, 205, 206, 208, 218, 225, 226, 228, 230, 240, 241, 243, 254, 267, 268, 270, 274, 280, 283, 288, 300, 301], "tensordict": [1, 16, 151, 160, 170, 177], "nn": [1, 2, 5, 6, 7, 11, 13, 14, 15, 16, 17, 19, 20, 22, 23, 25, 26, 29, 41, 42, 43, 48, 49, 50, 52, 55, 61, 71, 74, 75, 94, 96, 97, 99, 105, 107, 108, 113, 118, 119, 121, 124, 129, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 148, 151, 152, 155, 156, 164, 168, 169, 172, 175, 177, 178, 179, 180, 181, 182, 188, 190, 191, 193, 194, 197, 200, 201, 204, 205, 206, 209, 217, 220, 221, 223, 226, 228, 229, 231, 234, 236, 243, 245, 246, 247, 249, 252, 253, 254, 255, 256, 262, 264, 266, 269, 270, 271, 273, 274, 279, 283, 284, 285, 287, 288, 291, 300, 302], "tensordictmodul": [1, 151, 177], "although": [1, 14, 19, 48, 55, 107, 108, 113, 114, 116, 119, 137, 139, 160, 168, 170, 175, 180, 191, 193, 196, 205, 237, 254], "should": [1, 2, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 36, 48, 49, 55, 56, 57, 58, 59, 61, 74, 80, 88, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 116, 122, 129, 133, 135, 136, 137, 139, 140, 143, 145, 148, 150, 151, 153, 157, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 188, 190, 191, 193, 194, 196, 197, 198, 203, 205, 207, 208, 211, 216, 217, 218, 224, 226, 231, 232, 239, 240, 246, 247, 253, 254, 262, 266, 267, 273, 281, 282, 283, 286, 287, 294, 298, 300, 301], "suffici": [1, 7, 55, 58, 106, 107, 129, 146, 148, 167, 170, 193], "transpar": [1, 14, 97, 108, 151, 180, 240, 248, 255, 292], "understood": [1, 4, 5, 18, 295], "without": [1, 5, 6, 7, 10, 11, 12, 16, 18, 20, 24, 27, 36, 55, 59, 61, 101, 104, 106, 107, 118, 133, 134, 136, 138, 139, 142, 143, 150, 152, 155, 157, 159, 160, 161, 167, 170, 173, 174, 175, 176, 177, 178, 179, 182, 187, 190, 193, 196, 197, 207, 216, 218, 219, 221, 229, 231, 232, 234, 244, 246, 249, 255, 264, 266, 270, 272, 274, 280, 283, 287, 293, 294, 296, 302], "understand": [1, 2, 4, 5, 7, 8, 17, 27, 48, 49, 58, 63, 88, 91, 96, 98, 99, 100, 101, 103, 104, 105, 107, 110, 114, 115, 119, 129, 133, 136, 139, 140, 141, 142, 145, 150, 152, 155, 158, 170, 175, 183, 190, 193, 194, 196, 207, 217, 220, 223, 229, 231, 246, 249, 262, 265, 281, 285, 288, 292, 293, 295, 297, 298, 301], "class": [1, 2, 5, 6, 7, 10, 12, 15, 17, 23, 25, 27, 28, 29, 36, 38, 40, 42, 43, 49, 52, 55, 58, 59, 70, 72, 80, 82, 89, 91, 94, 97, 99, 101, 103, 104, 105, 107, 108, 109, 113, 114, 119, 122, 123, 129, 133, 134, 135, 136, 140, 141, 143, 145, 146, 148, 150, 151, 152, 157, 158, 160, 161, 164, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 188, 190, 193, 197, 198, 200, 203, 204, 205, 206, 216, 217, 218, 220, 223, 226, 228, 229, 231, 236, 245, 246, 247, 249, 250, 253, 254, 256, 262, 265, 267, 269, 280, 282, 286, 288, 298], "do": [1, 2, 3, 4, 5, 6, 7, 8, 12, 13, 14, 15, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 43, 52, 55, 56, 57, 58, 60, 68, 69, 73, 74, 91, 94, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 122, 123, 126, 133, 134, 138, 139, 140, 141, 147, 148, 150, 151, 153, 156, 157, 158, 159, 160, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 181, 183, 188, 190, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 208, 209, 217, 218, 219, 223, 225, 226, 228, 229, 231, 232, 234, 236, 237, 239, 247, 250, 253, 256, 262, 264, 266, 267, 268, 272, 280, 281, 282, 283, 284, 286, 287, 295, 296, 297, 300], "sota": [1, 82], "implement": [1, 2, 3, 5, 6, 7, 12, 13, 14, 15, 16, 17, 20, 24, 28, 37, 38, 40, 48, 50, 52, 55, 57, 61, 63, 66, 68, 69, 70, 72, 73, 74, 77, 78, 91, 96, 99, 105, 113, 114, 115, 122, 132, 133, 136, 138, 139, 141, 143, 145, 150, 151, 153, 155, 158, 159, 160, 161, 164, 169, 170, 172, 174, 177, 178, 181, 184, 187, 193, 194, 198, 199, 200, 201, 203, 210, 217, 219, 220, 221, 224, 225, 226, 231, 232, 234, 240, 241, 246, 250, 254, 255, 256, 267, 272, 280, 283, 291, 292, 294, 295, 298, 301], "rather": [1, 15, 27, 29, 55, 58, 74, 80, 91, 101, 104, 106, 113, 114, 123, 133, 142, 144, 158, 168, 169, 170, 177, 190, 193, 199, 203, 208, 216, 241, 267, 270, 283, 292, 296], "provid": [1, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 37, 38, 49, 55, 57, 58, 61, 62, 80, 88, 89, 91, 94, 96, 97, 99, 104, 105, 106, 107, 108, 114, 115, 118, 119, 122, 123, 132, 133, 135, 137, 138, 139, 140, 146, 147, 148, 150, 151, 152, 156, 157, 158, 159, 160, 161, 170, 174, 176, 177, 179, 180, 182, 187, 190, 191, 193, 194, 198, 199, 203, 209, 218, 219, 223, 225, 226, 228, 230, 231, 234, 236, 239, 241, 247, 248, 250, 252, 253, 254, 255, 256, 262, 265, 266, 267, 269, 270, 272, 273, 281, 282, 283, 288, 293, 296, 297, 298, 301], "high": [1, 2, 6, 7, 17, 23, 27, 29, 49, 55, 58, 59, 61, 63, 66, 88, 91, 101, 108, 113, 116, 121, 133, 134, 135, 138, 140, 143, 144, 150, 151, 184, 187, 188, 190, 193, 194, 196, 197, 210, 219, 223, 224, 225, 226, 229, 230, 245, 250, 270, 282, 283, 295, 300, 301, 302], "level": [1, 2, 4, 6, 7, 18, 20, 23, 24, 27, 29, 49, 55, 59, 61, 63, 66, 73, 101, 109, 116, 122, 133, 134, 135, 138, 143, 146, 148, 150, 152, 155, 156, 158, 161, 165, 182, 183, 184, 187, 190, 191, 193, 194, 196, 197, 199, 205, 209, 223, 224, 225, 226, 229, 230, 234, 245, 248, 249, 250, 256, 270, 292, 302], "illustr": [1, 23, 37, 49, 52, 62, 129, 138, 139, 140, 153, 170, 178, 188, 190, 198, 218, 219, 223, 249, 262, 265, 273, 280, 283], "": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 59, 61, 63, 73, 80, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 198, 199, 200, 201, 203, 204, 205, 208, 209, 210, 211, 216, 218, 219, 221, 223, 225, 226, 228, 229, 230, 231, 232, 234, 236, 239, 241, 243, 245, 246, 247, 248, 249, 250, 252, 254, 264, 265, 266, 267, 269, 270, 272, 273, 280, 281, 282, 283, 285, 286, 287, 288, 292, 293, 295, 300, 301, 302], "librari": [1, 3, 4, 5, 6, 7, 8, 10, 14, 16, 18, 22, 24, 26, 27, 29, 38, 42, 49, 56, 57, 63, 66, 82, 94, 97, 114, 118, 119, 133, 137, 140, 144, 145, 152, 157, 170, 172, 173, 176, 177, 181, 187, 194, 197, 199, 203, 211, 220, 238, 240, 241, 249, 254, 255, 262, 264, 287, 288, 295, 297], "featur": [1, 5, 7, 12, 13, 14, 16, 23, 26, 27, 38, 42, 46, 55, 56, 57, 58, 88, 89, 91, 96, 99, 101, 104, 106, 107, 113, 114, 118, 122, 133, 134, 139, 143, 151, 152, 158, 159, 160, 167, 170, 173, 176, 177, 181, 182, 188, 191, 193, 196, 197, 198, 199, 209, 210, 219, 220, 221, 224, 225, 229, 230, 232, 234, 239, 240, 241, 245, 250, 252, 254, 262, 265, 269, 270, 272, 280, 282, 283, 286, 287, 288, 292, 295, 298], "context": [1, 2, 6, 10, 16, 19, 20, 48, 55, 80, 96, 101, 113, 114, 121, 132, 133, 138, 143, 151, 155, 168, 170, 177, 180, 181, 182, 183, 187, 191, 197, 199, 207, 210, 220, 225, 229, 230, 234, 240, 245, 248, 266, 268, 272, 273, 274, 283, 296, 298, 301], "bash": [1, 22, 24, 160, 178, 262], "pip3": [1, 22, 56, 135, 151, 170, 177, 178, 187, 194, 208, 230], "instal": [1, 4, 6, 7, 10, 20, 24, 27, 28, 40, 56, 57, 59, 61, 63, 94, 100, 103, 114, 118, 134, 135, 138, 141, 142, 146, 147, 150, 151, 155, 157, 160, 165, 170, 173, 177, 178, 179, 183, 187, 190, 191, 198, 203, 207, 208, 209, 230, 232, 240, 254, 262, 265, 267, 269, 273, 282, 284, 285, 286, 288, 295, 300, 301], "mujoco": [1, 151, 177], "glfw": 1, "cuda": [1, 5, 7, 10, 12, 13, 14, 17, 20, 22, 23, 27, 28, 37, 42, 45, 48, 49, 50, 59, 60, 61, 68, 69, 78, 80, 89, 94, 104, 108, 114, 121, 122, 123, 129, 133, 134, 135, 136, 137, 138, 141, 144, 146, 147, 148, 150, 151, 161, 164, 167, 168, 172, 173, 175, 178, 179, 180, 181, 182, 187, 190, 191, 194, 201, 203, 207, 208, 210, 220, 228, 234, 243, 244, 246, 247, 249, 252, 266, 267, 268, 273, 287, 293, 296, 297, 298, 302], "avail": [1, 2, 3, 4, 6, 7, 12, 14, 17, 20, 22, 23, 24, 25, 26, 27, 36, 37, 38, 41, 42, 43, 45, 48, 49, 54, 55, 56, 57, 58, 59, 68, 80, 94, 97, 99, 101, 104, 105, 106, 110, 114, 116, 122, 129, 135, 139, 141, 150, 151, 155, 160, 161, 170, 174, 175, 176, 177, 178, 181, 182, 183, 187, 190, 193, 194, 196, 197, 198, 203, 204, 205, 224, 225, 226, 228, 229, 230, 234, 239, 245, 247, 255, 262, 264, 265, 267, 268, 269, 283, 284, 285, 286, 288, 297, 299, 300], "seri": [1, 7, 17, 27, 58, 59, 60, 61, 62, 88, 98, 101, 104, 105, 132, 133, 137, 141, 142, 146, 147, 157, 165, 174, 177, 183, 199, 218, 254, 301], "easili": [1, 6, 14, 23, 28, 37, 50, 66, 80, 97, 104, 105, 106, 114, 121, 122, 123, 135, 138, 140, 141, 148, 150, 156, 157, 158, 164, 174, 177, 178, 181, 190, 191, 193, 196, 197, 198, 201, 205, 208, 224, 225, 236, 246, 247, 249, 256, 267, 285], "reusabl": [1, 7, 29], "swappabl": 1, "signatur": [1, 6, 10, 12, 16, 17, 27, 119, 150, 168, 180, 193, 252], "main": [1, 3, 5, 6, 7, 13, 19, 23, 26, 27, 41, 58, 59, 61, 94, 106, 119, 122, 134, 135, 141, 146, 150, 152, 158, 170, 175, 178, 179, 180, 181, 185, 193, 194, 196, 197, 198, 199, 205, 208, 210, 226, 231, 239, 240, 246, 253, 255, 256, 262, 283, 300, 302], "characterist": [1, 16, 48, 143, 157, 159, 160, 176, 182, 193, 298], "thei": [1, 3, 5, 6, 7, 10, 12, 14, 16, 18, 19, 23, 24, 25, 27, 29, 37, 38, 45, 49, 54, 55, 58, 61, 80, 88, 91, 96, 99, 101, 104, 105, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 135, 139, 140, 141, 142, 145, 148, 150, 151, 158, 159, 161, 167, 168, 177, 178, 179, 181, 183, 190, 193, 194, 196, 197, 199, 200, 205, 209, 211, 216, 217, 218, 219, 221, 223, 226, 228, 231, 236, 237, 241, 247, 249, 255, 267, 270, 272, 273, 281, 282, 283, 285, 286], "copi": [1, 6, 7, 14, 22, 26, 27, 40, 45, 49, 50, 56, 61, 80, 88, 96, 100, 105, 106, 121, 123, 126, 133, 134, 139, 144, 148, 150, 151, 152, 156, 157, 160, 168, 175, 180, 187, 190, 193, 201, 203, 204, 205, 206, 224, 228, 229, 240, 245, 246, 252, 253, 254, 272, 283], "loss_modul": 1, "whatev": [1, 10, 26, 27, 99, 104, 105, 108, 110, 114, 123, 223, 262], "need": [1, 3, 4, 5, 6, 7, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 36, 37, 38, 41, 42, 43, 45, 46, 48, 49, 50, 52, 55, 56, 57, 59, 60, 61, 66, 68, 69, 72, 82, 88, 89, 94, 97, 99, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 122, 123, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 153, 155, 157, 158, 159, 160, 161, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 197, 198, 200, 203, 205, 207, 208, 209, 216, 220, 221, 223, 226, 228, 229, 231, 232, 234, 236, 240, 245, 246, 247, 249, 250, 252, 254, 255, 256, 262, 264, 266, 267, 269, 273, 280, 281, 282, 283, 284, 285, 286, 288, 292, 296, 297, 298, 300], "follow": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 38, 40, 41, 45, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 80, 82, 88, 89, 91, 93, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 118, 119, 123, 126, 129, 133, 134, 135, 136, 138, 139, 140, 143, 146, 147, 148, 150, 151, 152, 156, 157, 158, 159, 160, 161, 165, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 209, 210, 217, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 239, 240, 247, 249, 250, 253, 254, 255, 262, 264, 266, 269, 272, 273, 274, 280, 281, 288, 291, 292, 293, 295, 297, 298, 300, 301], "convent": [1, 16, 58, 114, 123, 151, 190, 199, 250, 267], "torch": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 29, 37, 38, 39, 41, 42, 43, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 59, 61, 63, 66, 68, 69, 72, 73, 78, 80, 91, 94, 96, 97, 99, 103, 104, 105, 106, 107, 108, 111, 113, 116, 118, 119, 121, 122, 124, 129, 133, 134, 135, 136, 137, 138, 142, 145, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 190, 194, 197, 198, 200, 201, 203, 204, 205, 206, 208, 209, 210, 216, 217, 219, 220, 221, 225, 229, 230, 231, 232, 234, 235, 236, 237, 240, 241, 244, 245, 246, 247, 249, 250, 253, 254, 255, 256, 262, 264, 268, 269, 270, 271, 273, 274, 281, 282, 283, 284, 285, 286, 287, 290, 291, 292, 300, 302], "receiv": [1, 5, 7, 16, 19, 61, 94, 104, 110, 122, 150, 170, 172, 177, 179, 180, 181, 191, 194, 203, 266, 269, 283], "input": [1, 2, 4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 19, 24, 25, 26, 27, 29, 36, 37, 40, 41, 45, 48, 49, 50, 52, 54, 55, 62, 66, 68, 69, 70, 72, 73, 74, 77, 78, 82, 89, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 119, 121, 122, 123, 132, 134, 135, 138, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 155, 158, 159, 160, 161, 164, 167, 169, 172, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 196, 198, 200, 201, 204, 205, 206, 208, 209, 219, 221, 224, 226, 228, 229, 230, 231, 234, 237, 239, 240, 241, 243, 245, 247, 252, 254, 255, 256, 265, 266, 269, 270, 273, 274, 286, 292, 296, 298, 300, 301], "all": [1, 2, 3, 5, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 37, 38, 41, 42, 45, 46, 48, 49, 50, 52, 55, 56, 57, 58, 59, 61, 62, 66, 73, 80, 88, 91, 94, 96, 97, 99, 101, 104, 105, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 161, 164, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 193, 194, 196, 197, 198, 200, 201, 203, 204, 207, 208, 209, 216, 217, 219, 221, 224, 225, 226, 229, 231, 232, 234, 236, 239, 240, 245, 248, 252, 255, 256, 262, 264, 265, 267, 269, 270, 272, 280, 281, 282, 284, 285, 286, 287, 288, 292, 293, 295, 296, 298, 299, 300, 301, 302], "necessari": [1, 4, 5, 6, 7, 10, 12, 14, 17, 22, 23, 27, 28, 43, 49, 58, 59, 61, 91, 94, 104, 105, 107, 114, 123, 134, 135, 138, 144, 148, 160, 172, 179, 180, 181, 187, 193, 194, 197, 200, 201, 205, 209, 218, 221, 223, 224, 226, 228, 229, 230, 232, 266, 283, 288, 296], "inform": [1, 2, 4, 5, 6, 8, 10, 12, 16, 18, 24, 26, 27, 29, 36, 50, 55, 59, 80, 88, 94, 96, 101, 103, 104, 106, 110, 111, 113, 123, 134, 139, 140, 141, 142, 148, 150, 151, 152, 155, 156, 157, 160, 175, 176, 177, 178, 180, 182, 183, 187, 188, 190, 191, 193, 194, 196, 197, 198, 200, 203, 205, 206, 207, 208, 219, 221, 224, 226, 236, 239, 240, 241, 247, 248, 249, 262, 264, 266, 267, 282, 283, 285, 286, 296, 299, 300, 301], "return": [1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 16, 17, 18, 19, 22, 23, 25, 27, 29, 37, 38, 42, 45, 49, 50, 52, 55, 57, 58, 73, 80, 88, 94, 96, 97, 104, 105, 106, 107, 108, 110, 111, 114, 116, 119, 121, 122, 123, 134, 135, 136, 138, 142, 143, 145, 148, 150, 151, 152, 155, 158, 160, 161, 164, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 187, 188, 190, 191, 193, 194, 196, 197, 198, 200, 204, 205, 206, 209, 210, 211, 216, 218, 220, 223, 224, 226, 228, 229, 230, 231, 232, 234, 239, 240, 243, 245, 246, 247, 249, 252, 253, 254, 255, 256, 262, 265, 267, 269, 270, 273, 280, 282, 293, 296, 298, 300], "replay_buff": 1, "sampl": [1, 4, 7, 10, 37, 38, 41, 42, 45, 49, 52, 54, 55, 57, 58, 61, 66, 82, 94, 99, 101, 103, 104, 106, 123, 129, 133, 134, 141, 144, 150, 151, 152, 159, 160, 167, 168, 175, 177, 178, 179, 181, 184, 190, 193, 198, 199, 205, 209, 221, 226, 229, 230, 239, 243, 265, 273, 282, 283, 296], "loss_dict": 1, "instanc": [1, 5, 6, 7, 13, 14, 16, 25, 26, 27, 29, 37, 43, 50, 59, 60, 61, 66, 88, 94, 99, 101, 104, 105, 106, 107, 108, 111, 113, 114, 115, 122, 134, 135, 139, 140, 143, 146, 147, 148, 151, 158, 160, 170, 172, 175, 177, 179, 180, 181, 191, 205, 206, 226, 229, 230, 231, 232, 236, 252, 254, 255, 262, 266, 270, 273, 281, 282, 283, 288, 298, 300, 301, 302], "written": [1, 4, 5, 6, 7, 10, 12, 16, 18, 26, 27, 29, 91, 103, 109, 114, 115, 145, 151, 157, 164, 168, 169, 172, 175, 182, 187, 190, 203, 207, 208, 216, 252, 255, 281, 293, 295], "under": [1, 5, 6, 10, 22, 23, 27, 36, 52, 55, 56, 58, 60, 62, 66, 103, 106, 108, 121, 122, 136, 138, 139, 143, 150, 152, 159, 160, 168, 170, 174, 181, 187, 188, 197, 198, 200, 207, 217, 219, 245, 247, 248, 250, 256, 262, 266, 292, 295], "loss_": 1, "smth": 1, "where": [1, 3, 4, 5, 7, 10, 13, 14, 15, 16, 19, 20, 22, 24, 25, 26, 27, 28, 36, 38, 52, 55, 57, 66, 69, 73, 82, 89, 91, 94, 96, 97, 99, 101, 103, 104, 106, 107, 108, 110, 111, 113, 122, 133, 135, 138, 140, 141, 142, 145, 147, 148, 150, 152, 153, 158, 161, 164, 167, 168, 169, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 188, 191, 193, 194, 197, 198, 199, 200, 201, 203, 205, 208, 216, 219, 220, 223, 231, 234, 246, 249, 250, 252, 262, 264, 266, 267, 269, 280, 281, 282, 286, 287, 298, 301], "string": [1, 4, 10, 17, 26, 27, 55, 104, 116, 140, 141, 142, 151, 174, 177, 183, 190, 194, 203, 205, 262, 267, 282], "describ": [1, 5, 6, 7, 10, 12, 16, 17, 19, 23, 24, 25, 26, 27, 43, 45, 54, 55, 58, 66, 80, 99, 106, 116, 119, 126, 132, 150, 164, 172, 177, 178, 181, 187, 190, 193, 194, 196, 225, 226, 228, 236, 249, 252, 267, 270, 301], "addit": [1, 2, 4, 6, 10, 13, 17, 20, 23, 56, 61, 80, 82, 97, 104, 106, 111, 114, 116, 121, 135, 138, 139, 141, 148, 150, 152, 153, 156, 158, 161, 174, 179, 180, 183, 188, 191, 193, 196, 199, 209, 216, 217, 218, 219, 224, 225, 226, 230, 231, 232, 234, 240, 246, 250, 253, 254, 255, 267, 273, 283, 294, 295, 297, 298, 301], "kei": [1, 4, 7, 10, 13, 16, 17, 49, 55, 88, 97, 109, 113, 116, 121, 123, 126, 135, 136, 137, 140, 151, 152, 160, 170, 176, 177, 179, 182, 183, 187, 188, 190, 193, 194, 197, 199, 201, 209, 221, 223, 232, 234, 243, 244, 252, 255, 270, 272, 281, 284, 294, 295], "mai": [1, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 23, 25, 26, 27, 29, 41, 55, 56, 58, 73, 80, 91, 94, 96, 97, 99, 101, 104, 108, 115, 119, 122, 123, 134, 137, 138, 139, 140, 143, 144, 145, 150, 151, 152, 153, 155, 158, 159, 164, 167, 168, 170, 176, 177, 180, 183, 187, 190, 191, 193, 196, 197, 199, 200, 203, 204, 205, 209, 218, 221, 226, 228, 229, 230, 231, 234, 236, 241, 243, 247, 249, 253, 264, 267, 270, 273, 283, 286, 293, 295, 296, 298], "metric": [1, 20, 94, 103, 104, 106, 121, 135, 152, 187, 190, 197, 198, 234, 256, 262, 267, 281], "log": [1, 22, 41, 55, 56, 58, 59, 94, 103, 107, 108, 111, 113, 114, 134, 137, 140, 147, 152, 176, 177, 179, 181, 187, 188, 190, 193, 194, 197, 209, 220, 223, 244, 248, 256, 287, 293, 299, 301], "dure": [1, 3, 10, 14, 16, 22, 23, 29, 36, 37, 41, 42, 43, 55, 58, 68, 69, 91, 96, 99, 101, 104, 105, 106, 108, 113, 114, 115, 122, 123, 133, 134, 135, 136, 138, 139, 142, 143, 144, 145, 146, 148, 151, 156, 157, 158, 164, 168, 175, 176, 177, 178, 179, 181, 187, 191, 193, 196, 197, 198, 203, 207, 209, 211, 220, 224, 225, 228, 236, 240, 247, 250, 255, 262, 264, 270, 273, 280, 281, 288], "reason": [1, 6, 7, 10, 16, 17, 18, 20, 27, 29, 36, 58, 88, 96, 99, 106, 108, 111, 114, 123, 129, 139, 144, 150, 158, 175, 177, 182, 183, 193, 194, 203, 208, 218, 234, 247, 267, 271, 272, 279, 287, 297], "independ": [1, 27, 55, 113, 114, 159, 160, 164, 180, 216, 232, 252], "let": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 37, 41, 48, 49, 50, 52, 55, 57, 58, 73, 80, 82, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 119, 121, 122, 123, 129, 136, 138, 140, 145, 148, 150, 151, 152, 153, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 201, 208, 211, 216, 217, 221, 231, 234, 243, 247, 249, 252, 254, 265, 267, 269, 272, 273, 280, 281, 282, 283, 286, 288, 297, 298, 300], "user": [1, 3, 6, 16, 20, 22, 23, 26, 28, 29, 46, 49, 55, 56, 88, 89, 91, 94, 97, 106, 110, 119, 126, 135, 136, 137, 138, 141, 142, 148, 152, 156, 158, 161, 170, 179, 181, 182, 183, 187, 190, 193, 194, 196, 197, 198, 199, 200, 201, 205, 209, 216, 217, 218, 219, 223, 225, 226, 228, 229, 230, 231, 232, 234, 241, 245, 246, 247, 248, 249, 250, 252, 255, 256, 262, 264, 273, 287, 288, 290, 292, 293, 294, 301], "differ": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 16, 19, 20, 22, 23, 24, 26, 27, 28, 36, 41, 45, 52, 54, 55, 57, 58, 66, 78, 80, 88, 89, 91, 94, 97, 99, 101, 104, 105, 106, 107, 108, 113, 114, 116, 133, 134, 135, 136, 138, 140, 141, 142, 144, 147, 148, 150, 152, 153, 157, 158, 159, 161, 164, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 199, 200, 203, 205, 208, 210, 216, 217, 218, 219, 220, 221, 223, 226, 228, 229, 231, 234, 236, 240, 246, 247, 248, 249, 250, 252, 253, 254, 262, 264, 267, 270, 271, 273, 279, 281, 282, 283, 287, 288, 293, 296, 298, 301, 302], "set": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 36, 41, 43, 48, 49, 52, 54, 55, 56, 58, 59, 61, 66, 68, 69, 73, 80, 88, 89, 93, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 118, 122, 123, 129, 133, 134, 135, 136, 138, 141, 142, 143, 146, 147, 148, 150, 151, 158, 160, 167, 168, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 191, 193, 194, 197, 198, 199, 204, 216, 218, 220, 221, 224, 228, 229, 230, 232, 234, 240, 241, 246, 247, 249, 254, 255, 256, 262, 264, 267, 268, 272, 280, 282, 284, 286, 293, 299, 301], "sum": [1, 2, 4, 5, 6, 8, 13, 16, 18, 22, 23, 25, 37, 48, 49, 55, 58, 73, 88, 94, 96, 97, 107, 108, 110, 122, 134, 135, 136, 142, 143, 145, 150, 151, 159, 164, 175, 178, 179, 180, 181, 187, 191, 193, 194, 205, 217, 226, 228, 243, 245, 246, 247, 252, 256, 267, 286, 302], "can": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 63, 66, 73, 78, 80, 88, 89, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 211, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 240, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "simpli": [1, 3, 5, 6, 7, 10, 11, 15, 23, 25, 27, 48, 49, 55, 59, 91, 99, 110, 113, 122, 123, 137, 138, 140, 142, 145, 150, 158, 159, 167, 173, 174, 177, 178, 179, 180, 183, 185, 187, 188, 191, 193, 194, 196, 197, 199, 200, 201, 203, 217, 232, 236, 239, 247, 253, 255, 264, 267, 270, 282, 284, 285, 286], "done": [1, 4, 5, 6, 7, 10, 12, 16, 19, 20, 23, 24, 25, 26, 27, 29, 55, 60, 88, 91, 101, 104, 106, 107, 108, 114, 116, 134, 135, 138, 139, 142, 144, 151, 153, 157, 158, 160, 161, 170, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 188, 190, 193, 194, 203, 208, 209, 234, 236, 250, 255, 270, 272, 283, 297, 300], "via": [1, 3, 4, 6, 7, 8, 19, 20, 22, 24, 26, 27, 43, 60, 61, 80, 91, 106, 133, 134, 135, 138, 140, 150, 151, 159, 168, 176, 177, 182, 188, 190, 191, 193, 194, 196, 197, 198, 199, 207, 211, 220, 224, 234, 245, 249, 250, 254, 255, 256, 262, 272, 280, 281, 283, 287, 292, 295], "loss_val": [1, 151], "item": [1, 2, 7, 12, 13, 17, 38, 45, 49, 55, 73, 94, 97, 107, 122, 123, 126, 134, 135, 136, 141, 142, 150, 151, 152, 175, 176, 177, 179, 180, 181, 188, 190, 193, 200, 204, 252, 253, 256, 266, 283], "startswith": [1, 89], "parent": [1, 4, 16, 206, 209, 249], "As": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 14, 16, 19, 23, 24, 25, 26, 27, 29, 43, 48, 55, 56, 58, 80, 91, 94, 97, 99, 101, 104, 105, 106, 114, 116, 122, 123, 134, 135, 136, 137, 138, 139, 140, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 167, 168, 170, 172, 174, 175, 177, 178, 179, 180, 181, 182, 187, 190, 193, 194, 196, 197, 198, 199, 200, 205, 208, 209, 219, 221, 223, 226, 231, 232, 241, 245, 248, 254, 256, 262, 267, 270, 272, 283, 288, 295, 300, 301, 302], "mani": [1, 2, 5, 6, 7, 12, 16, 17, 18, 20, 22, 27, 29, 36, 37, 41, 42, 55, 57, 58, 70, 74, 80, 88, 96, 97, 99, 101, 104, 106, 108, 109, 110, 114, 116, 118, 122, 135, 138, 140, 144, 150, 152, 153, 159, 161, 164, 169, 170, 175, 177, 179, 180, 183, 191, 193, 194, 196, 197, 199, 218, 234, 239, 255, 256, 265, 266, 267, 269, 283, 288, 295, 301], "other": [1, 6, 7, 10, 12, 13, 16, 20, 23, 25, 26, 27, 29, 36, 37, 40, 45, 49, 52, 54, 55, 58, 59, 61, 62, 63, 73, 74, 80, 82, 88, 89, 94, 96, 97, 99, 104, 106, 108, 110, 111, 113, 114, 119, 122, 123, 126, 134, 136, 137, 138, 141, 142, 144, 146, 147, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 164, 167, 168, 169, 172, 173, 174, 176, 177, 178, 179, 180, 181, 183, 188, 191, 193, 194, 196, 197, 198, 199, 200, 203, 205, 206, 208, 209, 216, 217, 218, 219, 221, 226, 228, 229, 231, 234, 236, 247, 249, 253, 264, 266, 267, 269, 270, 272, 273, 280, 281, 282, 283, 284, 285, 286, 288, 292, 293, 294, 295, 296, 300, 302], "expect": [1, 4, 5, 6, 7, 12, 13, 16, 24, 26, 27, 50, 52, 55, 57, 80, 91, 94, 96, 97, 99, 101, 104, 105, 106, 110, 111, 113, 114, 115, 123, 129, 137, 140, 144, 148, 151, 159, 160, 167, 168, 174, 176, 177, 178, 179, 180, 182, 190, 193, 194, 196, 198, 200, 203, 205, 223, 224, 226, 229, 230, 231, 248, 255, 262, 265, 266, 267, 270, 273, 280, 283, 296, 298, 302], "ani": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 23, 25, 26, 27, 36, 46, 48, 50, 52, 55, 57, 59, 61, 96, 99, 101, 104, 106, 107, 109, 110, 113, 114, 116, 118, 123, 132, 134, 136, 138, 139, 141, 143, 145, 146, 150, 152, 153, 155, 156, 157, 160, 161, 167, 168, 169, 170, 172, 176, 177, 178, 180, 181, 185, 187, 190, 193, 194, 196, 197, 204, 206, 207, 209, 210, 216, 217, 218, 219, 220, 223, 224, 228, 230, 234, 236, 241, 243, 244, 246, 247, 249, 250, 252, 253, 262, 264, 266, 269, 272, 274, 280, 282, 286, 292, 293, 295, 296, 297, 299, 301], "similar": [1, 3, 4, 6, 10, 12, 13, 16, 17, 23, 26, 27, 45, 54, 55, 88, 89, 97, 99, 101, 104, 106, 107, 113, 114, 119, 122, 138, 141, 145, 150, 151, 168, 177, 179, 180, 181, 182, 183, 187, 188, 190, 193, 196, 198, 200, 205, 207, 209, 216, 217, 218, 219, 220, 221, 228, 229, 253, 254, 266, 267, 270, 282, 283, 292, 298, 302], "structur": [1, 5, 6, 7, 10, 11, 16, 21, 22, 23, 24, 25, 26, 27, 37, 42, 43, 45, 54, 55, 58, 59, 91, 96, 99, 101, 105, 106, 107, 111, 116, 123, 133, 143, 146, 151, 153, 157, 160, 161, 168, 169, 174, 177, 181, 188, 190, 191, 198, 219, 225, 226, 239, 270, 281, 295, 297], "format": [1, 6, 14, 20, 23, 24, 27, 29, 46, 94, 114, 118, 123, 133, 134, 135, 137, 150, 152, 157, 158, 175, 176, 179, 181, 184, 187, 188, 190, 194, 196, 198, 204, 205, 209, 216, 218, 219, 226, 228, 231, 234, 241, 250, 255, 256, 264, 265, 267, 287, 300], "make": [1, 4, 5, 6, 7, 10, 12, 14, 16, 22, 23, 26, 27, 37, 41, 42, 46, 48, 49, 50, 55, 56, 57, 59, 60, 61, 63, 73, 80, 94, 96, 99, 101, 103, 104, 106, 108, 109, 110, 112, 113, 114, 115, 118, 119, 123, 126, 129, 133, 134, 135, 136, 138, 140, 141, 142, 143, 144, 148, 150, 151, 152, 156, 157, 158, 159, 160, 167, 168, 170, 173, 174, 175, 177, 178, 179, 180, 181, 183, 188, 190, 191, 193, 194, 196, 198, 199, 201, 203, 205, 208, 209, 216, 217, 218, 219, 221, 223, 226, 231, 239, 245, 247, 248, 249, 250, 253, 254, 255, 264, 265, 266, 267, 270, 272, 274, 281, 282, 283, 287, 292, 293, 295, 298, 300], "possibl": [1, 2, 4, 5, 6, 7, 8, 10, 12, 16, 17, 20, 26, 27, 82, 96, 97, 101, 104, 107, 110, 118, 136, 139, 143, 144, 145, 151, 153, 155, 157, 159, 160, 170, 175, 176, 177, 179, 180, 183, 191, 193, 194, 198, 199, 203, 205, 209, 221, 226, 228, 229, 231, 234, 236, 241, 250, 252, 255, 256, 266, 270, 272, 283, 295, 301], "re": [1, 4, 5, 6, 7, 8, 11, 12, 16, 19, 23, 25, 26, 27, 28, 40, 42, 45, 49, 54, 55, 56, 97, 99, 101, 103, 104, 105, 106, 107, 114, 122, 129, 139, 141, 142, 151, 153, 155, 159, 164, 167, 169, 170, 176, 177, 178, 179, 180, 183, 193, 194, 196, 198, 205, 207, 208, 216, 226, 228, 236, 239, 247, 249, 266, 267, 270, 272, 282, 283], "across": [1, 4, 6, 10, 13, 16, 19, 22, 24, 28, 45, 55, 58, 60, 61, 62, 88, 94, 97, 104, 106, 116, 132, 134, 135, 136, 138, 146, 147, 148, 150, 153, 160, 170, 172, 174, 178, 180, 181, 193, 194, 196, 201, 204, 244, 247, 249, 252, 265, 281, 283, 284, 286, 287, 292, 296, 298, 301, 302], "modal": [1, 170, 265], "complex": [1, 7, 27, 29, 37, 38, 56, 72, 73, 96, 97, 101, 106, 116, 122, 123, 132, 134, 148, 164, 168, 170, 179, 181, 188, 191, 193, 194, 203, 221, 237, 248, 249, 270, 274, 284, 295], "read": [1, 2, 6, 7, 8, 11, 16, 23, 26, 27, 42, 52, 55, 57, 80, 99, 110, 111, 114, 123, 129, 132, 135, 136, 137, 139, 140, 141, 142, 143, 150, 152, 156, 158, 167, 170, 176, 177, 178, 180, 183, 185, 188, 191, 199, 207, 209, 223, 266, 267, 298, 301], "multipl": [1, 4, 6, 10, 12, 13, 16, 18, 19, 20, 22, 23, 24, 27, 45, 50, 54, 55, 59, 60, 61, 62, 66, 70, 88, 94, 96, 97, 101, 104, 105, 106, 110, 114, 122, 132, 134, 136, 138, 139, 140, 141, 142, 148, 150, 153, 158, 160, 170, 172, 176, 177, 179, 180, 181, 183, 187, 188, 190, 191, 193, 194, 196, 197, 199, 201, 203, 205, 208, 220, 221, 229, 231, 234, 241, 247, 252, 254, 266, 267, 273, 282, 283, 284, 287, 297, 301], "entri": [1, 5, 13, 16, 27, 59, 82, 107, 110, 113, 121, 123, 146, 151, 158, 174, 177, 179, 187, 193, 203, 218, 219, 221, 223, 232, 245, 285, 292], "In": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 40, 42, 43, 45, 48, 50, 54, 55, 56, 57, 58, 59, 61, 62, 63, 69, 73, 80, 82, 88, 89, 91, 93, 94, 97, 99, 101, 103, 105, 106, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 123, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 164, 165, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 237, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 262, 265, 266, 267, 269, 270, 272, 273, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "word": [1, 7, 12, 13, 16, 21, 49, 55, 80, 88, 97, 101, 106, 107, 109, 111, 112, 123, 133, 141, 142, 150, 152, 165, 167, 168, 174, 181, 183, 194, 196, 204, 217, 219, 221, 223, 229, 270, 298], "allow": [1, 2, 5, 6, 7, 10, 12, 13, 14, 16, 23, 26, 27, 28, 29, 36, 37, 38, 48, 55, 56, 57, 58, 59, 88, 89, 91, 94, 96, 97, 101, 104, 106, 108, 110, 111, 113, 114, 115, 116, 122, 134, 135, 136, 137, 138, 140, 141, 142, 143, 145, 148, 150, 151, 152, 156, 160, 161, 164, 167, 168, 170, 173, 174, 175, 177, 178, 179, 181, 182, 183, 185, 190, 191, 193, 194, 196, 197, 198, 199, 201, 203, 209, 210, 216, 217, 221, 223, 224, 226, 228, 229, 231, 240, 245, 249, 250, 252, 262, 264, 266, 267, 270, 273, 280, 281, 282, 292, 301], "u": [1, 4, 6, 7, 10, 11, 12, 13, 16, 18, 20, 23, 24, 27, 29, 36, 38, 49, 52, 55, 57, 58, 74, 88, 91, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 113, 114, 119, 122, 135, 138, 141, 144, 146, 150, 151, 153, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 175, 176, 177, 178, 180, 183, 188, 190, 191, 193, 194, 196, 197, 199, 208, 216, 217, 219, 221, 224, 234, 239, 243, 250, 252, 265, 267, 269, 270, 272, 280, 282, 296], "oblivi": [1, 177], "type": [1, 4, 5, 6, 7, 10, 12, 16, 22, 23, 24, 25, 26, 27, 45, 54, 55, 56, 80, 88, 91, 97, 99, 100, 103, 105, 110, 114, 116, 119, 132, 134, 135, 138, 140, 152, 153, 158, 169, 170, 173, 174, 177, 179, 180, 181, 182, 187, 190, 191, 193, 197, 199, 200, 204, 209, 216, 220, 224, 226, 229, 230, 231, 236, 241, 245, 246, 247, 250, 252, 255, 256, 262, 264, 265, 280, 281, 283, 284, 291, 294, 301], "being": [1, 3, 4, 5, 6, 7, 12, 14, 16, 20, 24, 25, 27, 52, 55, 58, 88, 97, 105, 106, 107, 108, 110, 114, 116, 129, 135, 138, 140, 144, 150, 151, 168, 170, 172, 174, 177, 178, 180, 191, 193, 194, 197, 209, 217, 218, 221, 223, 229, 230, 234, 236, 246, 255, 267, 272, 283, 297, 301], "run": [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 27, 28, 29, 36, 37, 38, 41, 42, 43, 45, 46, 48, 49, 52, 54, 57, 58, 62, 63, 66, 68, 69, 70, 72, 73, 74, 77, 78, 82, 88, 94, 96, 97, 99, 101, 103, 104, 105, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 188, 191, 194, 196, 197, 198, 199, 203, 204, 205, 206, 207, 208, 210, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 237, 239, 240, 241, 246, 247, 248, 249, 250, 253, 254, 255, 262, 264, 265, 266, 267, 268, 269, 270, 272, 274, 280, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 296, 297, 298, 299, 301], "elementari": [1, 2], "onli": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 22, 23, 24, 26, 27, 36, 43, 48, 49, 50, 52, 55, 59, 61, 62, 80, 88, 94, 96, 99, 101, 104, 106, 107, 108, 113, 114, 121, 123, 126, 129, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 180, 181, 182, 183, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 205, 207, 208, 209, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 229, 230, 231, 232, 236, 239, 240, 243, 244, 245, 249, 250, 252, 253, 262, 264, 266, 267, 273, 280, 283, 284, 285, 288, 292, 295, 296, 298, 301, 302], "those": [1, 4, 5, 6, 7, 8, 12, 13, 16, 20, 36, 43, 48, 94, 96, 104, 107, 113, 114, 119, 137, 138, 139, 141, 153, 157, 167, 172, 173, 174, 181, 183, 188, 190, 193, 194, 197, 205, 208, 217, 234, 236, 239, 240, 241, 247, 256, 262, 266, 267, 282, 292, 295, 297, 301], "keep": [1, 4, 7, 12, 13, 16, 27, 36, 45, 48, 55, 58, 80, 88, 91, 99, 101, 104, 106, 108, 110, 111, 114, 122, 123, 133, 134, 135, 136, 137, 138, 139, 142, 147, 148, 151, 158, 164, 170, 175, 181, 183, 193, 194, 197, 199, 204, 205, 226, 253, 267, 283, 302], "didact": [1, 150], "ll": [1, 4, 5, 6, 7, 10, 11, 12, 18, 20, 23, 24, 26, 27, 37, 38, 40, 45, 54, 55, 56, 83, 84, 85, 86, 94, 96, 97, 99, 101, 103, 104, 105, 107, 114, 116, 136, 141, 142, 148, 150, 151, 153, 155, 159, 164, 167, 169, 176, 177, 178, 180, 183, 188, 193, 194, 196, 199, 204, 205, 206, 208, 209, 216, 218, 220, 223, 226, 228, 231, 234, 243, 244, 252, 267, 294, 299], "displai": [1, 2, 6, 7, 14, 38, 49, 82, 97, 103, 105, 121, 129, 144, 175, 183, 187, 245, 248, 266, 267, 281], "each": [1, 2, 4, 6, 7, 10, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 45, 48, 49, 50, 54, 55, 57, 58, 59, 61, 62, 66, 70, 73, 80, 82, 88, 89, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 118, 121, 122, 123, 129, 132, 133, 134, 135, 136, 138, 140, 141, 142, 143, 145, 146, 147, 148, 150, 151, 153, 155, 157, 159, 160, 161, 164, 167, 168, 169, 170, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 193, 194, 196, 197, 198, 199, 201, 203, 207, 209, 210, 216, 219, 221, 223, 226, 228, 231, 234, 244, 245, 248, 249, 250, 252, 255, 256, 262, 265, 266, 267, 269, 270, 272, 273, 274, 280, 281, 282, 283, 285, 286, 298, 299, 301, 302], "popul": [1, 26, 36, 48, 55, 94, 104, 135, 151, 160, 177, 179, 203, 244, 250, 252, 282, 293], "later": [1, 3, 4, 5, 6, 7, 13, 18, 27, 36, 45, 52, 55, 80, 94, 97, 101, 106, 110, 111, 114, 123, 134, 135, 137, 138, 142, 143, 145, 150, 153, 155, 156, 157, 158, 159, 160, 164, 169, 172, 177, 178, 181, 182, 183, 188, 190, 193, 194, 199, 201, 203, 205, 207, 211, 216, 226, 228, 230, 232, 243, 244, 246, 248, 252, 262, 264, 266, 267, 268, 272, 280, 283, 288, 292, 293, 294, 295, 297, 298, 299], "stage": [1, 16, 19, 101, 114, 172, 210, 220, 240, 245, 246, 252], "start": [1, 5, 6, 7, 11, 13, 19, 20, 22, 23, 27, 28, 29, 36, 40, 48, 49, 55, 56, 58, 59, 60, 61, 66, 80, 94, 96, 97, 100, 101, 104, 105, 106, 107, 109, 110, 114, 115, 116, 119, 132, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 150, 152, 158, 159, 160, 167, 168, 170, 175, 176, 178, 179, 180, 183, 187, 188, 190, 191, 193, 194, 196, 197, 198, 201, 203, 205, 208, 209, 211, 218, 223, 224, 226, 228, 229, 230, 231, 234, 235, 245, 246, 250, 254, 262, 267, 270, 271, 273, 279, 281, 283, 286, 287, 290, 292, 293, 295, 302], "solv": [1, 7, 16, 55, 57, 106, 113, 129, 168, 175, 177, 179, 181, 196, 218, 267, 272, 283], "task": [1, 7, 15, 16, 20, 25, 28, 41, 42, 55, 82, 105, 106, 107, 113, 121, 129, 132, 133, 134, 141, 151, 152, 168, 170, 175, 177, 178, 183, 185, 190, 198, 209, 234, 267, 273, 282, 283, 292, 298, 301], "strategi": [1, 6, 20, 22, 28, 58, 88, 133, 142, 150, 158, 159, 169, 170, 179, 180, 234, 241, 246, 248, 249, 250, 256], "predict": [1, 11, 23, 24, 37, 40, 41, 42, 43, 48, 49, 55, 58, 68, 69, 72, 73, 74, 77, 78, 94, 96, 97, 99, 101, 105, 106, 107, 111, 113, 114, 122, 133, 138, 140, 141, 142, 152, 153, 159, 160, 170, 178, 183, 188, 194, 198, 204, 205, 226, 228, 234, 254, 265, 269, 287, 298, 300], "henc": [1, 16, 20, 45, 48, 54, 88, 134, 139, 148, 161, 164, 170, 173, 177, 179, 181, 194, 196, 234, 254, 255, 267, 298], "our": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 19, 20, 23, 24, 25, 26, 27, 29, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 66, 68, 69, 70, 72, 73, 74, 80, 82, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 111, 113, 114, 116, 119, 121, 122, 129, 133, 134, 135, 137, 140, 141, 142, 143, 145, 146, 147, 151, 152, 155, 157, 158, 159, 160, 161, 164, 168, 169, 170, 172, 174, 175, 177, 178, 179, 180, 182, 183, 185, 188, 190, 191, 193, 194, 196, 198, 199, 200, 201, 205, 208, 211, 216, 217, 218, 219, 223, 226, 228, 232, 234, 237, 239, 244, 246, 247, 250, 252, 254, 265, 267, 270, 282, 287, 288, 293, 294, 302], "two": [1, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 36, 38, 41, 42, 45, 46, 48, 54, 55, 56, 58, 63, 80, 82, 89, 91, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 121, 122, 129, 134, 135, 140, 141, 143, 144, 145, 147, 148, 150, 151, 155, 157, 158, 159, 160, 161, 164, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 190, 194, 196, 197, 198, 199, 200, 201, 203, 206, 208, 210, 217, 219, 221, 223, 224, 226, 228, 229, 231, 234, 236, 237, 241, 245, 249, 250, 252, 254, 256, 262, 267, 269, 270, 272, 273, 280, 282, 283, 284, 287, 293, 295, 297, 300, 301, 302], "constructor": [1, 7, 12, 13, 14, 25, 26, 27, 29, 72, 74, 91, 101, 105, 122, 134, 135, 148, 151, 170, 173, 174, 177, 179, 181, 219, 236, 266, 267], "both": [1, 2, 5, 6, 7, 10, 12, 13, 14, 16, 19, 23, 24, 25, 26, 27, 28, 29, 38, 55, 57, 58, 66, 80, 88, 91, 97, 104, 105, 106, 113, 114, 121, 122, 135, 136, 138, 140, 144, 147, 148, 150, 155, 156, 158, 159, 161, 164, 170, 174, 175, 177, 179, 180, 181, 182, 183, 193, 194, 196, 197, 198, 199, 200, 205, 208, 209, 210, 216, 219, 220, 223, 226, 229, 230, 231, 245, 246, 247, 249, 254, 255, 256, 262, 264, 265, 266, 267, 280, 282, 292, 293, 298, 300, 301], "compat": [1, 5, 6, 7, 10, 13, 20, 56, 103, 104, 110, 115, 137, 143, 151, 161, 182, 191, 193, 194, 205, 232, 236, 250, 297, 298, 300], "comput": [1, 3, 4, 6, 7, 10, 13, 14, 15, 18, 19, 20, 23, 24, 25, 27, 28, 29, 41, 45, 49, 52, 54, 55, 57, 58, 59, 63, 66, 68, 69, 70, 73, 77, 78, 80, 82, 89, 91, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109, 114, 116, 118, 122, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 155, 156, 158, 160, 167, 168, 169, 170, 172, 174, 176, 177, 178, 180, 182, 183, 187, 190, 191, 193, 194, 196, 197, 198, 199, 201, 203, 205, 208, 220, 221, 223, 225, 226, 228, 229, 230, 234, 236, 239, 240, 241, 243, 244, 250, 252, 254, 262, 264, 266, 267, 269, 270, 272, 274, 282, 295, 298, 300, 301], "fit": [1, 7, 12, 13, 24, 66, 94, 113, 122, 134, 135, 136, 138, 148, 170, 181, 194, 204, 266, 301], "gener": [1, 5, 6, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 22, 24, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 59, 68, 69, 70, 72, 73, 74, 77, 78, 82, 88, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 124, 126, 129, 133, 138, 139, 141, 143, 144, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 174, 175, 177, 178, 179, 181, 182, 183, 184, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 203, 204, 207, 208, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 228, 229, 230, 231, 234, 237, 239, 241, 244, 246, 247, 252, 254, 255, 256, 262, 264, 265, 266, 268, 269, 270, 272, 273, 274, 280, 281, 282, 284, 285, 286, 287, 288, 293, 294, 295, 296, 297, 298, 299, 301], "crucial": [1, 2, 14, 16, 27, 88, 110, 151, 170, 177, 194], "convert_to_funct": 1, "extract": [1, 6, 24, 55, 58, 80, 103, 106, 129, 133, 141, 142, 152, 155, 158, 169, 175, 177, 183, 191, 193, 198, 245, 250, 252, 269], "convert": [1, 6, 11, 12, 14, 23, 24, 26, 27, 37, 38, 45, 46, 49, 55, 57, 58, 61, 82, 99, 101, 104, 106, 114, 116, 118, 123, 133, 136, 141, 142, 152, 175, 176, 177, 179, 180, 188, 194, 197, 204, 206, 208, 209, 216, 217, 219, 220, 221, 224, 225, 229, 230, 231, 247, 250, 253, 255, 264, 265, 270, 280, 283, 287], "strictli": [1, 104, 177], "speak": [1, 10, 48, 104, 139, 150, 283], "one": [1, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 20, 22, 23, 25, 26, 27, 29, 36, 38, 40, 45, 46, 50, 52, 54, 55, 57, 58, 61, 62, 66, 80, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 122, 123, 126, 129, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 167, 168, 169, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 193, 194, 197, 198, 200, 203, 206, 207, 208, 216, 217, 218, 220, 221, 223, 228, 231, 234, 239, 246, 247, 248, 249, 250, 264, 267, 269, 270, 272, 273, 283, 284, 286, 287, 295, 296, 297, 298, 301, 302], "perfectli": [1, 16], "howev": [1, 4, 6, 7, 8, 10, 12, 14, 16, 17, 18, 20, 24, 26, 27, 29, 36, 43, 50, 52, 55, 57, 58, 80, 91, 94, 106, 107, 122, 129, 138, 139, 143, 144, 145, 150, 151, 153, 157, 161, 167, 170, 173, 174, 175, 178, 179, 180, 181, 182, 183, 188, 190, 191, 193, 194, 196, 200, 206, 210, 211, 217, 218, 221, 228, 231, 234, 239, 241, 247, 248, 252, 254, 267, 270, 272, 280, 282, 283, 288, 295, 298, 301], "encourag": [1, 7, 23, 101, 178, 183, 190], "usag": [1, 3, 4, 5, 13, 15, 17, 25, 27, 88, 94, 96, 121, 133, 134, 136, 139, 150, 151, 158, 159, 172, 177, 179, 181, 182, 184, 187, 197, 199, 201, 208, 209, 211, 220, 221, 223, 229, 230, 241, 246, 255, 262, 266, 281, 283, 287, 296, 300, 301], "doe": [1, 2, 4, 6, 7, 10, 15, 16, 17, 18, 23, 26, 27, 29, 36, 46, 48, 52, 77, 78, 80, 91, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 113, 114, 116, 119, 122, 123, 129, 134, 135, 136, 137, 143, 145, 148, 150, 151, 156, 159, 160, 161, 167, 168, 170, 172, 176, 177, 178, 180, 181, 182, 183, 187, 188, 191, 193, 194, 196, 198, 199, 203, 205, 206, 207, 208, 217, 218, 219, 226, 229, 230, 236, 239, 246, 250, 262, 264, 266, 267, 270, 272, 280, 282, 283, 295, 297, 301], "often": [1, 5, 6, 7, 12, 16, 20, 45, 55, 80, 94, 96, 97, 99, 104, 106, 108, 110, 113, 114, 122, 123, 138, 139, 140, 142, 160, 168, 193, 194, 197, 203, 221, 234, 237, 243, 246, 250, 266, 282, 283], "same": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 20, 23, 24, 25, 26, 27, 29, 36, 37, 43, 45, 48, 49, 55, 57, 58, 59, 61, 70, 78, 80, 91, 94, 96, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 119, 121, 122, 123, 134, 135, 136, 137, 138, 139, 141, 143, 144, 147, 148, 150, 152, 153, 155, 158, 159, 160, 161, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 199, 200, 201, 204, 205, 207, 209, 210, 216, 217, 218, 219, 221, 228, 229, 230, 231, 234, 246, 247, 253, 262, 264, 266, 267, 270, 273, 275, 276, 277, 278, 280, 283, 286, 292, 293, 296, 297, 300, 301, 302], "usual": [1, 6, 7, 10, 18, 23, 27, 48, 97, 99, 101, 103, 104, 108, 109, 111, 113, 114, 129, 138, 139, 142, 144, 145, 148, 150, 151, 158, 161, 167, 170, 174, 175, 177, 193, 199, 223, 239, 266, 272, 273, 283, 301], "former": [1, 6, 141, 142, 183], "some": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 23, 24, 26, 27, 29, 36, 37, 38, 41, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 68, 73, 80, 88, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 119, 121, 122, 123, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 153, 155, 156, 157, 158, 159, 164, 167, 169, 170, 172, 174, 175, 177, 178, 180, 181, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 201, 203, 205, 206, 208, 216, 217, 218, 219, 221, 224, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 247, 250, 255, 256, 266, 267, 269, 270, 272, 273, 274, 282, 283, 284, 288, 295, 296, 298, 301], "lag": [1, 177], "absolut": [1, 7, 12, 88, 108, 174, 178, 282], "dilut": 1, "move": [1, 5, 6, 8, 14, 27, 30, 31, 32, 33, 34, 35, 37, 42, 45, 48, 52, 54, 81, 95, 96, 108, 114, 134, 135, 136, 138, 147, 148, 151, 154, 167, 168, 170, 173, 175, 178, 180, 181, 186, 187, 189, 192, 197, 198, 206, 212, 215, 217, 227, 228, 229, 233, 240, 245, 246, 247, 254, 267, 270, 282, 283], "averag": [1, 3, 23, 55, 58, 66, 88, 94, 97, 99, 105, 106, 114, 134, 137, 142, 150, 152, 169, 178, 181, 183, 187, 196, 197, 205, 226, 228, 267, 283], "These": [1, 6, 10, 13, 14, 16, 20, 23, 24, 25, 29, 43, 48, 55, 58, 61, 66, 88, 94, 101, 107, 109, 111, 113, 114, 121, 129, 150, 160, 175, 177, 180, 182, 183, 190, 193, 194, 196, 197, 199, 205, 208, 224, 226, 228, 231, 234, 254, 267, 282, 283, 292, 293, 295], "associ": [1, 4, 6, 7, 10, 12, 37, 38, 56, 88, 97, 145, 155, 170, 174, 182, 190, 194, 207, 217, 234, 236, 269, 280, 283, 297], "One": [1, 2, 4, 5, 6, 7, 12, 13, 17, 25, 27, 55, 57, 80, 88, 96, 101, 104, 106, 107, 108, 110, 134, 135, 136, 137, 138, 139, 142, 148, 150, 152, 153, 156, 167, 168, 170, 185, 188, 191, 193, 194, 197, 198, 199, 203, 218, 223, 231, 239, 246, 247, 256, 267, 274, 280, 282, 283, 298], "advantag": [1, 3, 7, 16, 20, 27, 55, 91, 104, 107, 114, 132, 135, 136, 139, 150, 151, 168, 170, 177, 191, 197, 199, 205, 209, 219, 234, 246, 247, 255, 262, 270, 283, 293, 297], "match": [1, 5, 6, 12, 16, 20, 23, 24, 26, 49, 73, 82, 99, 104, 106, 114, 116, 119, 122, 123, 152, 153, 156, 158, 161, 167, 169, 177, 180, 191, 193, 205, 209, 217, 219, 223, 226, 234, 254, 255, 266, 269, 274, 284, 301], "exactli": [1, 6, 10, 12, 14, 20, 29, 36, 48, 57, 58, 99, 110, 113, 114, 116, 122, 151, 158, 168, 193, 194, 209, 234], "current": [1, 4, 6, 7, 10, 12, 13, 14, 16, 17, 23, 26, 27, 37, 42, 45, 55, 58, 68, 80, 88, 94, 97, 106, 114, 118, 122, 129, 134, 135, 137, 139, 140, 141, 142, 150, 151, 155, 160, 161, 169, 170, 172, 174, 175, 177, 178, 179, 180, 181, 182, 183, 187, 193, 194, 199, 200, 203, 205, 209, 216, 218, 219, 221, 223, 226, 228, 230, 247, 250, 253, 254, 264, 273, 283, 292, 295], "configur": [1, 5, 6, 7, 16, 22, 23, 24, 26, 27, 28, 55, 56, 88, 97, 105, 135, 138, 146, 148, 156, 158, 167, 175, 177, 180, 187, 190, 194, 196, 206, 208, 211, 220, 229, 230, 231, 245, 254, 255, 256, 287, 288, 293, 295, 298, 301], "pessimist": [1, 177], "bound": [1, 27, 55, 123, 136, 140, 158, 177, 178, 187, 193, 194, 196, 198, 199, 208, 266, 267, 273, 283, 301], "pai": [1, 12, 50, 55, 137, 151, 283, 296], "attent": [1, 12, 50, 55, 101, 133, 137, 138, 141, 142, 151, 165, 184, 185, 201, 208, 209, 221, 225, 295], "create_target_param": 1, "keyword": [1, 6, 151, 174, 177, 190, 272, 280], "argument": [1, 2, 4, 5, 6, 7, 10, 16, 18, 25, 26, 27, 36, 42, 45, 48, 49, 54, 57, 61, 74, 88, 96, 97, 101, 103, 104, 106, 108, 111, 113, 115, 121, 122, 123, 134, 135, 142, 147, 148, 150, 151, 153, 158, 159, 169, 170, 172, 173, 174, 177, 179, 180, 181, 182, 187, 190, 191, 193, 194, 200, 201, 203, 218, 220, 229, 239, 240, 245, 248, 252, 266, 267, 272, 273, 280, 281, 283, 284, 295, 301], "below": [1, 2, 4, 5, 7, 12, 13, 14, 16, 19, 22, 23, 24, 27, 28, 38, 43, 45, 48, 50, 54, 57, 58, 59, 60, 61, 62, 63, 88, 91, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 126, 136, 137, 138, 140, 143, 144, 146, 147, 148, 150, 151, 152, 155, 158, 161, 167, 173, 175, 177, 178, 179, 180, 181, 182, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 203, 208, 209, 210, 211, 217, 218, 219, 220, 221, 223, 224, 232, 236, 237, 244, 245, 246, 247, 248, 250, 252, 253, 254, 256, 262, 264, 266, 267, 270, 272, 273, 283, 288, 291, 292, 295, 296, 297, 298, 301, 302], "tell": [1, 18, 22, 27, 74, 94, 96, 99, 101, 105, 113, 114, 122, 140, 141, 151, 153, 155, 167, 178, 179, 181, 183, 193, 267, 273], "creat": [1, 2, 5, 6, 7, 11, 12, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 40, 43, 45, 46, 48, 49, 52, 54, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 91, 94, 96, 97, 99, 101, 103, 105, 106, 107, 109, 111, 113, 115, 116, 119, 122, 123, 126, 133, 135, 136, 137, 138, 143, 145, 148, 150, 151, 152, 155, 156, 160, 161, 165, 168, 169, 170, 172, 173, 175, 176, 177, 178, 180, 181, 183, 187, 188, 190, 191, 193, 194, 198, 199, 201, 204, 205, 207, 208, 209, 211, 216, 219, 221, 223, 224, 226, 229, 230, 231, 236, 240, 243, 244, 246, 247, 249, 252, 254, 262, 266, 267, 269, 270, 273, 274, 280, 281, 284, 285, 286, 287, 288, 295, 297, 298, 300, 302], "If": [1, 2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 18, 19, 20, 22, 25, 26, 27, 28, 36, 37, 40, 42, 45, 48, 49, 50, 52, 54, 55, 56, 58, 59, 61, 66, 68, 80, 82, 88, 94, 96, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 122, 123, 126, 129, 134, 135, 136, 137, 138, 139, 142, 144, 148, 150, 151, 153, 155, 158, 159, 161, 167, 168, 169, 170, 173, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 198, 199, 200, 203, 205, 206, 207, 208, 209, 210, 216, 217, 219, 220, 221, 223, 226, 228, 232, 234, 236, 239, 240, 241, 246, 247, 250, 253, 255, 256, 262, 265, 266, 268, 270, 272, 273, 280, 281, 282, 283, 284, 286, 288, 295, 296, 301], "fals": [1, 2, 4, 7, 12, 13, 16, 23, 24, 27, 38, 43, 48, 49, 61, 68, 69, 88, 89, 94, 96, 110, 119, 122, 123, 129, 134, 135, 136, 138, 144, 151, 152, 155, 158, 161, 164, 167, 168, 170, 175, 176, 179, 180, 188, 190, 191, 193, 196, 197, 200, 203, 205, 209, 210, 217, 218, 220, 224, 226, 228, 230, 231, 232, 234, 240, 243, 252, 253, 254, 255, 256, 264, 266, 280, 283, 284, 291, 298, 301, 302], "see": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 18, 20, 22, 23, 24, 25, 27, 28, 29, 37, 41, 42, 45, 49, 50, 52, 54, 55, 56, 57, 58, 61, 66, 80, 82, 88, 89, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 121, 123, 134, 135, 136, 138, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 156, 157, 158, 160, 164, 167, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 208, 209, 216, 218, 219, 220, 224, 225, 226, 231, 232, 234, 236, 237, 239, 240, 241, 244, 247, 248, 249, 250, 252, 253, 254, 257, 262, 264, 265, 266, 267, 270, 273, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 296, 297, 299, 300, 301], "target_actor_network_param": 1, "attribut": [1, 7, 13, 16, 26, 29, 36, 48, 52, 59, 88, 91, 101, 113, 114, 119, 139, 151, 155, 161, 168, 172, 174, 193, 196, 205, 209, 221, 225, 229, 230, 237, 241, 266, 286, 287, 298], "still": [1, 6, 7, 10, 12, 13, 14, 16, 17, 20, 22, 23, 24, 27, 52, 58, 80, 94, 96, 104, 106, 110, 114, 116, 121, 123, 135, 141, 142, 143, 148, 150, 151, 155, 156, 157, 161, 167, 170, 181, 191, 193, 194, 196, 200, 201, 204, 205, 208, 210, 216, 218, 220, 223, 226, 231, 234, 246, 247, 249, 254, 264, 282, 283, 296, 302], "access": [1, 6, 7, 12, 16, 20, 23, 27, 37, 38, 56, 73, 80, 94, 96, 99, 101, 104, 105, 106, 111, 114, 122, 123, 133, 135, 139, 146, 150, 156, 168, 170, 176, 178, 180, 190, 193, 197, 207, 209, 216, 217, 219, 220, 224, 234, 246, 249, 253, 262, 282, 286, 292], "just": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 16, 18, 19, 20, 23, 25, 26, 27, 29, 36, 49, 50, 52, 55, 56, 57, 58, 59, 62, 77, 78, 91, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 111, 113, 114, 123, 129, 134, 135, 138, 140, 141, 142, 148, 151, 152, 158, 159, 164, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 188, 190, 191, 193, 194, 196, 198, 205, 208, 210, 218, 226, 228, 231, 234, 247, 249, 250, 255, 264, 267, 268, 269, 282, 283, 286, 288, 301], "detach": [1, 2, 7, 13, 36, 96, 97, 104, 110, 137, 152, 164, 169, 201, 204, 209, 280], "version": [1, 3, 4, 5, 6, 7, 10, 12, 14, 16, 24, 26, 27, 29, 97, 99, 101, 104, 105, 114, 115, 116, 118, 119, 134, 135, 139, 150, 151, 152, 153, 155, 159, 161, 168, 170, 172, 173, 174, 175, 176, 177, 185, 187, 188, 190, 194, 198, 199, 203, 206, 207, 208, 209, 211, 216, 226, 228, 231, 232, 240, 252, 253, 254, 255, 256, 264, 266, 267, 270, 272, 282, 288, 293, 297, 300], "q": [1, 48, 55, 133, 138, 160, 182, 190, 226, 234], "base": [1, 6, 7, 11, 12, 13, 16, 19, 20, 22, 24, 27, 28, 29, 38, 49, 55, 63, 80, 82, 91, 94, 96, 97, 101, 105, 106, 108, 116, 121, 123, 132, 133, 134, 135, 136, 137, 140, 141, 143, 151, 152, 160, 170, 172, 173, 174, 178, 180, 183, 187, 188, 190, 193, 194, 197, 198, 201, 204, 205, 209, 210, 218, 220, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 245, 254, 266, 270, 280, 282, 283, 287, 293, 297, 298], "empir": [1, 164, 177], "bootstrap": [1, 151], "td": [1, 151], "0": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 61, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 88, 91, 92, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 126, 129, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 190, 191, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 219, 220, 221, 223, 226, 228, 230, 231, 232, 234, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 291, 294, 295, 296, 297, 298, 299, 300, 301, 302], "low": [1, 4, 5, 6, 7, 16, 18, 24, 28, 29, 55, 58, 73, 88, 101, 108, 122, 133, 141, 151, 187, 193, 197, 199, 224, 255, 256, 282], "varianc": [1, 7, 23, 103, 177], "bia": [1, 2, 6, 7, 23, 48, 52, 73, 108, 114, 122, 123, 134, 143, 144, 151, 159, 174, 177, 181, 182, 199, 200, 204, 209, 220, 221, 228, 231, 234, 253, 280], "mean": [1, 2, 4, 6, 7, 12, 14, 16, 23, 27, 29, 41, 52, 55, 57, 58, 73, 80, 88, 91, 96, 97, 99, 101, 104, 106, 107, 108, 110, 113, 121, 122, 123, 135, 138, 140, 141, 144, 148, 150, 152, 161, 168, 170, 175, 176, 177, 178, 180, 181, 183, 187, 188, 190, 193, 194, 205, 207, 209, 216, 218, 221, 226, 228, 231, 232, 239, 240, 241, 243, 247, 252, 264, 267, 270, 272, 273, 282, 283, 288, 298, 301], "obtain": [1, 11, 28, 36, 41, 55, 73, 94, 114, 119, 122, 140, 141, 144, 150, 152, 159, 169, 177, 178, 180, 187, 190, 198, 207, 273, 297], "reward": [1, 5, 16, 151, 160, 177, 178, 179, 181], "noth": [1, 27, 80, 99, 114, 145, 170, 181, 187, 200, 300], "els": [1, 5, 6, 10, 13, 22, 23, 27, 29, 49, 52, 55, 94, 96, 113, 115, 135, 136, 150, 151, 152, 164, 172, 173, 175, 179, 180, 181, 188, 190, 191, 193, 201, 204, 205, 209, 210, 220, 226, 228, 234, 245, 249, 250, 252, 253, 266, 280, 298, 300, 302], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 36, 37, 38, 40, 46, 48, 55, 58, 59, 61, 69, 73, 80, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 111, 113, 114, 115, 118, 119, 121, 122, 123, 126, 129, 134, 135, 136, 138, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 165, 167, 168, 169, 174, 176, 177, 178, 179, 180, 181, 182, 190, 191, 194, 197, 199, 201, 203, 206, 208, 210, 211, 216, 217, 218, 219, 220, 221, 225, 226, 228, 232, 234, 236, 237, 240, 241, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 262, 266, 272, 274, 280, 281, 283, 291, 292, 297, 298, 300, 301, 302], "case": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16, 19, 20, 24, 26, 27, 29, 36, 43, 48, 55, 57, 66, 73, 80, 82, 88, 91, 96, 97, 103, 104, 106, 107, 108, 110, 111, 113, 114, 119, 122, 123, 132, 134, 135, 136, 138, 139, 140, 143, 144, 145, 150, 151, 153, 155, 158, 159, 161, 164, 167, 168, 169, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 208, 209, 216, 218, 219, 220, 221, 224, 226, 231, 232, 234, 236, 239, 240, 247, 250, 255, 265, 266, 267, 270, 273, 274, 280, 282, 286, 288, 293, 295, 296, 298, 301], "whole": [1, 3, 29, 49, 52, 101, 114, 123, 133, 137, 150, 174, 175, 177, 183, 194, 205, 206, 209, 217, 231, 239, 270, 288], "sequenc": [1, 6, 7, 14, 25, 27, 45, 54, 55, 72, 73, 101, 107, 109, 112, 113, 122, 123, 133, 141, 142, 151, 152, 165, 168, 177, 182, 184, 199, 201, 205, 208, 209, 221, 223, 225, 239, 243, 244, 249, 252, 253, 266, 270, 273, 283], "upcom": 1, "intermedi": [1, 29, 81, 96, 101, 104, 133, 146, 155, 158, 159, 160, 167, 170, 184, 192, 194, 199, 231, 234, 267, 274, 300], "lambda": [1, 6, 26, 97, 114, 143, 176, 179, 193, 234, 252, 266, 267], "also": [1, 2, 4, 5, 6, 7, 10, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 42, 45, 48, 52, 54, 55, 57, 58, 59, 60, 66, 73, 80, 82, 88, 91, 94, 96, 97, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 121, 122, 123, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 150, 151, 152, 155, 157, 158, 159, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 211, 216, 217, 218, 219, 223, 226, 229, 230, 231, 232, 234, 236, 237, 239, 240, 241, 244, 246, 247, 248, 249, 250, 252, 254, 255, 256, 262, 264, 266, 267, 268, 270, 272, 273, 280, 281, 282, 283, 285, 286, 288, 292, 293, 294, 296, 297, 299, 300, 301, 302], "compromis": 1, "easi": [1, 2, 6, 7, 11, 27, 28, 38, 49, 50, 57, 73, 96, 97, 104, 106, 108, 135, 136, 138, 140, 150, 156, 159, 164, 168, 172, 177, 187, 193, 194, 196, 206, 210, 223, 234, 239, 255, 267, 282, 298], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 8, 26, 27, 107, 180], "defin": [1, 2, 6, 14, 16, 17, 18, 19, 20, 22, 24, 25, 27, 29, 36, 41, 42, 43, 46, 48, 50, 58, 67, 70, 72, 73, 74, 80, 91, 94, 96, 101, 103, 105, 107, 108, 113, 114, 116, 119, 123, 133, 134, 135, 139, 141, 143, 146, 150, 151, 153, 156, 157, 160, 164, 167, 169, 170, 178, 179, 180, 182, 185, 187, 188, 191, 193, 199, 203, 206, 216, 223, 224, 229, 230, 231, 232, 234, 243, 246, 247, 250, 252, 254, 255, 256, 264, 270, 271, 272, 273, 279, 280, 287, 288, 290, 294, 296, 297, 298, 302], "default": [1, 3, 4, 6, 7, 10, 11, 12, 13, 17, 20, 23, 24, 25, 28, 36, 41, 45, 48, 50, 55, 57, 58, 61, 68, 69, 82, 88, 94, 99, 101, 103, 104, 108, 110, 115, 119, 122, 129, 133, 134, 135, 136, 137, 138, 141, 150, 151, 153, 155, 156, 158, 161, 167, 170, 173, 175, 176, 179, 180, 181, 187, 188, 190, 191, 193, 194, 197, 199, 200, 201, 203, 204, 205, 210, 219, 220, 223, 224, 226, 228, 229, 230, 231, 232, 236, 240, 241, 246, 247, 250, 254, 255, 262, 264, 267, 270, 271, 272, 273, 279, 280, 281, 283, 286, 288, 291, 292, 293, 296, 298, 301, 302], "take": [1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 37, 38, 45, 48, 49, 52, 54, 55, 56, 57, 58, 73, 80, 82, 88, 91, 96, 97, 99, 101, 103, 104, 105, 106, 108, 110, 111, 113, 114, 119, 122, 123, 129, 137, 138, 139, 140, 141, 142, 143, 145, 148, 150, 152, 157, 159, 160, 167, 170, 175, 176, 177, 178, 179, 180, 181, 183, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 201, 205, 208, 211, 216, 219, 221, 223, 224, 226, 228, 229, 230, 231, 234, 239, 246, 247, 250, 254, 255, 256, 264, 267, 268, 269, 270, 273, 280, 282, 283, 284, 285, 286, 288, 293, 298, 300, 301], "simplest": [1, 7, 27, 36, 52, 96, 104, 108, 151, 177, 183, 283], "show": [1, 6, 12, 13, 18, 20, 22, 23, 26, 28, 38, 49, 57, 58, 66, 80, 88, 89, 91, 94, 96, 97, 99, 101, 104, 105, 114, 119, 121, 133, 134, 137, 140, 141, 142, 144, 145, 148, 151, 158, 161, 170, 173, 175, 176, 178, 179, 181, 187, 188, 190, 191, 193, 194, 196, 197, 199, 200, 205, 209, 216, 223, 226, 228, 234, 244, 245, 246, 247, 249, 250, 255, 262, 264, 266, 267, 270, 273, 281, 282, 283, 288, 297, 298, 301, 302], "chang": [1, 2, 6, 7, 12, 13, 14, 16, 23, 25, 26, 27, 28, 36, 45, 48, 54, 56, 57, 58, 59, 61, 88, 89, 91, 94, 96, 97, 99, 100, 105, 106, 107, 109, 110, 111, 116, 123, 133, 134, 137, 138, 140, 141, 143, 146, 147, 150, 151, 152, 155, 158, 159, 160, 167, 168, 170, 173, 174, 175, 179, 187, 190, 191, 193, 194, 197, 199, 204, 205, 208, 210, 218, 220, 221, 224, 226, 228, 230, 231, 232, 240, 241, 244, 245, 246, 247, 252, 255, 256, 266, 267, 270, 271, 279, 280, 281, 283, 284, 291, 296, 297, 298, 299, 301], "instruct": [1, 7, 23, 27, 28, 40, 97, 100, 103, 105, 141, 142, 151, 152, 155, 172, 174, 175, 177, 179, 181, 183, 196, 197, 205, 226, 228, 229, 240, 241, 254, 255, 262, 265, 270, 283, 287, 300, 301], "queri": [1, 16, 26, 55, 99, 104, 123, 137, 180, 182, 198, 199, 201, 209, 221, 226, 231], "correspond": [1, 2, 3, 4, 6, 7, 10, 12, 14, 16, 17, 37, 38, 42, 48, 55, 61, 82, 88, 96, 97, 101, 103, 108, 111, 121, 123, 134, 139, 140, 143, 158, 167, 172, 174, 177, 180, 183, 185, 187, 188, 190, 191, 193, 194, 198, 199, 207, 209, 219, 230, 231, 232, 256, 265, 272, 273, 283, 287, 301], "make_value_estim": 1, "central": [1, 10, 80, 96, 104, 105, 111, 113, 146, 286], "quit": [1, 7, 20, 27, 55, 80, 139, 150, 167, 177, 181, 193, 194, 216, 234, 246, 249, 252, 267, 282], "weight": [1, 2, 3, 5, 6, 7, 11, 14, 15, 16, 20, 23, 24, 28, 36, 37, 48, 49, 55, 68, 69, 71, 73, 74, 75, 77, 78, 80, 96, 97, 99, 101, 104, 105, 106, 108, 109, 111, 114, 123, 129, 133, 134, 141, 143, 144, 146, 151, 152, 153, 156, 158, 159, 161, 167, 168, 169, 174, 175, 177, 178, 181, 183, 187, 190, 194, 197, 199, 200, 204, 205, 206, 208, 209, 220, 224, 226, 228, 229, 230, 231, 234, 236, 246, 250, 254, 256, 264, 269, 270, 280, 285, 286, 291, 298, 300], "when": [1, 4, 6, 7, 10, 12, 13, 14, 16, 17, 18, 20, 22, 24, 25, 26, 27, 29, 36, 38, 41, 43, 45, 48, 49, 50, 52, 54, 55, 56, 58, 59, 61, 66, 73, 80, 82, 88, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 110, 113, 114, 115, 118, 119, 121, 122, 123, 133, 134, 135, 136, 137, 139, 140, 142, 143, 144, 147, 148, 150, 151, 152, 155, 157, 158, 160, 161, 164, 167, 168, 170, 173, 174, 175, 177, 178, 179, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 198, 199, 203, 205, 206, 208, 216, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 237, 240, 241, 244, 245, 247, 248, 249, 254, 262, 266, 267, 269, 270, 272, 273, 274, 280, 282, 283, 284, 286, 287, 292, 293, 295, 296, 298, 301, 302], "must": [1, 2, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 18, 26, 27, 37, 38, 55, 58, 80, 91, 96, 97, 104, 107, 113, 118, 119, 123, 135, 148, 150, 151, 153, 155, 170, 175, 177, 180, 187, 190, 191, 193, 194, 200, 203, 207, 216, 217, 219, 221, 228, 230, 231, 236, 239, 245, 248, 272, 274, 280, 283, 295], "sure": [1, 5, 6, 7, 10, 12, 13, 16, 23, 26, 43, 57, 63, 94, 99, 103, 106, 107, 113, 119, 123, 134, 138, 143, 148, 150, 151, 152, 157, 170, 175, 177, 179, 190, 194, 209, 217, 219, 231, 239, 245, 255, 265, 266, 272, 281, 283, 292, 293, 295], "out": [1, 2, 4, 5, 6, 7, 10, 12, 13, 16, 17, 18, 20, 24, 25, 26, 27, 28, 29, 36, 40, 41, 45, 46, 48, 49, 50, 54, 55, 57, 58, 64, 65, 66, 80, 82, 83, 84, 85, 86, 87, 89, 91, 94, 96, 97, 99, 101, 104, 106, 107, 109, 111, 114, 118, 121, 133, 134, 136, 137, 138, 139, 140, 141, 145, 146, 148, 150, 151, 153, 157, 158, 159, 167, 170, 173, 174, 175, 176, 177, 179, 180, 181, 183, 187, 188, 190, 193, 194, 196, 197, 199, 201, 203, 204, 205, 206, 213, 214, 216, 217, 218, 219, 221, 222, 224, 225, 226, 228, 229, 234, 239, 240, 241, 242, 249, 255, 256, 258, 259, 260, 261, 263, 265, 271, 273, 279, 280, 283, 287, 293, 296, 297, 298, 301], "graph": [1, 6, 12, 16, 18, 24, 27, 29, 52, 55, 68, 70, 73, 77, 78, 88, 91, 93, 96, 107, 109, 115, 118, 119, 122, 133, 139, 141, 145, 156, 157, 158, 159, 161, 180, 181, 187, 188, 190, 196, 199, 200, 210, 211, 225, 226, 228, 231, 235, 240, 241, 250, 252, 253, 255, 256, 269, 281, 288, 292, 293, 297, 299, 300], "otherwis": [1, 4, 10, 12, 23, 27, 37, 42, 55, 61, 68, 80, 88, 91, 104, 114, 122, 123, 129, 134, 139, 145, 148, 151, 158, 159, 161, 167, 177, 178, 180, 191, 194, 228, 234, 239, 240, 245, 282, 296, 301], "mix": [1, 10, 17, 66, 121, 161, 205, 224, 229, 230, 255, 256, 271, 279, 287], "For": [1, 2, 4, 5, 6, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 29, 36, 41, 42, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 68, 69, 73, 80, 82, 88, 89, 94, 97, 101, 103, 104, 105, 106, 107, 108, 109, 111, 113, 114, 116, 122, 123, 126, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 151, 152, 153, 156, 157, 158, 160, 161, 168, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 187, 190, 191, 193, 194, 196, 197, 198, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 216, 217, 218, 219, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 240, 241, 243, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 262, 264, 265, 266, 267, 269, 270, 272, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 299, 300, 301, 302], "hold_out_param": 1, "now": [1, 2, 5, 6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 24, 25, 26, 27, 28, 29, 41, 42, 48, 49, 50, 52, 55, 56, 57, 58, 61, 80, 91, 94, 95, 96, 97, 103, 104, 106, 107, 108, 110, 113, 114, 116, 119, 122, 129, 133, 135, 138, 139, 140, 141, 143, 144, 145, 148, 150, 151, 152, 156, 157, 158, 159, 160, 164, 167, 168, 169, 170, 173, 174, 176, 177, 178, 179, 180, 181, 185, 187, 188, 190, 191, 193, 194, 196, 198, 199, 200, 201, 204, 205, 208, 209, 211, 216, 217, 221, 224, 226, 229, 231, 232, 234, 236, 239, 244, 246, 247, 250, 268, 269, 270, 280, 281, 282, 285, 293, 300], "reli": [1, 3, 4, 7, 10, 16, 27, 43, 55, 96, 113, 139, 160, 167, 170, 174, 177, 193, 211, 218, 220, 241, 245, 283], "miss": [1, 57, 123, 143, 148, 151, 187, 191, 197, 201, 217, 266, 282, 284, 301], "glue": [1, 152, 181], "cost": [1, 6, 16, 55, 106, 108, 121, 134, 135, 138, 139, 143, 164, 187, 193, 246, 268, 283, 296, 297], "deliv": [1, 197, 241, 255, 295], "most": [1, 2, 5, 6, 13, 16, 20, 26, 27, 29, 36, 40, 48, 55, 57, 58, 80, 82, 94, 96, 97, 99, 101, 104, 108, 110, 111, 114, 121, 122, 123, 129, 132, 134, 138, 139, 140, 142, 144, 145, 150, 152, 157, 158, 160, 161, 167, 170, 175, 176, 177, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 199, 205, 218, 219, 220, 223, 226, 228, 231, 234, 246, 255, 256, 265, 273, 280, 282, 283, 288, 292, 296, 298, 301], "first": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 40, 43, 46, 49, 50, 55, 56, 57, 58, 59, 61, 66, 73, 74, 80, 88, 89, 91, 94, 96, 99, 101, 104, 106, 108, 110, 111, 113, 114, 119, 121, 122, 123, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 164, 167, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 187, 190, 191, 193, 194, 198, 199, 200, 201, 203, 205, 208, 209, 211, 216, 218, 219, 221, 223, 226, 228, 231, 234, 237, 239, 245, 246, 247, 249, 250, 253, 254, 256, 266, 267, 269, 270, 272, 273, 280, 283, 288, 293, 295, 296, 297, 298, 301], "taken": [1, 7, 10, 16, 23, 26, 29, 88, 89, 101, 151, 167, 177, 190, 193, 208, 209, 224, 270, 274, 297], "care": [1, 4, 6, 16, 25, 80, 94, 96, 106, 145, 150, 170, 177, 181, 199, 216, 226, 246, 267, 268, 270, 282], "condit": [1, 16, 55, 61, 104, 111, 115, 134, 150, 152, 168, 170, 191, 193, 232, 236, 250], "remaind": [1, 99, 155, 204], "cheetah": 1, "goal": [1, 7, 16, 17, 49, 55, 58, 66, 80, 91, 106, 139, 140, 150, 151, 157, 177, 179, 181, 196, 203, 216, 256], "half": [1, 10, 20, 129, 172, 196, 197, 234, 266, 302], "fast": [1, 6, 7, 20, 22, 25, 55, 96, 114, 134, 138, 148, 164, 170, 177, 182, 190, 194, 199, 203, 208, 225, 234, 270, 282], "dm_control": 1, "gym": [1, 16, 133, 151, 160, 177, 178, 179, 181, 199], "env": [1, 22, 137, 147, 150, 151, 177, 178, 179, 181, 201, 203, 240, 267, 282, 298], "gymenv": [1, 151, 177], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 10, 20, 23, 29, 36, 45, 48, 68, 69, 88, 94, 96, 104, 110, 113, 114, 115, 122, 135, 138, 140, 150, 153, 155, 157, 158, 167, 174, 178, 187, 193, 196, 197, 203, 210, 217, 219, 221, 234, 240, 246, 247, 252, 262, 269, 273, 283, 288, 292, 293, 295, 298, 301], "disabl": [1, 13, 17, 94, 134, 135, 143, 160, 164, 176, 180, 182, 187, 191, 204, 208, 216, 217, 218, 219, 228, 232, 240, 247, 266, 292, 301], "render": [1, 7, 88, 97, 103, 160, 170, 177], "easier": [1, 20, 22, 27, 28, 56, 57, 107, 114, 134, 140, 158, 167, 179, 183, 188, 196, 208, 216, 219, 231, 234, 239, 247, 250, 267, 282, 295], "than": [1, 3, 4, 6, 7, 10, 12, 13, 14, 15, 16, 20, 23, 27, 29, 49, 54, 55, 56, 58, 59, 66, 72, 74, 80, 88, 91, 94, 96, 99, 101, 104, 106, 107, 108, 110, 113, 114, 116, 122, 123, 129, 133, 134, 135, 137, 140, 142, 144, 147, 148, 150, 153, 158, 159, 160, 164, 167, 168, 169, 170, 176, 177, 178, 179, 187, 188, 190, 191, 194, 197, 198, 199, 203, 205, 208, 216, 221, 223, 226, 234, 237, 240, 241, 264, 267, 270, 272, 283, 284, 287, 292, 298, 301], "imag": [1, 23, 27, 37, 38, 40, 46, 48, 52, 55, 57, 58, 63, 80, 82, 88, 94, 97, 99, 101, 104, 105, 106, 114, 133, 138, 143, 153, 160, 161, 167, 169, 178, 185, 187, 188, 194, 198, 205, 221, 224, 226, 228, 229, 230, 240, 241, 249, 265, 269, 281, 284, 285, 287, 300], "focu": [1, 4, 7, 12, 22, 97, 106, 108, 118, 135, 138, 139, 152, 177, 179, 181, 183, 193, 197, 208, 217, 256, 270], "pass": [1, 2, 3, 4, 5, 7, 8, 10, 12, 14, 15, 16, 17, 18, 19, 23, 26, 27, 29, 36, 37, 38, 41, 42, 43, 48, 49, 55, 57, 58, 59, 62, 68, 69, 70, 73, 77, 78, 82, 88, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 110, 111, 114, 115, 122, 123, 133, 134, 135, 138, 139, 140, 141, 144, 145, 146, 148, 150, 151, 153, 155, 157, 160, 161, 164, 168, 169, 172, 174, 177, 178, 179, 180, 181, 183, 184, 187, 190, 191, 193, 194, 199, 200, 201, 206, 208, 209, 216, 219, 223, 228, 231, 236, 244, 245, 247, 248, 250, 252, 254, 266, 267, 272, 273, 274, 280, 283, 286, 302], "pixel": [1, 24, 37, 46, 49, 80, 101, 104, 106, 151, 161, 185, 190, 298], "from_pixel": [1, 151], "true": [1, 2, 4, 5, 6, 7, 12, 13, 14, 17, 18, 23, 26, 27, 28, 36, 38, 41, 43, 48, 49, 52, 55, 57, 68, 69, 73, 88, 94, 96, 97, 99, 104, 107, 110, 115, 116, 118, 119, 121, 122, 123, 129, 134, 135, 136, 137, 138, 140, 143, 144, 145, 148, 150, 151, 152, 155, 158, 161, 168, 175, 176, 179, 180, 181, 182, 187, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 209, 210, 217, 218, 219, 220, 224, 226, 228, 229, 230, 231, 232, 234, 240, 245, 246, 247, 252, 253, 255, 256, 264, 270, 273, 280, 286, 288, 291, 295, 300, 301, 302], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 10, 11, 19, 20, 27, 52, 57, 61, 97, 103, 105, 106, 107, 115, 134, 135, 140, 141, 142, 150, 151, 178, 179, 180, 181, 183, 185, 188, 190, 198, 234, 243, 244, 273, 298], "either": [1, 2, 4, 5, 6, 7, 10, 18, 23, 27, 49, 55, 78, 94, 105, 106, 114, 116, 118, 123, 129, 135, 138, 148, 151, 152, 161, 174, 178, 179, 180, 187, 191, 193, 199, 205, 209, 219, 221, 228, 229, 230, 232, 234, 237, 250, 255, 256, 262, 266, 273, 280, 283, 295, 300], "backend": [1, 6, 7, 13, 16, 22, 24, 28, 29, 59, 61, 132, 133, 140, 143, 147, 148, 151, 152, 161, 164, 176, 177, 184, 187, 191, 193, 194, 197, 201, 211, 220, 225, 231, 232, 241, 245, 254, 262, 264, 266, 287, 294, 298], "consid": [1, 4, 7, 12, 13, 16, 27, 36, 43, 55, 73, 80, 88, 122, 134, 136, 145, 148, 150, 161, 164, 167, 168, 170, 173, 175, 179, 183, 187, 191, 193, 194, 198, 203, 216, 217, 218, 220, 239, 246, 272, 273, 274, 293], "abov": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 16, 17, 19, 23, 24, 26, 27, 48, 49, 55, 57, 58, 70, 72, 73, 80, 88, 96, 97, 99, 101, 103, 104, 106, 107, 108, 110, 111, 113, 114, 122, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 155, 158, 159, 160, 161, 164, 167, 168, 169, 170, 172, 174, 175, 177, 179, 180, 181, 182, 187, 190, 191, 193, 194, 196, 197, 198, 200, 201, 203, 208, 211, 216, 217, 218, 219, 220, 223, 226, 228, 231, 232, 246, 247, 248, 249, 250, 253, 254, 255, 256, 262, 264, 265, 267, 270, 272, 273, 280, 281, 292, 298, 301], "dm": 1, "want": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 14, 16, 17, 19, 23, 25, 26, 27, 28, 36, 37, 38, 41, 43, 48, 49, 52, 55, 57, 58, 66, 68, 69, 72, 80, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 122, 123, 129, 137, 138, 139, 140, 150, 151, 152, 153, 155, 157, 159, 161, 164, 168, 170, 172, 174, 175, 176, 177, 180, 182, 183, 185, 190, 191, 193, 194, 198, 199, 204, 205, 206, 216, 218, 223, 224, 225, 226, 228, 231, 239, 247, 248, 256, 262, 264, 266, 267, 270, 272, 280, 282, 284, 295, 297], "modifi": [1, 3, 7, 12, 13, 16, 23, 42, 46, 48, 49, 58, 80, 106, 107, 116, 138, 141, 150, 157, 158, 173, 175, 177, 179, 183, 193, 199, 200, 201, 223, 237, 280, 283, 296, 298], "represent": [1, 5, 12, 16, 27, 29, 48, 58, 91, 97, 101, 103, 106, 108, 111, 113, 115, 116, 118, 133, 140, 152, 156, 157, 160, 183, 187, 188, 193, 194, 199, 221, 225, 226, 231, 237, 250, 267, 270, 280, 282, 297, 300], "more": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 16, 17, 18, 20, 23, 24, 25, 26, 29, 38, 40, 41, 42, 45, 48, 49, 50, 54, 55, 56, 57, 58, 59, 61, 62, 66, 72, 80, 82, 91, 94, 97, 99, 101, 103, 105, 106, 107, 108, 110, 111, 113, 114, 116, 118, 121, 122, 123, 129, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 155, 156, 157, 160, 164, 167, 168, 170, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 203, 205, 206, 208, 209, 216, 217, 218, 219, 221, 223, 224, 225, 226, 228, 229, 230, 234, 237, 239, 240, 241, 245, 247, 248, 249, 250, 254, 255, 256, 262, 265, 272, 280, 282, 283, 288, 293, 295, 296, 297, 298, 299, 300, 301, 302], "friendli": [1, 5, 17, 27, 197, 250, 266], "append": [1, 10, 16, 19, 22, 23, 25, 55, 104, 107, 121, 123, 135, 150, 151, 152, 174, 177, 179, 180, 181, 183, 188, 204, 205, 209, 226, 228, 234, 250, 252, 301], "special": [1, 12, 22, 26, 27, 45, 54, 99, 101, 108, 110, 113, 114, 119, 139, 151, 161, 173, 174, 187, 190, 205, 221, 224, 226, 236, 247, 280, 283, 298], "torchr": 1, "transformedenv": [1, 16, 151, 177], "common": [1, 5, 7, 10, 12, 16, 18, 20, 23, 41, 42, 49, 55, 57, 66, 88, 99, 104, 106, 108, 110, 113, 115, 123, 129, 133, 138, 148, 152, 157, 160, 168, 170, 174, 175, 176, 177, 182, 190, 193, 194, 198, 206, 218, 221, 234, 250, 256, 267, 268, 282, 283, 284, 287, 288, 294], "rescal": [1, 57, 198, 208], "heurist": [1, 88, 203, 231, 254, 295], "multipli": [1, 4, 6, 14, 23, 54, 55, 96, 97, 99, 104, 114, 156, 183, 196, 197, 270, 282, 294], "5": [1, 2, 3, 6, 7, 13, 20, 27, 38, 40, 50, 55, 58, 70, 82, 88, 91, 94, 99, 101, 103, 105, 107, 108, 111, 113, 118, 121, 122, 123, 134, 135, 144, 148, 150, 151, 152, 158, 161, 164, 175, 176, 179, 180, 181, 190, 193, 194, 196, 197, 198, 199, 203, 204, 211, 226, 228, 232, 234, 236, 239, 241, 243, 249, 252, 253, 254, 255, 256, 262, 280, 283, 288, 291, 300], "interfac": [1, 4, 5, 6, 7, 16, 17, 24, 26, 27, 29, 55, 104, 114, 140, 147, 150, 177, 190, 194, 210, 255, 262, 298], "between": [1, 6, 7, 10, 13, 14, 16, 19, 20, 23, 25, 26, 27, 37, 45, 52, 54, 55, 70, 78, 80, 88, 89, 91, 94, 96, 99, 101, 104, 106, 107, 108, 111, 113, 114, 122, 133, 134, 136, 138, 140, 150, 151, 152, 157, 161, 164, 170, 172, 174, 178, 180, 181, 182, 183, 188, 190, 191, 193, 194, 196, 197, 198, 199, 201, 203, 204, 207, 208, 209, 210, 216, 217, 219, 223, 224, 225, 228, 229, 231, 234, 246, 248, 253, 266, 267, 268, 270, 273, 283, 288, 298, 299, 302], "simul": [1, 20, 22, 23, 101, 143, 177, 234, 249], "work": [1, 2, 4, 5, 6, 7, 8, 11, 14, 16, 18, 20, 22, 24, 25, 26, 27, 29, 40, 41, 48, 55, 56, 57, 58, 61, 62, 66, 80, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 109, 113, 114, 115, 118, 133, 139, 141, 142, 144, 145, 146, 148, 150, 151, 153, 155, 156, 157, 159, 167, 168, 169, 170, 173, 174, 176, 177, 179, 181, 182, 183, 187, 190, 193, 194, 196, 198, 199, 203, 204, 205, 206, 208, 209, 216, 217, 218, 219, 223, 226, 228, 229, 234, 236, 237, 239, 240, 241, 246, 249, 254, 255, 266, 267, 270, 273, 280, 282, 283, 288, 291, 292, 295, 298], "doubl": [1, 2, 4, 6, 7, 27, 41, 96, 103, 114, 121, 133, 144, 151, 152, 160, 169, 175, 177, 188, 209, 254, 266], "precis": [1, 5, 10, 12, 17, 24, 66, 139, 144, 145, 152, 161, 170, 177, 188, 194, 197, 205, 209, 224, 229, 230, 254, 255, 256, 270, 271, 279, 287, 288], "number": [1, 4, 6, 7, 11, 13, 14, 17, 22, 23, 25, 27, 38, 41, 46, 49, 57, 58, 59, 61, 70, 88, 91, 94, 96, 99, 101, 106, 108, 110, 113, 114, 121, 122, 123, 134, 135, 137, 138, 139, 140, 141, 147, 148, 150, 151, 152, 153, 155, 158, 159, 164, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 187, 190, 191, 194, 198, 203, 208, 209, 219, 220, 221, 228, 229, 239, 240, 243, 247, 254, 264, 267, 269, 270, 273, 282, 283, 293, 299, 301], "presum": 1, "singl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 17, 20, 22, 24, 25, 26, 27, 42, 45, 48, 52, 57, 59, 60, 61, 62, 66, 91, 94, 96, 97, 101, 103, 104, 105, 106, 108, 114, 133, 134, 135, 136, 138, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 159, 160, 164, 169, 170, 172, 177, 178, 179, 180, 181, 183, 187, 190, 191, 193, 194, 199, 200, 201, 203, 205, 208, 221, 226, 231, 234, 239, 247, 253, 254, 267, 270, 282, 283, 287, 298, 301], "ones": [1, 2, 4, 5, 7, 13, 16, 18, 23, 25, 101, 104, 106, 150, 153, 157, 168, 169, 170, 172, 173, 175, 177, 178, 187, 193, 197, 199, 200, 217, 228, 236, 250, 255, 282, 298], "goe": [1, 5, 6, 27, 57, 104, 107, 108, 133, 137, 145, 159, 173, 177, 180, 194, 264], "wai": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 24, 25, 26, 29, 36, 40, 42, 45, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 72, 77, 80, 88, 94, 96, 97, 99, 100, 104, 107, 108, 110, 113, 114, 116, 118, 119, 123, 132, 134, 138, 139, 140, 141, 145, 147, 148, 155, 156, 157, 158, 159, 160, 161, 164, 167, 168, 172, 174, 175, 177, 179, 180, 182, 185, 188, 193, 194, 198, 199, 200, 201, 208, 209, 217, 218, 219, 221, 223, 225, 226, 228, 231, 236, 247, 250, 265, 268, 270, 273, 274, 280, 283, 295], "repres": [1, 4, 6, 12, 14, 15, 22, 24, 25, 29, 37, 48, 55, 57, 58, 66, 68, 80, 82, 88, 91, 96, 97, 99, 101, 105, 106, 113, 115, 116, 118, 121, 122, 134, 135, 136, 138, 140, 141, 143, 151, 155, 157, 160, 161, 177, 178, 181, 183, 190, 193, 194, 196, 198, 199, 203, 205, 216, 221, 226, 228, 267, 269, 280, 282], "doubletofloat": [1, 177], "in_kei": [1, 16, 151, 177], "list": [1, 4, 6, 7, 10, 13, 14, 16, 17, 19, 23, 24, 25, 28, 38, 42, 45, 49, 52, 54, 55, 56, 58, 73, 80, 94, 97, 101, 104, 110, 111, 113, 115, 116, 118, 119, 122, 139, 142, 150, 152, 161, 168, 170, 175, 176, 179, 180, 181, 183, 187, 188, 190, 191, 193, 194, 206, 209, 210, 218, 221, 224, 228, 231, 234, 240, 245, 249, 250, 252, 253, 264, 265, 267, 270, 272, 273, 287, 292, 298, 301], "refer": [1, 4, 5, 6, 7, 8, 10, 15, 17, 20, 25, 26, 27, 28, 29, 36, 42, 66, 80, 88, 91, 96, 97, 104, 106, 108, 110, 111, 113, 115, 116, 118, 119, 121, 123, 134, 135, 136, 138, 139, 142, 143, 147, 148, 150, 158, 167, 170, 174, 175, 177, 179, 180, 181, 187, 190, 193, 194, 197, 198, 199, 203, 209, 211, 216, 219, 224, 226, 228, 229, 232, 234, 254, 256, 265, 266, 267, 269, 272, 273, 280, 283, 293, 295, 298, 300, 301], "float": [1, 4, 6, 7, 10, 11, 13, 23, 27, 49, 99, 104, 110, 113, 119, 121, 134, 135, 138, 140, 150, 152, 161, 173, 174, 175, 179, 181, 193, 194, 198, 200, 203, 204, 208, 209, 210, 218, 219, 220, 226, 228, 231, 240, 250, 252, 253, 254, 256, 264, 266, 270, 273, 280], "while": [1, 2, 3, 5, 6, 7, 11, 13, 14, 15, 16, 20, 23, 25, 27, 38, 41, 55, 58, 61, 88, 97, 104, 115, 116, 121, 132, 133, 135, 136, 137, 139, 140, 143, 146, 148, 150, 151, 152, 158, 159, 161, 167, 170, 174, 175, 176, 177, 180, 181, 182, 183, 185, 191, 193, 194, 196, 197, 199, 200, 203, 205, 208, 209, 216, 217, 218, 219, 220, 221, 224, 226, 231, 234, 246, 264, 266, 267, 272, 273, 280, 283, 288, 292, 295, 298], "in_keys_inv": [1, 16], "befor": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 16, 19, 23, 24, 26, 27, 29, 36, 41, 43, 48, 49, 50, 52, 55, 57, 58, 61, 66, 73, 80, 91, 94, 96, 97, 101, 106, 107, 108, 110, 111, 113, 114, 116, 118, 119, 121, 122, 123, 129, 133, 135, 136, 138, 140, 141, 143, 148, 150, 151, 152, 155, 158, 160, 165, 167, 168, 170, 172, 174, 175, 176, 177, 179, 180, 181, 183, 187, 188, 191, 193, 194, 196, 197, 198, 200, 203, 205, 206, 209, 216, 217, 219, 223, 226, 228, 231, 232, 246, 249, 253, 264, 266, 267, 269, 272, 280, 281, 283, 284, 285, 286, 287, 288, 292, 293, 295, 296, 301, 302], "concaten": [1, 16, 45, 54, 55, 110, 111, 138, 142, 178, 226], "cattensor": 1, "leav": [1, 10, 18, 20, 36, 48, 55, 57, 59, 91, 96, 140, 167, 168, 176, 234, 254, 280], "constant": [1, 2, 7, 27, 29, 45, 54, 88, 94, 96, 104, 108, 116, 137, 151, 168, 178, 188, 191, 193, 197, 209, 220, 226, 234, 252, 283], "significantli": [1, 23, 111, 132, 138, 144, 170, 191, 196, 208, 224, 226, 229, 230, 237, 264, 270, 274, 283, 293, 301], "speed": [1, 6, 7, 12, 16, 23, 24, 36, 38, 41, 54, 55, 91, 96, 99, 100, 106, 114, 132, 133, 135, 136, 138, 141, 146, 151, 153, 158, 161, 170, 176, 177, 179, 182, 191, 196, 199, 208, 209, 210, 224, 225, 237, 241, 245, 246, 250, 264, 267, 270, 281, 283, 287, 297, 298, 301], "throughput": [1, 135, 170, 197, 270, 283, 301], "choos": [1, 10, 12, 14, 17, 49, 55, 58, 61, 66, 70, 94, 97, 108, 118, 122, 123, 137, 138, 142, 148, 150, 160, 168, 176, 177, 178, 183, 187, 190, 194, 197, 198, 201, 208, 209, 211, 226, 229, 245, 262, 266, 273, 288], "whether": [1, 7, 10, 12, 13, 16, 26, 55, 58, 96, 97, 99, 103, 104, 106, 114, 116, 123, 145, 150, 152, 157, 160, 167, 170, 177, 179, 187, 188, 190, 193, 200, 219, 267, 273, 283, 284], "individu": [1, 6, 7, 14, 25, 29, 37, 55, 91, 96, 97, 101, 122, 136, 138, 140, 144, 169, 170, 174, 180, 183, 188, 191, 193, 194, 199, 200, 262, 266, 267, 283, 293], "approach": [1, 4, 5, 6, 7, 8, 26, 27, 29, 43, 62, 97, 114, 118, 123, 137, 141, 146, 168, 169, 170, 177, 178, 180, 183, 191, 193, 198, 203, 206, 216, 219, 220, 224, 229, 230, 239, 256, 264, 267, 270, 280, 287, 288], "parallelenv": [1, 177], "num_work": [1, 49, 57, 94, 134, 135, 175, 187, 188, 196, 283], "4": [1, 2, 3, 4, 6, 7, 10, 14, 18, 19, 21, 25, 27, 28, 38, 40, 50, 57, 59, 60, 61, 68, 69, 70, 80, 82, 94, 97, 99, 101, 103, 104, 105, 107, 108, 110, 113, 114, 122, 133, 134, 135, 137, 143, 144, 146, 147, 150, 151, 158, 160, 161, 167, 172, 174, 175, 178, 179, 180, 181, 190, 191, 193, 194, 196, 198, 199, 201, 203, 204, 208, 211, 219, 225, 226, 228, 241, 246, 249, 254, 281, 288, 292, 293, 298, 301], "leverag": [1, 7, 55, 80, 106, 119, 123, 133, 135, 138, 148, 150, 159, 198, 210, 220, 225, 229, 230, 232, 248, 249, 250, 252, 283, 284, 287, 297, 301], "vector": [1, 2, 5, 6, 7, 14, 16, 26, 27, 36, 55, 58, 88, 96, 97, 101, 103, 104, 106, 108, 110, 111, 113, 114, 141, 142, 143, 151, 152, 155, 169, 173, 183, 194, 197, 210, 220, 229, 239, 241, 254, 255, 270, 283, 295, 300], "capabl": [1, 3, 13, 17, 20, 55, 80, 138, 170, 182, 187, 226, 229, 234, 241, 243, 244, 252, 266, 283], "pytorch": [1, 2, 4, 10, 11, 13, 16, 18, 20, 21, 22, 25, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 50, 54, 55, 57, 58, 59, 61, 62, 64, 65, 67, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 94, 96, 97, 106, 107, 112, 114, 115, 117, 118, 123, 124, 126, 129, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 155, 156, 157, 158, 159, 160, 164, 165, 167, 169, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 191, 192, 193, 201, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 232, 234, 235, 237, 238, 239, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 258, 260, 261, 264, 265, 266, 267, 268, 270, 272, 275, 276, 277, 278, 279, 280, 282, 288, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302], "adopt": [1, 24, 28, 66, 167, 173, 180, 232, 256], "frame_skip": [1, 177], "frame": [1, 7, 151, 160, 176, 177, 187, 203, 298], "count": [1, 7, 13, 23, 26, 41, 49, 55, 88, 108, 150, 151, 177, 181, 183, 187, 190, 197, 205, 226, 228, 248], "frames_per_batch": [1, 151, 177], "total_fram": [1, 151, 177], "adjust": [1, 16, 23, 36, 41, 42, 48, 58, 80, 96, 99, 105, 138, 140, 141, 164, 179, 283], "total": [1, 6, 11, 13, 14, 15, 16, 18, 19, 20, 21, 24, 25, 28, 29, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 58, 59, 61, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 89, 91, 92, 94, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 126, 129, 135, 137, 139, 140, 141, 142, 144, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 178, 180, 182, 183, 184, 185, 187, 190, 191, 193, 194, 196, 198, 199, 204, 205, 207, 208, 209, 216, 217, 218, 219, 221, 223, 235, 237, 239, 244, 245, 252, 254, 256, 265, 266, 267, 268, 269, 270, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 294, 295, 296, 297, 299, 301], "rais": [1, 10, 13, 18, 23, 80, 115, 137, 138, 139, 158, 161, 176, 177, 191, 193, 246, 250, 280, 283, 296, 298], "skip": [1, 5, 6, 12, 16, 20, 23, 27, 48, 107, 123, 145, 155, 160, 179, 181, 187, 191, 193, 199, 205, 225, 232, 234, 245, 267, 273, 286, 301], "unchang": [1, 10, 89, 96], "seem": [1, 49, 58, 139, 141, 151, 170, 172, 194, 267], "like": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 16, 18, 19, 20, 22, 24, 25, 26, 27, 29, 37, 38, 41, 42, 45, 48, 49, 50, 52, 54, 55, 57, 58, 59, 61, 66, 73, 82, 88, 91, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 119, 121, 122, 126, 129, 132, 133, 134, 138, 139, 140, 142, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 164, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 187, 188, 190, 193, 194, 196, 197, 198, 199, 200, 204, 205, 206, 209, 210, 217, 218, 219, 224, 225, 226, 228, 229, 230, 231, 232, 234, 239, 240, 241, 247, 248, 249, 250, 253, 254, 255, 256, 262, 265, 266, 267, 268, 269, 270, 273, 282, 283, 292, 293, 294, 295, 296, 298, 300, 301], "cheat": [1, 104, 133, 183], "compar": [1, 6, 12, 17, 20, 23, 24, 27, 41, 49, 89, 97, 104, 106, 111, 114, 119, 129, 134, 136, 137, 138, 140, 150, 152, 157, 158, 159, 161, 164, 167, 169, 170, 174, 177, 178, 179, 181, 183, 187, 190, 191, 193, 196, 197, 199, 201, 204, 205, 207, 208, 210, 216, 225, 226, 229, 231, 234, 241, 245, 246, 252, 254, 255, 264, 270, 272, 281, 282, 283, 287, 296, 297, 301], "dataset": [1, 7, 11, 20, 28, 36, 37, 39, 40, 41, 42, 43, 45, 46, 48, 49, 52, 55, 58, 59, 61, 63, 80, 82, 94, 97, 101, 106, 108, 124, 129, 132, 133, 134, 135, 140, 141, 142, 146, 150, 153, 169, 170, 175, 176, 180, 182, 183, 185, 187, 188, 190, 194, 204, 224, 229, 230, 234, 255, 256, 257, 269, 270, 283, 287, 291, 298], "10m": 1, "element": [1, 6, 7, 14, 20, 23, 42, 45, 54, 55, 96, 97, 101, 104, 108, 110, 111, 113, 133, 139, 150, 158, 164, 168, 177, 190, 193, 198, 204, 217, 218, 219, 221, 234, 267, 269, 283], "2": [1, 2, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 27, 28, 37, 38, 40, 48, 55, 57, 58, 59, 61, 68, 69, 73, 74, 80, 94, 96, 97, 99, 104, 106, 107, 108, 110, 113, 115, 118, 119, 122, 123, 126, 129, 133, 134, 135, 136, 138, 140, 143, 144, 145, 146, 147, 148, 150, 151, 153, 158, 159, 161, 165, 167, 169, 174, 176, 177, 178, 179, 180, 181, 182, 190, 191, 193, 194, 199, 201, 203, 206, 207, 208, 210, 211, 216, 221, 225, 232, 236, 240, 241, 243, 244, 245, 248, 249, 250, 252, 254, 255, 256, 266, 268, 272, 280, 283, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "anoth": [1, 4, 5, 6, 10, 13, 16, 24, 25, 27, 29, 36, 45, 48, 54, 55, 58, 68, 80, 91, 99, 101, 104, 105, 107, 111, 114, 121, 122, 123, 133, 142, 143, 144, 145, 147, 150, 151, 155, 156, 168, 170, 174, 177, 179, 180, 181, 182, 183, 191, 193, 194, 196, 198, 200, 205, 208, 223, 226, 231, 240, 264, 265, 267, 273, 283, 284, 301], "actual": [1, 3, 6, 7, 10, 13, 15, 16, 17, 23, 25, 26, 27, 29, 36, 43, 55, 57, 58, 80, 91, 99, 106, 107, 110, 113, 119, 133, 136, 139, 140, 141, 144, 148, 150, 156, 157, 164, 167, 170, 177, 183, 187, 188, 191, 193, 194, 197, 205, 207, 208, 216, 218, 226, 228, 231, 239, 267, 270, 294], "ratio": [1, 88, 106, 158, 170, 177, 187, 198, 223], "interact": [1, 6, 7, 16, 55, 97, 103, 104, 140, 143, 145, 160, 177, 180, 188, 191, 193, 194, 226, 248, 295], "nutshel": [1, 218], "cautiou": 1, "about": [1, 4, 5, 6, 7, 10, 11, 12, 16, 17, 20, 23, 24, 25, 26, 27, 40, 41, 42, 45, 48, 55, 58, 59, 60, 61, 63, 77, 78, 80, 94, 96, 99, 101, 103, 104, 106, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 129, 132, 133, 135, 137, 140, 141, 142, 145, 147, 148, 150, 153, 156, 157, 158, 159, 167, 169, 170, 175, 176, 177, 178, 179, 181, 182, 183, 185, 187, 190, 191, 193, 194, 196, 198, 199, 203, 206, 207, 208, 209, 217, 218, 219, 225, 226, 228, 229, 231, 232, 234, 237, 246, 248, 249, 250, 264, 270, 271, 272, 279, 280, 282, 285, 287, 293, 297, 298], "deal": [1, 6, 49, 55, 57, 58, 99, 106, 114, 122, 123, 135, 159, 170, 177, 193, 194, 248, 256, 285], "lead": [1, 4, 6, 7, 16, 18, 55, 58, 80, 88, 94, 106, 114, 141, 143, 145, 151, 170, 175, 193, 218, 239, 246, 280, 283, 288, 301], "bias": [1, 37, 48, 101, 106, 123, 182, 199, 280, 285, 286], "comparison": [1, 11, 20, 25, 89, 97, 104, 105, 106, 107, 134, 152, 158, 159, 196, 201, 204, 208, 216, 218, 221, 223, 224, 234, 282], "scale": [1, 7, 23, 37, 46, 57, 62, 80, 101, 103, 106, 116, 132, 133, 134, 135, 137, 148, 150, 151, 160, 172, 177, 178, 184, 185, 194, 197, 200, 201, 208, 209, 231, 248, 249, 256, 266, 270, 280, 283, 288, 295, 300], "help": [1, 4, 6, 10, 12, 17, 20, 22, 23, 26, 27, 36, 37, 48, 55, 58, 73, 88, 94, 97, 106, 107, 110, 111, 113, 114, 123, 132, 133, 134, 135, 140, 147, 148, 151, 152, 153, 158, 159, 164, 167, 173, 177, 178, 179, 180, 181, 182, 183, 190, 191, 193, 194, 196, 197, 203, 208, 209, 217, 218, 219, 221, 224, 226, 232, 234, 239, 243, 245, 246, 247, 249, 250, 252, 256, 262, 265, 266, 267, 269, 281, 283, 284, 287, 293, 295, 296, 299, 301], "signal": [1, 48, 97, 99, 177, 179, 223, 270, 273, 282], "magnitud": [1, 20, 96, 174, 194, 234, 266], "truncat": [1, 104, 121, 151, 158, 177, 234], "A": [1, 6, 7, 10, 13, 14, 16, 20, 25, 26, 29, 36, 37, 38, 42, 45, 52, 53, 54, 55, 57, 58, 59, 61, 68, 69, 72, 73, 74, 77, 78, 80, 88, 89, 99, 101, 104, 105, 106, 108, 110, 111, 113, 114, 115, 122, 123, 132, 133, 135, 139, 140, 141, 142, 145, 146, 150, 153, 157, 167, 168, 169, 177, 178, 179, 180, 182, 183, 184, 185, 188, 190, 191, 193, 194, 196, 197, 199, 203, 207, 220, 221, 226, 232, 234, 247, 254, 255, 264, 267, 272, 280, 283, 285, 293, 295, 298, 300, 301], "thousand": [1, 113, 132, 138, 141, 151, 183, 190], "500": [1, 7, 28, 161, 172, 178, 181, 267], "good": [1, 2, 5, 6, 7, 24, 25, 49, 56, 58, 99, 103, 104, 106, 113, 116, 133, 134, 140, 150, 151, 158, 164, 176, 178, 182, 184, 188, 190, 193, 194, 196, 197, 198, 199, 220, 223, 231, 262, 264, 267, 283, 288, 301], "statist": [1, 49, 58, 94, 99, 133, 144, 156, 157, 174, 175, 177, 183, 187, 188, 190, 197, 205, 223, 226, 228, 256, 267], "arbitrari": [1, 6, 10, 16, 18, 36, 78, 97, 106, 111, 135, 153, 160, 169, 188, 191, 199, 223, 273, 274], "random": [1, 7, 16, 19, 23, 24, 25, 29, 45, 48, 49, 50, 52, 54, 57, 58, 68, 69, 70, 77, 78, 80, 97, 99, 103, 110, 111, 114, 115, 116, 121, 122, 129, 134, 135, 140, 142, 143, 148, 150, 151, 152, 153, 160, 164, 167, 168, 174, 175, 177, 178, 179, 181, 183, 188, 191, 205, 209, 226, 228, 245, 252, 267, 269, 270, 274, 283], "standard": [1, 6, 10, 24, 27, 29, 45, 49, 54, 58, 88, 94, 97, 99, 106, 107, 108, 114, 116, 118, 119, 150, 176, 185, 191, 193, 194, 198, 208, 221, 269, 270, 283], "deviat": [1, 88, 99, 106], "observationnorm": [1, 151, 177], "init_stat": [1, 151], "purpos": [1, 6, 24, 25, 26, 63, 80, 91, 96, 101, 105, 122, 134, 139, 140, 142, 150, 151, 156, 157, 158, 167, 172, 176, 177, 180, 181, 187, 191, 194, 203, 205, 208, 217, 220, 226, 247, 256, 270, 280, 283, 288, 292], "get": [1, 2, 6, 7, 8, 10, 13, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 38, 40, 48, 49, 50, 55, 56, 57, 58, 61, 62, 66, 80, 89, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 121, 122, 123, 129, 132, 133, 135, 137, 138, 140, 141, 142, 143, 150, 151, 152, 153, 156, 157, 159, 167, 168, 169, 170, 173, 174, 175, 176, 177, 178, 179, 180, 183, 187, 188, 190, 193, 194, 196, 197, 198, 203, 204, 205, 207, 208, 209, 211, 216, 223, 224, 226, 228, 229, 231, 232, 234, 235, 240, 241, 245, 246, 250, 253, 254, 262, 264, 267, 270, 273, 283, 286, 287, 288, 298, 300, 301, 302], "summari": [1, 88, 113, 140, 151, 170, 177, 187, 193, 196, 226, 281, 282], "dummi": [1, 4, 10, 18, 24, 91, 97, 99, 105, 148, 153, 159, 169, 172, 173, 194, 196, 209, 224, 229, 230, 247, 256, 298, 300], "over": [1, 4, 5, 6, 7, 12, 13, 16, 18, 20, 22, 23, 24, 26, 27, 37, 38, 41, 42, 45, 49, 52, 54, 55, 56, 57, 58, 59, 61, 82, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 110, 111, 114, 121, 122, 133, 134, 135, 136, 137, 138, 141, 143, 147, 148, 150, 153, 156, 157, 158, 159, 160, 161, 164, 169, 174, 175, 177, 178, 179, 180, 181, 182, 183, 187, 188, 190, 191, 193, 194, 196, 198, 199, 201, 205, 208, 209, 220, 226, 228, 234, 239, 254, 266, 270, 283, 286, 296, 297], "earlier": [1, 5, 6, 7, 26, 27, 80, 99, 101, 104, 107, 108, 111, 114, 134, 136, 138, 151, 167, 170, 177, 183, 193, 197, 266, 267], "turn": [1, 5, 6, 7, 10, 16, 17, 23, 24, 27, 29, 46, 55, 97, 101, 104, 107, 121, 142, 151, 159, 167, 168, 170, 174, 179, 183, 194, 204, 210, 217, 218, 220, 229, 230, 250, 300], "seen": [1, 12, 13, 22, 23, 49, 52, 55, 57, 101, 104, 106, 111, 113, 114, 121, 151, 169, 180, 191, 193, 194, 220, 267, 295], "requir": [1, 2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 17, 18, 22, 23, 24, 26, 27, 28, 29, 40, 46, 48, 55, 56, 57, 58, 61, 66, 82, 89, 91, 94, 96, 97, 100, 105, 113, 114, 118, 119, 134, 138, 140, 142, 144, 145, 147, 148, 150, 151, 152, 153, 155, 156, 159, 164, 167, 168, 169, 170, 172, 175, 176, 177, 179, 180, 181, 182, 183, 190, 191, 193, 194, 196, 197, 198, 199, 203, 204, 205, 206, 207, 208, 209, 210, 211, 217, 218, 219, 224, 231, 236, 239, 241, 243, 244, 246, 247, 249, 254, 255, 256, 266, 268, 269, 272, 273, 280, 282, 283, 288, 292, 293, 294, 295, 296, 299], "select": [1, 4, 6, 12, 27, 56, 88, 94, 103, 106, 114, 116, 161, 174, 178, 179, 181, 187, 188, 191, 193, 203, 205, 209, 211, 218, 220, 225, 226, 234, 240, 254, 273, 283, 293, 295], "recal": [1, 7, 27, 58, 96, 104, 107, 113, 148, 152, 177, 188, 217, 218, 219, 280, 282], "wrap": [1, 4, 6, 7, 12, 19, 26, 29, 38, 42, 50, 94, 99, 107, 108, 110, 111, 116, 121, 134, 136, 139, 144, 148, 151, 156, 160, 170, 175, 177, 180, 181, 190, 193, 194, 204, 206, 207, 229, 230, 243, 244, 247, 248, 262, 266, 270, 273, 302], "flow": [1, 5, 6, 16, 25, 27, 29, 36, 48, 58, 71, 75, 91, 103, 106, 116, 117, 118, 119, 133, 136, 177, 178, 187, 191, 205, 206, 207, 209, 224, 226, 228, 229, 230, 283, 287], "handl": [1, 6, 10, 12, 18, 27, 55, 58, 59, 91, 101, 104, 114, 115, 119, 133, 134, 141, 152, 153, 165, 169, 170, 172, 174, 176, 177, 180, 181, 182, 190, 191, 193, 194, 197, 205, 209, 216, 218, 221, 239, 241, 246, 247, 255, 265, 272, 273, 282, 298, 301], "specifi": [1, 4, 5, 6, 7, 10, 11, 13, 18, 20, 23, 24, 26, 27, 28, 38, 42, 57, 58, 88, 94, 96, 97, 99, 101, 104, 105, 110, 115, 122, 134, 135, 136, 137, 138, 140, 141, 145, 151, 152, 153, 155, 173, 174, 177, 180, 181, 187, 190, 193, 200, 201, 216, 217, 218, 219, 221, 224, 225, 226, 228, 231, 234, 239, 240, 245, 256, 264, 272, 273, 281, 283, 284, 292, 295, 297, 298, 300, 301], "scenario": [1, 5, 7, 16, 115, 116, 118, 119, 123, 129, 139, 170, 178, 181, 193, 203, 220, 229, 230, 254, 280, 284, 301], "tensordictsequenti": [1, 151], "valueoper": 1, "automat": [1, 2, 4, 6, 7, 10, 12, 17, 26, 29, 37, 39, 40, 42, 45, 48, 50, 51, 52, 54, 59, 63, 66, 94, 103, 105, 107, 114, 122, 126, 133, 134, 135, 136, 138, 139, 140, 145, 152, 156, 158, 161, 170, 172, 177, 178, 181, 184, 185, 187, 190, 193, 194, 196, 197, 201, 203, 205, 209, 232, 241, 245, 246, 247, 250, 254, 255, 256, 262, 268, 271, 272, 273, 279, 282, 283, 287, 295], "out_kei": [1, 16, 151, 177], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 5, 6, 7, 8, 10, 21, 26, 27, 36, 52, 96, 97, 99, 101, 108, 133, 141, 150, 151, 152, 177, 182, 188, 191, 193, 197, 198, 223, 250, 256, 265, 267, 269, 286, 293], "present": [1, 7, 10, 22, 26, 41, 88, 89, 106, 115, 152, 168, 173, 174, 175, 178, 179, 181, 190, 191, 193, 198, 221, 283, 302], "origin": [1, 6, 7, 10, 14, 16, 20, 23, 24, 27, 36, 55, 58, 80, 94, 97, 104, 106, 111, 115, 116, 136, 138, 139, 141, 142, 152, 164, 165, 168, 169, 170, 174, 175, 178, 190, 191, 193, 196, 197, 200, 204, 205, 206, 208, 210, 219, 224, 226, 231, 234, 252, 253, 255, 256, 262, 264, 270, 298], "paper": [1, 6, 14, 19, 20, 58, 80, 126, 135, 138, 152, 177, 178, 180, 182, 183, 185, 194, 199, 221, 234], "found": [1, 4, 5, 6, 7, 12, 19, 26, 27, 29, 55, 56, 97, 106, 136, 140, 148, 150, 151, 152, 156, 157, 161, 170, 180, 181, 182, 190, 193, 204, 205, 206, 209, 221, 240, 255, 262, 283, 298], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 5, 6, 10, 11, 12, 13, 15, 16, 19, 23, 24, 25, 27, 49, 55, 57, 58, 59, 80, 91, 96, 97, 99, 106, 107, 108, 110, 111, 113, 114, 116, 129, 136, 137, 138, 140, 141, 142, 143, 145, 146, 150, 151, 156, 157, 164, 167, 168, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 188, 190, 191, 193, 194, 196, 198, 199, 200, 205, 206, 208, 209, 216, 217, 218, 226, 228, 229, 230, 231, 241, 243, 245, 246, 247, 262, 267, 272, 273, 274, 286, 288, 296, 298, 302], "lazi": 1, "materi": [1, 134, 138, 159, 194, 199, 207, 216, 236, 270, 274, 280], "abl": [1, 3, 4, 5, 6, 7, 16, 17, 20, 27, 36, 37, 55, 68, 80, 91, 94, 99, 106, 107, 109, 113, 114, 122, 129, 140, 144, 145, 146, 147, 150, 151, 153, 158, 160, 161, 167, 169, 175, 177, 180, 188, 191, 193, 194, 198, 199, 203, 205, 209, 218, 226, 231, 234, 241, 252, 269, 270, 280, 286, 295, 298], "devic": [1, 3, 4, 7, 10, 12, 13, 16, 18, 19, 20, 22, 23, 24, 27, 29, 45, 48, 49, 50, 54, 55, 56, 58, 59, 61, 62, 66, 69, 78, 94, 104, 106, 108, 116, 122, 132, 133, 134, 136, 138, 140, 141, 147, 148, 150, 151, 152, 158, 161, 164, 167, 170, 172, 174, 175, 176, 177, 180, 181, 187, 194, 198, 200, 201, 203, 204, 205, 207, 209, 210, 211, 224, 226, 228, 229, 230, 232, 234, 236, 243, 244, 246, 247, 249, 252, 253, 254, 255, 264, 267, 271, 273, 274, 279, 280, 284, 286, 287, 293, 294, 295, 297, 298, 299, 302], "achiev": [1, 3, 4, 7, 16, 20, 23, 28, 36, 49, 55, 62, 88, 94, 106, 133, 136, 139, 144, 150, 151, 152, 158, 167, 168, 170, 174, 175, 177, 178, 187, 194, 196, 199, 200, 205, 207, 208, 209, 228, 229, 234, 237, 245, 254, 283, 287, 295, 297, 301], "oper": [1, 5, 7, 15, 16, 17, 20, 21, 22, 23, 24, 25, 29, 36, 37, 42, 48, 50, 52, 55, 57, 66, 68, 69, 73, 78, 88, 89, 91, 99, 100, 104, 106, 107, 108, 113, 114, 115, 116, 117, 118, 121, 122, 133, 134, 136, 137, 138, 139, 141, 143, 145, 150, 151, 152, 153, 155, 156, 158, 159, 161, 164, 169, 172, 173, 176, 177, 179, 183, 187, 188, 190, 191, 193, 194, 196, 199, 205, 206, 208, 209, 216, 217, 220, 224, 225, 226, 228, 229, 230, 234, 237, 239, 240, 247, 248, 250, 252, 254, 255, 262, 264, 265, 266, 267, 269, 270, 273, 274, 282, 286, 287, 293, 294, 295, 298, 301, 302], "practic": [1, 6, 7, 13, 24, 27, 43, 52, 55, 57, 58, 96, 97, 99, 104, 106, 108, 114, 115, 122, 126, 129, 133, 138, 139, 146, 151, 152, 158, 168, 174, 177, 178, 193, 197, 199, 216, 217, 221, 223, 267, 268, 272, 283, 288, 297, 298, 301], "small": [1, 3, 6, 7, 11, 20, 22, 24, 25, 27, 28, 29, 48, 49, 52, 63, 80, 96, 99, 101, 103, 104, 106, 108, 109, 111, 116, 122, 129, 134, 135, 137, 140, 141, 142, 144, 157, 167, 168, 170, 175, 176, 177, 178, 181, 183, 185, 190, 194, 198, 203, 208, 216, 234, 254, 266, 267, 269, 283, 298, 299], "fake": [1, 7, 20, 23, 29, 52, 58, 167, 175, 193, 221, 226, 228, 231, 234, 264], "spec": [1, 119, 151, 177, 181, 193, 200, 231, 267], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 5, 14, 58, 93, 106, 136, 142, 152, 158, 159, 160, 161, 164, 175, 187, 190, 203, 270], "ou": 1, "nois": [1, 7, 14, 58, 80, 223, 248, 282], "reach": [1, 12, 20, 58, 66, 106, 141, 148, 150, 152, 160, 161, 177, 181, 193, 234, 256, 267], "minimum": [1, 4, 88, 136, 177, 181, 197, 218], "iter": [1, 3, 5, 7, 13, 14, 16, 28, 36, 37, 41, 42, 48, 49, 52, 58, 59, 61, 82, 91, 94, 96, 97, 99, 101, 107, 114, 116, 123, 140, 143, 146, 148, 151, 156, 158, 175, 177, 178, 179, 180, 181, 187, 188, 191, 194, 198, 204, 205, 226, 228, 244, 253, 262, 266, 270, 283, 286, 296, 298, 302], "reset": [1, 23, 41, 99, 104, 114, 129, 151, 177, 178, 179, 181, 187, 191, 205, 210, 223, 226, 228, 256, 299], "develop": [1, 3, 4, 5, 6, 10, 12, 14, 17, 25, 26, 27, 28, 29, 88, 91, 97, 110, 114, 116, 118, 143, 150, 161, 173, 181, 187, 191, 199, 200, 208, 210, 211, 216, 219, 220, 226, 228, 231, 237, 247, 248, 250, 252, 255, 256, 270, 271, 283, 300], "tight": [1, 115, 116, 118, 119], "per": [1, 4, 6, 7, 10, 13, 23, 94, 106, 113, 133, 135, 141, 142, 144, 148, 150, 151, 152, 159, 161, 167, 172, 174, 181, 182, 183, 184, 187, 188, 190, 193, 194, 196, 197, 198, 201, 203, 207, 209, 216, 230, 239, 241, 245, 246, 247, 250, 253, 256, 267, 272, 282, 292, 301, 302], "sync": [1, 12, 13, 19, 61, 133, 134, 135, 136, 137, 160, 194], "natur": [1, 6, 7, 20, 22, 27, 28, 29, 50, 80, 82, 101, 106, 114, 140, 141, 151, 152, 170, 180, 190, 218, 221, 226, 231, 234, 241], "resourc": [1, 59, 80, 94, 116, 118, 134, 148, 150, 167, 177, 187, 190, 196, 203, 250, 252, 267, 283, 288, 291, 301], "alloc": [1, 7, 22, 25, 26, 27, 45, 54, 61, 104, 144, 150, 167, 170, 187, 193, 194, 196, 221, 236, 247, 272, 273, 302], "gpu": [1, 3, 5, 14, 20, 22, 23, 24, 45, 48, 52, 54, 55, 56, 58, 59, 60, 62, 63, 66, 69, 78, 88, 89, 99, 100, 104, 105, 106, 108, 116, 122, 126, 129, 132, 133, 134, 135, 136, 138, 139, 141, 146, 147, 148, 150, 151, 152, 153, 158, 161, 164, 167, 169, 172, 175, 177, 178, 180, 181, 182, 190, 191, 197, 198, 201, 203, 207, 209, 210, 211, 224, 225, 234, 235, 240, 241, 243, 246, 247, 250, 262, 266, 267, 270, 273, 286, 287, 293, 295], "worker": [1, 7, 13, 19, 57, 58, 94, 99, 132, 134, 135, 137, 150, 161, 177, 180, 181, 187, 245, 250, 283], "so": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 49, 52, 55, 57, 58, 59, 70, 73, 80, 82, 89, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 121, 122, 129, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 150, 151, 152, 156, 158, 159, 160, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 187, 190, 191, 193, 194, 196, 197, 198, 199, 200, 203, 205, 206, 207, 208, 209, 216, 218, 219, 220, 221, 223, 226, 228, 231, 234, 236, 240, 250, 252, 254, 255, 262, 264, 266, 267, 270, 272, 282, 283, 286, 287, 296, 297, 298, 301, 302], "syncdatacollector": [1, 151, 177], "process": [1, 4, 5, 6, 7, 13, 14, 16, 17, 19, 20, 22, 24, 26, 27, 28, 29, 38, 41, 42, 46, 52, 55, 56, 57, 58, 62, 66, 80, 88, 91, 96, 97, 99, 101, 105, 106, 114, 115, 116, 123, 126, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 150, 151, 152, 157, 158, 160, 161, 169, 170, 176, 178, 180, 181, 182, 183, 187, 190, 193, 194, 196, 197, 203, 205, 207, 208, 209, 220, 223, 224, 225, 230, 232, 234, 237, 241, 245, 246, 247, 249, 256, 264, 267, 269, 272, 273, 282, 283, 284, 286, 287, 292, 297, 298, 299, 301, 302], "offer": [1, 4, 8, 13, 16, 18, 22, 42, 46, 48, 59, 66, 96, 97, 108, 135, 136, 138, 153, 155, 158, 159, 170, 194, 199, 226, 247, 250, 265, 267, 273, 282, 283, 288, 301], "multiasyncdatacollector": [1, 177], "rollout": [1, 151, 177], "asynchron": [1, 25, 132, 133, 137, 140, 173, 177, 181, 273, 287], "manner": [1, 6, 10, 16, 23, 36, 96, 114, 177, 190, 194, 250], "therebi": [1, 210, 216, 221, 298], "decoupl": [1, 38, 168, 226], "factori": [1, 7, 104, 110, 217, 218, 268, 272], "empti": [1, 4, 6, 7, 10, 16, 23, 25, 27, 104, 142, 158, 176, 183, 187, 190, 193, 196, 199, 207, 209, 236, 240, 273, 282], "maximum": [1, 13, 55, 88, 101, 111, 140, 142, 151, 152, 158, 177, 182, 183, 209, 220, 223, 283], "non": [1, 2, 3, 6, 10, 13, 16, 23, 26, 37, 55, 57, 59, 60, 62, 88, 91, 101, 104, 106, 107, 109, 113, 114, 123, 135, 136, 140, 144, 145, 150, 151, 152, 155, 159, 161, 164, 174, 175, 179, 182, 183, 187, 191, 194, 196, 199, 205, 208, 209, 216, 224, 229, 230, 236, 247, 264, 267, 280, 284, 297, 301], "termin": [1, 16, 27, 59, 94, 151, 177, 178, 180, 181, 190, 240], "max_frames_per_traj": [1, 177], "effect": [1, 6, 7, 10, 11, 13, 18, 27, 61, 80, 88, 97, 101, 104, 106, 114, 119, 138, 141, 142, 148, 153, 167, 169, 170, 174, 178, 182, 183, 190, 194, 196, 197, 218, 229, 230, 231, 239, 246, 248, 266, 270, 283, 288, 297], "regist": [1, 8, 18, 26, 41, 48, 52, 101, 119, 121, 123, 133, 135, 136, 138, 148, 155, 167, 168, 177, 193, 197, 203, 207, 241, 250, 255, 262, 266, 274, 285], "new": [1, 2, 4, 5, 6, 7, 8, 10, 14, 16, 18, 26, 27, 28, 29, 35, 36, 40, 45, 48, 50, 54, 55, 56, 58, 61, 67, 80, 82, 83, 84, 85, 86, 88, 91, 94, 103, 104, 105, 106, 108, 111, 113, 118, 119, 121, 123, 129, 133, 134, 135, 136, 137, 139, 143, 151, 152, 155, 156, 158, 160, 167, 168, 169, 170, 173, 174, 175, 177, 178, 179, 182, 183, 187, 190, 193, 194, 198, 200, 203, 204, 207, 210, 211, 216, 221, 223, 225, 226, 228, 229, 231, 239, 240, 241, 250, 262, 270, 273, 280, 283, 284, 287, 289], "stepcount": [1, 151, 177], "infer": [1, 3, 7, 8, 10, 11, 12, 23, 24, 25, 26, 27, 43, 45, 54, 55, 97, 99, 101, 105, 106, 110, 113, 114, 116, 133, 136, 139, 140, 143, 144, 156, 158, 177, 179, 190, 191, 193, 197, 198, 209, 220, 221, 224, 225, 226, 228, 229, 230, 234, 237, 240, 241, 247, 256, 262, 264, 269, 270, 271, 285, 287, 288, 295, 298, 301], "manual": [1, 4, 6, 10, 14, 18, 26, 27, 38, 52, 55, 59, 74, 77, 78, 104, 106, 114, 122, 123, 136, 145, 151, 153, 168, 169, 170, 172, 175, 193, 194, 205, 206, 209, 221, 228, 241, 245, 249, 252, 262, 266, 283, 301], "around": [1, 6, 7, 13, 27, 28, 38, 42, 55, 61, 82, 97, 99, 101, 104, 106, 129, 133, 142, 153, 158, 159, 164, 169, 175, 183, 187, 188, 193, 194, 205, 207, 216, 217, 226, 254, 270, 274], "1m": [1, 49, 94, 151, 177, 201], "outer": [1, 7, 135, 159], "loop": [1, 3, 5, 6, 10, 13, 19, 23, 25, 29, 40, 42, 49, 52, 55, 57, 58, 80, 82, 91, 94, 96, 99, 103, 106, 114, 122, 134, 136, 140, 141, 143, 152, 153, 158, 159, 160, 167, 169, 170, 180, 181, 188, 194, 197, 206, 209, 234, 254, 267, 273, 283, 286], "equal": [1, 5, 12, 96, 104, 106, 139, 152, 161, 174, 177, 178, 190, 193, 196, 203, 219, 250, 298, 301], "length": [1, 14, 16, 55, 58, 96, 97, 101, 113, 114, 138, 142, 151, 152, 177, 182, 183, 194, 199, 201, 209, 218, 221, 225, 234, 239, 250, 287, 297], "sub": [1, 7, 24, 29, 96, 121, 138, 143, 172, 177, 181, 187, 191, 194, 196, 197, 209, 249, 292, 301], "shape": [1, 4, 5, 18, 20, 27, 36, 38, 45, 48, 54, 55, 58, 73, 91, 96, 97, 99, 106, 107, 110, 113, 121, 122, 135, 138, 141, 142, 143, 151, 152, 153, 155, 159, 164, 169, 177, 187, 190, 194, 198, 199, 208, 209, 219, 221, 226, 230, 234, 236, 254, 262, 267, 270, 271, 273, 279, 280, 283, 287, 292, 293, 295, 296, 298], "env_per_collector": 1, "traj_len": [1, 151], "perform": [1, 3, 5, 7, 10, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 29, 36, 37, 41, 42, 46, 48, 49, 50, 55, 62, 69, 77, 80, 88, 91, 94, 96, 99, 101, 104, 105, 106, 107, 108, 113, 114, 123, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 150, 151, 152, 155, 156, 159, 160, 164, 170, 172, 173, 175, 177, 178, 179, 181, 184, 185, 188, 190, 191, 193, 194, 198, 199, 201, 205, 207, 208, 209, 210, 216, 217, 221, 223, 224, 225, 228, 229, 230, 234, 236, 241, 243, 245, 249, 250, 252, 253, 255, 262, 264, 266, 267, 268, 270, 271, 272, 273, 279, 282, 286, 287, 288, 291, 295, 297, 298, 299, 300], "assess": [1, 170, 194], "mode": [1, 5, 14, 24, 43, 48, 55, 58, 61, 80, 88, 91, 93, 94, 97, 103, 123, 133, 135, 143, 144, 145, 151, 156, 158, 160, 161, 164, 172, 175, 179, 182, 183, 184, 188, 190, 191, 193, 197, 199, 200, 203, 223, 224, 225, 228, 229, 230, 231, 235, 247, 250, 254, 256, 267, 283, 287, 290, 297, 298, 301], "dedic": [1, 12, 61, 104, 180, 181, 197, 229, 264, 265, 266, 302], "frequenc": [1, 89, 140], "everi": [1, 2, 7, 10, 12, 16, 17, 20, 22, 23, 28, 36, 37, 38, 42, 48, 49, 52, 55, 57, 58, 61, 66, 94, 96, 99, 101, 103, 104, 105, 129, 138, 139, 141, 142, 144, 150, 151, 155, 161, 164, 167, 168, 169, 170, 174, 175, 177, 178, 179, 181, 183, 187, 188, 191, 193, 194, 221, 226, 228, 234, 243, 268, 281, 283, 294, 302], "10": [1, 3, 5, 7, 10, 13, 20, 23, 27, 37, 38, 46, 48, 49, 50, 55, 59, 73, 80, 89, 94, 99, 105, 119, 121, 123, 134, 135, 137, 143, 148, 150, 151, 153, 161, 164, 175, 176, 179, 180, 181, 182, 183, 184, 187, 188, 190, 193, 194, 196, 199, 200, 203, 208, 211, 225, 226, 228, 234, 236, 240, 243, 245, 246, 249, 252, 254, 256, 262, 267, 269, 273, 282, 298], "come": [1, 6, 7, 12, 20, 23, 24, 26, 27, 46, 57, 58, 80, 91, 94, 96, 101, 104, 106, 107, 119, 123, 134, 138, 140, 150, 151, 158, 167, 168, 170, 173, 177, 182, 191, 193, 194, 199, 205, 208, 209, 228, 229, 230, 234, 256, 267, 293, 302], "flavor": [1, 4, 6, 27], "priorit": [1, 221, 283], "error": [1, 4, 5, 6, 7, 10, 12, 13, 14, 18, 26, 41, 42, 48, 52, 55, 56, 59, 73, 96, 99, 101, 104, 106, 110, 114, 118, 119, 122, 135, 137, 139, 145, 167, 173, 177, 178, 191, 194, 199, 203, 208, 216, 223, 226, 232, 249, 255, 267, 280, 283, 286, 296, 300], "higher": [1, 23, 24, 49, 54, 59, 88, 96, 97, 101, 106, 108, 122, 134, 135, 141, 142, 145, 155, 159, 175, 176, 177, 178, 187, 188, 190, 193, 194, 205, 209, 223, 224, 226, 229, 230, 237, 239, 241, 244, 249, 252, 264, 270], "likelihood": [1, 41, 55, 101, 108, 114], "regular": [1, 5, 6, 7, 10, 12, 23, 27, 28, 106, 114, 126, 141, 142, 159, 168, 169, 170, 185, 194, 199, 216, 218, 221, 224, 229, 230, 255, 283, 295], "circular": [1, 203, 232], "compos": [1, 4, 6, 7, 8, 12, 18, 20, 23, 25, 29, 49, 66, 94, 97, 99, 101, 108, 133, 134, 150, 151, 155, 156, 164, 169, 175, 176, 177, 180, 182, 184, 188, 190, 199, 205, 226, 228, 231, 249, 255, 256, 269, 273, 288, 291, 293], "pick": [1, 7, 23, 49, 107, 141, 178, 183, 250, 262, 282, 287, 293], "tensor": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 20, 23, 24, 25, 26, 27, 37, 38, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 55, 63, 66, 67, 69, 70, 72, 73, 74, 76, 79, 80, 82, 91, 96, 97, 98, 100, 101, 103, 105, 106, 107, 108, 111, 114, 115, 116, 119, 121, 123, 133, 134, 135, 136, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 158, 159, 161, 164, 168, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 190, 191, 193, 194, 196, 198, 201, 203, 204, 205, 207, 208, 209, 210, 211, 216, 217, 218, 223, 225, 226, 229, 230, 234, 235, 236, 237, 239, 240, 245, 248, 249, 250, 252, 254, 255, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 279, 282, 285, 286, 287, 292, 295, 300], "physic": [1, 16, 113, 170, 197, 272, 283, 301], "memori": [1, 5, 6, 7, 10, 12, 19, 20, 22, 23, 25, 26, 27, 45, 54, 55, 57, 61, 94, 101, 104, 105, 106, 109, 112, 114, 116, 123, 133, 134, 135, 136, 138, 146, 150, 151, 158, 159, 160, 164, 174, 180, 182, 184, 187, 190, 193, 194, 198, 199, 201, 203, 207, 208, 216, 219, 221, 229, 230, 234, 241, 245, 253, 255, 264, 266, 267, 270, 272, 274, 287, 292, 302], "map": [1, 7, 14, 37, 55, 58, 82, 97, 99, 101, 106, 107, 111, 113, 123, 136, 141, 151, 153, 159, 167, 168, 169, 177, 178, 181, 190, 193, 196, 198, 205, 226, 231, 234, 239, 245, 247, 252, 272, 282, 283, 285], "arrai": [1, 7, 36, 37, 48, 49, 52, 57, 66, 77, 78, 91, 96, 97, 104, 113, 114, 121, 122, 141, 142, 160, 175, 176, 183, 190, 219, 265], "desir": [1, 4, 6, 10, 14, 16, 19, 55, 58, 80, 88, 106, 123, 136, 150, 156, 174, 187, 190, 193, 201, 203, 208, 217, 236, 262, 266, 269, 298, 301], "hyperparamet": [1, 7, 16, 20, 58, 114, 123, 124, 133, 140, 141, 216, 221, 285], "temporari": [1, 6, 140, 197, 204], "directori": [1, 5, 6, 7, 11, 14, 26, 27, 38, 55, 57, 58, 82, 94, 103, 106, 123, 126, 129, 140, 141, 142, 152, 158, 175, 183, 187, 190, 203, 208, 209, 247, 256, 262, 281, 292, 301], "disk": [1, 5, 27, 29, 38, 99, 103, 116, 123, 151, 170, 203, 207, 267, 272, 273, 281, 292, 293], "along": [1, 5, 6, 7, 10, 16, 20, 25, 27, 36, 37, 45, 48, 54, 55, 59, 60, 61, 62, 89, 96, 97, 99, 100, 101, 103, 104, 105, 106, 110, 111, 114, 115, 129, 134, 135, 141, 142, 146, 147, 151, 167, 174, 178, 180, 188, 190, 193, 194, 201, 218, 224, 225, 234, 236, 297], "dimens": [1, 6, 7, 14, 16, 22, 24, 25, 37, 45, 49, 52, 54, 55, 94, 97, 99, 101, 103, 110, 111, 113, 114, 133, 138, 141, 151, 153, 161, 169, 176, 177, 179, 193, 194, 201, 217, 221, 225, 226, 228, 239, 266, 270, 283, 298], "feed": [1, 7, 14, 23, 49, 52, 55, 99, 101, 105, 106, 109, 111, 116, 123, 138, 141, 142, 148, 160, 178, 183, 188, 196, 223, 247, 269, 286], "adapt": [1, 2, 16, 20, 28, 94, 99, 116, 140, 201, 234, 267], "divid": [1, 10, 12, 13, 14, 16, 17, 23, 91, 106, 108, 137, 150, 168, 170, 181, 196, 197, 204, 298, 301], "yield": [1, 7, 13, 14, 20, 23, 25, 41, 43, 104, 123, 138, 139, 179, 181, 199, 208, 219, 234, 254, 256, 283], "regard": [1, 7, 13, 16, 27, 123, 158, 159, 177, 187, 194, 297], "200": [1, 7, 11, 97, 151, 161, 181, 208, 254], "random_crop_len": 1, "25": [1, 26, 27, 38, 49, 80, 96, 97, 106, 121, 129, 134, 175, 180, 190, 204, 208, 252, 254, 267, 273], "balanc": [1, 7, 22, 148, 187, 194, 262], "choic": [1, 4, 5, 7, 10, 18, 94, 140, 142, 150, 170, 194, 243, 283], "heterogen": [1, 225], "figur": [1, 10, 14, 16, 26, 38, 55, 80, 88, 99, 106, 133, 137, 138, 140, 151, 158, 170, 179, 187, 188, 190, 193, 196, 205, 223, 226], "dataflow": 1, "8": [1, 3, 6, 7, 20, 23, 27, 38, 49, 73, 94, 97, 101, 111, 121, 122, 135, 138, 144, 148, 151, 152, 156, 158, 161, 172, 175, 176, 187, 190, 193, 194, 196, 201, 203, 208, 209, 211, 229, 230, 234, 240, 241, 245, 246, 247, 248, 249, 250, 252, 254, 256, 264, 266, 273, 283, 301, 302], "1000": [1, 2, 23, 48, 103, 105, 129, 134, 135, 139, 151, 158, 177, 188, 196, 197, 229, 234, 245, 262, 267, 282], "known": [1, 4, 5, 6, 14, 20, 96, 138, 150, 152, 155, 157, 174, 178, 183, 193, 194, 203, 209, 231, 234, 241, 267, 270, 282, 293], "utd": [1, 151], "64": [1, 6, 7, 17, 20, 22, 23, 27, 38, 42, 48, 94, 104, 111, 114, 134, 135, 138, 151, 153, 169, 176, 179, 180, 194, 201, 220, 234, 239, 241, 252, 254, 256, 267, 273, 288], "reproduc": [1, 14, 58, 80, 99, 104, 106, 152, 158, 177, 178, 181, 191, 209, 254, 267, 283], "realiz": [1, 20, 234], "sever": [1, 2, 3, 4, 12, 13, 17, 19, 23, 26, 29, 36, 42, 46, 50, 52, 58, 59, 60, 80, 106, 108, 135, 141, 147, 150, 160, 167, 168, 170, 173, 175, 177, 179, 180, 187, 188, 191, 193, 196, 197, 199, 218, 224, 231, 254, 255, 267, 282, 292, 293, 301], "qnet": 1, "ve": [1, 6, 7, 10, 20, 25, 26, 29, 50, 52, 56, 96, 97, 99, 101, 104, 105, 114, 133, 139, 151, 157, 159, 167, 169, 170, 180, 188, 193, 194, 196, 208, 216, 218, 219, 220, 234, 246, 247, 267, 270], "becaus": [1, 2, 4, 5, 6, 7, 10, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 36, 38, 43, 45, 48, 49, 52, 54, 55, 57, 58, 61, 62, 80, 91, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 114, 115, 116, 119, 123, 129, 135, 136, 139, 141, 144, 145, 148, 151, 152, 155, 159, 160, 161, 164, 169, 170, 174, 175, 179, 181, 183, 185, 187, 191, 193, 196, 198, 199, 204, 206, 208, 209, 216, 218, 223, 228, 231, 234, 237, 239, 243, 252, 254, 264, 267, 270, 280, 283, 285, 286, 298], "_must_": 1, "off": [1, 10, 19, 23, 25, 28, 36, 38, 48, 55, 101, 104, 107, 123, 134, 140, 141, 158, 167, 175, 177, 179, 180, 181, 190, 204, 216, 246, 270, 287, 300], "dictat": [1, 16], "introduc": [1, 13, 17, 19, 20, 25, 26, 27, 28, 37, 40, 60, 82, 94, 97, 106, 108, 121, 122, 133, 135, 137, 143, 148, 158, 161, 167, 179, 181, 182, 183, 190, 191, 193, 194, 197, 204, 205, 207, 209, 210, 211, 216, 218, 219, 220, 223, 224, 226, 229, 230, 231, 234, 237, 239, 241, 245, 246, 255, 280, 283, 298, 299, 301], "outdat": 1, "trick": [1, 4, 7, 12, 55, 104, 145, 150, 159], "multi": [1, 6, 7, 16, 22, 52, 55, 58, 59, 60, 62, 66, 96, 97, 101, 104, 108, 133, 135, 136, 138, 146, 147, 148, 151, 152, 177, 179, 182, 184, 187, 197, 198, 209, 221, 247, 249, 283, 301], "altern": [1, 7, 12, 27, 54, 55, 111, 129, 134, 153, 157, 161, 173, 175, 177, 183, 187, 190, 191, 199, 205, 208, 219, 220, 229, 230, 247, 280, 283, 299], "hack": [1, 152, 209, 216, 280], "find": [1, 2, 4, 5, 6, 7, 10, 12, 20, 26, 27, 36, 38, 45, 54, 80, 88, 89, 91, 94, 99, 101, 104, 107, 110, 114, 133, 134, 137, 141, 150, 152, 155, 156, 158, 168, 175, 178, 181, 183, 187, 193, 194, 206, 216, 217, 218, 219, 220, 223, 226, 231, 234, 256, 262, 265, 267, 281], "well": [1, 3, 4, 5, 6, 7, 10, 12, 13, 23, 24, 26, 27, 38, 45, 49, 54, 55, 59, 88, 91, 94, 97, 99, 106, 108, 110, 114, 116, 123, 129, 134, 135, 136, 139, 140, 141, 144, 145, 150, 151, 152, 155, 156, 167, 168, 170, 172, 175, 176, 179, 180, 181, 182, 183, 187, 188, 190, 191, 194, 197, 198, 205, 209, 216, 217, 218, 221, 223, 226, 228, 231, 236, 246, 247, 249, 255, 262, 267, 270, 272, 280, 282, 283, 285, 293, 294, 295, 298, 299, 301], "despit": [1, 80, 143, 148], "fact": [1, 3, 4, 6, 7, 10, 14, 16, 23, 26, 27, 36, 45, 80, 96, 97, 99, 101, 104, 106, 108, 113, 139, 168, 177, 178, 188, 193, 194, 199], "part": [1, 3, 6, 7, 10, 12, 15, 16, 17, 19, 24, 27, 41, 48, 50, 55, 58, 80, 94, 96, 97, 101, 107, 109, 113, 114, 115, 133, 135, 138, 139, 141, 142, 145, 146, 150, 151, 152, 157, 158, 165, 167, 168, 177, 183, 193, 194, 201, 203, 204, 205, 206, 208, 210, 216, 218, 220, 225, 228, 250, 256, 262, 265, 266, 270, 280, 282, 288, 292, 295, 298, 301], "made": [1, 7, 12, 17, 23, 29, 58, 94, 97, 104, 106, 107, 135, 137, 139, 150, 151, 170, 183, 188, 190, 193, 197, 219, 225, 231, 264, 265, 270, 283], "thank": [1, 11, 23, 55, 114, 140, 141, 142, 150, 152, 183, 196, 197, 199, 209, 223], "hardupd": 1, "softupd": [1, 151], "appropri": [1, 7, 10, 55, 97, 114, 140, 148, 168, 175, 180, 188, 194, 199, 205, 207, 224, 226, 228, 229, 230, 254, 255, 266], "locat": [1, 4, 7, 35, 38, 45, 54, 88, 97, 99, 113, 121, 150, 170, 175, 177, 187, 196, 198, 203, 247, 262, 273, 283, 292], "adam": [1, 7, 13, 15, 41, 52, 58, 74, 105, 108, 122, 136, 150, 151, 167, 178, 179, 181, 243, 244, 246, 247, 252, 302], "pretti": [1, 19, 25, 49, 104, 121, 122, 159, 181, 205, 239], "plot": [1, 7, 58, 80, 88, 96, 140, 151, 170, 178, 179, 188, 190, 223], "alreadi": [1, 2, 4, 5, 6, 7, 12, 13, 17, 26, 27, 96, 99, 104, 106, 107, 114, 138, 140, 148, 161, 167, 170, 172, 175, 176, 177, 182, 188, 194, 196, 197, 218, 220, 231, 232, 245, 249, 250, 254, 255, 264, 267, 269, 283, 284, 285, 286, 288, 302], "mention": [1, 4, 6, 7, 12, 13, 17, 19, 58, 80, 91, 104, 106, 107, 123, 134, 138, 150, 151, 170, 178, 180, 187, 190, 193, 199, 209, 226, 247, 262, 272, 280, 292, 301], "greater": [1, 13, 55, 58, 97, 122, 139, 196, 240, 301], "concret": [1, 6, 7, 10, 13, 96, 170, 177, 193, 216, 231], "takeawai": [1, 126, 199], "further": [1, 5, 6, 7, 10, 23, 25, 27, 52, 80, 94, 101, 106, 114, 138, 150, 156, 158, 170, 174, 177, 190, 191, 193, 197, 208, 221, 223, 224, 225, 226, 228, 229, 232, 246, 250, 255, 264, 272, 283, 291], "might": [1, 4, 6, 10, 12, 17, 18, 19, 29, 36, 43, 49, 56, 57, 58, 59, 96, 99, 104, 106, 107, 111, 113, 116, 119, 121, 136, 145, 146, 147, 148, 150, 156, 157, 159, 168, 170, 175, 178, 181, 182, 183, 187, 191, 193, 194, 198, 199, 203, 205, 208, 209, 216, 226, 231, 232, 240, 249, 267, 268, 273, 280, 283, 288, 298, 301], "dispatch": [1, 4, 6, 17, 133, 136, 173, 197, 199, 241, 254, 262, 266, 294], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 27, 28, 29, 55, 91, 96, 114, 116, 123, 133, 135, 136, 146, 199, 224, 229, 247, 267], "runnable_code_remov": [1, 11, 14, 15, 16, 18, 20, 24, 26, 27, 28, 29, 36, 37, 40, 41, 42, 43, 45, 46, 48, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 74, 77, 78, 80, 82, 91, 96, 99, 100, 101, 103, 104, 105, 106, 108, 110, 111, 113, 114, 115, 116, 118, 121, 122, 123, 126, 129, 139, 140, 141, 142, 144, 153, 155, 156, 157, 158, 159, 160, 161, 162, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 191, 193, 194, 198, 199, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 265, 266, 267, 268, 269, 270, 272, 273, 274, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "minut": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 137, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 178, 182, 183, 185, 187, 188, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "002": [1, 11, 14, 15, 16, 18, 21, 29, 36, 37, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 54, 57, 77, 78, 79, 82, 96, 101, 102, 104, 111, 112, 113, 114, 116, 120, 124, 126, 135, 139, 140, 141, 144, 153, 157, 160, 161, 167, 168, 169, 174, 177, 178, 183, 184, 185, 216, 217, 218, 219, 223, 235, 244, 268, 272, 274, 279, 288, 290, 294, 295, 296, 297, 299], "python": [1, 3, 5, 7, 11, 12, 14, 15, 16, 17, 20, 21, 22, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 59, 61, 62, 63, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 133, 134, 135, 139, 140, 141, 142, 143, 144, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 176, 177, 178, 180, 182, 183, 185, 187, 191, 193, 194, 197, 198, 199, 201, 203, 204, 206, 207, 208, 209, 210, 216, 217, 218, 219, 221, 223, 224, 225, 226, 229, 230, 232, 237, 239, 244, 247, 248, 249, 250, 252, 255, 256, 262, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 294, 295, 296, 298, 300, 301], "sourc": [1, 3, 6, 7, 11, 12, 13, 14, 15, 16, 18, 19, 20, 24, 26, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 61, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 135, 138, 139, 140, 141, 142, 144, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 173, 174, 177, 178, 179, 181, 182, 183, 185, 187, 190, 191, 193, 194, 197, 198, 199, 203, 204, 207, 208, 210, 216, 217, 218, 219, 221, 223, 225, 229, 237, 239, 240, 244, 252, 253, 255, 256, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "coding_ddpg": [1, 21], "py": [1, 4, 6, 7, 10, 11, 12, 14, 15, 16, 18, 20, 21, 23, 24, 26, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 61, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 82, 90, 91, 92, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 129, 134, 135, 136, 139, 140, 141, 142, 143, 144, 146, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 172, 173, 174, 177, 178, 180, 182, 183, 184, 185, 187, 191, 193, 194, 198, 199, 201, 203, 204, 205, 206, 207, 208, 209, 216, 217, 218, 219, 221, 223, 229, 230, 232, 235, 237, 239, 240, 244, 248, 249, 252, 256, 262, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 279, 280, 281, 282, 283, 284, 285, 286, 288, 290, 294, 295, 296, 297, 298, 299, 301], "jupyt": [1, 11, 14, 15, 16, 18, 20, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 188, 190, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "notebook": [1, 11, 14, 15, 16, 18, 20, 22, 24, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 89, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 188, 190, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "ipynb": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "galleri": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "sphinx": [1, 11, 14, 15, 16, 18, 20, 24, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 57, 58, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 121, 123, 126, 129, 139, 140, 141, 142, 144, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 177, 178, 182, 183, 185, 187, 191, 193, 194, 198, 199, 204, 207, 208, 216, 217, 218, 219, 221, 223, 237, 239, 244, 252, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 288, 294, 295, 296, 297, 299], "The": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 42, 45, 46, 48, 49, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 66, 72, 73, 74, 78, 80, 82, 88, 89, 91, 97, 98, 99, 101, 103, 104, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 130, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 164, 167, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 190, 191, 193, 194, 196, 197, 198, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 253, 254, 255, 256, 257, 264, 266, 267, 269, 270, 272, 273, 280, 281, 282, 283, 286, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302], "packag": [2, 4, 6, 7, 20, 22, 26, 27, 28, 49, 52, 57, 63, 66, 73, 74, 82, 94, 105, 106, 108, 114, 118, 122, 129, 132, 133, 134, 135, 148, 150, 151, 152, 157, 173, 175, 176, 178, 181, 187, 190, 191, 197, 209, 232, 234, 249, 255, 265, 269, 273, 282, 286, 287, 298, 300], "build": [2, 7, 16, 23, 24, 29, 36, 38, 39, 40, 41, 42, 43, 45, 46, 52, 55, 66, 73, 74, 82, 94, 96, 97, 98, 99, 100, 103, 104, 105, 107, 113, 114, 121, 122, 126, 132, 133, 141, 142, 150, 151, 152, 155, 165, 167, 169, 170, 177, 178, 179, 180, 181, 184, 193, 194, 203, 204, 205, 209, 211, 221, 225, 226, 229, 239, 255, 267, 269, 282, 283, 295, 298], "highli": [2, 6, 7, 12, 22, 55, 94, 183, 194, 197, 239, 283], "dynam": [2, 5, 6, 7, 10, 14, 16, 17, 21, 23, 24, 26, 27, 29, 36, 48, 59, 70, 96, 106, 109, 112, 115, 122, 123, 133, 143, 161, 174, 177, 200, 205, 206, 208, 225, 226, 228, 229, 235, 255, 256, 266, 271, 279, 283, 287, 290, 293, 295, 298], "neural": [2, 6, 15, 16, 20, 21, 24, 36, 39, 40, 42, 48, 51, 53, 55, 57, 63, 73, 80, 96, 97, 99, 101, 105, 106, 107, 108, 109, 110, 111, 113, 116, 118, 122, 129, 133, 140, 141, 142, 143, 144, 151, 165, 174, 177, 178, 180, 183, 184, 185, 188, 190, 197, 220, 224, 225, 229, 234, 241, 254, 255, 262, 270, 271, 279, 283, 287, 288], "network": [2, 3, 6, 10, 14, 15, 16, 20, 23, 24, 25, 29, 36, 39, 40, 41, 42, 43, 48, 51, 53, 55, 57, 63, 73, 74, 80, 96, 97, 99, 101, 105, 106, 107, 109, 110, 112, 113, 114, 116, 118, 122, 129, 133, 139, 140, 143, 144, 147, 148, 164, 165, 168, 170, 174, 175, 180, 184, 187, 188, 190, 197, 203, 220, 224, 225, 229, 234, 241, 254, 255, 256, 262, 270, 271, 274, 279, 283, 287, 288], "api": [2, 4, 6, 8, 9, 10, 12, 13, 16, 17, 18, 22, 24, 25, 26, 27, 28, 29, 37, 38, 40, 42, 45, 46, 54, 62, 88, 97, 118, 121, 123, 133, 134, 135, 137, 138, 139, 140, 143, 148, 150, 151, 152, 157, 158, 159, 163, 169, 171, 172, 175, 179, 180, 181, 187, 191, 193, 194, 197, 198, 200, 201, 204, 205, 206, 207, 208, 220, 223, 224, 225, 226, 228, 229, 230, 237, 239, 245, 246, 247, 248, 249, 255, 256, 264, 265, 267, 268, 270, 273, 282, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301], "explor": [2, 7, 10, 16, 25, 27, 50, 55, 80, 119, 133, 140, 145, 151, 158, 160, 167, 170, 172, 177, 178, 182, 183, 194, 199, 203, 220, 230, 248, 265, 287, 292, 295, 298, 301], "note": [2, 4, 5, 6, 7, 10, 11, 14, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 36, 48, 49, 50, 52, 55, 56, 58, 80, 91, 96, 97, 99, 101, 104, 105, 108, 109, 110, 111, 113, 114, 119, 121, 123, 129, 134, 135, 136, 138, 139, 144, 145, 147, 148, 150, 152, 153, 155, 156, 158, 159, 161, 167, 169, 170, 173, 174, 175, 179, 180, 181, 182, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 203, 204, 205, 206, 207, 209, 216, 217, 218, 219, 221, 228, 229, 230, 234, 236, 237, 239, 241, 245, 246, 247, 249, 250, 273, 282, 285, 288, 292, 293, 294, 295, 301, 302], "pleas": [2, 4, 5, 6, 7, 8, 10, 11, 12, 18, 23, 24, 26, 27, 49, 50, 52, 57, 64, 65, 82, 87, 94, 134, 135, 138, 148, 150, 152, 153, 155, 156, 157, 158, 161, 167, 169, 173, 175, 179, 180, 181, 187, 190, 191, 193, 194, 196, 198, 199, 200, 203, 206, 207, 209, 210, 211, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 228, 229, 230, 231, 239, 240, 242, 247, 249, 254, 255, 256, 258, 259, 260, 261, 262, 263, 266, 268, 270, 283, 298, 301], "differenti": [2, 6, 7, 16, 22, 29, 39, 40, 45, 51, 52, 63, 96, 122, 133, 151, 169, 178, 184, 185, 218], "requires_grad": [2, 4, 7, 10, 36, 48, 52, 68, 69, 73, 96, 104, 110, 114, 122, 129, 143, 145, 175, 201, 234, 272, 280, 286], "track": [2, 6, 10, 16, 37, 41, 48, 58, 88, 96, 101, 103, 104, 108, 110, 114, 122, 135, 137, 142, 143, 147, 151, 156, 175, 181, 183, 187, 232, 248, 273, 281, 286, 297, 298], "auto": [2, 3, 6, 7, 10, 12, 14, 26, 61, 134, 135, 158, 173, 193, 194, 210, 220, 240, 252, 255, 256, 267, 282, 301], "x": [2, 4, 6, 7, 14, 22, 23, 24, 25, 26, 27, 29, 36, 45, 48, 49, 52, 54, 55, 58, 68, 69, 72, 73, 74, 77, 78, 80, 91, 94, 96, 99, 101, 104, 106, 107, 108, 110, 114, 119, 122, 123, 134, 136, 138, 139, 141, 142, 143, 145, 148, 150, 159, 164, 168, 170, 172, 173, 175, 176, 179, 180, 181, 188, 190, 191, 193, 196, 197, 198, 200, 206, 208, 210, 211, 220, 221, 224, 226, 228, 229, 230, 234, 245, 246, 247, 249, 252, 253, 254, 255, 256, 262, 264, 267, 282, 293, 295, 298], "std": [2, 5, 6, 7, 14, 17, 23, 26, 27, 57, 97, 99, 106, 173, 175, 176, 181, 190, 205, 210, 216, 226, 228, 255, 267, 300], "cout": [2, 5, 7, 26, 27, 300], "endl": [2, 7, 26, 27], "cpufloattyp": [2, 5, 7, 27], "y": [2, 6, 22, 24, 26, 27, 36, 45, 46, 48, 54, 58, 68, 69, 72, 73, 74, 77, 78, 80, 88, 91, 96, 101, 104, 106, 107, 110, 111, 114, 119, 122, 135, 139, 152, 172, 173, 187, 190, 191, 193, 209, 210, 211, 218, 220, 223, 245, 282, 293, 295], "wa": [2, 3, 4, 5, 6, 13, 18, 20, 24, 26, 27, 29, 49, 57, 58, 80, 96, 97, 99, 101, 104, 105, 106, 107, 108, 110, 114, 116, 119, 123, 134, 138, 140, 143, 148, 150, 160, 164, 167, 168, 169, 170, 172, 174, 176, 177, 178, 181, 182, 183, 188, 193, 194, 196, 197, 199, 208, 218, 219, 228, 234, 247, 262, 266, 267, 270, 273, 275, 276, 277, 278, 298, 301], "result": [2, 4, 5, 6, 7, 10, 11, 12, 14, 16, 20, 23, 24, 25, 27, 28, 29, 36, 41, 43, 45, 48, 49, 57, 69, 73, 88, 89, 94, 96, 97, 99, 104, 105, 106, 110, 114, 115, 119, 122, 123, 126, 135, 136, 137, 138, 139, 142, 148, 150, 151, 152, 155, 156, 158, 159, 160, 164, 169, 170, 173, 174, 175, 176, 178, 179, 180, 181, 182, 188, 190, 191, 193, 196, 197, 198, 199, 200, 201, 203, 205, 208, 217, 218, 219, 220, 221, 223, 226, 228, 229, 230, 231, 236, 237, 240, 243, 245, 246, 252, 253, 254, 256, 264, 269, 270, 272, 273, 280, 282, 283, 287, 288, 292, 293, 295, 296, 297, 300, 301, 302], "grad_fn": [2, 5, 29, 36, 48, 52, 96, 110, 139, 145, 209], "name": [2, 4, 5, 6, 7, 10, 12, 14, 15, 16, 18, 20, 22, 23, 25, 26, 27, 36, 56, 57, 58, 88, 94, 107, 113, 114, 116, 119, 121, 123, 133, 135, 138, 140, 143, 148, 151, 152, 158, 165, 168, 172, 173, 174, 177, 178, 179, 180, 182, 183, 184, 187, 190, 191, 194, 198, 203, 205, 209, 223, 224, 226, 228, 231, 232, 234, 237, 240, 247, 249, 254, 255, 256, 264, 267, 272, 273, 282, 284, 297, 300, 301], "addbackward1": 2, "z": [2, 6, 27, 58, 91, 104, 110, 193, 218], "27": [2, 57, 94, 158, 181, 196, 208, 252, 254, 264, 267, 297], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 36, 110], "exist": [2, 5, 7, 10, 12, 13, 18, 20, 26, 27, 29, 52, 58, 59, 66, 72, 89, 91, 104, 110, 122, 133, 143, 150, 152, 156, 174, 176, 181, 182, 183, 185, 187, 190, 191, 193, 199, 204, 209, 216, 217, 219, 226, 231, 232, 234, 245, 246, 248, 250, 266, 267, 280, 283], "flag": [2, 4, 6, 16, 27, 48, 96, 110, 152, 164, 168, 183, 193, 196, 209, 225, 228, 272, 282, 288, 301], "place": [2, 6, 7, 11, 13, 16, 22, 26, 27, 45, 48, 50, 54, 58, 91, 97, 101, 103, 108, 110, 114, 116, 135, 140, 148, 150, 153, 167, 169, 170, 175, 177, 183, 190, 191, 193, 194, 199, 201, 205, 216, 224, 226, 228, 229, 230, 239, 245, 247, 252, 272, 280, 282, 283], "randn": [2, 4, 6, 7, 14, 27, 107, 110, 123, 143, 148, 164, 179, 181, 210, 211, 220, 224, 226, 228, 229, 230, 239, 245, 267, 298, 302], "b": [2, 4, 6, 7, 20, 22, 25, 27, 36, 38, 48, 49, 68, 69, 89, 94, 96, 104, 107, 108, 111, 113, 114, 121, 122, 139, 141, 142, 158, 159, 161, 176, 178, 191, 193, 194, 199, 203, 211, 220, 234, 267, 273, 293], "sumbackward0": 2, "backprop": [2, 48, 107, 110, 114, 141, 160], "scalar": [2, 6, 16, 17, 27, 36, 48, 55, 58, 68, 96, 99, 104, 110, 122, 188, 193, 226, 240, 252], "backward": [2, 3, 4, 7, 10, 13, 14, 15, 17, 18, 19, 23, 29, 36, 41, 48, 49, 50, 52, 58, 68, 69, 73, 77, 78, 94, 96, 97, 99, 105, 107, 110, 111, 114, 122, 129, 133, 134, 138, 139, 142, 146, 148, 150, 151, 155, 159, 164, 169, 172, 175, 179, 180, 181, 184, 187, 188, 193, 194, 199, 228, 243, 244, 245, 246, 247, 250, 252, 255, 256, 266, 273, 283, 286, 291, 295, 297, 302], "equival": [2, 5, 6, 13, 26, 27, 36, 48, 96, 108, 122, 136, 152, 155, 169, 172, 178, 180, 190, 193, 194, 199, 209, 210, 216, 218, 221, 228, 229, 231, 234, 283, 299, 300], "print": [2, 5, 6, 7, 13, 16, 22, 23, 25, 26, 27, 29, 37, 38, 42, 49, 50, 55, 57, 58, 59, 73, 80, 91, 94, 96, 97, 99, 101, 104, 106, 107, 108, 113, 114, 115, 118, 119, 122, 123, 134, 135, 136, 137, 142, 143, 144, 147, 148, 150, 151, 152, 156, 158, 164, 168, 172, 173, 175, 176, 179, 180, 181, 183, 188, 191, 193, 194, 196, 197, 199, 200, 203, 204, 205, 209, 211, 216, 218, 226, 228, 232, 234, 240, 243, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 264, 266, 267, 273, 274, 280, 283, 285, 299, 300, 302], "d": [2, 4, 6, 7, 10, 23, 26, 42, 58, 66, 68, 69, 94, 96, 97, 99, 101, 104, 108, 113, 114, 122, 135, 138, 140, 142, 144, 148, 150, 152, 159, 160, 167, 172, 187, 190, 193, 199, 209, 219, 228, 249, 255, 296], "dx": [2, 69, 108, 122, 145], "grad": [2, 4, 7, 14, 18, 36, 48, 52, 68, 73, 96, 110, 114, 122, 134, 139, 143, 145, 148, 150, 155, 159, 164, 167, 179, 180, 181, 199, 216, 239, 244, 250, 252, 266, 286], "5000": [2, 267], "got": [2, 17, 23, 61, 97, 104, 107, 108, 110, 114, 148, 173, 180, 193, 226, 231, 298], "matrix": [2, 6, 7, 14, 20, 27, 36, 45, 48, 54, 88, 96, 99, 101, 104, 107, 108, 110, 113, 114, 121, 138, 141, 142, 159, 164, 168, 182, 183, 190, 193, 194, 196, 197, 199, 219, 221, 229, 234, 239, 254, 255, 256, 262, 269, 283, 287, 297], "explan": [2, 58, 188, 272], "arriv": [2, 7, 17, 27, 135, 148, 179, 283], "valu": [2, 4, 5, 6, 7, 11, 14, 16, 22, 23, 24, 25, 26, 27, 29, 36, 37, 41, 45, 46, 48, 52, 54, 55, 56, 61, 68, 73, 80, 88, 91, 94, 96, 97, 99, 101, 104, 105, 106, 107, 108, 110, 111, 113, 114, 116, 119, 122, 138, 139, 140, 143, 147, 148, 150, 152, 157, 160, 164, 172, 173, 178, 179, 180, 181, 182, 183, 187, 190, 191, 194, 199, 201, 203, 205, 206, 209, 216, 217, 218, 219, 221, 223, 224, 225, 226, 228, 231, 237, 244, 250, 252, 266, 267, 270, 273, 280, 281, 292, 301, 302], "section": [2, 4, 5, 6, 7, 10, 13, 17, 22, 23, 25, 27, 37, 38, 40, 41, 42, 43, 45, 48, 49, 52, 56, 57, 58, 80, 97, 100, 104, 105, 106, 107, 108, 111, 113, 114, 119, 136, 139, 143, 144, 150, 158, 160, 164, 170, 175, 178, 179, 181, 187, 190, 193, 194, 196, 197, 198, 199, 200, 205, 217, 218, 226, 228, 231, 236, 241, 244, 252, 255, 262, 266, 267, 272, 283, 293, 297], "look": [2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 16, 19, 22, 24, 26, 27, 29, 38, 43, 45, 48, 49, 52, 54, 55, 56, 57, 58, 61, 80, 91, 94, 96, 97, 99, 101, 103, 104, 105, 107, 108, 110, 111, 113, 114, 115, 116, 123, 129, 134, 136, 138, 139, 140, 145, 150, 151, 153, 161, 164, 167, 170, 174, 176, 177, 180, 181, 182, 183, 187, 188, 190, 193, 194, 197, 198, 199, 204, 205, 210, 216, 219, 221, 224, 226, 228, 229, 230, 248, 252, 254, 255, 267, 269, 273, 281, 282, 284, 285, 286, 288, 293, 297], "jacobian": [2, 48, 96, 133, 155, 184, 239], "product": [2, 3, 5, 7, 45, 48, 54, 91, 96, 108, 116, 133, 135, 150, 155, 172, 183, 184, 194, 196, 197, 201, 209, 229, 231, 239, 270, 287, 295], "norm": [2, 16, 20, 23, 58, 101, 106, 133, 138, 168, 172, 174, 184, 190, 199, 205, 234], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 254], "4944": 2, "v": [2, 20, 22, 23, 36, 48, 58, 59, 61, 96, 103, 105, 110, 111, 113, 135, 138, 152, 155, 164, 178, 180, 187, 188, 196, 197, 199, 204, 206, 207, 208, 218, 225, 226, 231, 234, 254, 296], "0001": [2, 23, 94, 158, 256], "kfloat": [2, 3, 4, 210, 240], "102": [2, 73, 151], "4000": [2, 49, 94, 99, 282], "1024": [2, 6, 22, 25, 88, 94, 106, 137, 229, 243, 252, 267], "0000": [2, 27, 151, 234], "stop": [2, 5, 6, 27, 36, 94, 96, 107, 110, 142, 161, 167, 177, 179, 183, 187, 203, 273], "histori": [2, 36, 45, 52, 54, 96, 104, 110, 143, 174, 175, 204], "put": [2, 6, 7, 10, 14, 16, 19, 37, 50, 55, 57, 82, 91, 99, 101, 104, 133, 134, 135, 150, 151, 168, 177, 178, 180, 181, 190, 229, 231], "nogradguard": [2, 300], "block": [2, 4, 6, 7, 10, 12, 14, 20, 23, 26, 27, 36, 37, 52, 55, 82, 88, 96, 97, 110, 115, 134, 137, 138, 150, 151, 158, 170, 172, 175, 179, 180, 181, 182, 187, 190, 201, 208, 220, 234, 241, 245, 283, 288], "pow": [2, 6, 73, 122, 216, 252], "no_grad": [2, 23, 36, 48, 49, 73, 94, 96, 107, 108, 110, 111, 114, 122, 134, 135, 151, 152, 160, 175, 176, 180, 188, 193, 197, 204, 205, 209, 220, 224, 226, 228, 229, 230, 236, 250, 252, 255, 283, 291, 300], "Or": [2, 25, 27, 143, 167, 181, 200, 228, 240], "content": [2, 4, 6, 16, 27, 29, 56, 62, 103, 104, 105, 123, 130, 139, 148, 150, 170, 176, 177, 181, 183, 191, 193, 196, 197, 203, 204, 257, 267, 282, 297, 298], "eq": [2, 23, 27, 55, 134, 180, 193, 205, 226, 228, 256, 273], "bool": [2, 13, 16, 17, 27, 151, 152, 173, 190, 200, 209, 220, 234, 301], "is_leaf": 2, "detach_": [2, 181], "register_hook": [2, 143], "retain_grad": 2, "doc": [2, 4, 5, 7, 8, 55, 68, 80, 94, 96, 104, 105, 106, 118, 121, 122, 129, 136, 147, 150, 156, 157, 170, 179, 181, 190, 193, 204, 221, 239, 262, 266, 281, 296, 297], "applic": [2, 3, 13, 14, 16, 17, 27, 38, 55, 66, 82, 97, 101, 106, 116, 129, 132, 133, 134, 139, 140, 144, 148, 152, 157, 167, 170, 174, 175, 179, 181, 190, 193, 196, 208, 218, 232, 240, 245, 246, 247, 252, 254, 256, 262, 283, 287, 297, 301], "calcul": [2, 14, 20, 36, 41, 48, 49, 55, 58, 62, 80, 88, 91, 94, 96, 97, 99, 105, 106, 114, 141, 142, 152, 160, 178, 179, 181, 182, 183, 190, 194, 197, 199, 201, 205, 218, 226, 231, 234, 249, 256, 286], "penalti": [2, 168, 176, 266], "h": [2, 4, 5, 6, 7, 10, 12, 26, 27, 29, 55, 138, 151, 152, 158, 161, 172, 173, 198, 204, 209, 252, 255, 282, 300, 301], "model": [2, 3, 6, 10, 13, 16, 19, 21, 26, 27, 28, 36, 38, 39, 40, 45, 46, 48, 49, 52, 54, 58, 59, 60, 62, 68, 70, 72, 73, 74, 82, 93, 94, 96, 98, 100, 104, 107, 108, 109, 110, 112, 114, 117, 118, 119, 121, 122, 124, 132, 133, 134, 140, 141, 142, 143, 144, 147, 150, 155, 156, 158, 159, 165, 167, 168, 169, 177, 178, 179, 180, 181, 182, 184, 191, 193, 194, 196, 197, 199, 201, 203, 206, 208, 210, 220, 221, 225, 229, 230, 231, 232, 234, 235, 239, 241, 245, 246, 247, 248, 249, 250, 254, 264, 266, 271, 272, 274, 279, 280, 281, 286, 287, 288, 291, 293, 295, 296, 301, 302], "linear": [2, 6, 7, 11, 13, 19, 20, 23, 29, 45, 48, 49, 50, 52, 54, 73, 80, 94, 99, 104, 107, 109, 121, 122, 123, 129, 134, 136, 138, 141, 142, 143, 148, 152, 158, 159, 164, 168, 172, 175, 179, 180, 181, 183, 188, 193, 197, 199, 200, 204, 205, 208, 209, 216, 220, 221, 223, 224, 226, 228, 229, 231, 234, 236, 241, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 262, 264, 266, 272, 274, 280, 281, 285, 288, 302], "loss": [2, 3, 6, 7, 11, 13, 16, 19, 20, 21, 23, 36, 42, 45, 48, 54, 70, 72, 73, 74, 77, 78, 80, 82, 94, 96, 99, 103, 108, 113, 114, 122, 123, 133, 134, 135, 136, 141, 143, 150, 160, 161, 169, 172, 175, 178, 180, 181, 183, 187, 188, 194, 204, 205, 226, 228, 234, 250, 255, 256, 270, 281, 291, 302], "target": [2, 3, 5, 7, 16, 19, 22, 23, 26, 27, 41, 49, 52, 55, 61, 80, 97, 104, 106, 107, 108, 111, 113, 114, 119, 134, 142, 150, 151, 158, 167, 169, 170, 172, 173, 176, 178, 179, 180, 181, 183, 188, 190, 191, 193, 198, 200, 204, 205, 224, 226, 228, 229, 230, 231, 240, 255, 256, 262, 267, 269, 270, 291, 300], "mseloss": [2, 14, 41, 52, 73, 122, 148, 179, 246, 247, 302], "grad_output": [2, 10, 12], "ones_lik": [2, 104], "create_graph": [2, 145], "gradient_penalti": 2, "dim": [2, 5, 6, 13, 25, 37, 97, 99, 104, 134, 136, 172, 174, 176, 179, 180, 181, 188, 190, 201, 217, 218, 226, 228, 240, 254, 256, 298, 300], "add": [2, 4, 5, 7, 8, 10, 12, 14, 16, 17, 18, 20, 23, 25, 26, 27, 41, 49, 52, 56, 80, 91, 94, 101, 104, 105, 107, 108, 111, 119, 126, 133, 134, 135, 138, 142, 143, 144, 150, 151, 156, 157, 158, 159, 167, 169, 170, 173, 176, 177, 179, 180, 181, 183, 187, 193, 196, 197, 199, 201, 204, 205, 208, 210, 216, 218, 229, 231, 232, 234, 240, 247, 250, 252, 253, 267, 269, 273, 287, 295, 299], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 5, 6, 7, 18, 24, 36, 52, 58, 66, 88, 91, 94, 96, 97, 101, 103, 104, 105, 110, 123, 129, 133, 148, 150, 151, 155, 157, 158, 175, 180, 181, 182, 187, 190, 191, 193, 196, 197, 198, 200, 207, 218, 224, 226, 229, 239, 240, 247, 253, 255, 256, 264, 283, 292, 293, 295, 296, 299, 300], "link": [2, 5, 6, 7, 12, 14, 26, 27, 40, 42, 58, 88, 100, 114, 116, 126, 150, 155, 218, 220, 240, 255, 298], "ad": [2, 6, 7, 12, 17, 22, 26, 27, 28, 29, 36, 55, 56, 59, 80, 89, 91, 96, 99, 101, 103, 104, 105, 108, 110, 123, 134, 135, 141, 142, 143, 148, 151, 155, 159, 164, 167, 173, 178, 182, 183, 193, 197, 198, 228, 232, 255, 256, 270, 280, 282, 285, 296], "subclass": [2, 6, 7, 16, 20, 29, 37, 38, 72, 96, 99, 101, 114, 122, 133, 136, 140, 151, 174, 180, 188, 198, 218, 221, 234, 254, 265, 266, 271, 279, 287, 295, 300], "encod": [2, 16, 45, 46, 52, 54, 82, 101, 109, 112, 135, 140, 151, 168, 177, 181, 190, 199, 204, 208, 209, 223, 231, 234, 266, 298], "method": [2, 4, 5, 6, 7, 10, 12, 13, 14, 16, 19, 20, 23, 25, 27, 29, 36, 37, 43, 45, 49, 52, 55, 57, 61, 80, 89, 91, 96, 97, 99, 101, 103, 104, 106, 108, 110, 114, 115, 123, 132, 133, 137, 140, 141, 145, 148, 151, 152, 155, 156, 157, 158, 159, 160, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 188, 190, 191, 193, 194, 196, 199, 205, 206, 216, 220, 224, 226, 228, 230, 231, 234, 246, 247, 256, 264, 265, 266, 269, 281, 282, 283, 288, 298, 301], "forward": [2, 3, 5, 10, 12, 13, 14, 16, 17, 19, 23, 26, 27, 29, 36, 37, 42, 48, 49, 50, 52, 55, 58, 62, 68, 69, 70, 73, 77, 78, 82, 91, 94, 96, 99, 101, 104, 106, 107, 108, 109, 111, 114, 115, 119, 122, 123, 129, 133, 134, 135, 138, 139, 141, 144, 145, 146, 148, 150, 156, 164, 167, 168, 169, 172, 174, 175, 178, 179, 180, 181, 183, 184, 187, 188, 190, 191, 193, 194, 197, 200, 204, 205, 206, 209, 220, 223, 226, 228, 229, 240, 244, 245, 246, 247, 248, 249, 252, 253, 254, 255, 256, 262, 264, 266, 269, 270, 273, 274, 283, 298, 300, 302], "detail": [2, 4, 6, 7, 10, 12, 14, 17, 18, 19, 24, 26, 27, 29, 38, 41, 48, 49, 50, 58, 59, 80, 88, 89, 91, 94, 101, 104, 105, 115, 119, 134, 136, 138, 140, 142, 144, 146, 148, 156, 158, 164, 167, 175, 181, 182, 187, 188, 191, 193, 194, 197, 200, 201, 203, 209, 216, 217, 218, 219, 224, 226, 228, 229, 232, 239, 241, 244, 248, 252, 253, 254, 255, 262, 264, 265, 266, 267, 270, 272, 282, 283, 293, 298], "namespac": [2, 4, 7, 10, 12, 26, 27, 37, 114, 119, 152, 173, 191, 200, 209, 221, 300], "inherit": [2, 13, 17, 26, 42, 57, 91, 99, 104, 105, 108, 157, 160, 177, 190, 198, 203, 218, 221, 223, 229, 230, 250, 298], "linearfunct": 2, "public": [2, 10, 12, 17, 136, 173], "static": [2, 4, 10, 12, 16, 25, 96, 133, 152, 155, 156, 173, 193, 194, 204, 206, 208, 209, 225, 226, 228, 229, 230, 231, 256, 283], "option": [2, 4, 6, 7, 10, 12, 13, 21, 27, 40, 49, 51, 53, 57, 59, 88, 94, 96, 97, 100, 101, 104, 106, 119, 121, 132, 133, 136, 137, 140, 146, 151, 153, 158, 161, 170, 172, 174, 176, 190, 191, 193, 194, 203, 205, 206, 208, 209, 226, 228, 229, 230, 231, 245, 250, 252, 253, 266, 267, 273, 283, 287, 291, 292, 293, 296, 297, 299], "autogradcontext": [2, 10, 12], "ctx": [2, 4, 6, 10, 12, 22, 145, 245], "save_for_backward": [2, 4, 6, 145], "mm": [2, 6, 152, 209, 210, 226, 240, 241], "t": [2, 5, 6, 7, 8, 10, 12, 13, 15, 16, 17, 18, 20, 23, 25, 26, 27, 29, 36, 38, 40, 41, 45, 48, 49, 52, 56, 58, 59, 61, 66, 73, 80, 94, 96, 97, 99, 101, 104, 106, 107, 108, 110, 111, 113, 114, 116, 119, 122, 123, 129, 134, 135, 139, 145, 151, 152, 153, 155, 157, 158, 159, 160, 161, 164, 167, 169, 170, 174, 175, 176, 177, 178, 179, 181, 182, 183, 188, 190, 191, 193, 194, 196, 199, 200, 201, 203, 204, 205, 206, 208, 209, 216, 217, 218, 220, 223, 226, 228, 231, 234, 239, 240, 243, 244, 250, 252, 254, 262, 264, 266, 267, 269, 282, 283, 284, 285, 286, 294, 295, 296, 298, 299, 300, 301], "unsqueez": [2, 16, 52, 73, 97, 104, 122, 151, 164, 169, 176, 179, 181, 188, 240], "expand_a": [2, 23, 205, 226, 228], "tensor_list": [2, 10, 12, 150], "save": [2, 4, 5, 7, 13, 14, 23, 24, 27, 36, 37, 38, 39, 40, 41, 45, 46, 49, 54, 55, 56, 58, 80, 94, 103, 105, 106, 124, 129, 133, 134, 136, 138, 140, 144, 152, 158, 159, 172, 174, 175, 179, 180, 181, 183, 184, 187, 190, 194, 203, 204, 205, 209, 223, 235, 240, 253, 255, 256, 264, 269, 270, 271, 272, 273, 281, 282, 283, 285, 286, 287, 288, 293, 297, 300], "get_saved_vari": 2, "grad_input": [2, 145], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 14, 17, 20, 24, 26, 28, 29, 49, 50, 58, 80, 91, 107, 108, 111, 113, 114, 119, 126, 133, 134, 148, 167, 172, 173, 174, 177, 178, 179, 181, 183, 187, 201, 223, 230, 231, 232, 234, 245, 249, 264, 280], "appli": [2, 3, 5, 6, 7, 10, 11, 12, 16, 17, 20, 23, 27, 29, 36, 37, 46, 57, 58, 73, 88, 91, 96, 99, 101, 104, 106, 108, 122, 133, 134, 136, 141, 143, 144, 145, 148, 150, 153, 156, 159, 160, 161, 164, 167, 168, 169, 172, 174, 177, 179, 180, 181, 183, 185, 190, 193, 194, 196, 197, 198, 199, 201, 203, 204, 208, 209, 216, 217, 221, 228, 234, 236, 239, 241, 243, 247, 248, 249, 250, 253, 255, 264, 265, 280, 283, 287, 288, 291, 292, 295, 297, 299], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 5, 6, 7, 12, 13, 16, 21, 23, 26, 27, 36, 37, 38, 41, 42, 48, 55, 58, 73, 82, 94, 96, 97, 99, 101, 104, 106, 107, 110, 114, 122, 123, 129, 133, 139, 141, 144, 150, 151, 155, 157, 170, 173, 179, 180, 181, 182, 184, 187, 188, 190, 193, 197, 201, 204, 205, 221, 226, 228, 231, 246, 247, 250, 255, 256, 267, 280, 282, 283, 285, 287, 288, 298], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 11, 14, 20, 22, 27, 36, 58, 89, 91, 96, 101, 104, 106, 108, 110, 114, 126, 140, 143, 147, 148, 153, 161, 168, 177, 178, 180, 182, 183, 193, 194, 196, 199, 207, 216, 234, 239, 252, 262, 267, 270, 272, 273, 280, 298, 301], "todoubl": 2, "On": [2, 5, 6, 7, 10, 23, 25, 26, 27, 100, 104, 114, 129, 135, 148, 150, 152, 161, 168, 174, 179, 180, 191, 194, 197, 198, 199, 225, 234, 237, 254, 262, 266, 283, 301], "easiest": [2, 6, 11, 27, 40, 100, 114, 133, 159, 175, 177, 193, 264, 283], "your": [2, 4, 7, 8, 10, 11, 13, 14, 17, 18, 20, 21, 22, 23, 26, 27, 29, 36, 37, 40, 42, 48, 49, 50, 52, 55, 56, 57, 59, 60, 61, 72, 80, 82, 88, 94, 96, 97, 100, 101, 104, 105, 108, 110, 111, 113, 115, 116, 118, 119, 122, 123, 124, 126, 133, 134, 135, 136, 139, 141, 144, 145, 146, 147, 148, 150, 151, 152, 155, 157, 159, 160, 161, 165, 167, 168, 170, 173, 174, 175, 176, 177, 180, 181, 182, 185, 187, 188, 190, 191, 193, 194, 196, 197, 199, 203, 209, 210, 211, 220, 225, 226, 228, 229, 230, 231, 232, 234, 236, 239, 240, 243, 248, 250, 253, 265, 266, 267, 270, 273, 281, 282, 284, 285, 286, 287, 288, 295, 296, 297, 298], "tabl": [2, 19, 25, 113, 121, 133, 135, 150, 152, 158, 180, 181, 187, 193, 194, 254, 267, 273], "set_data": 2, "data": [2, 3, 4, 6, 8, 13, 14, 16, 19, 20, 22, 24, 25, 26, 27, 28, 36, 37, 40, 41, 45, 46, 48, 51, 52, 53, 54, 57, 66, 73, 77, 78, 80, 82, 88, 91, 96, 97, 99, 103, 105, 106, 107, 108, 109, 110, 111, 113, 116, 122, 123, 132, 133, 139, 140, 146, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 164, 165, 167, 169, 170, 172, 176, 178, 179, 180, 181, 191, 196, 197, 198, 199, 205, 206, 207, 208, 209, 217, 219, 220, 221, 224, 225, 226, 228, 229, 230, 231, 234, 239, 240, 241, 247, 248, 249, 250, 253, 254, 255, 256, 262, 265, 266, 267, 270, 272, 273, 274, 280, 281, 287, 288, 291, 297, 298, 302], "output_nr": 2, "after": [2, 3, 6, 7, 11, 12, 14, 16, 17, 18, 20, 22, 23, 24, 25, 27, 28, 29, 36, 37, 38, 45, 48, 50, 52, 55, 58, 59, 94, 96, 97, 101, 106, 107, 108, 111, 113, 114, 116, 123, 133, 135, 136, 137, 138, 141, 142, 143, 144, 147, 148, 150, 151, 152, 153, 158, 160, 161, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 180, 181, 183, 185, 187, 188, 193, 194, 196, 198, 200, 204, 205, 206, 209, 223, 224, 226, 228, 229, 230, 231, 232, 234, 236, 237, 240, 247, 264, 266, 267, 270, 272, 273, 280, 281, 283, 293, 295, 297, 302], "file": [2, 4, 6, 7, 10, 11, 12, 17, 21, 23, 24, 25, 26, 27, 44, 53, 56, 57, 58, 61, 75, 79, 82, 88, 89, 92, 94, 96, 97, 102, 110, 112, 114, 119, 120, 121, 124, 126, 135, 139, 141, 142, 148, 150, 152, 158, 167, 170, 173, 176, 184, 187, 190, 193, 198, 201, 204, 205, 207, 209, 210, 211, 219, 220, 221, 226, 228, 232, 235, 240, 241, 247, 248, 249, 253, 255, 256, 266, 267, 272, 273, 279, 281, 282, 284, 287, 290, 292, 293, 297, 298, 300, 301], "bug": [2, 6, 12, 27, 103, 158, 199, 203, 210, 220, 298], "report": [2, 12, 20, 27, 58, 80, 94, 96, 99, 101, 105, 107, 133, 137, 152, 158, 170, 179, 181, 182, 203, 210, 220, 234, 273, 295], "github": [2, 3, 5, 7, 12, 13, 19, 23, 26, 27, 28, 55, 59, 60, 61, 66, 94, 119, 133, 134, 135, 137, 138, 144, 146, 147, 148, 150, 152, 153, 155, 156, 157, 160, 161, 169, 172, 173, 179, 180, 181, 187, 190, 198, 200, 201, 205, 207, 208, 210, 220, 239, 240, 241, 247, 249, 253, 255, 256, 265, 298], "issu": [2, 5, 6, 7, 10, 11, 23, 24, 26, 27, 57, 94, 135, 136, 147, 152, 153, 156, 157, 158, 161, 169, 170, 176, 187, 191, 193, 194, 199, 203, 207, 208, 209, 210, 216, 218, 220, 221, 223, 229, 232, 239, 241, 247, 248, 262, 266, 268, 280, 298], "fix": [2, 16, 20, 24, 27, 28, 36, 55, 56, 57, 58, 106, 139, 175, 178, 179, 208, 234, 262, 282, 283, 296], "soon": [2, 6, 58, 161, 167, 228, 246, 255], "overview": [2, 6, 7, 13, 59, 61, 99, 132, 133, 141, 142, 148, 150, 156, 173, 177, 179, 180, 181, 183, 187, 199, 216, 217, 219, 225, 235, 241, 243], "alwai": [2, 3, 4, 5, 7, 11, 16, 19, 22, 23, 26, 27, 46, 58, 99, 101, 105, 111, 113, 114, 136, 137, 138, 139, 144, 150, 151, 152, 170, 176, 177, 178, 179, 181, 193, 194, 198, 209, 216, 220, 223, 241, 296], "problem": [2, 5, 7, 13, 16, 17, 22, 26, 27, 55, 57, 58, 107, 109, 113, 114, 122, 129, 140, 151, 156, 158, 159, 168, 175, 177, 179, 181, 187, 191, 194, 196, 216, 218, 241, 267, 268, 272, 283, 298, 301], "question": [2, 5, 6, 7, 10, 12, 20, 26, 27, 55, 82, 97, 135, 150, 152, 157, 183, 194, 206, 217, 231, 234, 241, 267], "forum": [2, 5, 6, 7, 26, 27, 49, 156, 157, 206, 241], "touch": [2, 5, 7, 16, 26, 27, 241], "view": [3, 12, 13, 16, 17, 19, 23, 29, 56, 59, 61, 62, 66, 88, 94, 97, 103, 104, 107, 110, 113, 114, 116, 122, 123, 134, 137, 138, 140, 146, 147, 148, 150, 156, 158, 164, 172, 173, 179, 180, 181, 182, 183, 188, 201, 203, 204, 205, 206, 221, 226, 228, 240, 244, 247, 248, 249, 252, 262, 265, 274, 281, 299], "edit": [3, 7, 11, 13, 14, 19, 23, 24, 54, 56, 66, 137, 138, 148, 150, 152, 157, 158, 172, 173, 175, 176, 179, 180, 181, 201, 205, 208, 247, 249], "code": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 36, 37, 38, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 59, 61, 62, 63, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 89, 91, 94, 96, 97, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 118, 119, 121, 122, 123, 126, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 167, 168, 169, 170, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 207, 208, 209, 217, 218, 219, 220, 221, 223, 226, 228, 229, 230, 231, 232, 234, 237, 239, 241, 244, 245, 247, 248, 249, 250, 252, 253, 255, 256, 264, 265, 266, 267, 268, 269, 270, 272, 273, 274, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 294, 295, 296, 297, 298, 299, 300, 302], "prerequisit": [3, 4, 18, 59, 61, 62, 109, 126, 135, 137, 138, 143, 146, 147, 148, 150, 151, 172, 173, 179, 180, 181, 190, 194, 199, 201, 207, 226, 232, 246, 247, 249], "frontend": [3, 4, 12, 90, 92, 133, 197, 210, 221, 225, 229, 255, 256, 291], "semant": [3, 4, 7, 26, 55, 73, 104, 109, 111, 112, 122, 136, 150, 152, 193, 194, 218, 219, 221, 225, 235, 239], "11": [3, 6, 7, 13, 20, 22, 27, 38, 73, 94, 121, 134, 135, 151, 155, 176, 181, 190, 191, 194, 248, 249, 252, 254, 267, 273, 300], "nvidia": [3, 6, 20, 56, 144, 150, 152, 161, 191, 234, 249, 266, 283, 287], "toolkit": [3, 27, 109, 156, 160, 170, 193, 281], "releas": [3, 4, 5, 7, 12, 20, 24, 27, 56, 116, 121, 123, 134, 135, 139, 156, 167, 180, 182, 187, 229, 234, 245, 246, 254, 255, 256, 273, 283, 288, 298], "greatli": [3, 7, 55, 96, 114, 178], "reduc": [3, 7, 11, 13, 20, 23, 38, 41, 48, 62, 99, 101, 106, 121, 134, 135, 136, 138, 140, 141, 144, 146, 148, 150, 152, 159, 160, 161, 167, 170, 174, 176, 179, 181, 187, 190, 191, 194, 196, 197, 201, 209, 210, 229, 234, 237, 248, 253, 264, 266, 267, 270, 271, 272, 287, 290, 292, 293, 301, 302], "cpu": [3, 4, 6, 7, 10, 12, 13, 16, 17, 22, 23, 24, 27, 37, 42, 45, 48, 49, 54, 55, 58, 68, 78, 80, 88, 89, 94, 97, 104, 106, 108, 114, 116, 121, 122, 129, 133, 134, 136, 137, 138, 141, 148, 150, 151, 152, 161, 164, 168, 172, 173, 175, 176, 177, 179, 180, 181, 182, 183, 184, 187, 190, 194, 198, 203, 204, 205, 207, 209, 210, 224, 225, 226, 228, 229, 236, 240, 245, 246, 250, 252, 254, 266, 267, 268, 270, 272, 273, 280, 287, 298], "overhead": [3, 6, 7, 12, 20, 62, 88, 121, 134, 135, 138, 143, 148, 159, 161, 170, 176, 179, 181, 182, 187, 191, 196, 197, 199, 203, 208, 210, 221, 229, 234, 246, 267, 273, 283, 294, 301], "increas": [3, 6, 7, 22, 23, 24, 28, 41, 42, 49, 80, 88, 89, 94, 97, 106, 114, 134, 135, 136, 138, 140, 141, 142, 146, 156, 167, 170, 176, 187, 194, 205, 208, 221, 226, 248, 254, 265, 266, 267, 270, 282, 283, 286, 287, 288, 301], "mostli": [3, 12, 23, 91, 96, 106, 141, 181, 183, 200, 229], "util": [3, 4, 6, 12, 17, 23, 26, 27, 28, 29, 38, 42, 49, 55, 57, 59, 61, 88, 94, 99, 103, 105, 114, 121, 122, 123, 129, 133, 134, 135, 136, 138, 141, 143, 150, 152, 155, 156, 158, 159, 161, 168, 170, 172, 173, 175, 176, 177, 180, 182, 183, 187, 188, 190, 191, 196, 197, 198, 205, 207, 209, 221, 224, 226, 228, 229, 230, 231, 234, 236, 240, 243, 246, 247, 250, 252, 253, 255, 256, 262, 265, 266, 281, 282, 287, 290, 291, 293, 295, 297, 301], "deploy": [3, 5, 29, 106, 140, 197, 210, 224, 229, 255, 264, 270, 287, 297], "import": [3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 20, 22, 23, 24, 25, 26, 27, 28, 29, 36, 38, 48, 49, 52, 55, 56, 57, 58, 59, 73, 80, 82, 88, 91, 96, 97, 99, 101, 103, 104, 106, 107, 108, 111, 114, 118, 119, 122, 123, 126, 134, 135, 136, 137, 138, 143, 144, 145, 148, 150, 151, 155, 156, 157, 164, 167, 169, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 187, 188, 191, 193, 194, 196, 197, 200, 201, 203, 204, 205, 209, 210, 211, 216, 218, 219, 220, 221, 223, 224, 229, 230, 232, 234, 236, 240, 241, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 262, 264, 267, 270, 280, 281, 282, 283, 288, 291, 293, 298, 299, 301, 302], "appear": [3, 13, 16, 26, 29, 113, 193, 262, 270], "won": [3, 6, 12, 48, 114, 122, 134, 145, 155, 164, 169, 177, 193, 194, 220, 264, 266], "heart": [3, 55, 254], "veri": [3, 4, 5, 6, 7, 10, 16, 17, 22, 23, 25, 26, 27, 28, 29, 45, 50, 52, 54, 55, 70, 80, 82, 91, 97, 101, 108, 110, 114, 122, 129, 134, 138, 139, 141, 167, 168, 175, 178, 179, 181, 182, 183, 185, 187, 188, 194, 196, 198, 205, 216, 218, 223, 228, 262, 270, 273, 282, 283, 296], "time": [3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 16, 17, 18, 20, 23, 25, 27, 28, 29, 36, 37, 38, 40, 41, 42, 43, 45, 46, 48, 49, 50, 52, 54, 55, 56, 57, 58, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 89, 91, 94, 96, 97, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 122, 123, 126, 129, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 148, 150, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 175, 177, 178, 179, 180, 181, 182, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 203, 204, 205, 207, 208, 209, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 234, 237, 239, 240, 244, 245, 246, 247, 252, 254, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 280, 281, 283, 284, 285, 286, 287, 294, 295, 296, 297, 299, 300], "tool": [3, 7, 10, 16, 25, 29, 57, 88, 94, 96, 97, 101, 105, 107, 122, 134, 148, 150, 151, 158, 170, 179, 182, 187, 188, 190, 197, 199, 203, 205, 223, 248, 262, 272, 295, 301], "compil": [3, 5, 7, 8, 10, 12, 18, 20, 25, 26, 29, 91, 107, 133, 150, 157, 184, 193, 208, 210, 221, 225, 229, 230, 241, 250, 255, 267, 271, 273, 282, 283, 287, 290, 291, 298, 300], "boost": [3, 106, 108, 158, 159, 196, 208, 220, 225, 229, 241, 250, 255, 256, 283], "would": [3, 4, 5, 6, 7, 10, 16, 18, 19, 22, 23, 24, 25, 26, 27, 29, 36, 48, 55, 59, 61, 80, 94, 96, 99, 101, 104, 106, 107, 110, 113, 114, 119, 123, 129, 134, 137, 138, 139, 140, 141, 142, 144, 145, 148, 151, 152, 156, 157, 158, 159, 161, 167, 168, 169, 173, 175, 176, 177, 178, 179, 180, 181, 183, 190, 191, 193, 194, 196, 197, 198, 199, 203, 205, 207, 209, 218, 219, 225, 228, 230, 239, 241, 247, 249, 250, 262, 280, 283, 292, 293, 297, 301], "demonstr": [3, 4, 11, 16, 18, 19, 20, 24, 25, 26, 29, 43, 48, 56, 63, 82, 88, 91, 97, 99, 105, 115, 119, 132, 133, 134, 135, 137, 138, 139, 144, 145, 148, 152, 153, 155, 156, 157, 158, 164, 170, 172, 173, 177, 179, 180, 181, 182, 187, 190, 193, 194, 197, 199, 200, 201, 203, 207, 208, 209, 210, 218, 220, 221, 223, 224, 228, 232, 234, 236, 237, 244, 246, 247, 249, 252, 253, 254, 256, 264, 266, 267, 270, 272, 273, 286, 287, 292, 294, 295, 296, 297, 299, 301, 302], "mnist": [3, 7, 38, 49, 52, 80, 99, 103, 105, 132, 133, 134, 140, 144, 150, 153, 169, 180, 185, 188, 256, 269, 287], "libtorch": [3, 4, 7, 26, 27, 240, 255, 287, 300], "counterpart": [3, 20, 158, 193, 223, 234, 249, 255, 283], "syntax": [3, 27, 29, 54, 90, 92, 93, 123, 133, 267], "step": [3, 4, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 27, 36, 40, 41, 48, 49, 52, 55, 58, 66, 80, 88, 91, 94, 96, 99, 105, 106, 107, 108, 114, 116, 119, 132, 133, 134, 135, 136, 141, 142, 143, 144, 146, 148, 150, 151, 152, 158, 160, 164, 168, 170, 175, 178, 179, 180, 181, 182, 183, 184, 188, 190, 191, 193, 194, 196, 197, 200, 203, 204, 205, 207, 208, 209, 211, 220, 221, 223, 224, 226, 228, 229, 230, 231, 234, 236, 240, 243, 244, 246, 247, 250, 252, 255, 256, 262, 264, 266, 280, 281, 283, 291, 297, 302], "depict": [3, 103, 194], "chunk": [3, 6, 61, 150, 167, 170, 172, 201], "batch": [3, 6, 7, 19, 20, 23, 24, 25, 38, 41, 42, 43, 49, 50, 52, 55, 57, 58, 59, 61, 62, 80, 88, 94, 96, 97, 99, 103, 104, 105, 106, 111, 114, 123, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 146, 150, 151, 152, 153, 160, 161, 164, 167, 169, 170, 172, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 190, 191, 194, 197, 198, 199, 201, 204, 205, 208, 209, 218, 221, 225, 228, 234, 239, 256, 266, 267], "data_load": [3, 7, 23, 205, 226, 228, 229, 230], "optim": [3, 6, 7, 10, 12, 13, 14, 16, 17, 19, 20, 22, 23, 24, 25, 27, 29, 36, 37, 38, 39, 40, 43, 45, 46, 48, 52, 55, 59, 61, 66, 70, 71, 72, 75, 88, 91, 94, 96, 99, 103, 106, 107, 115, 119, 123, 129, 133, 134, 135, 138, 143, 144, 146, 148, 150, 151, 153, 156, 157, 158, 160, 161, 168, 169, 170, 174, 175, 176, 177, 178, 179, 180, 183, 184, 187, 188, 190, 191, 193, 196, 198, 199, 205, 208, 209, 211, 216, 221, 223, 224, 225, 228, 229, 230, 234, 237, 240, 241, 246, 247, 252, 253, 255, 256, 264, 266, 267, 272, 280, 284, 287, 288, 290, 291, 292, 295, 297, 298, 300], "zero_grad": [3, 7, 23, 41, 49, 52, 73, 94, 96, 107, 114, 122, 134, 135, 136, 148, 150, 151, 167, 175, 179, 181, 188, 194, 228, 246, 247, 255, 256, 286, 291], "nll_loss": [3, 134, 150, 180, 256], "updat": [3, 7, 11, 12, 13, 14, 15, 16, 19, 20, 23, 25, 27, 41, 48, 49, 55, 58, 73, 74, 88, 96, 106, 107, 108, 113, 114, 115, 122, 123, 133, 134, 135, 136, 140, 144, 148, 151, 152, 161, 167, 177, 178, 180, 181, 187, 194, 199, 205, 209, 216, 226, 228, 229, 231, 232, 234, 241, 243, 247, 250, 252, 253, 256, 264, 266, 280, 285, 302], "captur": [3, 5, 7, 26, 27, 29, 58, 96, 115, 116, 118, 133, 134, 155, 190, 191, 193, 194, 199, 203, 210, 226, 228, 231, 267, 298], "But": [3, 7, 10, 12, 24, 49, 50, 58, 80, 97, 104, 110, 113, 139, 148, 161, 167, 168, 169, 178, 193, 196, 198, 205, 209, 216, 219, 231, 239, 253, 256, 264, 267], "slightli": [3, 6, 16, 27, 135, 150, 151, 170, 176, 183, 219, 267, 283], "prealloc": 3, "reus": [3, 12, 70, 114, 122, 145, 152, 155, 168, 178, 194, 196, 197, 209, 283, 287, 288, 301], "tensoropt": [3, 210], "floatcuda": 3, "dtype": [3, 4, 10, 12, 16, 17, 18, 104, 107, 110, 136, 145, 151, 152, 164, 172, 193, 200, 201, 207, 209, 210, 219, 226, 229, 230, 231, 240, 252, 253, 255, 264, 266, 280, 291, 293], "longcuda": 3, "klong": 3, "zero": [3, 7, 13, 20, 23, 36, 41, 46, 49, 52, 55, 73, 94, 96, 97, 99, 101, 104, 105, 107, 113, 114, 122, 134, 135, 142, 150, 151, 164, 168, 170, 173, 174, 175, 179, 181, 183, 188, 204, 209, 216, 218, 219, 231, 232, 234, 256, 266, 271, 273, 279, 282, 283, 287, 298, 302], "ktrainbatchs": 3, "28": [3, 7, 20, 38, 73, 94, 101, 103, 114, 151, 153, 169, 188, 196, 234, 252, 254, 256, 267, 282], "copy_": [3, 45, 54, 121, 136, 158, 179, 272, 280], "training_step": 3, "call": [3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 20, 24, 25, 26, 27, 28, 29, 36, 37, 38, 41, 43, 45, 46, 48, 49, 50, 52, 55, 57, 58, 59, 61, 72, 73, 80, 82, 91, 94, 96, 97, 99, 101, 103, 104, 106, 107, 108, 110, 113, 114, 119, 121, 122, 123, 132, 133, 134, 136, 137, 138, 139, 140, 142, 143, 148, 150, 151, 152, 155, 156, 157, 158, 160, 161, 164, 167, 168, 169, 170, 172, 173, 174, 175, 177, 179, 180, 181, 182, 183, 185, 187, 190, 193, 194, 196, 197, 203, 205, 206, 209, 210, 223, 228, 230, 232, 234, 239, 240, 241, 244, 246, 247, 248, 250, 252, 253, 254, 264, 266, 267, 268, 269, 270, 272, 273, 281, 282, 283, 286, 293, 294, 295, 296, 298, 301], "void": [3, 4, 6, 7, 17, 26, 27, 158, 173, 210, 220, 252, 267, 273, 282], "net": [3, 7, 23, 49, 50, 52, 55, 58, 80, 91, 94, 99, 103, 104, 106, 134, 150, 164, 176, 180, 187, 188, 256, 269], "stream": [3, 17, 88, 104, 107, 136, 170, 176, 210, 252, 255], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 25, 76, 79, 121, 187, 191, 196, 197, 221, 237, 252, 254, 267, 273, 283], "side": [3, 24, 57, 58, 88, 113, 153, 161, 167, 169, 170, 173, 178, 179, 187, 262], "prepar": [3, 13, 20, 23, 29, 49, 57, 58, 73, 74, 103, 111, 122, 123, 152, 153, 167, 172, 173, 177, 179, 204, 209, 223, 224, 225, 229, 230, 231, 234, 245, 253, 264, 273, 287], "cach": [3, 143, 152, 158, 187, 196, 197, 199, 208, 209, 220, 283, 287, 296, 301], "cubla": [3, 267], "cudnn": [3, 6, 141, 144, 151, 161, 164, 266], "warmupstream": 3, "int": [3, 4, 5, 6, 7, 11, 13, 22, 23, 26, 27, 57, 59, 61, 94, 107, 134, 135, 137, 148, 150, 152, 158, 172, 173, 179, 180, 181, 187, 191, 193, 198, 201, 203, 204, 209, 220, 240, 249, 255, 300, 301], "num_warmup_it": 3, "success": [3, 7, 16, 27, 80, 110, 140, 158, 183, 240, 262], "replac": [3, 4, 7, 23, 28, 48, 61, 63, 97, 108, 114, 115, 119, 121, 129, 133, 134, 136, 150, 152, 155, 174, 175, 181, 183, 187, 193, 197, 198, 201, 208, 218, 221, 238, 253, 255, 267, 270, 298], "replai": [3, 16, 29, 160], "spin": [3, 99, 196], "ordinari": 3, "epoch": [3, 7, 11, 19, 23, 38, 41, 42, 49, 58, 59, 61, 94, 99, 103, 106, 107, 108, 114, 123, 129, 134, 135, 136, 140, 141, 150, 161, 167, 175, 177, 181, 188, 198, 228, 256, 281], "59584": 3, "60000": [3, 150], "3921": 3, "test": [3, 10, 23, 24, 26, 27, 28, 38, 41, 42, 55, 89, 91, 97, 99, 105, 106, 108, 109, 115, 119, 126, 133, 134, 135, 141, 150, 151, 153, 155, 158, 161, 170, 176, 180, 183, 185, 188, 191, 193, 203, 204, 205, 206, 208, 225, 226, 229, 239, 252, 254, 255, 256, 267, 270, 300], "2051": 3, "accuraci": [3, 11, 20, 23, 24, 28, 42, 49, 99, 105, 106, 114, 132, 133, 134, 135, 136, 140, 164, 174, 175, 176, 180, 185, 188, 190, 197, 205, 209, 223, 224, 228, 229, 234, 253, 254, 264, 266, 281, 286, 287], "938": [3, 7, 161], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 161], "968": [3, 94], "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 7, 13, 23, 27, 38, 40, 49, 55, 73, 91, 94, 97, 99, 101, 104, 113, 115, 119, 121, 122, 123, 144, 145, 150, 152, 158, 161, 173, 174, 176, 179, 181, 190, 191, 193, 196, 197, 199, 208, 209, 211, 226, 228, 234, 249, 252, 253, 254, 256, 264, 266, 283, 295, 296, 297, 300, 301], "0511": [3, 209], "0704": 3, "977": [3, 161, 254], "7": [3, 6, 7, 20, 22, 23, 26, 27, 38, 40, 49, 57, 91, 94, 107, 119, 121, 129, 134, 135, 150, 151, 160, 161, 175, 176, 190, 191, 194, 197, 201, 207, 208, 211, 220, 229, 230, 236, 240, 241, 243, 244, 249, 252, 253, 254, 256, 264, 266, 283, 294, 298], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": [3, 196], "9": [3, 4, 6, 7, 20, 22, 23, 27, 38, 48, 49, 55, 73, 94, 99, 113, 114, 121, 123, 151, 158, 168, 175, 176, 179, 188, 190, 194, 196, 197, 211, 234, 240, 252, 254, 255, 256, 267, 269, 273, 291], "0669": 3, "0544": 3, "984": [3, 254], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 16, 24, 36, 42, 58, 60, 96, 106, 107, 108, 109, 113, 133, 134, 141, 142, 150, 151, 167, 173, 178, 183, 191, 193, 194, 196, 203, 218, 221, 226, 231, 253, 254, 267, 270], "0m44": 3, "287": [3, 94, 197], "018": 3, "sy": [3, 22, 23, 59, 61, 97, 148, 150, 152, 173, 205, 209, 226, 228, 243, 252], "0m1": 3, "116": [3, 203, 209], "produc": [3, 5, 6, 7, 13, 26, 27, 29, 73, 106, 115, 122, 140, 143, 151, 153, 155, 157, 159, 161, 170, 177, 178, 183, 190, 193, 194, 200, 205, 206, 209, 224, 226, 228, 229, 230, 240, 247, 266, 270, 283, 288], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": 3, "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 234], "0520": 3, "0710": 3, "0935": 3, "0666": [3, 27], "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 158], "0m7": 3, "048": [3, 241], "0m0": 3, "619": 3, "gain": [3, 6, 20, 88, 187, 196, 201, 225, 230, 234], "six": [3, 177], "kind": [3, 6, 7, 23, 27, 41, 49, 52, 55, 80, 97, 105, 107, 111, 119, 123, 133, 152, 197, 226, 301], "larg": [3, 4, 6, 7, 8, 14, 18, 19, 20, 22, 27, 41, 45, 55, 66, 94, 97, 101, 103, 106, 111, 113, 114, 116, 122, 129, 132, 133, 134, 135, 137, 140, 144, 148, 150, 153, 164, 170, 172, 177, 178, 180, 181, 182, 190, 191, 194, 196, 197, 198, 201, 203, 218, 229, 234, 236, 243, 249, 254, 266, 273, 274, 283, 288], "improv": [3, 6, 7, 10, 12, 20, 23, 24, 25, 28, 41, 55, 62, 99, 104, 106, 114, 119, 132, 133, 134, 135, 136, 137, 138, 141, 144, 156, 161, 168, 175, 178, 182, 183, 190, 191, 196, 197, 199, 203, 207, 208, 209, 220, 225, 226, 230, 231, 234, 241, 243, 245, 250, 252, 253, 255, 266, 267, 281, 283, 291, 295], "due": [3, 6, 7, 20, 22, 26, 58, 88, 91, 104, 115, 119, 134, 138, 143, 148, 167, 168, 175, 180, 191, 196, 199, 203, 205, 208, 218, 224, 231, 234, 236, 244, 248, 250, 256, 270, 298, 301], "size": [3, 4, 6, 7, 10, 11, 13, 14, 16, 20, 22, 23, 24, 25, 27, 36, 37, 38, 41, 42, 46, 48, 49, 50, 52, 55, 57, 58, 61, 82, 88, 94, 97, 99, 101, 104, 105, 106, 107, 110, 111, 113, 114, 123, 129, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 150, 151, 153, 158, 159, 160, 161, 164, 167, 169, 170, 173, 175, 176, 177, 178, 179, 180, 183, 187, 190, 191, 193, 194, 197, 198, 199, 201, 203, 204, 205, 206, 207, 208, 216, 219, 221, 225, 228, 234, 246, 247, 248, 250, 253, 255, 264, 266, 267, 272, 274, 280, 282, 283, 287, 302], "larger": [3, 10, 14, 80, 88, 96, 106, 114, 118, 123, 133, 134, 135, 138, 140, 146, 156, 170, 175, 178, 181, 183, 187, 190, 191, 208, 221, 237, 246, 247, 254, 267, 288], "heavi": [3, 7, 55, 106, 110], "less": [3, 6, 7, 8, 10, 18, 23, 62, 88, 101, 106, 107, 114, 118, 129, 135, 140, 151, 155, 167, 170, 177, 178, 179, 187, 188, 191, 193, 194, 196, 199, 203, 208, 226, 249, 267, 270, 272], "impact": [3, 14, 20, 41, 94, 106, 151, 170, 179, 182, 208, 234, 265, 301, 302], "smaller": [3, 11, 41, 101, 106, 113, 114, 134, 138, 175, 177, 179, 190, 237, 267, 270, 272, 288], "nevertheless": [3, 6, 23, 27, 161, 177], "richard": 4, "zou": 4, "integr": [4, 7, 12, 16, 18, 27, 40, 94, 115, 119, 121, 133, 140, 143, 172, 187, 188, 191, 196, 197, 199, 200, 220, 225, 229, 231, 232, 240, 246, 254, 262, 265, 280, 285, 295, 301], "opcheck": [4, 18], "basic": [4, 10, 13, 17, 18, 19, 27, 28, 36, 37, 38, 41, 42, 43, 45, 46, 55, 60, 62, 63, 78, 82, 83, 86, 93, 96, 99, 100, 101, 104, 106, 109, 113, 114, 115, 116, 118, 119, 122, 133, 138, 141, 144, 158, 165, 172, 177, 182, 194, 199, 217, 221, 246, 247, 267, 281, 287, 292, 293, 297, 298], "program": [4, 5, 6, 22, 25, 26, 27, 29, 66, 101, 107, 109, 110, 113, 133, 138, 141, 157, 170, 172, 180, 191, 197, 201, 203, 211, 226, 228, 229, 231, 232, 247, 267, 283, 297, 298, 300, 301], "amd": [4, 6], "rocm": [4, 6, 187], "modif": [4, 16, 17, 23, 24, 25, 94, 107, 114, 144, 150, 174, 177, 180, 185, 188, 193, 199, 205, 282, 288, 298], "e": [4, 5, 6, 7, 8, 10, 12, 13, 18, 22, 26, 27, 29, 36, 37, 42, 48, 49, 55, 57, 58, 66, 80, 82, 91, 94, 96, 99, 101, 104, 106, 109, 113, 114, 123, 129, 133, 134, 136, 137, 138, 140, 141, 142, 145, 147, 148, 150, 153, 156, 161, 168, 169, 173, 174, 179, 181, 183, 187, 191, 193, 196, 199, 200, 205, 209, 218, 219, 221, 224, 225, 231, 236, 239, 240, 245, 249, 250, 252, 255, 267, 269, 273, 282, 283, 285, 286, 300], "g": [4, 6, 7, 8, 10, 12, 13, 16, 18, 22, 27, 29, 48, 55, 57, 58, 66, 94, 96, 99, 101, 104, 106, 108, 109, 113, 129, 133, 134, 136, 140, 141, 142, 148, 150, 152, 153, 158, 167, 169, 173, 177, 179, 181, 183, 187, 191, 193, 196, 199, 200, 205, 209, 210, 219, 224, 225, 231, 239, 240, 249, 252, 267, 273, 282, 283], "etc": [4, 8, 12, 18, 49, 50, 52, 55, 57, 74, 99, 101, 104, 107, 108, 109, 110, 114, 123, 138, 170, 174, 177, 178, 183, 193, 194, 196, 197, 199, 204, 205, 218, 224, 231, 245, 250, 254, 255, 267, 269, 283, 285], "wish": [4, 6, 7, 8, 18, 27, 58, 80, 97, 104, 123, 137, 164, 169, 180, 190, 194, 200, 209, 217, 228, 247, 266, 296], "bring": [4, 8, 97, 137, 170, 177, 187, 190, 194, 208, 219, 239, 250, 270, 273, 283, 301], "bless": 4, "path": [4, 5, 6, 7, 22, 23, 26, 27, 38, 49, 55, 56, 58, 59, 80, 88, 94, 96, 99, 104, 105, 106, 107, 114, 123, 134, 135, 152, 158, 173, 175, 190, 191, 196, 199, 203, 204, 205, 207, 208, 209, 216, 223, 224, 226, 228, 229, 231, 240, 241, 246, 247, 252, 262, 264, 267, 280, 282, 283, 284, 300, 301], "fuse": [4, 6, 20, 23, 133, 158, 175, 176, 184, 196, 197, 199, 200, 204, 205, 208, 220, 228, 234, 240, 252, 287], "subsystem": [4, 8, 18, 193, 197, 295], "def": [4, 5, 6, 7, 10, 13, 16, 22, 23, 25, 26, 27, 38, 49, 59, 61, 91, 94, 97, 107, 119, 123, 134, 135, 136, 137, 138, 143, 145, 148, 150, 152, 158, 164, 168, 172, 173, 175, 179, 180, 181, 188, 190, 197, 200, 201, 204, 205, 206, 209, 210, 211, 216, 220, 224, 226, 228, 229, 230, 231, 232, 234, 236, 243, 245, 246, 247, 249, 250, 252, 253, 254, 256, 262, 264, 267, 280, 293, 298, 302], "mymuladd": 4, "end": [4, 5, 6, 7, 10, 16, 18, 20, 23, 26, 27, 29, 36, 48, 55, 58, 60, 66, 82, 88, 91, 96, 97, 99, 101, 104, 106, 111, 114, 122, 133, 135, 137, 138, 140, 142, 144, 150, 151, 152, 158, 160, 167, 172, 175, 176, 178, 179, 181, 183, 185, 187, 188, 191, 193, 194, 196, 201, 206, 208, 209, 216, 228, 231, 232, 234, 255, 256, 264, 266, 267, 270, 273, 280, 283, 287, 297, 302], "bind": [4, 5, 7, 8, 12, 27, 133, 137, 196, 197, 207, 283, 301], "precompil": 4, "instead": [4, 5, 6, 7, 8, 10, 12, 18, 20, 23, 24, 26, 27, 29, 36, 49, 50, 55, 57, 58, 59, 69, 94, 96, 99, 104, 107, 108, 113, 114, 121, 122, 129, 134, 135, 136, 139, 140, 142, 145, 146, 150, 156, 157, 159, 160, 161, 164, 167, 173, 174, 175, 176, 179, 180, 181, 183, 185, 187, 188, 190, 191, 193, 194, 196, 197, 198, 199, 200, 208, 216, 218, 219, 220, 221, 228, 229, 230, 231, 234, 239, 240, 247, 250, 254, 257, 262, 274, 288, 294, 296, 302], "cpp_extens": [4, 6, 12, 27, 173, 267], "extens": [4, 7, 8, 17, 21, 26, 27, 58, 97, 123, 133, 136, 143, 145, 150, 190, 196, 210, 216, 218, 225, 226, 229, 254, 256, 267, 271, 279, 287, 294], "ahead": [4, 6, 26, 41, 99, 143, 167, 188, 193, 200, 247, 270, 283, 297, 300], "setuptool": [4, 12, 173, 187], "load_inlin": [4, 27, 267], "setup": [4, 6, 7, 12, 19, 23, 26, 40, 58, 59, 61, 134, 135, 140, 148, 167, 173, 181, 203, 208, 218, 219, 232, 239, 240, 246, 247, 249, 267, 282], "extension_cpp": 4, "ext_modul": [4, 6, 12, 27, 173], "cppextens": [4, 6, 12, 27, 173], "muladd": 4, "cpp": [4, 5, 6, 7, 10, 26, 27, 132, 133, 158, 220, 225, 229, 255, 282, 297, 300], "py_limited_api": 4, "min": [4, 23, 58, 88, 94, 101, 106, 129, 150, 173, 175, 177, 179, 181, 190, 193, 196, 197, 204, 226, 231, 298], "expos": [4, 6, 7, 10, 26, 27, 105, 136, 181, 194, 204, 226, 228, 232, 240, 283], "stabl": [4, 5, 24, 30, 31, 32, 33, 34, 55, 68, 80, 106, 107, 118, 122, 129, 137, 154, 176, 186, 187, 189, 204, 238, 256, 266], "limit": [4, 5, 7, 11, 12, 13, 17, 20, 23, 43, 55, 66, 80, 115, 134, 138, 141, 151, 152, 153, 160, 161, 169, 170, 183, 191, 193, 194, 197, 205, 208, 209, 226, 234, 246, 264, 267, 270, 280], "subset": [4, 16, 25, 27, 91, 94, 99, 103, 106, 118, 129, 150, 173, 175, 190, 218, 219, 254, 267, 300], "extra_compile_arg": [4, 12], "cxx": [4, 5, 7, 26, 27, 211, 240, 255], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 55, 106, 177, 187, 225], "cmdclass": [4, 6, 12, 27, 173], "build_ext": [4, 6, 12, 27, 173], "buildextens": [4, 6, 12, 27, 173], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 173], "cpython": [4, 6, 27, 282], "agnost": [4, 6, 268], "pure": [4, 5, 6, 7, 12, 27, 133, 141, 145, 153, 169, 193, 198, 210, 220, 229], "agnostic": 4, "minim": [4, 7, 12, 14, 20, 27, 41, 58, 68, 69, 72, 73, 74, 77, 78, 80, 88, 96, 108, 113, 114, 122, 133, 135, 140, 147, 152, 158, 172, 178, 191, 194, 205, 209, 216, 224, 229, 230, 234, 270, 283, 286, 288], "oldest": 4, "hexcod": 4, "throughout": [4, 14, 29, 58, 111, 150, 167, 170, 177, 188, 196, 197, 218, 280], "environ": [4, 5, 6, 7, 8, 13, 18, 21, 22, 26, 29, 40, 61, 88, 91, 94, 97, 100, 103, 116, 126, 133, 134, 135, 138, 143, 147, 148, 150, 158, 170, 172, 173, 178, 179, 180, 181, 191, 193, 194, 196, 199, 201, 203, 220, 232, 240, 241, 245, 246, 247, 248, 249, 250, 254, 262, 265, 267, 282, 283, 292, 297, 299, 300, 301, 302], "unknown": [4, 82], "behavior": [4, 10, 12, 13, 14, 16, 26, 29, 41, 55, 57, 101, 111, 114, 115, 151, 157, 158, 161, 167, 170, 191, 193, 217, 218, 226, 228, 236, 272, 283, 294, 296, 301], "runnabl": [4, 140, 158, 194, 286], "three": [4, 7, 12, 14, 16, 17, 38, 41, 57, 58, 69, 80, 88, 91, 96, 97, 103, 104, 107, 114, 119, 122, 123, 133, 137, 138, 141, 142, 161, 165, 168, 170, 173, 177, 181, 182, 183, 185, 187, 188, 194, 196, 197, 203, 208, 219, 220, 229, 230, 262, 264, 273, 300], "line": [4, 5, 6, 7, 10, 14, 18, 25, 26, 27, 55, 56, 57, 61, 62, 88, 99, 103, 104, 105, 106, 108, 114, 121, 140, 141, 142, 148, 150, 157, 158, 176, 178, 180, 181, 183, 187, 188, 191, 193, 197, 203, 204, 210, 211, 216, 218, 246, 247, 249, 255, 256, 272, 281, 283, 298, 299, 300, 301], "specif": [4, 6, 7, 10, 11, 12, 13, 20, 22, 23, 26, 27, 29, 38, 42, 49, 61, 80, 88, 94, 96, 97, 99, 101, 103, 105, 108, 109, 110, 114, 115, 116, 118, 119, 123, 126, 134, 135, 138, 141, 142, 144, 150, 151, 152, 158, 170, 172, 174, 175, 177, 179, 180, 181, 182, 183, 187, 188, 193, 194, 196, 197, 198, 199, 200, 209, 217, 220, 221, 224, 229, 230, 231, 232, 234, 240, 241, 245, 246, 247, 254, 255, 262, 265, 270, 273, 280, 282, 287, 292, 295, 297, 301, 302], "verifi": [4, 7, 24, 91, 96, 104, 119, 126, 145, 153, 155, 156, 159, 161, 174, 176, 194, 196, 197, 198, 207, 240, 254, 255, 262, 300], "met": [4, 16, 134, 170], "crash": [4, 7, 203], "wors": [4, 23], "silent": [4, 18, 158, 191, 229, 280], "incorrect": [4, 18, 58, 96, 99, 139, 145, 170, 191], "avoid": [4, 6, 19, 49, 94, 103, 106, 134, 135, 136, 138, 144, 148, 150, 161, 164, 167, 177, 179, 191, 193, 197, 207, 208, 216, 217, 221, 225, 232, 234, 236, 246, 266, 267, 270, 272, 273, 280, 292, 301], "unstabl": 4, "libtorch_python": 4, "particular": [4, 5, 6, 7, 10, 13, 27, 38, 49, 57, 88, 89, 94, 96, 97, 99, 101, 113, 138, 140, 141, 143, 150, 151, 153, 164, 169, 172, 180, 190, 193, 198, 199, 200, 216, 217, 219, 221, 272, 283, 292], "aten": [4, 6, 10, 12, 17, 27, 119, 121, 158, 187, 193, 197, 205, 209, 210, 220, 224, 226, 228, 229, 230, 252, 254, 255, 262, 273, 280, 282], "strongli": [4, 17, 151, 168, 199], "recommend": [4, 5, 7, 8, 10, 12, 17, 22, 23, 24, 27, 66, 88, 97, 103, 114, 118, 133, 136, 142, 148, 152, 165, 175, 176, 183, 187, 193, 194, 196, 197, 198, 199, 201, 203, 204, 205, 209, 218, 224, 225, 229, 230, 241, 246, 254, 255, 262, 264, 272, 281, 282, 283, 300], "ascertain": [4, 207], "compliant": [4, 198, 246, 247], "safe": [4, 23, 27, 106, 170], "guarante": [4, 12, 106, 147, 150, 161, 170, 174, 180, 181, 193, 196, 217, 298], "better": [4, 6, 7, 16, 20, 23, 25, 38, 41, 42, 49, 58, 62, 96, 99, 101, 103, 106, 113, 114, 118, 121, 133, 136, 137, 140, 141, 142, 143, 158, 159, 160, 167, 169, 170, 175, 177, 178, 183, 187, 188, 190, 193, 196, 197, 201, 205, 208, 216, 217, 223, 226, 228, 229, 230, 231, 234, 241, 267, 283, 291, 301], "wild": 4, "west": 4, "There": [4, 5, 7, 10, 12, 16, 17, 20, 26, 27, 29, 36, 52, 80, 91, 96, 97, 99, 101, 104, 105, 106, 107, 108, 111, 113, 114, 129, 132, 142, 143, 147, 151, 153, 157, 159, 161, 164, 167, 169, 172, 175, 176, 177, 180, 181, 183, 193, 194, 195, 198, 199, 200, 203, 204, 218, 226, 231, 234, 264, 267, 269, 270, 275, 276, 277, 278, 282, 283, 286, 289, 292, 297, 299, 301], "caveat": [4, 148, 179, 203, 231, 267, 272], "yourself": [4, 5, 6, 7, 10, 27, 40, 99, 110, 133, 160, 194, 206], "truli": [4, 7, 55, 160], "relev": [4, 5, 7, 16, 59, 107, 109, 113, 126, 135, 138, 174, 190, 193, 207, 283, 285, 292, 298], "third": [4, 7, 10, 14, 18, 26, 27, 58, 68, 69, 70, 72, 73, 74, 77, 78, 101, 104, 111, 122, 133, 137, 145, 173, 183, 216, 223, 239], "intend": [4, 6, 7, 10, 14, 27, 96, 106, 134, 138, 158, 161, 182, 191, 193, 199, 216, 226, 245, 269, 283, 293], "influenc": [4, 7, 58, 101, 170, 301], "accordingli": [4, 5, 11, 12, 22, 26, 151, 167, 179, 190, 241], "command": [4, 5, 6, 7, 16, 27, 56, 82, 97, 103, 105, 118, 126, 133, 136, 147, 148, 152, 170, 173, 177, 179, 180, 181, 183, 187, 188, 190, 196, 198, 201, 203, 211, 247, 249, 253, 254, 255, 273, 281, 283, 297, 298, 299, 300], "consequ": [4, 138, 170, 178, 193], "properli": [4, 10, 11, 12, 16, 27, 56, 61, 106, 145, 148, 150, 161, 167, 168, 177, 179, 180, 181, 183, 196, 199, 216, 218, 236, 270, 280], "could": [4, 5, 6, 7, 10, 12, 13, 27, 58, 94, 96, 101, 106, 107, 108, 110, 111, 113, 116, 121, 134, 135, 138, 139, 142, 150, 161, 167, 170, 177, 178, 179, 180, 181, 183, 187, 188, 190, 193, 196, 197, 198, 200, 216, 218, 220, 224, 226, 229, 230, 231, 239, 247, 248, 249, 250, 255, 256, 262, 272, 273, 301], "outsid": [4, 12, 16, 17, 27, 50, 133, 136, 138, 144, 187, 190, 193, 216, 280, 288, 296], "cannot": [4, 6, 7, 13, 16, 22, 26, 27, 55, 66, 88, 104, 115, 119, 122, 123, 136, 137, 145, 148, 150, 151, 161, 170, 175, 177, 191, 193, 208, 223, 237, 239, 252, 295], "mymuladd_cpu": 4, "const": [4, 5, 6, 7, 10, 12, 17, 26, 27, 158, 173, 210, 220, 252, 255, 267, 282, 300], "torch_check": [4, 6, 10], "torch_internal_assert": [4, 10], "devicetyp": [4, 10, 17], "a_contig": 4, "contigu": [4, 6, 10, 37, 151, 161, 204, 220, 229, 230, 253, 283], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 10, 27, 210], "b_ptr": 4, "result_ptr": [4, 10], "int64_t": [4, 7, 10, 27, 220, 252], "numel": [4, 10, 151, 164, 179, 216, 282], "order": [4, 5, 7, 8, 13, 14, 17, 18, 20, 24, 26, 36, 37, 38, 49, 50, 55, 56, 61, 68, 69, 70, 72, 73, 74, 77, 78, 80, 88, 94, 96, 97, 99, 104, 114, 115, 116, 118, 119, 121, 122, 133, 134, 136, 139, 140, 142, 145, 148, 150, 157, 158, 159, 161, 173, 174, 180, 183, 185, 190, 191, 193, 194, 198, 199, 200, 201, 205, 218, 221, 231, 234, 239, 250, 252, 272, 282, 292, 293, 301], "torch_librari": [4, 5, 7, 8, 10, 18, 26, 27, 255, 300], "ensur": [4, 6, 10, 11, 12, 13, 14, 16, 17, 23, 26, 42, 55, 59, 62, 69, 106, 114, 115, 121, 122, 123, 134, 147, 148, 150, 155, 170, 172, 177, 178, 180, 182, 190, 191, 194, 196, 207, 210, 220, 228, 232, 236, 246, 267, 269, 270, 280, 286, 295, 300, 301], "awar": [4, 80, 96, 104, 138, 140, 150, 151, 152, 161, 182, 193, 196, 206, 216, 225, 295], "top": [4, 6, 7, 10, 20, 23, 24, 26, 27, 40, 56, 58, 88, 89, 97, 100, 103, 106, 114, 138, 150, 175, 176, 181, 182, 187, 188, 191, 196, 198, 205, 224, 226, 228, 229, 230, 234, 254, 262, 265, 300], "project": [4, 5, 6, 7, 27, 58, 94, 96, 103, 123, 138, 173, 178, 183, 188, 221, 255, 256, 262, 287, 300, 302], "schema": [4, 12, 24, 27], "mutat": [4, 10, 12, 18, 122, 153, 169, 170, 193, 239, 244, 252], "m": [4, 5, 6, 7, 10, 12, 16, 17, 23, 26, 27, 36, 48, 55, 96, 101, 110, 114, 134, 135, 152, 158, 159, 173, 175, 176, 179, 181, 196, 197, 206, 209, 220, 226, 228, 229, 234, 236, 247, 254, 262, 280, 283, 301], "torch_library_impl": [4, 10, 12, 17], "impl": [4, 10, 12, 17, 282], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 23, 38, 107, 175, 176, 188, 234], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 14, 106, 190, 200, 231, 273], "256": [4, 7, 20, 23, 57, 94, 97, 138, 139, 160, 183, 193, 196, 204, 205, 226, 228, 231, 234, 241, 252, 254, 273], "faketensor": [4, 18, 193, 207], "kernel": [4, 6, 7, 8, 10, 15, 18, 20, 22, 27, 89, 101, 104, 114, 119, 133, 136, 141, 153, 158, 161, 168, 169, 170, 182, 183, 184, 187, 191, 193, 194, 196, 197, 199, 208, 210, 211, 220, 224, 229, 230, 234, 238, 241, 250, 262, 267, 269, 272, 273, 283, 287, 290, 293, 298], "meta": [4, 18, 22, 136, 138, 140, 153, 169, 177, 193, 194, 196, 197, 231, 236, 274, 280, 287], "abstract": [4, 6, 13, 16, 38, 57, 66, 94, 104, 105, 109, 114, 122, 138, 140, 150, 156, 170, 173, 177, 194, 248, 249], "metadata": [4, 12, 18, 20, 26, 143, 177, 188, 193, 207, 234, 272], "correct": [4, 5, 6, 7, 10, 12, 13, 14, 15, 18, 23, 41, 48, 49, 52, 55, 69, 80, 91, 94, 96, 97, 99, 101, 104, 105, 107, 108, 114, 122, 134, 135, 139, 144, 151, 158, 161, 168, 177, 179, 180, 183, 185, 187, 188, 194, 201, 205, 207, 221, 226, 228, 249, 256, 266, 280, 298], "stride": [4, 6, 7, 18, 23, 58, 97, 101, 134, 144, 158, 161, 190, 193, 197, 200, 207, 219, 253, 272, 280], "register_fak": [4, 18, 119], "though": [4, 7, 12, 27, 52, 80, 96, 104, 106, 107, 129, 144, 145, 153, 157, 169, 177, 188, 193, 194, 208, 216, 255, 267, 282], "definit": [4, 6, 7, 10, 12, 24, 26, 29, 43, 52, 73, 80, 91, 108, 122, 133, 157, 168, 178, 182, 204, 217, 253, 256, 264, 282, 283], "load": [4, 6, 20, 22, 23, 24, 25, 27, 28, 36, 37, 39, 40, 41, 45, 46, 48, 52, 57, 58, 61, 80, 82, 94, 97, 99, 104, 105, 107, 114, 116, 124, 133, 134, 136, 141, 158, 161, 167, 170, 172, 177, 187, 188, 190, 193, 194, 198, 203, 204, 205, 208, 209, 210, 223, 232, 234, 235, 240, 246, 252, 255, 256, 266, 271, 279, 280, 282, 287, 288, 297, 298], "strive": 4, "load_librari": [4, 26, 27], "next": [4, 5, 6, 7, 10, 11, 13, 14, 16, 17, 19, 20, 23, 24, 26, 27, 38, 48, 55, 57, 59, 61, 62, 82, 88, 91, 96, 99, 101, 104, 106, 107, 111, 114, 116, 123, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 151, 152, 153, 157, 158, 160, 164, 167, 169, 170, 175, 178, 179, 180, 181, 183, 187, 188, 193, 194, 197, 201, 204, 205, 208, 211, 218, 219, 223, 226, 228, 229, 230, 234, 237, 250, 254, 255, 262, 270, 272, 273, 288, 293], "_c": [4, 107, 137, 203, 209, 252, 280], "_": [4, 6, 13, 14, 16, 17, 23, 25, 39, 45, 49, 54, 55, 58, 94, 97, 98, 104, 107, 114, 117, 118, 136, 137, 141, 150, 151, 152, 164, 175, 177, 179, 181, 188, 196, 197, 201, 204, 205, 209, 224, 226, 228, 229, 243, 245, 252, 254, 266, 270, 272, 298, 302], "_check": 4, "empty_lik": [4, 104, 119, 161, 216], "formula": [4, 12, 18, 106, 155, 177], "matter": [4, 6, 190, 216, 218, 243, 266], "wrong": [4, 58, 80, 108, 141, 158, 191, 223], "hold": [4, 6, 16, 19, 22, 52, 68, 69, 70, 72, 73, 74, 94, 107, 114, 122, 134, 135, 136, 141, 147, 167, 178, 179, 181, 272, 280, 283], "happen": [4, 10, 25, 27, 29, 36, 37, 38, 41, 48, 58, 96, 99, 101, 104, 106, 108, 114, 116, 135, 136, 138, 145, 148, 150, 170, 174, 179, 187, 188, 193, 194, 208, 209, 226, 229, 248, 267, 272, 283, 286, 296, 298], "modul": [4, 6, 11, 14, 15, 16, 19, 22, 23, 25, 26, 27, 28, 37, 42, 43, 46, 49, 50, 52, 55, 59, 61, 66, 71, 73, 75, 94, 96, 97, 99, 104, 105, 107, 108, 113, 118, 119, 123, 124, 129, 133, 134, 135, 136, 138, 139, 143, 144, 148, 150, 156, 157, 158, 161, 164, 167, 169, 172, 173, 175, 176, 177, 179, 180, 181, 182, 185, 188, 190, 191, 193, 196, 197, 199, 200, 203, 204, 205, 206, 208, 209, 210, 220, 224, 225, 226, 228, 229, 230, 231, 232, 234, 237, 240, 245, 246, 247, 248, 249, 254, 255, 256, 262, 264, 267, 269, 270, 271, 273, 279, 283, 285, 287, 288, 300, 301], "initi": [4, 7, 10, 13, 16, 19, 22, 23, 24, 25, 26, 27, 29, 37, 38, 41, 48, 55, 61, 69, 77, 78, 80, 94, 97, 99, 104, 105, 106, 107, 108, 111, 113, 114, 121, 122, 123, 129, 134, 135, 138, 141, 142, 151, 153, 156, 158, 161, 167, 170, 172, 174, 175, 176, 178, 179, 180, 181, 183, 187, 191, 194, 199, 201, 203, 219, 225, 228, 237, 240, 246, 247, 249, 254, 262, 265, 267, 270, 272, 280, 283, 288, 300], "pybind11_modul": [4, 6, 173], "notic": [4, 6, 10, 16, 25, 26, 27, 29, 36, 48, 49, 58, 80, 91, 96, 99, 104, 106, 108, 123, 145, 150, 158, 160, 168, 169, 175, 177, 187, 191, 193, 196, 197, 199, 216, 218, 223, 286, 298, 300], "pybind11": [4, 6, 10, 26, 27, 173, 267], "promis": [4, 114, 220], "With": [4, 5, 10, 12, 17, 19, 20, 22, 23, 25, 45, 54, 58, 80, 91, 96, 97, 103, 110, 136, 138, 145, 148, 150, 152, 158, 164, 167, 172, 179, 180, 181, 182, 183, 184, 196, 197, 201, 208, 210, 226, 229, 231, 234, 241, 244, 245, 246, 249, 250, 262, 264, 265, 270, 272, 280, 283, 297, 300, 301, 302], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 108, 167, 170, 194, 199], "sai": [4, 5, 6, 7, 18, 28, 48, 57, 104, 108, 110, 113, 136, 139, 153, 159, 167, 174, 187, 208, 231, 270], "not_agnost": 4, "csrc": [4, 6, 26, 27, 173], "extension_bad": 4, "__init__": [4, 5, 6, 7, 13, 16, 23, 25, 26, 37, 42, 49, 57, 59, 94, 99, 101, 107, 108, 123, 134, 141, 143, 148, 150, 164, 172, 174, 179, 180, 181, 188, 190, 197, 200, 204, 205, 206, 220, 226, 228, 229, 232, 236, 245, 246, 247, 249, 250, 253, 254, 256, 262, 264, 269, 272, 280, 298], "successfulli": [4, 5, 7, 26, 49, 56, 94, 116, 137, 140, 150, 158, 172, 180, 193, 194, 218, 240, 252, 254, 269, 284, 285, 286, 300], "extern": [4, 57, 106, 123, 140, 157, 158, 210, 220, 229, 252, 283], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 17, 26], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 203, 262], "interpret": [4, 6, 7, 27, 29, 62, 88, 91, 97, 113, 133, 142, 143, 152, 183, 191, 193, 210, 225, 250, 267, 271, 279, 282, 287, 298, 301], "global": [4, 6, 7, 29, 55, 62, 94, 138, 167, 172, 180, 185, 193, 205, 232, 234, 243, 245, 248, 250, 252, 268, 280, 282, 283], "variabl": [4, 5, 6, 7, 10, 24, 26, 27, 36, 55, 88, 94, 96, 104, 107, 108, 110, 114, 126, 143, 147, 150, 158, 172, 179, 182, 193, 194, 196, 199, 203, 208, 211, 218, 220, 221, 232, 239, 240, 241, 254, 262, 292, 299, 301], "pymodule_cr": 4, "entir": [4, 6, 7, 16, 19, 22, 23, 29, 52, 55, 59, 106, 108, 111, 114, 129, 133, 134, 135, 141, 143, 144, 156, 167, 169, 172, 174, 175, 177, 181, 183, 193, 194, 196, 205, 216, 217, 218, 226, 228, 247, 266, 272, 274, 283, 287, 288, 298], "statement": [4, 10, 25, 29, 36, 48, 50, 107, 115, 183, 193, 206, 232, 266, 268], "trigger": [4, 136, 148, 158, 170, 179, 181, 283], "challeng": [4, 16, 110, 111, 115, 134, 137, 138, 150, 156, 168, 178, 190, 247, 248, 249, 267, 287], "shift": [4, 177], "toward": [4, 23, 55, 106, 142, 178, 205, 270], "trivial": [4, 16, 57, 62, 104, 139, 194, 236, 248], "pathlib": [4, 94, 114, 135, 190], "so_fil": 4, "__file__": [4, 6, 173, 267], "glob": 4, "assert": [4, 6, 13, 22, 23, 107, 136, 143, 148, 158, 164, 180, 182, 188, 193, 201, 203, 204, 231, 234, 243, 252, 280, 293], "len": [4, 23, 38, 57, 61, 94, 107, 114, 129, 134, 135, 136, 150, 152, 175, 179, 180, 188, 190, 204, 209, 226, 228, 231, 234, 249, 250, 256], "f": [4, 6, 10, 13, 14, 18, 22, 23, 26, 36, 38, 48, 49, 52, 59, 61, 73, 94, 96, 97, 108, 114, 122, 123, 134, 135, 137, 138, 139, 148, 150, 151, 152, 158, 159, 172, 173, 175, 176, 179, 180, 181, 188, 190, 201, 203, 204, 205, 209, 210, 226, 228, 234, 239, 243, 245, 246, 247, 249, 250, 252, 254, 256, 262, 267, 280, 300, 302], "register_autograd": [4, 18, 295], "prefer": [4, 5, 7, 10, 18, 59, 159, 164, 173, 177, 191, 194, 196, 203, 220, 266, 295], "directli": [4, 5, 6, 7, 10, 13, 14, 16, 18, 24, 26, 27, 29, 37, 45, 54, 58, 91, 94, 96, 97, 104, 115, 116, 118, 119, 136, 137, 138, 143, 145, 146, 152, 159, 170, 176, 177, 181, 183, 194, 203, 205, 208, 209, 218, 219, 236, 240, 245, 247, 250, 256, 264, 301], "_backward": 4, "saved_tensor": [4, 6, 145], "grad_a": 4, "grad_b": 4, "none": [4, 13, 16, 17, 22, 23, 38, 55, 94, 96, 97, 106, 114, 119, 134, 135, 136, 150, 151, 152, 153, 158, 161, 164, 169, 172, 175, 180, 190, 193, 200, 205, 209, 224, 226, 228, 230, 234, 236, 241, 246, 247, 249, 250, 252, 280, 281, 293], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 8, 13, 18, 29, 108, 109, 151, 159, 172, 177, 249, 295], "had": [4, 7, 27, 52, 57, 96, 99, 104, 111, 114, 116, 122, 167, 168, 178, 188, 226, 255, 262, 280], "own": [4, 6, 7, 10, 12, 13, 16, 19, 20, 22, 27, 29, 37, 38, 55, 58, 69, 80, 94, 96, 97, 99, 114, 119, 121, 122, 133, 134, 135, 136, 142, 143, 144, 148, 158, 167, 168, 174, 176, 177, 180, 181, 183, 190, 191, 193, 194, 196, 198, 199, 200, 203, 208, 223, 226, 228, 231, 234, 246, 248, 250, 267, 280], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 14, 18, 55, 58, 80, 96, 97, 99, 126, 133, 136, 155, 161, 167, 170, 172, 174, 176, 190, 191, 194, 199, 218, 228, 249, 286], "mathemat": [4, 12, 15, 18, 48, 54, 69, 96, 99, 101, 110, 150, 177, 193], "plan": [4, 5, 7, 8, 12, 22, 123, 135, 138, 190, 194, 205, 219, 228, 240], "gradcheck": [4, 18, 144, 145, 155, 283], "sample_input": [4, 123], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 5, 7, 23, 27, 49, 88, 91, 94, 104, 107, 121, 134, 140, 141, 148, 150, 151, 161, 164, 167, 174, 179, 181, 187, 197, 228, 234, 252, 256, 267, 273, 282, 298, 302], "14": [4, 7, 26, 27, 28, 38, 73, 94, 99, 134, 158, 190, 196, 199, 254, 255, 256, 264, 267, 273, 301], "123": [4, 57, 94, 181, 254], "reference_muladd": 4, "extend": [4, 5, 6, 7, 10, 23, 28, 58, 94, 115, 116, 117, 118, 133, 134, 142, 151, 176, 180, 181, 190, 194, 197, 200, 203, 210, 225, 229, 255, 256, 283, 288, 292, 294], "arg": [4, 22, 23, 25, 59, 61, 110, 119, 123, 134, 135, 148, 150, 152, 157, 175, 178, 179, 180, 181, 190, 191, 193, 209, 210, 228, 231, 243, 245, 246, 247, 250, 252, 255, 280, 298, 302], "assert_clos": [4, 119], "check": [4, 5, 6, 7, 10, 15, 16, 17, 23, 24, 26, 27, 29, 40, 41, 42, 45, 48, 49, 50, 55, 56, 58, 61, 64, 65, 80, 82, 87, 91, 96, 99, 101, 104, 105, 106, 107, 110, 114, 116, 121, 133, 134, 135, 136, 137, 140, 141, 148, 150, 151, 155, 158, 161, 169, 170, 174, 176, 177, 180, 190, 191, 193, 194, 196, 198, 199, 211, 213, 214, 219, 220, 221, 222, 224, 228, 231, 232, 240, 242, 247, 254, 255, 258, 259, 260, 261, 262, 263, 266, 273, 291, 293, 297, 298, 300], "undefin": [4, 150, 199, 216, 217, 218], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 161, 282], "caus": [4, 14, 17, 25, 26, 80, 88, 96, 104, 114, 139, 158, 170, 176, 179, 183, 187, 190, 193, 194, 196, 197, 203, 216, 223, 232, 262, 264, 268, 283, 296, 301], "incompat": [4, 5, 137, 193, 226, 298], "went": [4, 58, 101, 104, 143, 158, 226], "fairli": [4, 6, 106, 114, 150, 167, 178, 199], "longer": [5, 14, 25, 26, 29, 58, 64, 65, 96, 108, 114, 122, 136, 139, 143, 158, 167, 174, 178, 179, 191, 193, 194, 196, 197, 213, 214, 220, 221, 222, 226, 228, 237, 240, 242, 244, 250, 258, 259, 260, 261, 263, 267, 283, 300], "activ": [5, 6, 7, 11, 12, 14, 16, 17, 20, 23, 25, 26, 29, 37, 58, 64, 65, 88, 96, 97, 99, 106, 108, 114, 135, 138, 143, 146, 150, 152, 159, 167, 174, 176, 187, 197, 199, 200, 201, 205, 209, 210, 211, 213, 214, 222, 223, 224, 229, 230, 231, 234, 237, 241, 242, 250, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 270, 273, 283, 300], "primari": [5, 6, 7, 17, 156, 170, 196, 197, 210, 220, 221, 240, 248, 282, 283, 301], "languag": [5, 6, 7, 21, 25, 27, 28, 29, 49, 55, 101, 107, 109, 111, 133, 138, 140, 141, 142, 152, 165, 181, 183, 201, 204, 210, 223, 241, 252, 254, 270, 283, 288, 293, 295, 298, 300], "suitabl": [5, 10, 46, 146, 150, 190, 229, 282], "eas": [5, 6, 91, 104, 105, 135, 197, 199, 255, 272, 287], "situat": [5, 17, 27, 29, 96, 104, 136, 144, 145, 148, 150, 194, 198, 208, 223], "properti": [5, 6, 7, 13, 16, 25, 27, 29, 36, 45, 54, 96, 99, 104, 110, 113, 140, 168, 183, 193, 196, 197, 217, 255, 266, 267, 280, 285, 300], "unfavor": 5, "latter": [5, 6, 7, 140, 179, 228], "land": [5, 18, 27, 133, 143, 160, 199, 218, 255, 302], "latenc": [5, 7, 20, 133, 138, 140, 147, 158, 170, 176, 191, 194, 196, 197, 234, 254, 292, 293, 301], "strict": [5, 119, 123, 190, 217, 230, 255, 284], "even": [5, 6, 7, 10, 12, 16, 19, 25, 27, 29, 48, 49, 57, 80, 96, 99, 101, 104, 113, 114, 123, 134, 135, 138, 143, 145, 148, 156, 157, 159, 168, 170, 177, 179, 182, 190, 193, 194, 196, 199, 208, 216, 218, 219, 223, 231, 237, 254, 264, 267, 283, 284], "java": [5, 197], "rust": 5, "go": [5, 13, 14, 15, 16, 19, 22, 23, 25, 26, 27, 29, 45, 54, 57, 96, 97, 99, 104, 105, 107, 110, 111, 114, 115, 116, 118, 119, 129, 133, 135, 139, 147, 150, 153, 156, 157, 159, 172, 175, 176, 178, 180, 183, 188, 193, 194, 197, 198, 200, 207, 208, 216, 231, 247, 264, 267, 270, 281, 282, 300], "paragraph": [5, 7, 27], "outlin": [5, 6, 7, 27, 170, 194], "journei": [5, 7, 58, 152], "enabl": [5, 6, 7, 10, 13, 16, 17, 19, 22, 23, 27, 28, 38, 52, 61, 62, 82, 88, 96, 104, 106, 118, 123, 134, 135, 137, 138, 140, 143, 144, 145, 148, 150, 152, 158, 161, 170, 172, 174, 176, 177, 187, 188, 190, 193, 194, 196, 197, 200, 206, 207, 208, 216, 218, 220, 221, 223, 225, 229, 232, 241, 246, 247, 248, 250, 254, 255, 262, 264, 266, 273, 280, 287, 288, 292, 293, 294, 296, 297, 301, 302], "vanilla": [5, 6, 7, 27, 55, 70, 108, 122, 190, 199, 216, 302], "eager": [5, 12, 27, 91, 93, 133, 143, 158, 161, 182, 191, 193, 194, 199, 204, 223, 224, 226, 228, 229, 230, 231, 243, 252, 256, 283, 296, 298], "discuss": [5, 6, 7, 10, 12, 17, 19, 27, 49, 80, 96, 99, 101, 105, 110, 111, 134, 135, 143, 150, 156, 157, 158, 164, 170, 172, 191, 196, 197, 199, 203, 206, 216, 217, 218, 219, 264, 272, 293, 295], "littl": [5, 20, 29, 58, 99, 106, 108, 114, 151, 177, 179, 181, 182, 185, 187, 234], "effort": [5, 16, 55, 57, 58, 119, 205, 223, 225, 282], "mechan": [5, 6, 7, 13, 16, 17, 28, 36, 55, 62, 105, 133, 145, 157, 168, 183, 185, 187, 193, 197, 224, 225, 229, 230, 250, 255, 256, 262, 292, 293], "evalu": [5, 7, 11, 14, 20, 23, 24, 28, 41, 43, 80, 96, 97, 103, 106, 116, 123, 143, 159, 164, 172, 178, 180, 188, 191, 193, 198, 204, 228, 234, 256, 298], "onc": [5, 6, 7, 10, 12, 13, 16, 19, 20, 24, 25, 26, 27, 29, 36, 38, 41, 57, 58, 62, 88, 97, 99, 103, 104, 105, 106, 107, 111, 116, 146, 151, 161, 167, 168, 174, 176, 177, 178, 180, 183, 187, 188, 193, 194, 197, 207, 208, 209, 221, 223, 234, 248, 252, 255, 262, 266, 267, 283, 297, 298], "record": [5, 7, 10, 23, 24, 27, 29, 36, 48, 55, 114, 123, 133, 134, 135, 143, 144, 145, 167, 177, 178, 180, 181, 193, 225, 256, 270, 273, 298], "explicit": [5, 7, 25, 27, 133, 136, 161, 170, 181, 193, 199, 217, 231, 232, 262, 266, 287, 290, 295], "pars": [5, 6, 27, 55, 57, 113, 134, 135, 140, 203, 267], "subject": [5, 13, 16, 27, 134, 155, 183, 193, 220, 221, 224, 228, 239, 240, 241, 245, 252, 267, 297], "constraint": [5, 7, 14, 20, 22, 91, 107, 108, 119, 133, 138, 140, 168, 177, 190, 194, 201, 203, 226, 228, 231, 234, 246, 266, 267, 280, 298], "impos": [5, 268, 280], "guidanc": [5, 10, 137, 196, 197, 223, 266, 301], "offici": [5, 88, 119, 137, 150, 178, 191, 193, 204, 229, 253, 255], "jit": [5, 7, 10, 17, 23, 25, 26, 29, 91, 118, 152, 156, 161, 191, 197, 205, 209, 228, 237, 240, 241, 250, 252, 253, 255, 267, 273, 283, 288, 295, 297, 298, 300], "scriptmodul": [5, 26, 27, 29, 91, 237, 300], "embed": [5, 19, 25, 27, 55, 82, 101, 107, 109, 111, 112, 123, 133, 135, 136, 138, 152, 172, 180, 181, 183, 188, 199, 201, 204, 223, 248], "torchvis": [5, 12, 14, 23, 38, 40, 42, 46, 48, 49, 56, 63, 82, 94, 97, 99, 100, 103, 105, 106, 129, 133, 134, 135, 152, 157, 167, 175, 176, 179, 180, 184, 187, 188, 190, 191, 196, 197, 205, 208, 224, 226, 228, 229, 230, 231, 240, 255, 256, 264, 273, 281, 283, 286, 291, 297, 298, 300], "resnet18": [5, 48, 97, 161, 175, 176, 187, 190, 205, 223, 224, 226, 228, 229, 230, 297, 300], "normal": [5, 7, 10, 13, 14, 23, 24, 25, 41, 43, 46, 55, 57, 58, 91, 94, 97, 99, 101, 105, 106, 107, 108, 113, 122, 123, 129, 134, 144, 150, 151, 168, 170, 175, 176, 179, 180, 182, 183, 188, 190, 191, 194, 197, 199, 205, 208, 217, 226, 228, 250, 255, 256, 264, 283, 291, 296], "rand": [5, 6, 7, 17, 25, 91, 104, 145, 196, 197, 200, 201, 226, 228, 234, 240, 243, 246, 247, 252, 254, 255, 262, 283, 291, 293, 300], "224": [5, 14, 23, 24, 57, 97, 106, 175, 176, 190, 196, 197, 205, 224, 226, 228, 229, 230, 240, 253, 255, 291, 298, 300, 301], "traced_script_modul": 5, "ident": [5, 7, 20, 61, 91, 96, 104, 105, 114, 122, 138, 147, 156, 164, 175, 188, 193, 209, 219, 234, 253, 267], "2698": 5, "0381": 5, "4023": 5, "3010": 5, "0448": 5, "slicebackward": 5, "circumst": [5, 6, 170, 266], "emploi": [5, 106, 183, 187, 199, 246], "form": [5, 7, 11, 14, 17, 20, 27, 46, 52, 55, 58, 66, 107, 114, 116, 133, 139, 142, 158, 183, 190, 199, 208, 221, 234, 236, 246, 247, 262, 270, 283, 293, 301], "mymodul": [5, 7, 236, 245], "self": [5, 6, 7, 10, 12, 13, 16, 17, 23, 25, 26, 28, 29, 38, 49, 55, 59, 61, 94, 107, 108, 114, 119, 121, 122, 123, 133, 134, 138, 143, 148, 150, 158, 160, 164, 168, 172, 179, 180, 181, 187, 188, 190, 193, 197, 199, 200, 204, 205, 206, 209, 220, 226, 228, 229, 236, 245, 246, 247, 249, 250, 253, 254, 256, 262, 264, 273, 280, 288, 298], "n": [5, 6, 7, 14, 20, 23, 26, 27, 36, 48, 66, 77, 78, 88, 91, 96, 97, 101, 104, 106, 114, 122, 134, 135, 136, 148, 150, 151, 152, 159, 160, 164, 172, 174, 179, 180, 181, 183, 188, 193, 194, 198, 203, 205, 208, 209, 220, 226, 228, 231, 234, 239, 255, 280, 283, 300], "super": [5, 6, 7, 13, 22, 23, 24, 25, 26, 29, 49, 94, 107, 123, 134, 137, 143, 148, 160, 164, 172, 179, 180, 181, 188, 190, 197, 200, 204, 220, 226, 228, 229, 236, 245, 246, 247, 249, 253, 254, 256, 262, 270, 298], "mv": 5, "my_modul": 5, "sm": [5, 187], "exclud": [5, 10, 48, 136, 191, 224, 273], "doesn": [5, 8, 10, 12, 15, 18, 20, 29, 66, 108, 110, 113, 114, 139, 159, 161, 170, 174, 190, 191, 193, 196, 200, 206, 208, 216, 223, 228, 231, 234, 239, 243, 244, 252, 264, 282, 283, 294, 298, 299, 301], "support": [5, 7, 13, 16, 17, 19, 20, 22, 23, 26, 27, 28, 36, 42, 52, 57, 62, 64, 65, 80, 89, 91, 96, 97, 98, 99, 100, 101, 104, 105, 106, 115, 116, 117, 118, 121, 133, 134, 135, 136, 137, 140, 145, 147, 148, 150, 151, 152, 155, 158, 161, 168, 170, 172, 173, 174, 176, 177, 179, 180, 181, 187, 190, 191, 193, 196, 197, 198, 200, 203, 204, 205, 206, 207, 209, 211, 213, 214, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 228, 229, 230, 231, 232, 234, 240, 241, 242, 243, 244, 245, 247, 252, 254, 255, 256, 258, 259, 260, 261, 263, 264, 265, 267, 273, 283, 287, 292, 294, 297, 298, 299, 301], "yet": [5, 7, 12, 13, 22, 27, 56, 80, 96, 99, 104, 118, 119, 143, 150, 170, 180, 183, 194, 200, 209, 221, 228, 229, 230, 247, 250, 255, 298], "ignor": [5, 23, 57, 106, 111, 113, 123, 173, 190, 193, 198, 200, 205, 217, 218, 221, 226, 228, 253, 266, 273, 284, 296], "readi": [5, 7, 11, 12, 19, 26, 27, 55, 97, 99, 105, 107, 108, 113, 114, 133, 135, 150, 164, 172, 173, 177, 179, 180, 181, 194, 198, 228, 229, 264, 273, 298], "hand": [5, 6, 7, 10, 16, 20, 22, 27, 80, 104, 107, 113, 114, 142, 150, 169, 170, 191, 193, 194, 197, 217, 234, 246, 247, 270, 288], "shown": [5, 7, 10, 20, 23, 24, 25, 58, 96, 104, 114, 136, 138, 140, 152, 158, 160, 175, 178, 179, 181, 182, 187, 190, 191, 194, 196, 197, 203, 206, 217, 218, 219, 223, 228, 231, 232, 234, 247, 254, 255, 262, 264, 270, 297, 298, 299, 301, 302], "filenam": [5, 7, 121, 190, 203, 266], "traced_resnet_model": 5, "pt": [5, 7, 26, 27, 59, 123, 134, 135, 136, 152, 240, 253, 255, 256, 264, 293, 300], "my_module_model": 5, "left": [5, 20, 36, 48, 52, 55, 58, 69, 91, 96, 103, 104, 108, 113, 122, 123, 150, 152, 160, 164, 177, 178, 180, 182, 187, 188, 231, 234, 262, 270, 287], "realm": [5, 7], "cross": [5, 10, 15, 24, 49, 58, 99, 101, 105, 138, 140, 196, 283, 286, 301], "sphere": 5, "distribut": [5, 6, 7, 16, 17, 23, 58, 80, 82, 94, 99, 104, 105, 106, 108, 113, 133, 134, 135, 136, 137, 138, 140, 146, 147, 152, 161, 167, 173, 177, 179, 187, 196, 199, 201, 203, 209, 224, 225, 236, 245, 248, 249, 267, 287, 301, 302], "encompass": 5, "share": [5, 6, 7, 12, 13, 22, 26, 27, 45, 54, 61, 71, 75, 94, 106, 110, 133, 135, 139, 148, 150, 151, 160, 170, 177, 180, 181, 193, 196, 203, 223, 247, 255, 267, 272, 282, 292, 297, 301], "header": [5, 6, 7, 10, 26, 27, 173, 267], "cmake": [5, 7, 240, 255, 300], "futur": [5, 22, 25, 26, 55, 114, 119, 121, 134, 152, 155, 160, 167, 173, 175, 178, 179, 180, 181, 200, 204, 219, 226, 228, 229, 231, 246, 254, 285, 296], "begin": [5, 6, 7, 13, 14, 20, 23, 26, 27, 29, 36, 48, 55, 56, 58, 61, 80, 91, 96, 99, 111, 113, 135, 138, 152, 165, 167, 175, 178, 180, 187, 188, 194, 218, 234, 252, 264, 266, 267, 269, 273, 284, 285, 286, 288], "iostream": [5, 6, 7, 26, 27, 255], "argc": [5, 26, 27, 255, 300], "char": [5, 26, 27, 158, 255, 300], "argv": [5, 26, 27, 59, 61, 255, 300], "cerr": [5, 26, 27, 255, 300], "app": [5, 27, 116, 133, 246, 247, 255, 264, 287], "export": [5, 8, 10, 21, 25, 27, 52, 91, 96, 117, 118, 133, 147, 148, 152, 158, 182, 184, 191, 220, 225, 232, 241, 254, 266, 283, 287], "try": [5, 7, 14, 16, 17, 20, 23, 25, 26, 27, 29, 41, 45, 49, 52, 54, 55, 58, 59, 66, 80, 96, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 121, 137, 140, 141, 142, 143, 151, 156, 158, 160, 164, 167, 170, 172, 173, 174, 177, 178, 183, 187, 191, 193, 196, 199, 201, 205, 208, 217, 226, 234, 250, 254, 255, 266, 267, 270, 280, 281, 298, 300, 301], "deseri": [5, 7, 27, 123, 205, 226, 228, 300], "catch": [5, 10, 13, 26, 191, 193, 255, 296, 300], "c10": [5, 10, 12, 17, 26, 173, 210, 220, 254, 255, 267, 282, 300], "ok": [5, 113, 137, 179], "accept": [5, 6, 24, 46, 94, 96, 106, 111, 138, 140, 155, 159, 164, 169, 170, 177, 180, 187, 190, 200, 231, 236, 239, 245, 254, 273, 283], "proce": [5, 13, 29, 106, 108, 158, 175, 193, 203, 270, 283], "examin": [5, 13, 26, 29, 88, 96, 97, 103, 105, 106, 150, 157, 170, 194], "moment": [5, 7, 13, 200, 219, 240, 252], "cmakelist": [5, 7, 26, 27, 255, 300], "txt": [5, 6, 7, 26, 27, 55, 141, 142, 152, 158, 176, 183, 209, 248, 255, 300], "cmake_minimum_requir": [5, 7, 26, 27, 255, 300], "fatal_error": [5, 7, 26, 27, 255, 300], "custom_op": [5, 18, 119, 295, 300], "find_packag": [5, 7, 26, 27, 255, 300], "add_execut": [5, 7, 26, 27, 255, 300], "target_link_librari": [5, 7, 26, 27, 255, 300], "set_properti": [5, 7, 255, 300], "cxx_standard": [5, 7, 255, 300], "17": [5, 7, 25, 27, 38, 73, 94, 99, 121, 158, 193, 237, 252, 254, 267], "last": [5, 7, 13, 16, 23, 27, 37, 48, 55, 58, 59, 80, 89, 91, 94, 99, 101, 104, 105, 108, 111, 116, 129, 133, 138, 139, 142, 150, 151, 158, 167, 175, 177, 178, 179, 181, 182, 183, 184, 188, 193, 196, 198, 216, 219, 224, 253, 255, 264, 266, 283, 287, 298], "thing": [5, 6, 7, 10, 17, 18, 25, 26, 27, 29, 36, 48, 49, 52, 55, 91, 94, 96, 99, 104, 105, 106, 107, 108, 110, 111, 113, 114, 133, 136, 138, 139, 140, 145, 146, 147, 150, 151, 157, 158, 161, 168, 176, 177, 185, 193, 197, 205, 208, 223, 226, 232, 246, 267, 286], "grab": [5, 7, 8, 58, 103, 176, 181], "latest": [5, 7, 9, 12, 16, 24, 94, 97, 122, 123, 133, 135, 143, 150, 152, 163, 171, 175, 176, 177, 180, 183, 185, 190, 191], "page": [5, 7, 8, 12, 18, 26, 27, 56, 60, 66, 95, 114, 121, 122, 133, 141, 143, 170, 181, 187, 193, 194, 229, 241, 246, 251, 255, 283, 296], "websit": [5, 7, 97, 178, 262, 265], "unzip": [5, 7, 23, 56, 190, 198, 204, 205, 226, 228, 297], "archiv": [5, 6, 7, 29, 161, 193, 297], "folder": [5, 7, 23, 27, 56, 58, 88, 89, 97, 99, 135, 152, 188, 198, 203, 204, 205, 209, 226, 228, 240, 253], "bin": [5, 7, 26, 27, 99, 150, 210, 253, 255, 262, 297], "lib": [5, 6, 7, 12, 22, 26, 27, 94, 119, 151, 158, 203, 255, 282, 298, 301], "against": [5, 18, 26, 27, 41, 42, 49, 101, 103, 116, 137, 150, 161, 177, 199, 245, 255, 267, 270], "window": [5, 6, 7, 24, 49, 57, 101, 113, 116, 133, 148, 180, 187, 198, 225, 240, 262], "debug": [5, 7, 10, 23, 29, 66, 107, 133, 139, 178, 184, 193, 210, 223, 225, 248, 267, 282, 292], "abi": [5, 6, 7, 26, 27, 240, 255], "laid": 5, "within": [5, 6, 16, 22, 25, 27, 66, 91, 96, 97, 103, 114, 115, 116, 121, 138, 143, 145, 152, 156, 158, 168, 174, 178, 180, 190, 191, 194, 196, 197, 199, 207, 209, 210, 219, 220, 221, 223, 229, 230, 232, 240, 249, 254, 267, 274, 283, 292, 294, 297, 301], "mkdir": [5, 7, 27, 187, 190, 204], "cd": [5, 7, 26, 27, 187, 198, 204, 240, 253, 262], "dcmake_prefix_path": [5, 7, 26, 27, 255, 300], "config": [5, 7, 12, 20, 24, 94, 134, 136, 140, 143, 152, 176, 196, 197, 200, 207, 208, 209, 210, 220, 226, 229, 230, 234, 252, 255, 256, 280, 288, 292, 295, 298], "someth": [5, 6, 7, 13, 16, 23, 27, 29, 49, 94, 99, 104, 108, 110, 150, 158, 175, 176, 183, 193, 199, 239, 267, 270, 282], "root": [5, 6, 7, 16, 26, 27, 36, 38, 48, 49, 57, 58, 94, 99, 107, 136, 144, 151, 158, 180, 181, 203, 255, 262, 281, 291], "4b5a67132e81": 5, "identif": [5, 7, 26, 27, 255], "gnu": [5, 6, 7, 26, 27, 255, 283, 301], "usr": [5, 7, 22, 26, 27, 150, 151, 255], "cc": [5, 7, 26, 27, 48, 240, 252, 255], "detect": [5, 7, 13, 14, 22, 26, 27, 58, 82, 101, 133, 176, 184, 187, 191, 193, 255, 269, 283, 296, 301], "info": [5, 6, 7, 26, 27, 88, 94, 137, 147, 150, 152, 160, 190, 193, 209, 241, 255, 256, 264], "pthread": [5, 6, 7, 26, 27, 255], "pthread_creat": [5, 7, 26, 27, 255], "thread": [5, 6, 7, 10, 11, 25, 26, 27, 58, 121, 136, 137, 148, 152, 170, 176, 179, 180, 181, 196, 197, 204, 205, 250, 255, 262, 267, 273, 282, 283, 301], "scan": [5, 7, 26, 27, 99, 101, 190, 193], "50": [5, 7, 20, 23, 25, 26, 27, 58, 59, 94, 99, 114, 151, 161, 174, 178, 181, 197, 198, 205, 209, 224, 226, 229, 230, 234, 237, 252, 254, 256, 264, 283], "cmakefil": [5, 7, 26, 27], "dir": [5, 7, 26, 27, 88, 103, 140, 203, 282, 292], "o": [5, 6, 7, 13, 22, 23, 26, 27, 38, 55, 56, 59, 61, 94, 97, 106, 107, 134, 135, 137, 148, 150, 152, 164, 167, 170, 172, 173, 175, 176, 179, 180, 181, 190, 201, 203, 204, 205, 207, 209, 226, 228, 232, 234, 245, 246, 247, 249, 252, 264, 267, 272, 302], "100": [5, 7, 11, 23, 25, 26, 27, 38, 49, 54, 73, 94, 108, 122, 134, 137, 143, 148, 151, 158, 161, 176, 177, 178, 181, 188, 190, 196, 197, 205, 220, 226, 228, 234, 249, 254, 256, 267, 282, 293], "suppli": [5, 7, 110, 161, 176], "binari": [5, 7, 24, 26, 27, 55, 58, 104, 116, 150, 161, 191, 217, 225, 229, 245, 253, 255, 297], "1d": [5, 73, 101, 122, 239, 283], "4d": [5, 52, 161, 231], "path_to_model": 5, "coupl": [5, 16, 40, 55, 100, 104, 105, 113, 135, 138, 145, 151, 153, 167, 170, 188, 193, 206, 237, 283], "awai": [5, 6, 7, 27, 52, 101, 103, 107, 108, 110, 177, 178, 179, 194, 219, 248, 270], "ivalu": [5, 27, 173, 240, 255, 300], "push_back": [5, 26, 27, 255, 300], "totensor": [5, 23, 27, 38, 49, 57, 94, 97, 99, 134, 150, 175, 176, 180, 188, 190, 205, 226, 228, 240, 255, 256, 291, 300], "slice": [5, 6, 45, 54, 111, 114, 164, 174, 199, 221, 240, 249, 282], "eras": [5, 29], "http": [5, 7, 11, 22, 23, 28, 29, 30, 31, 32, 33, 34, 39, 50, 51, 55, 68, 80, 81, 82, 83, 84, 85, 86, 87, 90, 94, 98, 103, 106, 109, 116, 117, 118, 119, 122, 129, 134, 141, 142, 144, 152, 154, 155, 156, 157, 161, 167, 169, 175, 176, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 198, 200, 204, 205, 208, 212, 215, 217, 219, 230, 237, 238, 239, 240, 253, 256, 265, 266, 267, 270, 271, 272, 275, 276, 277, 278, 281, 298], "org": [5, 7, 30, 31, 32, 33, 34, 39, 50, 51, 55, 68, 80, 81, 83, 84, 85, 86, 87, 90, 98, 101, 103, 105, 106, 109, 117, 118, 122, 129, 141, 142, 152, 154, 155, 156, 157, 167, 175, 176, 183, 186, 187, 189, 191, 192, 193, 194, 204, 208, 212, 215, 217, 219, 225, 230, 237, 238, 239, 240, 256, 262, 266, 270, 271, 272, 275, 276, 277, 278, 300], "cppdoc": [5, 7], "pariti": [5, 199], "manipul": [5, 45, 46, 99, 103, 122, 136, 157, 167, 205, 209], "five": [5, 11], "ideal": [5, 7, 16, 38, 96, 99, 104, 106, 170, 183, 193, 197, 226, 241, 293], "previous": [5, 6, 10, 24, 36, 91, 110, 114, 143, 155, 156, 172, 174, 177, 178, 179, 187, 193, 216, 226, 239, 280, 287, 297], "kcuda": [5, 7, 210], "live": [5, 7, 12, 17, 104, 133, 139, 170, 180, 181, 219, 250], "hopefulli": [5, 7, 56, 57, 80, 91, 108, 123, 284], "equip": [5, 6, 145, 151, 216, 301], "concept": [5, 7, 13, 26, 40, 41, 61, 100, 109, 110, 114, 122, 126, 133, 140, 160, 170, 179, 182, 183, 194, 203, 210, 220, 226, 229, 230, 231, 273, 282, 301], "close": [5, 7, 11, 16, 20, 23, 27, 58, 96, 101, 104, 106, 107, 135, 140, 152, 167, 188, 204, 209, 234, 281, 283], "Of": [5, 16, 27, 106, 110, 114, 139, 150, 188, 217, 219, 262, 297], "cours": [5, 7, 16, 20, 23, 27, 59, 96, 97, 104, 106, 109, 110, 113, 114, 139, 150, 188, 234, 262], "did": [5, 7, 10, 18, 23, 27, 29, 49, 58, 73, 96, 99, 101, 104, 116, 122, 137, 150, 155, 168, 177, 180, 183, 194, 196, 203, 205, 267], "cover": [5, 6, 8, 16, 17, 19, 22, 26, 29, 38, 52, 104, 109, 119, 126, 133, 135, 140, 150, 172, 173, 177, 180, 181, 188, 191, 193, 218, 220, 221, 226, 230, 231, 245, 254, 255, 266, 275, 276, 277, 278, 281, 282, 294, 301], "insid": [5, 6, 7, 12, 19, 22, 26, 27, 37, 41, 50, 94, 136, 138, 187, 191, 198, 220, 223, 234, 239, 241], "shortli": [5, 179], "master": [5, 19, 23, 55, 94, 134, 144, 150, 156, 157, 161, 180, 181, 198, 200, 203, 225, 229, 240, 245, 255], "html": [5, 30, 31, 32, 33, 34, 39, 50, 51, 55, 68, 80, 81, 83, 84, 85, 86, 90, 94, 98, 106, 109, 117, 118, 122, 126, 129, 152, 154, 156, 157, 175, 186, 189, 190, 192, 193, 204, 212, 215, 217, 219, 237, 238, 266, 270, 271, 272, 275, 276, 277, 278], "peter": 6, "goldsborough": 6, "newest": [6, 10, 24, 27, 116], "date": [6, 7, 10, 12, 27, 80, 83, 84, 85, 86, 87, 135, 180, 226, 255, 280, 297], "plethora": 6, "relat": [6, 13, 16, 58, 96, 97, 104, 105, 110, 113, 133, 138, 158, 168, 193, 199, 205, 220, 267, 283], "algebra": [6, 16, 45, 54, 99, 104, 108, 254], "wrangl": 6, "novel": [6, 97, 201], "research": [6, 7, 20, 23, 27, 29, 55, 58, 80, 82, 91, 97, 104, 108, 126, 150, 152, 164, 169, 174, 190, 204, 234, 250, 298], "power": [6, 7, 27, 48, 55, 63, 70, 80, 82, 94, 96, 99, 106, 108, 114, 122, 133, 134, 140, 148, 150, 158, 160, 164, 173, 174, 176, 183, 190, 208, 219, 252, 267, 295, 301], "spare": [6, 7], "deriv": [6, 7, 12, 18, 20, 27, 29, 36, 41, 45, 48, 54, 96, 104, 108, 110, 111, 113, 122, 139, 141, 145, 155, 159, 223, 234, 283], "express": [6, 8, 18, 27, 96, 99, 101, 104, 107, 118, 126, 138, 152, 193, 199, 218, 224, 226, 228, 231, 252], "realli": [6, 10, 27, 29, 49, 96, 101, 104, 107, 108, 113, 122, 124, 133, 139, 175, 188, 216, 218, 239, 267], "frequent": [6, 26, 27, 36, 82, 88, 113, 122, 134, 196, 197, 218, 255, 296], "expens": [6, 20, 45, 106, 121, 181, 193, 197, 208, 234, 273, 282, 296], "few": [6, 7, 10, 11, 12, 17, 23, 25, 26, 27, 52, 57, 62, 91, 96, 97, 99, 104, 106, 108, 109, 110, 111, 113, 123, 132, 135, 136, 139, 141, 142, 143, 148, 150, 151, 168, 170, 176, 177, 180, 183, 191, 194, 197, 199, 200, 208, 217, 218, 219, 226, 228, 244, 247, 250, 255, 256, 266, 282, 283, 284, 292], "plausibl": 6, "address": [6, 14, 22, 26, 28, 88, 101, 133, 137, 150, 170, 179, 180, 193, 194, 196, 199, 226, 232, 248, 256, 280, 287, 301], "nativ": [6, 7, 10, 17, 18, 24, 27, 61, 94, 118, 119, 133, 135, 138, 151, 152, 172, 181, 196, 197, 199, 200, 201, 208, 216, 219, 226, 250, 254, 255, 273, 282, 283, 287], "much": [6, 7, 10, 12, 14, 16, 20, 23, 27, 29, 41, 58, 62, 96, 97, 106, 107, 108, 113, 114, 123, 135, 139, 140, 156, 159, 160, 167, 170, 176, 177, 180, 181, 183, 187, 188, 191, 193, 194, 196, 203, 208, 216, 219, 231, 234, 253, 262, 264, 266, 267, 270, 272, 281, 283, 284, 287, 288, 301], "boilerpl": [6, 7, 23, 49, 108, 188, 216], "degre": [6, 41, 69, 101, 122, 140, 183, 187, 201, 219], "organ": [6, 10, 16, 27, 57, 99, 123, 141, 201, 267, 301], "tackl": [6, 121], "decid": [6, 7, 10, 12, 20, 22, 58, 66, 94, 96, 178, 193, 194, 219, 225, 234, 286], "contribut": [6, 58, 66, 88, 97, 104, 152, 161, 187, 196], "upstream": [6, 255, 283], "rest": [6, 7, 16, 49, 129, 136, 151, 157, 175, 177, 179, 180, 194, 199, 218, 228, 253, 270, 280], "walk": [6, 7, 12, 17, 19, 26, 27, 28, 29, 48, 60, 96, 109, 114, 126, 132, 133, 139, 158, 160, 180, 196, 200, 208, 210, 211, 224, 229, 266, 281], "chase": 6, "someon": [6, 183], "fire": [6, 148], "don": [6, 7, 10, 12, 18, 25, 48, 49, 58, 59, 61, 94, 101, 104, 107, 108, 111, 114, 119, 123, 129, 139, 145, 152, 157, 159, 160, 167, 170, 175, 177, 178, 181, 182, 193, 194, 205, 206, 209, 216, 217, 218, 231, 244, 250, 252, 262, 266, 295, 296], "dai": [6, 138, 194, 280], "head": [6, 8, 20, 25, 40, 82, 89, 101, 121, 138, 148, 175, 182, 198, 221, 234], "straight": [6, 7, 27, 183], "recurr": [6, 49, 55, 107, 111, 133, 141, 142, 165, 168, 183, 184, 204, 270], "unit": [6, 7, 29, 55, 101, 104, 134, 135, 159, 164, 170, 174, 177, 178, 183, 190, 193, 196, 197, 199, 269, 283], "superior": [6, 137, 220], "art": [6, 49, 58, 97, 99, 101, 152, 174, 209, 265], "lstm": [6, 21, 49, 55, 101, 109, 112, 133, 141, 142, 181, 204, 206, 223, 264, 270, 287], "lack": [6, 17, 88, 97, 216, 248], "forget": [6, 7, 114, 123, 175, 191], "gate": [6, 55, 101, 199, 280], "exponenti": [6, 55, 96, 104, 108, 110, 168, 178, 208], "elu": [6, 224], "intern": [6, 10, 12, 13, 17, 26, 42, 43, 55, 62, 73, 101, 106, 122, 133, 134, 136, 140, 150, 187, 196, 203, 216, 225, 237, 241, 246, 282], "never": [6, 96, 107, 108, 109, 113, 139, 174, 185], "lltm": 6, "long": [6, 7, 12, 24, 27, 55, 56, 88, 94, 101, 104, 107, 108, 109, 110, 112, 114, 135, 137, 139, 142, 151, 152, 157, 158, 168, 172, 178, 181, 187, 194, 199, 201, 203, 209, 210, 226, 267, 270, 282, 283, 286, 296], "term": [6, 7, 17, 45, 58, 66, 80, 96, 97, 101, 105, 108, 109, 110, 112, 121, 135, 137, 138, 164, 174, 177, 193, 194, 199, 208, 219, 226, 229, 231, 236, 270, 274, 301], "signific": [6, 7, 11, 23, 58, 88, 97, 135, 137, 141, 144, 152, 157, 158, 159, 161, 167, 170, 177, 182, 187, 191, 194, 197, 203, 237, 247, 248, 249, 254, 256, 266, 267, 270, 295], "enough": [6, 7, 20, 25, 27, 55, 88, 99, 110, 114, 122, 139, 144, 176, 193, 203, 234, 246, 254, 266], "lstmcell": 6, "cell": [6, 25, 27, 29, 56, 82, 96, 97, 99, 101, 104, 105, 121, 170, 178, 182, 190, 194, 208, 270, 283], "plain": [6, 7, 27, 55, 114, 136, 141, 142, 183, 198, 280, 282], "input_featur": [6, 298], "state_s": 6, "candid": [6, 158, 283], "reset_paramet": [6, 136], "stdv": 6, "math": [6, 12, 73, 91, 96, 110, 122, 164, 176, 252, 270, 283], "sqrt": [6, 91, 114, 199, 216, 236, 252], "uniform_": [6, 7, 181, 204, 236], "old_h": 6, "old_cel": 6, "cat": [6, 24, 25, 45, 49, 54, 97, 99, 107, 110, 158, 181, 183, 188, 198, 204, 231, 265], "gate_weight": 6, "split": [6, 10, 22, 23, 24, 25, 50, 55, 58, 91, 94, 99, 103, 105, 107, 133, 141, 142, 148, 152, 172, 177, 180, 181, 183, 194, 198, 204, 205, 209, 226, 228, 245, 262], "combin": [6, 12, 25, 41, 61, 66, 82, 94, 96, 99, 101, 106, 107, 110, 113, 114, 132, 133, 134, 139, 141, 142, 144, 153, 164, 170, 174, 175, 178, 181, 183, 193, 194, 199, 206, 210, 221, 226, 229, 248, 249, 256, 267, 270, 283], "input_g": 6, "sigmoid": [6, 7, 58, 101, 200, 231, 283], "output_g": 6, "tanh": [6, 7, 58, 101, 108, 177, 283], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 25, 55, 97, 101, 106, 107, 111, 114, 138, 140, 141, 142, 151, 156, 181, 182, 183, 204, 226, 265, 270], "new_h": 6, "batch_siz": [6, 7, 16, 23, 24, 38, 49, 55, 57, 58, 61, 94, 134, 135, 136, 138, 150, 151, 152, 175, 178, 179, 180, 187, 188, 190, 194, 196, 197, 205, 209, 220, 226, 228, 234, 255, 256, 266, 291, 298], "rnn": [6, 25, 29, 50, 55, 101, 133, 151, 165, 168, 180, 183, 184, 204, 229, 283], "new_c": 6, "intel": [6, 133, 150, 158, 161, 224, 225, 229, 232, 240, 287], "mkl": [6, 158, 220, 273, 301], "nnpack": 6, "why": [6, 7, 10, 13, 16, 18, 29, 49, 58, 91, 97, 106, 108, 113, 123, 126, 145, 148, 158, 167, 183, 191, 193, 194, 217, 219, 267, 297, 298], "room": [6, 106, 170, 254], "obviou": [6, 193, 267], "knowledg": [6, 55, 58, 80, 108, 109, 124, 126, 133, 158, 160], "know": [6, 7, 10, 13, 22, 23, 26, 27, 36, 48, 55, 77, 78, 80, 99, 101, 104, 108, 110, 113, 114, 122, 139, 141, 142, 145, 150, 151, 153, 158, 160, 161, 164, 169, 170, 172, 177, 178, 179, 183, 188, 193, 194, 196, 197, 198, 200, 205, 217, 223, 256, 267, 294], "execut": [6, 7, 10, 13, 17, 19, 21, 24, 25, 26, 27, 29, 36, 37, 43, 44, 48, 50, 53, 56, 75, 79, 88, 92, 96, 99, 102, 104, 107, 112, 115, 119, 120, 124, 132, 133, 136, 137, 139, 140, 143, 150, 151, 157, 158, 161, 170, 173, 177, 178, 180, 181, 182, 184, 191, 193, 196, 197, 199, 201, 203, 205, 206, 209, 210, 220, 235, 237, 240, 241, 245, 254, 262, 266, 270, 279, 282, 290, 293, 297, 298, 300, 301], "involv": [6, 10, 11, 17, 20, 23, 27, 29, 40, 43, 56, 91, 96, 97, 104, 107, 110, 116, 123, 132, 139, 141, 147, 160, 167, 181, 183, 193, 203, 205, 207, 208, 221, 234, 274, 283, 288, 295, 298], "launch": [6, 7, 25, 59, 66, 137, 140, 147, 148, 179, 180, 181, 182, 187, 196, 201, 240, 254, 256, 267, 273, 283, 301], "amount": [6, 23, 29, 80, 88, 123, 138, 148, 170, 174, 191, 194, 208, 273, 283], "becom": [6, 7, 13, 25, 28, 58, 80, 82, 91, 97, 106, 138, 145, 159, 161, 170, 187, 188, 194, 196, 203, 210, 221, 226, 243, 250, 254, 266, 301], "furthermor": [6, 23, 106, 153, 159, 188, 196, 210, 231, 248, 267], "itself": [6, 13, 27, 36, 37, 48, 88, 91, 101, 104, 106, 110, 111, 114, 119, 123, 138, 139, 141, 145, 150, 160, 177, 180, 181, 183, 194, 223, 250, 266, 273, 297], "slow": [6, 7, 10, 41, 134, 136, 170, 194, 196, 199, 264, 273, 283], "down": [6, 10, 12, 13, 23, 37, 38, 56, 88, 94, 96, 101, 103, 108, 114, 134, 151, 158, 159, 160, 180, 185, 188, 193, 196, 203, 216, 282, 283], "therefor": [6, 7, 11, 17, 23, 55, 57, 106, 123, 132, 141, 148, 161, 164, 170, 173, 174, 180, 181, 193, 196, 211, 218, 219, 231, 240, 266, 301], "rewrit": [6, 25, 50, 143, 168, 193, 231, 239, 240], "group": [6, 13, 22, 23, 28, 55, 66, 89, 101, 104, 121, 132, 133, 134, 135, 136, 137, 142, 144, 146, 148, 150, 158, 172, 187, 194, 198, 199, 203, 246, 247, 249, 250, 252, 267, 298, 301, 302], "profit": 6, "fewer": [6, 13, 144, 159], "visibl": [6, 26, 27, 49, 94, 103, 190, 205], "translat": [6, 27, 29, 55, 116, 118, 119, 133, 141, 142, 164, 165, 184, 218, 283, 298], "benefit": [6, 7, 11, 20, 22, 48, 91, 94, 135, 137, 155, 161, 167, 170, 175, 182, 196, 199, 208, 226, 230, 234, 250, 254, 255, 266, 270, 283, 294, 301], "massiv": [6, 29, 49, 110, 113, 194, 255], "parallel": [6, 7, 13, 19, 22, 49, 51, 53, 55, 57, 61, 80, 94, 99, 123, 133, 140, 146, 150, 152, 164, 177, 180, 181, 194, 196, 203, 220, 225, 246, 247, 248, 250, 252, 266, 273, 301, 302], "lltm_cpp": 6, "conveni": [6, 10, 16, 26, 27, 49, 52, 55, 97, 110, 114, 139, 142, 153, 159, 173, 177, 203, 217, 219, 247, 255, 266, 267, 282], "wrapper": [6, 7, 10, 61, 114, 123, 134, 135, 145, 151, 160, 177, 190, 194, 207, 225, 229, 246, 247, 295], "include_dir": [6, 12, 173], "include_path": 6, "manag": [6, 26, 37, 48, 55, 66, 96, 114, 121, 132, 136, 138, 143, 146, 147, 148, 151, 168, 182, 187, 191, 194, 197, 207, 246, 247, 248, 249, 250, 266, 267, 268, 272, 273, 274, 283, 296, 301], "And": [6, 7, 12, 18, 26, 27, 28, 29, 58, 97, 110, 116, 141, 145, 158, 159, 161, 164, 176, 187, 188, 191, 193, 196, 197, 223, 229, 231, 267, 282], "overal": [6, 23, 55, 101, 134, 135, 150, 170, 178, 190, 193, 194, 226, 231, 254, 264, 267, 283], "d_sigmoid": 6, "bit": [6, 17, 27, 29, 73, 99, 104, 121, 122, 151, 176, 177, 183, 194, 208, 216, 226, 229, 230, 241, 256, 264, 267, 270], "datatyp": [6, 27, 45, 54, 78, 99, 104, 121, 255, 266, 270, 283], "Its": [6, 106, 108, 221], "inspect": [6, 27, 96, 106, 119, 135, 136, 140, 157, 182, 185, 191, 193, 194, 205, 209, 250, 267, 297], "dispos": 6, "nvcc": 6, "hit": [6, 11, 23, 80, 138, 187], "workaround": [6, 27, 91, 145, 155, 298], "logic": [6, 7, 13, 20, 27, 41, 46, 91, 94, 107, 115, 133, 134, 140, 147, 172, 174, 180, 181, 190, 197, 206, 234, 236, 247, 250, 301], "sigmoidalphablendforwardcuda": 6, "open": [6, 40, 42, 56, 94, 97, 99, 100, 103, 105, 113, 116, 118, 133, 135, 150, 152, 153, 157, 167, 169, 183, 187, 190, 199, 204, 209, 211, 240, 255, 256, 262], "port": [6, 19, 137, 150, 180, 194, 203, 262, 292], "lltm_forward": 6, "addmm": [6, 7, 121, 158, 226, 240, 241, 254, 273], "transpos": [6, 7, 14, 45, 49, 54, 55, 58, 97, 158, 175, 188, 221, 240, 298], "alpha": [6, 7, 17, 107, 119, 160, 190, 216, 252], "respect": [6, 8, 18, 19, 36, 38, 40, 41, 42, 48, 55, 58, 68, 69, 73, 96, 97, 108, 110, 122, 126, 138, 139, 151, 155, 158, 159, 169, 170, 177, 181, 183, 187, 194, 196, 197, 201, 228, 245, 280, 283, 285, 295, 301], "ultim": [6, 23, 55, 58, 91, 216, 241], "plop": [6, 27], "autograd": [6, 8, 14, 17, 18, 19, 25, 29, 37, 38, 40, 41, 42, 43, 45, 46, 51, 52, 53, 63, 67, 73, 97, 98, 99, 100, 101, 103, 104, 105, 107, 109, 110, 114, 133, 141, 142, 145, 148, 158, 159, 164, 169, 178, 179, 180, 183, 184, 193, 197, 231, 239, 245, 250, 262, 266, 283, 295, 300], "nice": [6, 55, 114, 167, 169, 193, 194, 199], "dig": [6, 97, 108, 182, 193], "deeper": [6, 13, 14, 42, 97, 104, 106, 108, 157, 158, 182, 193, 197, 244, 252, 300], "interest": [6, 7, 12, 16, 20, 24, 27, 29, 49, 55, 57, 94, 96, 97, 106, 108, 115, 116, 118, 119, 129, 135, 140, 159, 167, 168, 175, 177, 185, 193, 196, 198, 199, 234, 239, 267, 270, 282, 285, 286], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 14, 23, 27, 49, 52, 58, 94, 101, 108, 114, 123, 134, 148, 158, 164, 175, 176, 179, 180, 181, 188, 197, 204, 205, 220, 224, 231, 246, 247, 248, 249, 253, 254, 255, 256, 266, 283], "exp": [6, 107, 108, 145, 218], "d_elu": 6, "mask": [6, 20, 82, 97, 101, 121, 133, 151, 168, 174, 182, 190, 198, 208, 216, 217, 219, 221, 225, 234, 255, 298], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 23, 134, 180, 205, 226, 228, 256], "d_x": 6, "d_old_h": 6, "d_input": 6, "span": [6, 20, 82, 107, 148, 187, 234, 262], "four": [6, 16, 22, 26, 91, 99, 101, 104, 122, 135, 150, 172, 188, 199, 224, 264, 298], "torch_extension_nam": [6, 173], "macro": [6, 7, 10, 17, 27], "maintain": [6, 12, 16, 26, 36, 37, 38, 48, 55, 80, 101, 106, 111, 133, 137, 146, 150, 160, 178, 181, 193, 196, 197, 232, 240, 246, 266, 302], "mismatch": [6, 106, 193, 203], "nasti": [6, 280], "hard": [6, 7, 10, 17, 25, 38, 108, 140, 170, 174, 193, 267, 292], "At": [6, 7, 10, 16, 17, 20, 24, 27, 48, 52, 55, 56, 91, 94, 111, 114, 122, 134, 135, 138, 151, 155, 160, 175, 177, 178, 179, 182, 183, 187, 216, 219, 226, 234, 240, 273, 280, 283, 297], "point": [6, 7, 10, 12, 13, 16, 20, 22, 23, 24, 26, 27, 48, 52, 55, 56, 57, 58, 59, 88, 91, 96, 99, 101, 104, 106, 107, 109, 110, 111, 113, 114, 122, 134, 136, 138, 139, 140, 145, 146, 148, 157, 160, 164, 170, 175, 177, 179, 183, 188, 190, 193, 194, 203, 204, 205, 208, 209, 216, 218, 219, 226, 231, 232, 234, 256, 264, 270, 271, 279, 281, 283, 287, 294, 298], "bdist_egg": 6, "egg_info": [6, 27], "egg": [6, 27], "pkg": [6, 27], "dependency_link": [6, 27], "top_level": [6, 27], "manifest": [6, 27, 218], "bdist": 6, "linux": [6, 7, 22, 24, 26, 27, 116, 138, 148, 150, 176, 187, 196, 197, 198, 240, 255, 301], "x86_64": [6, 22, 27], "install_lib": 6, "temp": [6, 23, 27, 143, 152, 204, 205, 209, 226, 228, 292], "gcc": [6, 27, 158, 220], "local": [6, 7, 10, 11, 19, 22, 23, 26, 27, 40, 55, 56, 66, 94, 96, 100, 107, 115, 123, 126, 135, 136, 138, 140, 148, 150, 151, 152, 167, 174, 175, 179, 180, 181, 183, 185, 194, 197, 201, 203, 207, 209, 245, 250, 253, 266, 269, 283, 292, 293, 301, 302], "miniconda": [6, 22, 27], "compiler_compat": [6, 27], "wl": [6, 26, 27], "sysroot": [6, 27], "wsign": [6, 27], "dndebug": [6, 27], "fwrapv": [6, 27], "o3": [6, 27, 267], "wall": [6, 27, 107, 157, 267], "wstrict": [6, 27], "prototyp": [6, 12, 13, 17, 27, 38, 193, 194, 210, 212, 220, 221, 231, 235, 239, 240, 245, 252], "fpic": [6, 27], "python3": [6, 22, 26, 27, 151, 187, 203, 254, 282, 298], "site": [6, 8, 22, 26, 27, 56, 58, 157, 183, 273, 282, 298], "th": [6, 16, 27, 57, 108, 113, 150, 160], "thc": [6, 27], "7m": [6, 27, 94], "dtorch_api_include_extension_h": [6, 27], "dtorch_extension_nam": [6, 27], "d_glibcxx_use_cxx11_abi": [6, 27], "cc1plu": [6, 27], "warn": [6, 23, 27, 57, 94, 152, 158, 190, 205, 209, 216, 217, 218, 219, 226, 228, 250, 267, 273, 282], "valid": [6, 24, 27, 28, 41, 55, 94, 101, 103, 105, 106, 118, 121, 123, 129, 134, 135, 140, 141, 144, 145, 170, 173, 175, 190, 193, 198, 204, 205, 217, 218, 231, 234, 267, 293, 296], "objc": [6, 27], "l": [6, 14, 16, 27, 48, 57, 58, 96, 108, 177, 178, 193, 203, 267, 297], "rpath": [6, 27], "37m": [6, 27], "stub": [6, 175], "loader": [6, 7, 28, 42, 49, 105, 114, 177, 180, 198, 267], "byte": [6, 94, 152, 193, 194, 204, 207, 298], "37": [6, 20, 73, 94, 121, 176, 181, 197, 234, 252, 254, 273], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 23, 27, 88, 133, 167, 177, 191, 193, 209, 282, 298], "__pycache__": 6, "dist": [6, 13, 22, 134, 135, 137, 148, 150, 151, 172, 173, 180, 201, 203, 246, 247, 249, 302], "py3": 6, "remov": [6, 20, 23, 55, 58, 59, 89, 114, 119, 121, 126, 136, 139, 148, 151, 152, 156, 158, 167, 176, 182, 183, 190, 191, 193, 194, 199, 204, 205, 206, 208, 209, 216, 217, 221, 226, 228, 234, 250, 264, 267, 282], "everyth": [6, 18, 48, 94, 104, 106, 108, 140, 141, 145, 151, 175, 176, 177, 178, 179, 183, 188, 194, 207, 245], "pth": [6, 11, 23, 27, 49, 123, 190, 204, 205, 208, 226, 228, 247, 255, 256, 298], "finish": [6, 7, 19, 27, 49, 50, 94, 99, 148, 179, 181, 188, 224, 229, 245, 246, 253, 262, 269, 283], "ubuntu": [6, 7, 187, 301], "16": [6, 20, 23, 27, 49, 94, 99, 101, 106, 123, 148, 151, 161, 175, 176, 181, 188, 190, 193, 197, 198, 208, 220, 234, 246, 247, 252, 254, 267, 273, 297, 298], "04": [6, 44, 94, 187, 211, 254, 267], "recent": [6, 55, 82, 111, 121, 137, 138, 150, 152, 158, 164, 168, 175, 178, 187, 298, 301], "maco": [6, 7, 116, 150, 190], "clang": [6, 211, 240], "worst": [6, 152], "resolv": [6, 27, 106, 156, 161, 193, 197, 218, 248, 298], "symbol": [6, 29, 156, 205, 231, 267, 282, 298], "linker": [6, 27], "pycapsul": [6, 27], "builtin": [6, 119, 173, 267, 282], "arg0": 6, "arg1": [6, 180], "arg2": [6, 180], "arg3": 6, "arg4": 6, "citizen": [6, 27, 216, 218], "lltmfunction": 6, "staticmethod": [6, 145, 179, 190, 280], "benchmark": [6, 17, 20, 28, 38, 121, 133, 140, 152, 158, 159, 170, 176, 182, 191, 196, 197, 199, 208, 220, 221, 224, 229, 230, 234, 252, 255, 256, 273, 279, 282, 283, 287, 293, 298, 301], "measur": [6, 14, 25, 41, 88, 96, 97, 99, 101, 106, 113, 134, 137, 152, 157, 159, 170, 177, 178, 182, 185, 191, 196, 197, 208, 220, 223, 229, 237, 245, 254, 266, 267, 273, 282, 287, 288, 297], "durat": [6, 89, 173, 178, 187, 197, 203], "32": [6, 22, 23, 25, 49, 61, 94, 99, 101, 104, 106, 111, 121, 134, 151, 152, 164, 169, 172, 176, 180, 181, 187, 190, 193, 194, 196, 197, 201, 220, 228, 252, 254, 256, 264, 267], "128": [6, 7, 26, 57, 58, 61, 94, 106, 134, 138, 141, 150, 151, 152, 153, 176, 179, 180, 181, 194, 199, 209, 230, 231, 241, 245, 255, 267, 282, 291], "rang": [6, 7, 13, 14, 16, 22, 23, 25, 38, 46, 49, 57, 58, 59, 73, 80, 88, 94, 97, 106, 107, 114, 115, 116, 118, 119, 122, 134, 135, 136, 137, 140, 150, 151, 152, 172, 175, 176, 179, 181, 183, 187, 188, 193, 196, 197, 198, 200, 201, 203, 204, 208, 209, 210, 226, 228, 234, 243, 245, 246, 249, 252, 254, 256, 262, 265, 266, 270, 273, 283, 295, 298, 301, 302], "100000": [6, 152, 267], "3f": [6, 23, 49, 94, 204, 228, 234], "wrote": [6, 27, 191, 198], "post": [6, 7, 13, 24, 55, 106, 133, 134, 135, 136, 140, 152, 161, 185, 194, 196, 197, 201, 206, 209, 225, 228, 231, 235, 256, 265], "my": [6, 25, 56, 107, 113, 199, 228, 237], "machin": [6, 7, 22, 24, 25, 29, 40, 42, 46, 49, 55, 56, 57, 59, 60, 61, 62, 66, 80, 94, 96, 97, 100, 116, 118, 133, 134, 135, 140, 146, 147, 148, 150, 157, 169, 170, 176, 180, 181, 182, 183, 194, 196, 198, 203, 209, 228, 237, 243, 252, 254, 262, 281, 283, 292, 293, 298, 301], "506": 6, "480": [6, 273], "444": 6, "694": 6, "349": [6, 94, 99], "335": [6, 94, 161, 181, 302], "443": [6, 181, 273], "523": 6, "speedup": [6, 20, 25, 49, 122, 133, 153, 158, 169, 197, 199, 204, 205, 208, 220, 221, 234, 254, 283, 288, 297], "30": [6, 7, 23, 50, 88, 94, 108, 133, 135, 137, 151, 161, 174, 179, 181, 205, 226, 234, 252, 267, 273], "albeit": [6, 16, 264], "major": [6, 12, 13, 23, 101, 104, 113, 129, 137, 158, 167, 182, 191, 194, 196, 197, 219, 250, 252, 254, 288, 295, 302], "particularli": [6, 15, 20, 59, 114, 168, 183, 220, 234, 283], "engin": [6, 7, 16, 24, 36, 48, 94, 96, 134, 143, 170, 176, 181, 190, 193, 194, 198, 203, 239, 241, 255, 264, 298], "correspondingli": 6, "big": [6, 58, 101, 107, 113, 122, 136, 142, 153, 167, 177, 183, 190], "win": [6, 167, 209], "No": [6, 7, 59, 119, 136, 158, 200, 244, 295], "cuda_devic": 6, "creation": [6, 7, 12, 104, 219, 236, 272], "is_avail": [6, 7, 14, 49, 94, 104, 151, 172, 173, 175, 178, 180, 201, 232, 298], "synchron": [6, 13, 19, 61, 62, 88, 134, 136, 148, 150, 177, 179, 180, 187, 191, 196, 197, 203, 207, 245, 246, 262, 266, 267, 296, 302], "1e6": [6, 23, 152, 204, 205, 209, 226, 228, 243, 252, 264, 302], "1e5": 6, "again": [6, 7, 11, 25, 29, 49, 56, 96, 97, 101, 103, 104, 106, 107, 114, 115, 139, 144, 150, 151, 167, 179, 181, 183, 187, 190, 191, 194, 196, 207, 208, 226, 231, 232, 267], "187": [6, 267], "719": 6, "410": [6, 161], "815": 6, "149": [6, 151], "802": [6, 158], "393": [6, 197], "458": [6, 158], "That": [6, 7, 20, 27, 48, 49, 50, 55, 96, 97, 99, 104, 108, 110, 111, 113, 114, 116, 138, 141, 148, 155, 157, 159, 161, 164, 167, 177, 178, 182, 187, 193, 194, 198, 216, 217, 219, 234, 270, 282, 287], "great": [6, 55, 116, 122, 123, 218, 226, 267, 285], "pull": [6, 25, 97, 104, 105, 157, 232], "dive": [6, 7, 13, 27, 42, 143, 148, 158, 175, 220, 282], "elabor": [6, 7, 138, 158, 179], "fly": [6, 16, 27, 57, 107, 177, 199, 264], "background": [6, 7, 27, 37, 80, 103, 176, 188, 190, 198, 293, 294], "tmp": [6, 27, 94, 158, 190, 203, 210, 252, 253, 264, 292, 293], "torch_extens": 6, "emit": [6, 7, 107, 193], "ninja": 6, "verbos": [6, 27, 94, 147, 190, 193, 197, 241, 248], "complic": [6, 16, 107, 108, 113, 114, 122, 140, 193, 197, 226, 239, 249, 266, 267], "techniqu": [6, 11, 19, 20, 23, 25, 55, 66, 106, 107, 113, 115, 133, 138, 144, 145, 146, 157, 165, 168, 170, 172, 174, 175, 181, 190, 194, 197, 199, 208, 216, 221, 234, 237, 264, 270, 283, 298, 301], "fine": [6, 7, 20, 23, 55, 57, 96, 107, 132, 139, 150, 158, 175, 176, 187, 191, 194, 209, 216, 234, 266, 267, 282, 283, 301], "system": [6, 7, 10, 12, 14, 16, 17, 26, 27, 29, 61, 106, 133, 136, 140, 150, 168, 170, 176, 177, 179, 191, 193, 194, 196, 197, 203, 240, 241, 246, 269, 283, 292, 301], "increment": [6, 13, 91, 110, 114, 150, 178], "thu": [6, 7, 10, 12, 23, 24, 25, 27, 36, 43, 55, 91, 94, 106, 114, 135, 153, 167, 170, 183, 197, 220, 226, 236, 250, 262, 267, 273, 283, 301], "didn": [6, 10, 26, 97, 116, 157, 179, 204, 239], "prospect": 6, "pointwis": [6, 10, 156, 161, 229, 230, 252, 283, 287], "declar": [6, 7, 15, 27, 80], "best": [6, 7, 10, 27, 43, 48, 58, 66, 80, 94, 107, 116, 119, 121, 123, 129, 133, 146, 150, 152, 153, 158, 169, 170, 175, 176, 179, 181, 185, 193, 199, 208, 220, 229, 234, 254, 255, 256, 273, 282, 283, 286, 287, 293, 295, 301], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": 6, "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 244], "cuda_runtim": 6, "templat": [6, 10, 26, 27, 124, 150, 158, 220, 256], "typenam": 6, "scalar_t": [6, 158], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 22, 29, 41, 45, 48, 54, 58, 59, 94, 96, 110, 136, 137, 138, 147, 151, 161, 181, 182, 185, 193, 196, 197, 205, 219, 221, 231, 232, 262, 283], "zeros_lik": [6, 104, 179, 250], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 12, 13, 16, 27, 37, 55, 68, 69, 88, 96, 97, 99, 101, 103, 107, 108, 113, 119, 121, 122, 140, 141, 151, 152, 158, 174, 177, 178, 180, 187, 188, 190, 194, 196, 197, 203, 209, 216, 218, 219, 223, 231, 241, 265, 267, 298, 300], "runtim": [6, 10, 16, 21, 22, 25, 27, 29, 45, 56, 88, 91, 96, 99, 100, 104, 118, 119, 121, 133, 137, 138, 143, 144, 157, 167, 170, 172, 187, 191, 193, 194, 196, 197, 204, 208, 209, 211, 220, 226, 240, 241, 243, 252, 254, 266, 267, 270, 273, 286, 287, 294], "back": [6, 7, 10, 12, 16, 17, 23, 24, 26, 27, 36, 49, 52, 57, 80, 94, 96, 104, 106, 107, 110, 114, 116, 121, 136, 139, 161, 167, 170, 177, 179, 180, 181, 183, 190, 191, 193, 194, 196, 199, 216, 221, 247, 270, 280, 283, 295, 296], "determin": [6, 7, 10, 13, 20, 23, 45, 54, 97, 99, 104, 105, 106, 107, 110, 113, 116, 137, 138, 140, 153, 167, 168, 169, 174, 191, 193, 194, 203, 205, 221, 232, 234, 267, 270, 273, 274, 283], "conceptu": [6, 7, 36, 48, 55, 122, 197, 282], "switch": [6, 10, 17, 23, 103, 104, 119, 123, 167, 194, 240, 254, 266, 268, 273, 286], "scalartyp": 6, "messag": [6, 18, 55, 96, 119, 143, 150, 152, 190, 193, 209, 241, 301], "alia": [6, 12, 104], "instanti": [6, 7, 12, 16, 25, 26, 29, 38, 43, 57, 58, 70, 72, 91, 99, 106, 114, 116, 122, 140, 173, 174, 178, 190, 236, 252, 270, 272], "retriev": [6, 7, 16, 19, 25, 36, 38, 55, 139, 140, 172, 177, 179, 180, 194, 197, 262, 301], "at_dispatch_all_typ": 6, "sens": [6, 10, 14, 16, 106, 113, 114, 153, 170, 188], "routin": [6, 7, 27, 194], "convolut": [6, 7, 10, 14, 15, 24, 58, 97, 99, 104, 106, 114, 123, 129, 133, 161, 164, 174, 175, 184, 185, 193, 196, 197, 205, 229, 230, 231, 240, 241, 254, 255, 262, 266, 269, 273, 274, 285, 286, 297], "harder": [6, 106, 208, 209], "ourselv": [6, 7, 41, 55, 144, 177], "grid": [6, 103, 105, 114, 129, 175, 185, 188, 210], "fill": [6, 7, 16, 99, 113, 114, 141, 151, 196, 217, 218], "matric": [6, 14, 20, 27, 29, 45, 54, 96, 110, 159, 168, 234, 241], "2048": [6, 22, 106], "heard": 6, "introductori": 6, "ever": [6, 7, 27, 139, 148, 193, 272], "__restrict__": [6, 220], "size_t": 6, "column": [6, 22, 27, 96, 104, 108, 110, 121, 138, 141, 158, 159, 164, 187, 190, 194, 217, 218, 219, 273], "index": [6, 7, 17, 38, 45, 46, 49, 54, 55, 57, 89, 104, 107, 108, 110, 111, 113, 114, 121, 134, 139, 140, 141, 150, 168, 172, 179, 183, 187, 190, 191, 193, 194, 196, 208, 221, 230, 239, 252, 301], "gates_row": 6, "primarili": [6, 88, 180, 191, 248, 266, 283], "imagin": [6, 96, 104, 107, 113, 145, 150, 167, 168, 183, 194, 267, 280], "giant": [6, 183], "million": [6, 129, 135, 151, 196], "serial": [6, 7, 12, 27, 29, 42, 43, 114, 123, 133, 193, 196, 205, 207, 226, 228, 262, 267, 297], "faster": [6, 7, 10, 11, 14, 23, 55, 62, 80, 101, 104, 106, 114, 123, 133, 135, 137, 147, 148, 151, 153, 159, 161, 169, 170, 179, 183, 191, 197, 198, 203, 205, 220, 237, 253, 264, 266, 267, 270, 282, 283, 284, 287, 301], "right": [6, 7, 10, 12, 14, 16, 24, 27, 36, 40, 45, 48, 54, 55, 58, 69, 88, 96, 101, 103, 106, 108, 110, 113, 122, 141, 150, 152, 160, 164, 167, 175, 177, 178, 179, 182, 183, 187, 190, 198, 199, 209, 223, 226, 239, 254, 262, 270], "inde": [6, 16, 18, 106, 144, 159, 170, 177, 182, 191, 194, 218, 219, 267, 283], "ineffici": [6, 88, 194, 196, 221], "readabl": [6, 29, 38, 57, 97, 104, 107, 142, 187, 203, 267, 282], "especi": [6, 8, 20, 23, 55, 58, 80, 97, 104, 135, 137, 148, 157, 164, 167, 170, 193, 197, 199, 208, 217, 229, 230, 234, 256, 264], "dimension": [6, 37, 45, 52, 54, 55, 58, 66, 77, 78, 96, 101, 103, 104, 106, 109, 110, 111, 113, 122, 138, 143, 161, 174, 182, 183, 188, 190, 194, 219, 241, 249], "row": [6, 22, 27, 38, 57, 80, 96, 101, 104, 108, 110, 111, 113, 114, 136, 138, 140, 141, 159, 175, 179, 194, 196, 197, 217, 219, 239, 262], "arithmet": [6, 23, 45, 99, 104, 170, 209, 270], "fortun": [6, 7, 12, 17, 27, 94, 150, 151, 267], "foo": [6, 25, 26, 180, 205, 211, 226, 232, 236, 282], "12": [6, 27, 38, 49, 73, 94, 99, 121, 124, 134, 135, 158, 179, 188, 200, 208, 230, 231, 234, 252, 254, 256, 267, 290], "foo_a": 6, "trace": [6, 10, 12, 18, 24, 25, 36, 48, 96, 103, 121, 133, 143, 152, 156, 158, 164, 170, 182, 187, 193, 194, 203, 220, 225, 237, 248, 255, 283, 287, 294, 295, 299], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 55, 158, 177, 179, 181, 220, 245], "integ": [6, 7, 10, 46, 99, 104, 108, 110, 113, 140, 174, 193, 198, 208, 219, 226, 228, 229, 241, 264, 270, 273], "fundament": [6, 55, 98, 101, 110, 113, 122, 133, 160, 170, 193, 194, 217, 228, 247, 282], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 12, 20, 134, 193, 226, 234], "packedaccessor32": 6, "variant": [6, 55, 99, 101, 103, 105, 138, 144, 176, 182, 194, 199, 201, 252], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 20, 62, 148, 170, 176, 178, 191, 196, 198, 208, 210, 221, 234], "host": [6, 22, 40, 60, 88, 100, 107, 134, 135, 138, 148, 150, 170, 172, 180, 181, 187, 249, 250, 273, 283, 292], "reshap": [6, 7, 14, 23, 101, 104, 113, 114, 172, 204, 205, 221, 226, 228, 240, 256], "pattern": [6, 20, 25, 101, 103, 138, 150, 156, 158, 168, 180, 197, 205, 206, 209, 216, 218, 224, 226, 234, 236, 249, 255], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "hassl": [6, 7], "entail": [6, 193], "simpler": [6, 114, 136, 138, 144, 155, 168, 226, 239, 267], "hope": [6, 29, 55, 160, 167, 191, 199, 254], "fastest": [6, 182, 293], "129": [6, 94, 121], "431": 6, "304": [6, 55, 197], "641": [6, 161], "faq": [6, 26, 27], "blog": [6, 134, 135, 141, 146, 196, 199, 254, 265], "framework": [7, 12, 28, 29, 40, 58, 96, 108, 109, 122, 132, 133, 170, 172, 179, 182, 190, 196, 197, 199, 203, 206, 224, 241, 245, 250, 256, 298], "sit": [7, 115, 116, 118, 119, 168], "atop": 7, "substanti": [7, 140, 170], "codebas": [7, 12, 16], "foundat": [7, 141, 177, 190, 194], "underli": [7, 10, 16, 27, 45, 54, 66, 80, 104, 106, 123, 140, 153, 158, 169, 180, 193, 203, 205, 218, 219, 221, 249, 250, 283], "popular": [7, 73, 80, 82, 106, 122, 140, 150, 151, 152, 194, 197, 199, 208, 220, 255, 256, 287, 298], "stochast": [7, 41, 52, 58, 70, 96, 99, 105, 114, 122, 150, 177, 178], "descent": [7, 41, 48, 52, 70, 73, 96, 99, 105, 114, 122, 150, 194, 208, 286], "digit": [7, 52, 99, 114, 133, 134, 135, 190, 298], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 105, 146, 150], "lightn": [7, 140], "talk": [7, 10, 55, 58, 61, 99, 110, 170, 177, 180, 193, 194], "cppcon": 7, "2018": [7, 152], "quick": [7, 20, 37, 54, 96, 106, 108, 111, 113, 133, 135, 148, 153, 159, 169, 194, 208, 234, 267, 270, 271, 279, 287, 300], "humor": 7, "sweep": [7, 182], "philosophi": 7, "ecosystem": [7, 119, 143], "descript": [7, 56, 134, 135, 158, 177, 179, 180, 181, 182, 190, 193, 204, 224, 267, 283, 298, 299], "embark": 7, "excit": [7, 26, 27, 157, 167], "team": [7, 119, 140, 152, 178, 190, 199], "job": [7, 50, 58, 59, 60, 66, 88, 106, 137, 140, 146, 147, 148, 150, 172, 225], "reinforc": [7, 16, 105, 133, 160, 179, 180, 184], "game": [7, 49, 58, 160, 298], "tractabl": [7, 107], "multithread": [7, 48, 62, 121, 170, 250, 262, 267, 301], "lock": [7, 16, 29, 62, 150, 170, 179, 180, 197, 246, 250], "gil": [7, 62, 148, 250], "multiprocess": [7, 13, 16, 38, 42, 57, 59, 61, 62, 134, 135, 148, 150, 151, 177, 180, 181, 203, 245, 246, 247, 250, 301, 302], "scalabl": [7, 133, 137, 140, 194, 216, 241, 254, 255, 283, 301], "shortcom": [7, 218], "neuroevolut": 7, "owner": [7, 179, 180, 181], "anyth": [7, 15, 18, 49, 77, 78, 99, 101, 104, 107, 110, 111, 113, 114, 122, 176, 199, 204, 205, 208, 262, 280, 281, 298], "serv": [7, 63, 66, 91, 99, 106, 111, 122, 133, 148, 157, 160, 173, 180, 181, 194, 196, 197, 207, 218, 230, 245, 248, 252, 266, 267, 282, 283, 292], "web": [7, 116, 262], "server": [7, 19, 29, 132, 133, 137, 148, 173, 181, 197, 200, 209, 247, 250, 255, 262, 264, 292, 298, 301], "3d": [7, 66, 82, 101, 103, 110, 111, 172, 190, 226, 231, 283], "graphic": [7, 182, 240], "photo": [7, 97], "softwar": [7, 152, 173, 187, 196, 203, 240], "remain": [7, 94, 96, 106, 136, 137, 150, 156, 167, 170, 174, 183, 200, 201, 203, 208, 218, 221, 223, 229, 230, 283], "forth": [7, 114, 196], "retain": [7, 45, 54, 104, 123], "intuit": [7, 58, 80, 99, 104, 108, 123, 158, 183, 190, 193, 217, 262, 280], "tradit": [7, 58, 106, 108, 159, 180, 193, 194, 199, 203, 220], "experi": [7, 12, 94, 106, 107, 135, 137, 150, 152, 160, 170, 173, 175, 177, 178, 182, 183, 185, 190, 191, 193, 194, 196, 197, 199, 208, 209, 216, 225, 230, 232, 239, 245, 248, 264, 266, 282, 284, 292, 298, 299, 301], "compet": [7, 140, 170, 196, 197], "meant": [7, 8, 13, 91, 96, 101, 135, 194, 203, 218, 283, 300], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 80, 135, 144, 170, 177, 178, 220, 249, 267], "core": [7, 10, 12, 13, 50, 107, 108, 109, 122, 123, 133, 138, 150, 151, 158, 161, 170, 176, 187, 193, 197, 203, 225, 226, 262, 266, 282, 301], "principl": [7, 10, 111, 113, 140], "curiou": [7, 153, 167, 169, 244], "tri": [7, 22, 58, 96, 107, 113, 178, 193, 240, 266, 298], "experienc": [7, 91], "ask": [7, 20, 26, 27, 97, 99, 101, 142, 151, 170, 177, 193, 194, 232, 234, 267], "rememb": [7, 49, 58, 80, 107, 111, 114, 121, 123, 159, 160, 167, 170, 183, 194, 199, 267], "dot": [7, 16, 36, 58, 111, 113, 133, 159, 183, 184, 196, 197, 201, 239, 267, 295], "colon": [7, 190], "zip": [7, 22, 49, 55, 56, 58, 123, 152, 164, 179, 181, 188, 190, 198, 204, 209, 234, 250, 252, 297], "free": [7, 12, 23, 26, 27, 29, 41, 48, 55, 80, 91, 94, 106, 115, 116, 118, 119, 123, 135, 136, 140, 150, 156, 157, 160, 161, 167, 170, 177, 179, 183, 187, 193, 250, 270, 282], "too": [7, 12, 16, 23, 49, 69, 73, 88, 94, 99, 101, 106, 107, 113, 114, 121, 122, 136, 138, 148, 167, 170, 174, 178, 179, 181, 183, 193, 216, 264, 282, 296], "cu90": 7, "url": [7, 23, 187, 191, 194, 208, 230, 281], "wget": [7, 11, 22, 82, 198, 204, 208], "nightli": [7, 22, 82, 152, 155, 191, 198, 203, 208, 225, 229, 239, 256, 298], "dep": 7, "tini": [7, 134, 167, 298], "ey": [7, 24, 27, 164, 170], "fledg": 7, "visual": [7, 16, 29, 48, 58, 80, 82, 88, 89, 94, 99, 105, 133, 135, 139, 140, 145, 157, 177, 187, 190, 196, 197, 210, 211, 218, 248, 273, 281, 287], "studio": [7, 211], "qmake": 7, "makefil": 7, "feel": [7, 12, 23, 41, 48, 55, 106, 115, 116, 118, 119, 123, 135, 156, 157, 158, 160, 161, 167, 187, 193], "comfort": 7, "box": [7, 10, 12, 13, 18, 20, 46, 80, 133, 136, 140, 143, 145, 150, 176, 179, 187, 193, 196, 197, 198, 199, 229, 234, 239, 241, 255, 262, 265, 298], "cmake_prefix_path": [7, 26, 27], "invok": [7, 10, 26, 27, 29, 106, 148, 150, 155, 157, 158, 170, 173, 180, 181, 197, 210, 218, 229, 237, 241, 262, 280, 283, 291, 295, 301], "agre": [7, 27, 152, 302], "break": [7, 10, 12, 13, 18, 23, 37, 38, 88, 96, 101, 115, 123, 136, 137, 143, 167, 179, 181, 191, 201, 216, 297], "unexpect": [7, 57, 218, 223, 231, 283], "pwd": [7, 262], "fa350df05ecf": 7, "home": [7, 45, 54, 216, 240, 251], "enter": [7, 55, 135, 148, 150], "ran": [7, 113, 137, 177, 180, 182, 194, 267], "me": [7, 20, 55, 167, 183, 234], "besid": [7, 27, 99, 113, 168, 179, 256, 265, 283], "encapsul": [7, 41, 52, 101, 105, 143, 167, 179], "buffer": [7, 16, 49, 52, 123, 135, 136, 144, 148, 153, 155, 160, 164, 167, 168, 169, 170, 174, 178, 193, 194, 197, 201, 203, 207, 236, 240, 246, 272, 285, 286], "nest": [7, 16, 37, 48, 99, 104, 133, 136, 156, 177, 179, 181, 182, 225, 235], "similarli": [7, 11, 14, 26, 57, 89, 97, 104, 136, 139, 140, 141, 158, 159, 167, 170, 172, 200, 207, 219, 247], "w": [7, 36, 41, 48, 52, 80, 107, 111, 113, 135, 151, 152, 161, 181, 187, 193, 198, 208, 209, 220], "register_paramet": [7, 236], "reflect": [7, 10, 27, 45, 54, 99, 104, 151, 177, 193, 223], "magic": [7, 108, 142, 150, 159], "assign": [7, 26, 46, 50, 52, 59, 97, 101, 104, 106, 107, 108, 111, 113, 115, 136, 150, 168, 177, 194, 196, 249, 262, 280, 283, 301], "behind": [7, 10, 20, 27, 50, 88, 106, 108, 114, 122, 144, 178, 200, 217, 219, 225, 234, 236], "scene": [7, 27, 114, 122, 236, 298], "another_bia": 7, "recurs": [7, 19, 49, 136, 143, 191, 236, 253, 281], "0808": 7, "8613": 7, "2017": [7, 80], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": 7, "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 190], "1230": 7, "0516": 7, "aptli": [7, 15], "register_modul": 7, "dropout": [7, 23, 24, 43, 55, 80, 101, 114, 123, 134, 138, 140, 142, 151, 175, 179, 181, 183, 204, 221, 228, 234, 256, 300], "conv2d": [7, 14, 23, 49, 52, 58, 94, 99, 114, 123, 134, 144, 164, 176, 180, 188, 193, 197, 200, 205, 224, 226, 228, 229, 230, 231, 241, 253, 255, 256, 262, 264, 273, 283], "subtleti": [7, 219], "bodi": [7, 158], "upon": [7, 21, 55, 62, 129, 150, 155, 183, 188, 191, 199, 203, 265, 283], "tree": [7, 12, 17, 26, 55, 107, 113, 144, 225, 248], "p": [7, 22, 23, 55, 73, 101, 107, 113, 114, 122, 134, 135, 144, 150, 152, 156, 161, 164, 167, 175, 179, 180, 181, 198, 204, 205, 209, 226, 228, 234, 240, 241, 245, 250, 252], "0345": [7, 209], "4456": 7, "6313": 7, "3585": 7, "4008": [7, 27], "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 94, 297], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": 7, "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 13, 23, 38, 48, 49, 52, 53, 94, 107, 121, 150, 151, 175, 181, 199, 211, 243, 252, 254, 256, 297, 302], "6861": 7, "1166": 7, "45": [7, 94, 140, 151, 158, 181, 196, 252, 254], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 37, 164, 194], "ordereddict": [7, 198, 280], "13": [7, 27, 38, 94, 99, 121, 181, 190, 196, 199, 252, 254, 262], "48": [7, 20, 49, 94, 158, 161, 188, 234, 252, 254, 273], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": 7, "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": [7, 280], "0335": [7, 209], "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": [7, 252], "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": 7, "8060": 7, "topic": [7, 55, 66, 80, 97, 104, 115, 116, 118, 119, 126, 132, 195, 196, 238, 250, 275, 276, 277, 278, 289], "devour": 7, "menu": [7, 56], "pipelin": [7, 19, 66, 114, 133, 177, 190, 196, 197, 198, 203, 270], "briefli": [7, 41, 66, 133, 138, 177, 191, 199, 241], "who": [7, 55, 80, 106, 109, 137, 150, 167, 193, 247, 262, 267, 293, 297], "heap": 7, "referenc": [7, 181, 270], "lower": [7, 16, 20, 56, 80, 88, 101, 103, 133, 135, 136, 137, 140, 148, 152, 155, 158, 167, 168, 175, 177, 178, 182, 188, 190, 193, 194, 199, 200, 209, 219, 223, 228, 234, 282, 283, 298], "heavili": [7, 170, 183, 196, 208], "ergonom": 7, "far": [7, 16, 24, 26, 52, 55, 69, 96, 99, 101, 104, 106, 107, 108, 122, 139, 150, 167, 174, 178, 183, 193, 194, 196, 199, 216, 228, 267], "stack": [7, 10, 16, 17, 25, 26, 45, 54, 99, 121, 133, 138, 153, 160, 164, 170, 173, 179, 183, 187, 188, 190, 194, 199, 203], "shared_ptr": [7, 26], "cognit": 7, "think": [7, 26, 27, 49, 58, 73, 97, 99, 107, 108, 110, 111, 113, 122, 157, 159, 177, 180, 182, 194, 199, 219, 239, 270], "everywher": [7, 104, 113], "make_shar": 7, "stai": [7, 88, 137, 138, 143, 177, 178, 179, 196, 229, 264], "shorten": [7, 27], "wait": [7, 19, 25, 88, 137, 142, 148, 150, 151, 170, 173, 179, 180, 181, 187, 190, 194, 196, 203, 246, 252, 272, 273, 283], "hell": 7, "lot": [7, 10, 12, 17, 23, 25, 57, 96, 107, 114, 134, 136, 150, 164, 180, 183, 187, 191, 194, 196, 208, 216, 266, 267, 270, 282], "came": [7, 58, 217], "scheme": [7, 22, 105, 106, 133, 194, 216, 224, 236, 272, 280], "hide": [7, 144, 177, 239], "reserv": [7, 12, 17, 152, 187, 207], "simplifi": [7, 12, 16, 28, 114, 141, 148, 172, 183, 190, 197, 198, 203, 216, 219, 224, 225, 226, 229, 230, 249], "linearimpl": 7, "torch_modul": 7, "brief": [7, 28, 88, 96, 107, 177, 194, 199], "typedef": 7, "among": [7, 10, 26, 59, 88, 94, 105, 138, 174, 187, 196, 231, 264, 265, 301], "holder": 7, "arrow": [7, 48, 138, 223], "resembl": [7, 14, 27, 107, 146, 178], "extra": [7, 10, 62, 99, 104, 106, 110, 111, 114, 118, 136, 141, 142, 144, 151, 155, 168, 177, 183, 190, 191, 197, 198, 204, 255, 273, 282, 283], "netimpl": 7, "subtl": [7, 104, 266], "deserv": 7, "construct": [7, 16, 24, 25, 26, 29, 36, 52, 58, 70, 72, 91, 106, 122, 129, 133, 136, 142, 145, 151, 153, 159, 165, 169, 177, 178, 180, 183, 194, 198, 199, 206, 221, 225, 226, 231, 236, 239, 254, 256, 266, 269, 285, 302], "tricki": [7, 20, 145, 156, 193, 194, 196, 234], "nullptr": [7, 210], "familiar": [7, 10, 12, 26, 40, 41, 45, 49, 54, 59, 60, 62, 91, 99, 100, 104, 105, 107, 109, 114, 123, 133, 135, 139, 146, 147, 150, 160, 172, 180, 193, 232, 262, 267, 282], "pythonista": 7, "disadvantag": [7, 123], "said": [7, 27, 29, 160, 167, 177, 178, 216, 217], "introduct": [7, 13, 18, 20, 51, 53, 59, 60, 61, 62, 63, 90, 91, 96, 101, 108, 109, 112, 115, 116, 117, 119, 124, 133, 143, 146, 147, 158, 184, 199, 218, 234, 255, 267, 283, 287, 295, 298, 300], "sooner": [7, 135], "technic": [7, 27, 150, 151, 167, 194, 216, 243, 244, 252], "henceforth": 7, "recap": [7, 52, 178, 219, 272], "adversari": [7, 49, 105, 124, 133], "architectur": [7, 11, 20, 29, 37, 58, 62, 80, 91, 101, 106, 107, 133, 135, 138, 140, 146, 153, 164, 170, 172, 174, 182, 188, 190, 191, 196, 197, 199, 220, 224, 226, 229, 230, 234, 255, 262, 264, 266, 283], "repositori": [7, 12, 60, 89, 126, 135, 138, 150, 172, 173, 181, 182, 183, 198, 203, 240], "distinct": [7, 20, 25, 58, 88, 104, 113, 135, 181, 188, 193, 194, 234, 298], "transform": [7, 14, 20, 21, 23, 24, 27, 28, 29, 36, 37, 38, 39, 40, 41, 42, 43, 45, 49, 55, 58, 82, 94, 96, 97, 99, 104, 105, 121, 124, 132, 133, 134, 136, 150, 151, 153, 155, 156, 158, 160, 164, 167, 168, 175, 176, 180, 183, 184, 187, 188, 190, 198, 201, 205, 208, 209, 221, 224, 226, 228, 229, 230, 234, 250, 254, 255, 256, 267, 269, 280, 282, 283, 288, 291, 295, 298], "probabl": [7, 10, 26, 37, 55, 58, 82, 97, 101, 104, 106, 107, 110, 113, 134, 139, 140, 142, 176, 178, 188, 190, 221, 254], "judg": 7, "closer": [7, 96, 106, 178, 197], "feedback": [7, 11, 23, 135, 152, 156, 157, 160, 161, 196, 197, 207, 209, 223, 225, 226, 252], "authent": 7, "theori": [7, 55, 58, 96, 106, 139, 170], "delic": 7, "tandem": [7, 294], "indistinguish": 7, "fool": [7, 55, 80], "excel": [7, 57, 188, 246], "realist": [7, 25, 199, 221], "2d": [7, 37, 58, 101, 114, 136, 141, 156, 179, 190, 194, 231, 249], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 49, 52, 94, 101, 123, 134, 164, 169, 174, 175, 180, 188, 205, 231, 256], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 49, 94, 97, 101, 123, 134, 164, 180, 188, 231, 256], "pad": [7, 23, 55, 82, 101, 144, 152, 182, 199, 218, 221, 234, 283], "batch_norm2": 7, "conv3": [7, 164], "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 23, 58, 114, 144, 157, 200, 228, 253, 283], "dcgangener": 7, "chosen": [7, 24, 26, 97, 101, 137, 178, 191, 266, 267, 298], "student": [7, 106], "harm": [7, 94, 106], "discoveri": [7, 193], "fed": [7, 14, 42, 55, 58, 190, 194, 197, 231], "soylent": 7, "regularli": [7, 59], "channel": [7, 12, 14, 23, 25, 48, 49, 58, 97, 99, 101, 104, 106, 114, 133, 138, 174, 184, 188, 198, 209, 230, 245, 255, 269, 283], "moduleopt": 7, "linearopt": 7, "leaki": [7, 58], "squash": [7, 151, 160], "sequenti": [7, 14, 23, 55, 73, 101, 113, 122, 151, 156, 168, 175, 209, 221, 236, 239, 243, 252, 254, 283, 301, 302], "orient": [7, 185], "layer": [7, 10, 12, 13, 14, 15, 17, 19, 20, 23, 24, 36, 42, 43, 48, 52, 55, 58, 61, 66, 73, 80, 94, 96, 99, 103, 104, 105, 106, 108, 114, 122, 123, 129, 133, 134, 135, 136, 140, 141, 142, 143, 151, 161, 168, 172, 174, 175, 176, 177, 180, 181, 183, 185, 193, 194, 196, 197, 198, 201, 204, 208, 209, 220, 224, 231, 234, 243, 244, 245, 248, 252, 254, 265, 266, 269, 270, 272, 274, 280, 284, 285, 288, 300], "conv2dopt": 7, "leakyrelu": [7, 58], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 70, 122, 145, 229], "knob": [7, 196, 197, 301], "sampler": [7, 23, 38, 61, 105, 134, 135, 152, 177, 185, 205, 209, 226, 228], "collat": [7, 57], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 13, 22, 55, 58, 59, 61, 66, 134, 148, 150, 179, 180, 181, 203, 245, 246, 247, 302], "concurr": [7, 121, 138, 140, 170, 196, 197, 201, 246, 283, 301], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 188, 190], "label": [7, 38, 41, 42, 46, 48, 49, 57, 58, 80, 82, 94, 96, 97, 99, 103, 104, 105, 108, 113, 121, 129, 135, 138, 141, 148, 152, 170, 175, 176, 179, 183, 188, 194, 198, 209, 234, 256, 262, 267, 269, 273, 287, 298, 302], "field": [7, 12, 13, 16, 17, 37, 55, 101, 111, 113, 150, 151, 167, 179, 187, 193, 198, 203, 218, 231, 250], "rebuild": [7, 267], "danc": [7, 14], "generator_optim": 7, "adamopt": 7, "2e": [7, 96, 152], "beta": [7, 21, 24, 116, 133, 184, 219, 270, 283, 287, 290], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 105, 122, 219, 225, 235], "lbfg": [7, 14], "rmsprop": [7, 41, 52, 74, 108, 122], "sgd": [7, 23, 41, 48, 49, 52, 72, 74, 94, 105, 107, 108, 114, 122, 123, 148, 150, 175, 179, 180, 181, 185, 188, 255, 256, 280, 285, 286, 291], "exhaust": [7, 13, 193, 231], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 266], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 151, 187], "g_loss": 7, "printf": 7, "r": [7, 13, 16, 23, 41, 48, 52, 80, 91, 107, 133, 158, 159, 160, 161, 164, 178, 179, 181, 190, 196, 198, 204, 205, 226, 228, 239, 255, 267, 283, 301], "2ld": 7, "3ld": 7, "4f": [7, 134, 135, 151, 175], "batches_per_epoch": 7, "uniformli": [7, 94, 178, 283], "robust": [7, 55, 59, 60, 80, 104, 137, 178, 254], "smooth": [7, 106, 115, 190], "propag": [7, 12, 19, 36, 41, 48, 50, 52, 58, 106, 110, 111, 114, 145, 155, 161, 177, 197, 226, 229, 230, 283], "repeat": [7, 16, 22, 23, 27, 94, 96, 141, 142, 177, 187, 193, 196, 201, 205, 216, 226, 228, 245, 252, 273, 282, 288], "spiel": 7, "progress": [7, 10, 17, 28, 58, 59, 103, 105, 151, 175, 183, 188, 203, 220, 247], "observ": [7, 16, 23, 52, 57, 88, 94, 105, 129, 134, 135, 140, 143, 151, 152, 160, 161, 167, 170, 177, 178, 179, 181, 182, 183, 191, 196, 199, 200, 204, 205, 209, 219, 224, 226, 228, 229, 230, 231, 237, 243, 254, 266, 267, 270, 274, 280, 283, 287, 288, 299, 302], "meaning": [7, 55, 106, 161, 203], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 94, 107, 135, 181, 254, 267, 282], "3652": 7, "6626": 7, "400": [7, 123, 152, 209, 267, 282, 298], "8057": 7, "2795": [7, 267], "3531": 7, "4452": 7, "600": [7, 161, 178, 300], "3501": 7, "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 40, 49, 88, 106, 107, 108, 113, 114, 122, 138, 167, 178, 183, 203, 250, 256, 270], "onto": [7, 10, 16, 19, 22, 49, 101, 103, 104, 133, 151, 167, 180, 181, 194, 203, 236, 283], "somewher": [7, 27, 101, 107, 108, 123], "kcpu": [7, 210, 240], "whose": [7, 88, 91, 96, 97, 106, 113, 135, 139, 161, 170, 190, 231, 265, 267], "insert": [7, 14, 20, 23, 101, 152, 175, 181, 193, 200, 204, 205, 224, 226, 228, 229, 230, 231, 234, 264], "op": [7, 12, 13, 17, 25, 26, 27, 54, 88, 119, 133, 134, 135, 136, 138, 143, 144, 148, 150, 152, 158, 161, 176, 187, 196, 197, 199, 200, 204, 205, 208, 209, 210, 217, 218, 220, 221, 226, 228, 229, 231, 236, 241, 245, 252, 256, 266, 272, 280, 287], "previou": [7, 13, 16, 17, 19, 20, 26, 27, 41, 55, 59, 61, 104, 105, 106, 107, 114, 119, 129, 135, 136, 137, 141, 142, 145, 146, 147, 151, 160, 167, 170, 172, 174, 175, 177, 178, 179, 181, 182, 183, 187, 188, 190, 191, 193, 194, 196, 197, 205, 226, 228, 229, 230, 234, 241, 267, 274, 283, 298], "resid": [7, 106, 170], "downstream": [7, 190], "portabl": [7, 293], "augment": [7, 28, 57, 114, 129, 133, 175, 185, 193, 198], "period": [7, 55, 58, 137, 140, 160, 187, 196, 203], "middl": 7, "procedur": [7, 27, 52, 132, 175, 178, 185], "restor": [7, 80, 123, 148, 161, 285], "session": [7, 24, 106, 116, 270], "essenti": [7, 12, 16, 18, 36, 55, 107, 108, 110, 133, 143, 150, 165, 170, 178, 193, 224, 236, 256, 270, 301], "interv": [7, 16, 96, 140, 181], "kcheckpointeveri": 7, "str": [7, 22, 23, 26, 89, 97, 119, 135, 152, 172, 177, 180, 190, 193, 209, 230, 237, 250, 301], "checkpoint_count": 7, "counter": [7, 13, 55, 58, 143, 150, 295], "bump": 7, "beta1": [7, 58, 252], "krestorefromcheckpoint": 7, "intermediari": [7, 139], "xxx": [7, 17, 57], "matplotlib": [7, 14, 38, 49, 58, 63, 96, 97, 99, 103, 151, 175, 178, 183, 188, 190], "argpars": [7, 134, 135, 152, 179, 180, 181, 209], "pyplot": [7, 14, 38, 49, 97, 114, 151, 175, 188, 190], "plt": [7, 14, 38, 49, 97, 151, 175, 183, 188, 190], "parser": [7, 107, 134, 135, 179, 180, 181], "argumentpars": [7, 134, 135, 179, 180, 181], "add_argu": [7, 134, 135, 179, 180, 181], "png": [7, 57, 133, 198], "parse_arg": [7, 134, 135, 179, 180, 181], "sample_fil": 7, "mul": [7, 119, 143, 158, 193, 226, 240, 252, 267, 282], "uint8": [7, 198, 231], "numpi": [7, 14, 18, 21, 23, 46, 49, 57, 63, 76, 78, 79, 94, 96, 97, 114, 116, 121, 133, 145, 152, 175, 176, 181, 188, 190, 191, 205, 209, 216, 225, 226, 228, 234, 265, 282, 298], "axi": [7, 25, 38, 88, 110, 111, 141, 152, 170, 174, 175, 190, 209], "subplot": [7, 175], "imshow": [7, 14, 38, 49, 97, 175, 188, 190], "cmap": [7, 38, 97, 188], "grai": [7, 38, 160], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "57": [7, 20, 94, 121, 158, 252, 273], "4953": 7, "0195": [7, 209], "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 49, 94, 123, 129, 175, 181, 188, 273], "8084": 7, "hoorai": [7, 29], "ball": 7, "court": 7, "digest": [7, 282], "necess": [7, 55, 103], "broad": [7, 63, 97, 105], "space": [7, 16, 26, 55, 58, 80, 96, 97, 101, 106, 107, 111, 113, 140, 151, 160, 167, 170, 177, 178, 181, 183, 187, 188, 190, 194, 199, 207], "consult": [7, 167, 226, 265], "stuck": [7, 225], "whenev": [7, 26, 59, 72, 104, 107, 108, 241, 286], "rate": [7, 41, 48, 58, 94, 99, 101, 105, 106, 108, 129, 134, 135, 140, 141, 160, 175, 178, 180, 194, 198, 203, 250, 281, 283], "vmap": [8, 10, 133, 155, 159, 164, 169, 225, 235], "oppos": [8, 26, 55, 58, 129, 150, 159, 164, 180, 267], "treat": [8, 18, 82, 96, 113, 169, 179, 191, 193, 194, 237], "opaqu": [8, 18, 27, 282, 295], "callabl": [8, 18, 25, 46, 57, 114, 187, 191, 193, 205, 265, 295], "aotinductor": [8, 193, 287, 295, 298], "toe": 8, "registr": [8, 10, 12, 17, 18, 26, 27, 255, 256, 262], "pybind": 8, "ed": [8, 297], "respons": [10, 13, 19, 22, 55, 96, 97, 105, 114, 133, 138, 144, 148, 150, 179, 180, 183, 191, 193, 197, 243, 245, 265], "nontrivi": 10, "cut": [10, 172, 193], "concern": [10, 25, 108, 194, 216, 226, 250, 256], "rule": [10, 26, 36, 48, 52, 96, 104, 111, 139, 153, 159, 168, 169, 177, 178, 193, 205, 266], "convers": [10, 55, 96, 104, 161, 183, 197, 216, 250, 252, 264, 270, 280], "highest": [10, 23, 49, 55, 103, 137, 142, 178, 190, 191, 283], "prioriti": [10, 137, 205], "transfer": [10, 21, 26, 49, 57, 106, 107, 114, 123, 124, 133, 150, 170, 176, 180, 187, 198, 207, 240, 264, 268, 284], "redispatch": 10, "unlik": [10, 14, 20, 97, 104, 106, 122, 139, 155, 156, 161, 175, 183, 193, 232, 234, 295, 301], "style": [10, 138, 172, 193, 198, 247, 270], "abid": [10, 58], "myop": 10, "myadd": [10, 12], "myadd_cpu": 10, "self_": 10, "other_": 10, "self_ptr": 10, "other_ptr": 10, "myadd_cuda": 10, "boundari": [10, 136, 177, 292], "myops_cpu": 10, "myops_cuda": 10, "subdivid": 10, "xla": [10, 12, 17, 280], "torch_xla": [10, 12], "useabl": 10, "behav": [10, 18, 24, 104, 114, 161, 168, 179, 228, 262], "autogradnotimplementedfallback": 10, "notimpl": 10, "node": [10, 22, 24, 27, 36, 48, 52, 59, 60, 61, 62, 66, 68, 96, 103, 107, 116, 119, 122, 132, 135, 136, 137, 141, 143, 146, 147, 148, 157, 158, 180, 183, 193, 196, 201, 210, 224, 228, 229, 230, 231, 249, 252, 283, 301], "preserv": [10, 20, 26, 29, 104, 133, 136, 161, 174, 197, 206, 217, 224, 234, 270, 280, 285], "require_grad": 10, "ness": 10, "pin": [10, 105, 139, 170, 283], "lost": [10, 20, 234], "alias": [10, 12, 193], "adinplaceorview": 10, "bookkeep": [10, 267], "autogradnotimplementedinplaceorviewfallback": 10, "logi": 10, "annot": [10, 12, 22, 25, 26, 27, 38, 57, 108, 119, 152, 190, 191, 193, 197, 250, 267], "guess": [10, 41, 48, 55, 58, 141, 183], "twist": 10, "constitut": [10, 16], "hood": [10, 23, 55, 58, 60, 62, 66, 122, 138, 139, 159, 160, 170, 181, 219, 245, 248, 250], "singleton": [10, 180], "findschemaorthrow": 10, "decltyp": [10, 252], "qualifi": [10, 26, 247], "overload": [10, 26], "typic": [10, 13, 16, 23, 25, 38, 48, 52, 54, 60, 61, 88, 99, 107, 108, 113, 136, 138, 140, 144, 146, 158, 167, 170, 177, 180, 190, 191, 193, 194, 196, 197, 231, 252, 254, 255, 256, 264, 266, 268, 270, 283, 288, 298, 301], "cast": [10, 20, 22, 78, 121, 135, 136, 170, 193, 234, 266], "lookup": [10, 19, 113, 143, 181], "typo": 10, "myaddfunct": [10, 12], "autononvariabletypemod": [10, 12], "myadd_autograd": [10, 12], "except": [10, 13, 20, 27, 45, 48, 49, 54, 55, 58, 94, 97, 101, 104, 108, 111, 115, 129, 136, 137, 141, 152, 153, 155, 159, 161, 169, 173, 175, 183, 193, 207, 221, 225, 231, 234, 236, 239, 240, 255, 292, 298], "raii": 10, "guard": [10, 148, 229, 244, 252], "infinit": 10, "overflow": [10, 55, 208, 266, 270], "send": [10, 12, 13, 14, 49, 50, 66, 94, 150, 160, 170, 172, 173, 175, 179, 180, 181, 194, 245, 273], "consider": [10, 12, 24, 134, 193, 194, 298], "handler": [10, 190, 197, 280], "autogradcpu": 10, "autogradcuda": 10, "pythondispatch": 10, "_python_dispatch": 10, "isn": [10, 96, 107, 155, 170, 176, 188, 193, 194, 218, 267, 269, 284, 285], "glorifi": 10, "add_cpu": 10, "add_cuda": 10, "unsupport": [10, 115, 119, 133, 191, 193, 197, 280, 298], "decentr": 10, "importantli": [10, 23, 27, 145, 167, 170, 216, 267], "parti": [10, 18, 26, 27, 136, 137, 173], "aspect": [10, 17, 80, 150, 198, 267], "patch": [10, 12, 178], "dispatchkei": [10, 12], "varieti": [10, 28, 37, 55, 96, 97, 101, 105, 114, 123, 142, 170, 199, 219, 301], "fallback": [10, 12, 17, 115, 199, 209], "opt": [10, 26, 114, 140, 161, 173, 180, 181, 187, 208, 236, 243], "amp": [10, 17, 66, 136, 161, 220, 230, 241, 255, 287, 291], "incom": [10, 99, 187], "float16": [10, 17, 135, 152, 161, 241, 266], "float32": [10, 16, 27, 135, 136, 151, 176, 181, 201, 210, 220, 229, 230, 231, 252, 266, 280, 283], "matmul": [10, 27, 138, 158, 193, 208, 234, 239, 241, 254, 266, 283], "impair": 10, "converg": [10, 41, 55, 58, 69, 105, 106, 122, 123, 138, 150, 168, 178, 183, 244, 266, 270, 284, 287], "hypothet": 10, "autocast_mod": 10, "mymatmul_autocast": 10, "excludedispatchkeyguard": 10, "no_autocast": 10, "mymatmul": 10, "cached_cast": 10, "khalf": 10, "elig": [10, 283], "polici": [10, 17, 133, 134, 136, 160, 178, 179, 181, 184, 301], "mixtur": [10, 252], "meanwhil": [10, 139, 158, 217, 255], "float64": 10, "unaffect": [10, 106], "forc": [10, 16, 20, 27, 55, 101, 133, 183, 191, 199, 216, 218, 234, 266, 283, 292], "fallthrough": 10, "occur": [10, 13, 18, 23, 27, 29, 59, 82, 88, 106, 158, 161, 170, 179, 180, 187, 190, 193, 194, 197, 203, 208, 209, 248, 273, 294], "fall": [10, 17, 97, 168, 178, 296], "unfortun": [10, 27, 29, 122, 150, 193], "aren": [10, 145, 151, 193, 194, 218, 283, 286], "dri": [10, 187], "reduct": [10, 11, 73, 104, 122, 134, 135, 136, 139, 144, 152, 167, 173, 187, 190, 199, 204, 216, 218, 225, 266, 270, 283], "gemm": [10, 158, 196, 197, 220, 229, 230, 254], "unless": [10, 24, 45, 54, 104, 108, 115, 152, 177, 193, 205, 208, 209, 239, 272], "categori": [10, 12, 23, 80, 88, 97, 104, 129, 141, 142, 187, 193, 205, 226, 228], "promote_typ": 10, "widest": 10, "safest": 10, "my_multiple_input_op_autocast": 10, "t0": [10, 135, 243, 252, 267], "t1": [10, 267, 280], "optimist": 10, "exec_typ": 10, "my_multiple_input_op": 10, "myadd_autocast": 10, "gymnast": 10, "invoc": [10, 29, 157, 179, 197, 262, 288, 294], "stabil": [10, 106, 178], "41478": 10, "jame": [11, 29, 157], "reed": [11, 29, 157], "seth": [11, 23, 40], "weidman": [11, 23], "wikitext": [11, 204], "corpu": [11, 55, 56, 152, 204], "preprocess": [11, 24, 57, 106, 114, 133, 141, 183, 190, 270], "train": [11, 12, 14, 19, 20, 22, 24, 27, 36, 40, 41, 42, 46, 48, 51, 52, 53, 57, 60, 62, 63, 66, 68, 69, 70, 72, 73, 74, 77, 78, 80, 82, 88, 91, 97, 98, 100, 101, 104, 106, 107, 109, 111, 113, 114, 116, 122, 133, 134, 136, 137, 140, 143, 144, 148, 152, 161, 162, 164, 165, 168, 169, 172, 173, 176, 179, 180, 181, 182, 184, 187, 190, 191, 193, 196, 198, 201, 203, 206, 207, 209, 218, 225, 231, 234, 235, 241, 243, 244, 246, 247, 248, 249, 250, 266, 269, 270, 273, 281, 284, 285, 287, 288, 298, 300, 302], "pre": [11, 23, 38, 107, 133, 135, 138, 150, 152, 175, 176, 190, 194, 198, 199, 208, 209, 220, 231, 247, 250, 293, 301], "s3": [11, 193, 204], "amazonaw": [11, 204], "com": [11, 12, 22, 23, 28, 29, 55, 82, 94, 119, 134, 141, 142, 144, 155, 156, 157, 161, 169, 183, 190, 198, 200, 204, 205, 208, 239, 240, 253, 265, 267, 298], "asset": [11, 204, 240], "word_language_model_quant": [11, 204], "model_data_filepath": [11, 204], "gpt": [11, 60, 134, 146, 147, 172], "almost": [11, 14, 23, 111, 113, 134, 138, 151, 176, 193, 196, 208], "quantize_dynam": [11, 152, 264, 270], "int8": [11, 23, 152, 176, 194, 197, 208, 209, 220, 226, 229, 230, 231, 241, 256, 264, 270], "macbook": [11, 23, 152, 183], "pro": [11, 23, 100, 152], "welcom": [11, 23, 152, 209, 223], "dynamic_quantization_tutori": [11, 21, 270], "repo": [12, 17, 22, 23, 60, 88, 133, 146, 150, 152, 170, 179, 180, 194, 207, 208, 256], "mainten": [12, 190], "solut": [12, 20, 58, 115, 123, 133, 158, 169, 170, 190, 191, 194, 196, 218, 221, 234, 248, 267, 283, 287, 293], "pr": [12, 188, 199, 255, 282], "propos": [12, 28, 138, 151, 168, 216, 218, 248], "request": [12, 29, 36, 48, 94, 104, 114, 135, 168, 176, 179, 180, 196, 197, 210, 218, 219, 220, 232, 245, 246, 250], "hardwar": [12, 17, 20, 24, 45, 54, 56, 104, 106, 116, 141, 150, 153, 159, 161, 169, 170, 173, 174, 194, 197, 199, 208, 234, 241, 254, 255, 256, 268, 270, 283, 291, 295, 298], "googl": [12, 20, 25, 28, 29, 40, 55, 58, 82, 103, 133, 150, 151, 152, 177, 178, 187, 194, 301], "tpu": [12, 173, 286], "chip": [12, 197], "layout": [12, 20, 138, 197, 199, 216, 219, 225, 234, 249, 280, 283], "spars": [12, 19, 101, 108, 113, 133, 151, 174, 194, 199, 218, 225, 235, 280], "quantiz": [12, 21, 106, 129, 133, 167, 197, 225, 235, 241, 253, 271, 279, 280, 287], "enforc": [12, 16, 26, 107, 140, 168, 216, 217], "mainli": [12, 16, 17, 22, 152, 158, 187, 191, 224, 229, 231, 256, 297], "haven": [12, 27, 94, 96, 99, 104, 107, 111, 113, 153, 157, 169, 250], "identifi": [12, 20, 38, 59, 61, 80, 88, 89, 97, 114, 121, 147, 160, 161, 165, 174, 180, 193, 197, 198, 203, 205, 209, 219, 231, 234, 248, 283, 298], "carri": [12, 16, 55, 58, 96, 104, 106, 110, 146, 151, 161, 183, 272], "privateuse1": [12, 133, 232], "autogradprivateuse1": [12, 17], "privateuse2": [12, 17], "autogradprivateuse2": [12, 17], "privateuse3": [12, 17], "autogradprivateuse3": [12, 17], "tensorimpl": [12, 17, 267, 282], "storag": [12, 17, 18, 105, 110, 123, 139, 151, 153, 161, 170, 177, 187, 203, 216, 218, 219, 225, 235, 236, 246, 247, 266, 272, 280], "dispatchkeyset": [12, 17], "k": [12, 14, 23, 88, 97, 107, 138, 152, 164, 179, 180, 182, 203, 205, 220, 226, 228, 234], "caffe2": [12, 91], "typemeta": 12, "data_typ": [12, 110], "opaquetensorimpl": 12, "tweak": [12, 55, 286], "overrid": [12, 17, 57, 73, 99, 108, 122, 137, 157, 161, 173, 190, 209, 287, 294], "vulkan": [12, 225], "submit": [12, 255], "src": [12, 13, 119, 150, 173, 240, 280, 282], "registrationdeclar": 12, "snippet": [12, 25, 134, 135, 137, 143, 150, 158, 173, 182, 196, 201, 207, 209, 216, 220, 226, 228, 232, 249, 264, 266, 272, 283, 287], "ab": [12, 191, 205, 241, 273], "abs_": 12, "abs_out": 12, "absolute_": 12, "absolute_out": 12, "angl": [12, 16, 113], "angle_out": 12, "sgn": 12, "uniqu": [12, 20, 55, 59, 61, 107, 108, 109, 111, 113, 135, 147, 180, 183, 194, 198, 216, 234, 270, 298], "boolean": [12, 118, 151, 193], "impli": [12, 106, 111, 152, 193, 246, 272, 282, 295], "schema_my_op1": 12, "my_op1": 12, "schema_my_op2": 12, "my_op2": 12, "schema_my_op2_backward": 12, "my_op2_backward": 12, "zoom": [12, 88, 103, 140, 187, 190], "1600": [12, 267, 282], "grow": [12, 55, 108, 137, 139, 146, 246], "unrealist": 12, "classifi": [12, 14, 23, 28, 37, 48, 51, 52, 53, 58, 63, 80, 88, 94, 99, 101, 106, 123, 129, 133, 136, 142, 152, 160, 165, 183, 184, 198, 199, 265, 287, 298], "accompani": 12, "comment": [12, 150, 167, 183, 216, 239, 255, 256, 268], "sacrif": [12, 174], "max_pool2d": [12, 134, 180, 240, 256, 273], "worri": [12, 58, 108, 145, 148, 167, 181, 249], "my_op": [12, 27], "squeez": [12, 16, 38, 97, 104, 152, 164, 188, 208, 209], "max": [12, 13, 23, 49, 55, 58, 88, 94, 101, 107, 134, 140, 150, 151, 152, 175, 177, 188, 190, 193, 199, 205, 208, 209, 221, 225, 226, 228, 231, 234, 283, 298, 301, 302], "op_backward": 12, "proper": [12, 36, 135, 138, 148, 161, 177, 181, 190, 194, 196, 216, 283], "rare": [12, 17, 55, 129, 170, 183, 283], "assumpt": [12, 16, 80, 106, 113, 114, 164, 170], "myadd_schema": 12, "my_add": 12, "_xlac": 12, "torch_xla_sourc": 12, "library_dir": 12, "extra_link_arg": 12, "make_relative_rpath": 12, "seamlessli": [12, 16, 59, 138, 194, 199, 229, 230, 267, 293], "nm": [12, 164, 255], "torchvsion": 12, "adhoc": 12, "unbox": 12, "potenti": [12, 16, 29, 80, 96, 107, 135, 137, 143, 170, 180, 191, 193, 198, 203, 224, 225, 226, 229, 230, 250, 293, 295], "wiki": [12, 155, 161, 204], "suit": [12, 97, 121, 177, 205, 220, 225, 226, 229, 235, 254, 270], "ship": [12, 49, 99], "delet": [12, 89, 94, 139, 148, 167, 172, 181, 190, 208], "old": [12, 23, 123, 136, 137, 174, 187, 204, 205, 221, 264], "until": [12, 55, 88, 96, 135, 137, 141, 142, 150, 151, 158, 167, 170, 177, 179, 180, 181, 187, 201, 216, 245, 267], "interrupt": [12, 59, 94, 183], "quarterli": 12, "cadenc": 12, "join": [12, 22, 38, 45, 49, 54, 55, 56, 59, 132, 134, 141, 148, 150, 152, 175, 179, 180, 181, 203, 204, 209, 245, 246, 247, 267, 302], "announc": 12, "slack": [12, 49], "Not": [12, 148, 176, 302], "search": [12, 22, 55, 82, 133, 140, 158, 174, 193, 208, 301], "instantiate_device_type_test": 12, "testtorchdevicetyp": 12, "testviewop": 12, "testtensordeviceop": 12, "testtypepromot": 12, "__reduce_ex__": 12, "monkei": 12, "direct": [12, 27, 29, 36, 48, 52, 58, 80, 96, 97, 99, 105, 113, 140, 150, 152, 155, 160, 164, 168, 183, 207, 208, 219, 246, 250, 287, 296], "suppos": [12, 26, 106, 107, 108, 113, 134, 191, 198, 200, 232, 250, 255], "vice": [12, 27, 45, 54, 264], "versa": [12, 27, 45, 54, 264], "Such": [12, 13, 96, 270], "seamless": [12, 194, 225, 229, 248], "coverag": [12, 155, 159, 161, 221, 224, 226, 229, 230, 266], "comprehens": [12, 25, 28, 45, 54, 97, 119, 158, 193, 229, 252, 282], "refactor": [12, 123, 146], "codegen": [12, 158, 252], "dev": [12, 94, 108, 143, 152, 176, 187, 190, 191, 209, 225, 262, 266], "andrew": [13, 200, 228], "gu": 13, "shard": [13, 132, 133, 146, 201, 245, 247, 248, 249, 287], "saw": [13, 16, 25, 27, 41, 55, 99, 101, 104, 108, 110, 155, 156, 159, 160], "skeleton": [13, 16, 280], "implicitli": [13, 48, 55, 96, 134, 145, 182, 193, 231, 262], "schedul": [13, 88, 94, 105, 129, 134, 135, 136, 148, 172, 175, 178, 187, 196, 198, 273, 283, 287, 290, 301], "rank": [13, 19, 22, 50, 59, 61, 88, 133, 134, 135, 136, 137, 148, 150, 172, 173, 179, 180, 181, 194, 201, 203, 245, 246, 247, 249, 301, 302], "commun": [13, 17, 22, 61, 133, 134, 135, 136, 138, 140, 146, 147, 148, 172, 173, 177, 179, 180, 181, 187, 190, 193, 194, 196, 201, 203, 211, 225, 248, 249, 283, 287], "particip": [13, 101, 147, 180, 266, 283], "hang": [13, 61, 142], "persist": [13, 26, 43, 119, 246, 266], "facilit": [13, 16, 55, 97, 104, 106, 123, 133, 136, 138, 151, 221, 232, 283], "earli": [13, 27, 58, 94, 148, 150, 170, 200, 218, 252], "shadow": [13, 223], "hook": [13, 136, 138, 143, 148, 174, 184, 252, 274], "mp": [13, 17, 37, 42, 45, 59, 61, 68, 80, 104, 122, 129, 133, 134, 135, 148, 150, 179, 180, 181, 245, 246, 247, 302], "ddp": [13, 19, 59, 60, 66, 133, 134, 135, 136, 138, 147, 187, 249, 302], "nccl": [13, 22, 59, 61, 88, 134, 135, 137, 138, 148, 150, 187, 194, 201, 203, 246, 247, 249], "world_siz": [13, 19, 22, 59, 61, 134, 135, 137, 148, 150, 172, 173, 179, 180, 181, 201, 203, 245, 246, 247, 249, 302], "num_input": 13, "master_addr": [13, 22, 59, 61, 134, 137, 148, 150, 173, 179, 180, 181, 203, 245, 246, 247, 302], "localhost": [13, 22, 59, 61, 103, 134, 137, 148, 173, 179, 180, 181, 187, 188, 194, 245, 246, 247, 249, 281, 292, 302], "master_port": [13, 22, 59, 61, 134, 137, 148, 150, 173, 179, 180, 181, 203, 245, 246, 247, 302], "29500": [13, 22, 150, 173, 179, 180, 181, 245, 302], "init_process_group": [13, 19, 22, 59, 61, 134, 135, 137, 148, 150, 172, 173, 201, 203, 246, 247, 249, 302], "device_id": [13, 61, 123, 135, 136, 148, 302], "nproc": [13, 59, 61, 134, 148, 179, 181, 201, 245, 246, 247, 302], "__name__": [13, 57, 59, 61, 94, 134, 135, 137, 148, 150, 152, 172, 179, 180, 181, 201, 209, 245, 246, 247, 252, 262, 302], "__main__": [13, 57, 59, 61, 94, 134, 135, 148, 150, 172, 179, 180, 181, 201, 245, 246, 247, 252, 262, 267, 302], "arbitrarili": [13, 55, 106, 274], "prior": [13, 17, 23, 56, 58, 96, 101, 106, 148, 160, 174, 188, 196, 197, 199, 226, 245, 247], "togeth": [13, 20, 25, 29, 37, 43, 55, 57, 66, 82, 91, 99, 101, 104, 105, 106, 110, 114, 134, 136, 144, 148, 151, 153, 170, 179, 181, 183, 190, 199, 226, 229, 231, 234, 250, 282, 295], "lr": [13, 23, 49, 52, 58, 94, 99, 107, 114, 123, 129, 134, 135, 136, 148, 150, 151, 158, 160, 175, 178, 179, 180, 181, 188, 243, 246, 247, 250, 252, 255, 256, 287, 290, 291, 302], "notabl": [13, 23, 94, 280], "addition": [13, 14, 41, 88, 139, 140, 148, 170, 193, 196, 197, 198, 203, 229, 230, 232, 246, 247, 292, 301], "divide_by_initial_world_s": 13, "world": [13, 16, 22, 27, 42, 60, 96, 104, 108, 138, 150, 157, 160, 173, 178, 179, 180, 193, 194, 203, 221, 246, 247, 249, 254], "nonetheless": [13, 106], "mind": [13, 45, 55, 58, 91, 106, 147, 164, 196, 253], "preliminari": [13, 150, 152], "delv": [13, 158, 295], "insight": [13, 80, 88, 150, 182, 267, 282], "join_hook": 13, "kwarg": [13, 25, 123, 136, 157, 161, 177, 180, 193, 194, 220, 236, 243, 250, 252, 280, 298], "join_devic": 13, "join_process_group": 13, "processgroup": [13, 19, 22, 66, 132, 133, 138, 181, 194, 203, 249, 283], "throw_on_early_termin": 13, "explain": [13, 14, 20, 24, 27, 48, 52, 58, 80, 97, 108, 114, 137, 138, 158, 191, 193, 196, 210, 220, 224, 229, 234, 270, 273, 293, 298], "joinconfig": 13, "_join_config": 13, "main_hook": 13, "repeatedli": [13, 101, 177, 181, 207], "post_hook": 13, "is_last_join": 13, "broadcast": [13, 73, 107, 114, 122, 136, 148, 150, 173, 193, 282, 302], "vacuou": 13, "contextlib": [13, 190], "nullcontext": 13, "conform": [13, 190], "interleav": [13, 201], "syncbatchnorm": [13, 61], "__exit__": 13, "heartbeat": 13, "notify_join_context": 13, "serializ": 13, "fulli": [13, 14, 16, 17, 24, 25, 26, 40, 66, 88, 94, 99, 100, 101, 114, 129, 132, 133, 140, 143, 146, 161, 164, 175, 178, 180, 182, 187, 196, 205, 218, 226, 234, 241, 247, 252, 255, 269], "proceed": [13, 52, 106, 119, 170], "overlap": [13, 25, 62, 134, 135, 136, 141, 146, 148, 170, 187, 190, 196, 201, 283], "moreov": [13, 170, 216, 255, 267], "permit": [13, 266], "customiz": [13, 151, 223], "idea": [13, 27, 28, 80, 91, 106, 108, 109, 110, 113, 122, 138, 144, 151, 158, 168, 178, 181, 183, 196, 216, 239, 245, 250, 262, 267, 270, 283, 301, 302], "counterjoinhook": 13, "sync_max_count": 13, "all_reduc": [13, 66, 134, 135, 150, 173, 203, 248], "get_rank": [13, 136, 148, 150], "process_group": [13, 203, 249], "common_rank": 13, "find_common_rank": 13, "max_count": 13, "clone": [13, 26, 27, 60, 104, 141, 145, 146, 150, 158, 161, 172, 201, 253, 298], "__call__": [13, 57, 73, 122, 174], "meth": [13, 16], "to_consid": 13, "reduceop": [13, 134, 135, 150], "device_count": [13, 59, 61, 94, 104, 134, 148, 164, 246, 247, 249], "highlight": [13, 55, 91, 115, 126, 135, 136, 182, 187, 191, 193, 194, 245, 255, 256, 295], "alexi": 14, "jacq": 14, "winston": 14, "her": [14, 173], "leon": 14, "gati": 14, "alexand": [14, 224], "ecker": 14, "matthia": 14, "bethg": 14, "artist": 14, "distanc": [14, 68, 69, 72, 73, 74, 77, 78, 96, 106, 122], "d_c": 14, "d_": 14, "indispens": [14, 177], "pil": [14, 24, 46, 57, 97, 176, 190, 198], "pretrain": [14, 24, 28, 48, 80, 82, 97, 113, 129, 133, 152, 175, 176, 183, 190, 196, 197, 204, 205, 209, 223, 224, 226, 228, 229, 240, 255, 256, 297, 298, 300], "resiz": [14, 23, 24, 52, 58, 82, 97, 151, 175, 205, 226, 228, 255, 291], "unabl": [14, 18, 27, 153, 169, 193, 218], "caff": 14, "picasso": 14, "jpg": [14, 38, 57, 58, 97], "reconvert": 14, "f_": [14, 177], "xl": [14, 254], "w_": [14, 113], "cl": [14, 82, 152, 206, 211, 280], "c": [14, 17, 18, 22, 23, 25, 29, 48, 68, 69, 91, 96, 97, 103, 104, 106, 113, 122, 133, 135, 142, 143, 145, 150, 152, 158, 161, 170, 176, 181, 182, 190, 191, 193, 194, 203, 211, 220, 229, 230, 252, 256, 262, 266, 267, 280, 281, 287, 297], "squar": [14, 41, 52, 57, 68, 69, 72, 73, 74, 77, 78, 96, 101, 104, 106, 122, 144, 145, 160, 168, 178, 182, 200], "contentloss": 14, "recomput": [14, 106, 144, 146, 168, 283], "act": [14, 48, 55, 96, 101, 104, 140, 151, 174, 178, 180, 193, 194], "gram": 14, "g_": 14, "hat": [14, 111], "counteract": 14, "pool": [14, 22, 49, 58, 94, 101, 106, 114, 123, 188, 194, 197], "tend": [14, 20, 96, 101, 106, 208, 234], "sl": 14, "19": [14, 20, 27, 38, 49, 94, 151, 158, 178, 193, 208, 210, 234, 254, 273], "vgg": 14, "child": [14, 121, 187, 209, 249], "connect": [14, 52, 94, 99, 101, 113, 129, 133, 137, 138, 150, 155, 157, 164, 174, 175, 176, 178, 196, 199, 203, 231, 249, 253, 269], "eval": [14, 20, 23, 24, 43, 55, 97, 114, 119, 123, 134, 135, 144, 152, 156, 175, 180, 183, 190, 196, 197, 204, 206, 209, 224, 228, 229, 230, 234, 240, 255, 256, 264, 291, 298, 300], "485": [14, 23, 57, 94, 97, 106, 175, 176, 205, 226, 228], "456": [14, 23, 57, 94, 97, 106, 175, 176, 205, 226, 228], "406": [14, 23, 57, 97, 106, 175, 176, 205, 226, 228], "229": [14, 23, 57, 97, 106, 175, 176, 205, 226, 228], "225": [14, 23, 57, 97, 106, 121, 175, 176, 205, 226, 228], "vgg19": [14, 161], "maxpool2d": [14, 49, 52, 94, 123, 157, 188], "align": [14, 133, 182, 183, 207, 217, 223, 252, 262], "depth": [14, 48, 58, 62, 96, 99, 104, 110, 139, 158, 193, 229, 243, 283], "immedi": [14, 22, 25, 45, 54, 58, 101, 104, 111, 150, 167, 179, 180, 187, 208], "white": [14, 18, 20, 80, 101, 114, 188, 190, 234], "input_img": [14, 97], "content_img": 14, "bfg": 14, "closur": [14, 193, 250], "reevalu": 14, "exce": [14, 80, 144, 194, 264], "sphinx_gallery_thumbnail_numb": 14, "neural_style_tutori": [14, 21], "paszk": [15, 150, 178], "dziedzic": 15, "shall": [15, 52, 58], "learnabl": [15, 52, 72, 73, 122, 123, 133, 236, 285], "badfftfunct": 15, "literatur": [15, 178], "confusingli": 15, "correl": [15, 88, 101, 114, 158], "filter": [15, 28, 55, 89, 97, 106, 139, 152, 175, 183, 194, 203, 209, 282], "flip": [15, 25, 159], "wrt": [15, 145], "numpy_extensions_tutori": [15, 21], "freeli": 16, "inspir": [16, 150, 159, 164, 182, 239, 270], "v1": [16, 20, 151, 178, 179, 181, 204, 234, 245, 267], "openai": [16, 133, 160, 177, 178, 179, 181, 298], "farama": [16, 177], "gymnasium": [16, 177, 178], "stateless": [16, 26, 153, 155], "encount": [16, 55, 135, 143, 158, 191, 193, 194, 199, 232, 283, 292, 298], "undertaken": 16, "broader": [16, 29], "wider": [16, 159], "acquaint": 16, "set_se": [16, 152, 209], "avenu": [16, 91], "backpropag": [16, 41, 42, 48, 52, 55, 80, 96, 107, 108, 109, 111, 113, 114, 122, 139, 160, 194], "_set_se": 16, "torqu": 16, "upward": 16, "posit": [16, 97, 101, 108, 133, 152, 168, 177, 178, 182, 183, 190, 193, 199, 203, 234, 265, 301], "angular": 16, "stand": [16, 91, 96, 114, 160, 199, 219], "equat": [16, 58, 152, 178, 269, 274], "motion": 16, "veloc": [16, 178], "theta": [16, 80, 108, 177], "_t": [16, 160], "sin": [16, 18, 68, 69, 72, 73, 74, 77, 78, 96, 104, 122, 211, 283, 293], "theta_t": 16, "dt": 16, "rad": 16, "sec": [16, 134, 152], "gravit": 16, "mass": 16, "accord": [16, 17, 28, 36, 104, 105, 123, 158, 160, 172, 174, 178, 182, 190, 219, 236, 241, 292], "theta_": [16, 160], "001": [16, 44, 49, 123, 148, 179, 188, 252, 255, 291], "deleg": [16, 25, 133, 226, 240], "privat": [16, 17, 27, 137, 173, 174, 216], "merg": [16, 26, 50, 97, 101, 176, 190, 255], "is_shar": [16, 151], "new_th": 16, "plu": [16, 107, 108], "new_thdot": 16, "neg": [16, 25, 41, 55, 97, 101, 107, 108, 114, 115, 152, 158, 170, 174, 177, 252, 265], "discourag": [16, 45, 54, 177], "possibli": [16, 58, 136, 177, 193, 203, 293], "omit": [16, 27, 96, 121, 136, 158, 177, 197, 199, 204, 226, 228, 229, 273, 280, 282], "agent": [16, 133, 178, 179, 181, 184], "param": [16, 23, 57, 73, 122, 123, 134, 135, 136, 145, 148, 150, 153, 155, 164, 169, 175, 180, 181, 200, 216, 250, 252, 280, 302], "mandatori": [16, 155, 177], "domain": [16, 28, 38, 42, 55, 56, 80, 105, 119, 133, 151, 177, 221, 283], "accur": [16, 23, 80, 94, 99, 121, 140, 157, 170, 181, 191, 218, 224, 296], "lazili": [16, 167], "costli": [16, 139, 283], "observation_spec": [16, 177], "compositespec": 16, "dictionari": [16, 42, 43, 55, 88, 113, 116, 123, 142, 167, 169, 177, 179, 180, 183, 190, 194, 204, 207, 209, 223, 272, 285, 287], "action_spec": [16, 151, 177], "reward_spec": [16, 177], "done_spec": 16, "input_spec": [16, 119, 177], "state_spec": 16, "output_spec": [16, 119], "neither": [16, 104, 200, 301], "shortcut": 16, "tensorspec": 16, "irrelev": [16, 173], "incorpor": [16, 106, 115, 133, 151, 182], "pseudo": [16, 28], "_make_spec": 16, "pendulumenv": 16, "gen_param": 16, "batch_lock": 16, "homonym": [16, 170], "check_env_spec": [16, 177], "rand_step": 16, "randomli": [16, 49, 57, 58, 77, 78, 94, 99, 101, 122, 142, 152, 160, 178, 183, 194, 209, 270], "invers": [16, 104, 207, 217, 245], "showcas": [16, 27, 70, 135, 136, 164, 167, 194, 196, 197, 210, 225], "thdot": 16, "summar": [16, 55, 57, 114, 126, 132, 135, 140, 152, 187, 193, 197], "_apply_transform": 16, "_call": 16, "inv": 16, "_inv_apply_transform": 16, "eventu": [16, 137, 144, 151], "out_keys_inv": 16, "unitari": 16, "sine": [16, 122], "cosin": [16, 254], "raw": [16, 27, 37, 49, 55, 73, 88, 122, 203, 296], "del_kei": 16, "mdp": 16, "gather": [16, 61, 97, 103, 134, 136, 138, 148, 150, 151, 157, 177, 201, 225, 239, 266], "unexplor": 16, "abil": [16, 27, 104, 114, 123, 138, 139, 150, 185, 188, 191, 199, 218, 240], "recreat": [16, 36, 48], "clip": [16, 55, 80, 175, 177], "scratch": [16, 36, 48, 55, 59, 106, 107, 123, 126, 129, 133, 184, 203, 284, 287], "advanc": [17, 20, 21, 23, 27, 48, 94, 109, 112, 115, 116, 118, 119, 132, 133, 136, 148, 170, 190, 194, 196, 199, 216, 219, 220, 224, 225, 229, 230, 234, 235, 239, 248, 250, 255, 256, 270, 283, 287, 301], "verif": [17, 180], "rapid": [17, 96, 219], "manufactur": 17, "imposs": [17, 99, 107, 167, 239], "simultan": [17, 26, 29, 36, 48, 62, 133, 140, 150, 170, 176, 283], "began": 17, "enhanc": [17, 97, 137, 141, 170, 185, 211, 220, 229, 230, 232, 241, 250, 264, 283, 298, 301], "rapidli": 17, "wrapper_custom_tensor_add": 17, "torch_fn": 17, "custom_cpu_fallback": 17, "operatorhandl": 17, "hint": [17, 22, 96, 106, 107, 111, 119, 139, 150, 179, 187, 193, 252], "cpu_fallback": 17, "cppfunction": 17, "makefromboxedfunct": 17, "cumtomselufunct": 17, "selu": 17, "wrapper_autogradcumstom__selu": 17, "wrapper_autogradcustom__selu": 17, "autocastprivateuse1": 17, "autocast": [17, 220, 229, 230, 234, 241, 255, 291], "kernel_privateuseon": 17, "makefallthrough": 17, "backendmodul": 17, "_register_device_modul": 17, "backend_nam": 17, "get_amp_supported_dtyp": 17, "is_autocast_en": 17, "get_autocast_dtyp": 17, "set_autocast_dtyp": 17, "set_autocast_en": 17, "generatorimpl": 17, "builder": [17, 193], "register_generator_privateuse1": 17, "customgeneratorimpl": 17, "make_custom_gener": 17, "deviceindex": 17, "device_index": 17, "make_gener": 17, "make_cumstom_gener": 17, "event": [17, 26, 88, 121, 134, 135, 179, 191, 197, 203, 273, 281, 296], "deviceguard": 17, "deviceguardimplinterfac": 17, "c10_register_guard_impl": 17, "customguardimpl": 17, "backend_meta_": 17, "extrameta": 17, "backendmeta": 17, "custombackendmetadata": 17, "unordered_map": 17, "tensorbackendmetaregistri": 17, "for_seri": 17, "for_deseri": 17, "expand": [17, 96, 107, 110, 116, 158, 165, 188, 197, 221, 246, 298], "timer": [17, 58, 183, 234, 243, 252, 271, 279], "ascend": [17, 58, 89, 232], "npu": [17, 224, 232], "meet": [17, 56, 58, 236, 256, 267], "usabl": [17, 123, 151, 156, 203, 284], "compli": 17, "habit": 17, "torch_npu": [17, 232], "exclus": [17, 27, 174], "rename_privateuse1_backend": 17, "register_privateuse1_backend": 17, "unsupported_dtyp": 17, "quint8": [17, 200], "generate_methods_for_privateuse1_backend": 17, "for_tensor": 17, "for_modul": 17, "for_storag": 17, "is_npu": 17, "perhap": [18, 80, 141, 174, 247], "prevent": [18, 41, 55, 61, 114, 121, 139, 142, 148, 158, 160, 170, 193, 194, 232, 266, 267, 283, 288, 301], "induc": [18, 174, 203], "bad": [18, 94, 139, 197, 208, 283], "fullgraph": [18, 143, 191, 243, 295], "uncom": [18, 55, 57, 69, 78, 99, 103, 110, 114, 122, 172, 178], "cropped_img": 18, "img": [18, 38, 49, 97, 133, 175, 188, 190], "black": [18, 80, 88, 101, 114, 133, 138, 140, 179, 183], "aka": [18, 159, 161, 170, 175, 199, 255, 297], "mutates_arg": [18, 119], "led": 18, "past": [18, 55, 56, 105, 110, 193, 199], "exercis": [18, 23, 49, 150, 175, 196, 266], "reader": [18, 111, 150, 196, 199, 282], "region": [18, 97, 104, 140, 157, 185, 190, 196, 197, 198, 262, 266, 271, 283, 287, 290, 294, 296], "unus": [18, 158, 173, 226], "forgot": [18, 203], "python_custom_op": [18, 21], "pritam": 19, "damania": 19, "yi": [19, 193, 297], "wang": [19, 28, 116, 118, 119, 158, 160, 203, 230], "distributeddataparallel": [19, 61, 62, 66, 132, 134, 135, 136, 150, 173, 181, 266, 302], "paradigm": [19, 20, 66, 106, 122, 132, 180, 181, 234], "dens": [19, 20, 194, 199, 216, 221, 234], "fc": [19, 48, 160, 164, 175, 236], "replic": [19, 22, 62, 66, 133, 134, 138, 146, 148, 150, 180, 181, 194, 249], "trainer": [19, 28, 61, 140, 146, 179, 180, 181, 234, 247], "hybrid": [19, 90, 92, 249], "pipedream": 19, "embeddingbag": [19, 22], "drive": [19, 29, 58, 96, 99, 101, 133, 160, 170, 216, 245], "respond": [19, 97, 160, 180], "amongst": [19, 194, 217], "themselv": [19, 101, 194, 218, 226], "remotemodul": 19, "kick": [19, 36, 48, 167, 179, 180, 181], "remot": [19, 66, 132, 140, 179, 180, 181, 187, 245, 250, 262, 292, 301], "hybridmodel": 19, "allreduc": [19, 88, 134, 138, 148, 173, 203, 283], "firstli": [19, 119, 158, 178], "tcp": [19, 61, 137, 146, 147, 150, 245], "init_method": [19, 148, 150, 201], "_run_train": [19, 181], "rpc_async": [19, 179, 181], "exit": [19, 155, 179, 180, 181, 203, 243, 244, 252, 294, 299, 301], "conflict": [19, 158, 193], "remote_emb_modul": 19, "rref": [19, 179, 180, 245, 250], "distributedoptim": [19, 180, 181, 245, 250], "remote_paramet": 19, "cannnot": 19, "crossentropyloss": [19, 23, 41, 49, 94, 108, 138, 172, 175, 181, 188, 204, 205, 226, 228, 255, 291], "get_next_batch": [19, 179, 181], "jess": [20, 234], "cai": [20, 234], "seek": [20, 91, 97, 234, 248], "grain": [20, 38, 96, 135, 150, 187, 191, 234, 266, 267, 282], "2n": [20, 234], "degrad": [20, 80, 234, 264], "sparsifi": [20, 133, 174, 234], "answer": [20, 41, 82, 97, 101, 108, 150, 152, 157, 167, 183, 193, 194, 234], "tune": [20, 23, 41, 88, 106, 114, 124, 132, 133, 134, 140, 143, 175, 176, 196, 208, 209, 220, 224, 234, 256, 270, 271, 279, 282, 287, 301], "recov": [20, 134, 135, 148, 161, 228, 234], "nearli": [20, 114, 188, 234, 267], "f1": [20, 152, 191, 209, 234], "86": [20, 94, 158, 176, 181, 199, 234, 252, 254, 267], "92": [20, 234, 254, 267], "3x": [20, 69, 94, 122, 197, 234, 241, 266, 283], "beginn": [20, 39, 50, 51, 83, 84, 85, 86, 90, 98, 100, 109, 117, 122, 124, 133, 234, 237, 270, 275, 276, 277, 278], "to_sparse_semi_structur": [20, 234], "motiv": [20, 80, 137, 158, 180, 200, 210, 217, 218, 221, 234], "affect": [20, 97, 101, 105, 106, 145, 170, 172, 196, 234, 283], "swap": [20, 57, 108, 138, 152, 170, 177, 199, 205, 208, 209, 221, 223, 228, 234, 280], "compress": [20, 97, 174, 216, 219, 224, 234, 256], "arrang": [20, 122, 234], "drawback": [20, 113, 193, 234, 246, 247], "2020": [20, 234], "amper": [20, 135, 164, 169, 234, 266], "cutlass": [20, 220, 234], "cusparselt": [20, 234], "milder": [20, 234], "account": [20, 56, 114, 151, 167, 170, 183, 188, 199, 209, 224, 234, 297], "retrain": [20, 234], "sweet": [20, 234], "spot": [20, 99, 103, 104, 141, 234], "2x": [20, 24, 91, 94, 133, 145, 167, 196, 197, 204, 234, 254], "theoret": [20, 58, 170, 216, 234, 288], "granular": [20, 135, 158, 194, 197, 209, 234, 273, 283, 301], "fp16": [20, 135, 161, 208, 220, 234], "resnet": [20, 48, 49, 97, 139, 175, 187, 205, 226, 228, 229, 234, 264, 283], "imagenet": [20, 49, 57, 97, 129, 175, 176, 205, 226, 228, 234], "76": [20, 161, 181, 199, 234, 252, 267], "resnext": [20, 234], "101_32x8d": [20, 234], "79": [20, 49, 94, 158, 226, 234, 252, 267, 273], "xception": [20, 234], "ssd": [20, 234, 283], "rn50": [20, 234], "coco2017": [20, 234], "bbap": [20, 234], "24": [20, 23, 94, 151, 158, 176, 199, 234, 254, 267], "maskrcnn": [20, 234], "fairseq": [20, 234], "en": [20, 25, 94, 155, 183, 190, 234], "de": [20, 22, 26, 183, 234], "wmt14": [20, 234], "bleu": [20, 234], "squad": [20, 234], "91": [20, 94, 151, 181, 234, 254, 267], "workflow": [20, 23, 40, 88, 93, 94, 115, 133, 134, 194, 219, 225, 231, 234, 270, 287], "perspect": [20, 27, 110, 177, 197, 234, 301], "subproblem": [20, 234], "bmatrix": [20, 111, 234], "handoff": [20, 234], "anticip": [20, 234], "area": [20, 97, 101, 188, 198, 208, 219, 234, 265], "colab": [20, 22, 28, 29, 40, 45, 54, 82, 100, 103, 114, 133, 150, 151, 152, 159, 175, 177, 178, 190, 194], "pip": [20, 24, 28, 56, 82, 88, 97, 103, 116, 118, 152, 160, 175, 176, 178, 187, 190, 191, 198, 203, 208, 224, 240, 254, 256, 265, 267, 269, 273, 281, 284, 285, 286, 288, 295, 301], "panda": [20, 38, 57, 80, 190], "hug": [20, 82, 158], "face": [20, 49, 57, 58, 80, 82, 158, 226, 298], "token": [20, 55, 82, 113, 135, 138, 142, 172, 182, 183, 199, 204, 209, 234, 283, 298], "val": [20, 23, 26, 135, 175, 176, 205, 226, 228, 234], "segment": [20, 133, 199, 208, 234], "text": [20, 38, 49, 58, 80, 82, 91, 97, 107, 108, 110, 111, 113, 132, 133, 135, 141, 142, 150, 152, 165, 170, 177, 178, 183, 187, 190, 199, 204, 225, 234, 262, 265, 287, 298], "wikipedia": [20, 155, 234], "articl": [20, 38, 234], "score": [20, 55, 97, 107, 111, 113, 121, 152, 182, 183, 198, 199, 201, 209, 234, 265, 298], "fair": [20, 106, 221, 234], "lowest": [20, 134, 174, 234], "l1": [20, 94, 174, 197, 234], "ao": [20, 23, 200, 204, 205, 208, 224, 226, 228, 229, 230, 234], "satisfi": [20, 140, 223, 234, 236, 283], "anytim": [20, 234], "pruner": [20, 234], "update_mask": [20, 234], "shot": [20, 179, 234, 298], "wouldn": [20, 113, 134, 151, 204, 234], "squash_mask": [20, 234], "quickstart": [20, 36, 37, 38, 39, 40, 41, 43, 45, 46, 133, 234], "28x": [20, 234], "amen": [20, 234], "spent": [20, 88, 182, 187, 196, 197, 234, 267, 270, 273, 288], "delta": [20, 158, 178, 234, 267, 282], "exact": [20, 106, 123, 144, 182, 193, 199, 203, 209, 226, 228, 234, 243], "78": [20, 49, 234, 252, 267], "53": [20, 49, 94, 161, 234, 252, 254, 273], "44": [20, 94, 158, 181, 234], "09": [20, 55, 158, 181, 184, 196, 234, 254], "93": [20, 121, 181, 234, 254, 267, 273], "49": [20, 49, 94, 161, 181, 209, 234, 267], "15": [20, 27, 28, 38, 50, 80, 94, 97, 99, 101, 129, 151, 175, 188, 190, 198, 234, 237, 252, 254, 267, 273], "54": [20, 94, 161, 197, 252, 267], "71x": [20, 197], "35": [20, 94, 138, 161, 237, 252, 254, 256], "74": [20, 94, 181, 209, 252, 254, 267, 273], "23x": 20, "72": [20, 94, 176, 252, 267, 273], "71": [20, 23, 25, 38, 57, 73, 158, 181, 252], "59": [20, 94, 176, 190, 252, 267, 273], "41": [20, 134, 176, 196, 252, 267, 273], "22x": 20, "286": [20, 94, 161, 190, 234], "65": [20, 38, 49, 57, 94, 181, 198, 199, 252, 253, 267], "247": [20, 94, 181], "63": [20, 94, 252, 264, 273], "14x": 20, "46": [20, 49, 94, 151, 152, 158, 161, 176, 196, 252], "02x": 20, "ye": [20, 56, 152, 167, 295], "47": [20, 94, 161, 252, 254, 267, 273], "68": [20, 57, 152, 158, 197, 252, 267], "18x": [20, 234], "36": [20, 49, 94, 176, 252, 254], "13x": 20, "159": [20, 94], "22": [20, 38, 49, 53, 73, 94, 151, 158, 161, 181, 252, 254, 267], "142": [20, 254], "23": [20, 94, 158, 181, 196, 252, 254, 267, 273, 282], "12x": [20, 199], "sparsesemistructuredtensor": [20, 234], "000": [20, 21, 23, 24, 28, 38, 40, 44, 68, 69, 70, 72, 74, 75, 97, 100, 102, 115, 118, 120, 121, 123, 124, 140, 156, 160, 161, 162, 184, 187, 188, 190, 194, 196, 204, 207, 221, 235, 237, 239, 265, 266, 267, 269, 270, 273, 279, 281, 282, 283, 284, 285, 286], "semi_structured_spars": [20, 21], "00": [21, 38, 44, 49, 53, 75, 79, 92, 94, 99, 102, 112, 120, 121, 124, 151, 158, 181, 184, 190, 208, 211, 235, 254, 273, 279, 290], "014": [21, 235], "torchrl": [21, 133, 151, 160, 184], "ddpg": [21, 133], "mb": [21, 23, 44, 53, 75, 79, 92, 102, 112, 120, 121, 124, 134, 152, 184, 204, 205, 209, 226, 228, 235, 264, 273, 279, 290, 302], "scipi": [21, 49, 133, 145, 191], "pendulum": [21, 133, 177], "acceler": [21, 37, 42, 45, 54, 55, 56, 63, 66, 68, 80, 82, 106, 118, 122, 129, 133, 141, 170, 197, 221, 225, 235, 241, 244, 254, 255, 270, 283], "bert": [21, 82, 101, 133, 134, 197, 224, 225, 229, 264, 270], "semi": [21, 133, 199, 225], "sparsiti": [21, 113, 133, 174, 199, 216, 218, 225, 235], "onnx": [21, 91, 133], "super_resolution_with_onnxruntim": [21, 24], "supervis": [21, 108, 133, 185, 190], "usb": [21, 133, 176], "usb_semisup_learn": [21, 28], "embeddingplann": [22, 133], "conda": [22, 27, 88, 97, 103, 150, 158, 203, 208, 225, 256, 265, 281, 282, 301], "cudatoolkit": 22, "sudo": [22, 187, 240], "rm": [22, 245], "miniconda3": [22, 26, 282], "py37_4": 22, "sh": [22, 148, 240, 253, 262], "anaconda": [22, 88, 97, 150, 281], "chmod": 22, "fbgemm": [22, 23, 194, 200, 204, 205, 264], "ipython": [22, 121], "cp": [22, 201, 240], "restart": [22, 27, 97, 103, 147, 178], "newli": [22, 129, 150, 250], "python37": 22, "dynload": 22, "enviro": 22, "spmd": [22, 138, 247], "mimic": [22, 23, 106, 175, 208, 209, 216], "launcher": 22, "embeddingbagcollect": 22, "bag": [22, 38, 40, 188, 194], "ebc": [22, 194], "4096": [22, 194, 254], "parameterconstraint": 22, "placement": [22, 136, 196, 224, 301], "evenli": [22, 96, 204], "intra": [22, 25, 135, 138, 152, 249], "interconnect": [22, 196, 269], "nvlink": [22, 138, 245], "data_parallel": 22, "planner": 22, "embedding_typ": 22, "embeddingcomputekernel": 22, "shardingtyp": 22, "dict": [22, 55, 57, 167, 177, 193, 198, 223, 230, 231, 246, 247, 250, 252, 266, 272, 280], "large_table_cnt": 22, "small_table_cnt": 22, "large_t": 22, "embeddingbagconfig": 22, "large_table_": 22, "embedding_dim": [22, 101, 107], "num_embed": 22, "feature_nam": 22, "large_table_feature_": 22, "poolingtyp": 22, "small_tabl": 22, "small_table_": 22, "small_table_feature_": 22, "gen_constraint": 22, "sharding_typ": 22, "table_wis": 22, "large_table_constraint": 22, "small_table_constraint": 22, "mimick": 22, "single_rank_execut": 22, "embeddingbagcollectionshard": [22, 194], "model_parallel": 22, "embeddingshardingplann": 22, "topologi": [22, 152, 194, 209, 247, 249, 255, 262], "moduleshard": 22, "shardingenv": 22, "init_distributed_single_host": 22, "pyre": 22, "fixm": 22, "set_devic": [22, 59, 61, 134, 135, 148, 201, 210, 246, 247, 249, 252], "compute_devic": 22, "pg": [22, 203], "sharder": [22, 194], "shardingplan": 22, "collective_plan": 22, "sharded_model": 22, "from_process_group": 22, "spmd_sharing_simul": 22, "get_context": [22, 150], "exitcod": 22, "factor": [22, 24, 101, 129, 170, 175, 178, 179, 191, 194, 206, 208, 246, 270], "medium": [22, 137, 198, 283], "large_table_0": 22, "parametershard": 22, "compute_kernel": 22, "batched_fus": 22, "sharding_spec": 22, "enumerableshardingspec": 22, "shardmetadata": 22, "shard_offset": 22, "shard_siz": 22, "large_table_1": 22, "small_table_0": 22, "small_table_1": 22, "finer": [22, 38, 197, 273], "halv": [22, 121], "row_wis": 22, "512": [22, 135, 172, 193, 204, 234, 241, 255, 267, 273], "imbal": [22, 196, 283], "vertic": [22, 25], "column_wis": 22, "unfortu": 22, "batched_dens": 22, "raghuraman": [23, 152, 175], "krishnamoorthi": [23, 152, 175], "jerri": [23, 204, 205, 206, 226, 229, 231], "zhang": [23, 204, 205, 206, 226, 229, 230, 231, 246, 247, 249], "decreas": [23, 42, 55, 80, 89, 106, 114, 138, 141, 194, 196, 197, 219], "mobilenetv2": [23, 225, 228], "np": [23, 49, 57, 97, 107, 152, 175, 176, 181, 188, 190, 205, 209, 217, 226, 228, 234, 282, 298], "dataload": [23, 36, 37, 39, 40, 41, 42, 43, 45, 46, 49, 50, 58, 61, 80, 94, 106, 124, 134, 135, 141, 150, 152, 170, 172, 175, 180, 187, 188, 190, 205, 209, 224, 226, 228, 255, 256, 257, 271, 283, 291], "filterwarn": [23, 190, 205, 226, 228], "deprecationwarn": [23, 151, 205, 226, 228], "seed": [23, 58, 80, 99, 106, 134, 135, 150, 152, 178, 179, 181, 205, 209, 226, 228], "manual_se": [23, 104, 107, 134, 135, 150, 152, 178, 179, 201, 205, 209, 226, 228, 234, 302], "191009": [23, 205, 226, 228], "floatfunct": 23, "quantstub": [23, 205, 253, 264], "dequantstub": [23, 205, 253, 264], "relu6": 23, "_make_divis": 23, "divisor": 23, "min_valu": 23, "tf": [23, 103], "divis": [23, 104, 193, 252], "tensorflow": [23, 103, 107, 109, 122], "blob": [23, 27, 119, 134, 156, 187, 200, 205, 240], "slim": [23, 122], "mobilenet": [23, 133, 176], "new_v": 23, "round": [23, 119, 135, 179, 267, 270, 282], "convbnrelu": 23, "in_plan": 23, "out_plan": 23, "kernel_s": [23, 134, 200, 253, 256], "momentum": [23, 48, 49, 70, 74, 94, 99, 105, 114, 122, 123, 144, 150, 175, 179, 188, 194, 200, 228, 250, 253, 255, 256, 285, 286, 291], "inplac": [23, 134, 175, 204, 223, 234, 253, 264], "invertedresidu": 23, "inp": [23, 175, 180, 193, 220, 248], "oup": 23, "expand_ratio": 23, "hidden_dim": [23, 101, 107], "use_res_connect": 23, "pw": 23, "dw": 23, "conv": [23, 58, 97, 101, 144, 156, 157, 161, 175, 180, 197, 204, 205, 230, 231, 253, 262, 273], "skip_add": 23, "num_class": [23, 179, 188, 190, 198], "width_mult": 23, "inverted_residual_set": 23, "round_nearest": 23, "v2": [23, 106, 126, 151, 176, 194, 232, 241, 246, 252], "width": [23, 48, 49, 52, 101, 104, 140, 164, 190, 197, 198, 298], "input_channel": 23, "last_channel": 23, "1280": [23, 198], "96": [23, 158, 181, 254], "160": [23, 152, 181, 190, 253, 267, 273], "320": [23, 256], "valueerror": [23, 250, 298], "invert": [23, 133, 177, 217], "residu": [23, 138], "output_channel": 23, "quant": [23, 175, 200, 209, 226, 230, 231, 253, 264], "dequant": [23, 175, 200, 205, 208, 209, 226, 229, 230, 231, 253, 256, 264], "isinst": [23, 136, 204, 205, 209, 210, 228, 231, 234, 280], "init": [23, 26, 27, 94, 137, 232, 236, 253], "kaiming_normal_": 23, "fan_out": 23, "zeros_": 23, "elif": [23, 152, 164, 172, 209, 250, 252], "ones_": 23, "normal_": 23, "bn": [23, 144, 157, 175, 200, 204, 228, 253], "numer": [23, 24, 45, 55, 77, 78, 104, 106, 107, 116, 122, 136, 140, 201, 205, 209, 225, 226, 228, 229, 234, 235, 266, 283], "fuse_model": [23, 175], "is_qat": [23, 200, 228, 229], "fuse_modul": [23, 175], "fuse_modules_qat": 23, "averagemet": [23, 205, 226, 228], "fmt": [23, 205, 226, 228], "avg": [23, 205, 226, 228, 254, 273], "__str__": [23, 194, 205, 226, 228], "fmtstr": [23, 205, 226, 228], "__dict__": [23, 205, 224, 226, 228, 229, 230, 280], "topk": [23, 97, 205, 226, 228, 256, 300], "maxk": [23, 205, 226, 228], "pred": [23, 114, 134, 138, 152, 175, 180, 188, 205, 209, 226, 228, 256], "correct_k": [23, 205, 226, 228], "mul_": [23, 205, 226, 228, 250], "criterion": [23, 49, 52, 94, 175, 181, 183, 188, 204, 205, 226, 228, 255, 291], "neval_batch": [23, 228], "top1": [23, 205, 226, 228, 256], "acc": [23, 175, 190, 205, 226, 228], "2f": [23, 134, 176, 179, 181, 196, 197, 205, 226, 228, 264], "top5": [23, 205, 226, 228, 300], "cnt": [23, 205, 226, 228], "acc1": [23, 205, 226, 228], "acc5": [23, 205, 226, 228], "load_model": [23, 205, 226, 228], "model_fil": [23, 205, 226, 228], "state_dict": [23, 43, 49, 55, 59, 61, 94, 134, 135, 136, 148, 152, 174, 175, 191, 204, 205, 226, 228, 246, 247, 255, 264, 266, 269, 271, 279, 280, 284, 287], "weights_onli": [23, 43, 49, 123, 136, 148, 190, 204, 205, 226, 228, 256], "load_state_dict": [23, 43, 49, 59, 94, 105, 123, 136, 148, 175, 190, 204, 205, 226, 228, 246, 247, 256, 266, 271, 279, 284], "print_size_of_model": [23, 152, 204, 205, 209, 226, 228], "getsiz": [23, 152, 204, 205, 209, 226, 228, 264], "data_path": [23, 94, 205, 226, 228], "prepare_data_load": [23, 205, 226, 228], "randomresizedcrop": [23, 57, 205, 226, 228], "randomhorizontalflip": [23, 57, 175, 205, 226, 228], "dataset_test": [23, 205, 226, 228], "centercrop": [23, 97, 175, 205, 226, 228], "train_sampl": [23, 205, 226, 228], "randomsampl": [23, 152, 205, 209, 226, 228], "test_sampl": [23, 205, 226, 228], "sequentialsampl": [23, 152, 205, 209, 226, 228], "train_batch_s": [23, 205, 226, 228], "data_loader_test": [23, 205, 226, 228, 229, 230], "eval_batch_s": [23, 152, 204, 205, 209, 226, 228], "saved_model_dir": [23, 205, 226, 228], "float_model_fil": [23, 205, 226, 228], "mobilenet_pretrained_float": 23, "scripted_float_model_fil": [23, 205], "mobilenet_quantization_script": 23, "scripted_quantized_model_fil": 23, "mobilenet_quantization_scripted_quant": 23, "float_model": [23, 204, 205, 209, 223, 224, 226, 228, 229], "fusion": [23, 88, 133, 157, 158, 194, 197, 205, 208, 220, 228, 250, 253, 255, 283, 287, 290, 299], "baselin": [23, 25, 28, 97, 106, 190, 208, 226, 234, 267, 282], "un": [23, 104, 183], "num_eval_batch": [23, 228], "sophist": [23, 122, 177], "num_calibration_batch": 23, "mymodel": [23, 200], "estim": [23, 52, 57, 58, 101, 140, 177, 178, 183, 194, 208, 267, 288], "qconfig": [23, 175, 200, 204, 205, 206, 209, 226, 230, 231, 253, 264], "default_qconfig": [23, 205], "calibr": [23, 170, 200, 204, 206, 224, 228, 229, 230, 256], "56": [23, 94, 161, 176, 196, 234, 252, 267, 273, 301], "4x": [23, 94, 135, 197, 204, 205, 270], "x86": [23, 200, 204, 205, 220, 225, 241, 264], "basi": [23, 135, 152, 164], "histogram": [23, 223, 226, 281], "per_channel_quantized_model": 23, "get_default_qconfig": [23, 204, 205, 253, 264], "67": [23, 49, 94, 121, 158, 197, 200, 209, 252, 254], "qat": [23, 175, 200, 229], "train_one_epoch": [23, 228], "ntrain_batch": [23, 228], "avgloss": [23, 228], "5f": [23, 228], "start_tim": [23, 228], "global_avg": [23, 228], "qat_model": 23, "get_default_qat_qconfig": [23, 264], "prepare_qat": [23, 175, 264], "freez": [23, 48, 129, 175, 197, 225, 228, 229, 230, 235, 255, 283], "num_train_batch": [23, 228], "nepoch": [23, 228], "disable_observ": [23, 228], "intrins": [23, 200], "freeze_bn_stat": 23, "quantized_model": [23, 152, 204, 205, 209, 224, 226, 228], "confirm": [23, 24, 94, 97, 114, 115, 135, 159, 179, 300], "allud": [23, 80], "run_benchmark": 23, "img_load": 23, "elaps": [23, 134, 183, 204, 209], "num_batch": [23, 150], "enumer": [23, 49, 94, 105, 107, 134, 136, 138, 151, 175, 176, 180, 187, 188, 234, 255, 256, 291], "num_imag": 23, "0f": [23, 175, 256], "61": [23, 49, 121, 161, 234, 252, 254], "dynamo_export": 24, "torchdynamo": [24, 133, 143, 193, 211, 224, 229, 230, 231], "technologi": [24, 66, 106, 133, 150, 199, 250, 287], "torchscript": [24, 116, 118, 124, 133, 156, 161, 194, 197, 209, 225, 235, 264, 273, 287], "platform": [24, 27, 116, 148, 150, 187, 241, 254, 262, 283, 291, 300, 301], "mac": [24, 152, 240], "prove": [24, 196], "onnxruntim": [24, 116, 118], "resolut": [24, 101, 190], "video": [24, 41, 48, 49, 59, 61, 62, 82, 96, 97, 99, 101, 103, 104, 105, 126, 132, 133, 146, 147, 187, 283], "wide": [24, 37, 66, 96, 101, 114, 137, 138, 141, 142, 150, 152, 173, 183, 208, 250, 265, 283], "superresolut": 24, "shi": 24, "et": [24, 28, 55, 58, 80, 150, 174, 183], "al": [24, 28, 55, 58, 80, 174, 183], "upscal": 24, "ycbcr": 24, "ordinarili": [24, 266], "torch_model": 24, "batchnorm": [24, 58, 61, 123, 156, 161, 205, 224, 226, 228, 229, 230, 283, 285], "ax": [24, 57, 108, 111, 133, 175, 183, 184, 188], "dynamic_ax": 24, "torch_out": 24, "super_resolut": 24, "modelproto": 24, "bundl": [24, 293], "ml": [24, 40, 80, 104, 106, 132, 133, 140, 194, 225, 252, 254], "proto": 24, "checker": 24, "check_model": 24, "onnx_model": 24, "rtol": 24, "1e": [24, 73, 94, 101, 107, 122, 136, 144, 164, 175, 179, 181, 200, 201, 234, 252, 253], "03": [24, 38, 49, 94, 99, 151, 180, 181, 190, 201, 254, 282], "atol": [24, 164, 201, 234], "05": [24, 25, 38, 44, 80, 94, 135, 181, 200, 253, 254], "contact": [24, 135, 239], "pronounc": [24, 170], "famou": [24, 28, 80], "224x224": [24, 97, 176], "cb": 24, "cr": 24, "grayscal": [24, 38, 151, 160], "blue": [24, 48, 97, 135, 138, 262], "red": [24, 138, 143, 188, 223, 262], "chroma": 24, "sensit": [24, 106, 146, 155, 194, 205], "human": [24, 55, 80, 97, 142, 152, 160, 183, 190, 203], "mobil": [24, 64, 65, 106, 200, 211, 213, 214, 222, 225, 240, 242, 253, 260, 261, 264, 271, 287], "deploi": [24, 60, 116, 133, 140, 147, 174, 176], "cloud": [24, 40, 60, 100, 114, 116, 301], "inferenc": [24, 43], "azur": [24, 187], "servic": [24, 55, 94, 176, 255, 288, 301], "inter": [25, 133, 138, 147, 164, 199, 249, 283], "workload": [25, 27, 106, 121, 132, 133, 136, 147, 148, 187, 194, 196, 197, 205, 211, 220, 226, 246, 249, 250, 254, 255, 287, 301], "fragment": [25, 197, 283], "fork": [25, 151, 178, 301], "fn": [25, 143, 150, 155, 158, 191, 210, 243, 252, 280, 293, 296], "fut": [25, 179, 181], "x_normal": 25, "x_parallel": 25, "async": [25, 179, 181, 194, 246], "sort": [25, 29, 101, 107, 111, 121, 152, 176, 199, 209, 273, 283], "parlanc": 25, "revers": [25, 48, 55, 96, 107, 136, 155, 164, 168, 176, 183, 194], "bidirectionalrecurrentlstm": 25, "cell_f": 25, "input_s": [25, 151, 203], "hidden_s": [25, 55, 151, 204], "cell_b": 25, "output_f": 25, "x_rev": 25, "output_b": 25, "output_b_rev": 25, "lstmensembl": 25, "n_model": 25, "modulelist": [25, 168], "demo": [25, 29, 50, 133, 173, 187, 254, 264], "took": [25, 96, 150, 157, 167, 182, 191, 196, 197, 203, 296], "future_f": 25, "stuff": 25, "worth": [25, 27, 58, 167, 170, 180, 270], "profil": [25, 88, 124, 133, 134, 170, 182, 184, 196, 220, 223, 254, 267, 271, 279, 283, 287], "chrome": [25, 96, 170, 182, 187, 273], "prof": [25, 182, 254, 273], "export_chrome_trac": [25, 182], "json": [25, 97, 121, 170, 182, 187, 248, 273, 297], "navig": [25, 66, 187, 188, 262], "button": [25, 56, 58, 116, 187, 262], "timelin": [25, 167, 187, 197, 262], "horizont": [25, 133, 287, 290], "opportun": [25, 91, 116, 151, 194, 250], "breviti": [25, 27, 199, 216, 270, 280], "intro": [25, 39, 40, 44, 61, 108, 109, 132, 151, 188, 244, 252], "tracer": [25, 172], "member": [26, 72, 122, 175, 225, 232], "portion": [26, 88, 167, 170, 172, 174, 203, 254, 262, 282], "custom_class": 26, "mystackclass": 26, "customclasshold": 26, "stack_": 26, "push": [26, 58, 80, 101, 106, 159, 208, 239, 253], "pop": [26, 101, 107, 152, 209, 234], "pop_back": 26, "intrusive_ptr": [26, 173, 267, 282], "make_intrus": [26, 173], "elem": [26, 280], "smart": [26, 193], "class_": 26, "my_class": 26, "contructor": 26, "yourclass": 26, "ref": [26, 226], "unari": 26, "add_librari": [26, 27], "cmake_cxx_standard": 26, "custom_class_project": 26, "rh": 26, "devtoolset": 26, "torchbind_tutori": 26, "j": [26, 27, 36, 48, 49, 80, 96, 106, 107, 111, 136, 152, 164, 183, 203], "libcustom_class": 26, "filesystem": [26, 94, 99, 150, 207], "treatment": [26, 190, 218, 219, 270], "cpp_inference_exampl": 26, "foobarbaz": 26, "tostr": 26, "add_subdirectori": [26, 27], "drill": [26, 96, 282], "75": [26, 27, 94, 106, 129, 134, 175, 252, 270], "momfoobarbaz": 26, "incred": 26, "make_custom_class": 26, "tocustomclass": 26, "iscustomclass": 26, "export_attr": 26, "scripted_foo": 26, "runtimeerror": [26, 137, 173, 176, 298], "__torch__": 26, "def_pickl": 26, "pushivalueimpl": 26, "pickler": 26, "__getstate__": 26, "__setstate__": 26, "pickl": [26, 43, 94, 114, 123, 167, 203, 267], "salient": 26, "wherea": [26, 114, 143, 188, 190, 208, 217, 218, 230], "confus": [26, 27, 107, 114, 141, 155, 190, 194, 208, 217, 218, 219, 226], "manipulate_inst": 26, "trycustomop": 26, "bar": [26, 55, 88, 180, 190, 191, 205, 226, 236, 262], "relax": [26, 168, 298], "standalon": [26, 59, 201, 266, 295], "blend": [26, 27], "smoothli": [26, 27], "subsequ": [27, 80, 97, 106, 123, 134, 141, 151, 179, 181, 183, 191, 197, 203, 208, 229, 230, 283, 286, 292, 301], "resort": 27, "emb": [27, 107, 111, 113, 151, 181, 204], "opencv": [27, 49], "vision": [27, 28, 42, 49, 57, 97, 101, 124, 133, 167, 225, 265, 298, 300], "mat": 27, "warpperspect": 27, "warp_perspect": 27, "warp": 27, "image_mat": 27, "cv": [27, 28, 221], "col": [27, 38, 175], "cv_32fc1": 27, "warp_mat": 27, "output_mat": 27, "dsize": 27, "output_tensor": 27, "from_blob": 27, "ptr": 27, "short": [27, 29, 88, 101, 104, 107, 109, 112, 132, 142, 150, 168, 170, 177, 183, 185, 193, 229, 270, 283, 286], "opencv2": 27, "hpp": [27, 173], "alongsid": [27, 155, 188, 190, 194, 266], "goodi": 27, "hardcod": [27, 144, 193, 231], "strikingli": 27, "flat": [27, 136], "scope": [27, 101, 104, 110, 121, 139, 143, 193, 197, 262, 288], "dealloc": [27, 187, 197, 283], "invalid": [27, 217, 218, 219, 250, 267, 283], "quot": [27, 129], "metaprogram": 27, "experiment": [27, 134, 140, 156, 181, 200, 201, 203, 210, 224, 256, 281, 283], "target_compile_featur": 27, "cxx_std_14": 27, "opencv_cor": 27, "opencv_imgproc": 27, "libwarp_perspect": 27, "sensat": 27, "0x7f618fc6fa50": 27, "3218": 27, "4611": 27, "4636": 27, "3746": 27, "0978": 27, "5005": 27, "3245": 27, "0169": 27, "4458": 27, "1862": 27, "1692": 27, "noteworthi": [27, 254], "frozen": [27, 36, 48, 136, 160, 175, 209, 220, 237], "prim": [27, 209], "revel": 27, "drop": [27, 56, 101, 103, 116, 146, 167, 181, 196, 204, 208, 254], "26": [27, 38, 49, 158, 160, 161, 176, 181, 252, 254], "restrict": [27, 29, 55, 91, 150, 187, 191, 193, 200, 239], "script_method": [27, 91], "42": [27, 94, 152, 178, 181, 196, 209, 252, 267], "tensortobool": 27, "block0": 27, "block1": 27, "21": [27, 94, 121, 176, 252, 254, 267, 273, 282], "sent": [27, 150, 170, 179, 193, 245], "wire": 27, "dlopen": 27, "example_app": 27, "cxx_range_for": 27, "throw": [27, 96, 104, 137, 179], "errorreport": 27, "mayb": [27, 110, 113, 153, 193, 225], "subdirectori": [27, 58, 198], "prefix": [27, 135, 139, 143, 151, 152, 187, 191, 193, 203, 208, 209, 267, 282, 301, 302], "inconveni": [27, 216], "altogeth": [27, 164, 218], "nb": [27, 105, 239], "impress": [27, 158, 193], "opencv_photo": 27, "happi": [27, 156, 157], "4125": 27, "8262": 27, "5345": 27, "6111": [27, 267], "3997": [27, 82], "4683": 27, "5969": 27, "0850": 27, "0698": 27, "4597": 27, "0926": 27, "5727": 27, "9319": 27, "4834": 27, "1747": 27, "0162": 27, "9521": 27, "6269": 27, "lastli": [27, 94, 133, 167, 193], "driver": [27, 99, 187], "infrastructur": [27, 66], "vener": 27, "beforehand": [27, 164, 231, 264], "is_python_modul": 27, "extra_ldflag": 27, "lopencv_cor": 27, "lopencv_imgproc": 27, "approxim": [27, 55, 97, 119, 135, 144, 157, 160, 164, 174, 178, 196, 209, 254, 269, 283], "0x7f3e0f840b10": 27, "op_sourc": 27, "cpp_sourc": [27, 267], "rout": [27, 143, 158, 193], "quirki": 27, "with_opt": 27, "no_python_abi_suffix": 27, "bottom": [27, 107, 187, 190, 193, 262], "suffix": [27, 45, 54, 88, 158], "tag": [27, 57, 101, 109, 113, 193, 207, 272, 281], "0x7ff51c5b7bd0": 27, "hao": 28, "chen": [28, 193], "unifi": [28, 133, 144, 223, 248, 265, 298], "ssl": 28, "modular": [28, 38, 123, 191, 285], "fixmatch": 28, "defixmatch": 28, "speech": [28, 80, 101, 107, 109, 113, 133, 142, 283], "light": [28, 29, 58, 99, 103, 104, 144, 265], "vit": [28, 298], "strong": [28, 107, 193, 196, 219, 298], "unlabel": [28, 104], "confid": [28, 58, 97, 99, 105, 108, 140, 177, 178, 188, 266], "threshold": [28, 55, 88, 140, 177, 181, 190, 254, 283], "statu": [28, 94, 137, 140, 143, 181, 193, 297], "absorb": 28, "gaussian": [28, 58, 140, 177], "overcom": [28, 115], "quantiti": [28, 106, 133, 138, 159, 164, 169], "qualiti": [28, 160, 183], "trade": [28, 140, 167, 220, 270], "afford": 28, "nlp": [28, 99, 101, 108, 111, 113, 126, 133, 152, 184, 197, 209, 221, 229, 266, 270, 283], "audio": [28, 38, 49, 133, 154, 186, 189], "semilearn": 28, "get_dataset": 28, "get_data_load": 28, "weak": 28, "get_net_build": 28, "get_algorithm": 28, "get_config": 28, "hyper": [28, 182, 301], "87": [28, 38, 49, 94, 121, 181, 220, 254, 267], "lb_imb_ratio": 28, "ulb_imb_ratio": 28, "microsoft": [28, 40, 118, 119, 152, 187, 211], "kihyuk": 28, "sohn": 28, "yidong": 28, "jamesre": 29, "fb": 29, "michael": [29, 107, 243, 244, 252, 266, 294, 299], "suo": 29, "rev2": 29, "hierarchi": [29, 197], "3x4": 29, "my_cel": 29, "redefin": 29, "mycel": 29, "succinctli": [29, 168], "mydecisiong": 29, "tape": 29, "rewind": 29, "tracedmodul": [29, 91], "ir": [29, 158, 206, 250, 293], "commonli": [29, 46, 55, 74, 94, 101, 106, 122, 172, 176, 183, 187, 200, 250, 255, 274, 283, 288], "acquir": [29, 104, 123, 174, 177, 181], "traced_cel": 29, "laden": 29, "submodul": [29, 55, 91, 101, 115, 136, 168, 182, 232, 236, 253, 264, 270], "branch": [29, 96, 115, 193, 197, 198, 229, 240, 255], "nowher": 29, "faithfulli": [29, 115, 216], "analysi": [29, 94, 96, 105, 133, 134, 157, 158, 182, 187, 190, 193, 196, 201, 208, 262, 270, 282, 298], "decis": [29, 96, 109, 112, 151, 170, 193, 216, 217, 219, 241, 283, 293, 299], "inlin": [29, 58, 96, 99, 103, 105, 143, 156, 158, 216, 220, 225, 237, 288], "freestand": 29, "neurip": 29, "1hiicg6jrkbnr5hvk2": 29, "vnmi88vi9puzej": 29, "intro_to_torchscript_tutori": [29, 124, 237], "audio_data_augmentation_tutori": [30, 32], "audio_datasets_tutori": 31, "audio_feature_extractions_tutori": 33, "audio_io_tutori": 34, "frac": [36, 48, 69, 91, 96, 107, 108, 110, 113, 122, 139, 145, 150, 177, 178, 199], "partial": [36, 48, 94, 96, 110, 123, 134, 135, 136, 138, 139, 143, 151, 159, 201, 250, 255, 284, 287], "leaf": [36, 48, 96, 191, 206], "retain_graph": [36, 143], "surround": [36, 170], "mark": [36, 55, 82, 138, 143, 161, 178, 179, 193, 196, 197, 205, 206, 218, 262], "acycl": [36, 48], "dag": 36, "chain": [36, 48, 96, 104, 108, 109, 136, 144, 158, 179, 218, 231], "accumul": [36, 48, 52, 55, 58, 96, 99, 107, 110, 145, 160, 167, 178, 179, 180, 181, 266, 270, 286], "vec": [36, 48, 96, 107, 164, 220], "langl": 36, "x_1": [36, 110, 164], "x_n": [36, 58], "rangl": 36, "y_1": [36, 110], "y_m": 36, "ccc": [36, 48, 96], "y_": [36, 48, 96, 107], "x_": [36, 48, 96], "cdot": [36, 48, 58, 96, 113, 139], "vdot": [36, 48, 96], "ddot": [36, 48, 96], "v_1": 36, "v_m": 36, "life": [36, 106, 141, 142, 246], "autogradqs_tutori": [36, 39, 44, 83], "compris": [37, 38, 58, 123], "fashionmnist": [37, 38, 40, 42, 46, 188], "mtia": [37, 42, 45, 68, 80, 104, 122, 129], "xpu": [37, 42, 45, 68, 80, 104, 122, 129, 230, 255, 273], "neuralnetwork": 37, "minibatch": [37, 38, 103, 114, 141, 153, 169, 172], "28x28": [37, 114, 188, 269], "784": [37, 103, 114, 153, 188], "nonlinear": 37, "phenomena": 37, "seq_modul": 37, "logit": [37, 41, 106, 152, 209, 254], "infti": [37, 178], "parameter": [37, 234], "preview": 37, "buildmodel_tutori": [37, 39, 44], "messi": 38, "primit": [38, 42, 122, 133, 138, 159, 170, 194, 197, 199, 203, 226, 241], "fashion": [38, 55, 103, 105, 118, 135, 138, 140, 180, 185, 188, 190, 191, 194, 255], "zalando": 38, "60": [38, 49, 116, 135, 141, 142, 161, 175, 176, 181, 183, 188, 193, 252, 254, 273], "internet": [38, 176], "target_transform": [38, 42, 46], "training_data": [38, 107, 111], "test_data": [38, 204], "4m": 38, "5k": 38, "359kb": 38, "229k": 38, "38": [38, 94, 121, 181, 197, 252, 254, 282], "674kb": 38, "885k": 38, "48mb": 38, "93m": 38, "06": [38, 94, 151, 254], "06mb": 38, "52m": 38, "9mb": [38, 49, 94], "0m": [38, 94], "1mb": [38, 49], "58": [38, 49, 94, 141, 161, 234, 252, 256], "2m": [38, 49, 94], "6mb": [38, 94], "18": [38, 94, 97, 119, 121, 141, 151, 158, 175, 176, 181, 208, 252, 254, 264, 267, 297], "9m": [38, 49], "5mb": [38, 49, 94], "84": [38, 49, 57, 94, 121, 123, 151, 160, 188, 196], "3m": [38, 94], "2mb": [38, 94], "29": [38, 152, 176, 181, 252, 267], "321kb": 38, "42m": 38, "197k": 38, "772kb": 38, "492k": 38, "26mb": 38, "67m": 38, "40mb": 38, "83m": 38, "87mb": 38, "05mb": 38, "15k": 38, "3mb": [38, 94], "labels_map": 38, "shirt": [38, 40, 188], "trouser": [38, 40, 188], "pullov": [38, 40, 188], "dress": [38, 40, 188], "coat": [38, 40, 188], "sandal": [38, 40, 188], "sneaker": [38, 40, 188], "ankl": [38, 40, 188], "boot": [38, 40, 176, 188], "figsiz": [38, 175, 188], "sample_idx": [38, 234], "randint": [38, 57, 58, 136, 152, 172, 209, 255], "add_subplot": [38, 188], "titl": [38, 80, 97, 141, 151, 170, 175, 183, 190], "img_dir": 38, "csv": [38, 55, 57, 135], "annotations_fil": 38, "pd": [38, 190], "io": [38, 55, 57, 94, 103, 133, 179, 182, 190, 204, 225, 264, 287], "decode_imag": 38, "customimagedataset": 38, "img_label": 38, "read_csv": 38, "img_path": 38, "iloc": 38, "tshirt1": 38, "tshirt2": 38, "ankleboot999": 38, "tupl": [38, 45, 54, 88, 99, 101, 104, 106, 111, 113, 116, 152, 178, 193, 198, 201, 204, 205, 209, 219, 226, 228, 231, 270, 282, 300], "read_imag": 38, "reshuffl": 38, "overfit": [38, 99, 114, 123, 142, 175], "train_dataload": 38, "shuffl": [38, 42, 49, 57, 61, 94, 99, 105, 114, 134, 135, 150, 175, 176, 180, 187, 188, 201, 256], "test_dataload": 38, "train_featur": 38, "train_label": 38, "985": [38, 94, 254], "data_tutori": [38, 39, 44], "quickstart_tutori": [39, 42, 44], "tensorqs_tutori": [39, 44, 45, 86], "tensor_tutori": [39, 51, 53, 54], "transforms_tutori": [39, 44, 46], "autograd_tutori": [39, 48, 51, 53], "optimization_tutori": [39, 41, 44], "saveloadrun_tutori": [39, 43, 44], "sphx_glr_beginner_basics_autogradqs_tutori": [39, 44], "sphx_glr_beginner_basics_buildmodel_tutori": [39, 44], "sphx_glr_beginner_basics_intro": [39, 44], "sphx_glr_beginner_basics_saveloadrun_tutori": [39, 44], "sphx_glr_beginner_basics_transforms_tutori": [39, 44], "sphx_glr_beginner_basics_optimization_tutori": [39, 44], "sphx_glr_beginner_basics_quickstart_tutori": [39, 44], "sphx_glr_beginner_basics_tensorqs_tutori": [39, 44], "sphx_glr_beginner_basics_data_tutori": [39, 44], "suraj": [40, 59, 60, 61, 62, 121, 146, 147, 160, 196], "subramanian": [40, 59, 60, 61, 62, 121, 146, 147, 160, 196], "juarez": 40, "cassi": 40, "breviu": 40, "dmitri": 40, "soshnikov": 40, "ari": 40, "bornstein": 40, "belong": [40, 141, 152, 194], "favorit": [40, 100, 150, 157], "id": [40, 88, 100, 143, 148, 152, 179, 180, 181, 190, 193, 194, 204, 234, 246, 247, 252, 280, 301], "walkthrough": [41, 48, 54, 88, 121], "3blue1brown": [41, 48], "unpredict": [41, 96, 148], "jump": [41, 80, 111, 115, 116, 118, 119, 160, 293], "untrain": 41, "dissimilar": [41, 104, 113], "regress": [41, 114, 152, 185, 209, 267, 281], "nllloss": [41, 108], "classif": [41, 49, 58, 80, 82, 94, 97, 99, 104, 105, 106, 108, 129, 133, 134, 142, 152, 176, 185, 198, 199, 209, 240, 286], "logsoftmax": 41, "deposit": [41, 48], "train_loop": 41, "test_loop": 41, "warmstart": [41, 271, 279, 287], "torchtext": [42, 56, 99, 105, 133], "torchaudio": [42, 56, 99, 105, 133, 135, 176, 187, 208, 230], "cifar": [42, 49, 99, 188], "coco": [42, 198], "conduct": [42, 97, 158, 173, 208], "unpickl": [43, 123, 203], "fail": [43, 96, 104, 115, 123, 158, 170, 176, 178, 182, 191, 193, 203, 225, 228, 231, 232, 255, 266, 298], "inconsist": [43, 123, 158], "legaci": [43, 94, 137], "checkpoint": [43, 55, 82, 94, 136, 146, 167, 172, 207, 208, 255, 266, 271, 279, 285, 287], "tip": [43, 58, 100, 113, 188, 271, 279, 287], "beginner_bas": 44, "986": [44, 158], "ndarrai": [45, 46, 54, 104, 190], "elimin": [45, 116, 121, 144, 153, 158, 159, 176, 193, 199, 206, 221, 232, 250], "overridden": [45, 54, 151, 272], "1200": [45, 267], "breez": [45, 54], "subtli": [45, 54], "y1": [45, 198], "y2": 45, "y3": 45, "wise": [45, 54, 80, 104, 108, 138, 150, 158, 161, 164, 193, 194, 283, 297], "z1": [45, 158], "z2": 45, "z3": 45, "aggreg": [45, 48, 99, 121, 160, 190, 217, 273], "operand": [45, 96, 193], "denot": [45, 108, 111, 194, 216, 217, 221], "t_": [45, 54], "problemat": [45, 54, 158, 168, 283], "hot": [46, 55, 80, 101, 113, 141, 142, 151, 183], "floattensor": [46, 104], "intens": [46, 91, 158, 170, 197, 241, 283, 301], "scatter_": [46, 179], "prop": 48, "proportion": [48, 167], "travers": [48, 181, 256], "height": [48, 52, 101, 104, 190, 197, 198, 262, 298], "3a": [48, 176], "9a": 48, "2b": 48, "dq": [48, 226], "bf": 48, "external_grad": 48, "finetun": [48, 124, 133, 139, 167, 184], "unfrozen": 48, "exclusionari": 48, "autodiff": [48, 133, 159], "pillow": [49, 99], "librosa": 49, "cython": 49, "nltk": 49, "spaci": 49, "viz": [49, 97], "huge": [49, 108, 113, 122, 138, 148, 151], "airplan": [49, 99, 106], "automobil": [49, 99, 106], "bird": [49, 99], "deer": [49, 99], "dog": [49, 99, 106, 198, 265], "frog": [49, 99], "hors": [49, 99], "truck": [49, 99, 106], "3x32x32": 49, "color": [49, 58, 97, 99, 101, 103, 104, 140, 160, 161, 176, 188, 190, 198], "32x32": [49, 52, 99, 106, 116, 188], "extrem": [49, 113, 161, 194], "pilimag": 49, "brokenpipeerror": 49, "trainset": [49, 94, 99, 188], "trainload": [49, 94, 188], "testset": [49, 94, 188], "testload": [49, 94, 188], "plane": [49, 137], "car": 49, "170m": [49, 94, 254], "655k": 49, "55mb": 49, "55m": 49, "31": [49, 94, 135, 151, 158, 231, 252, 254, 267, 273, 282], "94": [49, 94, 140, 226, 254, 273], "43": [49, 151, 252, 254, 267], "6m": [49, 94], "102mb": 49, "55": [49, 94, 161, 196, 226, 252, 267, 301], "107mb": 49, "39": [49, 94, 134, 151, 181, 199, 254, 267], "66": [49, 94, 134, 252, 254, 267], "8m": 49, "110mb": 49, "5m": [49, 94], "112mb": 49, "90": [49, 94, 152, 181, 254], "114mb": 49, "102m": 49, "113m": 49, "115mb": 49, "73": [49, 158, 181, 196, 234, 252, 267], "125m": 49, "80": [49, 94, 140, 141, 161, 181, 252, 270, 298], "137m": 49, "116mb": 49, "148m": [49, 254], "160m": 49, "fun": [49, 55, 115, 116, 118, 119, 177, 270], "unnorm": [49, 188], "npimg": [49, 188], "datait": [49, 188], "make_grid": [49, 175, 188], "fc1": [49, 94, 123, 134, 153, 180, 188, 209, 256], "fc2": [49, 94, 123, 134, 180, 188, 209, 256], "fc3": [49, 94, 123, 188], "flatten": [49, 52, 73, 94, 106, 114, 122, 134, 138, 151, 164, 175, 180, 193, 254], "entropi": [49, 58, 99, 101, 105, 138, 286], "running_loss": [49, 94, 175, 188], "2000": [49, 73, 94, 99, 106, 122, 188, 190, 193, 203, 267, 302], "1999": [49, 73, 94], "mini": [49, 52, 55, 58, 94, 103, 111, 114, 169, 176, 188, 256], "5d": [49, 94], "193": 49, "834": 49, "6000": [49, 94, 99], "645": 49, "8000": [49, 94, 99, 282], "545": [49, 298], "10000": [49, 58, 94, 99, 107, 151, 172, 181, 267, 282], "494": [49, 94], "12000": [49, 94, 99], "451": 49, "384": [49, 234, 298], "351": 49, "324": [49, 94, 161], "309": 49, "311": 49, "284": [49, 99, 181], "cifar_net": 49, "learnt": 49, "truth": [49, 80, 116, 198, 225], "okai": 49, "groundtruth": 49, "wasn": [49, 107, 110, 193], "energi": [49, 55], "chanc": [49, 55, 106, 160], "hmmm": 49, "correct_pr": 49, "classnam": 49, "total_pr": 49, "correct_count": 49, "1f": [49, 152, 188, 204, 209], "34": [49, 94, 121, 176, 254, 267, 273, 282], "69": [49, 94, 97, 209, 252, 267], "plai": [49, 55, 58, 106, 108, 133, 177, 184, 197, 229, 230, 301], "chat": [49, 55, 183], "del": [49, 136, 172, 210, 252], "607": [49, 53], "cifar10_tutori": [49, 51, 53], "sung": 50, "kim": 50, "jenni": 50, "kang": 50, "mytensor": 50, "my_tensor": [50, 123], "parallelli": 50, "getitem": 50, "cnn": [50, 106, 133, 164, 168, 169, 185, 190, 197, 198, 229, 255, 264], "capsul": 50, "monitor": [50, 114, 150, 197], "output_s": [50, 151, 203], "former_torchi": 50, "parallelism_tutori": 50, "data_parallel_tutori": [50, 51, 53, 85], "neural_networks_tutori": [51, 52, 53], "gentl": [51, 53, 62, 63, 132], "glimps": 52, "convnet": [52, 97, 151, 160, 175, 180], "learning_r": [52, 73, 106, 122, 152], "lenet": [52, 80, 99, 103, 105, 174, 256], "nsampl": 52, "nchannel": 52, "least": [52, 80, 104, 123, 140, 142, 148, 160, 170, 176, 183, 193, 247, 250, 267, 270, 302], "clear": [52, 57, 80, 96, 107, 108, 113, 139, 143, 158, 170, 181, 190, 210, 218, 252, 267], "sub_": 52, "nesterov": [52, 123], "616": [53, 182], "beginner_blitz": 53, "matthew": [55, 93, 123], "inkawhich": [55, 58, 80, 91, 93, 123], "movi": [55, 56, 97], "cornel": [55, 56], "dialog": [55, 56], "artifici": [55, 106, 269], "intellig": 55, "onlin": [55, 151, 152, 160, 177, 180], "helpdesk": 55, "bot": 55, "predefin": [55, 106, 114, 151, 231, 256, 283], "compani": 55, "IT": 55, "teach": [55, 58, 106, 183], "boom": 55, "hello": [55, 108, 167], "am": [55, 110, 142, 183], "hospit": 55, "lawyer": 55, "friend": [55, 167], "arrest": 55, "kid": 55, "sorri": 55, "san": 55, "francisco": [55, 114], "goodby": 55, "luong": [55, 183], "jointli": [55, 183], "acknowledg": [55, 150], "borrow": [55, 181], "yuan": 55, "kuei": 55, "wu": [55, 137, 201, 210, 220], "ywk991112": 55, "sean": [55, 141, 142, 183], "robertson": [55, 141, 142, 183], "spro": 55, "floydhub": 55, "textutil": 55, "__": [55, 68, 80, 106, 122, 129, 190, 270], "reformat": 55, "rich": [55, 262], "charact": [55, 113, 133, 146, 165, 177, 183, 184], "220": [55, 94, 181], "579": [55, 161], "exchang": [55, 116, 118, 135, 150, 183, 187], "292": [55, 94], "035": 55, "617": 55, "713": [55, 94, 99], "utter": [55, 56], "divers": 55, "variat": [55, 105, 114, 145, 199, 216, 237, 267, 282], "formal": [55, 216, 247], "sentiment": 55, "datafil": 55, "tab": [55, 103, 105, 183, 188, 262], "sentenc": [55, 101, 107, 108, 111, 113, 142, 150, 152, 183, 199, 221], "jsonl": [55, 56], "loadlinesandconvers": 55, "lineid": 55, "characterid": 55, "conversationid": 55, "movieid": 55, "extractsentencepair": 55, "formatted_movie_lin": 55, "unescap": 55, "delimit": 55, "busi": [55, 142, 196, 301], "vocabulari": [55, 99, 101, 113, 138, 141, 152, 221, 283], "implicit": [55, 96, 136, 193, 262, 283], "discret": [55, 255], "voc": 55, "addword": 55, "addsent": 55, "infrequ": 55, "unicod": [55, 141, 142, 183], "ascii": [55, 113, 141, 142, 183], "unicodetoascii": 55, "letter": [55, 141, 142, 183], "lowercas": [55, 114, 183], "punctuat": [55, 183], "normalizestr": 55, "aid": [55, 123, 194, 272], "max_length": [55, 152, 209, 234], "filterpair": 55, "stackoverflow": [55, 141, 142, 183, 267], "518232": [55, 141, 142, 183], "2809427": [55, 141, 142, 183], "tactic": 55, "benefici": [55, 101, 132, 178, 220, 232, 283, 286, 301], "soften": 55, "difficulti": [55, 177], "min_count": 55, "massag": 55, "accommod": 55, "shorter": [55, 57, 114, 183, 187, 216], "eos_token": 55, "english": [55, 108, 111, 141, 165, 183], "indexesfromsent": 55, "zeropad": 55, "inputvar": 55, "outputvar": 55, "pad_token": [55, 152], "batch2traindata": 55, "bunch": [55, 141, 142, 262, 297], "aforement": [55, 88, 106, 199, 256, 293], "brain": 55, "sutskev": 55, "discov": [55, 119, 150, 180, 199, 232], "accomplish": [55, 58, 141, 150, 164, 236, 249, 267, 282], "jeddy92": 55, "ts_seq2seq_intro": 55, "invent": [55, 58, 177], "cho": [55, 196, 197], "2014": [55, 58], "bidirect": [55, 107, 133, 151, 152], "gru": [55, 101, 141, 142, 183], "colah": 55, "2015": [55, 106], "fp": [55, 94, 133, 164], "unpack": [55, 152, 206, 209, 240], "pack_padded_sequ": 55, "pad_packed_sequ": 55, "input_seq": 55, "input_length": [55, 135], "n_layer": [55, 172], "num_direct": 55, "sole": [55, 187], "combat": [55, 113], "bahdanau": [55, 183], "groundwork": 55, "h_t": [55, 111], "attn": [55, 183], "softmax": [55, 97, 101, 106, 111, 113, 114, 141, 176, 179, 181, 188, 199, 221, 254, 300], "unidirect": 55, "input_step": 55, "last_hidden": 55, "encoder_output": 55, "num_word": 55, "masknllloss": 55, "clever": [55, 108], "teacher": [55, 106, 133, 183], "teacher_forcing_ratio": [55, 183], "instabl": [55, 183], "craft": [55, 80, 113, 142], "explod": [55, 101], "essenc": [55, 110], "nan": [55, 217, 252], "overshoot": 55, "steep": 55, "cliff": 55, "goodfellow": [55, 58, 80], "2016": 55, "www": [55, 152, 183, 198], "deeplearningbook": 55, "sos_token": 55, "realiti": [55, 58, 80, 110, 114, 175, 182, 282], "tie": 55, "trainit": [55, 183], "n_iter": 55, "explanatori": 55, "lift": [55, 239], "tarbal": 55, "NOT": [55, 91, 107, 123, 143, 145, 146, 148, 167], "decoder_output": 55, "greedysearchdecod": 55, "searcher": 55, "evaluateinput": 55, "press": [55, 58], "gracefulli": [55, 59, 180, 247], "prompt": [55, 56, 208, 298], "regardless": [55, 104, 105, 107, 159, 170, 180], "attn_model": 55, "concat": [55, 110, 205, 231], "loadfilenam": 55, "save_dir": [55, 190], "model_nam": [55, 135, 224, 229, 230, 234, 255], "corpus_nam": [55, 56], "encoder_n_lay": 55, "decoder_n_lay": 55, "_checkpoint": [55, 135], "tar": [55, 82, 123], "checkpoint_it": 55, "folk": 55, "congratul": [55, 119, 139, 141, 194, 269, 284, 285, 286], "tailor": [55, 150, 170, 194, 301], "cool": [55, 58, 167, 169, 239], "003": [55, 58, 80, 91, 92, 99, 102, 103, 105, 106, 108, 110, 112, 124, 129, 142, 155, 158, 159, 170, 182, 184, 191, 193, 198, 199, 208, 235], "chatbot_tutori": [55, 124], "wen": [56, 191, 193, 296], "uninstal": [56, 152], "reinstal": 56, "torchdata": 56, "chatbot": [56, 124], "browser": [56, 103, 105, 116, 187, 248], "subfold": 56, "visit": [56, 208, 256], "in_": 56, "_colab": 56, "_name": 56, "mount": [56, 203], "gdrive": 56, "upload": [56, 248], "rerun": [56, 143, 167], "evolv": [56, 158, 164], "t4": 56, "sasank": [57, 129, 175], "chilamkurthi": [57, 129, 175], "scikit": [57, 152], "facial": 57, "pose": [57, 248, 249], "landmark": 57, "dlib": 57, "image_nam": 57, "part_0_x": 57, "part_0_i": 57, "part_1_x": 57, "part_1_i": 57, "part_2_x": 57, "part_67_x": 57, "part_67_i": 57, "0805personali01": 57, "83": [57, 94, 196, 254, 282], "98": [57, 158, 181, 254], "134": [57, 151], "1084239450_e76e00b7e7": 57, "70": [57, 94, 161, 181, 197, 234, 252, 267], "236": 57, "257": [57, 267], "312": [57, 161, 298], "person": [57, 194, 198], "img_nam": 57, "__len__": [57, 114, 141, 150, 198, 204], "__getitem__": [57, 114, 141, 150, 198], "randomcrop": [57, 175], "crop": [57, 99, 140, 185, 198], "tsfm": 57, "transformed_sampl": 57, "safer": [57, 267], "stick": [57, 150, 161], "lose": [57, 59, 104, 106, 160, 194, 270, 287], "collate_fn": 57, "indent": [57, 267], "imagefold": [57, 58, 99, 175], "ant": [57, 129, 175], "xxy": 57, "jpeg": 57, "xxz": 57, "bee": [57, 129, 175], "nsdf3": 57, "asd932_": 57, "data_transform": [57, 175], "hymenoptera_dataset": 57, "hymenoptera_data": [57, 175], "dataset_load": 57, "data_loading_tutori": [57, 124], "nathan": [58, 80, 91, 93], "celebr": [58, 133], "pictur": [58, 80, 136, 138, 183], "thorough": [58, 196, 197], "shed": [58, 265], "spend": [58, 88, 167, 267, 273], "sake": [58, 151, 174, 178, 284, 285], "ian": 58, "constantli": [58, 80, 178], "outsmart": 58, "equilibrium": 58, "perfect": [58, 96, 148, 218], "notat": [58, 80], "chw": [58, 176], "3x64x64": 58, "thought": [58, 89, 217, 282], "latent": [58, 113], "p_": 58, "p_g": 58, "minimax": 58, "logd": 58, "underset": 58, "mathbb": [58, 91, 164, 178], "sim": 58, "radford": 58, "unsupervis": 58, "drawn": [58, 114, 177], "rgb": [58, 99, 106, 160, 176, 190], "volum": [58, 134], "manualse": 58, "dataroot": 58, "image_s": [58, 298], "spatial": [58, 97, 99, 101, 133, 184, 198], "64x64": 58, "nc": [58, 220], "nz": 58, "ngf": 58, "ndf": 58, "num_epoch": [58, 175, 228], "0002": 58, "ngpu": 58, "celeb": 58, "img_align_celeba": 58, "celeba": 58, "188242": 58, "173822": 58, "284702": 58, "537394": 58, "stdev": 58, "02": [58, 94, 120, 151, 158, 181, 184, 211, 254], "weights_init": 58, "reiniti": 58, "criteria": 58, "netg": 58, "netd": 58, "critic": [58, 91, 136, 147, 170, 201, 246, 250, 264, 282], "downsampl": [58, 99, 160], "promot": 58, "healthi": 58, "bceloss": 58, "ell": [58, 183], "l_1": 58, "l_n": 58, "quad": [58, 178], "y_n": 58, "bce": 58, "gt": [58, 121], "fixed_nois": 58, "establish": [58, 270], "Be": [58, 96], "somewhat": [58, 170], "collaps": 58, "ganhack": 58, "secondli": 58, "loss_d": 58, "loss_g": 58, "versu": [58, 80, 133, 141, 241], "anim": [58, 99], "music": 58, "dcgan_faces_tutori": [58, 124], "mingpt": [59, 60, 61, 62, 146, 147], "aw": [59, 61, 134, 146, 147, 196, 197, 287], "p3": [59, 60, 61, 69, 122, 146, 147], "8xlarg": [59, 61], "youtub": [59, 60, 61, 62, 96, 97, 99, 101, 103, 104, 105, 133, 146, 147], "failur": [59, 115, 147, 148, 158, 193, 203, 244, 298], "disrupt": [59, 203, 296], "suscept": [59, 249], "elast": [59, 135, 148, 249], "attempt": [59, 96, 104, 108, 135, 170, 193, 203, 241, 272, 296], "minutia": 59, "multinod": [59, 146, 194], "load_snapshot": 59, "snapshot_path": 59, "train_step": 59, "should_checkpoint": 59, "save_snapshot": 59, "membership": [59, 147], "intervent": [59, 106, 209, 293], "diff": [59, 61, 88, 133, 226, 267, 282], "multigpu": [59, 61, 147], "multigpu_torchrun": 59, "envvari": 59, "ddp_setup": [59, 61], "12355": [59, 61, 134, 148, 246, 247], "local_rank": [59, 135, 147, 148, 152, 172, 203, 209], "gpu_id": [59, 61, 147], "_save_snapshot": 59, "model_st": 59, "epochs_run": 59, "_load_snapshot": 59, "max_epoch": 59, "_run_epoch": [59, 61], "total_epoch": [59, 61], "save_everi": [59, 61], "nproc_per_nod": [59, 135, 136, 148, 172, 203, 249], "migrat": [59, 61, 196, 283], "fault": [60, 61, 62, 94, 146, 147, 170], "toler": [60, 61, 62, 94, 96, 146, 147], "cluster": [60, 94, 103, 135, 140, 146, 147, 148, 150, 247, 249, 292], "torchrun": [60, 66, 135, 136, 146, 147, 172, 201, 203, 249], "amazon": 60, "ec2": [60, 134], "gentli": 60, "stat": [61, 135, 143, 177, 187, 194, 228, 273, 282], "replica": [61, 62, 66, 134, 136, 148, 150, 302], "convert_sync_batchnorm": 61, "single_gpu": 61, "mytraindataset": 61, "distributedsampl": [61, 62, 134, 135, 152, 209], "destroy_process_group": [61, 134, 135, 137, 148, 172, 201, 246, 247], "excess": [61, 88, 138, 191, 255, 266], "train_data": 61, "train_dataset": [61, 106, 135, 234, 255, 291], "set_epoch": [61, 134, 135], "b_sz": 61, "_run_batch": 61, "ckp": 61, "_save_checkpoint": 61, "load_train_obj": 61, "prepare_dataload": 61, "shorthand": 61, "ring": [62, 138, 201], "older": [62, 121, 122, 153, 169, 170, 178, 208], "destroi": [62, 96, 155], "soumith": [63, 150], "chintala": [63, 150], "scientif": [63, 101, 104, 122], "cifar10": [63, 94, 99, 187, 255, 286, 291], "executorch": [64, 65, 133, 213, 214, 222, 226, 238, 240, 242, 258, 259, 260, 261, 263, 298], "Will": [66, 136], "constabl": [66, 136], "categor": [66, 88, 103, 151, 179, 181, 194, 197], "fsdp": [66, 136, 138, 146, 246, 247, 249], "tp": [66, 203, 249], "pp": 66, "dtensor": [66, 138, 248, 287], "devicemesh": [66, 138, 287], "reshard": [66, 136, 247], "mesh": [66, 132, 136, 138, 249], "recip": [66, 121, 133, 197, 215, 240, 243, 245, 248, 250, 252, 262, 265, 266, 267, 268, 269, 270, 272, 273, 280, 284, 285, 286, 288, 290, 292, 293, 294, 295, 296, 297, 298, 300, 302], "c10d": [66, 148, 173, 203, 283], "all_gath": [66, 134, 135, 150, 173], "p2p": 66, "isend": [66, 150], "guidelin": [66, 283], "fullyshardeddataparallel": [66, 134, 135, 136, 138, 246, 247, 249], "torchtitan": [66, 172, 201], "polynomi": [68, 69, 70, 72, 73, 74, 77, 78, 122], "pi": [68, 69, 72, 73, 74, 77, 78, 96, 122, 133, 178, 252], "euclidean": [68, 69, 72, 73, 74, 77, 78, 96, 106, 122], "polynomial_autograd": 68, "bx": [69, 122, 252], "cx": [69, 108, 122], "p_3": [69, 122], "5x": [69, 94, 122], "legendr": [69, 122], "polynomial_custom_funct": 69, "strang": [70, 91, 122], "fifth": [70, 122], "tough": [70, 122], "dynamic_net": [70, 75], "polynomial_modul": [72, 75], "99": [73, 122, 181], "213": [73, 181], "74969482421875": 73, "199": 73, "147": 73, "0091094970703": 73, "299": [73, 190], "09352111816406": 73, "399": 73, "83846282958984": 73, "499": 73, "51": [73, 94, 161, 181, 196, 252, 254], "439857482910156": 73, "599": 73, "67356491088867": 73, "699": 73, "37420654296875": 73, "799": 73, "085891723632812": 73, "899": [73, 158, 300], "829322814941406": 73, "999": [73, 188, 252], "94504165649414": 73, "1099": 73, "988523483276367": 73, "1199": 73, "659899711608887": 73, "1299": 73, "756656646728516": 73, "1399": 73, "141926765441895": 73, "1499": 73, "72308349609375": 73, "1599": 73, "437371253967285": 73, "1699": 73, "24227237701416": 73, "1799": 73, "108865737915039": 73, "1899": 73, "01755428314209": 73, "95498275756836": 73, "009523937478661537": 73, "8494109511375427": 73, "0016430370742455125": 73, "09228777140378952": 73, "linspac": [73, 96, 122], "xx": [73, 122, 158], "flaten": [73, 122], "mse": [73, 101, 106, 122], "loss_fn": [73, 122, 148, 151, 172, 179, 246, 247, 302], "y_pred": [73, 122, 254], "linear_lay": [73, 122], "540": [73, 75, 254], "polynomial_nn": [73, 75], "polynomial_optim": [74, 75], "beginner_examples_nn": 75, "polynomial_numpi": [77, 79], "biggest": [78, 203], "polynomial_tensor": [78, 79], "004": 79, "beginner_examples_tensor": 79, "appreci": [80, 107], "overlook": [80, 267], "secur": [80, 187], "vulner": 80, "surpris": [80, 168], "impercept": 80, "perturb": [80, 97], "drastic": [80, 193, 297], "overarch": 80, "misclassif": 80, "alter": [80, 123, 208, 270, 274, 285], "har": 80, "remark": [80, 191], "mathbf": 80, "nabla_": [80, 108], "007": 80, "misclassifi": 80, "gibbon": 80, "clearli": [80, 140, 203, 216, 217], "pretrained_model": [80, 190], "fgsm_attack": 80, "clean": [80, 134, 135, 141, 148, 167, 172, 194, 201, 216, 223], "data_grad": 80, "_imag": 80, "_grad": 80, "strength": [80, 188, 223], "_data": 80, "trend": [80, 89, 187], "curv": [80, 187, 188], "linearli": 80, "lunch": 80, "BUT": [80, 110], "percept": 80, "tradeoff": [80, 133, 139, 140, 150, 177, 288], "evid": [80, 137], "defend": 80, "nip": 80, "defens": 80, "competit": [80, 153, 169, 301], "defenc": 80, "dirti": 80, "fgsm_tutori": [80, 124], "torchvision_tutori": [81, 184, 198], "multimod": [82, 133], "ai": [82, 97, 108, 109, 114, 134, 140, 152, 160, 183, 203, 220, 241, 247, 255, 265, 283], "ow": 82, "ubiquit": 82, "caption": 82, "vqa": 82, "unimod": 82, "contrast": [82, 142, 148, 169, 170, 193, 197, 216], "textvqa": 82, "dl": [82, 197, 208, 241, 256], "fbaipublicfil": [82, 208], "pythia": 82, "vocab": [82, 108, 111, 138, 152, 209], "gz": 82, "xf": 82, "prepend": [82, 301], "exclam": 82, "34602": 82, "consum": [82, 118, 121, 139, 158, 170, 177, 179, 181, 182, 205, 223, 231, 273, 283, 300], "uniform": [82, 196, 236, 301], "berttoken": [82, 152, 209], "flava_model_for_classif": 82, "mlp": [82, 115, 138, 153, 194, 196], "toi": [82, 107, 134, 148, 156, 181, 193, 194, 229, 247, 280], "mdetr": 82, "omnivor": 82, "multitask": 82, "flava_finetuning_tutori": [82, 124], "nn_tutori": [84, 114, 124], "blitz": [85, 116, 141, 142, 183, 188], "anupam": [88, 89], "bhatnagar": [88, 89], "holistictraceanalysi": 88, "env_nam": [88, 177], "deactiv": 88, "trace_dir": 88, "trace_analysi": 88, "traceanalysi": 88, "engag": [88, 225], "datafram": [88, 140, 190], "time_spent_df": 88, "get_temporal_breakdown": 88, "enqueu": 88, "slowdown": [88, 135, 139], "consecut": [88, 142, 151, 160, 170, 176, 190, 197, 301], "insuffici": [88, 178, 196], "delai": [88, 148, 179, 194, 196], "stall": [88, 196, 197, 203, 301], "gap": [88, 91], "nanosecond": 88, "consecutive_kernel_delai": 88, "get_idle_time_breakdown": 88, "idle_time_df": 88, "show_idle_interval_stat": 88, "percentag": [88, 174, 196, 221], "visualize_pctg": 88, "comm": 88, "comp": 88, "mem": [88, 121, 273], "proport": [88, 167], "pie": [88, 167], "chart": [88, 103, 295], "kernel_type_metrics_df": 88, "kernel_metrics_df": 88, "get_gpu_kernel_breakdown": 88, "bottleneck": [88, 121, 135, 138, 147, 167, 170, 179, 187, 191, 196, 197, 243, 262], "plotli": [88, 97, 140], "hover": [88, 140, 176], "pan": 88, "num_kernel": [88, 252], "duration_ratio": 88, "preced": [88, 96, 104, 144, 151, 156, 197, 205, 224, 226, 229, 230], "lab": [88, 188, 208], "image_render": 88, "jupyterlab": 88, "gpu_kernel_breakdown": 88, "tflop": 88, "oversubscrib": 88, "unresolv": [88, 218], "extent": [88, 104], "overlap_df": 88, "get_comm_comp_overlap": 88, "h2d": [88, 245], "d2h": [88, 245], "d2d": 88, "memcpi": 88, "memset": 88, "outstand": [88, 229], "generate_trace_with_count": 88, "_with_count": 88, "screenshot": [88, 262], "get_memory_bw_summari": 88, "get_queue_length_summari": 88, "get_memory_bw_time_seri": 88, "get_queue_length_time_seri": 88, "mem_bw_summari": 88, "queue_len_summari": 88, "mem_bw_seri": 88, "queue_len_seri": 88, "get_queue_length_seri": 88, "25th": 88, "50th": 88, "75th": 88, "percentil": 88, "cudalaunchkernel": 88, "cudamemcpyasync": 88, "cudamemsetasync": 88, "kernel_info_df": 88, "get_cuda_kernel_launch_stat": 88, "outlier": [88, 178], "microsecond": [88, 159, 182, 253, 267], "cutoff": 88, "runtime_cutoff": 88, "launch_delay_cutoff": 88, "occasion": [89, 180, 183], "hta": [89, 187], "tracediff": 89, "cumul": [89, 178], "compare_trac": 89, "ops_diff": 89, "absent": 89, "visualize_counts_diff": 89, "visualize_duration_diff": 89, "ten": [89, 99, 103, 106], "df": 89, "compare_traces_output": 89, "sort_valu": 89, "diff_count": 89, "largest": [89, 114, 190, 209], "diff_dur": 89, "differer": 89, "overshadow": 89, "profilerstep": [89, 158], "loc": [89, 151, 177, 266], "trace_diff_demo": 89, "learning_hybrid_frontend_through_example_tutori": [90, 91, 92], "hybrid_frontend": 90, "introduction_to_hybrid_frontend_tutori": 90, "shini": 91, "enjoi": [91, 160], "aquaint": 91, "bridg": [91, 248], "refin": [91, 193], "gradual": [91, 167], "proven": [91, 219, 229], "resouc": 91, "consumpt": [91, 99, 101, 103, 105, 121, 135, 138, 140, 158, 170, 174, 187, 283, 287, 302], "discrep": [91, 224], "interwork": 91, "intrus": [91, 167], "decor": [91, 96, 119, 132, 143, 160, 179, 191, 283, 296], "broken": [91, 110, 197], "epsilon": [91, 144, 151, 177, 178], "biggl": 91, "lfloor": 91, "prod_": 91, "biggr": 91, "rfloor": 91, "hline": 91, "190": [91, 94, 181, 190, 267], "4377": 91, "59051": 91, "accomod": [91, 146], "beginner_hybrid_frontend": 92, "dramat": [94, 114], "industri": [94, 97], "slight": [94, 137, 145, 254, 268], "functool": [94, 134, 135], "tempfil": [94, 148, 252], "random_split": [94, 150], "get_checkpoint": 94, "ashaschedul": 94, "cloudpickl": 94, "trial": [94, 140, 266], "load_data": 94, "data_dir": [94, 135, 152, 175, 209], "l2": [94, 101, 174], "train_cifar": 94, "as_directori": 94, "checkpoint_dir": [94, 246, 247], "pkl": 94, "rb": [94, 151], "checkpoint_st": 94, "start_epoch": 94, "net_state_dict": 94, "optimizer_state_dict": [94, 123, 246, 247, 255], "luckili": [94, 158, 193, 194, 218, 267], "fraction": [94, 267], "checkpoint_data": 94, "temporarydirectori": 94, "wb": 94, "dump": [94, 158, 241, 248], "from_directori": 94, "val_loss": [94, 135], "val_step": 94, "wast": [94, 187, 221, 225, 236, 267, 272, 274, 288], "test_ab": 94, "train_subset": 94, "val_subset": 94, "valload": 94, "epoch_step": 94, "test_accuraci": 94, "loguniform": [94, 267], "gpus_per_tri": 94, "resources_per_tri": 94, "num_sampl": [94, 135], "checkpoint_at_end": 94, "max_num_epoch": 94, "abspath": [94, 173], "max_t": 94, "grace_period": 94, "reduction_factor": 94, "best_trial": 94, "get_best_tri": 94, "last_result": 94, "best_trained_model": 94, "best_checkpoint": 94, "get_best_checkpoint": 94, "best_checkpoint_data": 94, "test_acc": 94, "426k": 94, "40": [94, 134, 151, 160, 161, 181, 183, 196, 199, 210, 220, 223, 234, 252, 254, 267, 297], "24mb": 94, "49m": [94, 182], "7mb": 94, "8mb": 94, "77": [94, 158, 252], "4mb": 94, "33": [94, 151, 176, 181, 196, 197, 252, 254, 267], "82": [94, 176, 226, 254, 273], "85": [94, 134, 152, 254, 267, 273], "101m": 94, "110m": 94, "118m": 94, "127m": 94, "136m": 94, "0mb": [94, 302], "145m": 94, "153m": 94, "95": [94, 140, 151, 181, 197, 200, 254], "162m": 94, "07": [94, 112, 121, 135, 253, 254, 273, 282], "603": 94, "1889": 94, "shm": [94, 187, 245], "2147467264": 94, "docker": [94, 187], "24gb": [94, 208], "run_opt": 94, "ram": [94, 104, 135, 170, 194, 272], "758": 94, "1642": 94, "690": 94, "228": 94, "691": 94, "654": 94, "ray_air_new_output": 94, "36949": 94, "train_cifar_2025": 94, "01_16": 94, "basicvariantgener": 94, "asynchyperbandschedul": 94, "var": [94, 119, 137], "ci": [94, 198], "ray_result": 94, "tensorboard": [94, 96, 97, 98, 99, 100, 101, 104, 105, 133, 140, 184, 271, 273, 279, 287], "logdir": [94, 103, 187, 188, 281], "pend": [94, 245, 281], "52": [94, 161, 196, 252, 254], "accelerator_typ": 94, "a10g": 94, "train_cifar_62919_00000": 94, "00258456": 94, "train_cifar_62919_00001": 94, "000128513": 94, "train_cifar_62919_00002": 94, "000391533": 94, "train_cifar_62919_00003": 94, "000944082": 94, "train_cifar_62919_00004": 94, "00480063": 94, "train_cifar_62919_00005": 94, "0293437": 94, "train_cifar_62919_00006": 94, "0182233": 94, "train_cifar_62919_00007": 94, "000102958": 94, "train_cifar_62919_00008": 94, "0305485": 94, "train_cifar_62919_00009": 94, "088619": 94, "00013": 94, "02934": 94, "00039": 94, "01822": 94, "0048": [94, 237], "00094": 94, "00258": 94, "func": [94, 133, 153, 155, 159, 164, 169, 239, 280, 294, 298], "pid": [94, 252], "4302": 94, "154": 94, "8x": [94, 197], "dedupl": [94, 113], "ray_dedup_log": 94, "767": [94, 161], "573": [94, 99], "1min": 94, "376": [94, 158], "checkpoint_dir_nam": 94, "checkpoint_000000": 94, "time_this_iter_": 94, "86634": 94, "time_total_": 94, "training_iter": 94, "1019": 94, "3146": 94, "train_cifar_62919_00005_5_batch_s": 94, "0293_2025": 94, "4300": [94, 282], "98499": 94, "3628": 94, "69954": 94, "train_cifar_62919_00004_4_batch_s": 94, "0048_2025": 94, "29465": 94, "1001": 94, "30286": 94, "train_cifar_62919_00002_2_batch_s": 94, "0004_2025": 94, "03055": 94, "39454": 94, "3217": 94, "71895": 94, "train_cifar_62919_00003_3_batch_s": 94, "0009_2025": 94, "95239": 94, "1726": 94, "2295": 94, "train_cifar_62919_00001_1_batch_s": 94, "0001_2025": 94, "08862": 94, "14000": 94, "319": [94, 99, 254, 273], "4297": 94, "959": 94, "3945": 94, "8663": 94, "9524": 94, "2947": 94, "14981": 94, "3062": 94, "84768": 94, "train_cifar_62919_00008_8_batch_s": 94, "0305_2025": 94, "4301": 94, "18000": [94, 282], "6x": [94, 139, 197], "4299": 94, "20000": [94, 134], "232": [94, 190, 267], "4298": 94, "420": 94, "checkpoint_000001": 94, "89565": 94, "04546": 94, "88222": 94, "2min": 94, "0455": 94, "464": [94, 181], "77018": 94, "11149": 94, "train_cifar_62919_00007_7_batch_s": 94, "124": 94, "81268": 94, "3626": 94, "71116": 94, "train_cifar_62919_00000_0_batch_s": 94, "0026_2025": 94, "126": [94, 181], "56419": 94, "31717": 94, "train_cifar_62919_00006_6_batch_s": 94, "0182_2025": 94, "902": [94, 152, 209], "18632": 94, "131": [94, 181], "05265": 94, "0965": 94, "3198": 94, "14442": 94, "12941": 94, "3437": 94, "7635": 94, "08": [94, 135, 158, 181, 201, 252, 254, 256, 267, 297], "95432": 94, "34886": 94, "3614": 94, "65366": 94, "checkpoint_000002": 94, "36836": 94, "41382": 94, "3018": 94, "89303": 94, "4295": 94, "642": 94, "695": 94, "4296": 94, "16000": [94, 267], "813": [94, 254], "4138": 94, "053": 94, "564": 94, "checkpoint_000003": 94, "31897": 94, "73279": 94, "2607": 94, "97219": 94, "267": [94, 99], "241": 94, "checkpoint_000004": 94, "22603": 94, "95882": 94, "2825": 94, "9121": 94, "343": 94, "105": 94, "57239": 94, "0962": 94, "39412": 94, "train_cifar_62919_00009_9_batch_s": 94, "0886_2025": 94, "3min": 94, "9588": 94, "572": [94, 273], "86555": 94, "176": [94, 190], "99495": 94, "3125": 94, "8198": 94, "checkpoint_000005": 94, "32259": 94, "110": [94, 134, 181, 209, 267], "28141": 94, "01466": 94, "24107": 94, "177": [94, 254], "58994": 94, "3882": 94, "56833": 94, "231": [94, 158, 267, 273], "702": 94, "578": 94, "860": 94, "checkpoint_000006": 94, "28012": 94, "56154": 94, "1652": 94, "19244": 94, "582": 94, "995": 94, "562": [94, 161], "checkpoint_000007": 94, "45211": 94, "139": 94, "01365": 94, "2088": 94, "04522": 94, "433": [94, 161], "47522": 94, "210": [94, 181], "2879": 94, "4019": 94, "59333": 94, "344": 94, "49019": 94, "219": 94, "48515": 94, "3376": 94, "95831": 94, "51941": 94, "10935": 94, "3948": 94, "5546": 94, "checkpoint_000008": 94, "77127": 94, "153": 94, "78492": 94, "1454": 94, "26064": 94, "835": 94, "375": 94, "4min": 94, "checkpoint_000009": 94, "1828": 94, "167": [94, 254, 301], "96771": 94, "143": [94, 254, 301], "2609": 94, "288": 94, "109": [94, 176], "334": 94, "275": [94, 121], "239": 94, "71068": 94, "259": [94, 161], "19583": 94, "83024": 94, "06801": 94, "17736": 94, "3866": 94, "6157": 94, "196": 94, "729": [94, 208], "853": 94, "589": [94, 196], "97328": 94, "283": [94, 265], "26118": 94, "4245": 94, "58727": 94, "380": [94, 161], "302": 94, "5min": 94, "261": [94, 197], "76658": 94, "295": [94, 254], "94394": 94, "3877": 94, "55862": 94, "822": 94, "18967": 94, "296": 94, "3855": 94, "3281": 94, "79765": 94, "707": 94, "528": 94, "870": [94, 267], "569": 94, "944": [94, 254], "385": 94, "235": [94, 99, 121], "32379": 94, "331": 94, "70929": 94, "3876": 94, "69013": 94, "24059": 94, "332": [94, 273], "18453": 94, "3941": 94, "58664": 94, "214": 94, "185": 94, "666": 94, "171": 94, "563": 94, "5428": 94, "353": 94, "80397": 94, "3918": 94, "67046": 94, "6min": 94, "804": 94, "709": 94, "434": 94, "379": [94, 267], "57693": 94, "368": 94, "28622": 94, "1795": 94, "18504": 94, "71781": 94, "369": 94, "90234": 94, "3969": 94, "57382": 94, "546": 94, "416": 94, "278": 94, "374": 94, "246": [94, 124], "205": 94, "08631": 94, "403": 94, "98865": 94, "3926": 94, "51969": 94, "186": [94, 208, 254], "489": [94, 120], "7min": 94, "989": 94, "736": 94, "10398": 94, "419": 94, "90795": 94, "4015": 94, "62331": 94, "490": 94, "635": 94, "837": 94, "547": 94, "85042": 94, "438": [94, 152, 209], "83907": 94, "4208": 94, "5144": 94, "908": [94, 161], "839": 94, "195": [94, 176, 181], "8min": 94, "20525": 94, "479": 94, "1132": 94, "3813": 94, "71332": 94, "683": [94, 161], "580": [94, 282], "113": [94, 209], "169": [94, 190, 254], "9min": 94, "03484": 94, "537": 94, "14804": 94, "3822": 94, "82664": 94, "664": 94, "842": 94, "437": 94, "362": [94, 158], "148": 94, "250": [94, 161, 181, 273], "212": [94, 121], "170": [94, 181, 198], "10min": 94, "5994": 94, "595": 94, "74744": 94, "3439": 94, "84523": 94, "747": [94, 243], "725": [94, 267], "855": 94, "426": 94, "350": [94, 121, 152], "291": 94, "216": [94, 254], "194": [94, 158], "180": [94, 181, 193, 254, 267], "74285": 94, "4903": 94, "3268": 94, "80275": 94, "11min": 94, "706": [94, 254], "852": 94, "585": 94, "448": 94, "345": [94, 161, 198], "293": [94, 121, 161], "174": 94, "57539": 94, "06569": 94, "3504": 94, "82077": 94, "066": 94, "0009440823878671502": 94, "5143996010661125": 94, "4121": 94, "000668163": 94, "31479": 94, "0977": 94, "0331514": 94, "31605": 94, "0983": 94, "000150295": 94, "30755": 94, "1023": 94, "0128248": 94, "66912": 94, "4391": 94, "00464561": 94, "7316": 94, "3463": 94, "00031556": 94, "19409": 94, "1736": 94, "00574329": 94, "85679": 94, "3368": 94, "00325652": 94, "30272": 94, "0984": 94, "000342987": 94, "76044": 94, "003734": 94, "53101": 94, "4761": 94, "0037339984519545164": 94, "5310075663924216": 94, "4737": 94, "221": [94, 124], "hyperparameter_tuning_tutori": [94, 124], "rigidli": 96, "sign": [96, 97, 168, 230], "contextu": 96, "nudg": [96, 99, 105], "calculu": 96, "next_funct": 96, "machineri": [96, 267], "co": [96, 113, 211, 273, 283], "ins": [96, 191], "ideal_output": 96, "layer2": [96, 175], "blow": 96, "b1": 96, "b2": 96, "temporarili": 96, "enable_grad": 96, "sin_": 96, "handi": [96, 99, 114, 150, 160, 188], "bake": [96, 156], "hessian": [96, 133, 184, 239], "twice": [96, 114, 145, 170, 208, 254, 267, 273, 302], "jvp": [96, 155, 159, 164], "vjp": [96, 159, 164, 239], "vhp": [96, 133, 184], "hvp": [96, 133, 184], "autogradyt_tutori": [96, 98, 102], "latin": 97, "increasingli": [97, 199], "review": [97, 146, 152, 165, 175, 193, 196, 197, 216, 217, 219, 232, 240, 255, 288], "neuron": [97, 106, 265], "analag": 97, "ablat": 97, "permut": [97, 106, 161, 176, 190, 206, 252], "valuabl": [97, 106, 183, 221, 252], "certainli": [97, 157, 217, 219, 270], "attr": [97, 173, 241], "widget": 97, "toolset": 97, "flask": 97, "renam": [97, 200, 205, 226, 228], "virtual": [97, 170, 173, 211, 272], "integratedgradi": 97, "layergradcam": 97, "layerattribut": 97, "linearsegmentedcolormap": 97, "imagenet1k_v1": 97, "test_img": 97, "test_img_data": 97, "asarrai": 97, "recogn": [97, 101, 173, 231, 269], "transform_norm": 97, "transformed_img": 97, "labels_path": 97, "imagenet_class_index": 97, "json_data": 97, "idx_to_label": 97, "prediction_scor": 97, "pred_label_idx": 97, "squeeze_": [97, 104], "predicted_label": 97, "visualize_image_attr": 97, "integrated_gradi": 97, "attributions_ig": 97, "n_step": [97, 177, 179, 181], "original_imag": 97, "default_cmap": 97, "from_list": 97, "ffffff": 97, "0000ff": 97, "heat_map": 97, "show_colorbar": 97, "strongest": [97, 99, 101, 105], "visualize_image_attr_multipl": 97, "heat": [97, 176], "attributions_occ": 97, "sliding_window_shap": 97, "masked_imag": 97, "fig_siz": 97, "upsampl": 97, "layer_gradcam": 97, "layer3": [97, 175], "attributions_lgc": 97, "interpol": [97, 151], "upsamp_attr_lgc": 97, "blended_heat_map": 97, "teapot": 97, "trilobit": 97, "fossil": 97, "attributionvisu": 97, "imagefeatur": 97, "attr_vi": 97, "baseline_func": 97, "full_img_transform": 97, "score_func": 97, "baseline_transform": 97, "input_transform": 97, "282": 97, "849": [97, 254, 267], "heatmap": 97, "captumyt": [97, 102], "introyt": 98, "introyt1_tutori": [98, 99, 102], "tensors_deeper_tutori": [98, 102, 104], "modelsyt_tutori": [98, 101, 102], "tensorboardyt_tutori": [98, 102, 103], "trainingyt_tutori": 98, "captumyt_tutori": 98, "captum": [98, 271, 279, 287], "sphx_glr_beginner_introyt_introyt_index": [98, 102], "sphx_glr_beginner_introyt_modelsyt_tutori": [98, 102], "sphx_glr_beginner_introyt_autogradyt_tutori": [98, 102], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [98, 102], "sphx_glr_beginner_introyt_introyt1_tutori": [98, 102], "sphx_glr_beginner_introyt_trainingyt": [98, 102], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [98, 102], "sphx_glr_beginner_introyt_captumyt": [98, 102], "5x3": 99, "helpfulli": 99, "prng": 99, "r3": 99, "r1": 99, "r2": 99, "trigonometr": [99, 104], "singular": [99, 168, 182, 297], "decomposit": [99, 119, 136, 158], "diagram": [99, 178], "earliest": 99, "explos": 99, "handwritten": [99, 134], "abridg": 99, "c1": [99, 158], "s2": [99, 193], "c3": 99, "s4": [99, 193], "f5": 99, "f6": 99, "artifact": [99, 146, 193, 292, 293, 297], "gist": 99, "tile": [99, 103, 105, 190, 234, 241], "hasn": 99, "shouldn": [99, 174], "center": [99, 101, 105, 178, 187, 283], "concatdataset": 99, "50000": 99, "4914": 99, "4822": 99, "4465": 99, "2470": 99, "2435": 99, "2616": 99, "rotat": [99, 103, 185, 188], "vehicl": [99, 181], "told": [99, 177], "strip": [99, 234, 282], "ingredi": 99, "inner": [99, 170, 177, 197], "940": 99, "507": 99, "442": 99, "378": 99, "364": 99, "monoton": 99, "descend": 99, "memor": 99, "roughli": [99, 107, 122, 135, 148, 158, 204, 283], "brad": 100, "heintz": 100, "introyt_index": [100, 102], "lin": [101, 152, 175], "nearbi": 101, "lenet5": 101, "1x32x32": 101, "liken": 101, "5x5": 101, "3x5": 101, "presenc": [101, 191, 193, 229, 230, 265], "6x28x28": 101, "2x2": 101, "6x14x14": 101, "sought": 101, "3x3": 101, "16x12x12": 101, "16x6x6": 101, "576": 101, "edg": [101, 107, 116, 122, 133, 157, 187, 200, 226, 231, 269, 298], "instrument": [101, 157, 287], "dna": 101, "nucleotid": 101, "moder": 101, "beyond": [101, 104, 110, 173, 174, 283], "tagger": [101, 107], "noun": 101, "verb": 101, "vocab_s": [101, 107, 136, 152, 172, 209, 255], "tagset_s": [101, 107], "log_softmax": [101, 114, 134, 180, 256], "decod": [101, 107, 135, 172, 181, 182, 197, 199, 204, 208, 266, 298], "transformerencod": [101, 199], "transformerdecod": [101, 199], "subcompon": [101, 191], "transformerencoderlay": [101, 182, 199], "transformerdecoderlay": [101, 172, 199], "twin": 101, "maxpool": [101, 175, 231], "quadrant": 101, "6x6": 101, "vanish": [101, 108], "offset": [101, 194, 207, 234, 246], "neighborhood": 101, "sometim": [101, 104, 122, 139, 145, 147, 148, 151, 159, 178, 181, 183, 193, 208, 218, 219, 283], "suffer": [101, 187, 250], "steepest": 101, "feasibl": [101, 134, 136], "hardtanh": 101, "015": 102, "beginner_introyt": 102, "trainingyt": [102, 105], "garment": 103, "tb": [103, 298], "gfile": 103, "tensorflow_stub": 103, "add_imag": [103, 188], "summarywrit": [103, 188, 281], "flush": [103, 266, 281], "log_dir": [103, 140, 188], "6006": [103, 187, 188, 281], "efficaci": 103, "add_graph": [103, 188], "add_embed": [103, 188], "projector": 103, "toggl": [103, 196, 207, 302], "night": [103, 188], "icon": 103, "dark": [103, 190], "upack": 104, "attach": [104, 178, 223, 231, 301], "terminologi": [104, 110], "likewis": [104, 167], "fctori": 104, "assur": [104, 170], "random1": 104, "random3": 104, "random2": 104, "random4": 104, "rng": [104, 150], "_like": [104, 161], "rand_lik": 104, "int16": [104, 226, 270], "cue": 104, "intent": [104, 217, 226, 231, 247], "subtract": [104, 106, 283], "2x4": 104, "1x4": 104, "honor": 104, "3rd": [104, 136, 143, 241, 255], "2nd": [104, 111, 136, 143, 180], "hundr": [104, 132, 138, 190, 194], "bitwis": [104, 266], "inventori": [104, 105], "occupi": [104, 262], "discard": [104, 134, 135, 187, 273, 282], "underscor": 104, "add_": [104, 193, 216, 240, 250], "deepli": 104, "nor": [104, 150, 200, 216, 301], "mid": 104, "someplac": 104, "colloqui": 104, "fragil": 104, "robustli": [104, 118], "whichev": 104, "thrown": [104, 219, 240], "226": 104, "zeroth": 104, "bracket": [104, 200], "rescu": 104, "unsqueeze_": 104, "radic": 104, "parenthes": 104, "comma": 104, "convinc": [104, 167], "kinship": 104, "autom": [105, 122, 140, 157, 161, 190, 205], "outcom": [105, 140, 203, 231], "saniti": [105, 107, 140, 177, 190, 300], "chose": [105, 176], "saved_model": 105, "garmentclassifi": 105, "alexandro": 106, "chariton": 106, "computation": [106, 190], "lightweight": [106, 133, 174, 266], "drone": 106, "phone": [106, 116], "4gb": [106, 167, 176], "3072": [106, 234], "satur": [106, 229, 266], "held": [106, 141, 180], "greedi": [106, 151, 178], "num_images_to_keep": 106, "50_000": 106, "test_dataset": 106, "10_000": 106, "extractor": [106, 190], "train_load": [106, 134, 135, 180, 187, 255, 256, 291], "detriment": 106, "test_load": [106, 134, 180, 256], "conclud": [106, 145, 150, 193, 231], "interven": [106, 193], "soft": [106, 178], "mistaken": 106, "alon": [106, 123, 138, 183, 188], "exploit": [106, 160, 183], "meaningfulli": 106, "temperatur": 106, "smoother": 106, "soft_target_loss_weight": 106, "ce_loss_weight": 106, "train_knowledge_distil": 106, "ce": [106, 183], "coeffici": 106, "convei": [106, 231], "naiv": [106, 139, 159, 169, 182, 221], "rational": 106, "capac": [106, 146, 177, 190, 283], "cosineembeddingloss": 106, "obvious": [106, 110, 181], "somehow": [106, 113, 194], "hidden_represent": 106, "hidden_representation_s": 106, "avg_pool1d": 106, "modifiedlightnnregressor": 106, "cosineloss": 106, "wiggl": 106, "hinton": 106, "vinyal": 106, "dean": 106, "workshop": 106, "romero": 106, "balla": 106, "kahou": 106, "chassang": 106, "gatta": 106, "bengio": 106, "fitnet": 106, "thin": [106, 207], "confer": 106, "knowledge_distillation_tutori": [106, 124], "kit": 107, "dynet": [107, 109], "opposit": [107, 170, 217], "theano": [107, 109], "kera": [107, 109, 122], "difficult": [107, 159, 168, 183, 194, 218, 223, 239, 252], "constitu": 107, "green": [107, 135, 138, 188], "fat": 107, "exception": 107, "entiti": [107, 113, 194, 285, 286], "recognit": [107, 133, 241, 283], "ner": 107, "sound": [107, 110, 122], "scari": 107, "viterbi": [107, 111], "sum_": [107, 113, 178], "psi_i": 107, "sum_i": 107, "partit": [107, 133, 138, 143, 150, 247, 283], "emiss": 107, "timestep": [107, 111, 141, 142, 178], "textbf": 107, "psi_": 107, "y_i": [107, 111], "rightarrow": [107, 150, 178], "x_i": [107, 108], "tran": [107, 190], "h_i": [107, 111], "collin": 107, "robert": [107, 108, 110, 111, 113, 270], "guthri": [107, 108, 110, 111, 113, 270], "0x7f8941165070": 107, "argmax": [107, 111, 134, 152, 180, 209, 254, 256], "prepare_sequ": 107, "seq": [107, 138, 151], "to_ix": 107, "log_sum_exp": 107, "max_scor": 107, "max_score_broadcast": 107, "bilstm_crf": 107, "tag_to_ix": 107, "word_emb": 107, "num_lay": [107, 204, 266], "hidden2tag": 107, "start_tag": 107, "stop_tag": 107, "init_hidden": [107, 204], "_forward_alg": 107, "feat": [107, 190], "init_alpha": 107, "forward_var": 107, "alphas_t": 107, "next_tag": 107, "emit_scor": 107, "ith": [107, 113, 221], "trans_scor": 107, "next_tag_var": 107, "terminal_var": 107, "_get_lstm_featur": 107, "lstm_out": 107, "lstm_feat": 107, "_score_sent": 107, "_viterbi_decod": 107, "backpoint": 107, "init_vvar": 107, "bptrs_t": 107, "viterbivars_t": 107, "best_tag_id": 107, "path_scor": 107, "best_path": 107, "dont": 107, "caller": [107, 180, 245], "neg_log_likelihood": 107, "forward_scor": 107, "gold_scor": 107, "bilstm": 107, "tag_seq": 107, "street": 107, "journal": 107, "todai": [107, 129, 175, 194, 218, 252], "appl": [107, 196, 208], "corpor": [107, 152], "monei": 107, "georgia": 107, "tech": 107, "univers": [107, 178, 190, 196], "word_to_ix": [107, 108, 111, 113], "weight_decai": [107, 123, 175, 250, 252], "precheck_s": 107, "precheck_tag": 107, "sentence_in": 107, "6907": 107, "4906": 107, "anywai": [107, 110, 170], "gold": [107, 183], "perceptron": [107, 196], "score_sent": 107, "096": [107, 112], "advanced_tutori": [107, 109, 112], "workhors": 108, "2x5": 108, "acx": 108, "ac": [108, 190], "sigma": [108, 177], "plenti": 108, "peopl": [108, 109, 129, 209, 231], "shy": 108, "linearit": 108, "sum_j": 108, "x_j": 108, "unseen": [108, 113], "eta": 108, "vari": [108, 136, 144, 160, 170, 183, 191, 193, 199, 204, 205, 218, 221, 226, 228, 229, 230, 243, 266, 270], "spanish": [108, 141, 142], "bow": 108, "bowclassifi": 108, "creo": 108, "bigger": [108, 141, 142, 176, 190], "deep_learning_tutori": [108, 109, 112], "russel": 109, "norvig": 109, "book": 109, "rip": 109, "pytorch_tutori": [109, 110, 112], "word_embeddings_tutori": [109, 112, 113], "lexic": [109, 112], "sequence_models_tutori": [109, 111, 112, 270], "bi": [109, 112, 152], "crf": [109, 112], "2x2x2": 110, "complain": [110, 193], "x_2": [110, 164], "vagu": 110, "programm": [110, 113, 226, 229, 230], "x_0": 110, "overbrac": [110, 111, 113], "y_0": 110, "z_0": 110, "z_1": 110, "y_2": 110, "z_2": 110, "gloss": 110, "new_z": 110, "NO": 110, "forgotten": 110, "classic": [111, 114, 161, 168, 185, 280], "markov": 111, "myriad": 111, "cow": 111, "q_": [111, 113, 160], "1st": [111, 134, 136, 143], "unfamiliar": 111, "w_1": 111, "w_m": 111, "w_i": [111, 113], "_i": [111, 209], "_1": 111, "_m": 111, "_j": 111, "ah_i": 111, "affin": [111, 144, 185, 196, 200, 253, 283, 301], "affix": [111, 113], "bear": 111, "ly": 111, "adverb": 111, "c_w": 111, "x_w": 111, "po": [111, 190], "106": [112, 254], "beginner_nlp": 112, "capit": 113, "enorm": [113, 190], "notion": 113, "mathematician": 113, "physicist": 113, "role": [113, 174, 181, 194, 197, 301], "orthograph": 113, "linguist": 113, "hypothesi": 113, "coffe": 113, "phi": 113, "gave": 113, "pain": 113, "earth": 113, "herself": 113, "longtensor": [113, 142, 179, 181], "shakespear": [113, 182], "sonnet": 113, "word_i": 113, "context_s": 113, "beauti": 113, "cbow": 113, "probabilist": [113, 177], "percent": 113, "q_w": 113, "raw_text": 113, "jeremi": 114, "howard": [114, 160, 172, 173], "rachel": 114, "thoma": 114, "ingham": 114, "elegantli": [114, 269], "concis": 114, "trail": 114, "signifi": 114, "xavier": [114, 115], "initialis": 114, "prewritten": 114, "talli": 114, "debugg": 114, "set_trac": 114, "logist": 114, "cross_entropi": [114, 138], "clearer": [114, 188], "uppercas": 114, "zero_": [114, 173, 181, 204], "prone": [114, 143, 199, 226, 249], "gone": [114, 139, 194], "xb": 114, "faciallandmarkdataset": 114, "tensordataset": [114, 152, 209], "x_train": [114, 164], "y_train": 114, "start_i": 114, "end_i": 114, "yb": 114, "train_d": 114, "cleaner": [114, 216, 218, 225, 226], "train_dl": 114, "phase": [114, 150, 175, 181, 231, 273, 299], "loss_batch": 114, "rid": [114, 115, 136, 159, 250, 298], "avgpool2d": 114, "adaptiveavgpool2d": [114, 151], "lucki": [114, 174], "rent": 114, "hour": [114, 298], "mnist_sampl": 114, "fastai": 114, "practition": [114, 150, 219], "dupr\u00e9": 115, "circumv": 115, "forwardwithcontrolflowtest": 115, "modelwithcontrolflowtest": 115, "unexpectedli": [115, 262], "succe": [115, 118, 193], "assertionerror": [115, 158], "dynamo": [115, 116, 118, 119, 143, 158, 210, 298, 299], "identity2": 115, "fx": [115, 116, 133, 158, 184, 193, 194, 200, 211, 225, 226, 231, 235, 256, 292], "imperfect": 115, "faith": 115, "pitfal": [115, 193], "necessarili": [115, 116, 118, 119, 143, 145, 170, 193], "export_control_flow_model_to_onnx_tutori": [115, 117, 120], "ti": [116, 118, 119], "tai": [116, 118, 119], "justin": [116, 119, 122], "chu": [116, 119], "thiago": [116, 118], "crepaldi": [116, 118], "gamut": 116, "supercomput": 116, "constrain": [116, 140, 168], "onnxscript": [116, 118, 119], "upgrad": [116, 118, 168, 176, 187, 225], "fold": [116, 156, 194, 197, 205, 224, 226, 229, 230], "redund": [116, 119, 151], "onnxprogram": [116, 119], "protobuf": 116, "drag": [116, 167, 187, 188, 248], "image_classifier_model": 116, "export_simple_model_to_onnx_tutori": [116, 117, 120], "intro_onnx": [117, 118, 120], "onnx_registry_tutori": [117, 119, 120], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [117, 120], "sphx_glr_beginner_onnx_intro_onnx": [117, 120], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [117, 120], "sphx_glr_beginner_onnx_onnx_registry_tutori": [117, 120], "exportedprogram": [118, 119, 123, 193, 226, 297, 298], "newer": [118, 149, 161, 167, 169, 195, 238, 275, 276, 277, 278, 283], "__version__": [118, 152, 176, 209, 240], "registri": 119, "_op": 119, "opoverload": 119, "opset": 119, "opset18": 119, "input_x": 119, "input_i": 119, "native_funct": 119, "yaml": [119, 146, 256], "custom_aten_add": 119, "castlik": 119, "distinguish": [119, 170, 181, 188], "custom_translation_t": 119, "onnx_program": 119, "ir_vers": 119, "opset_import": 119, "producer_nam": 119, "producer_vers": 119, "cu126": 119, "model_vers": 119, "main_graph": 119, "node_add_0": 119, "gelu": [119, 224], "gelumodel": 119, "microsoft_op": 119, "custom_aten_gelu": 119, "op_typ": 119, "n0": 119, "mylibrari": 119, "add_and_round_op": 119, "_add_and_round_op_fak": 119, "tensor_x": 119, "addandroundmodel": 119, "onnx_add_and_round": 119, "val_0": 119, "node_round_1": 119, "exported_program": [119, 123, 298], "graphmodul": [119, 157, 200], "f32": 119, "input_1": 119, "workspac": [119, 255], "beginner_sourc": [119, 126], "215": [119, 190, 197], "exportgraphsignatur": 119, "inputspec": 119, "inputkind": 119, "user_input": 119, "tensorargu": 119, "outputspec": 119, "outputkind": 119, "user_output": 119, "487": [119, 120, 161], "beginner_onnx": 120, "quicker": 121, "record_funct": [121, 158, 254, 273], "incur": [121, 138, 203, 245, 246, 283], "investig": [121, 161, 174, 190, 191, 193, 282], "with_stack": [121, 187], "key_averag": [121, 254], "group_by_stack_n": 121, "traceback": [121, 158, 298], "sort_bi": [121, 254, 273], "193a910735e8": 121, "stacktrac": 121, "88": [121, 181, 196, 226], "953": 121, "mnt": [121, 150], "xarfus": 121, "au": 121, "715": 121, "848m": 121, "151u": 121, "342u": 121, "095u": 121, "931": 121, "footprint": [121, 134, 135, 136, 146, 167, 253, 254, 264, 266, 302], "006": 121, "476": 121, "338": 121, "759m": 121, "as_strid": [121, 158], "281": [121, 161], "808u": 121, "721u": 121, "_local": 121, "268": 121, "650u": [121, 273], "_scalar_dens": 121, "347": 121, "argwher": 121, "nonzero": [121, 283], "089m": 121, "402m": 121, "491m": 121, "119": [121, 209], "441": 121, "587u": 121, "_numpi": 121, "395": [121, 181], "602u": 121, "801m": 121, "rpc": [121, 133, 250, 287], "johnson": 122, "brows": 122, "utf": [122, 152], "modern": [122, 170, 191, 194], "50x": 122, "hairi": 122, "thankfulli": 122, "wave": 122, "tflearn": 122, "burden": [122, 183, 283], "facil": 123, "running_mean": [123, 228, 285], "themodelclass": 123, "param_tensor": 123, "var_nam": 123, "param_group": [123, 244, 250, 252, 280], "dampen": 123, "4675713712": 123, "4675713784": 123, "4675714000": 123, "4675714072": 123, "4675714216": 123, "4675714288": 123, "4675714432": 123, "4675714504": 123, "4675714648": 123, "4675714720": 123, "_use_new_zipfile_seri": 123, "best_model_st": 123, "deepcopi": [123, 175, 205, 228, 229], "pt2": [123, 193, 225, 229, 243, 244, 249, 252, 297], "simplemodel": 123, "saved_exported_program": 123, "model_state_dict": [123, 136, 246, 247, 255], "theoptimizerclass": 123, "modela_state_dict": 123, "modela": 123, "modelb_state_dict": 123, "modelb": 123, "optimizera_state_dict": 123, "optimizera": 123, "optimizerb_state_dict": 123, "optimizerb": 123, "themodelaclass": 123, "themodelbclass": 123, "theoptimizeraclass": 123, "theoptimizerbclass": 123, "gan": [123, 133, 168], "ensembl": [123, 133, 184], "map_loc": [123, 136, 148, 190, 204, 266, 272], "remap": 123, "overwrit": 123, "saving_loading_model": [123, 124, 275, 276, 277, 278], "rai": [124, 133], "distil": [124, 133, 256], "dcgan": [124, 133], "transfer_learning_tutori": [124, 129], "torchmultimod": [124, 133], "flava": 124, "template_tutori": [124, 126], "firstnam": 126, "lastnam": 126, "gallery_pattern": 126, "neural_style_transfer_tutori": 126, "_build": 126, "link1": [126, 135], "link2": [126, 135], "cs231n": 129, "licens": [129, 152, 185], "bsd": [129, 185], "lr_schedul": [129, 134, 135, 175], "num_ftr": [129, 175], "class_nam": [129, 175, 190], "decai": [129, 151, 175, 178, 250], "checkout": [129, 240], "spread": [132, 190], "demand": [132, 203], "distributeddata": 132, "uneven": 132, "huggingfac": [132, 134, 135, 199, 209, 234, 298], "hf": 132, "t5": 132, "async_execut": [132, 133, 179], "dataparallel": [132, 133, 139, 152, 209, 266, 283], "plug": [132, 173, 185], "inductor": [133, 143, 184, 193, 208, 211, 220, 224, 225, 226, 252, 293, 295, 299], "foreach_map": [133, 287, 290], "bite": [133, 287], "non_block": [133, 151, 184], "pin_memori": [133, 134, 135, 184, 283], "slide": [133, 283], "tiatoolbox": 133, "resampl": 133, "waveform": 133, "wav2vec2": 133, "dqn": [133, 184], "cartpol": [133, 151, 178, 181], "v0": [133, 151, 160, 178, 198], "proxim": [133, 177], "mario": [133, 168, 184], "_static": 133, "thumbnail": [133, 190], "holist": 133, "fuser": [133, 184, 283], "nchw": [133, 161, 197, 255], "raspberri": 133, "nerur": 133, "netork": 133, "exploresever": 133, "tangent": [133, 155, 184], "plugin": [133, 187], "orthogon": [133, 168], "symmetr": [133, 152, 168, 224, 226, 230, 231], "prune": [133, 168, 184, 225, 256], "snapshot": [133, 146, 193], "torchx": 133, "scaled_dot_product_attent": [133, 182, 199, 201], "paral": 133, "fsdp2": [133, 134], "fully_shard": [133, 136], "fsdp1": [133, 134], "libuv": 133, "tcpstore": [133, 148], "sdk": 133, "v3": [133, 264], "camera": [133, 176], "xnnpack": [133, 200, 226, 228, 231], "metal": 133, "shader": 133, "android": [133, 225, 264, 287], "deeplab": 133, "fp32": [133, 135, 146, 152, 161, 182, 194, 197, 200, 208, 209, 220, 226, 229, 241, 252, 256, 270], "torchrec": [133, 184], "distributedmodelparallel": 133, "sheet": 133, "hamid": [134, 135, 196, 197], "shojanazeri": [134, 135, 196, 197], "yanli": [134, 135], "zhao": [134, 135], "shen": [134, 148, 173, 179, 181], "li": [134, 148, 150, 170, 173, 179, 181, 191, 196, 197], "1t": [134, 146], "courtesi": 134, "patrick": 134, "hu": 134, "reduce_scatt": [134, 135, 138], "scatter": [134, 136, 148, 150, 190], "possess": [134, 208, 272], "fsdp_mnist": 134, "size_based_auto_wrap_polici": 134, "default_auto_wrap_polici": 134, "fsdp_auto_wrap_polici": 134, "auto_wrap_polici": [134, 135, 136], "steplr": [134, 135, 175], "fully_sharded_data_parallel": [134, 246, 247], "cpuoffload": [134, 136], "backwardprefetch": [134, 135], "enable_wrap": [134, 135], "cleanup": [134, 135, 148, 246, 247], "dropout1": [134, 180], "dropout2": [134, 180], "9216": [134, 180], "ddp_loss": 134, "batch_idx": [134, 255, 256, 291], "tloss": [134, 256], "6f": [134, 256], "view_a": [134, 180, 256], "test_loss": 134, "fsdp_main": [134, 135], "1307": [134, 150, 180, 256], "3081": [134, 150, 180, 256], "dataset1": 134, "dataset2": 134, "sampler1": [134, 135], "num_replica": [134, 135], "sampler2": [134, 135], "train_kwarg": [134, 135], "test_kwarg": [134, 135], "test_batch_s": [134, 135], "cuda_kwarg": [134, 135], "my_auto_wrap_polici": 134, "min_num_param": 134, "init_start_ev": [134, 135], "enable_tim": [134, 135], "init_end_ev": [134, 135], "adadelta": 134, "step_siz": [134, 135, 175, 252], "gamma": [134, 135, 160, 175, 178, 179, 181], "elapsed_tim": 134, "save_model": [134, 135], "barrier": [134, 135, 137, 148, 150, 152, 196, 201, 209], "mnist_cnn": 134, "metavar": [134, 135, 179, 181], "store_tru": [134, 135], "67462890625sec": 134, "_fsdp_wrapped_modul": 134, "flattenparamswrapp": 134, "_fpw_modul": 134, "in_featur": [134, 175, 200, 220, 234, 236, 274], "out_featur": [134, 151, 200, 220, 234], "peak": [134, 136, 144, 167, 176, 199, 201, 208, 246, 295, 301, 302], "g4dn": 134, "xlarg": 134, "allgath": [134, 135, 138, 173, 283], "seal": 134, "89130859375sec": 134, "auto_wrap": 134, "offload": [134, 135, 136, 254, 262], "cpu_offload": [134, 136], "offload_param": [134, 136], "dpp": 134, "ddp_mnist": 134, "77766015625sec": 134, "wright": 135, "rohan": [135, 180], "varma": [135, 180], "wikihow": 135, "p4dn": 135, "a100": [135, 139, 169, 191, 199, 208, 234], "pressur": [135, 246], "fdsp": 135, "xxl": 135, "billion": [135, 138], "3b": [135, 176], "wikihowal": 135, "wikihowsep": 135, "summarization_dataset": 135, "t5_train": 135, "autotoken": [135, 234], "gpt2tokenizerfast": 135, "t5token": 135, "t5forconditionalgener": 135, "modeling_t5": 135, "t5block": 135, "checkpoint_wrapp": 135, "checkpointimpl": 135, "apply_activation_checkpointing_wrapp": 135, "mixedprecis": 135, "shardingstrategi": [135, 249], "fullstatedictconfig": 135, "statedicttyp": [135, 246, 247], "transformer_auto_wrap_polici": 135, "tqdm": [135, 151, 152, 177, 209, 234], "datetim": [135, 137, 203], "setup_model": 135, "from_pretrain": [135, 152, 209, 234, 255, 298], "get_date_of_run": 135, "2022": [135, 211], "12_pm": 135, "date_of_run": 135, "strftime": 135, "s_": [135, 178], "format_metrics_to_gb": 135, "gigabyt": 135, "metric_num": 135, "g_gigabyt": 135, "ndigit": 135, "fsdp_loss": 135, "inner_pbar": 135, "colour": 135, "desc": [135, 152, 203, 209], "r0": 135, "input_id": [135, 138, 152, 209, 234, 298], "source_id": 135, "attention_mask": [135, 152, 209, 298], "source_mask": 135, "target_id": 135, "train_accuraci": 135, "val_load": 135, "load_dataset": [135, 234, 298], "type_path": 135, "output_length": 135, "print_text": 135, "1500": [135, 267], "150": [135, 151, 181], "val_dataset": 135, "t5_auto_wrap_polici": 135, "transformer_layer_cl": 135, "sharding_strategi": [135, 136, 249], "shard_grad_op": [135, 136], "zero2": 135, "full_shard": [135, 136], "zero3": 135, "bf16_readi": 135, "is_bf16_support": 135, "loosevers": 135, "is_nccl_avail": [135, 201], "mp_polici": [135, 136], "bfsixteen": 135, "mixed_precis": [135, 136], "current_devic": [135, 266], "adamw": [135, 178], "best_val_loss": 135, "inf": [135, 193, 218, 221, 223, 252], "curr_val_loss": 135, "file_save_nam": 135, "time_of_run": 135, "dur": 135, "train_acc_track": 135, "val_acc_track": 135, "training_start_tim": 135, "track_memori": 135, "mem_alloc_track": 135, "mem_reserved_track": 135, "run_valid": 135, "zone": 135, "memory_alloc": 135, "memory_reserv": 135, "save_polici": 135, "offload_to_cpu": 135, "rank0_onli": 135, "state_dict_typ": 135, "full_state_dict": [135, 136], "cpu_stat": 135, "currepoch": 135, "save_nam": 135, "store_fals": 135, "nnode": [135, 148, 172, 201, 203], "transfom": 135, "mhsa": 135, "ffn": [135, 199], "bfloat16": [135, 136, 201, 208, 220, 229, 230, 241, 266, 280, 283, 291], "v100": [135, 191], "fpsixteen": 135, "param_dtyp": [135, 136], "reduce_dtyp": [135, 136], "buffer_dtyp": [135, 136], "fp32_polici": 135, "grad_bf16": 135, "oom": [135, 167, 266], "freed": [135, 167, 226], "backward_pr": [135, 136], "backward_prefetch": [135, 136], "backward_post": [135, 136], "wei": 136, "feng": [136, 160, 173], "yifan": 136, "mao": 136, "unshard": [136, 194, 201], "recordstream": 136, "float8": 136, "nf4": 136, "qlora": 136, "eg": 136, "fsdpmodul": 136, "fsdptransform": 136, "tok_embed": [136, 138, 172], "fsdptransformerblock": 136, "joint": [136, 293], "to_loc": 136, "clip_grad_norm_": 136, "seq_len": [136, 204], "queu": [136, 246], "set_modules_to_forward_prefetch": 136, "set_modules_to_backward_prefetch": 136, "perf": [136, 197, 234], "layers_to_prefetch": 136, "num_to_forward_prefetch": 136, "num_to_backward_prefetch": 136, "upcast": 136, "model_arg": [136, 172], "fsdp_kwarg": 136, "mixedprecisionpolici": 136, "max_norm": 136, "resum": [136, 191, 228, 247, 287, 298], "distributed_tensor": 136, "distribute_tensor": 136, "mmap": 136, "full_sd": 136, "meta_sharded_sd": 136, "sharded_sd": 136, "param_nam": [136, 280], "full_tensor": 136, "sharded_meta_param": 136, "sharded_tensor": 136, "device_mesh": [136, 138, 201, 249], "full_param": 136, "cpu_state_dict": 136, "sharded_param": 136, "set_model_state_dict": 136, "broadcast_from_rank0": 136, "statedictopt": 136, "get_model_state_dict": 136, "set_optimizer_state_dict": 136, "get_optimizer_state_dict": 136, "modulewrappolici": 136, "transformerblock": [136, 138], "param_init_fn": 136, "itertool": [136, 181, 231], "to_empti": [136, 236, 280], "sublay": 136, "reshard_after_forward": 136, "hybrid_shard": [136, 249], "_hybrid_shard_zero2": 136, "offload_polici": 136, "cpuoffloadpolici": 136, "cast_forward_input": 136, "cast_root_forward_input": 136, "output_dtyp": [136, 200, 203], "sync_module_st": 136, "rank0": [136, 179, 181, 203], "forward_prefetch": 136, "fsdp_modul": 136, "limit_all_gath": 136, "use_orig_param": [136, 138], "no_sync": [136, 283], "set_requires_gradient_sync": 136, "ignored_param": 136, "ignored_st": 136, "xilun": [137, 201], "roll": 137, "1k": [137, 138], "98304": [137, 209], "96k": 137, "perf_count": 137, "logger": [137, 152, 190, 209, 223], "getlogg": [137, 152, 190, 209], "preset": [137, 224], "env_rank": 137, "env_world_s": 137, "env_master_addr": 137, "env_master_port": 137, "23456": [137, 150], "tcp_store": 137, "is_mast": 137, "time_elaps": [137, 175], "client": 137, "timeout": [137, 148, 173, 203], "store_based_barri": 137, "timedelta": [137, 203], "diststoreerror": 137, "_diststoreerror": 137, "_store_based_barri": 137, "group_nam": 137, "rendezvous_count": 137, "default_pg_timeout": 137, "logging_interv": 137, "store_kei": 137, "store_based_barrier_kei": 137, "worker_count": 137, "last_worker_kei": 137, "last_work": 137, "num_workers_join": 137, "tcpstore_test": 137, "number_run": 137, "spectrum": 137, "listen_fd": 137, "socket": [137, 150, 158, 196, 197, 283, 301], "listen_sock": 137, "af_inet": 137, "sock_stream": 137, "addr": [137, 203], "getsocknam": 137, "master_listen_fd": 137, "notimplementederror": [137, 280], "gloo": [137, 148, 150, 173, 187, 194, 302], "vairabl": 137, "notifi": [137, 179], "wanchao": [138, 249], "liang": [138, 249], "tianyu": 138, "liu": [138, 230], "megatron": 138, "lm": [138, 245], "sp": 138, "parallelstyl": 138, "parallelize_modul": 138, "foward": 138, "aris": [138, 193, 199, 208, 218, 298], "exceed": [138, 177], "domin": [138, 161, 190, 237, 270], "ballpark": [138, 270], "flop": [138, 194, 295], "llm": [138, 172, 220], "trillion": [138, 146], "month": 138, "llama": [138, 199, 224], "70b": 138, "2k": 138, "llama2": 138, "colwiseparallel": 138, "rowwiseparallel": 138, "sequenceparallel": 138, "rmsnormpython": 138, "preparemoduleinput": 138, "preparemoduleoutput": 138, "init_device_mesh": [138, 201, 249], "tp_mesh": [138, 249], "feedforward": 138, "swiglu": 138, "w2": 138, "silu": 138, "w1": 138, "w3": 138, "colwis": 138, "rowwis": 138, "parallelize_plan": 138, "layer_tp_plan": 138, "feed_foward": 138, "feed_forward": 138, "wq": 138, "wk": 138, "wv": 138, "wo": 138, "tp_plan": 138, "draft": [138, 150], "num_head": 138, "layer_id": [138, 172], "transformer_block": 138, "attn_lay": 138, "n_head": [138, 172], "n_kv_head": 138, "input_layout": 138, "output_layout": 138, "attention_norm": 138, "ffn_norm": 138, "desired_input_layout": 138, "yellow": 138, "loss_parallel": 138, "use_local_output": 138, "dp": [138, 196, 197, 203], "mesh_2d": [138, 249], "submesh": 138, "dp_mesh": 138, "model_tp": 138, "model_2d": 138, "broadli": 139, "torchviz": [139, 145], "orang": [139, 176], "_save": 139, "kept": [139, 203], "_saved_self": 139, "_saved_oth": 139, "cycl": [139, 187, 241, 267, 273], "thumb": [139, 159, 177, 266], "pack_hook": 139, "unpack_hook": 139, "silli": 139, "harmless": 139, "debat": 139, "__repr__": [139, 267, 280], "152": 139, "48gb": 139, "5gb": 139, "leak": 139, "autograd_saved_tensors_hooks_tutori": [139, 184], "david": 140, "eriksson": 140, "balandat": 140, "methodologi": [140, 197, 250, 255], "laptop": 140, "sustain": [140, 246], "studi": [140, 174, 190, 196], "botorch": 140, "bayesian": 140, "mnist_train_na": [140, 162, 184], "appdef": 140, "kubernet": 140, "local_cwd": 140, "fetch": [140, 142, 179, 180, 181, 194, 196, 197, 293], "proxi": [140, 216, 219, 267, 288], "tensorboardcurvemetr": 140, "curve_nam": 140, "lower_is_bett": 140, "favor": [140, 164, 177, 193], "multiobjectiveoptimizationconfig": 140, "generationstrategi": 140, "scheduleropt": 140, "max_pending_tri": 140, "pareto": 140, "frontier": 140, "surrog": 140, "uncertainti": 140, "num_param": 140, "val_acc": 140, "contour": 140, "hidden_size_1": 140, "kiuk": 140, "chung": 140, "tristan": [140, 176], "rice": [140, 176], "ax_multiobjective_nas_tutori": [140, 162, 184], "surnam": 141, "spell": 141, "lua": [141, 142, 183], "unreason": [141, 142], "roman": 141, "alphabet": 141, "n_letter": 141, "line_length": 141, "all_lett": 141, "linetotensor": 141, "namesdataset": 141, "20074": 141, "charrnn": 141, "label_from_output": 141, "histor": [141, 142], "all_loss": [141, 142], "minu": [141, 187], "bright": 141, "incorrectli": [141, 228], "chines": [141, 142], "korean": 141, "italian": 141, "greek": 141, "poorli": 141, "gender": 141, "writer": [141, 152, 156, 176, 177, 188, 203, 209, 246, 281], "subreddit": 141, "char_rnn_classification_tutori": [141, 184], "russian": 142, "ru": 142, "rovakov": 142, "uantov": 142, "shavakov": 142, "german": 142, "ger": 142, "gerren": 142, "ereng": 142, "rosher": 142, "spa": 142, "salla": 142, "parer": 142, "allan": 142, "chi": 142, "chan": 142, "iun": 142, "category_lin": 142, "o2o": 142, "muscl": [142, 190], "fuzz": 142, "chao": 142, "abcd": 142, "eo": [142, 183, 204], "n_categori": 142, "randomtrainingexampl": 142, "timesinc": 142, "timestamp": [142, 157, 262], "print_everi": 142, "plot_everi": 142, "output_nam": 142, "fiction": 142, "countri": 142, "citi": 142, "char_rnn_generation_tutori": [142, 184], "simon": 143, "fan": [143, 176], "torch_log": [143, 193, 220, 287, 288, 290, 298], "_dynamo": [143, 158, 191, 193, 229, 252, 288, 298], "compiled_autograd": 143, "intercept": [143, 197], "bytecod": [143, 191], "aotdispatch": 143, "rewritten": 143, "compiled_autograd_verbos": 143, "stderr": 143, "aot0_": 143, "aot0_view_2": 143, "view_2": 143, "aot": [143, 158, 252, 295], "unoptim": [143, 191], "aot_eag": [143, 158], "graph_break": [143, 298], "unique_graph": 143, "call_hook": 143, "div": [143, 158, 216, 226, 252], "adjac": 144, "dilat": 144, "ep": [144, 151, 181, 193, 200, 216, 228, 230, 231, 234, 252, 253, 298], "track_running_statist": 144, "denomin": 144, "nenadmarku": [144, 156], "bulk": 144, "fusedconvbn": 144, "geforc": 144, "rtx": 144, "3070": 144, "56gb": 144, "unfus": 144, "68gb": 144, "shallow": [144, 151], "custom_function_conv_bn_tutori": [144, 184], "grad_out": 145, "finit": [145, 164], "differenc": 145, "magnifi": 145, "gradgradcheck": [145, 283], "grad_x": 145, "make_dot": 145, "dout": 145, "ouptut": 145, "sinh": 145, "cosh": 145, "expx": 145, "expnegx": 145, "_grad_out_exp": 145, "_grad_out_negexp": 145, "sinhbad": 145, "cube_backward": 145, "cubebackward": 145, "cube_forward": 145, "cube_backward_backward": 145, "sav_grad_out": 145, "cube_backward_backward_grad_out": 145, "cube": 145, "dgrad_out": 145, "reachabl": [146, 147, 150], "2xlarg": [146, 147], "hydra": 146, "slurm": [146, 147, 148, 150], "char_dataset": 146, "gpt2_train_cfg": 146, "bucket": [146, 283], "aggress": 146, "rendezv": [147, 173], "nccl_debug": 147, "diagnos": 147, "nccl_socket_ifnam": 147, "eth0": 147, "joe": 148, "zhu": [148, 158], "chirag": [148, 203], "pandya": [148, 203], "clarifi": 148, "filestor": 148, "libtmp": 148, "some_fil": 148, "toymodel": [148, 246, 247, 249], "net1": [148, 246, 247, 248, 249], "net2": [148, 246, 247, 248, 249], "demo_bas": 148, "ddp_model": [148, 302], "run_demo": 148, "demo_fn": 148, "caution": 148, "straggler": [148, 187], "inevit": 148, "spike": [148, 176], "AND": 148, "recoveri": 148, "torchelast": 148, "demo_checkpoint": 148, "checkpoint_path": [148, 228], "gettempdir": 148, "toympmodel": 148, "dev0": 148, "dev1": 148, "output_devic": 148, "demo_model_parallel": 148, "mp_model": 148, "ddp_mp_model": 148, "n_gpu": [148, 152, 209], "elastic_ddp": 148, "rdzv_id": [148, 249], "rdzv_backend": 148, "rdzv_endpoint": [148, 249], "29400": [148, 249], "scontrol": 148, "hostnam": 148, "slurm_nodelist": 148, "srun": 148, "torchrun_script": 148, "s\u00e9b": 150, "arnold": 150, "sysadmin": 150, "coordin": [150, 185, 198, 208, 219, 301], "pdsh": 150, "clustershel": 150, "init_process": 150, "127": [150, 200, 230, 231], "set_start_method": 150, "ip": 150, "recv": [150, 172, 181], "irecv": 150, "dst": 150, "req": 150, "behaviour": 150, "fanci": 150, "baidu": 150, "deepspeech": 150, "facebook": 150, "communc": 150, "new_group": [150, 172, 249], "commut": 150, "band": 150, "bor": 150, "bxor": 150, "premul_sum": 150, "scatter_list": 150, "gather_list": 150, "all_to_al": 150, "output_tensor_list": 150, "input_tensor_list": 150, "data_idx": 150, "datapartition": 150, "1234": 150, "data_len": 150, "part_len": 150, "partition_dataset": 150, "get_world_s": 150, "bsz": [150, 204], "partition_s": 150, "train_set": [150, 187], "30000": 150, "ceil": 150, "epoch_loss": [150, 175], "average_gradi": 150, "voil\u00e0": 150, "send_buff": 150, "recv_buff": 150, "accum": [150, 220], "send_req": 150, "bandwidth": [150, 187, 194, 225, 254], "subsect": 150, "mpi": 150, "eleg": 150, "smi": [150, 266], "mvapich2": 150, "ipc": [150, 187], "recompil": [150, 191, 228, 244, 288, 292, 293], "requisit": 150, "forg": [150, 256, 301], "openmpi": 150, "mpirun": 150, "myscript": 150, "handshak": 150, "superflu": 150, "everybodi": 150, "readili": 150, "race": [150, 250], "fcntl": 150, "nf": [150, 203], "sharedfil": 150, "everyon": 150, "unclear": [150, 193], "natalia": 150, "gimelshein": 150, "actor": 151, "carrier": [151, 177], "step_mdp": 151, "brought": [151, 170, 177, 193], "mod": [151, 191, 193, 237, 280, 298], "lazymemmapstorag": 151, "tensordictreplaybuff": 151, "explorationtyp": 151, "inittrack": 151, "rewardsc": 151, "set_exploration_typ": 151, "totensorimag": 151, "egreedymodul": 151, "lstmmodul": 151, "qvaluemodul": 151, "dqnloss": 151, "is_fork": 151, "get_start_method": 151, "84x84": 151, "accessori": [151, 176], "stamp": 151, "is_init": 151, "tensordictprim": 151, "primer": [151, 219], "disappear": 151, "standard_norm": 151, "reduce_dim": 151, "cat_dim": 151, "keep_dim": 151, "backbon": [151, 190], "flank": 151, "assist": [151, 249], "num_cel": 151, "squeeze_output": 151, "aggregator_class": 151, "aggregator_kwarg": 151, "n_cell": 151, "tensordictmodulebas": 151, "batch_first": 151, "recurrent_state_h": 151, "recurrent_state_c": 151, "make_tensordict_prim": 151, "append_transform": 151, "interpolationmod": 151, "bilinear": 151, "unboundedcontinu": 151, "continuousbox": 151, "default_valu": 151, "action_valu": 151, "qval": 151, "qvalueactor": 151, "stoch_polici": 151, "exploration_modul": 151, "annealing_num_step": 151, "1_000_000": 151, "eps_init": 151, "set_recurrent_mod": 151, "tensordict_modul": 151, "710": [151, 161], "recur": [151, 218], "default_recurrent_mod": 151, "uniniti": [151, 236], "int64": [151, 204, 219], "chosen_action_valu": 151, "step_count": 151, "delay_valu": 151, "action_spac": [151, 178], "3e": 151, "20_000": 151, "prefetch": [151, 197], "pbar": 151, "longest": [151, 157], "npai": 151, "recurrent_st": 151, "to_tensordict": 151, "set_descript": 151, "action_spread": 151, "1000000": 151, "traj_id": 151, "74it": 151, "0006": 151, "71it": 151, "0005": 151, "07it": 151, "86it": 151, "0007": 151, "xlabel": [151, 190], "460": [151, 184], "dqn_with_rnn_tutori": [151, 184], "jianyu": 152, "huang": [152, 172, 173, 201, 246, 247], "jessica": [152, 175], "paraphras": 152, "mrpc": [152, 209], "dolan": 152, "brockett": 152, "2005": 152, "imbalanc": 152, "sklearn": [152, 190], "whl": [152, 175, 187, 191, 194, 208, 230], "cu101": [152, 175], "torch_nightli": [152, 175], "bertconfig": [152, 209], "bertforsequenceclassif": [152, 209], "glue_compute_metr": [152, 209], "compute_metr": [152, 209, 234], "glue_output_mod": [152, 209], "output_mod": [152, 209], "glue_processor": [152, 209], "processor": [152, 196, 209, 229, 241, 255, 283, 287, 301], "glue_convert_examples_to_featur": [152, 209], "convert_examples_to_featur": [152, 209], "basicconfig": [152, 209], "asctim": [152, 209], "levelnam": [152, 209], "datefmt": [152, 209], "modeling_util": [152, 209], "setlevel": [152, 209], "set_num_thread": [152, 176, 204, 209], "__config__": [152, 209], "parallel_info": [152, 209], "sep": 152, "glue_data": [152, 209], "download_glue_data": [152, 209], "spirit": 152, "uncas": [152, 197, 209], "glue_dir": [152, 209], "task_nam": [152, 209], "out_dir": [152, 209], "run_glu": 152, "model_typ": [152, 209, 224], "model_name_or_path": [152, 209], "do_train": 152, "do_ev": 152, "do_lower_cas": [152, 209], "max_seq_length": [152, 209], "per_gpu_eval_batch_s": [152, 209], "per_gpu_train_batch_s": 152, "num_train_epoch": [152, 234], "save_step": 152, "output_dir": [152, 209], "label_list": [152, 190, 209], "get_label": [152, 209], "overwrite_cach": [152, 209], "copyright": 152, "inc": 152, "apach": [152, 196, 197], "complianc": 152, "law": [152, 221], "AS": 152, "warranti": 152, "OR": [152, 281], "OF": 152, "govern": [152, 179], "permiss": 152, "mnli": [152, 209], "mi": [152, 209], "eval_task_nam": [152, 209], "eval_outputs_dir": [152, 209], "eval_task": [152, 209], "eval_output_dir": [152, 209], "eval_dataset": [152, 209, 234], "load_and_cache_exampl": [152, 209], "makedir": [152, 209], "eval_sampl": [152, 209], "eval_dataload": [152, 209, 256], "num": [152, 179, 209], "eval_loss": 152, "nb_eval_step": [152, 209], "out_label_id": [152, 209], "distilbert": [152, 209], "token_type_id": [152, 209], "xlnet": [152, 209], "xlm": [152, 209], "roberta": [152, 209], "segment_id": [152, 209], "tmp_eval_loss": 152, "output_eval_fil": [152, 209], "eval_result": [152, 209], "cached_features_fil": [152, 209], "cached_": [152, 209], "get_dev_exampl": [152, 209], "get_train_exampl": [152, 209], "pad_on_left": 152, "convert_tokens_to_id": 152, "pad_token_segment_id": 152, "all_input_id": [152, 209], "all_attention_mask": [152, 209], "all_token_type_id": [152, 209], "all_label": [152, 209], "qint8": [152, 200, 264], "181": [152, 267], "30522": 152, "768": [152, 161, 209, 234], "time_model_evalu": [152, 204, 209], "eval_start_tim": [152, 209], "eval_end_tim": [152, 209], "eval_duration_tim": [152, 209], "408": [152, 197], "prec": [152, 161], "9019": 152, "8788": 152, "8956": 152, "asymmetr": [152, 224, 230, 231], "openmp": [152, 196, 241, 262], "tbb": 152, "ids_tensor": [152, 209], "int32": [152, 208, 209, 226, 231, 252, 270], "dummy_input": [152, 209, 300], "traced_model": [152, 209], "bert_traced_eager_qu": 152, "loaded_quantized_model": [152, 205, 226], "implic": [152, 209], "devlin": 152, "lee": 152, "toutanova": 152, "zafrir": 152, "boudoukh": 152, "izsak": 152, "wasserblat": 152, "2019": 152, "q8bert": 152, "8bit": 152, "tradition": [153, 236], "pretend": [153, 169], "stack_module_st": 153, "functional_cal": [153, 164, 169], "num_model": 153, "front": [153, 174, 193, 196, 197], "in_dim": [153, 169, 239], "weren": [153, 169], "forced_alignment_tutori": 154, "incomplet": [155, 170], "eagerli": [155, 167, 193, 296], "primal": 155, "dual": 155, "dual_level": 155, "fresh": [155, 266], "check_forward_ad": 155, "check_backward_ad": 155, "check_undefined_grad": 155, "check_batched_grad": 155, "functorch": 155, "downsid": [155, 170], "reformul": [155, 164], "ft": 155, "make_functional_with_buff": 155, "analog": [155, 193, 194, 218, 219], "consolid": [155, 179, 194, 228], "dual_numb": 155, "forward_ad_usag": [155, 184], "horac": 156, "he": [156, 160, 183], "orig": 156, "clariti": [156, 270], "simplif": [156, 270], "conclus": 156, "hear": [156, 157], "tracker": [156, 157], "fx_conv_bn_fus": [156, 184], "nicer": 157, "tabul": [157, 191, 203, 295], "ca": 157, "symbolic_trac": 157, "profilinginterpret": 157, "clock": [157, 267], "51393": 157, "fx_profiling_tutori": [157, 184], "xuan": 158, "liao": 158, "haozh": 158, "jiong": [158, 196, 197, 210, 220, 229, 231], "gong": [158, 196, 197, 210, 220, 229, 231], "weihan": 158, "intricaci": 158, "troubleshoot": 158, "pinpoint": [158, 193, 197, 248], "narrow": [158, 193, 203, 204, 221], "torch_compile_debug": 158, "_inductor": [158, 193, 210, 220, 229, 252, 297], "model___20": 158, "torchinductor_root": 158, "rx": 158, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 158, "fx_graph_runn": 158, "fx_graph_transform": 158, "ir_pre_fus": 158, "ir_post_fus": 158, "output_cod": [158, 220, 252, 299], "triton": [158, 191, 211, 220, 229, 230, 252, 287, 290, 292, 297], "gv": 158, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 158, "tmp2": [158, 220, 252], "tmp1": [158, 220, 252], "exc": [158, 298], "backendcompilerfail": 158, "cppcompileerror": 158, "xg": 158, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 158, "unsign": [158, 267], "max_propagate_nan": 158, "tmp3": [158, 220, 252], "tmp0": [158, 220, 252], "deduct": 158, "substitut": [158, 159, 167, 231], "deduc": 158, "in_ptr0": [158, 252], "in_ptr1": [158, 252], "out_ptr0": 158, "pragma": [158, 220], "ivdep": [158, 220], "i0": 158, "static_cast": [158, 220, 252], "0l": [158, 220, 252], "8390l": 158, "1l": [158, 210, 220], "i1": 158, "8l": 158, "buf0": [158, 210], "schedulernod": 158, "computedbuff": 158, "memorydep": 158, "c0": 158, "67120": 158, "unmet_depend": 158, "met_depend": 158, "arg0_1": [158, 210, 252], "8390": 158, "arg1_1": [158, 252], "nodeus": 158, "can_inplac": 158, "buf0_loop_bodi": 158, "var_rang": 158, "z0": 158, "index0": 158, "index1": 158, "get_index": 158, "get_index_1": 158, "load_1": 158, "get_index_2": 158, "minifi": 158, "dead": 158, "minif": 158, "allclos": [158, 164, 201, 234, 252], "tol": 158, "test_script": 158, "expected_result": 158, "actual_result": 158, "torchdynamo_repro_aft": 158, "torchdynamo_repro_level": 158, "mobilebertforquestionansw": 158, "xeon": [158, 161, 196, 229, 241, 255, 287], "platinum": [158, 196], "8358": 158, "60ghz": 158, "kmp_blocktim": [158, 283, 301], "kmp_set": 158, "kmp_affin": [158, 283, 301], "compact": [158, 283, 301], "ld_preload": [158, 283, 301], "conda_prefix": [158, 267], "dirnam": [158, 173, 262], "libiomp5": [158, 283, 301], "libjemalloc": [158, 301], "malloc_conf": [158, 301], "oversize_threshold": [158, 301], "background_thread": [158, 301], "metadata_thp": [158, 301], "dirty_decay_m": 158, "muzzy_decay_m": 158, "numactl": [158, 283, 301], "bench": [158, 196, 197], "eager_t": 158, "num_it": 158, "inductor_t": 158, "1023553796113": 158, "339": 158, "95180135127157": 158, "359459053287382": 158, "355x": 158, "enable_kernel_profil": 158, "370": 158, "814m": 158, "89": [158, 181, 196, 273], "161": [158, 253], "276m": 158, "363": 158, "97": [158, 181, 254], "121": [158, 273], "416m": 158, "488": [158, 267], "154m": 158, "clamp_min": [158, 254], "81": [158, 254], "444m": 158, "bmm": [158, 221, 241, 267], "258m": [158, 254], "810": 158, "920m": 158, "447m": 158, "_softmax": 158, "087m": 158, "888m": 158, "430m": 158, "502m": 158, "161m": 158, "850": 158, "377m": 158, "386": [158, 181, 273], "index_select": 158, "000u": [158, 273], "420m": 158, "703": 158, "656": [158, 302], "963": 158, "864m": 158, "_mkl_linear": [158, 220], "573m": [158, 273], "992m": 158, "336": [158, 273], "642m": 158, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 158, "915": 158, "911": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 158, "901": [158, 209], "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 158, "898": [158, 300], "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 158, "895": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 158, "893": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 158, "892": [158, 176, 267, 300], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 158, "891": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 158, "890": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 158, "889": 158, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 158, "graph_0_cpp_fused_": 158, "63x": 158, "cblas_sgemm_comput": 158, "339m": 158, "94x": 158, "cpp_fused__mkl_linear_add_mul_relu_151": 158, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 158, "bottl": [158, 246], "neck": [158, 246], "780875144992024": 158, "9588955780491233": 158, "0286805751604735": 158, "smallest": [158, 174], "solid": 158, "analyt": 158, "hotspot": [158, 196, 197, 262], "phenomenon": 158, "inductor_debug_cpu": [158, 184], "annoi": 159, "jax": [159, 164, 239], "argnum": 159, "millisecond": [159, 173, 283], "get_perf": 159, "rigor": [159, 270], "taller": 159, "hessiani": 159, "overwhelm": 159, "jacobians_hessian": [159, 184], "yuansong": 160, "steven": 160, "guo": 160, "cheatsheet": 160, "companion": 160, "bro": 160, "ne": [160, 183, 273], "emul": [160, 209], "tube": 160, "mushroom": 160, "screen": [160, 178, 262], "next_stat": [160, 178], "240": [160, 181, 273], "pipe": 160, "sky": 160, "grayscaleobserv": 160, "resizeobserv": 160, "skipfram": 160, "framestack": 160, "hi": [160, 221], "movement": 160, "exploration_r": 160, "marionet": 160, "ddqn": 160, "_e": 160, "argmax_": 160, "td_target": 160, "td_t": 160, "td_e": 160, "leftarrow": 160, "nabla": 160, "episod": [160, 178, 179, 181], "mario_rl_tutori": [160, 184], "vitali": 161, "fedyunin": 161, "densest": 161, "4x4": 161, "10x3x16x16": 161, "minor": [161, 175, 181, 188, 255, 256], "ambigu": [161, 217, 218], "n1hw": 161, "contrari": [161, 170, 174], "restrid": 161, "unintend": 161, "apex": 161, "main_amp": 161, "resnet50": [161, 176, 179, 196, 197, 255, 283, 291], "o2": 161, "opt_level": 161, "keep_batchnorm_fp32": 161, "nonetyp": 161, "loss_scal": 161, "7603": 161, "cast_model_typ": 161, "patch_torch_funct": 161, "master_weight": 161, "125": [161, 273], "866": 161, "230": [161, 181, 190], "949": 161, "6735125184": 161, "6735": 161, "773": 161, "481": 161, "355": 161, "693": 161, "6968704462": 161, "6852": 161, "258": 161, "461": 161, "775": 161, "089": 161, "965": 161, "7877287269": 161, "7194": 161, "833": 161, "771": 161, "8285319805": 161, "7467": 161, "260": [161, 181], "770": 161, "090": 161, "525": 161, "7370464802": 161, "7447": 161, "360": 161, "623": 161, "555": 161, "728": 161, "7592862844": 161, "7472": 161, "917": 161, "774": 161, "746": [161, 267], "115": [161, 209, 254], "9698858261": 161, "9218": 161, "597": 161, "659": 161, "2505953312": 161, "0879": 161, "785": 161, "7579724789": 161, "7580": 161, "198": 161, "482": 161, "135": [161, 176, 267], "414": 161, "716": [161, 254, 267], "7007197738": 161, "7293": 161, "387": 161, "1010": 161, "516": 161, "7113101482": 161, "7233": 161, "667": 161, "197": 161, "340": 161, "1013": 161, "023": 161, "588": 161, "333": 161, "8943189979": 161, "7661": 161, "541": 161, "7113249302": 161, "9551": 161, "1011": 161, "163": 161, "574": 161, "8537774086": 161, "7716": 161, "279": 161, "453": 161, "7595844269": 161, "3413": 161, "429": 161, "269": 161, "827": 161, "743": 161, "883": 161, "8196096420": 161, "4011": 161, "volta": [161, 266, 283], "alexnet": 161, "mnasnet0_5": 161, "mnasnet0_75": 161, "mnasnet1_0": 161, "mnasnet1_3": 161, "mobilenet_v2": [161, 176, 198, 240, 264], "resnet101": 161, "resnet152": 161, "resnet34": 161, "resnext50_32x4d": 161, "shufflenet_v2_x0_5": [161, 176], "shufflenet_v2_x1_0": [161, 176], "shufflenet_v2_x1_5": [161, 176], "shufflenet_v2_x2_0": [161, 176], "squeezenet1_0": 161, "squeezenet1_1": 161, "vgg11": 161, "vgg11_bn": 161, "vgg13": 161, "vgg13_bn": 161, "vgg16": 161, "vgg16_bn": 161, "vgg19_bn": 161, "wide_resnet101_2": 161, "wide_resnet50_2": 161, "ic": [161, 230], "lake": [161, 255], "densenet121": 161, "densenet161": 161, "densenet169": 161, "googlenet": [161, 176, 264], "inception_v3": [161, 176], "resnext101_32x8d": [161, 176], "spite": 161, "nc11": 161, "memory_format_tutori": [161, 184], "year": [164, 168, 199], "jacrev": 164, "21632": 164, "x_test": 164, "fnet_singl": 164, "j_": 164, "empirical_ntk_jacobian_contract": 164, "x1": [164, 193, 198, 220, 252], "x2": [164, 193, 252], "jac1": 164, "jac2": 164, "einsum": 164, "naf": 164, "mbf": 164, "nmab": 164, "j1": 164, "j2": 164, "diagon": 164, "einsum_expr": 164, "maf": 164, "nma": 164, "asymptot": 164, "i_o": 164, "i_": 164, "e_o": 164, "textrm": 164, "_o": 164, "empirical_ntk_ntk_vp": 164, "get_ntk": 164, "func_x1": 164, "func_x2": 164, "vjp_fn": 164, "get_ntk_slic": 164, "nmkk": 164, "nmk": 164, "tensorfloat": 164, "sacrific": 164, "allow_tf32": 164, "result_from_jacobian_contract": 164, "result_from_ntk_vp": 164, "luck": [164, 167, 194], "789": [164, 184], "neural_tangent_kernel": [164, 184], "french": [165, 183], "homepag": [166, 202], "ooz": 167, "_might_": 167, "2p": 167, "ephemer": 167, "memory_viz": 167, "devot": 167, "bat": [167, 211], "2gb": [167, 176], "6gb": 167, "foreach": [167, 252], "reveal": [167, 182, 191, 265, 267], "silver": 167, "bullet": 167, "sizabl": [167, 170], "tantamount": 167, "eat": 167, "lora": 167, "unlock": [167, 205, 209, 224, 250], "vit_l_16": 167, "neat": 167, "lrschedul": [167, 287], "slate": 167, "woohoo": 167, "apart": 167, "shrunk": 167, "0gb": 167, "optimizer_step_in_backward_tutori": [167, 184], "lezcano": 168, "surprisingli": 168, "ill": 168, "frobeniu": 168, "spectral": 168, "lipschitz": 168, "x\u1d40": 168, "upper": [168, 182, 193, 273], "triangular": 168, "reimplement": [168, 174, 193], "skew": [168, 187, 273], "unparametr": 168, "linearsymmetr": 168, "moduledict": [168, 172, 234], "parametrizationlist": [168, 234], "inbuilt": 168, "caylei": 168, "spd": 168, "right_invers": 168, "remove_parametr": 168, "parametri": 168, "leave_parametr": 168, "privaci": [169, 174], "sample_grad": 169, "compute_loss": 169, "ft_compute_grad": 169, "0th": [169, 174, 182, 221], "25x": [169, 190, 234], "opacu": 169, "per_sample_grad": [169, 184], "cpu_tensor": 170, "cuda_tensor": [170, 283], "erron": 170, "carefulli": [170, 283], "isol": [170, 175, 191], "illus": 170, "anywher": 170, "cudastreamsynchron": 170, "dma": 170, "volterra": 170, "tesla": 170, "h100": [170, 191], "t3_cuda": 170, "belief": [170, 193], "brand": 170, "cudahostalloc": 170, "cudamemcpi": 170, "doubt": 170, "interestingli": 170, "tick": 170, "__whenev": 170, "memory__": 170, "corrupt": 170, "garbag": 170, "reliabl": [170, 267], "annihil": 170, "legitim": 170, "notori": 170, "inher": [170, 193, 194, 247], "blockag": 170, "afterward": [170, 193, 207], "non_blocking_pin": 170, "ration": 170, "outweigh": [170, 254], "perman": [170, 174], "shuttl": 170, "expedit": 170, "advers": 170, "bu": 170, "monopol": 170, "pinmem_nonblock": [170, 184], "microbatch": 172, "micro": [172, 196, 197], "educ": [172, 199], "dataclass": [172, 231], "modelarg": 172, "witout": 172, "layernorm": [172, 199, 234], "splitpoint": 172, "pipelinestag": 172, "schedulegpip": 172, "pp_group": 172, "stage_index": 172, "num_stag": 172, "init_distribut": 172, "peer": [172, 302], "manual_model_split": 172, "split_spec": 172, "4th": [172, 241], "mirror": [172, 229, 230], "build_stag": 172, "gpipe": 172, "1f1b": 172, "interleaved1f1b": 172, "loopedbf": 172, "num_microbatch": 172, "example_input_microbatch": 172, "tracer_model_split": 172, "tokenwise_loss_fn": 172, "n_microbatch": 172, "pipelining_tutori": 172, "tian": 173, "si": 173, "zeroredundancyoptim": [173, 287], "processgroupnccl": 173, "processgroupgloo": 173, "processgroupmpi": 173, "ucc": 173, "oneccl": [173, 283], "trainum": 173, "emerg": 173, "backenddummi": 173, "chrono": 173, "outputtensor": [173, 240], "inputtensor": [173, 240], "allgatheropt": 173, "allreduceopt": 173, "workdummi": 173, "optyp": 173, "recvanysourc": 173, "future_": 173, "iscomplet": 173, "issuccess": 173, "kunsettimeout": 173, "getfutur": 173, "outputtensorvec": 173, "listtyp": 173, "tensortyp": 173, "markcomplet": 173, "createbackenddummi": 173, "backenddummyconstructor": 173, "__attribute__": 173, "register_backend": 173, "cpp_function": [173, 267], "libraries_dir": 173, "dummy_collect": 173, "michela": 174, "paganini": 174, "biolog": 174, "batteri": 174, "subnetwork": 174, "lotteri": 174, "ticket": 174, "destruct": [174, 197, 301], "0a0": [174, 240], "8e8a5e0": 174, "lecun": 174, "1998": 174, "unprun": 174, "basepruningmethod": 174, "adequ": [174, 177], "weight_orig": 174, "_orig": 174, "intact": [174, 179, 280], "weight_mask": 174, "_mask": 174, "forward_pre_hook": 174, "l1_unstructur": 174, "bias_orig": 174, "bias_mask": 174, "pruningcontain": 174, "compute_mask": 174, "ln_structur": 174, "undo": 174, "reassign": 174, "global_unstructur": 174, "apply_mask": 174, "unstructur": 174, "preprun": 174, "pruning_typ": 174, "pruning_tutori": [174, 184], "zafar": 175, "takhirov": 175, "initializaion": 175, "unfreez": 175, "ion": 175, "image_dataset": 175, "dataset_s": 175, "fig": [175, 188], "set_xtick": 175, "set_ytick": 175, "set_titl": [175, 188], "nrow": 175, "train_model": 175, "best_model_wt": 175, "best_acc": 175, "running_correct": 175, "set_grad_en": [175, 254], "epoch_acc": 175, "visualize_model": 175, "was_train": 175, "current_row": 175, "current_col": 175, "lbl": 175, "jdx": 175, "model_f": 175, "create_combined_model": 175, "model_fe_featur": 175, "bn1": 175, "layer1": 175, "layer4": 175, "avgpool": 175, "new_head": 175, "new_model": 175, "optimizer_ft": 175, "exp_lr_schedul": 175, "tight_layout": 175, "appar": 175, "model_ft": 175, "default_qat_qconfig": 175, "model_ft_tun": 175, "model_quantized_and_train": 175, "ioff": 175, "sink": 176, "5v": 176, "sd": 176, "card": [176, 182], "8gb": 176, "arm": [176, 254, 264], "64bit": 176, "aarch64": 176, "arm64": [176, 240, 253], "raspberrypi": 176, "raspios_arm64": 176, "rpi": 176, "sdcard": 176, "start_x": 176, "128m": 176, "gpu_mem": 176, "commment": 176, "camera_auto_detect": 176, "v4l2": 176, "reboot": 176, "video4linux2": 176, "video0": 176, "picamera": 176, "36fp": 176, "30fp": 176, "framer": 176, "cv2": 176, "cap": [176, 177, 187], "videocaptur": 176, "cap_prop_frame_width": 176, "cap_prop_frame_height": 176, "cap_prop_fp": 176, "bgr": 176, "ret": [176, 179], "input_tensor": 176, "input_batch": 176, "qnnpack": [176, 200, 253, 264], "mobilenet_v3_larg": 176, "233": [176, 181], "885": [176, 254], "204": [176, 254, 267], "132": 176, "prequant": 176, "20fp": 176, "cap_v4l2": 176, "last_log": 176, "frame_count": 176, "ui": [176, 187, 262, 281, 287], "htop": [176, 196], "mug": 176, "allevi": 176, "repetit": [177, 267], "maximis": 177, "clipppoloss": 177, "theta_k": 177, "pi_": 177, "lingua": 177, "franca": 177, "sub_batch_s": 177, "deepmind": [177, 185], "interchang": 177, "panel": [177, 187], "transmit": 177, "gymwrapp": 177, "loos": 177, "supplementari": 177, "stringent": 177, "mu_": 177, "d_ob": 177, "d_action": 177, "mu": [177, 190], "normalparamextractor": 177, "probabilisticactor": 177, "tanhnorm": 177, "discount": [177, 178, 179], "amort": [177, 179], "datacollector": 177, "multisyncdatacollector": 177, "refil": 177, "replaybuff": 177, "gae": 177, "value_target": 177, "videorecord": 177, "reinforcement_ppo": [177, 184], "tower": 178, "cart": 178, "pole": 178, "upright": 178, "classic_control": 178, "observation_spac": 178, "decorrel": 178, "replaymemori": 178, "cyclic": 178, "formul": 178, "r_": 178, "t_0": 178, "r_t": 178, "uncertain": 178, "tempor": 178, "max_a": 178, "obei": 178, "bellman": 178, "huber": 178, "noisi": [178, 267, 282], "mathcal": 178, "le": [178, 183], "mathrm": 178, "select_act": [178, 179, 181], "eps_start": 178, "eps_end": 178, "eps_decai": 178, "plot_dur": 178, "underneath": [178, 193], "tau": 178, "optimize_model": 178, "s_t": 178, "a_t": 178, "num_episod": [178, 179], "target_net": 178, "reinforcement_q_learn": [178, 184], "calle": [179, 180, 245], "unblock": 179, "idl": [179, 187, 273], "callback": 179, "paus": [179, 228], "update_and_fetch_model": 179, "future_model": 179, "batch_update_s": 179, "batchupdateparameterserv": 179, "curr_update_s": 179, "get_model": 179, "ps_rref": 179, "local_valu": [179, 180], "setti": 179, "set_result": 179, "rpc_sync": [179, 180, 181, 245], "image_w": 179, "image_h": 179, "one_hot_indic": 179, "random_": 179, "get_worker_info": [179, 181], "543": 179, "affine1": [179, 181], "affine2": [179, 181], "action_scor": [179, 181], "select_action_batch": 179, "run_episod": [179, 181], "agent_rref": [179, 181], "ep_reward": [179, 181], "num_step": 179, "start_step": 179, "from_numpi": [179, 181], "curr_reward": 179, "prob": [179, 181, 188], "saved_log_prob": [179, 181], "rob": 179, "ob_rref": [179, 181], "running_reward": [179, 181], "ob_rank": [179, 181], "ob_info": [179, 181], "observer_nam": [179, 181], "future_act": 179, "pending_st": 179, "select_acion": 179, "ob_id": [179, 181], "log_prob": [179, 181], "stitch": [179, 180], "oberv": [179, 181], "wait_al": 179, "policy_loss": [179, 181], "passiv": [179, 181], "run_work": [179, 180, 181, 245], "n_episod": 179, "print_log": 179, "init_rpc": [179, 180, 181, 245], "agent_nam": [179, 181], "i_episod": [179, 181], "last_reward": [179, 181], "tlast": [179, 181], "taverag": [179, 181], "shutdown": [179, 180, 181, 245], "tik": [179, 245], "tok": [179, 245], "dist_autograd": [180, 181], "num_gpu": 180, "dropout2d": [180, 256], "next_devic": 180, "call_method": 180, "remote_method": 180, "foo_inst": 180, "parameterserv": 180, "input_devic": 180, "intention": [180, 181, 245], "miscellan": 180, "get_dist_gradi": 180, "get_gradi": 180, "get_param_rref": 180, "cid": 180, "cpu_grad": 180, "k_cpu": 180, "v_cpu": 180, "paramt": 180, "param_rref": [180, 181], "run_parameter_serv": 180, "param_serv": 180, "global_lock": 180, "get_parameter_serv": 180, "parameter_serv": 180, "shut": 180, "offlin": 180, "trainernet": 180, "param_server_rref": 180, "get_global_param_rref": 180, "paramat": 180, "remote_param": [180, 181], "model_output": 180, "run_training_loop": 180, "nueral": 180, "context_id": [180, 181], "get_accuraci": 180, "correct_sum": 180, "trainer_": 180, "traffic": [180, 196], "listen": 180, "subprocess": [180, 267, 283], "rpc_parameter_serv": 180, "solver": 181, "formatter_class": 181, "argumentdefaultshelpformatt": 181, "log_interv": 181, "report_reward": 181, "_max_episode_step": 181, "lifetim": 181, "finfo": 181, "reward_threshold": 181, "finish_episod": 181, "min_reward": 181, "surpass": 181, "ob": [181, 231], "ctrl": 181, "475": 181, "62": [181, 234, 252], "111": [181, 196, 209, 267, 300, 301], "130": [181, 254], "137": 181, "140": 181, "104": 181, "322": [181, 254], "165": 181, "272": [181, 254], "168": [181, 301], "184": [181, 209], "208": [181, 190, 265], "270": [181, 190], "405": 181, "280": 181, "290": 181, "3163778435275": 181, "embeddingt": 181, "destin": [181, 245], "rnnmodel": 181, "ntoken": [181, 204], "ninp": [181, 204], "nhid": [181, 204], "nlayer": [181, 204], "emb_table_rref": 181, "decoder_rref": 181, "_remote_method": 181, "rremot": 181, "_parameter_rref": 181, "parameter_rref": [181, 245], "run_train": 181, "nindic": 181, "driss": 182, "guessou": 182, "multiheadattent": 182, "flashattent": 182, "flash": [182, 208], "andrej": 182, "karpathi": 182, "nanogpt": 182, "causalselfattent": 182, "mine": 182, "166": 182, "726": 182, "amaz": 182, "compiled_causal_attention_trac": 182, "concentr": 182, "6090": 182, "3273": 182, "17m": 182, "commit": [182, 225, 241], "ae3a8d5": 182, "causal_upper_left": 182, "causal_lower_right": 182, "is_caus": [182, 199, 201], "causalbia": 182, "corner": 182, "attn_scor": 182, "sdpa_kernel": [182, 201], "scaled_dot_product_attention_tutori": [182, 184], "il": 183, "est": [183, 187], "peindr": 183, "tableau": 183, "paint": 183, "pourquoi": 183, "pa": 183, "essay": 183, "vin": 183, "delicieux": 183, "delici": 183, "wine": 183, "poet": 183, "romancier": 183, "she": 183, "novelist": 183, "vou": 183, "trop": 183, "maigr": 183, "skinni": 183, "condens": [183, 282], "unfold": 183, "phrase": 183, "tatoeba": 183, "eng": 183, "manyth": 183, "anki": 183, "fra": 183, "cold": [183, 271, 287, 290, 292], "froid": 183, "dozen": 183, "trim": [183, 204, 282], "lang": 183, "word2index": 183, "index2word": 183, "word2count": 183, "apostroph": 183, "je": 183, "sui": 183, "noir": 183, "attn_appli": 183, "exhibit": [183, 283], "coher": 183, "grammar": 183, "wander": 183, "freedom": 183, "plot_loss": 183, "judgement": 183, "matshow": 183, "iot": 183, "word2vec": 183, "glove": 183, "autoencod": 183, "seq2seq_translation_tutori": [183, 184], "313": 184, "torch_compile_tutori": [184, 191], "sdpa": [184, 199, 201], "torch_export_tutori": [184, 192, 193], "sphx_glr_intermediate_transformer_building_block": 184, "transformer_building_block": [184, 199], "spatial_transformer_tutori": [184, 185], "na": 184, "sphx_glr_intermediate_mnist_train_na": 184, "tensorboard_profiler_tutori": [184, 187], "torchrec_intro_tutori": [184, 194], "ghassen": 185, "hamrouni": 185, "geometr": 185, "invari": [185, 217], "boil": 185, "affine_grid": 185, "grid_sampl": 185, "speech_recognition_pipeline_tutori": 186, "perfetto": 187, "warmup": [187, 199, 237, 243, 244, 252, 254, 273, 296, 297], "on_trace_readi": [187, 273], "tensorboard_trace_handl": 187, "record_shap": [187, 273], "profile_memori": [187, 273], "torch_tb_profil": 187, "safari": 187, "pytorch_profil": 187, "breakdown": 187, "dropdown": 187, "callstack": 187, "multiprocessor": 187, "occup": 187, "tooltip": 187, "toolbar": 187, "keyboard": 187, "mous": 187, "resnet18_4work": 187, "76m": [187, 205], "132m": 187, "torchtbprofil": 187, "memory_demo_1_10": 187, "gpu0": 187, "children": [187, 273], "distributed_bert": 187, "profiler_tutori": 187, "test_cifar10": 187, "vi": 187, "hub": 187, "kfd": 187, "sys_ptrac": 187, "seccomp": 187, "unconfin": 187, "8g": 187, "apt": [187, 190, 301], "libjpeg": 187, "rocm5": 187, "scp": 187, "plot_classes_pr": 188, "matplotlib_imshow": 188, "one_channel": 188, "grei": 188, "fashion_mnist_experiment_1": 188, "img_grid": 188, "four_fashion_mnist_imag": 188, "refresh": [188, 194], "select_n_random": 188, "datapoint": 188, "perm": 188, "randperm": 188, "class_label": [188, 190], "label_img": 188, "thoroughli": 188, "images_to_prob": 188, "preds_tensor": 188, "el": 188, "arang": [188, 252, 280], "xtick": 188, "ytick": 188, "add_scalar": [188, 281], "add_figur": 188, "global_step": [188, 281], "scroll": 188, "3000": [188, 193, 298], "test_siz": 188, "class_prob": 188, "class_probs_batch": 188, "test_prob": 188, "test_label": 188, "add_pr_curve_tensorboard": 188, "class_index": 188, "tensorboard_truth": 188, "tensorboard_prob": 188, "add_pr_curv": 188, "poke": 188, "tacotron2_pipeline_tutori": 189, "wsi": 190, "tissu": 190, "surgeri": 190, "biopsi": 190, "scanner": 190, "pathologist": 190, "diseas": 190, "cancer": 190, "microscop": 190, "tumor": 190, "growth": [190, 219], "patient": 190, "000x100": 190, "25x0": 190, "micron": 190, "pyramid": 190, "magnif": 190, "sketch": 190, "histoencod": 190, "jopo666": 190, "openjpeg": 190, "openslid": 190, "pixman": 190, "qq": 190, "libopenjp2": 190, "libpixman": 190, "echo": 190, "brew": 190, "__future__": [190, 272, 280], "hashandl": 190, "nopython": 190, "shutil": 190, "zipfil": 190, "mpl": 190, "cm": 190, "accuracy_scor": 190, "confusion_matrix": 190, "patch_predictor": 190, "iopatchpredictorconfig": 190, "misc": 190, "download_data": 190, "grab_files_from_dir": 190, "overlay_prediction_mask": 190, "wsicor": 190, "wsiread": 190, "rcparam": 190, "dpi": 190, "facecolor": 190, "on_gpu": 190, "suppress": 190, "overli": 190, "suppress_console_output": 190, "redirect_stderr": 190, "stringio": 190, "abnorm": [190, 262], "global_save_dir": 190, "rmdir": 190, "dir_path": 190, "is_dir": 190, "rmtree": 190, "kather": 190, "100k": 190, "wsi_path": 190, "sample_wsi": 190, "sv": 190, "patches_path": 190, "kather100k": 190, "weights_path": 190, "dc": 190, "warwick": 190, "uk": 190, "tcga": 190, "3l": 190, "aa1b": 190, "01z": 190, "dx1": 190, "8923a151": 190, "a690": 190, "40b7": 190, "9e5a": 190, "fcbedfc2394f": 190, "extractal": 190, "pc": 190, "patch_list": 190, "dataset_path": 190, "image_ext": 190, "tif": 190, "label_dict": 190, "glass": 190, "mucosa": 190, "deb": 190, "debri": 190, "tum": 190, "colorect": 190, "adenocarcinoma": 190, "epithelium": 190, "adi": 190, "adipos": 190, "muc": 190, "mucu": 190, "stroma": 190, "lym": 190, "lymphocyt": 190, "dataset_class_path": 190, "patch_list_single_class": 190, "file_typ": 190, "ylabel": 190, "211": [190, 254, 273], "178": 190, "209": 190, "abc": 190, "modelabc": 190, "tia": 190, "toolbox": 190, "readthedoc": 190, "_autosummari": 190, "models_abc": 190, "preproc_func": 190, "predictor": [190, 298], "pretrained_weight": 190, "cnnmodel": 190, "fromarrai": 190, "conf": [190, 256], "df_cm": 190, "993000": 190, "000000": 190, "00000": 190, "988636": 190, "011364": 190, "991304": 190, "008696": 190, "996503": 190, "003497": 190, "004808": 190, "990385": 190, "988764": 190, "011236": 190, "996296": 190, "003704": 190, "004785": 190, "985646": 190, "004310": 190, "99569": 190, "input_resolut": 190, "patch_input_shap": 190, "stride_shap": 190, "wsi_ioconfig": 190, "mpp": 190, "return_prob": 190, "ioconfig": 190, "greatest": [190, 266], "unnecessari": [190, 193, 197, 199, 245, 286, 301], "merge_predict": 190, "wsi_output": 190, "wsi_predict": 190, "overlai": 190, "overlay_patch_predict": 190, "overview_resolut": 190, "overview_unit": 190, "wsi_overview": 190, "slide_thumbnail": 190, "label_color_dict": 190, "get_cmap": 190, "set1": 190, "pred_map": 190, "label_info": 190, "return_ax": 190, "histologi": 190, "pohjonen": 190, "joona": 190, "helsinki": 190, "umap": 190, "semantic_segmentor": 190, "deepfeatureextractor": 190, "iosegmentorconfig": 190, "histoencwrapp": 190, "histoenc": 190, "feat_extract": 190, "extract_featur": 190, "num_block": 190, "avg_pool": 190, "infer_batch": 190, "batch_data": 190, "img_patches_devic": 190, "inference_mod": [190, 234], "create_encod": 190, "prostate_medium": 190, "662": 190, "446": 190, "605": 190, "155": 190, "output_resolut": 190, "patch_output_shap": 190, "auto_generate_mask": 190, "otsu": 190, "num_loader_work": 190, "num_postproc_work": 190, "wsi_featur": 190, "umap_reduc": 190, "n_neighbor": 190, "n_compon": 190, "manhattan": 190, "random_st": 190, "fit_transform": 190, "npy": 190, "5mpp": 190, "4mpp": 190, "histolog": 190, "william": [191, 193, 296], "devel": 191, "elsewher": 191, "torchinductor": [191, 210, 211, 220, 229, 230, 283, 292], "torchtriton": 191, "cu117": 191, "opt_mod": 191, "complex_funct": 191, "complex_conjug": 191, "outer_funct": 191, "_orig_": 191, "dashboard": [191, 281], "struggl": 191, "fn1": 191, "fn2": 191, "f2": 191, "disallow": 191, "zhengxu": 193, "angela": [193, 297], "pian": 193, "pawakapan": 193, "synonym": 193, "dynamic_shap": [193, 226, 228, 298], "graph_signatur": 193, "range_constraint": 193, "stronger": [193, 298], "safeti": [193, 298], "cond": 193, "predic": 193, "true_fn": 193, "false_fn": 193, "while_loop": 193, "associative_scan": 193, "adher": [193, 236], "x0": [193, 198, 220, 252], "s0": 193, "s1": 193, "x3": [193, 252], "s5": 193, "proof": 193, "_log": [193, 252, 299], "set_log": [193, 252], "spit": 193, "create_symbol": 193, "int_oo": 193, "2841": 193, "runtime_assert": 193, "ncreate_symbol": 193, "nruntime_assert": 193, "dynamic_shapes_tutori": 193, "_subclass": [193, 298], "fake_impl": 193, "845": [193, 300], "infer_s": [193, 282], "torchdynamo_extended_debug_guard_ad": 193, "_meta_registr": 193, "2127": 193, "meta_mm": 193, "marker": 193, "aliv": 193, "attract": 193, "friction": 193, "believ": [193, 217], "stanc": [193, 296], "constraintviol": 193, "unrel": [193, 296], "univari": 193, "diverg": [193, 216, 218, 267, 283], "tolist": [193, 234], "unbind": 193, "unback": 193, "nomenclatur": 193, "absenc": [193, 229, 230, 248, 265], "u0": 193, "unhint": 193, "is_compil": 193, "invas": 193, "bypass": [193, 220], "offend": 193, "smarter": 193, "prevail": 193, "prohibit": 193, "_check_is_s": 193, "guard_size_oblivi": 193, "starter": 193, "guardondatadependentsymnod": 193, "_schema": 193, "is_mut": 193, "export_for_train": [193, 226, 228, 230], "run_decomposit": 193, "mutabl": 193, "conv1d": [193, 231, 241, 283], "cond_pred": 193, "tensorrt": [193, 200], "pt2_path": 193, "aoti_compile_and_packag": [193, 297], "compiler_aot_inductor": 193, "aoti_compil": 193, "aoti_load_packag": [193, 297], "cu121": [194, 208], "fbgemm_gpu": 194, "torchmetr": 194, "cardin": 194, "relationship": [194, 223], "hash": 194, "conjunct": [194, 203, 207, 283], "ctr": 194, "dlrm": [194, 283], "embedding_collect": 194, "embedding_bag_collect": 194, "vast": [194, 219], "collis": [194, 282], "80g": 194, "embeddingcollect": 194, "jaggedtensor": 194, "keyedjaggedtensor": 194, "keyedtensor": 194, "product_t": 194, "user_t": 194, "id_list_featur": 194, "id_score_list_featur": 194, "id_list_feature_offset": 194, "q1": 194, "product_jt": 194, "user_jt": 194, "q2": 194, "reread": 194, "to_dict": 194, "congrat": 194, "pat": 194, "grasp": 194, "scarc": [194, 246], "hbm": 194, "gb": [194, 199], "shardedembeddingbagcollect": 194, "incredibli": 194, "ton": 194, "everytim": 194, "await": 194, "input_dist": 194, "tbe": 194, "output_dist": 194, "twpooledembeddingshard": 194, "kjt": 194, "canon": 194, "dmp": 194, "hyperoptim": 194, "combinedoptim": 194, "keyedoptim": 194, "in_backward_optimizer_filt": 194, "fused_optim": 194, "fused_param": 194, "apply_optimizer_in_backward": 194, "ampl": 194, "loadabl": 194, "criteo": 194, "1tb": 194, "jean": [196, 197], "saroufim": [196, 197], "ashok": [196, 197], "emani": [196, 197], "tl": [196, 209, 252], "dr": [196, 209], "numa": [196, 197], "upi": 196, "fma": [196, 197], "hyperthread": 196, "contend": 196, "ultra": 196, "cpu_launcher_en": [196, 197], "decad": 196, "toepliz": 196, "use_logical_cor": 196, "vtune": [196, 287], "8180m": 196, "omp_num_thread": [196, 283, 301], "982": 196, "__kmp_fork_barri": 196, "neglig": 196, "887": 196, "530": 196, "lscpu": [196, 301], "112": [196, 209, 273, 298, 301], "llc": [196, 197], "asid": 196, "get_num_thread": 196, "node_id": [196, 197], "base_handl": 196, "56x4": 196, "affinit": [196, 197], "amplifi": 196, "slot": 196, "uop": [196, 197], "__sched_yield": 196, "disassoci": 196, "exacerb": 196, "core_51": 196, "8180": 196, "tid": [196, 220], "97097": 196, "cpu_81": 196, "cpu_14": 196, "cpu_5": 196, "cpu_70": 196, "cpu_100": 196, "cpu_24": 196, "num_physical_cor": 196, "94290": 196, "cpu_78": 196, "cpu_108": 196, "remind": 196, "omp": [196, 220, 301], "microarchitectur": 196, "onednn": [196, 197, 220, 229, 230, 241, 254, 255, 262], "immens": [196, 197], "ning": [196, 197], "jing": [196, 197], "xu": [196, 197, 211], "geeta": 196, "chauhan": 196, "20x": 197, "toplev": 197, "pmu": 197, "mispredict": 197, "hierarch": 197, "retir": [197, 203], "specul": 197, "cancel": [197, 267, 283], "untun": 197, "l3": 197, "dram": 197, "starv": 197, "wll": 197, "uncomplet": 197, "oneapi": [197, 262], "deconvolut": [197, 265], "emit_itt": [197, 262], "intel_extension_for_pytorch": [197, 255, 291], "ipex_en": 197, "submetr": 197, "spinlock": 197, "arena": 197, "enable_tcmalloc": 197, "enable_jemalloc": 197, "use_default_alloc": 197, "range_push": [197, 262], "step_": 197, "range_pop": [197, 262], "step_x": 197, "step_99": 197, "308": 197, "843": 197, "8960": 197, "cpu_launcher_arg": 197, "561": 197, "688": 197, "251": 197, "401": 197, "392": [197, 243], "bf16": [197, 208, 220, 229, 230, 241, 254], "ipex": [197, 255, 287, 291], "851": 197, "310": [197, 267], "7x": [197, 208], "803": 197, "248": 197, "eltwis": 197, "elementwis": [197, 283, 299], "nhwc": [197, 255], "disable_auto_channels_last": 197, "channels_last": [197, 229, 230, 241, 253, 255], "reorder": [197, 241, 254, 262, 283], "731": [197, 300], "634": 197, "penn": 198, "fudan": 198, "databas": [198, 292, 293], "pedestrian": 198, "keypoint": 198, "tv_tensor": 198, "boundingbox": 198, "y0": 198, "image_id": 198, "iscrowd": 198, "pycocotool": 198, "gautamchitni": 198, "git": [198, 208, 253], "cocoapi": 198, "cocodataset": 198, "pythonapi": 198, "get_height_and_width": 198, "upenn": 198, "edu": 198, "jshi": 198, "ped_html": 198, "pennfudanp": 198, "pedmask": 198, "fudanped00001_mask": 198, "fudanped00002_mask": 198, "fudanped00003_mask": 198, "fudanped00004_mask": 198, "pngimag": 198, "fudanped00001": 198, "fudanped00002": 198, "fudanped00003": 198, "fudanped00004": 198, "tvtensor": 198, "zoo": 198, "fasterrcnn": 198, "rpn": 198, "anchor": 198, "featmap_nam": 198, "rcnn": 198, "train2017": 198, "mikayla": [199, 272, 280], "gawarecki": [199, 272, 280], "jag": [199, 221], "famili": [199, 254, 301], "xformer": 199, "torchtun": 199, "rag": [199, 221], "ux": [199, 221, 224, 226, 229], "key_padding_mask": 199, "qk": 199, "premis": 199, "rmsnorm": 199, "sinusoid": 199, "rotari": [199, 201], "alibi": 199, "threefold": 199, "query_padding_mask": 199, "mha": [199, 217], "nestedtensor": [199, 221, 225, 235], "cleanli": [199, 204, 243, 244, 252, 294, 299], "zipf": [199, 221], "attn_mask": 199, "padded_tim": 199, "03454": 199, "padded_peak_memori": 199, "nested_tim": 199, "00612": 199, "nested_peak_memori": 199, "padded_bw_tim": 199, "09337": 199, "padded_bw_peak_mem": 199, "nested_bw_tim": 199, "01452": 199, "nested_bw_peak_mem": 199, "144": [199, 254], "out_proj": 199, "000244140625": 199, "packed_proj": 199, "001556396484375": 199, "001953125": 199, "causal": 199, "trust": 199, "ragged": 199, "alibi_mod": 199, "block_mask": 199, "create_nested_block_mask": 199, "e_q": 199, "e_tot": 199, "05x": 199, "swish": 199, "08x": [199, 254], "kv": [199, 201], "lucidrain": 199, "navit": 199, "visiontransform": 199, "readm": 200, "prepare_fx": [200, 204, 205, 206], "convert_fx": [200, 204, 205, 206], "default_weight_observ": 200, "get_default_qconfig_map": 200, "minmaxobserv": [200, 231], "backend_config": 200, "backendpatternconfig": 200, "dtypewithconstraint": 200, "observationtyp": 200, "quantize_fx": [200, 204, 205], "fp32_linear": 200, "quant1": 200, "dequant1": 200, "quant2": 200, "dequant2": 200, "fp32_conv_relu": 200, "quint8_with_constraint": 200, "quant_min_lower_bound": 200, "quant_max_upper_bound": 200, "scale_min_lower_bound": 200, "weighted_int8_dtype_config": 200, "input_dtyp": [200, 203], "weight_dtyp": 200, "bias_dtyp": 200, "fuse_conv2d_relu": 200, "convrelu2d": [200, 205], "linear_config": 200, "set_pattern": 200, "set_observation_typ": 200, "output_use_different_observer_as_input": 200, "add_dtype_config": 200, "set_root_modul": 200, "set_qat_modul": 200, "set_reference_quantized_modul": 200, "conv_relu_config": 200, "set_fused_modul": 200, "set_fuser_method": 200, "fused_conv_relu_config": 200, "my_backend": 200, "set_backend_pattern_config": 200, "quant_max": [200, 230, 231], "activation_observ": 200, "with_arg": [200, 230, 231], "quant_min": [200, 230, 231], "qconfig_map": [200, 204, 205, 206], "set_object_typ": [200, 204, 205, 226], "use_bn": 200, "example_input": [200, 204, 205, 206, 224, 226, 228, 229, 230, 231], "quantizedlinear": 200, "012136868201196194": 200, "zero_point": [200, 209, 231], "qscheme": [200, 230, 231], "per_tensor_affin": [200, 231], "quantizedconvrelu2d": 200, "0029353597201406956": 200, "linear_input_scale_0": 200, "linear_input_zero_point_0": 200, "quantize_per_tensor": [200, 209, 226, 256], "dequantize_2": 200, "015307803638279438": 200, "track_running_stat": [200, 253], "dequantize_1": 200, "get_fbgemm_backend_config": 200, "get_qnnpack_backend_config": 200, "get_native_backend_config": 200, "union": 200, "md": 200, "rfc": [200, 217, 220, 232], "0019": [200, 209], "chien": [201, 246, 247], "chin": [201, 246, 247], "llama3": 201, "freq_ci": 201, "context_parallel": 201, "buffer_seq_dim": 201, "miscalcul": 201, "set_rotate_method": 201, "sdpbackend": 201, "sdpa_exampl": 201, "nhead": 201, "qkv_len": 201, "8192": [201, 267], "flash_attent": 201, "cudnn_attent": 201, "qkv": 201, "cp_sdpa_exampl": 201, "_attent": 201, "context_parallel_unshard": 201, "context_parallel_sdpa_exampl": 201, "device_typ": [201, 229, 230, 291], "mesh_shap": 201, "mesh_dim_nam": [201, 249], "cp_qkv": 201, "cp_out": 201, "alltoal": [201, 283], "junji": 203, "impedi": 203, "starvat": 203, "deadlock": 203, "indefinit": 203, "diagnost": 203, "flight_record": 203, "torch_nccl_trace_buffer_s": 203, "torch_nccl_dump_on_timeout": 203, "torch_nccl_debug_info_temp_fil": 203, "nccl_trace_rank_": 203, "torch_nccl_trace_cpp_stack": 203, "torch_symbolize_mod": 203, "torch_nccl_enable_tim": 203, "dladdr": 203, "addr2lin": 203, "debuginfowrit": 203, "registerwrit": 203, "_distributed_c10d": [203, 252], "_dump_nccl_trac": 203, "includecollect": 203, "includestacktrac": 203, "onlyact": 203, "pg_config": 203, "default_pg": 203, "pg_statu": 203, "last_enqueued_collect": 203, "last_started_collect": 203, "last_completed_collect": 203, "test_short_pickl": 203, "test_c10d_nccl": 203, "3647": 203, "spawn_main": 203, "record_id": 203, "pg_id": 203, "collective_seq_id": 203, "p2p_seq_id": 203, "op_id": 203, "profiling_nam": 203, "time_created_n": 203, "1724779239936775119": 203, "time_discovered_started_n": 203, "time_discovered_completed_n": 203, "1724779239975811724": 203, "timeout_m": 203, "600000": 203, "is_p2p": 203, "fr_trace": 203, "use_distribut": 203, "torchfrtrac": 203, "culprit": 203, "recod": 203, "trace_": 203, "trace_0": 203, "trace_1": 203, "tldr": [204, 205], "default_dynamic_qconfig": [204, 209], "qconfigmap": [204, 206, 226, 231], "release": 204, "set_glob": [204, 205, 206, 226, 228, 229, 230], "prepared_model": [204, 205, 224, 226, 228, 229, 230], "metamind": 204, "lstmmodel": 204, "init_weight": 204, "initrang": 204, "lstm_model": 204, "word2idx": 204, "idx2word": 204, "add_word": 204, "utf8": 204, "idss": 204, "bptt": 204, "batchifi": 204, "nbatch": 204, "get_batch": 204, "repackage_hidden": 204, "model_": 204, "data_sourc": 204, "total_loss": 204, "output_flat": 204, "float_qparams_weight_only_qconfig": 204, "model_to_quant": [204, 205, 226, 228], "forunct": 204, "nelaps": 204, "fx_graph_mode_ptq_dynam": [204, 235], "charl": 205, "hernandez": 205, "traceabl": 205, "identitc": [205, 226], "resnet18_pretrained_float": [205, 226, 228], "fuse_fx": 205, "recursivescriptmodul": [205, 209, 228], "qconfig_opt": [205, 226], "set_module_name_regex": 205, "set_module_nam": [205, 226], "set_module_name_object_type_ord": 205, "object_typ": 205, "module_name_regex": 205, "module_nam": 205, "qconfig_mapping_util": 205, "serila": [205, 226], "fx_graph_mode_model_file_path": 205, "resnet18_fx_graph_mode_quant": 205, "erro": 205, "convrelu": 205, "moduleattributeerror": 205, "_modul": 205, "conv1_weight_after_fus": 205, "conv1_weight_after_qu": 205, "resnet18_script": 205, "eager_quantized_model": 205, "eager_mode_model_fil": 205, "resnet18_eager_mode_quant": 205, "aibench": 205, "192": 205, "48m": 205, "63m": 205, "non_traceable_code_1": 206, "traceable_cod": 206, "non_traceable_code_2": 206, "fp32traceabl": 206, "traceable_submodul": 206, "traceable_code_1": 206, "traceable_code_2": 206, "model_fp32": 206, "non_traceable_cod": 206, "fp32nontrac": 206, "non_traceable_submodul": 206, "prepare_custom_config_dict": 206, "non_traceable_module_nam": 206, "non_traceable_module_class": 206, "mnontrac": 206, "model_prepar": 206, "transpose_for_scor": 206, "new_x_shap": 206, "num_attention_head": 206, "attention_head_s": 206, "custommodul": 206, "observednontrac": 206, "classmethod": [206, 280], "from_float": 206, "from_observ": 206, "staticquantnontrac": 206, "float_to_observed_custom_module_class": 206, "convert_custom_config_dict": 206, "observed_to_quantized_custom_module_class": 206, "model_quant": [206, 264], "thee": 206, "dynamicquantnontrac": 206, "weightonlyquantmnontrac": 206, "test_custom_module_class": 206, "test_quantize_fx": 206, "bounc": 207, "gd": 207, "cufil": 207, "4kb": 207, "storage_align": 207, "gdsfile": 207, "skip_data": 207, "faketensormod": 207, "gds_register_buff": 207, "cufilebufregist": 207, "save_storag": 207, "cufilewrit": 207, "load_storag": 207, "cufileread": 207, "gpu_direct_storag": [207, 235], "hdcharl": 208, "pg509": 208, "330": 208, "myenv": 208, "facebookresearch": 208, "vit_h": 208, "segment_anyth": 208, "sam_vit_h_4b8939": 208, "sam_checkpoint_base_path": 208, "image_encod": 208, "instant": 208, "protect": 208, "43m": 208, "17gb": 208, "16m": 208, "95m": 208, "autotun": [208, 225, 283, 292, 293, 295], "int4": 208, "int8_dynamic_activation_int8_weight": 208, "int8_weight_onli": 208, "int4_weight_onli": 208, "apply_dynamic_qu": 208, "apply_weight_only_int8_qu": 208, "int8_dynamic_activ": 208, "04m": 208, "58gb": 208, "force_fuse_int_mm_with_mul": 208, "78m": 208, "37gb": 208, "unquant": [208, 231], "epilogu": [208, 220], "enlarg": 208, "39gb": 208, "10x": [208, 241], "677": 208, "28m": 208, "65m": 208, "gpu_quantization_torchao_tutori": [208, 235], "supriya": 209, "rao": 209, "per_channel_dynamic_qconfig": 209, "quantize_dynamic_jit": 209, "ts_model": 209, "installaion": 209, "necesessari": 209, "lenght": 209, "overwritten": [209, 272, 286, 301], "qconfig_glob": 209, "qconfig_sub": 209, "qconfig_fc": 209, "242141": 209, "354759": 209, "188": [209, 267], "157": 209, "quantized_model_debug": 209, "prepare_dynamic_jit": 209, "convert_dynamic_jit": 209, "406429": 209, "897": 209, "getattr": 209, "4_scale_0": 209, "114": 209, "4_zero_point_0": 209, "4_axis_0": 209, "4_scalar_type_0": 209, "quantize_per_channel": 209, "1640": 209, "_choose_qparams_per_tensor": 209, "linear_dynam": 209, "0157": 209, "0257": 209, "0269": 209, "0158": 209, "0764": 209, "0548": 209, "0325": 209, "0423": 209, "0528": 209, "1382": 209, "0069": 209, "0106": 209, "0113": 209, "0275": 209, "0253": 209, "0457": 209, "0090": 209, "0512": 209, "0555": 209, "0277": 209, "0543": 209, "0539": 209, "0943": 209, "0619": 209, "1040": 209, "0598": [209, 234], "0465": 209, "0009": 209, "0949": 209, "0097": 209, "0183": 209, "0085": 209, "clonebackward": 209, "0011": 209, "0010": 209, "0034": 209, "0013": 209, "0012": 209, "0015": 209, "0016": 209, "0036": 209, "0014": 209, "0008": 209, "0023": 209, "0018": 209, "0031": 209, "0022": 209, "0024": 209, "016605": 209, "182": 209, "878029": 209, "jit_model_path_float": 209, "jit_model_path_eag": 209, "jit_model_path_graph": 209, "chunyuan": [210, 220], "bao": [210, 297], "cpp_wrapper": [210, 229], "opt_fn": 210, "assert_size_strid": [210, 252], "empty_strid": [210, 240, 252, 273], "cpp_fused_add_lift_fresh_0": 210, "c_void_p": [210, 252], "constant0": 210, "inductor_entry_cpp": 210, "19l": 210, "cppwrappercodecach": 210, "cpp_wrapper_src": 210, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 210, "_wrap_func": 210, "args_tensor": 210, "constants_tensor": 210, "_deviceguard": [210, 252], "lift_fresh": 210, "stream0": [210, 252], "get_cuda_stream": 210, "triton_poi_fused_add_lift_fresh_0": 210, "run_intermediate_hook": [210, 252], "cudaguard": 210, "device_guard": 210, "loadkernel": 210, "torchinductor_us": 210, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 210, "cubin": [210, 293, 297], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 210, "cudeviceptr": 210, "var_0": 210, "reinterpret_cast": 210, "var_1": 210, "var_2": 210, "var_3": 210, "kernel_args_var_0": 210, "cudastream_t": 210, "getcurrentcudastream": 210, "launchkernel": 210, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 210, "zhaoqiong": 211, "zheng": 211, "han": 211, "msvc": 211, "desktop": 211, "checkmark": 211, "cmd": 211, "ex": [211, 234, 262], "vc": 211, "auxiliari": [211, 241], "vcvars64": 211, "opt_foo1": 211, "9074e": 211, "3994e": 211, "3894e": 211, "2630e": 211, "3060e": 211, "1833e": 211, "4016e": 211, "1905e": 211, "0637e": 211, "3648e": 211, "3728e": 211, "2863e": 211, "6888e": 211, "5442e": 211, "6790e": 211, "2025e": 211, "2647e": 211, "2684e": 211, "2483e": 211, "2845e": 211, "7747e": 211, "2028e": 211, "1431e": 211, "7196e": 211, "5304e": 211, "1945e": 211, "6654e": 211, "7376e": 211, "3644e": 211, "3600e": 211, "0157e": 211, "7200e": 211, "0146e": 211, "8175e": 211, "4057e": 211, "8119e": 211, "2853e": 211, "2773e": 211, "5082e": 211, "4615e": 211, "4140e": 211, "2130e": 211, "0762e": 211, "3914e": 211, "1122e": 211, "6895e": 211, "8852e": 211, "3310e": 211, "4101e": 211, "8318e": 211, "2355e": 211, "9290e": 211, "3707e": 211, "3754e": 211, "3768e": 211, "8970e": 211, "1171e": 211, "9944e": 211, "2553e": 211, "3394e": 211, "3428e": 211, "8400e": 211, "1756e": 211, "0654e": 211, "7973e": 211, "4019e": 211, "1886e": 211, "9194e": 211, "3632e": 211, "1811e": 211, "1615e": 211, "6622e": 211, "2089e": 211, "2011e": 211, "0659e": 211, "0892e": 211, "1932e": 211, "3888e": 211, "3898e": 211, "3218e": 211, "4139e": 211, "4000e": 211, "1192e": 211, "0175e": 211, "6432e": 211, "0498e": 211, "4115e": 211, "3212e": 211, "0964e": 211, "0127e": 211, "7244e": 211, "2799e": 211, "3595e": 211, "0907e": 211, "7191e": 211, "4062e": 211, "3672e": 211, "8502e": 211, "5216e": 211, "6046e": 211, "icx": 211, "win64": 211, "inductor_window": 212, "mobile_interpret": 215, "1369": 216, "weed": 216, "state_sum": 216, "addcmul_": 216, "addcdiv_": 216, "clr": 216, "_make_spars": 216, "grad_indic": 216, "sparse_coo_tensor": [216, 219], "coalesc": [216, 266], "_indic": 216, "grad_valu": 216, "_valu": 216, "sparse_mask": [216, 219], "std_valu": 216, "sqrt_": 216, "state_sum2": 216, "masked_grad": 216, "get_data": [216, 218], "std2": 216, "masked_tensor": [216, 218, 219], "to_spars": [216, 219], "param2": [216, 236], "glanc": [216, 280], "dodg": 216, "make_spars": 216, "brittl": 216, "argu": 216, "densif": 216, "csc": [216, 219], "bsr": [216, 219], "bsc": 216, "conflat": 216, "disentangl": 216, "purposefulli": 216, "relianc": 216, "unreli": [216, 218], "maskedarrai": [216, 225], "maskedtensor_adagrad": [216, 235], "maskedtensor_overview": [217, 218, 219, 235], "Their": [217, 219], "unspecifi": [217, 218, 219, 225], "intersect": 217, "logical_or": 217, "to_tensor": [217, 218], "mt0": 217, "get_mask": [217, 218], "mt1": 217, "revisit": 217, "ma": 217, "masked_arrai": 217, "mask0": 217, "mask1": 217, "necessit": 217, "maskedtensor_advanced_semant": [217, 235], "as_masked_tensor": 218, "as_tensor": 218, "afterthought": 218, "born": 218, "inabl": 218, "10729": 218, "troubl": 218, "52248": 218, "frustrat": 218, "4132": 218, "67180": 218, "longstand": 218, "unsaf": 218, "61474": 218, "nanmax": 218, "nanmin": 218, "lend": 218, "substructur": 219, "sparse_coo": 219, "sparse_csr": 219, "ndim": 219, "nse": 219, "sparse_tensor_data": 219, "sparse_tensor_mask": 219, "dense_masked_tensor": 219, "to_sparse_coo": 219, "to_sparse_csr": 219, "nuanc": 219, "crow_indic": 219, "col_indic": 219, "nnz": 219, "to_dens": 219, "is_spars": 219, "is_sparse_coo": 219, "is_sparse_csr": 219, "mt": 219, "mt2": 219, "surfac": 219, "synergi": 219, "invest": 219, "maskedtensor_spars": [219, 235], "lesli": [220, 229, 231], "fang": [220, 229, 231], "torchinductor_max_autotune_gemm_backend": 220, "upfront": [220, 272], "torchinductor_freez": [220, 229, 230], "log_autotuning_result": 220, "amp_en": 220, "outperform": 220, "linear_unari": 220, "64x16": 220, "32x16": 220, "cpp_packed_gemm_0": 220, "2142": 220, "_linear_pointwis": 220, "2441": 220, "mkldnn": [220, 241, 254], "anymor": [220, 281], "cpp_fused__to_copy_relu_1": 220, "async_compil": [220, 252], "cpp_pybind": [220, 252], "kernel_micro_gemm_amx_kernel_32_2": 220, "amxstat": 220, "amx_stat": 220, "lda": 220, "ldb": 220, "ldc": 220, "uint8_t": 220, "tilecfg_row": 220, "kernel_micro_gemm": 220, "constexpr": [220, 252], "num_thread": [220, 267], "64l": 220, "omp_get_thread_num": 220, "mc_block_id": 220, "num_mc_blocks_per_thread": 220, "n_block_start": 220, "n_block_end": 220, "nc_block": 220, "kc": 220, "k_block_start": 220, "k_block_end": 220, "kc_block": 220, "nci": 220, "nc_block_end": 220, "m_end": 220, "m_start": 220, "16l": 220, "div_floor_integ": 220, "n_end": 220, "n_start": 220, "loadu": 220, "local_acc_buf": 220, "nr": 220, "tmp4": [220, 252], "tmp5": [220, 252], "tmp6": [220, 252], "tmp7": [220, 252], "tmp8": [220, 252], "32l": 220, "invalu": 221, "nt": 221, "poss": 221, "irregularli": 221, "legal": 221, "semnat": 221, "qmodel": 223, "compare_weight": 223, "wt_compare_dict": 223, "sqnr": 223, "nomin": 223, "compare_model_output": 223, "white_list": 223, "outputlogg": 223, "default_numeric_suite_compare_model_output_white_list": 223, "myoutputlogg": 223, "prepare_model_with_stub": 223, "shadowlogg": 223, "compare_model_stub": 223, "quantizablebasicblock": 223, "myshadowlogg": 223, "db": [223, 226], "ON": [223, 253], "numeric_suite_tutori": [223, 235], "daniil": 224, "lyakhov": 224, "aamir": 224, "nazir": 224, "suslov": 224, "yamini": 224, "nimmagadda": 224, "kozlov": 224, "openvinoquant": 224, "quantize_pt2": [224, 226, 228, 229, 230], "prepare_pt2": [224, 226, 229, 230], "convert_pt2": [224, 226, 228, 229, 230], "traced_b": [224, 229, 230], "disable_patch": 224, "exported_model": [224, 226, 228, 229, 230], "prelu": 224, "quantizationpreset": 224, "modeltyp": 224, "ignored_scop": 224, "layer_1": 224, "layer_2": 224, "layer_3": 224, "ignoredscop": 224, "regex": 224, "layer_": 224, "subgraph": [224, 228], "target_devic": 224, "cpu_spr": 224, "targetdevic": 224, "fold_quant": 224, "optimized_model": [224, 229, 230], "smoothquant": 224, "biascorrect": 224, "calibration_load": 224, "transform_fn": 224, "data_item": 224, "calibration_dataset": 224, "smooth_quant": 224, "fast_bias_correct": 224, "pypi": [225, 256], "openvino": 225, "optimizi": 225, "nnapi": 225, "autovector": [225, 239], "maskedtensor": [225, 235], "coo": 225, "csr": 225, "flight": 225, "flightrecord": 225, "autoload": 225, "gpudirect": [225, 235], "_export": [226, 228, 229, 297], "14k": 226, "xnnpack_quant": [226, 228], "xnnpackquant": [226, 228, 231], "get_symmetric_quantization_config": [226, 228], "backendconfig": [226, 231], "fake_qu": 226, "embedding_byt": 226, "executorchquant": 226, "composed_quant": 226, "quantization_cap": 226, "minmax": 226, "capture_pre_autograd_graph": [226, 228, 229], "dynamic_dim": [226, 228], "themodel": 226, "fp32_op": 226, "qauntiz": 226, "quantized_linear": 226, "x_int8": 226, "x_scale": 226, "x_zero_point": 226, "weight_int8": 226, "weight_scal": [226, 231], "weight_zero_point": 226, "bias_fp32": 226, "output_scal": 226, "output_zero_point": 226, "x_fp32": 226, "quantized_decompos": 226, "dequantize_per_tensor": 226, "x_i8": 226, "x_quant_min": 226, "x_quant_max": 226, "weight_fp32": 226, "weight_i8": 226, "weight_quant_min": 226, "weight_quant_max": 226, "weight_permut": 226, "permute_copi": 226, "out_fp32": 226, "out_i8": 226, "out_scal": 226, "out_zero_point": 226, "out_quant_min": 226, "out_quant_max": 226, "float32_op": 226, "use_reference_represent": 226, "x_int16": 226, "weight_int16": 226, "acc_int32": 226, "out_dtyp": 226, "bias_scal": 226, "bias_int32": 226, "out_int8": 226, "clamp": [226, 240], "qmin": 226, "qmax": 226, "pt2e_quantized_model_file_path": 226, "resnet18_pt2e_quant": 226, "quantized_ep": 226, "loaded_quantized_ep": 226, "ptq": [228, 229], "prepare_qat_pt2": [228, 229], "move_exported_model_to_ev": [228, 229], "move_exported_model_to_train": 228, "_native_batch_norm_legit": 228, "cudnn_batch_norm": 228, "num_observer_update_epoch": 228, "num_batch_norm_update_epoch": 228, "num_epochs_between_ev": 228, "subseq": 228, "running_var": 228, "new_arg": 228, "prepared_model_copi": 228, "checkpoint_": 228, "weiwen": [229, 231], "xia": [229, 231], "x86inductorquant": 229, "spr": 229, "x86_inductor_quant": 229, "xiq": 229, "memory_format": [229, 230, 240, 241, 250, 253, 255], "aten_graph": 229, "get_default_x86_inductor_quantization_config": 229, "is_dynam": [229, 230, 231], "converted_model": [229, 230], "qconvolut": [229, 230], "qlinear": [229, 230], "conting": [229, 230], "qmaxpool2d": [229, 230], "example_x86inductorquantizer_pytorch_2_1": 229, "torchbench": [229, 254], "shoud": 229, "example_x86inductorquantizer_qat": 229, "yan": 230, "zhiwei": 230, "eikan": 230, "liangang": 230, "river": 230, "cui": 230, "yifeng": 230, "xpuinductorquant": 230, "xpu_inductor_quantizer_exampl": 230, "xpu_inductor_quant": 230, "xpuiq": 230, "resnet18_weight": 230, "get_default_xpu_inductor_quantization_config": 230, "histogramobserv": [230, 231], "perchannelminmaxobserv": 230, "quantizationspec": [230, 231], "xnnpack_quantizer_util": 230, "quantizationconfig": [230, 231], "type_check": 230, "_observerorfakequantizeconstructor": 230, "get_xpu_inductor_symm_quantization_config": 230, "extra_arg": 230, "act_observer_or_fake_quant_ctr": 230, "act_quantization_spec": [230, 231], "per_tensor_symmetr": [230, 231], "observer_or_fake_quant_ctr": [230, 231], "weight_observer_or_fake_quant_ctr": 230, "weight_quantization_spec": [230, 231], "per_channel_symmetr": 230, "ch_axi": 230, "oc": 230, "kh": 230, "kw": 230, "bias_quantization_spec": 230, "placehold": 230, "quantization_config": 230, "indcutor": 230, "kimish": 231, "patel": 231, "quantiat": 231, "qnnpackquant": 231, "quantizationannot": 231, "bitwidth": 231, "input_qspec_map": 231, "output_qspec": 231, "_annot": 231, "matcher": 231, "get_source_partit": 231, "add_partit": 231, "gm": 231, "add_nod": 231, "output_nod": 231, "input_act_qspec": 231, "output_act_qspec": 231, "input_act0": 231, "input_act1": 231, "quantization_annot": 231, "sharedquantizationspec": 231, "average_pool": 231, "edgeornod": 231, "conv1_out": 231, "conv2_out": 231, "qspec1": 231, "cat_input0": 231, "cat_input1": 231, "share_qparams_with_input_act0_qspec": 231, "fixedqparamsquantizationspec": 231, "act_qspec": 231, "sigmoid_nod": 231, "input_act": 231, "derivedquantizationspec": 231, "derive_qparams_fn": 231, "observerorfakequant": 231, "observerbas": 231, "fakequantizebas": 231, "obejct": 231, "obs_or_fq": 231, "fq": 231, "act_obs_or_fq": 231, "weight_obs_or_fq": 231, "act_scal": 231, "act_zp": 231, "calculate_qparam": 231, "weight_zp": 231, "bias_qspec": 231, "derived_from": 231, "backendquant": 231, "get_input_act_qspec": 231, "get_output_act_qspec": 231, "get_weight_qspec": 231, "get_bias_qspec": 231, "call_funct": 231, "relu_": [231, 240], "relu_nod": 231, "maybe_conv_nod": 231, "recognz": 231, "subgraphmatch": 231, "conv_relu_pattern": 231, "name_node_map": 231, "input_nod": 231, "weight_nod": 231, "bias_nod": 231, "yuanhao": 232, "ji": 232, "effortless": 232, "gaudi": 232, "hpu": 232, "huawei": 232, "torch_device_backend_autoload": 232, "torch_foo": 232, "_autoload": 232, "entry_point": 232, "habana_framework": 232, "__autoload": 232, "device_backend": 232, "is_load": 232, "entrypoint": 232, "_force_cutlass": 234, "2560": 234, "10240": 234, "dense_output": 234, "dense_t": 234, "stmt": [234, 243, 252, 267], "blocked_autorang": [234, 243, 252, 267], "median": [234, 267, 282], "1e3": 234, "sparse_output": 234, "sparse_t": 234, "80gb": 234, "870m": 234, "630m": 234, "382x": 234, "weightnormsparsifi": 234, "preprocess_validation_funct": 234, "only_second": 234, "return_overflowing_token": 234, "return_offsets_map": 234, "sample_map": 234, "overflow_to_sample_map": 234, "example_id": 234, "sequence_id": 234, "offset_map": 234, "preprocess_train_funct": 234, "start_posit": 234, "end_posit": 234, "start_char": 234, "answer_start": 234, "end_char": 234, "context_start": 234, "context_end": 234, "start_logit": 234, "end_logit": 234, "n_best": 234, "max_answer_length": 234, "example_to_featur": 234, "defaultdict": 234, "predicted_answ": 234, "feature_index": 234, "start_index": 234, "argsort": 234, "end_index": 234, "logit_scor": 234, "best_answ": 234, "prediction_text": 234, "theoretical_answ": 234, "measure_execution_tim": 234, "dataset_for_model": 234, "remove_column": 234, "set_format": 234, "batch_size_to_time_sec": 234, "column_nam": 234, "p50": 234, "automodelforquestionansw": 234, "squad_dataset": 234, "tokenized_squad_dataset": 234, "data_col": 234, "datacollatorwithpad": 234, "hyperparam": 234, "training_arg": 234, "trainingargu": 234, "lr_scheduler_typ": 234, "per_device_train_batch_s": 234, "per_device_eval_batch_s": 234, "fp16_baselin": 234, "fp16_time": 234, "cuda_fp16": 234, "exact_match": 234, "53358561967833": 234, "9280493093186": 234, "927572380751371": 234, "607915310189128": 234, "18846387788653": 234, "91255673766136": 234, "sparsity_level": 234, "elemen": 234, "sparse_block_shap": 234, "zeros_per_block": 234, "sparse_config": 234, "tensor_fqn": 234, "fqn": [234, 246, 247], "named_modul": 234, "paramter": 234, "bertoutput": 234, "parametrizedlinear": 234, "fakespars": 234, "elementwise_affin": 234, "59602649006622": 234, "51610004515979": 234, "set_printopt": [234, 267], "edgeitem": 234, "0237": 234, "0130": 234, "0462": 234, "0272": 234, "0436": 234, "0492": 234, "0844": 234, "0340": 234, "0302": 234, "0350": 234, "0303": 234, "0175": 234, "0529": 234, "0327": 234, "0213": 234, "0258": 234, "0239": 234, "0380": 234, "0562": 234, "0432": 234, "0262": 234, "0227": 234, "0244": 234, "0921": 234, "0784": 234, "0761": 234, "0225": 234, "0395": 234, "0684": 234, "0344": 234, "metrics_spars": 234, "sparse_perf": 234, "43897824030275": 234, "48718950090766": 234, "621004460379481": 234, "368514601141214": 234, "702805917710066": 234, "244": [234, 262], "19364519417286": 234, "87x": 234, "torchao": 235, "torchscript_freez": [235, 237], "vmap_recip": [235, 239], "orthogonal_": 236, "skip_init": 236, "param1": 236, "kaiming_uniform_": 236, "register_buff": 236, "some_buff": 236, "intial": 236, "0107": 237, "42368": 239, "unsuccessfulli": 239, "rummag": 239, "shenanigin": 239, "8304": 239, "23475": 239, "performantli": 239, "7786": 239, "batch_of_sampl": 239, "grad_sampl": 239, "ivan": 240, "kobzarev": 240, "use_vulkan": 240, "vulkan_wrapp": 240, "use_vulkan_wrapp": 240, "libvulkan": 240, "vulkansdk": 240, "lunarg": 240, "vulkan_sdk": 240, "vulkan_sdk_root": 240, "install_vulkan": 240, "pytorch_root": 240, "use_vulkan_shaderc_runtim": 240, "macosx_deployment_target": 240, "41237a4": 240, "android_abi": [240, 253], "v8a": [240, 253], "build_android": [240, 253], "pytorch_android": 240, "aar": 240, "build_pytorch_android": 240, "script_model": 240, "mobilenet2": 240, "32bit": 240, "mobile_optim": [240, 253], "optimize_for_mobil": [240, 253], "script_model_vulkan": 240, "optimization_blocklist": 240, "mobileoptimizertyp": 240, "vulkan_automatic_gpu_transf": 240, "is_vulkan_avail": 240, "tensor_vulkan": 240, "tensor_output_vulkan": 240, "tensor_output": 240, "_adaptive_avg_pool2d": 240, "_cat": 240, "avg_pool2d": 240, "hardtanh_": 240, "transpose_": 240, "upsample_nearest2d": 240, "floatbuff": 240, "allocatefloatbuff": 240, "fromblob": 240, "mmodul": 240, "test_app": 240, "testapp": 240, "mainact": 240, "l133": 240, "apploc": 240, "gradl": 240, "installmbvulkanlocalbasedebug": 240, "mbq": 240, "swiftshad": 240, "googlesourc": 240, "tmul": 241, "gen": 241, "avx": [241, 255], "vnni": [241, 255], "024": [241, 279], "conv3d": [241, 283], "conv_transpose1d": 241, "conv_transpose2d": 241, "conv_transpose3d": 241, "baddbmm": 241, "addbmm": 241, "onednn_verbos": 241, "verbose_on": 241, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 241, "nthr": 241, "isa": [241, 283], "prim_templ": 241, "prop_kind": 241, "memory_descriptor": 241, "problem_desc": 241, "exec_tim": 241, "exec": 241, "undef": 241, "src_f32": 241, "f0": 241, "dst_f32": 241, "scratchpad": 241, "2561": 241, "avx512_core_amx_bf16": 241, "forward_train": 241, "src_bf16": 241, "acdb": 241, "wei_bf16": 241, "abcd16b16a2b": 241, "bia_f32": 241, "dst_bf16": 241, "alg": 241, "convolution_direct": 241, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 241, "628906": 241, "brg": 241, "avx512_core_amx_int8": 241, "src_s8": 241, "wei_s8": 241, "ba16a64b4a": 241, "dst_s8": 241, "1x30522": 241, "30522x768": 241, "1x768": 241, "66382": 241, "lazo": [243, 244, 252, 294, 299], "get_device_cap": [243, 252], "benchmark_torch_function_in_microsecond": [243, 252], "eager_runtim": [243, 252], "compiled_runtim": [243, 252], "2437149845064u": 243, "07384741178u": 243, "linearlr": 244, "compiling_optimizer_lr_schedul": [244, 290], "set_device_map": 245, "worker0": 245, "worker1": 245, "payload": [245, 280], "infiniband": 245, "cma": 245, "comm_mod": [245, 248], "current_stream": 245, "tensorpiperpcbackendopt": 245, "num_worker_thread": 245, "rpc_backend_opt": 245, "34x": 245, "3145179748535156": 245, "06867480278015137": 245, "luca": [246, 247], "pasqualin": [246, 247], "iri": [246, 247, 249], "rodrigo": [246, 247], "kumpera": [246, 247], "async_sav": 246, "checkpoint_size_per_rank": 246, "number_of_rank": 246, "pageabl": 246, "get_state_dict": [246, 247], "set_state_dict": [246, 247], "appstat": [246, 247], "protocol": [246, 247], "load_stat_dict": [246, 247], "sharded_state_dict": [246, 247], "optim_state_dict": [246, 247], "run_fsdp_checkpoint_save_exampl": [246, 247], "checkpoint_futur": 246, "checkpoint_id": [246, 247], "_step": 246, "attack": 246, "storagewrit": 246, "cached_state_dict": 246, "storage_writ": 246, "adddition": 247, "run_fsdp_checkpoint_load_exampl": 247, "run_checkpoint_load_exampl": 247, "format_util": 247, "torch_to_dcp": 247, "dcp_to_torch": 247, "dcp_to_torch_sav": 247, "torch_save_to_dcp": 247, "torch_save_checkpoint_dir": 247, "torch_save_checkpoint": 247, "_new": 247, "anshul": 248, "sinha": 248, "distributedtensor": 248, "interoper": 248, "mlpmodul": 248, "generate_comm_debug_tracing_t": 248, "noise_level": 248, "log_comm_debug_tracing_table_to_fil": 248, "file_nam": [248, 298], "transformer_operation_log": 248, "generate_json_dump": 248, "c10d_function": 248, "comm_mode_features_exampl": 248, "effortlessli": 249, "homogen": 249, "num_node_devic": 249, "shard_rank_list": 249, "shard_group": 249, "current_shard_group": 249, "current_replicate_group": 249, "shard_factor": 249, "replicate_group_rank": 249, "replicate_group": 249, "2d_setup": 249, "thru": 249, "get_group": 249, "mesh_dim": 249, "2d_setup_with_device_mesh": 249, "meshshap": 249, "mesh_3d": 249, "hsdp_mesh": 249, "tp_group": 249, "quasi": 250, "hyperbol": 250, "qhm": 250, "qhm_updat": 250, "dp_list": 250, "momentum_buffer_list": 250, "nu": 250, "weight_decay_typ": 250, "d_p": 250, "momentum_buff": 250, "polymorph": 250, "functionalqhm": 250, "params_with_grad": 250, "preserve_format": 250, "functional_optim_map": 250, "remote_params_list": 250, "dist_optim": 250, "_foreach": 252, "horizton": 252, "model_copi": 252, "output_copi": 252, "_higher_order_op": 252, "get_input": 252, "exp_avg": [252, 302], "exp_avg_sq": [252, 302], "update_exp_avg_sq": 252, "beta2": 252, "addcmul": 252, "update_param": 252, "bias_correction1": 252, "bias_correction2": 252, "denom": 252, "foreach_map_adam": 252, "updated_step": 252, "_foreach_copy_": 252, "hop": 252, "exp_avgs_upd": 252, "lerp": 252, "exp_avgs_sq_upd": 252, "params_upd": 252, "opt_eag": 252, "opt_eager_copi": 252, "compiled_adam": 252, "eager_p": 252, "compile_p": 252, "v0701": 252, "547000": 252, "27237": 252, "2104": 252, "__output_cod": 252, "0_infer": 252, "ctype": 252, "c_long": 252, "c_int": 252, "cmath": 252, "nanj": 252, "maybe_profil": 252, "memory_plan": 252, "_align": 252, "asynccompil": 252, "select_algorithm": 252, "extern_kernel": 252, "multi_kernel": 252, "multikernelcal": 252, "_cuda_getcurrentrawstream": 252, "get_raw_stream": 252, "triton_heurist": 252, "start_graph": 252, "end_graph": 252, "inductor_op": 252, "_quantiz": 252, "empty_strided_cpu": 252, "_empty_strided_cpu": 252, "empty_strided_cuda": 252, "_empty_strided_cuda": 252, "empty_strided_xpu": 252, "_empty_strided_xpu": 252, "reinterpret_tensor": 252, "_reinterpret_tensor": 252, "alloc_from_pool": 252, "_alloc_from_pool": 252, "empty_strided_p2p": 252, "_symmetricmemori": 252, "torchinductor_ci": 252, "ej": 252, "cejr7t4zzqo7llcoxga7clgyc6gs3676lsm4dvilpfw64kudp2n": 252, "unsort": 252, "triton_for_fused_0": 252, "triton_help": 252, "libdevic": 252, "tl_math": 252, "autotunehint": 252, "reductionhint": 252, "tilehint": 252, "deviceproperti": 252, "num_warp": 252, "triton_meta": 252, "in_ptr2": 252, "in_ptr3": 252, "in_ptr4": 252, "in_ptr5": 252, "in_ptr6": 252, "in_ptr7": 252, "in_ptr8": 252, "in_ptr9": 252, "in_ptr10": 252, "in_ptr11": 252, "in_ptr12": 252, "in_ptr13": 252, "in_ptr14": 252, "in_ptr15": 252, "in_ptr16": 252, "in_ptr17": 252, "in_ptr18": 252, "in_ptr19": 252, "in_ptr20": 252, "in_ptr21": 252, "in_ptr22": 252, "in_ptr23": 252, "in_ptr24": 252, "in_ptr25": 252, "in_ptr26": 252, "in_ptr27": 252, "in_ptr28": 252, "in_ptr29": 252, "in_ptr30": 252, "in_ptr31": 252, "in_ptr32": 252, "in_ptr33": 252, "in_ptr34": 252, "in_ptr35": 252, "in_ptr36": 252, "in_ptr37": 252, "in_ptr38": 252, "in_ptr39": 252, "in_ptr40": 252, "in_ptr41": 252, "in_ptr42": 252, "in_ptr43": 252, "in_ptr44": 252, "in_ptr45": 252, "in_ptr46": 252, "in_ptr47": 252, "in_ptr48": 252, "in_ptr49": 252, "out_ptr6": 252, "out_ptr7": 252, "out_ptr8": 252, "out_ptr15": 252, "out_ptr16": 252, "out_ptr17": 252, "out_ptr24": 252, "out_ptr25": 252, "out_ptr26": 252, "out_ptr33": 252, "out_ptr34": 252, "out_ptr35": 252, "out_ptr42": 252, "out_ptr43": 252, "out_ptr44": 252, "out_ptr51": 252, "out_ptr52": 252, "out_ptr53": 252, "out_ptr60": 252, "out_ptr61": 252, "out_ptr62": 252, "out_ptr69": 252, "out_ptr70": 252, "out_ptr71": 252, "out_ptr78": 252, "out_ptr79": 252, "out_ptr80": 252, "out_ptr87": 252, "out_ptr88": 252, "out_ptr89": 252, "multi_processor_count": 252, "regs_per_multiprocessor": 252, "65536": 252, "max_threads_per_multi_processor": 252, "1536": 252, "warp_siz": 252, "tt": 252, "inductor_meta": 252, "grid_typ": 252, "sequentialcombokernelgrid": 252, "combo_grid_meta": 252, "min_block": 252, "default_config": 252, "xblock": 252, "no_x_dim_0": 252, "xnumel_0": 252, "1048576": 252, "no_x_dim_1": 252, "xnumel_1": 252, "no_x_dim_2": 252, "xnumel_2": 252, "no_x_dim_3": 252, "xnumel_3": 252, "no_x_dim_4": 252, "xnumel_4": 252, "no_x_dim_5": 252, "xnumel_5": 252, "no_x_dim_6": 252, "xnumel_6": 252, "no_x_dim_7": 252, "xnumel_7": 252, "no_x_dim_8": 252, "xnumel_8": 252, "no_x_dim_9": 252, "xnumel_9": 252, "kernel_nam": 252, "mutated_arg_nam": 252, "backend_hash": 252, "1e2c16421d4c3dba4ad92bfc4278a3cb24c43deda6ee7ff9e3fbb1dbb80802db": 252, "are_deterministic_algorithms_en": 252, "assert_indirect_index": 252, "autotune_local_cach": 252, "autotune_pointwis": 252, "autotune_remote_cach": 252, "force_disable_cach": 252, "dynamic_scale_rblock": 252, "max_autotun": [252, 297], "max_autotune_pointwis": 252, "min_split_scan_rblock": 252, "spill_threshold": 252, "store_cubin": 252, "program_id": 252, "num_xblocks_0": 252, "cdiv": 252, "num_xblocks_1": 252, "num_xblocks_2": 252, "num_xblocks_3": 252, "num_xblocks_4": 252, "num_xblocks_5": 252, "num_xblocks_6": 252, "num_xblocks_7": 252, "num_xblocks_8": 252, "num_xblocks_9": 252, "pid_offset": 252, "xnumel": 252, "r0_numel": 252, "xoffset": 252, "xindex": 252, "xmask": 252, "int1": 252, "tmp11": 252, "tmp18": 252, "tmp20": 252, "09999999999999998": 252, "tmp9": 252, "tmp10": 252, "tmp12": 252, "tmp13": 252, "tmp14": 252, "0010000000000000009": 252, "tmp15": 252, "tmp16": 252, "tmp17": 252, "tmp19": 252, "tmp21": 252, "tmp22": 252, "tmp23": 252, "tmp24": 252, "tmp25": 252, "tmp26": 252, "tmp27": 252, "tmp28": 252, "tmp29": 252, "tmp30": 252, "tmp31": 252, "tmp32": 252, "tmp33": 252, "tmp34": 252, "tmp35": 252, "tmp36": 252, "tmp37": 252, "tmp38": 252, "tmp39": 252, "tmp40": 252, "tmp41": 252, "tmp47": 252, "tmp48": 252, "tmp53": 252, "tmp60": 252, "tmp62": 252, "tmp42": 252, "tmp43": 252, "tmp44": 252, "tmp45": 252, "tmp46": 252, "tmp49": 252, "tmp50": 252, "tmp51": 252, "tmp52": 252, "tmp54": 252, "tmp55": 252, "tmp56": 252, "tmp57": 252, "tmp58": 252, "tmp59": 252, "tmp61": 252, "tmp63": 252, "tmp64": 252, "tmp65": 252, "tmp66": 252, "tmp67": 252, "tmp68": 252, "tmp69": 252, "tmp70": 252, "tmp71": 252, "tmp72": 252, "tmp73": 252, "tmp74": 252, "tmp75": 252, "tmp76": 252, "tmp77": 252, "tmp78": 252, "tmp79": 252, "tmp80": 252, "tmp81": 252, "tmp82": 252, "tmp83": 252, "tmp89": 252, "tmp90": 252, "tmp95": 252, "tmp102": 252, "tmp104": 252, "tmp84": 252, "tmp85": 252, "tmp86": 252, "tmp87": 252, "tmp88": 252, "tmp91": 252, "tmp92": 252, "tmp93": 252, "tmp94": 252, "tmp96": 252, "tmp97": 252, "tmp98": 252, "tmp99": 252, "tmp100": 252, "tmp101": 252, "tmp103": 252, "tmp105": 252, "tmp106": 252, "tmp107": 252, "tmp108": 252, "tmp109": 252, "tmp110": 252, "tmp111": 252, "tmp112": 252, "tmp113": 252, "tmp114": 252, "tmp115": 252, "tmp116": 252, "tmp117": 252, "tmp118": 252, "tmp119": 252, "tmp120": 252, "tmp121": 252, "tmp122": 252, "tmp123": 252, "tmp124": 252, "tmp125": 252, "tmp131": 252, "tmp132": 252, "tmp137": 252, "tmp144": 252, "tmp146": 252, "tmp126": 252, "tmp127": 252, "tmp128": 252, "tmp129": 252, "tmp130": 252, "tmp133": 252, "tmp134": 252, "tmp135": 252, "tmp136": 252, "tmp138": 252, "tmp139": 252, "tmp140": 252, "tmp141": 252, "tmp142": 252, "tmp143": 252, "tmp145": 252, "tmp147": 252, "tmp148": 252, "tmp149": 252, "tmp150": 252, "tmp151": 252, "tmp152": 252, "tmp153": 252, "tmp154": 252, "tmp155": 252, "tmp156": 252, "tmp157": 252, "tmp158": 252, "tmp159": 252, "tmp160": 252, "tmp161": 252, "tmp162": 252, "tmp163": 252, "tmp164": 252, "tmp165": 252, "tmp166": 252, "tmp167": 252, "x4": 252, "tmp173": 252, "tmp174": 252, "tmp179": 252, "tmp186": 252, "tmp188": 252, "tmp168": 252, "tmp169": 252, "tmp170": 252, "tmp171": 252, "tmp172": 252, "tmp175": 252, "tmp176": 252, "tmp177": 252, "tmp178": 252, "tmp180": 252, "tmp181": 252, "tmp182": 252, "tmp183": 252, "tmp184": 252, "tmp185": 252, "tmp187": 252, "tmp189": 252, "tmp190": 252, "tmp191": 252, "tmp192": 252, "tmp193": 252, "tmp194": 252, "tmp195": 252, "tmp196": 252, "tmp197": 252, "tmp198": 252, "tmp199": 252, "tmp200": 252, "tmp201": 252, "tmp202": 252, "tmp203": 252, "tmp204": 252, "tmp205": 252, "tmp206": 252, "tmp207": 252, "tmp208": 252, "tmp209": 252, "x5": 252, "tmp215": 252, "tmp216": 252, "tmp221": 252, "tmp228": 252, "tmp230": 252, "tmp210": 252, "tmp211": 252, "tmp212": 252, "tmp213": 252, "tmp214": 252, "tmp217": 252, "tmp218": 252, "tmp219": 252, "tmp220": 252, "tmp222": 252, "tmp223": 252, "tmp224": 252, "tmp225": 252, "tmp226": 252, "tmp227": 252, "tmp229": 252, "tmp231": 252, "tmp232": 252, "tmp233": 252, "tmp234": 252, "tmp235": 252, "tmp236": 252, "tmp237": 252, "tmp238": 252, "tmp239": 252, "tmp240": 252, "tmp241": 252, "tmp242": 252, "tmp243": 252, "tmp244": 252, "tmp245": 252, "tmp246": 252, "tmp247": 252, "tmp248": 252, "tmp249": 252, "tmp250": 252, "tmp251": 252, "x6": 252, "tmp257": 252, "tmp258": 252, "tmp263": 252, "tmp270": 252, "tmp272": 252, "tmp252": 252, "tmp253": 252, "tmp254": 252, "tmp255": 252, "tmp256": 252, "tmp259": 252, "tmp260": 252, "tmp261": 252, "tmp262": 252, "tmp264": 252, "tmp265": 252, "tmp266": 252, "tmp267": 252, "tmp268": 252, "tmp269": 252, "tmp271": 252, "tmp273": 252, "tmp274": 252, "tmp275": 252, "tmp276": 252, "tmp277": 252, "tmp278": 252, "tmp279": 252, "tmp280": 252, "tmp281": 252, "tmp282": 252, "tmp283": 252, "tmp284": 252, "tmp285": 252, "tmp286": 252, "tmp287": 252, "tmp288": 252, "tmp289": 252, "tmp290": 252, "tmp291": 252, "tmp292": 252, "tmp293": 252, "x7": 252, "tmp299": 252, "tmp300": 252, "tmp305": 252, "tmp312": 252, "tmp314": 252, "tmp294": 252, "tmp295": 252, "tmp296": 252, "tmp297": 252, "tmp298": 252, "tmp301": 252, "tmp302": 252, "tmp303": 252, "tmp304": 252, "tmp306": 252, "tmp307": 252, "tmp308": 252, "tmp309": 252, "tmp310": 252, "tmp311": 252, "tmp313": 252, "tmp315": 252, "tmp316": 252, "tmp317": 252, "tmp318": 252, "tmp319": 252, "tmp320": 252, "tmp321": 252, "tmp322": 252, "tmp323": 252, "tmp324": 252, "tmp325": 252, "tmp326": 252, "tmp327": 252, "tmp328": 252, "tmp329": 252, "tmp330": 252, "tmp331": 252, "tmp332": 252, "tmp333": 252, "tmp334": 252, "tmp335": 252, "x8": 252, "tmp341": 252, "tmp342": 252, "tmp347": 252, "tmp354": 252, "tmp356": 252, "tmp336": 252, "tmp337": 252, "tmp338": 252, "tmp339": 252, "tmp340": 252, "tmp343": 252, "tmp344": 252, "tmp345": 252, "tmp346": 252, "tmp348": 252, "tmp349": 252, "tmp350": 252, "tmp351": 252, "tmp352": 252, "tmp353": 252, "tmp355": 252, "tmp357": 252, "tmp358": 252, "tmp359": 252, "tmp360": 252, "tmp361": 252, "tmp362": 252, "tmp363": 252, "tmp364": 252, "tmp365": 252, "tmp366": 252, "tmp367": 252, "tmp368": 252, "tmp369": 252, "tmp370": 252, "tmp371": 252, "tmp372": 252, "tmp373": 252, "tmp374": 252, "tmp375": 252, "tmp376": 252, "tmp377": 252, "x9": 252, "tmp383": 252, "tmp384": 252, "tmp389": 252, "tmp396": 252, "tmp398": 252, "tmp378": 252, "tmp379": 252, "tmp380": 252, "tmp381": 252, "tmp382": 252, "tmp385": 252, "tmp386": 252, "tmp387": 252, "tmp388": 252, "tmp390": 252, "tmp391": 252, "tmp392": 252, "tmp393": 252, "tmp394": 252, "tmp395": 252, "tmp397": 252, "tmp399": 252, "tmp400": 252, "tmp401": 252, "tmp402": 252, "tmp403": 252, "tmp404": 252, "tmp405": 252, "tmp406": 252, "tmp407": 252, "tmp408": 252, "tmp409": 252, "tmp410": 252, "tmp411": 252, "tmp412": 252, "tmp413": 252, "tmp414": 252, "tmp415": 252, "tmp416": 252, "tmp417": 252, "tmp418": 252, "tmp419": 252, "device_str": 252, "cpp_fused__foreach_copy_1": 252, "cpicxudqmdsjh5cm4klbtbrvy2cxwr7whxl3md2zzdjdf3orvfdf": 252, "out_ptr1": 252, "out_ptr3": 252, "out_ptr5": 252, "out_ptr9": 252, "out_ptr11": 252, "out_ptr13": 252, "out_ptr19": 252, "arg2_1": 252, "arg3_1": 252, "arg4_1": 252, "arg5_1": 252, "arg6_1": 252, "arg7_1": 252, "arg8_1": 252, "arg9_1": 252, "arg10_1": 252, "arg11_1": 252, "arg12_1": 252, "arg13_1": 252, "arg14_1": 252, "arg15_1": 252, "arg16_1": 252, "arg17_1": 252, "arg18_1": 252, "arg19_1": 252, "arg20_1": 252, "arg21_1": 252, "arg22_1": 252, "arg23_1": 252, "arg24_1": 252, "arg25_1": 252, "arg26_1": 252, "arg27_1": 252, "arg28_1": 252, "arg29_1": 252, "arg30_1": 252, "arg31_1": 252, "arg32_1": 252, "arg33_1": 252, "arg34_1": 252, "arg35_1": 252, "arg36_1": 252, "arg37_1": 252, "arg38_1": 252, "arg39_1": 252, "arg40_1": 252, "arg41_1": 252, "arg42_1": 252, "arg43_1": 252, "arg44_1": 252, "arg45_1": 252, "arg46_1": 252, "arg47_1": 252, "arg48_1": 252, "arg49_1": 252, "benchmark_compiled_modul": 252, "rand_strid": 252, "print_perform": 252, "wrapper_benchmark": 252, "compiled_module_main": 252, "595000": 252, "2115": 252, "cbxwuspm7iljtlkypwgm5a6rrandaew4wqmdmng4lzas4ogomxpw": 252, "i0701": 252, "130000": 252, "770000": 252, "1_infer": 252, "819000": 252, "c655isihixkazmceuwbfqagiscwkui2zsppjfrucnr3s5l4gahqw": 252, "855000": 252, "1213": 252, "199530000111u": 252, "755": 252, "5397622779293u": 252, "462": [252, 290], "annotatedconvbnrelumodel": 253, "prepare_sav": 253, "torchscript_model": 253, "torchscript_model_optim": 253, "model_fus": 253, "bnrelu2d": 253, "build_pytorch_mobil": 253, "dbuild_binari": 253, "speed_benchmark_torch": 253, "adb": 253, "shell": 253, "input_dim": 253, "input_typ": 253, "6189": 253, "575": 253, "6216": 253, "858": 253, "sunita": 254, "nadamp": 254, "graviton3": 254, "sve": 254, "simd": 254, "graviton2": 254, "bla": 254, "acl": 254, "c7g": 254, "bfloa16": 254, "r7g": 254, "m7g": 254, "4vcpu": 254, "profileract": [254, 273], "myneuralnetwork": 254, "linear_relu_stack": 254, "11008": 254, "pred_probab": 254, "mymodel_infer": 254, "self_cpu_time_tot": [254, 273], "255m": 254, "032m": 254, "160u": 254, "162": [254, 267], "054m": 254, "180u": 254, "738m": 254, "201": 254, "955m": 254, "282m": 254, "421m": 254, "043m": 254, "810u": 254, "356m": 254, "179": 254, "388m": 254, "896": 254, "940u": 254, "mmla": 254, "dnnl_default_fpmath_mod": 254, "943": 254, "052": 254, "507m": 254, "653m": 254, "838": 254, "265u": 254, "107": 254, "593m": 254, "358": 254, "643u": 254, "167m": 254, "262": 254, "911m": 254, "060": 254, "533m": 254, "414m": 254, "892m": 254, "307u": 254, "281m": 254, "934m": 254, "670u": 254, "fastmath": 254, "821": 254, "914": 254, "713m": 254, "244m": 254, "711": 254, "220u": 254, "322m": 254, "307": 254, "740u": 254, "094": 254, "495m": 254, "921": 254, "736m": 254, "131m": 254, "441m": 254, "803u": 254, "942m": 254, "186m": 254, "720": 254, "930u": 254, "848": 254, "141": [254, 267], "309m": 254, "545u": 254, "916m": 254, "720u": 254, "431m": 254, "471m": 254, "951": 254, "027m": 254, "243m": 254, "143u": 254, "928m": 254, "237m": 254, "185u": 254, "47x": 254, "till": [254, 264], "torch_mkldnn_matmul_min_dim": 254, "958": 254, "612m": 254, "124m": 254, "620u": 254, "951m": 254, "170u": 254, "423m": 254, "034": 254, "691m": 254, "988": 254, "628m": 254, "520m": 254, "945m": 254, "817u": 254, "382m": 254, "136": 254, "910u": 254, "781": 254, "604m": 254, "437m": 254, "477m": 254, "516m": 254, "558": 254, "387u": 254, "708m": 254, "499m": 254, "788": 254, "627m": 254, "982m": 254, "385m": 254, "617u": 254, "932m": 254, "297": 254, "369m": 254, "487m": 254, "038m": 254, "060m": 254, "300u": 254, "013m": 254, "710u": 254, "521m": 254, "750m": 254, "475m": 254, "033m": 254, "110u": 254, "285m": 254, "345m": 254, "725u": 254, "margin": 254, "thp_mem_alloc_en": 254, "321": 254, "069m": 254, "568m": 254, "613m": 254, "602m": 254, "682": 254, "007u": 254, "777m": 254, "697": 254, "082m": 254, "329": 254, "097m": 254, "547m": 254, "325": 254, "115m": 254, "626m": 254, "avx512": 255, "amx": [255, 256], "xmx": 255, "claus": [255, 256, 302], "cooper": 255, "roialign": 255, "bertmodel": 255, "seq_length": 255, "check_trac": 255, "cache_en": 255, "memoryformat": 255, "channelslast": 255, "intel_ext_pt_cpu": 255, "libpytorch_path": 255, "ldd": 255, "cmake_have_libc_pthread": 255, "0x00007f3cf98e0000": 255, "libc10": 255, "0x00007f3cf985a000": 255, "libintel": 255, "ext": 255, "0x00007f3cf70fc000": 255, "libtorch_cpu": [255, 282], "0x00007f3ce16ac000": 255, "libdnnl_graph": 255, "0x00007f3cde954000": 255, "mitig": [256, 283], "conv2_drop": 256, "fc1_drop": 256, "lenet_mnist_model": 256, "pytorch_fx": 256, "accuracy_criterion": 256, "neural_compressor": 256, "calib_dataload": 256, "q_model": 256, "top1metr": 256, "quant_aware_train": 256, "training_func": 256, "q_func": 256, "dummy_dataset": 256, "dummydataset": 256, "2021": 256, "linearrelu": 256, "best_configur": 256, "best_model_weight": 256, "int8_model": 256, "gui": [262, 287], "8080": 262, "path_of_launch": 262, "iteration_n": 262, "brown": 262, "percerntag": 262, "jitter": [262, 267], "enrich": 262, "queue": [262, 283], "ittsampl": 262, "292820": 262, "unmark": 262, "iteration_": 262, "basefold": 262, "bash_sourc": 262, "ota": 264, "incept": 264, "print_model_s": 264, "mdl": 264, "model_dynamic_quant": 264, "qconfig_spec": 264, "model_static_quant": 264, "98mb": 264, "tra": 264, "model_qat": 264, "gradcam": 265, "occlus": 265, "guidedbackprop": 265, "deeplift": 265, "gradientshap": 265, "forward_func": 265, "pictori": 265, "textual": 265, "distractor": 265, "visualize_text": 265, "imdb_torchtext_interpret": 265, "gilbert": 265, "tanner": 265, "gilberttann": 265, "captum_recip": [265, 271, 279], "carilli": 266, "ture": 266, "kepler": 266, "maxwel": 266, "pascal": 266, "modest": 266, "in_siz": 266, "out_siz": 266, "underflow": 266, "scaler": 266, "unscal": 266, "unscale_": 266, "rough": 266, "binary_cross_entropy_with_logit": 266, "suspect": 266, "docstr": 266, "subregion": 266, "backtrac": 266, "torch_show_cpp_stacktrac": 266, "amp_recip": [266, 271, 279], "tediou": 267, "mistak": 267, "mul_sum": 267, "0x7fb10400d0f0": 267, "batched_dot_mul_sum": 267, "0x7fb103d67048": 267, "batched_dot_bmm": 267, "sub_label": 267, "0x7fb103d54080": 267, "118": 267, "0x7fb16935d2e8": 267, "2775": 267, "0x7fb10400d080": 267, "min_run_tim": [267, 282], "274": 267, "748": 267, "432": [267, 273], "22657": 267, "11899": 267, "609": 267, "23098": 267, "27246": 267, "267073": 267, "118823": 267, "189": 267, "2782": 267, "7471": 267, "11874": 267, "173": 267, "7264": 267, "27824": 267, "100060": 267, "121499": 267, "2773": 267, "12833": 267, "6295": 267, "27062": 267, "71804": 267, "120365": 267, "103": 267, "2804": 267, "6764": 267, "11871": 267, "6640": 267, "27592": 267, "73003": 267, "120083": 267, "callgrindstat": [267, 282], "trip": [267, 282], "batched_dot": 267, "36000": 267, "40000": 267, "stark": 267, "fuzzer": 267, "10000000": 267, "k0": 267, "k1": 267, "discontigu": 267, "383": 267, "1468": 267, "5039": 267, "2140": 267, "1296": 267, "41000": 267, "1598": 267, "519": 267, "763": 267, "1082": 267, "473": 267, "16384": 267, "12642115": 267, "4800": 267, "20400": 267, "110000": 267, "400000": 267, "493": 267, "1100": [267, 282], "2440": 267, "2030": 267, "495": 267, "23600": 267, "24000": [267, 282], "62374": 267, "90000": 267, "240372": 267, "40156": 267, "2670": 267, "opac": 267, "complementari": 267, "insensit": 267, "environment": 267, "cpp_lib": 267, "batched_dot_src": 267, "extra_cflag": 267, "extra_include_path": 267, "getenv": 267, "batched_dot_mul_sum_v0": 267, "batched_dot_mul_sum_v1": 267, "module_import_str": 267, "67631": 267, "importlib": 267, "spec_from_file_loc": 267, "repr": 267, "module_from_spec": 267, "exec_modul": 267, "textwrap": 267, "pretty_print": 267, "t_baselin": 267, "stats_v0": 267, "collect_callgrind": 267, "stats_v1": 267, "as_standard": [267, 282], "denois": 267, "ing": 267, "wrap_pybind_function_impl_": 267, "linewidth": 267, "valgrind_wrapp": [267, 282], "timer_interfac": [267, 282], "0x7fb0f06e7630": 267, "2392671": 267, "4367": 267, "rel_with_deb_info": [267, 282], "0x7fb10400d208": 267, "2378978": 267, "functioncount": [267, 282], "0x7fb1000ab358": 267, "0x000000000020d9e0": 267, "0x000000000020db10": 267, "integer_sequ": 267, "0ul": 267, "1ul": 267, "5200": 267, "undefinedtensorimpl": 267, "reset_": 267, "5935": 267, "0x000000000022c0e0": 267, "13693": 267, "changing_default_devic": [268, 279], "subsidiari": [269, 284, 285], "neighbor": [269, 283], "sharp": 269, "blurri": 269, "defining_a_neural_network": [269, 271, 279], "postprocess": 270, "quanitz": 270, "float_lstm": 270, "mileag": 270, "timeit": [270, 282], "quantized_lstm": 270, "documentaion": 270, "dynamic_quant": [270, 271, 279], "what_is_state_dict": [271, 279, 285], "saving_and_loading_models_for_infer": 271, "custom_dataset_transforms_load": 271, "warmstarting_model_using_parameters_from_a_different_model": [271, 279, 284], "zeroing_out_gradi": [271, 279, 286], "mobile_perf": 271, "regional_compil": [271, 288, 290], "syntaxerror": [271, 279], "undesir": 272, "unload": 272, "somemodul": 272, "param_in_model": 272, "param_in_state_dict": 272, "set_swap_module_params_on_convers": [272, 280], "swap_tensor": [272, 279], "module_load_state_dict_tip": [272, 279], "model_infer": 273, "_fork": 273, "509m": 273, "503m": 273, "931m": 273, "597m": 273, "700m": 273, "585m": 273, "_convolut": 273, "450m": 273, "mkldnn_convolut": 273, "838m": 273, "114m": 273, "556m": 273, "batch_norm": 273, "693m": 273, "734": 273, "_batch_norm_impl_index": 273, "482m": 273, "724": 273, "100u": 273, "native_batch_norm": 273, "229m": 273, "109m": 273, "705": 273, "450u": 273, "631m": 273, "286u": 273, "668m": 273, "292m": 273, "988u": 273, "549m": 273, "dnn": 273, "group_by_input_shap": 273, "008m": 273, "956m": 273, "909m": 273, "834m": 273, "332m": 273, "303m": 273, "273m": 273, "233m": 273, "751m": 273, "occurr": 273, "666m": 273, "484m": 273, "_convolution_nogroup": 273, "thnn_conv2d": 273, "thnn_conv2d_forward": 273, "im2col_kernel": 273, "844m": 273, "sgemm_32x32x32_nn": 273, "206m": 273, "sgemm_32x32x32_nn_vec": 273, "093m": 273, "015m": 273, "567m": 273, "871m": 273, "560u": 273, "convolution_overrid": 273, "gen_conv": 273, "216u": 273, "640u": 273, "632u": 273, "conv_reord": 273, "880u": 273, "448u": 273, "712": 273, "486m": 273, "max_pool2d_with_indic": 273, "kb": 273, "resize_": 273, "masked_select": 273, "122": 273, "064m": 273, "viewer": 273, "439": 273, "_conv_forward": 273, "1051": 273, "_call_impl": 273, "016m": 273, "659m": 273, "skip_first": 273, "step_num": 273, "profiler_recip": [273, 279], "reasoning_about_shap": [274, 279], "recipes_recip": 279, "017": [279, 280], "tensorboard_with_pytorch": [279, 281], "timer_quick_start": [279, 282], "tuning_guid": [279, 283], "hereaft": 280, "t2": 280, "__class__": 280, "__slots__": 280, "pertin": 280, "8181": 280, "5683": 280, "6361": 280, "1366": 280, "__torch_dispatch__": [280, 298], "new_param": 280, "myquantizedlinearweight": 280, "__new__": 280, "_make_wrapper_subclass": 280, "storage_offset": 280, "_to_copi": 280, "new_elem": 280, "op_tabl": 280, "140225498616256": 280, "140225498617856": 280, "140225498616656": 280, "140225500248112": 280, "__setattr__": 280, "module_load": 280, "__torch_function__": 280, "param_kei": 280, "custom_torch_funct": 280, "dest": 280, "disabletorchfunctionsubclass": 280, "140225498617056": 280, "140225500494832": 280, "3772": 280, "1770": 280, "5010": 280, "3453": [280, 302], "0341": 280, "5666": 280, "5321": 280, "0903": 280, "3771": 280, "4494": 280, "0271": 280, "0179": 280, "1355": 280, "1028": 280, "3055": 280, "2755": 280, "3233": 280, "5291": 280, "0567": 280, "scalar_valu": 281, "walltim": 281, "tfevent": 281, "0x7f1929a38ed0": 282, "iqr": 282, "424": 282, "0x7f192b019ed0": 282, "unsurprisingli": 282, "0x7f1929a35850": 282, "563600": 282, "tensormethod": 282, "ab_ref": 282, "0x7f192a6dfd90": 282, "47264": 282, "_int_fre": 282, "25963": 282, "_int_malloc": 282, "19900": 282, "tensorit": 282, "tensoriteratorconfig": 282, "__tls_get_addr": 282, "13500": 282, "malloc": [282, 283, 301], "11300": 282, "smallvector": 282, "10345": 282, "_int_memalign": 282, "9200": 282, "iteratorbas": 282, "get_strid": 282, "173472": 282, "0x7f192995d750": 282, "118200": 282, "tensoriter": 282, "65000": 282, "20900": 282, "15900": 282, "15100": 282, "cpualloc": 282, "12500": 282, "352327": 282, "a0": 282, "b0": 282, "a1": 282, "a127": 282, "pickleabl": 282, "broadcasting_stat": 282, "17600": 282, "tensoriteratorbas": 282, "compute_strid": 282, "12700": 282, "allocate_or_resize_output": 282, "10200": 282, "smallvectorimpl": 282, "7400": 282, "6200": 282, "invert_perm": 282, "6064": 282, "5100": 282, "reorder_dimens": 282, "compatible_strid": 282, "check_tensor_options_and_extract_memory_format": 282, "__memcmp_avx2_movb": 282, "empty_cpu": 282, "1300": 282, "2400": 282, "6100": 282, "compute_fast_setup_typ": 282, "22600": 282, "fast_set_up": 282, "58091": 282, "0x7f19299544d0": 282, "compute_shap": 282, "2300": 282, "coalesce_dimens": 282, "promin": 282, "__add__": 282, "__sub__": 282, "dice": 282, "szymon": 283, "migacz": 283, "set_to_non": 283, "anomali": 283, "detect_anomali": 283, "set_detect_anomali": 283, "emit_nvtx": 283, "nth": 283, "cpunodebind": 283, "membind": 283, "pytorch_script": 283, "thrash": 283, "gomp_cpu_affin": 283, "omp_proc_bind": 283, "omp_schedul": 283, "libgomp": [283, 301], "sleep": 283, "jemalloc": [283, 301], "tcmalloc": [283, 301], "emphas": 283, "optimize_for_infer": 283, "avx512_bf16": 283, "ccl": 283, "set_float32_matmul_precis": 283, "judgment": 286, "itt": 287, "set_stanc": [287, 290], "usecas": 287, "torchcompil": 287, "prebuilt": 287, "torchscipt": 287, "pod": 287, "andriod": 287, "run_cpu": 287, "graviton": 287, "compressor": 287, "tensorpip": 287, "dcp": 287, "commdebugmod": 287, "animesh": 288, "jain": 288, "startup": 288, "inline_inbuilt_nn_modul": 288, "graph_cod": 288, "strateg": 288, "478": 290, "torch_compiler_set_stance_tutori": [290, 296], "torch_compile_torch_function_mod": [290, 294], "torch_compile_user_defined_triton_kernel_tutori": [290, 295], "sphx_glr_recipes_torch_export_aoti_python": 290, "torch_export_aoti_python": [290, 297], "compile_model": 291, "resnet50_weight": 291, "weights_prepack": 291, "oguz": [292, 293, 295], "ulgen": [292, 293, 295], "sam": [292, 298], "larsen": 292, "fxgraphcach": [292, 293], "aotautogradcach": [292, 293], "redi": [292, 293], "usernam": 292, "aotautograd": [292, 293], "fxgraph": 292, "torchinductor_": 292, "torchinductor_myusernam": [292, 293], "triton_cache_dir": 292, "torchinductor_redis_host": 292, "torchinductor_redis_port": 292, "6379": 292, "cachebench": 293, "onward": 293, "save_cache_artifact": 293, "load_cache_artifact": 293, "artifact_byt": 293, "cache_info": 293, "pgo": 293, "tritoncach": 293, "inductorcach": 293, "autotuningcach": 293, "torchinductor_cache_dir": 293, "basetorchfunctionmod": 294, "flopcountermod": 295, "wrap_triton": 295, "footgun": 295, "register_kernel": 295, "register_flop_formula": 295, "flop_count": 295, "mysin": 295, "reappli": 296, "force_eag": 296, "eager_on_recompil": 296, "fail_on_recompil": 296, "torch.export": 297, "torch._inductor.aoti_compile_and_packag": 297, "aot_compil": 297, "torch._export.aoti_load_packag": 297, "ankith": [297, 298], "gunap": [297, 298], "aot_load": 297, "runner": 297, "archive_format": 297, "10088": 297, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 297, "17160": 297, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 297, "16616": 297, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 297, "17776": 297, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 297, "10856": 297, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 297, "14608": 297, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 297, "11376": 297, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 297, "10984": 297, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 297, "14736": 297, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 297, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 297, "11624": 297, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 297, "15632": 297, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 297, "25472": 297, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 297, "139389": 297, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 297, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 297, "47195424": 297, "47523148": 297, "jordi": 298, "ramon": 298, "marco": 298, "carranza": 298, "mvit": 298, "whisper": 298, "blip": 298, "sam2": 298, "timm": 298, "multiscal": 298, "kinet": 298, "mvit_v1_b_weight": 298, "mvit_v1_b": 298, "224x224x3": 298, "input_fram": 298, "num_clip": 298, "print_exc": 298, "batch_dim": 298, "asr": 298, "transcrib": 298, "spoken": 298, "680k": 298, "whisperprocessor": 298, "whisperforconditionalgener": 298, "decoder_input_id": 298, "decoder_start_token_id": 298, "internaltorchdynamoerror": 298, "attributeerror": 298, "dynamiccach": 298, "key_cach": 298, "non_strict": 298, "proxytensor": 298, "gameplai": 298, "gamer": 298, "salesforc": 298, "blip_decod": 298, "caption_input": 298, "model_url": 298, "googleapi": 298, "sfr": 298, "model_base_capfilt_larg": 298, "exportdb": 298, "bos_token_id": 298, "anaconda3": 298, "functional_tensor": 298, "outs_unwrap": 298, "_op_dk": 298, "sam2imagepredictor": 298, "_predict": 298, "unnorm_coord": 298, "unnorm_box": 298, "mask_input": 298, "multimask_output": 298, "return_logit": 298, "image_predict": 298, "sam2_image_predictor": 298, "359": 298, "exporthelp": 298, "model_to_export": 298, "aoti": 298, "repl": 300, "r18": 300, "r18_script": 300, "unscripted_output": 300, "unscript": 300, "scripted_output": 300, "unscripted_top5": 300, "scripted_top5": 300, "463": 300, "msg_without_backtrac": 300, "output_sm": 300, "softmaxfuncopt": 300, "top5_tensor": 300, "ndone": 300, "418": 300, "644": 300, "cpulongtyp": 300, "exposit": 300, "preload": 301, "tunabl": 301, "taskset": 301, "uma": 301, "9480": 301, "223": 301, "vendor": 301, "genuineintel": 301, "node0": 301, "node1": 301, "cento": 301, "yum": 301, "libiomp": 301, "perftool": 301, "gperftool": 301, "libjemalloc2": 301, "ninstanc": 301, "ncore": 301, "program_arg": 301, "iomp": 301, "core_id": 301, "dafault": 301, "ncores_per_inst": 301, "libtcmalloc": 301, "preliminarili": 301, "grokk": 301, "deepspe": 302, "marian": 302, "oftentim": 302, "print_peak_memori": 302, "max_memory_alloc": 302, "use_zero": 302, "optimizer_class": 302, "992": 302, "1361": 302, "6123046875": 302, "1697": 302}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 24, 115, 116, 117, 118, 119], "live": 0, "tutori": [0, 40, 43, 55, 56, 58, 60, 63, 82, 93, 100, 106, 126, 129, 132, 133, 135, 168, 174, 175, 177, 178, 185, 192, 193, 198, 199, 200, 210, 223, 227, 233, 255, 256, 297], "torchrl": [1, 16, 177], "object": [1, 108, 140, 198], "code": [1, 2, 8, 16, 26, 40, 41, 60, 100, 206, 210, 216, 240, 262], "ddpg": 1, "loss": [1, 14, 41, 49, 52, 55, 58, 101, 105, 106, 107, 138, 142, 151, 177, 266, 286], "overview": [1, 20, 66, 115, 119, 126, 143, 151, 158, 182, 194, 203, 218, 246, 256], "prerequisit": [1, 41, 106, 115, 119, 175, 176, 197, 203, 210, 220, 224, 229, 230, 231, 248, 252, 288, 292, 293, 295, 296, 297, 298], "import": [1, 14, 50, 61, 94, 152, 190, 226, 228, 269, 273, 284, 285, 286, 300], "setup": [1, 20, 22, 27, 94, 114, 143, 150, 151, 152, 164, 172, 176, 187, 188, 200, 201, 209, 223, 234, 243, 244, 252, 269, 273, 284, 285, 286, 288, 299], "lossmodul": 1, "The": [1, 7, 8, 94, 96, 105, 139, 172, 173, 183, 199, 262], "__init__": [1, 38], "method": [1, 17, 26, 150, 164, 197, 198, 219, 280], "valu": [1, 151, 168, 177, 193], "estim": [1, 160], "actor": 1, "put": [1, 160, 176, 198], "thing": [1, 16], "togeth": [1, 16, 138, 160, 167, 176, 198, 266], "forward": [1, 6, 7, 25, 121, 136, 143, 155, 159, 198, 199], "call": [1, 191], "environ": [1, 16, 27, 59, 137, 151, 160, 177, 190, 208, 211], "transform": [1, 9, 16, 46, 47, 57, 101, 130, 131, 135, 138, 152, 159, 169, 171, 172, 177, 182, 185, 199], "parallel": [1, 9, 25, 50, 60, 62, 66, 132, 134, 135, 136, 138, 148, 149, 163, 171, 172, 201, 249, 283], "execut": [1, 5, 16, 22, 116, 172, 179, 187, 273, 283], "normal": [1, 49, 177, 286], "observ": [1, 206], "stat": 1, "build": [1, 4, 5, 6, 12, 26, 27, 37, 101, 108, 156, 157, 173, 175, 199, 238, 240, 253, 286, 300], "model": [1, 5, 7, 9, 11, 14, 20, 22, 23, 24, 25, 29, 37, 41, 42, 43, 50, 55, 61, 66, 80, 81, 91, 97, 99, 101, 103, 105, 106, 111, 113, 115, 116, 123, 125, 129, 130, 135, 136, 138, 139, 146, 148, 151, 152, 153, 157, 160, 161, 163, 164, 171, 172, 174, 175, 176, 183, 185, 187, 188, 190, 198, 200, 204, 205, 209, 223, 224, 226, 228, 237, 240, 243, 244, 252, 253, 255, 256, 260, 261, 262, 265, 269, 270, 273, 277, 278, 283, 284, 285, 297, 298, 300], "explor": [1, 5, 22], "data": [1, 7, 9, 11, 23, 30, 38, 42, 49, 50, 55, 56, 58, 60, 61, 62, 94, 101, 104, 114, 129, 134, 135, 136, 138, 141, 142, 148, 175, 177, 183, 185, 187, 188, 190, 193, 194, 203, 204, 218, 223, 257, 269, 283, 284, 285, 286], "collector": [1, 151, 177], "evalu": [1, 55, 129, 139, 140, 141, 152, 175, 183, 205, 209, 226, 266], "your": [1, 5, 6, 12, 16, 38, 66, 99, 103, 114, 121, 166, 198, 206, 208, 249, 269, 300], "record": [1, 187, 203], "replai": [1, 151, 177, 178], "buffer": [1, 151, 177, 283], "storag": [1, 207, 298], "batch": [1, 10, 16, 144, 156, 159, 179, 254, 283, 298], "size": [1, 152, 209, 226, 270, 298], "modul": [1, 5, 7, 17, 29, 72, 91, 101, 114, 121, 122, 151, 152, 155, 168, 174, 194, 223, 236, 253, 272, 280, 298], "construct": [1, 22, 61, 218, 219], "target": [1, 160, 283], "network": [1, 7, 37, 49, 52, 58, 94, 108, 111, 141, 142, 151, 160, 177, 178, 183, 185, 199, 266, 269, 284, 285, 286], "updat": [1, 52, 160, 179, 236], "optim": [1, 41, 42, 49, 58, 74, 105, 108, 114, 116, 122, 136, 140, 167, 181, 194, 197, 243, 244, 250, 254, 283, 285, 286, 289, 301, 302], "time": [1, 21, 24, 44, 53, 75, 79, 88, 92, 102, 112, 120, 121, 124, 152, 176, 184, 235, 273, 279, 282, 288, 290, 292, 293], "train": [1, 3, 4, 7, 9, 13, 16, 18, 23, 28, 37, 38, 49, 55, 58, 59, 61, 94, 96, 99, 103, 105, 108, 123, 129, 132, 135, 138, 139, 141, 142, 146, 147, 150, 151, 160, 167, 171, 175, 177, 178, 183, 185, 188, 194, 204, 205, 224, 226, 228, 229, 230, 255, 256, 264, 283, 286, 291, 295], "polici": [1, 16, 135, 151, 177], "experi": [1, 16, 17, 140, 200], "result": [1, 3, 50, 58, 80, 116, 121, 140, 141, 145, 177, 183, 185, 187, 194, 209, 234, 262, 265, 267], "conclus": [1, 2, 3, 4, 6, 7, 11, 16, 17, 18, 20, 23, 25, 26, 27, 55, 82, 88, 106, 115, 116, 119, 126, 137, 138, 143, 151, 152, 157, 158, 160, 167, 170, 172, 177, 182, 191, 193, 194, 196, 197, 199, 201, 203, 204, 207, 208, 209, 210, 211, 216, 217, 218, 219, 220, 221, 223, 224, 226, 228, 229, 230, 231, 232, 234, 237, 241, 244, 246, 247, 248, 249, 252, 254, 272, 280, 288, 292, 293, 294, 295, 296, 297, 298, 299, 301], "next": [1, 49, 58, 80, 176, 177], "step": [1, 5, 82, 126, 167, 172, 173, 176, 177, 187, 199, 253, 267, 269, 270, 273, 284, 285, 286, 288], "autograd": [2, 4, 10, 12, 36, 48, 68, 69, 83, 96, 122, 139, 143, 155, 181], "c": [2, 3, 4, 5, 6, 7, 8, 10, 12, 26, 27, 210, 240, 255, 282, 300], "frontend": [2, 7, 91, 93], "basic": [2, 7, 25, 29, 39, 40, 143, 148, 155, 170, 173, 179, 191, 193, 237, 254, 295], "oper": [2, 4, 6, 8, 10, 12, 18, 26, 27, 45, 54, 96, 110, 119, 170, 197, 200, 218, 219, 221, 231, 241, 283], "comput": [2, 16, 21, 36, 44, 48, 53, 75, 79, 88, 92, 102, 110, 112, 113, 120, 124, 129, 159, 164, 175, 184, 235, 265, 279, 283, 290], "higher": 2, "order": [2, 283], "gradient": [2, 14, 36, 80, 97, 136, 169, 218, 266, 283, 286], "us": [2, 3, 6, 7, 9, 13, 14, 15, 24, 26, 27, 28, 29, 40, 48, 56, 59, 89, 114, 115, 116, 119, 121, 123, 128, 134, 136, 143, 144, 146, 148, 149, 151, 153, 155, 169, 171, 173, 179, 180, 181, 182, 187, 188, 190, 207, 211, 214, 218, 220, 231, 240, 242, 245, 247, 248, 249, 256, 262, 264, 265, 272, 273, 281, 283, 284, 295, 297, 299, 301, 302], "custom": [2, 4, 6, 8, 12, 16, 17, 18, 26, 27, 38, 57, 72, 119, 122, 128, 129, 132, 144, 145, 155, 173, 174, 175, 193, 198, 249, 250], "function": [2, 14, 17, 23, 36, 41, 49, 52, 58, 69, 80, 91, 94, 101, 105, 106, 107, 108, 114, 122, 144, 145, 152, 155, 159, 164, 169, 174, 175, 177, 205, 226, 228, 252, 267, 273, 283, 286, 294], "translat": [2, 125, 131, 183], "from": [2, 8, 23, 24, 26, 48, 56, 114, 116, 123, 141, 142, 146, 165, 183, 190, 194, 196, 197, 198, 272, 284], "python": [2, 4, 6, 8, 18, 26, 27, 91, 173, 240, 297, 299], "cuda": [3, 4, 6, 8, 56, 88, 170, 245, 283], "graph": [3, 36, 48, 103, 110, 116, 143, 191, 193, 197, 204, 205, 206, 209, 224, 229, 230, 283, 298], "pytorch": [3, 5, 6, 7, 8, 12, 14, 17, 23, 24, 28, 29, 48, 51, 56, 60, 63, 66, 68, 69, 70, 72, 73, 74, 78, 87, 95, 98, 99, 100, 101, 103, 104, 105, 108, 109, 110, 111, 113, 116, 119, 121, 122, 133, 150, 152, 161, 170, 176, 187, 190, 194, 196, 197, 199, 200, 202, 214, 223, 224, 225, 226, 227, 228, 229, 230, 231, 233, 240, 241, 242, 251, 254, 255, 256, 257, 259, 262, 263, 269, 271, 273, 274, 281, 283, 284, 285, 286, 287, 291], "api": [3, 5, 7, 66, 96, 136, 155, 161, 167, 173, 203, 209, 210, 231, 240, 262, 283, 299], "get": [3, 5, 12, 37, 88, 113, 134, 136, 148, 158, 166, 181, 221, 247, 248, 249, 255, 256], "start": [3, 88, 103, 134, 136, 148, 166, 181, 221, 247, 248, 249, 255, 256, 282, 288, 301], "set": [4, 94, 137, 140, 152, 190, 196, 200, 203, 205, 208, 209, 211, 226, 243, 244, 252, 270, 283, 292], "up": [4, 77, 122, 140, 190, 198, 200, 208, 211, 243, 244, 252, 254, 270, 282], "system": 4, "defin": [4, 7, 10, 11, 23, 26, 37, 49, 52, 55, 69, 106, 115, 122, 140, 152, 172, 177, 190, 198, 200, 204, 205, 226, 228, 253, 267, 269, 282, 284, 285, 286, 295], "op": [4, 6, 10, 193, 294], "ad": [4, 10, 18, 94, 188, 194, 266, 295], "backend": [4, 10, 12, 17, 137, 150, 158, 173, 200, 224, 226, 228, 229, 230, 240, 283, 291, 301], "implement": [4, 10, 26, 27, 41, 58, 80, 107, 119, 144, 168, 173, 179, 180, 182, 216, 218, 236, 252], "an": [4, 11, 12, 16, 24, 49, 111, 113, 119, 123, 139, 151, 177, 194, 203, 244, 272, 301], "regist": [4, 7, 10, 12, 17, 27], "torch": [4, 5, 36, 48, 87, 101, 110, 114, 115, 123, 141, 143, 148, 174, 182, 191, 192, 193, 196, 199, 207, 211, 218, 224, 226, 228, 239, 243, 252, 266, 267, 272, 280, 288, 293, 294, 295, 296, 297, 298, 299, 301], "compil": [4, 6, 27, 143, 158, 182, 191, 194, 199, 211, 220, 224, 243, 244, 252, 288, 292, 293, 294, 295, 296, 297, 299], "support": [4, 10, 12, 18, 94, 103, 119, 175, 182, 219, 236, 250, 295], "hybrid": [4, 91, 93], "registr": 4, "test": [4, 11, 12, 16, 18, 49, 80, 94, 144, 156, 198, 240, 253, 269, 282], "creat": [4, 8, 15, 38, 42, 50, 55, 104, 108, 110, 114, 140, 141, 142, 157, 164, 174, 283], "mutabl": [4, 18], "load": [5, 7, 11, 14, 26, 29, 38, 42, 43, 49, 55, 59, 106, 123, 129, 146, 148, 152, 175, 183, 185, 207, 226, 228, 247, 257, 267, 269, 272, 275, 276, 277, 283, 284, 285, 286, 300], "torchscript": [5, 25, 26, 27, 29, 191, 237, 250, 255, 283, 300], "1": [5, 11, 23, 49, 91, 116, 137, 152, 164, 172, 173, 175, 187, 188, 193, 196, 198, 200, 204, 205, 209, 223, 224, 229, 230, 231, 253, 264, 267, 269, 270, 273, 282, 284, 285, 286], "convert": [5, 29, 161, 200, 205, 213, 222, 226, 228], "script": [5, 27, 29, 59, 91, 166, 209, 289, 301], "via": [5, 17, 203], "trace": [5, 27, 29, 88, 89, 91, 115, 157, 191, 197, 206, 209, 238, 262, 273, 298], "annot": [5, 231], "2": [5, 11, 20, 23, 49, 50, 91, 116, 137, 152, 164, 172, 173, 175, 187, 188, 196, 197, 198, 200, 204, 205, 209, 223, 224, 226, 227, 228, 229, 230, 231, 233, 234, 253, 264, 267, 269, 270, 273, 282, 284, 285, 286], "serial": [5, 17, 26, 152, 174], "file": [5, 38, 55, 116, 123, 146, 183, 203, 278], "3": [5, 11, 23, 49, 50, 91, 116, 137, 152, 172, 173, 187, 188, 196, 200, 204, 205, 209, 223, 224, 229, 230, 231, 253, 264, 267, 269, 270, 273, 282, 284, 285, 286], "A": [5, 27, 48, 51, 63, 96, 97, 107, 144, 170, 231, 262, 266, 276, 282, 284], "minim": [5, 106], "applic": [5, 7, 150, 173, 242, 280], "depend": [5, 116, 118, 182, 193, 194], "libtorch": 5, "4": [5, 11, 20, 23, 49, 91, 116, 152, 173, 176, 187, 188, 200, 205, 209, 224, 231, 234, 253, 264, 267, 269, 270, 273, 282, 284, 285, 286], "5": [5, 23, 49, 116, 187, 188, 200, 205, 209, 231, 267, 270, 273, 282, 286], "help": [5, 187], "extens": [6, 12, 15, 132, 173, 197, 232, 241, 244, 255, 280, 291], "motiv": [6, 7, 91, 205, 216, 226, 231], "exampl": [6, 15, 18, 25, 26, 80, 85, 91, 96, 97, 108, 111, 113, 122, 123, 139, 199, 203, 210, 220, 231, 232, 253, 255, 291, 296, 301], "write": [6, 7, 16, 57, 150, 188, 198, 206, 216, 231, 250], "setuptool": [6, 27], "pass": [6, 13, 121, 137, 143, 156, 167, 269], "backward": [6, 12, 25, 135, 136, 143, 144, 145, 167], "bind": [6, 26], "perform": [6, 121, 137, 153, 157, 158, 161, 169, 176, 182, 187, 196, 197, 211, 220, 226, 246, 254, 256, 259, 283, 296, 301], "comparison": [6, 24, 144, 148, 169, 191, 205], "gpu": [6, 7, 49, 50, 61, 85, 94, 123, 170, 187, 194, 208, 214, 230, 255, 283], "devic": [6, 14, 17, 37, 123, 135, 240, 245, 268, 272, 275, 283], "jit": [6, 12, 27, 115, 176], "mix": [6, 29, 135, 136, 146, 266, 283], "accessor": 6, "integr": [6, 8, 17, 97], "neural": [7, 14, 37, 49, 52, 94, 114, 160, 164, 256, 269, 284, 285, 286], "paramet": [7, 15, 37, 41, 42, 50, 101, 123, 174, 177, 179, 180, 231, 236, 267, 283, 284], "submodul": [7, 206], "travers": 7, "hierarchi": [7, 262], "run": [7, 24, 26, 40, 50, 55, 56, 59, 60, 61, 80, 91, 100, 106, 140, 148, 187, 190, 193, 209, 243, 244, 252, 273, 281, 300], "mode": [7, 22, 23, 155, 159, 204, 205, 206, 209, 220, 226, 255, 294], "ownership": 7, "dcgan": [7, 58], "what": [7, 12, 13, 17, 20, 49, 58, 62, 63, 96, 114, 123, 145, 153, 161, 169, 170, 203, 234, 239, 244, 245, 248, 249, 250, 262, 270, 285, 297, 300, 301, 302], "wa": 7, "gan": [7, 58], "agan": 7, "gener": [7, 17, 58, 80, 123, 140, 142, 253, 267, 276, 283], "discrimin": [7, 58, 107], "loop": [7, 16, 41, 105, 151, 177, 178, 228], "move": [7, 26, 104], "checkpoint": [7, 61, 123, 135, 148, 160, 228, 246, 247, 272, 276, 283], "recov": 7, "state": [7, 136, 302], "inspect": [7, 143, 168, 174, 188, 266], "imag": [7, 14, 24, 49, 64, 65, 103, 116, 129, 175, 176, 190, 298], "author": [8, 29, 116], "manual": 8, "when": [8, 138, 145, 146, 218, 297], "should": [8, 62, 138], "i": [8, 13, 17, 34, 49, 58, 62, 63, 114, 123, 145, 146, 153, 161, 167, 169, 196, 199, 218, 239, 241, 245, 248, 249, 250, 262, 266, 270, 285, 298, 300, 302], "why": [8, 59, 62, 138, 139, 218, 221, 248, 249], "distribut": [9, 13, 19, 22, 59, 60, 61, 62, 66, 88, 132, 148, 149, 150, 172, 180, 181, 194, 246, 247, 250, 283], "pipelin": [9, 149, 171, 172], "dispatch": [10, 12, 182], "schema": 10, "For": [10, 96, 277], "do": [10, 49, 96, 145, 161, 270], "need": [10, 96, 199, 206], "In": [10, 96, 104, 278], "place": [10, 96, 104], "view": [10, 187], "go": [10, 49, 58, 80, 190, 199], "beyond": 10, "autocast": [10, 266], "tracer": 10, "beta": [11, 20, 23, 152, 155, 156, 157, 161, 175, 182, 222, 243, 244, 254, 258, 294, 297, 299], "dynam": [11, 25, 107, 152, 193, 204, 209, 223, 264, 270, 296], "quantiz": [11, 23, 152, 175, 176, 194, 200, 204, 205, 206, 208, 209, 223, 224, 226, 227, 228, 229, 230, 231, 233, 256, 264, 270], "lstm": [11, 25, 107, 111, 151], "word": [11, 108, 113], "languag": [11, 113, 130, 131], "introduct": [11, 14, 28, 29, 48, 58, 66, 88, 95, 97, 98, 99, 100, 103, 104, 105, 110, 118, 137, 152, 168, 170, 172, 187, 190, 191, 194, 195, 201, 209, 210, 211, 216, 219, 220, 223, 224, 229, 230, 231, 236, 240, 241, 253, 264, 269, 270, 273, 284, 285, 286, 292, 293, 301], "text": [11, 55, 127, 128, 189], "pretrain": [11, 198, 264], "extend": [12, 26, 27, 119, 174, 199], "new": [12, 17, 69, 107, 122, 144], "": [12, 18, 110, 160, 197, 217], "kei": [12, 298], "full": [12, 41, 94], "list": 12, "kernel": [12, 17, 88, 164, 252, 254, 295], "against": 12, "nativ": [12, 242], "compat": 12, "known": 12, "issu": 12, "addit": [12, 126, 133, 170, 172, 187, 203, 270], "note": [12, 107, 231, 265], "futur": [12, 17], "work": [12, 13, 17, 42, 134, 135, 136, 138, 161, 232, 247], "stai": 12, "touch": 12, "uneven": 13, "input": [13, 58, 61, 80, 145, 194, 199, 223, 267, 283], "join": 13, "context": [13, 201], "manag": [13, 170], "requir": [13, 20, 116, 139, 174, 234, 245, 250, 262, 298, 300, 302], "distributeddataparallel": [13, 148, 283], "zeroredundancyoptim": [13, 302], "keyword": 13, "argument": 13, "how": [13, 17, 40, 134, 135, 136, 138, 167, 205, 211, 226, 228, 231, 232, 245, 247, 249, 250, 262, 269, 281, 300, 302], "doe": [13, 20, 139, 234], "joinabl": 13, "joinhook": 13, "make": [13, 107, 206, 242], "toi": [13, 231], "class": [13, 16, 26, 37, 57, 106, 168, 194], "transfer": [14, 129, 175], "underli": 14, "principl": [14, 196, 197, 219], "packag": [14, 84], "select": [14, 151, 201, 238], "content": [14, 122, 254], "style": [14, 199], "descent": 14, "numpi": [15, 45, 54, 77, 104, 122, 217], "scipi": 15, "less": 15, "parametr": [15, 168, 174], "pendulum": 16, "effect": 16, "action": [16, 151], "_step": 16, "reset": 16, "simul": 16, "_reset": 16, "metadata": [16, 17], "env": 16, "_spec": 16, "spec": 16, "shape": [16, 43, 104, 193, 274], "reproduc": 16, "seed": [16, 104], "wrap": [16, 18, 114, 135, 198, 282, 295], "envbas": 16, "our": [16, 22, 144, 150, 156, 167, 269, 284, 285, 286], "rollout": 16, "simpl": [16, 50, 96, 116, 157, 183, 266, 273], "facilit": 17, "privateuse1": 17, "guard": [17, 193], "deseri": [17, 26], "other": [17, 22, 101, 103, 105, 170, 187], "improv": [17, 121, 187, 224, 254], "user": [17, 87, 206, 240, 295], "renam": 17, "name": [17, 141, 142, 193], "properti": 17, "relat": [17, 43, 190, 197, 280], "pil": 18, "crop": 18, "combin": [19, 138, 148], "dataparallel": [19, 50, 62, 94, 123, 148], "rpc": [19, 132, 149, 179, 180, 181, 202, 245, 251], "framework": [19, 180, 181], "acceler": [20, 104, 114, 166, 199, 207, 234], "bert": [20, 152, 209, 234], "semi": [20, 28, 234], "structur": [20, 234], "sparsiti": [20, 219, 234], "problem": [20, 231, 234], "solv": [20, 234], "intro": [20, 234], "establish": 20, "baselin": [20, 205], "prune": [20, 174, 234], "spars": [20, 216, 219, 234], "infer": [20, 47, 123, 129, 152, 176, 194, 196, 254, 255, 266, 277, 283, 291, 297, 300], "torchrec": [22, 194, 195], "shard": [22, 66, 134, 135, 136, 138, 194, 302], "instal": [22, 82, 88, 97, 116, 152, 175, 176, 194, 211, 224, 256, 281], "embed": [22, 103, 113, 194], "distributedmodelparallel": [22, 194], "multiprocess": 22, "tabl": [22, 122], "wise": 22, "static": [23, 107, 205, 223, 264, 298], "eager": [23, 205, 209], "architectur": 23, "helper": [23, 152, 205, 219, 226, 228, 252], "dataset": [23, 31, 38, 50, 57, 99, 103, 105, 114, 128, 152, 198, 205, 209, 226, 228, 286], "loader": [23, 94], "imagenet": 23, "post": [23, 204, 205, 224, 226, 229, 230, 264], "awar": [23, 228, 229, 256, 264], "speedup": [23, 191, 266], "option": [24, 36, 48, 50, 116, 126, 198, 224, 240, 269, 301], "export": [24, 115, 116, 119, 123, 192, 193, 224, 226, 227, 228, 229, 230, 231, 233, 297, 298, 300], "runtim": [24, 116, 283, 297, 301], "between": [24, 148, 218], "syntax": [25, 91, 237], "appli": [25, 66, 138, 152, 224, 229, 230, 232, 301], "ensembl": [25, 153], "bidirect": 25, "layer": [25, 37, 97, 101, 138, 144, 199, 283], "asid": 25, "visual": [25, 38, 97, 103, 116, 129, 167, 175, 183, 185, 188, 262, 265], "project": [26, 199], "With": [26, 187], "cmake": [26, 27], "save": [26, 29, 42, 43, 59, 61, 116, 123, 135, 139, 145, 146, 148, 160, 167, 207, 226, 228, 246, 247, 266, 267, 275, 276, 277, 278, 284], "To": [26, 66], "ivalu": 26, "take": 26, "return": [26, 139], "bound": [26, 197], "appendix": [27, 219], "more": [27, 36, 96, 104, 139, 158, 159, 179, 187, 246, 253, 264, 267, 269, 270, 273, 281, 284, 285, 286], "wai": [27, 169], "supervis": 28, "learn": [28, 39, 40, 51, 63, 91, 107, 108, 109, 122, 129, 132, 152, 160, 170, 175, 177, 178, 179, 181, 187, 196, 203, 253, 264, 267, 269, 270, 273, 281, 284, 285, 286, 297, 301], "usb": 28, "built": [28, 200], "upon": 28, "freematch": 28, "softmatch": 28, "cifar": [28, 106], "10": [28, 106, 167, 205], "onli": [28, 206, 255, 256], "40": 28, "label": [28, 190], "specif": [28, 190, 226, 228, 283], "imbalanc": 28, "algorithm": [28, 178], "further": [29, 36, 37, 38, 41, 46, 48, 59, 61, 62, 115, 116, 118, 119, 121, 126, 129, 146, 147, 151, 199, 200, 216, 218, 219], "read": [29, 36, 37, 38, 41, 46, 48, 59, 61, 62, 115, 116, 118, 119, 121, 126, 146, 147, 151, 190, 197, 200, 216, 218, 219, 262], "audio": [30, 31, 32, 33, 34, 35], "augment": [30, 32, 88, 111, 283], "featur": [32, 33, 97, 111, 129, 135, 175, 187, 190, 194, 255, 256], "extract": [33, 190], "o": 34, "resampl": 35, "automat": [36, 110, 155, 266, 298], "differenti": [36, 48, 110, 155], "tensor": [36, 45, 54, 68, 78, 86, 99, 104, 110, 122, 132, 138, 139, 141, 167, 182, 199, 219, 221, 231, 244, 280, 283, 298], "disabl": [36, 283], "track": [36, 145, 188], "jacobian": [36, 159, 164], "product": [36, 159, 164, 182], "nn": [37, 72, 73, 84, 91, 101, 114, 122, 123, 130, 131, 174, 199, 272, 280, 298], "flatten": 37, "linear": [37, 101, 108, 114], "relu": [37, 200], "sequenti": [37, 114], "softmax": [37, 108, 218], "dataload": [38, 57, 99, 105, 114], "iter": [38, 55, 57, 174], "__len__": 38, "__getitem__": 38, "prepar": [38, 55, 141, 142, 183, 187, 200, 205, 216, 217, 218, 226, 228, 240, 260, 261], "through": [38, 57, 91, 200, 229, 230, 269], "thi": [40, 63, 135, 167, 199, 232], "guid": [40, 136, 170, 206, 283], "hyperparamet": [41, 94, 177, 178], "quickstart": 42, "weight": [43, 52, 58, 70, 122, 223], "initi": [45, 54, 58, 59, 136, 137, 148, 150, 160, 168, 221, 236, 269, 284, 285], "attribut": [45, 54, 97, 265], "bridg": [45, 54, 104], "arrai": [45, 54], "totensor": 46, "lambda": 46, "fast": [47, 80, 254], "better": [47, 211, 220], "gentl": 48, "background": [48, 170], "usag": [48, 143, 144, 155, 167, 170, 191, 193, 196, 240, 254, 256, 291, 295], "vector": [48, 153, 159, 164], "calculu": 48, "exclus": 48, "dag": 48, "classifi": [49, 108, 116, 141, 175, 190], "about": [49, 152, 274], "cifar10": 49, "convolut": [49, 101, 144, 151, 156, 283], "multipl": [49, 123, 174, 278], "where": [49, 58, 80, 190, 218], "dummi": 50, "8": [50, 205, 267, 282], "summari": [50, 135, 182, 263], "deep": [51, 63, 107, 108, 109, 196], "60": [51, 63], "minut": [51, 63], "blitz": [51, 63], "backprop": 52, "chatbot": 55, "preprocess": [55, 128, 160, 176], "format": [55, 116, 161, 197, 203, 247, 283], "trim": 55, "seq2seq": [55, 183], "encod": [55, 113, 183], "decod": [55, 183], "procedur": 55, "mask": [55, 199, 218], "singl": [55, 163], "greedi": 55, "my": 55, "googl": 56, "colab": 56, "version": [56, 164], "drive": 56, "enabl": [56, 136, 201, 203, 210, 283], "compos": [57, 159, 295], "afterword": 57, "torchvis": [57, 81, 198], "adversari": [58, 80], "fault": 59, "toler": 59, "torchrun": [59, 148], "grace": 59, "restart": 59, "process": [59, 61, 148, 172, 173, 179], "group": [59, 61, 173], "provid": 59, "variabl": [59, 137, 283], "snapshot": [59, 167], "trainer": 59, "constructor": [59, 283], "resum": [59, 123, 266], "video": [60, 176, 298], "section": 60, "multi": [61, 85, 94, 140, 196], "ddp": [61, 62, 132, 146, 148, 283], "job": [61, 203, 273], "you": [62, 103, 138, 170, 199, 203, 265, 297, 301], "prefer": 62, "over": 62, "dp": 62, "goal": 63, "segment": [64, 65, 198, 298], "deeplabv3": [64, 65], "android": [64, 215, 238, 240, 242, 253, 258, 260], "io": [65, 214, 215, 238, 258, 261], "primit": 66, "commun": [66, 88, 94, 150, 245], "launcher": [66, 196, 197], "scale": [66, 138, 147, 182], "develop": 66, "control": [70, 115, 122, 182, 193, 283, 296, 301], "flow": [70, 115, 122, 193, 231, 298], "share": [70, 122, 231], "warm": [77, 122], "threat": 80, "sign": 80, "attack": 80, "under": 80, "fgsm": 80, "accuraci": [80, 94, 152, 158, 226, 256, 270], "v": [80, 159, 170, 217], "epsilon": 80, "sampl": [80, 142, 169, 262], "finetun": [81, 82, 129, 175, 198], "torchmultimod": 82, "flava": 82, "former": 87, "holist": [88, 89], "analysi": [88, 89, 197], "hta": 88, "tempor": 88, "breakdown": 88, "idl": 88, "durat": 88, "overlap": 88, "counter": 88, "memori": [88, 111, 121, 139, 144, 161, 167, 170, 178, 196, 197, 246, 254, 273, 283, 301], "bandwidth": 88, "queue": 88, "length": [88, 283], "launch": [88, 172, 262], "statist": 88, "diff": 89, "inform": [91, 158], "part": [91, 111, 175, 197], "pure": 91, "top": [91, 197], "level": [91, 96, 111, 141, 142], "tune": [94, 135, 152, 197, 254, 283], "rai": 94, "configur": [94, 140, 152, 197, 209, 226, 228, 262, 292], "search": 94, "space": 94, "youtub": [95, 98, 100], "seri": [95, 100], "fundament": 96, "we": 96, "turn": [96, 141], "off": 96, "On": 96, "profil": [96, 121, 157, 158, 187, 197, 202, 251, 262, 273], "advanc": [96, 107, 135, 150, 187, 197, 217, 241, 266, 295], "topic": [96, 150, 266], "detail": [96, 236], "high": [96, 182], "understand": 97, "captum": [97, 265], "first": [97, 115, 168, 196, 197], "occlus": 97, "gradcam": 97, "insight": 97, "common": [101, 143, 231, 298], "type": [101, 104, 194, 266, 298], "recurr": [101, 151], "manipul": [101, 104], "activ": [101, 105, 220], "tensorboard": [103, 187, 188, 281], "befor": [103, 190, 265], "show": 103, "scalar": [103, 281], "resourc": [103, 105, 133, 170, 172, 270, 300], "random": [104, 107], "math": [104, 254], "logic": [104, 196], "brief": 104, "broadcast": 104, "alter": 104, "copi": [104, 170], "chang": [104, 268], "number": [104, 196], "dimens": [104, 254], "per": [105, 169], "epoch": 105, "knowledg": 106, "distil": 106, "util": [106, 174, 178, 199, 241, 267, 280, 283, 294], "cross": [106, 199], "entropi": 106, "cosin": 106, "intermedi": [106, 145, 283], "regressor": 106, "decis": 107, "bi": 107, "crf": 107, "versu": 107, "toolkit": 107, "condit": 107, "field": 107, "discuss": 107, "exercis": [107, 111, 113, 126, 141, 142, 183, 197], "tag": [107, 111], "block": [108, 199, 267], "affin": 108, "map": 108, "non": [108, 170, 193, 206, 244, 253, 283], "probabl": 108, "compon": [108, 158], "logist": 108, "regress": 108, "bag": [108, 113], "nlp": [109, 141, 142, 165, 183], "librari": [110, 127, 190, 242, 269, 273, 283, 284, 285, 286, 301], "reshap": 110, "sequenc": [111, 138, 183], "long": [111, 273], "short": [111, 262], "term": 111, "speech": [111, 186, 189, 298], "tagger": 111, "charact": [111, 141, 142], "lexic": 113, "semant": [113, 216, 217], "dens": [113, 182], "n": 113, "gram": 113, "continu": 113, "realli": 114, "mnist": 114, "net": 114, "scratch": [114, 141, 142, 165, 183], "without": [114, 240, 253], "refactor": [114, 115, 206], "add": [114, 137, 198, 294], "valid": [114, 283], "fit": [114, 167], "get_data": 114, "switch": [114, 283], "cnn": 114, "close": 114, "thought": 114, "attempt": 115, "suggest": [115, 193], "patch": [115, 190], "cond": 115, "netron": 116, "6": [116, 187, 188, 200, 205, 267, 273, 282], "7": [116, 187, 200, 205, 267, 273, 282], "compar": [116, 209, 223, 253, 267], "ones": 116, "overrid": 119, "exist": [119, 161], "debug": [121, 158, 203, 205, 209, 226, 283], "print": 121, "state_dict": [123, 285], "recommend": [123, 141, 170, 191, 231], "entir": 123, "program": [123, 193], "One": [123, 278], "warmstart": [123, 284], "differ": [123, 143, 198, 284], "across": [123, 275], "cpu": [123, 135, 139, 157, 158, 170, 196, 197, 211, 220, 241, 255, 262, 283, 291, 295, 301], "t5": [125, 135], "base": [125, 175, 202, 238, 251], "summar": 125, "sentiment": 125, "classif": [125, 127, 190, 298], "templat": 126, "torchtext": [127, 128, 130, 131], "vision": [129, 175, 283], "few": [129, 175], "predict": [129, 175, 190], "convnet": 129, "fix": [129, 193, 231], "extractor": [129, 175], "fsdp": [132, 134, 135], "tp": [132, 138], "devicemesh": [132, 249], "welcom": 133, "fulli": [134, 135, 136, 138, 199], "recap": 135, "fine": [135, 152], "hf": 135, "precis": [135, 136, 146, 266, 283], "intial": 135, "strategi": [135, 140], "prefetch": [135, 136], "stream": 135, "rank0": 135, "fsdp2": 136, "clip": [136, 266], "dtensor": 136, "dict": 136, "dcp": [136, 246, 247], "fsdp1": 136, "migrat": 136, "libuv": 137, "tcpstore": 137, "benchmark": [137, 156, 209, 243, 253, 267], "impact": 137, "exit": 137, "rout": 137, "use_libuv": 137, "fals": 137, "0": [137, 175, 193, 218, 227, 233], "init_method": 137, "processgroup": 137, "larg": 138, "layernorm": 138, "rmsnorm": 138, "hook": [139, 167], "typic": 139, "than": [139, 196], "concept": [139, 193], "pack": [139, 199], "unpack": 139, "some": 139, "unconvent": 139, "int": 139, "tupl": 139, "str": 139, "disk": 139, "na": 140, "ax": 140, "torchx": 140, "app": [140, 240], "runner": 140, "searchspac": 140, "metric": [140, 224], "optimizationconfig": 140, "choos": [140, 301], "schedul": [140, 244], "acknowledg": [140, 196, 197], "rnn": [141, 142, 181], "plot": [141, 142, 183], "captur": [143, 157, 167, 176, 224, 229, 230], "larger": 143, "log": [143, 158, 160, 281], "flag": 143, "address": [143, 298], "certain": 143, "limit": [143, 295], "aotautograd": 143, "recompil": [143, 296], "reason": [143, 274], "fuse": [144, 156, 167, 182, 194, 253, 283], "norm": [144, 156, 283], "formula": [144, 295], "batchnorm": 144, "out": [144, 156, 232, 286], "doubl": 145, "output": [145, 194, 256], "real": [146, 176], "world": 146, "cloud": 146, "enough": 146, "multinod": 147, "local": [147, 196], "global": [147, 152, 174, 209], "rank": 147, "heteregen": 147, "troubleshoot": [147, 176, 266], "case": [148, 283], "skew": 148, "speed": [148, 254], "point": [150, 223, 280], "collect": [150, 177, 267], "own": [150, 206], "ring": 150, "allreduc": 150, "dqn": [151, 178], "mlp": 151, "q": [151, 178], "huggingfac": 152, "necessari": [152, 269, 273, 284, 285, 286], "download": [152, 190, 204, 209], "token": 152, "check": [152, 209, 226], "refer": [152, 200, 223], "vmap": [153, 239], "forc": 154, "align": 154, "wav2vec2": [154, 186], "fuser": 156, "fx": [156, 157, 191, 204, 205, 206, 224, 229, 230], "fusion": [156, 200, 252], "resnet18": [156, 157, 231], "symbol": [157, 193, 206], "interpret": [157, 215, 238, 258, 265], "investig": 157, "inductor": [158, 210, 229, 230, 292], "determin": 158, "error": [158, 193, 266, 298], "hessian": 159, "hvp": 159, "vhp": 159, "revers": 159, "jacrev": 159, "jacfwd": 159, "functorch": 159, "mario": 160, "plai": 160, "rl": 160, "agent": 160, "definit": 160, "act": 160, "cach": [160, 168, 292, 293], "recal": 160, "td": 160, "all": [160, 167, 199, 266, 273, 283], "let": 160, "channel": [161, 197], "last": [161, 197], "gain": [161, 296], "machin": 163, "best": [163, 191, 194], "practic": [163, 170, 187, 191, 194], "tangent": 164, "ntk": 164, "contract": 164, "nvfuser": 166, "dure": [167, 283], "disclaim": 167, "techniqu": 167, "register_post_accumulate_grad_hook": 167, "everyth": [167, 198], "line": [167, 209], "hand": 168, "ar": [168, 199], "citizen": 168, "concaten": 168, "remov": [168, 174], "grad": [169, 218, 283], "effici": [169, 196, 216, 258, 283], "good": 170, "non_block": 170, "pin_memori": 170, "preambl": 170, "pageabl": 170, "asynchron": [170, 179, 246, 283], "synchron": [170, 283], "true": [170, 272, 283], "cudamemcpyasync": 170, "perspect": 170, "synergi": 170, "direct": [170, 245], "mp": 170, "consider": 170, "partit": 172, "main": 172, "cpp": 173, "subclass": [173, 182, 280], "expos": 173, "re": 174, "nightli": [175, 192], "raspberri": 176, "pi": 176, "30": 176, "fp": 176, "opencv": 176, "choic": 176, "mobilenetv2": [176, 213, 222], "It": 176, "reinforc": [177, 178, 181], "ppo": 177, "server": [179, 180], "cartpol": 179, "solver": 179, "rref": 181, "dot": 182, "attent": [182, 183, 199], "sdpa": 182, "explicit": [182, 252], "hardwar": 182, "causal": 182, "self": 182, "nestedtensor": 182, "attn_bia": 182, "spatial": 185, "depict": 185, "stn": 185, "recognit": [186, 298], "event": 187, "analyz": [187, 203, 273], "amd": 187, "projector": 188, "assess": 188, "tacotron2": 189, "whole": 190, "slide": 190, "tiatoolbox": 190, "clean": 190, "patchpredictor": 190, "pathologi": 190, "here": 190, "nest": [191, 199, 221], "demonstr": [191, 298], "torchdynamo": [191, 293, 298], "break": [193, 298], "strict": [193, 298], "constraint": [193, 200], "special": 193, "dim": 193, "violat": 193, "_check": 193, "ir": [193, 231], "decomposit": 193, "exportdb": 193, "recsi": 194, "embeddingbag": 194, "embeddingbagcollect": 194, "planner": 194, "lazyawait": 194, "anatomi": 194, "lookup": 194, "grokk": [196, 197], "intel": [196, 197, 211, 230, 241, 255, 256, 262, 283, 291, 301], "avoid": [196, 283], "core": [196, 213, 283], "access": [196, 218, 283, 285, 301], "alwai": 196, "faster": 196, "remot": [196, 293], "pin": [196, 246], "worker": 196, "default": [196, 266, 268], "torchserv": [196, 197], "set_num_thread": 196, "physic": 196, "down": 197, "microarchitectur": 197, "tma": 197, "back": 197, "end": [197, 203, 293], "vtune": [197, 262], "instrument": [197, 262], "technologi": [197, 262], "itt": [197, 262], "leverag": [197, 241], "alloc": [197, 254, 283, 301], "tcmalloc": 197, "jemalloc": 197, "ptmalloc": 197, "boost": 197, "detect": 198, "pennfudan": 198, "modifi": [198, 266], "backbon": 198, "instanc": 198, "replac": 199, "me": 199, "introduc": [199, 215], "abov": 199, "octob": 199, "2024": 199, "multiheadattent": 199, "gpt": 199, "one": [199, 209], "row": 199, "longer": 199, "caus": 199, "nan": [199, 218, 266], "flexattent": 199, "njt": 199, "swiglu": 199, "feed": 199, "prototyp": [200, 203, 204, 205, 206, 207, 208, 209, 213, 214, 215, 216, 217, 218, 219, 225, 226, 228, 234, 238], "backendconfig": 200, "deriv": [200, 231], "pattern": [200, 231], "each": 200, "dtypeconfig": 200, "conv": 200, "qconfigmap": [200, 205], "satisfi": 200, "faulti": 200, "rotat": 201, "approach": 201, "workload": [202, 241, 251, 262, 283], "flight": 203, "stuck": 203, "retriev": 203, "dump": 203, "eval": [205, 226], "specifi": [205, 209, 269], "calibr": [205, 226], "9": 205, "float": [205, 223], "skip": [206, 236, 283], "traceabl": 206, "gpudirect": 207, "torchao": 208, "glue": 209, "qconfig_dict": 209, "wrapper": [210, 240], "window": 211, "xpu": [211, 262], "softwar": 211, "altern": 211, "llvm": 211, "ml": 213, "lite": 215, "workflow": [215, 240, 264], "adagrad": 216, "maskedtensor": [216, 217, 218, 219], "simpler": 216, "origin": 216, "maskedarrai": 217, "reduct": [217, 219], "index": 218, "slice": 218, "distinguish": 218, "anoth": 218, "x": 218, "yield": 218, "nansum": 218, "nanmean": 218, "safe": 218, "miss": 218, "coo": 219, "csr": 219, "unari": 219, "binari": 219, "max": 220, "autotun": 220, "see": [221, 243, 295], "also": [221, 243, 295], "nnapi": 222, "numer": 223, "suit": 223, "correspond": 223, "locat": 223, "its": 223, "equival": 223, "same": 223, "openvino": 224, "nncf": 224, "lower": [224, 226, 229, 230], "represent": 224, "recip": [225, 253, 259, 260, 261, 263, 264, 271, 287, 289], "qat": 228, "x86": 229, "param": 231, "pt2e": 231, "match": [231, 283], "aten": 231, "directli": [231, 283], "subgraphmatcherwithnamenodemap": 231, "autoload": 232, "tree": 232, "mechan": 232, "freez": 237, "mobil": [238, 258, 259, 263, 289], "so": 239, "vulkan": 240, "desktop": 240, "sdk": 240, "java": 240, "upload": 240, "matrix": 241, "amx": 241, "guidelin": 241, "can": 241, "confirm": 241, "being": 241, "prebuilt": 242, "lr": 244, "happen": 244, "tensorpip": 245, "even": 246, "commdebugmod": 248, "hsdp": 249, "solut": [249, 298], "horizont": 252, "foreach_map": 252, "pre": [253, 264], "requisit": [253, 264], "two": 253, "fuse_modul": 253, "tool": 253, "aw": 254, "graviton": 254, "processor": 254, "bfloat16": [254, 255], "openbla": 254, "smaller": 254, "overhead": 254, "linux": 254, "transpar": 254, "huge": 254, "page": 254, "thp": 254, "float32": 255, "imper": 255, "float16": 255, "zoo": 255, "eas": 256, "compressor": 256, "driven": 256, "deploy": [256, 300], "showcas": 262, "mobilenet": 264, "v2": 264, "begin": 265, "final": 265, "gradscal": 266, "e": 266, "g": 266, "amp": [266, 283], "minor": 266, "inf": 266, "mismatch": 266, "mai": 266, "manifest": 266, "cudnn_status_bad_param": 266, "syntaxerror": 267, "timeit": 267, "timer": [267, 282], "autorang": 267, "fuzz": 267, "instruct": [267, 282], "count": [267, 282], "callgrind": [267, 282], "look": 270, "latenc": 270, "tip": 272, "mmap": 272, "meta": 272, "load_state_dict": [272, 280], "assign": 272, "instanti": 273, "resnet": 273, "consumpt": 273, "examin": 273, "stack": 273, "And": [276, 277], "swap_tensor": 280, "quick": [282, 301], "wall": 282, "blocked_autorang": 282, "snippet": 282, "collect_callgrind": 282, "delv": 282, "deeper": 282, "b": [282, 284], "footnot": 282, "calcul": 283, "bia": 283, "follow": 283, "none": 283, "instead": 283, "zero_grad": 283, "channels_last": 283, "uniform": 283, "numa": [283, 301], "openmp": [283, 301], "libiomp": 283, "onednn": 283, "cudnn": 283, "auto": 283, "tuner": 283, "unnecessari": 283, "prealloc": 283, "reduc": [283, 288], "accumul": 283, "find_unused_paramet": 283, "balanc": 283, "zero": 286, "while": 286, "cold": 288, "region": 288, "fp32": 291, "bf16": 291, "torchinductor_fx_graph_cach": 292, "torchinductor_autograd_cach": 292, "torchinductor_cache_dir": 292, "torchinductor_fx_graph_remote_cach": 292, "torchinductor_autograd_remote_cach": 292, "torchinductor_autotune_remote_cach": 292, "torchinductor_force_disable_cach": 292, "offer": 293, "mega": 293, "modular": 293, "torchinductor": 293, "triton": [293, 295], "rewrit": 294, "mul": 294, "triton_op": 295, "fallback": 295, "flopcount": 295, "set_stanc": 296, "descript": 296, "prevent": 296, "measur": 296, "crash": 296, "sooner": 296, "aotinductor": 297, "challeng": 298, "them": 298, "No": 298, "caption": 298, "cannot": 298, "mutat": 298, "frozen": 298, "promptabl": 298, "torch_log": 299, "engin": 300, "xeon": 301, "run_cpu": 301, "Will": 301, "command": 301, "explan": 301}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [20, "overview"], [115, "overview"], [119, "overview"], [126, "overview"], [143, "overview"], [151, "overview"], [158, "overview"], [182, "overview"], [203, "overview"], [256, "overview"]], "Prerequisites": [[1, "prerequisites"], [106, "prerequisites"], [115, "prerequisites"], [119, "prerequisites"], [176, "prerequisites"], [197, "prerequisites"], [203, "prerequisites"], [224, "prerequisites"], [229, "prerequisites"], [230, "prerequisites"], [248, "prerequisites"], [252, "prerequisites"], [288, "prerequisites"], [292, "prerequisites"], [293, "prerequisites"], [295, "prerequisites"], [296, "prerequisites"], [297, "prerequisites"], [298, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [151, "environment"], [160, "environment"]], "Transforms": [[1, "transforms"], [46, "transforms"], [57, "transforms"], [177, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [177, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [177, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [41, "optimizer"], [105, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [11, "conclusion"], [16, "conclusion"], [17, "conclusion"], [18, "conclusion"], [20, "conclusion"], [23, "conclusion"], [25, "conclusion"], [26, "conclusion"], [27, "conclusion"], [55, "conclusion"], [82, "conclusion"], [88, "conclusion"], [106, "conclusion"], [115, "conclusion"], [116, "conclusion"], [119, "conclusion"], [126, "conclusion"], [137, "conclusion"], [138, "conclusion"], [143, "conclusion"], [151, "conclusion"], [152, "conclusion"], [157, "conclusion"], [158, "conclusion"], [160, "conclusion"], [167, "conclusion"], [170, "conclusion"], [172, "conclusion"], [182, "conclusion"], [191, "conclusion"], [193, "conclusion"], [194, "conclusion"], [196, "conclusion"], [197, "conclusion"], [199, "conclusion"], [201, "conclusion"], [203, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [211, "conclusion"], [216, "conclusion"], [217, "conclusion"], [218, "conclusion"], [219, "conclusion"], [220, "conclusion"], [221, "conclusion"], [223, "conclusion"], [224, "conclusion"], [226, "conclusion"], [228, "conclusion"], [229, "conclusion"], [230, "conclusion"], [231, "conclusion"], [232, "conclusion"], [234, "conclusion"], [237, "conclusion"], [241, "conclusion"], [244, "conclusion"], [246, "conclusion"], [247, "conclusion"], [248, "conclusion"], [249, "conclusion"], [252, "conclusion"], [254, "conclusion"], [272, "conclusion"], [280, "conclusion"], [288, "conclusion"], [292, "conclusion"], [293, "conclusion"], [294, "conclusion"], [295, "conclusion"], [296, "conclusion"], [297, "conclusion"], [298, "conclusion"], [299, "conclusion"], [301, "conclusion"]], "Next Steps": [[1, "next-steps"], [176, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [88, "getting-started"], [255, "getting-started"], [256, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Loading a TorchScript Model in C++": [[5, "loading-a-torchscript-model-in-c"]], "Step 1: Converting Your PyTorch Model to Torch Script": [[5, "step-1-converting-your-pytorch-model-to-torch-script"]], "Converting to Torch Script via Tracing": [[5, "converting-to-torch-script-via-tracing"]], "Converting to Torch Script via Annotation": [[5, "converting-to-torch-script-via-annotation"]], "Step 2: Serializing Your Script Module to a File": [[5, "step-2-serializing-your-script-module-to-a-file"]], "Step 3: Loading Your Script Module in C++": [[5, "step-3-loading-your-script-module-in-c"]], "A Minimal C++ Application": [[5, "a-minimal-c-application"]], "Depending on LibTorch and Building the Application": [[5, "depending-on-libtorch-and-building-the-application"]], "Step 4: Executing the Script Module in C++": [[5, "step-4-executing-the-script-module-in-c"]], "Step 5: Getting Help and Exploring the API": [[5, "step-5-getting-help-and-exploring-the-api"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "PyTorch Custom Operators": [[8, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[8, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[8, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[8, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[8, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[8, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[9, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[10, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[10, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[10, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[10, "in-place-or-view-ops"]], "Adding autograd support": [[10, "adding-autograd-support"]], "Going beyond autograd": [[10, "going-beyond-autograd"]], "Autocast": [[10, "autocast"]], "Batched": [[10, "batched"]], "Tracer": [[10, "tracer"]], "(beta) Dynamic Quantization on an LSTM Word Language Model": [[11, "beta-dynamic-quantization-on-an-lstm-word-language-model"]], "Introduction": [[11, "introduction"], [14, "introduction"], [58, "introduction"], [66, "introduction"], [97, "id1"], [103, "id1"], [105, "id1"], [137, "introduction"], [152, "introduction"], [170, "introduction"], [187, "introduction"], [190, "introduction"], [201, "introduction"], [209, "introduction"], [210, "introduction"], [211, "introduction"], [219, "introduction"], [220, "introduction"], [223, "introduction"], [224, "introduction"], [229, "introduction"], [230, "introduction"], [231, "introduction"], [236, "introduction"], [240, "introduction"], [241, "introduction"], [253, "introduction"], [264, "introduction"], [269, "introduction"], [270, "introduction"], [273, "introduction"], [284, "introduction"], [285, "introduction"], [286, "introduction"], [292, "introduction"], [293, "introduction"]], "1. Define the model": [[11, "define-the-model"]], "2. Load in the text data": [[11, "load-in-the-text-data"]], "3. Load the pretrained model": [[11, "load-the-pretrained-model"]], "4. Test dynamic quantization": [[11, "test-dynamic-quantization"]], "Extending dispatcher for a new backend in C++": [[12, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[12, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[12, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[12, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[12, "register-kernels-for-the-new-backend"], [17, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[12, "autograd-support-for-the-new-backend"]], "Build an extension": [[12, "build-an-extension"]], "Custom operator support": [[12, "custom-operator-support"]], "JIT support": [[12, "jit-support"]], "Testing your backend against native PyTorch backends": [[12, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[12, "backward-compatibility"]], "Known issues & additional notes": [[12, "known-issues-additional-notes"]], "Future Work": [[12, "future-work"], [17, "future-work"]], "Stay in touch": [[12, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[13, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[13, "requirements"], [20, "requirements"], [174, "requirements"], [234, "requirements"], [245, "requirements"], [250, "requirements"], [262, "requirements"], [300, "requirements"], [302, "requirements"]], "What is Join?": [[13, "what-is-join"]], "Using Join with DistributedDataParallel": [[13, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[13, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[13, "passing-keyword-arguments"]], "How Does Join Work?": [[13, "how-does-join-work"]], "Joinable": [[13, "joinable"]], "JoinHook": [[13, "joinhook"]], "Join": [[13, "join"]], "Making a Toy Class Work with Join": [[13, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[14, "neural-transfer-using-pytorch"]], "Underlying Principle": [[14, "underlying-principle"]], "Importing Packages and Selecting a Device": [[14, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[14, "loading-the-images"]], "Loss Functions": [[14, "loss-functions"], [101, "loss-functions"]], "Content Loss": [[14, "content-loss"]], "Style Loss": [[14, "style-loss"]], "Importing the Model": [[14, "importing-the-model"]], "Gradient Descent": [[14, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[15, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[15, "parameter-less-example"]], "Parametrized example": [[15, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[16, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[16, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[16, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[16, "environment-metadata-env-spec"]], "Specs shape": [[16, "specs-shape"]], "Reproducible experiments: seeding": [[16, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[16, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[16, "testing-our-environment"]], "Transforming an environment": [[16, "transforming-an-environment"]], "Writing custom transforms": [[16, "writing-custom-transforms"]], "Executing a rollout": [[16, "executing-a-rollout"]], "Batching computations": [[16, "batching-computations"]], "Training a simple policy": [[16, "training-a-simple-policy"]], "Training loop": [[16, "training-loop"], [151, "training-loop"], [177, "training-loop"], [178, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[17, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[17, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[17, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[17, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[17, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[17, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[17, "other-modules"]], "How to Improve User Experience with Privateuse1": [[17, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[17, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[17, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[17, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[18, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[18, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[18, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[18, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[18, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[19, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[20, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[20, "what-problem-does-semi-structured-sparsity-solve"], [234, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[20, "intro-setup"], [234, "intro-setup"]], "Establishing a baseline": [[20, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[20, "pruning-bert-to-be-2-4-sparse"], [234, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[20, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[21, "computation-times"], [44, "computation-times"], [53, "computation-times"], [75, "computation-times"], [79, "computation-times"], [92, "computation-times"], [102, "computation-times"], [112, "computation-times"], [120, "computation-times"], [124, "computation-times"], [184, "computation-times"], [235, "computation-times"], [279, "computation-times"], [290, "computation-times"]], "Exploring TorchRec sharding": [[22, "exploring-torchrec-sharding"]], "Installation": [[22, "installation"], [82, "installation"], [97, "installation"], [256, "installation"], [281, "installation"]], "Distributed Setup": [[22, "distributed-setup"]], "Constructing our embedding model": [[22, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[22, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[22, "multiprocessing-execution"]], "Table Wise Sharding": [[22, "table-wise-sharding"]], "Explore other sharding modes": [[22, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[23, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[23, "model-architecture"]], "2. Helper functions": [[23, "helper-functions"]], "3. Define dataset and data loaders": [[23, "define-dataset-and-data-loaders"]], "ImageNet Data": [[23, "imagenet-data"]], "4. Post-training static quantization": [[23, "post-training-static-quantization"]], "5. Quantization-aware training": [[23, "quantization-aware-training"]], "Speedup from quantization": [[23, "speedup-from-quantization"]], "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime": [[24, "optional-exporting-a-model-from-pytorch-to-onnx-and-running-it-using-onnx-runtime"]], "Timing Comparison Between Models": [[24, "timing-comparison-between-models"]], "Running the model on an image using ONNX Runtime": [[24, "running-the-model-on-an-image-using-onnx-runtime"]], "Dynamic Parallelism in TorchScript": [[25, "dynamic-parallelism-in-torchscript"]], "Basic Syntax": [[25, "basic-syntax"], [237, "basic-syntax"]], "Applied Example: Ensemble of Bidirectional LSTMs": [[25, "applied-example-ensemble-of-bidirectional-lstms"]], "Parallelizing Forward and Backward Layers": [[25, "parallelizing-forward-and-backward-layers"]], "Aside: Visualizing Parallelism": [[25, "aside-visualizing-parallelism"]], "Parallelizing Models in the Ensemble": [[25, "parallelizing-models-in-the-ensemble"]], "Extending TorchScript with Custom C++ Classes": [[26, "extending-torchscript-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[26, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[26, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python and TorchScript": [[26, "using-the-c-class-from-python-and-torchscript"]], "Saving, Loading, and Running TorchScript Code Using Custom Classes": [[26, "saving-loading-and-running-torchscript-code-using-custom-classes"]], "Moving Custom Classes To/From IValues": [[26, "moving-custom-classes-to-from-ivalues"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[26, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[26, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "Extending TorchScript with Custom C++ Operators": [[27, "extending-torchscript-with-custom-c-operators"]], "Implementing the Custom Operator in C++": [[27, "implementing-the-custom-operator-in-c"]], "Registering the Custom Operator with TorchScript": [[27, "registering-the-custom-operator-with-torchscript"]], "Building the Custom Operator": [[27, "building-the-custom-operator"]], "Environment setup": [[27, "environment-setup"]], "Building with CMake": [[27, "building-with-cmake"]], "Using the TorchScript Custom Operator in Python": [[27, "using-the-torchscript-custom-operator-in-python"]], "Using the Custom Operator with Tracing": [[27, "using-the-custom-operator-with-tracing"]], "Using the Custom Operator with Script": [[27, "using-the-custom-operator-with-script"]], "Using the TorchScript Custom Operator in C++": [[27, "using-the-torchscript-custom-operator-in-c"]], "Appendix A: More Ways of Building Custom Operators": [[27, "appendix-a-more-ways-of-building-custom-operators"]], "Building with JIT compilation": [[27, "building-with-jit-compilation"]], "Building with Setuptools": [[27, "building-with-setuptools"]], "Semi-Supervised Learning using USB built upon PyTorch": [[28, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[28, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[28, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[28, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Introduction to TorchScript": [[29, "introduction-to-torchscript"]], "Basics of PyTorch Model Authoring": [[29, "basics-of-pytorch-model-authoring"]], "Basics of TorchScript": [[29, "basics-of-torchscript"]], "Tracing Modules": [[29, "tracing-modules"]], "Using Scripting to Convert Modules": [[29, "using-scripting-to-convert-modules"]], "Mixing Scripting and Tracing": [[29, "mixing-scripting-and-tracing"]], "Saving and Loading models": [[29, "saving-and-loading-models"]], "Further Reading": [[29, "further-reading"], [36, "further-reading"], [37, "further-reading"], [38, "further-reading"], [41, "further-reading"], [46, "further-reading"], [59, "further-reading"], [61, "further-reading"], [62, "further-reading"], [121, "further-reading"], [126, "further-reading"], [146, "further-reading"], [147, "further-reading"], [151, "further-reading"], [200, "further-reading"], [216, "further-reading"], [218, "further-reading"], [219, "further-reading"]], "Audio Data Augmentation": [[30, "audio-data-augmentation"]], "Audio Datasets": [[31, "audio-datasets"]], "Audio Feature Augmentation": [[32, "audio-feature-augmentation"]], "Audio Feature Extractions": [[33, "audio-feature-extractions"]], "Audio I/O": [[34, "audio-i-o"]], "Audio Resampling": [[35, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[36, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[36, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[36, "computing-gradients"]], "Disabling Gradient Tracking": [[36, "disabling-gradient-tracking"]], "More on Computational Graphs": [[36, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[36, "optional-reading-tensor-gradients-and-jacobian-products"]], "Build the Neural Network": [[37, "build-the-neural-network"]], "Get Device for Training": [[37, "get-device-for-training"]], "Define the Class": [[37, "define-the-class"]], "Model Layers": [[37, "model-layers"]], "nn.Flatten": [[37, "nn-flatten"]], "nn.Linear": [[37, "nn-linear"]], "nn.ReLU": [[37, "nn-relu"]], "nn.Sequential": [[37, "nn-sequential"]], "nn.Softmax": [[37, "nn-softmax"]], "Model Parameters": [[37, "model-parameters"]], "Datasets & DataLoaders": [[38, "datasets-dataloaders"]], "Loading a Dataset": [[38, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[38, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[38, "creating-a-custom-dataset-for-your-files"]], "__init__": [[38, "init"]], "__len__": [[38, "len"]], "__getitem__": [[38, "getitem"]], "Preparing your data for training with DataLoaders": [[38, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[38, "iterate-through-the-dataloader"]], "Learn the Basics": [[39, "learn-the-basics"], [40, "learn-the-basics"]], "Running the Tutorial Code": [[40, "running-the-tutorial-code"], [100, "running-the-tutorial-code"]], "How to Use this Guide": [[40, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[41, "optimizing-model-parameters"]], "Prerequisite Code": [[41, "prerequisite-code"]], "Hyperparameters": [[41, "hyperparameters"]], "Optimization Loop": [[41, "optimization-loop"]], "Loss Function": [[41, "loss-function"], [52, "loss-function"], [105, "loss-function"]], "Full Implementation": [[41, "full-implementation"]], "Quickstart": [[42, "quickstart"]], "Working with data": [[42, "working-with-data"]], "Creating Models": [[42, "creating-models"]], "Optimizing the Model Parameters": [[42, "optimizing-the-model-parameters"]], "Saving Models": [[42, "saving-models"]], "Loading Models": [[42, "loading-models"]], "Save and Load the Model": [[43, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[43, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[43, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[43, "related-tutorials"]], "Tensors": [[45, "tensors"], [54, "tensors"], [86, "tensors"], [122, "tensors"], [122, "id1"]], "Initializing a Tensor": [[45, "initializing-a-tensor"]], "Attributes of a Tensor": [[45, "attributes-of-a-tensor"]], "Operations on Tensors": [[45, "operations-on-tensors"]], "Bridge with NumPy": [[45, "bridge-with-numpy"], [54, "bridge-with-numpy"]], "Tensor to NumPy array": [[45, "tensor-to-numpy-array"], [54, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[45, "numpy-array-to-tensor"], [54, "numpy-array-to-tensor"]], "ToTensor()": [[46, "totensor"]], "Lambda Transforms": [[46, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[47, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[48, "a-gentle-introduction-to-torch-autograd"]], "Background": [[48, "background"], [170, "background"]], "Usage in PyTorch": [[48, "usage-in-pytorch"]], "Differentiation in Autograd": [[48, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[48, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[48, "computational-graph"]], "Exclusion from the DAG": [[48, "exclusion-from-the-dag"]], "Further readings:": [[48, "further-readings"]], "Training a Classifier": [[49, "training-a-classifier"]], "What about data?": [[49, "what-about-data"]], "Training an image classifier": [[49, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[49, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[49, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[49, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[49, "train-the-network"]], "5. Test the network on the test data": [[49, "test-the-network-on-the-test-data"]], "Training on GPU": [[49, "training-on-gpu"]], "Training on multiple GPUs": [[49, "training-on-multiple-gpus"]], "Where do I go next?": [[49, "where-do-i-go-next"]], "Optional: Data Parallelism": [[50, "optional-data-parallelism"]], "Imports and parameters": [[50, "imports-and-parameters"]], "Dummy DataSet": [[50, "dummy-dataset"]], "Simple Model": [[50, "simple-model"]], "Create Model and DataParallel": [[50, "create-model-and-dataparallel"]], "Run the Model": [[50, "run-the-model"]], "Results": [[50, "results"], [58, "results"], [80, "results"], [177, "results"]], "2 GPUs": [[50, "gpus"]], "3 GPUs": [[50, "id1"]], "8 GPUs": [[50, "id2"]], "Summary": [[50, "summary"], [135, "summary"], [182, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[51, "deep-learning-with-pytorch-a-60-minute-blitz"], [63, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[52, "neural-networks"]], "Define the network": [[52, "define-the-network"]], "Backprop": [[52, "backprop"]], "Update the weights": [[52, "update-the-weights"]], "Tensor Initialization": [[54, "tensor-initialization"]], "Tensor Attributes": [[54, "tensor-attributes"]], "Tensor Operations": [[54, "tensor-operations"]], "Chatbot Tutorial": [[55, "chatbot-tutorial"]], "Preparations": [[55, "preparations"]], "Load & Preprocess Data": [[55, "load-preprocess-data"]], "Create formatted data file": [[55, "create-formatted-data-file"]], "Load and trim data": [[55, "load-and-trim-data"]], "Prepare Data for Models": [[55, "prepare-data-for-models"]], "Define Models": [[55, "define-models"]], "Seq2Seq Model": [[55, "seq2seq-model"]], "Encoder": [[55, "encoder"]], "Decoder": [[55, "decoder"]], "Define Training Procedure": [[55, "define-training-procedure"]], "Masked loss": [[55, "masked-loss"]], "Single training iteration": [[55, "single-training-iteration"]], "Training iterations": [[55, "training-iterations"]], "Define Evaluation": [[55, "define-evaluation"]], "Greedy decoding": [[55, "greedy-decoding"]], "Evaluate my text": [[55, "evaluate-my-text"]], "Run Model": [[55, "run-model"]], "Run Training": [[55, "run-training"]], "Run Evaluation": [[55, "run-evaluation"]], "Running Tutorials in Google Colab": [[56, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[56, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[56, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[56, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[57, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[57, "dataset-class"]], "Compose transforms": [[57, "compose-transforms"]], "Iterating through the dataset": [[57, "iterating-through-the-dataset"]], "Afterword: torchvision": [[57, "afterword-torchvision"]], "DCGAN Tutorial": [[58, "dcgan-tutorial"]], "Generative Adversarial Networks": [[58, "generative-adversarial-networks"]], "What is a GAN?": [[58, "what-is-a-gan"]], "What is a DCGAN?": [[58, "what-is-a-dcgan"]], "Inputs": [[58, "inputs"], [80, "inputs"]], "Data": [[58, "data"]], "Implementation": [[58, "implementation"], [80, "implementation"]], "Weight Initialization": [[58, "weight-initialization"]], "Generator": [[58, "generator"]], "Discriminator": [[58, "discriminator"]], "Loss Functions and Optimizers": [[58, "loss-functions-and-optimizers"]], "Training": [[58, "training"], [141, "training"], [142, "training"], [178, "training"], [183, "training"], [255, "training"], [255, "id5"]], "Where to Go Next": [[58, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[59, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[59, "why-use-torchrun"]], "Graceful restarts": [[59, "graceful-restarts"]], "Process group initialization": [[59, "process-group-initialization"]], "Use torchrun-provided environment variables": [[59, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[59, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[59, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[59, "resuming-training"]], "Running the script": [[59, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[60, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[60, "running-the-code"]], "Tutorial sections": [[60, "tutorial-sections"]], "Multi GPU training with DDP": [[61, "multi-gpu-training-with-ddp"]], "Imports": [[61, "imports"]], "Constructing the process group": [[61, "constructing-the-process-group"]], "Constructing the DDP model": [[61, "constructing-the-ddp-model"]], "Distributing input data": [[61, "distributing-input-data"]], "Saving model checkpoints": [[61, "saving-model-checkpoints"]], "Running the distributed training job": [[61, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[62, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[62, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[63, "what-is-pytorch"]], "Goal of this tutorial:": [[63, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[64, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[65, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[66, "pytorch-distributed-overview"]], "Parallelism APIs": [[66, "parallelism-apis"]], "Sharding primitives": [[66, "sharding-primitives"]], "Communications APIs": [[66, "communications-apis"]], "Launcher": [[66, "launcher"]], "Applying Parallelism To Scale Your Model": [[66, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[66, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[68, "pytorch-tensors-and-autograd"], [122, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[69, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[70, "pytorch-control-flow-weight-sharing"], [122, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[72, "pytorch-custom-nn-modules"], [122, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[73, "pytorch-nn"], [122, "pytorch-nn"]], "PyTorch: optim": [[74, "pytorch-optim"], [122, "pytorch-optim"]], "Warm-up: numpy": [[77, "warm-up-numpy"], [122, "warm-up-numpy"]], "PyTorch: Tensors": [[78, "pytorch-tensors"], [122, "pytorch-tensors"]], "Adversarial Example Generation": [[80, "adversarial-example-generation"]], "Threat Model": [[80, "threat-model"]], "Fast Gradient Sign Attack": [[80, "fast-gradient-sign-attack"]], "Model Under Attack": [[80, "model-under-attack"]], "FGSM Attack": [[80, "fgsm-attack"]], "Testing Function": [[80, "testing-function"]], "Run Attack": [[80, "run-attack"]], "Accuracy vs Epsilon": [[80, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[80, "sample-adversarial-examples"]], "Where to go next?": [[80, "where-to-go-next"]], "Finetuning Torchvision Models": [[81, "finetuning-torchvision-models"]], "TorchMultimodal Tutorial: Finetuning FLAVA": [[82, "torchmultimodal-tutorial-finetuning-flava"]], "Steps": [[82, "steps"], [126, "steps"], [187, "steps"], [253, "steps"], [267, "steps"], [269, "steps"], [270, "steps"], [273, "steps"], [284, "steps"], [285, "steps"], [286, "steps"], [288, "steps"]], "Autograd": [[83, "autograd"], [122, "autograd"], [122, "id2"]], "nn Package": [[84, "nn-package"]], "Multi-GPU Examples": [[85, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[87, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[88, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[88, "installing-hta"]], "Temporal Breakdown": [[88, "temporal-breakdown"]], "Idle Time Breakdown": [[88, "idle-time-breakdown"]], "Kernel Breakdown": [[88, "kernel-breakdown"]], "Kernel Duration Distribution": [[88, "kernel-duration-distribution"]], "Communication Computation Overlap": [[88, "communication-computation-overlap"]], "Augmented Counters": [[88, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[88, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[88, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[89, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[91, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[91, "hybrid-frontend-information"]], "Motivating Example": [[91, "motivating-example"]], "Part 1 - Tracing a pure python function": [[91, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[91, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[91, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[91, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[91, "top-level-module"]], "Running the Model": [[91, "running-the-model"]], "Tracing the Top-Level Model": [[91, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[93, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[94, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[94, "setup-imports"]], "Data loaders": [[94, "data-loaders"]], "Configurable neural network": [[94, "configurable-neural-network"]], "The train function": [[94, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[94, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[94, "communicating-with-ray-tune"]], "Full training function": [[94, "full-training-function"]], "Test set accuracy": [[94, "test-set-accuracy"]], "Configuring the search space": [[94, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[95, "introduction-to-pytorch-youtube-series"], [100, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[96, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[96, "what-do-we-need-autograd-for"]], "A Simple Example": [[96, "a-simple-example"]], "Autograd in Training": [[96, "autograd-in-training"]], "Turning Autograd Off and On": [[96, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[96, "autograd-and-in-place-operations"]], "Autograd Profiler": [[96, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[96, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[96, "the-high-level-api"]], "Model Understanding with Captum": [[97, "model-understanding-with-captum"]], "A First Example": [[97, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[97, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[97, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[97, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[97, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[98, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[99, "introduction-to-pytorch"], [110, "introduction-to-pytorch"]], "PyTorch Tensors": [[99, "pytorch-tensors"]], "PyTorch Models": [[99, "pytorch-models"]], "Datasets and Dataloaders": [[99, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[99, "training-your-pytorch-model"]], "Building Models with PyTorch": [[101, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[101, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[101, "common-layer-types"]], "Linear Layers": [[101, "linear-layers"]], "Convolutional Layers": [[101, "convolutional-layers"]], "Recurrent Layers": [[101, "recurrent-layers"]], "Transformers": [[101, "transformers"]], "Other Layers and Functions": [[101, "other-layers-and-functions"]], "Data Manipulation Layers": [[101, "data-manipulation-layers"]], "Activation Functions": [[101, "activation-functions"]], "PyTorch TensorBoard Support": [[103, "pytorch-tensorboard-support"]], "Before You Start": [[103, "before-you-start"]], "Showing Images in TensorBoard": [[103, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[103, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[103, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[103, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[103, "other-resources"], [105, "other-resources"]], "Introduction to PyTorch Tensors": [[104, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[104, "creating-tensors"], [110, "creating-tensors"]], "Random Tensors and Seeding": [[104, "random-tensors-and-seeding"]], "Tensor Shapes": [[104, "tensor-shapes"]], "Tensor Data Types": [[104, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[104, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[104, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[104, "more-math-with-tensors"]], "Altering Tensors in Place": [[104, "altering-tensors-in-place"]], "Copying Tensors": [[104, "copying-tensors"]], "Moving to Accelerator": [[104, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[104, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[104, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[104, "numpy-bridge"]], "Training with PyTorch": [[105, "training-with-pytorch"]], "Dataset and DataLoader": [[105, "dataset-and-dataloader"]], "The Model": [[105, "the-model"]], "The Training Loop": [[105, "the-training-loop"]], "Per-Epoch Activity": [[105, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[106, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[106, "loading-cifar-10"]], "Defining model classes and utility functions": [[106, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[106, "cross-entropy-runs"]], "Knowledge distillation run": [[106, "knowledge-distillation-run"]], "Cosine loss minimization run": [[106, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[106, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[107, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[107, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[107, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[107, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[107, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[108, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[108, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[108, "affine-maps"]], "Non-Linearities": [[108, "non-linearities"]], "Softmax and Probabilities": [[108, "softmax-and-probabilities"]], "Objective Functions": [[108, "objective-functions"]], "Optimization and Training": [[108, "optimization-and-training"]], "Creating Network Components in PyTorch": [[108, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[108, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[109, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[110, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[110, "operations-with-tensors"]], "Reshaping Tensors": [[110, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[110, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[111, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[111, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[111, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[111, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[113, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[113, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[113, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[113, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[113, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[114, "what-is-torch-nn-really"]], "MNIST data setup": [[114, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[114, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[114, "using-torch-nn-functional"]], "Refactor using nn.Module": [[114, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[114, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[114, "refactor-using-torch-optim"]], "Refactor using Dataset": [[114, "refactor-using-dataset"]], "Refactor using DataLoader": [[114, "refactor-using-dataloader"]], "Add validation": [[114, "add-validation"]], "Create fit() and get_data()": [[114, "create-fit-and-get-data"]], "Switch to CNN": [[114, "switch-to-cnn"]], "Using nn.Sequential": [[114, "using-nn-sequential"]], "Wrapping DataLoader": [[114, "wrapping-dataloader"]], "Using your Accelerator": [[114, "using-your-accelerator"]], "Closing thoughts": [[114, "closing-thoughts"]], "Export a model with control flow to ONNX": [[115, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[115, "define-the-models"]], "Exporting the Model: First Attempt": [[115, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[115, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[115, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[115, "further-reading"], [116, "further-reading"], [118, "further-reading"], [119, "further-reading"]], "Export a PyTorch model to ONNX": [[116, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[116, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[116, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[116, "export-the-model-to-onnx-format"]], "3.5. (Optional) Optimize the ONNX model": [[116, "optional-optimize-the-onnx-model"]], "4. Save the ONNX model in a file": [[116, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[116, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[116, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[116, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[117, "onnx"]], "Introduction to ONNX": [[118, "introduction-to-onnx"]], "Dependencies": [[118, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[119, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[119, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[119, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[119, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[121, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[121, "performance-debugging-using-profiler"]], "Profile the forward pass": [[121, "profile-the-forward-pass"]], "Print profiler results": [[121, "print-profiler-results"]], "Improve memory performance": [[121, "improve-memory-performance"]], "Improve time performance": [[121, "improve-time-performance"]], "Learning PyTorch with Examples": [[122, "learning-pytorch-with-examples"]], "Table of Contents": [[122, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[122, "pytorch-defining-new-autograd-functions"]], "nn module": [[122, "nn-module"], [122, "id3"]], "Examples": [[122, "examples"], [232, "examples"], [296, "examples"]], "Saving and Loading Models": [[123, "saving-and-loading-models"]], "What is a state_dict?": [[123, "what-is-a-state-dict"]], "Example:": [[123, "example"]], "Saving & Loading Model for Inference": [[123, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[123, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[123, "save-load-entire-model"]], "Saving an Exported Program": [[123, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[123, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[123, "save"], [123, "id1"], [123, "id3"]], "Load:": [[123, "load"], [123, "id2"], [123, "id4"]], "Saving Multiple Models in One File": [[123, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[123, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[123, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[123, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[123, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[123, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[123, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[125, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[126, "template-tutorial"]], "(Optional) Additional Exercises": [[126, "optional-additional-exercises"]], "Text classification with the torchtext library": [[127, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[128, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[129, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[129, "load-data"], [175, "load-data"]], "Visualize a few images": [[129, "visualize-a-few-images"], [175, "visualize-a-few-images"]], "Training the model": [[129, "training-the-model"], [185, "training-the-model"]], "Visualizing the model predictions": [[129, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[129, "finetuning-the-convnet"]], "Train and evaluate": [[129, "train-and-evaluate"], [129, "id1"], [175, "train-and-evaluate"]], "ConvNet as fixed feature extractor": [[129, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[129, "inference-on-custom-images"]], "Further Learning": [[129, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[130, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[131, "language-translation-with-nn-transformer-and-torchtext"]], "Distributed and Parallel Training Tutorials": [[132, "distributed-and-parallel-training-tutorials"]], "Learn DDP": [[132, "learn-ddp"]], "Learn FSDP": [[132, "learn-fsdp"]], "Learn Tensor Parallel (TP)": [[132, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[132, "learn-devicemesh"]], "Learn RPC": [[132, "learn-rpc"]], "Custom Extensions": [[132, "custom-extensions"]], "Welcome to PyTorch Tutorials": [[133, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[133, "additional-resources"], [172, "additional-resources"], [270, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[134, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[134, "how-fsdp-works"]], "How to use FSDP": [[134, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[135, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[135, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[135, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[135, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[135, "transformer-wrapping-policy"]], "Mixed Precision": [[135, "mixed-precision"]], "Intializing FSDP Model on Device": [[135, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[135, "sharding-strategy"]], "Backward Prefetch": [[135, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[135, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[136, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[136, "how-fsdp2-works"]], "How to use FSDP2": [[136, "how-to-use-fsdp2"]], "Model Initialization": [[136, "model-initialization"]], "Forward/Backward with Prefetching": [[136, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[136, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[136, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[136, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[136, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[136, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[137, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[137, "performance-benchmark"]], "Impact": [[137, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[137, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[137, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[137, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[138, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[138, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[138, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[138, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[138, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[138, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[138, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[139, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[139, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[139, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[139, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[139, "saved-tensors-hooks"]], "Some unconventional examples": [[139, "some-unconventional-examples"]], "Returning an int": [[139, "returning-an-int"]], "Returning a tuple": [[139, "returning-a-tuple"]], "Returning a str": [[139, "returning-a-str"]], "Saving tensors to CPU": [[139, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[139, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[140, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[140, "defining-the-torchx-app"]], "Setting up the Runner": [[140, "setting-up-the-runner"]], "Setting up the SearchSpace": [[140, "setting-up-the-searchspace"]], "Setting up Metrics": [[140, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[140, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[140, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[140, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[140, "configuring-the-scheduler"]], "Running the optimization": [[140, "running-the-optimization"]], "Evaluating the results": [[140, "evaluating-the-results"]], "Acknowledgments": [[140, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[141, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[141, "recommended-preparation"]], "Preparing Torch": [[141, "preparing-torch"]], "Preparing the Data": [[141, "preparing-the-data"], [142, "preparing-the-data"]], "Turning Names into Tensors": [[141, "turning-names-into-tensors"]], "Creating the Network": [[141, "creating-the-network"], [142, "creating-the-network"]], "Training the Network": [[141, "training-the-network"], [142, "training-the-network"]], "Plotting the Results": [[141, "plotting-the-results"]], "Evaluating the Results": [[141, "evaluating-the-results"]], "Exercises": [[141, "exercises"], [142, "exercises"], [183, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[142, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[142, "preparing-for-training"]], "Plotting the Losses": [[142, "plotting-the-losses"]], "Sampling the Network": [[142, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[143, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[143, "setup"], [150, "setup"], [151, "setup"], [164, "setup"], [172, "setup"], [187, "setup"], [201, "setup"], [223, "setup"], [223, "id1"], [269, "setup"], [273, "setup"], [284, "setup"], [285, "setup"], [286, "setup"], [288, "setup"], [299, "setup"]], "Basic usage": [[143, "basic-usage"]], "Inspecting the compiled autograd logs": [[143, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[143, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[143, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[143, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[144, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[144, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[144, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[144, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[144, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[144, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[145, "double-backward-with-custom-functions"]], "Saving the Inputs": [[145, "saving-the-inputs"]], "Saving the Outputs": [[145, "saving-the-outputs"]], "Saving Intermediate Results": [[145, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[145, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[145, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[146, "training-real-world-models-with-ddp"]], "Files used for training": [[146, "files-used-for-training"]], "Saving and Loading from the cloud": [[146, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[146, "using-mixed-precision"]], "When is DDP not enough?": [[146, "when-is-ddp-not-enough"]], "Multinode Training": [[147, "multinode-training"]], "Local and Global ranks": [[147, "local-and-global-ranks"]], "Heteregeneous Scaling": [[147, "heteregeneous-scaling"]], "Troubleshooting": [[147, "troubleshooting"], [266, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[148, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[148, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[148, "basic-use-case"]], "Skewed Processing Speeds": [[148, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[148, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[148, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[148, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[149, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[150, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[150, "point-to-point-communication"]], "Collective Communication": [[150, "collective-communication"]], "Distributed Training": [[150, "distributed-training"]], "Our Own Ring-Allreduce": [[150, "our-own-ring-allreduce"]], "Advanced Topics": [[150, "advanced-topics"]], "Communication Backends": [[150, "communication-backends"]], "Initialization Methods": [[150, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[151, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[151, "policy"], [177, "policy"]], "Convolutional network": [[151, "convolutional-network"]], "LSTM Module": [[151, "lstm-module"]], "MLP": [[151, "mlp"]], "Using the Q-Values to select an action": [[151, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[151, "using-the-model-for-the-loss"]], "DQN Loss": [[151, "dqn-loss"]], "Collector and replay buffer": [[151, "collector-and-replay-buffer"]], "(beta) Dynamic Quantization on BERT": [[152, "beta-dynamic-quantization-on-bert"]], "1. Setup": [[152, "setup"]], "1.1 Install PyTorch and HuggingFace Transformers": [[152, "install-pytorch-and-huggingface-transformers"]], "1.2 Import the necessary modules": [[152, "import-the-necessary-modules"]], "1.3 Learn about helper functions": [[152, "learn-about-helper-functions"]], "1.4 Download the dataset": [[152, "download-the-dataset"]], "2. Fine-tune the BERT model": [[152, "fine-tune-the-bert-model"]], "2.1 Set global configurations": [[152, "set-global-configurations"]], "2.2 Load the fine-tuned BERT model": [[152, "load-the-fine-tuned-bert-model"]], "2.3 Define the tokenize and evaluation function": [[152, "define-the-tokenize-and-evaluation-function"]], "3. Apply the dynamic quantization": [[152, "apply-the-dynamic-quantization"]], "3.1 Check the model size": [[152, "check-the-model-size"]], "3.2 Evaluate the inference accuracy and time": [[152, "evaluate-the-inference-accuracy-and-time"]], "3.3 Serialize the quantized model": [[152, "serialize-the-quantized-model"]], "References": [[152, "references"], [223, "references"]], "Model ensembling": [[153, "model-ensembling"]], "What is model ensembling?": [[153, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[153, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[153, "performance"]], "Forced Alignment with Wav2Vec2": [[154, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[155, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[155, "basic-usage"], [191, "basic-usage"], [193, "basic-usage"], [254, "basic-usage"], [295, "basic-usage"]], "Usage with Modules": [[155, "usage-with-modules"]], "Using the functional Module API (beta)": [[155, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[155, "custom-autograd-function"]], "Functional API (beta)": [[155, "functional-api-beta"]], "Using the functional API with Modules": [[155, "using-the-functional-api-with-modules"]], "(beta) Building a Convolution/Batch Norm fuser in FX": [[156, "beta-building-a-convolution-batch-norm-fuser-in-fx"]], "Fusing Convolution with Batch Norm": [[156, "fusing-convolution-with-batch-norm"], [156, "id1"]], "FX Fusion Pass": [[156, "fx-fusion-pass"]], "Testing out our Fusion Pass": [[156, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[156, "benchmarking-our-fusion-on-resnet18"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[157, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[157, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[157, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[157, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[158, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[158, "debugging"]], "Get more logging information": [[158, "get-more-logging-information"]], "Determine component of error": [[158, "determine-component-of-error"]], "Compilation error": [[158, "compilation-error"]], "Accuracy debugging": [[158, "accuracy-debugging"]], "Performance profiling": [[158, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[159, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[159, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[159, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[159, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[159, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[159, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[160, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[160, "rl-definitions"]], "Initialize Environment": [[160, "initialize-environment"]], "Preprocess Environment": [[160, "preprocess-environment"]], "Agent": [[160, "agent"]], "Act": [[160, "act"]], "Cache and Recall": [[160, "cache-and-recall"]], "Learn": [[160, "learn"]], "Neural Network": [[160, "neural-network"]], "TD Estimate & TD Target": [[160, "td-estimate-td-target"]], "Updating the model": [[160, "updating-the-model"]], "Save checkpoint": [[160, "save-checkpoint"]], "Putting it all together": [[160, "putting-it-all-together"]], "Logging": [[160, "logging"]], "Let\u2019s play!": [[160, "lets-play"]], "(beta) Channels Last Memory Format in PyTorch": [[161, "beta-channels-last-memory-format-in-pytorch"]], "What is Channels Last": [[161, "what-is-channels-last"]], "Memory Format API": [[161, "memory-format-api"]], "Performance Gains": [[161, "performance-gains"]], "Converting existing models": [[161, "converting-existing-models"]], "Work to do": [[161, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[163, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[164, "neural-tangent-kernels"]], "Create a function version of the model": [[164, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[164, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[164, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[165, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[166, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[167, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[167, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[167, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[167, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[167, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[167, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[168, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[168, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[168, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[168, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[168, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[168, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[168, "concatenating-parametrizations"]], "Initializing parametrizations": [[168, "initializing-parametrizations"]], "Removing parametrizations": [[168, "removing-parametrizations"]], "Per-sample-gradients": [[169, "per-sample-gradients"]], "What is it?": [[169, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[169, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[169, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[170, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[170, "what-you-will-learn"], [203, "what-you-will-learn"], [297, "what-you-will-learn"]], "Preamble": [[170, "preamble"]], "Memory management basics": [[170, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[170, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[170, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[170, "a-pytorch-perspective"]], "pin_memory()": [[170, "pin-memory"]], "non_blocking=True": [[170, "non-blocking-true"]], "Synergies": [[170, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[170, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[170, "practical-recommendations"]], "Additional considerations": [[170, "additional-considerations"]], "Additional resources": [[170, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[171, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[172, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[172, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[172, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[172, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[173, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[173, "basics"], [179, "basics"]], "Step 1: Implement a Subclass of Backend": [[173, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[173, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[173, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[173, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[174, "pruning-tutorial"]], "Create a model": [[174, "create-a-model"]], "Inspect a Module": [[174, "inspect-a-module"]], "Pruning a Module": [[174, "pruning-a-module"]], "Iterative Pruning": [[174, "iterative-pruning"]], "Serializing a pruned model": [[174, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[174, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[174, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[174, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[174, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "(beta) Quantized Transfer Learning for Computer Vision Tutorial": [[175, "beta-quantized-transfer-learning-for-computer-vision-tutorial"]], "Part 0. Prerequisites": [[175, "part-0-prerequisites"]], "Installing the Nightly Build": [[175, "installing-the-nightly-build"]], "Support Function for Model Training": [[175, "support-function-for-model-training"]], "Support Function for Visualizing the Model Predictions": [[175, "support-function-for-visualizing-the-model-predictions"]], "Part 1. Training a Custom Classifier based on a Quantized Feature Extractor": [[175, "part-1-training-a-custom-classifier-based-on-a-quantized-feature-extractor"]], "Part 2. Finetuning the Quantizable Model": [[175, "part-2-finetuning-the-quantizable-model"]], "Finetuning the model": [[175, "finetuning-the-model"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[176, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[176, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[176, "installing-pytorch-and-opencv"]], "Video Capture": [[176, "video-capture"]], "Image Preprocessing": [[176, "image-preprocessing"]], "Model Choices": [[176, "model-choices"]], "MobileNetV2: Quantization and JIT": [[176, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[176, "putting-it-together"]], "Troubleshooting: Performance": [[176, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[177, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[177, "define-hyperparameters"]], "Data collection parameters": [[177, "data-collection-parameters"]], "PPO parameters": [[177, "ppo-parameters"]], "Define an environment": [[177, "define-an-environment"]], "Normalization": [[177, "normalization"]], "Value network": [[177, "value-network"]], "Loss function": [[177, "loss-function"]], "Conclusion and next steps": [[177, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[178, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[178, "replay-memory"]], "DQN algorithm": [[178, "dqn-algorithm"]], "Q-network": [[178, "q-network"]], "Hyperparameters and utilities": [[178, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[179, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[179, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[179, "batch-processing-cartpole-solver"]], "Learn More": [[179, "learn-more"], [187, "learn-more"], [253, "learn-more"], [264, "learn-more"], [267, "learn-more"], [269, "learn-more"], [270, "learn-more"], [273, "learn-more"], [281, "learn-more"], [284, "learn-more"], [285, "learn-more"], [286, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[180, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[181, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[181, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[181, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[182, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[182, "fused-implementations"]], "Explicit Dispatcher Control": [[182, "explicit-dispatcher-control"]], "Hardware dependence": [[182, "hardware-dependence"]], "Causal Self Attention": [[182, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[182, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[182, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[182, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[183, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[183, "loading-data-files"]], "The Seq2Seq Model": [[183, "the-seq2seq-model"]], "The Encoder": [[183, "the-encoder"]], "The Decoder": [[183, "the-decoder"]], "Simple Decoder": [[183, "simple-decoder"]], "Attention Decoder": [[183, "attention-decoder"]], "Preparing Training Data": [[183, "preparing-training-data"]], "Training the Model": [[183, "training-the-model"]], "Plotting results": [[183, "plotting-results"]], "Evaluation": [[183, "evaluation"]], "Training and Evaluating": [[183, "training-and-evaluating"]], "Visualizing Attention": [[183, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[185, "spatial-transformer-networks-tutorial"]], "Loading the data": [[185, "loading-the-data"]], "Depicting spatial transformer networks": [[185, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[185, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[186, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[187, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[187, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[187, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[187, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[187, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[187, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[187, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[187, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[188, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[188, "tensorboard-setup"]], "2. Writing to TensorBoard": [[188, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[188, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[188, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[188, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[188, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[189, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[190, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[190, "setting-up-the-environment"]], "Importing related libraries": [[190, "importing-related-libraries"]], "Clean-up before a run": [[190, "clean-up-before-a-run"]], "Downloading the data": [[190, "downloading-the-data"]], "Reading the data": [[190, "reading-the-data"]], "Classify image patches": [[190, "classify-image-patches"]], "Define PatchPredictor model": [[190, "define-patchpredictor-model"]], "Predict patch labels": [[190, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[190, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[190, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[190, "where-to-go-from-here"]], "Introduction to torch.compile": [[191, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[191, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[191, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[191, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[191, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[191, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[192, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[193, "torch-export-tutorial"]], "Graph Breaks": [[193, "graph-breaks"]], "Non-Strict Export": [[193, "non-strict-export"]], "Control Flow Ops": [[193, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[193, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[193, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[193, "specialization"]], "Named Dims": [[193, "named-dims"]], "Constraint violations, suggested fixes": [[193, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[193, "data-dependent-errors"]], "Guards, torch._check()": [[193, "guards-torch-check"]], "Specialized values": [[193, "specialized-values"]], "Custom Ops": [[193, "custom-ops"]], "IR/Decompositions": [[193, "ir-decompositions"]], "ExportDB": [[193, "exportdb"]], "Running the Exported Program": [[193, "running-the-exported-program"]], "Introduction to TorchRec": [[194, "introduction-to-torchrec"], [195, "introduction-to-torchrec"]], "Install Dependencies": [[194, "install-dependencies"]], "Embeddings": [[194, "embeddings"]], "Embeddings in RecSys": [[194, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[194, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[194, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[194, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[194, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[194, "distributed-training-and-sharding"]], "Distributed Embeddings": [[194, "distributed-embeddings"]], "Sharding": [[194, "sharding"]], "Sharded Modules": [[194, "sharded-modules"]], "Planner": [[194, "planner"]], "Planner Result": [[194, "planner-result"]], "GPU Training with LazyAwaitable": [[194, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[194, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[194, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[194, "distributedmodelparallel"]], "Sharding Best Practices": [[194, "sharding-best-practices"]], "Adding in the Optimizer": [[194, "adding-in-the-optimizer"]], "Optimizer Classes": [[194, "optimizer-classes"]], "Fused optimizer in TorchRec": [[194, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[194, "adding-an-optimizer-to-embeddingbagcollection"]], "Inference": [[194, "inference"]], "Quantization": [[194, "quantization"]], "Shard": [[194, "shard"]], "Compilation": [[194, "compilation"]], "Grokking PyTorch Intel CPU performance from first principles": [[196, "grokking-pytorch-intel-cpu-performance-from-first-principles"]], "Avoid logical cores for deep learning": [[196, "avoid-logical-cores-for-deep-learning"]], "Local memory access is always faster than remote memory access": [[196, "local-memory-access-is-always-faster-than-remote-memory-access"]], "Efficient CPU usage with core pinning for multi-worker inference": [[196, "efficient-cpu-usage-with-core-pinning-for-multi-worker-inference"]], "1. Default TorchServe setting (no core pinning)": [[196, "default-torchserve-setting-no-core-pinning"]], "2. torch.set_num_threads = number of physical cores / number of workers (no core pinning)": [[196, "torch-set-num-threads-number-of-physical-cores-number-of-workers-no-core-pinning"]], "3. launcher core pinning": [[196, "launcher-core-pinning"]], "Acknowledgement": [[196, "acknowledgement"], [197, "acknowledgement"]], "Grokking PyTorch Intel CPU performance from first principles (Part 2)": [[197, "grokking-pytorch-intel-cpu-performance-from-first-principles-part-2"]], "Top-down Microarchitecture Analysis Method (TMA)": [[197, "top-down-microarchitecture-analysis-method-tma"]], "Tune for the Back End Bound": [[197, "tune-for-the-back-end-bound"]], "Intel\u00ae VTune\u2122 Profiler\u2019s Instrumentation and Tracing Technology (ITT)": [[197, "intel-vtune-profiler-s-instrumentation-and-tracing-technology-itt"]], "TorchServe with Intel\u00ae Extension for PyTorch*": [[197, "torchserve-with-intel-extension-for-pytorch"]], "Leveraging Advanced Launcher Configuration: Memory Allocator": [[197, "leveraging-advanced-launcher-configuration-memory-allocator"]], "TCMalloc, JeMalloc, PTMalloc": [[197, "tcmalloc-jemalloc-ptmalloc"]], "Exercise": [[197, "exercise"], [197, "id2"], [197, "id3"], [197, "id4"]], "Exercise with TorchServe": [[197, "exercise-with-torchserve"], [197, "id5"]], "Intel\u00ae Extension for PyTorch*": [[197, "id1"], [255, "intel-extension-for-pytorch"]], "Operator Optimization": [[197, "operator-optimization"]], "Graph Optimization": [[197, "graph-optimization"]], "Channels Last Memory Format": [[197, "channels-last-memory-format"]], "Performance Boost with Intel\u00ae Extension for PyTorch*": [[197, "performance-boost-with-intel-extension-for-pytorch"]], "Related Readings": [[197, "related-readings"]], "TorchVision Object Detection Finetuning Tutorial": [[198, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[198, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[198, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[198, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[198, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[198, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[198, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[198, "putting-everything-together"]], "Testing forward() method (Optional)": [[198, "testing-forward-method-optional"]], "Wrapping up": [[198, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[199, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[199, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[199, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[199, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[199, "multiheadattention"]], "Utilities": [[199, "utilities"]], "GPT-style layer": [[199, "gpt-style-layer"]], "Going one step further": [[199, "going-one-step-further"]], "Cross Attention": [[199, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[199, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[199, "flexattention-njt"]], "Packed Projection": [[199, "packed-projection"]], "Input projection for MultiheadAttention": [[199, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[199, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[199, "extended-examples"]], "(prototype) PyTorch BackendConfig Tutorial": [[200, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[200, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[200, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[200, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[200, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[200, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[200, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[200, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[200, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[201, "introduction-to-context-parallel"]], "Enable Context Parallel": [[201, "enable-context-parallel"]], "Select Rotation Approach": [[201, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[202, "profiling-pytorch-rpc-based-workloads"], [251, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[203, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[203, "enabling-flight-recorder"]], "Additional Settings": [[203, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[203, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[203, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[203, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[203, "an-end-to-end-example"]], "(prototype) FX Graph Mode Post Training Dynamic Quantization": [[204, "prototype-fx-graph-mode-post-training-dynamic-quantization"]], "1. Define the Model, Download Data and Model": [[204, "define-the-model-download-data-and-model"]], "2. Post Training Dynamic Quantization": [[204, "post-training-dynamic-quantization"], [264, "post-training-dynamic-quantization"]], "3. Conclusion": [[204, "conclusion"]], "(prototype) FX Graph Mode Post Training Static Quantization": [[205, "prototype-fx-graph-mode-post-training-static-quantization"]], "1. Motivation of FX Graph Mode Quantization": [[205, "motivation-of-fx-graph-mode-quantization"]], "2. Define Helper Functions and Prepare Dataset": [[205, "define-helper-functions-and-prepare-dataset"]], "3. Set model to eval mode": [[205, "set-model-to-eval-mode"]], "4. Specify how to quantize the model with QConfigMapping": [[205, "specify-how-to-quantize-the-model-with-qconfigmapping"]], "5. Prepare the Model for Post Training Static Quantization": [[205, "prepare-the-model-for-post-training-static-quantization"]], "6. Calibration": [[205, "calibration"]], "7. Convert the Model to a Quantized Model": [[205, "convert-the-model-to-a-quantized-model"]], "8. Evaluation": [[205, "evaluation"]], "9. Debugging Quantized Model": [[205, "debugging-quantized-model"]], "10. Comparison with Baseline Float Model and Eager Mode Quantization": [[205, "comparison-with-baseline-float-model-and-eager-mode-quantization"]], "(prototype) FX Graph Mode Quantization User Guide": [[206, "prototype-fx-graph-mode-quantization-user-guide"]], "Symbolically trace only the code that needs to be quantized": [[206, "symbolically-trace-only-the-code-that-needs-to-be-quantized"]], "Skip symbolically trace the non-traceable code": [[206, "skip-symbolically-trace-the-non-traceable-code"]], "Refactor your code to make it symbolically traceable": [[206, "refactor-your-code-to-make-it-symbolically-traceable"]], "Write your own observed and quantized submodule": [[206, "write-your-own-observed-and-quantized-submodule"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[207, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[207, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[208, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[208, "set-up-your-environment"]], "(prototype) Graph Mode Dynamic Quantization on BERT": [[209, "prototype-graph-mode-dynamic-quantization-on-bert"]], "1. Quantizing BERT Model": [[209, "quantizing-bert-model"]], "1.1 Setup": [[209, "setup"]], "1.2 Download GLUE dataset": [[209, "download-glue-dataset"]], "1.3 Set global BERT configurations": [[209, "set-global-bert-configurations"]], "1.4 Quantizing BERT model with Graph Mode Quantization": [[209, "quantizing-bert-model-with-graph-mode-quantization"]], "1.4.1 Script/Trace the model": [[209, "script-trace-the-model"]], "1.4.2 Specify qconfig_dict": [[209, "specify-qconfig-dict"]], "1.4.3 Quantize the model (one-line API)": [[209, "quantize-the-model-one-line-api"]], "2. Evaluation": [[209, "evaluation"]], "2.1 Check Model Size": [[209, "check-model-size"]], "2.2 Run the evaluation": [[209, "run-the-evaluation"]], "3. Debugging the Quantized Model": [[209, "debugging-the-quantized-model"]], "3.1. Evaluate the Debug Model": [[209, "evaluate-the-debug-model"]], "4. Comparing Results with Eager Mode": [[209, "comparing-results-with-eager-mode"]], "5. Benchmarking the Model": [[209, "benchmarking-the-model"]], "Inductor C++ Wrapper Tutorial": [[210, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[210, "prerequisites"], [220, "prerequisites"], [231, "prerequisites"]], "Enabling the API": [[210, "enabling-the-api"]], "Example code": [[210, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[211, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[211, "software-installation"]], "Install a Compiler": [[211, "install-a-compiler"]], "Set Up Environment": [[211, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[211, "id1"]], "Intel Compiler": [[211, "id2"]], "LLVM Compiler": [[211, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[213, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[214, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[215, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[216, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[216, "introduction-and-motivation"]], "Preparation": [[216, "preparation"], [217, "preparation"], [218, "preparation"]], "Simpler Code with MaskedTensor": [[216, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[216, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[216, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[217, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[217, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[217, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[218, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[218, "using-maskedtensor"]], "Construction": [[218, "construction"]], "Accessing the data and mask": [[218, "accessing-the-data-and-mask"]], "Indexing and slicing": [[218, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[218, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[218, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[218, "torch-where"]], "Another torch.where": [[218, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[218, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[218, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[218, "safe-softmax"]], "Implementing missing torch.nan* operators": [[218, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[219, "prototype-maskedtensor-sparsity"]], "Principles": [[219, "principles"]], "Sparse COO tensors": [[219, "sparse-coo-tensors"]], "Sparse CSR tensors": [[219, "sparse-csr-tensors"]], "Supported Operations": [[219, "supported-operations"]], "Unary": [[219, "unary"]], "Binary": [[219, "binary"]], "Reductions": [[219, "reductions"]], "MaskedTensor Helper Methods": [[219, "maskedtensor-helper-methods"]], "Appendix": [[219, "appendix"]], "Sparse COO Construction": [[219, "sparse-coo-construction"]], "Sparse CSR Construction": [[219, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[220, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[220, "activating-the-max-autotune-mode"]], "Example": [[220, "example"]], "Getting Started with Nested Tensors": [[221, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[221, "nested-tensor-initialization"]], "Nested Tensor Operations": [[221, "nested-tensor-operations"]], "Why Nested Tensor": [[221, "why-nested-tensor"]], "See Also": [[221, "see-also"], [243, "see-also"], [295, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[222, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch Numeric Suite Tutorial": [[223, "pytorch-numeric-suite-tutorial"]], "Numeric Suite for Static Quantization": [[223, "numeric-suite-for-static-quantization"]], "1. Compare the weights of float and quantized models": [[223, "compare-the-weights-of-float-and-quantized-models"], [223, "id2"]], "2. Compare float point and quantized models at corresponding locations": [[223, "compare-float-point-and-quantized-models-at-corresponding-locations"], [223, "id3"]], "3. Compare a module in a quantized model with its float point equivalent, with the same input data": [[223, "compare-a-module-in-a-quantized-model-with-its-float-point-equivalent-with-the-same-input-data"], [223, "id4"]], "Numeric Suite for Dynamic Quantization": [[223, "numeric-suite-for-dynamic-quantization"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[224, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[224, "post-training-quantization"], [229, "post-training-quantization"], [230, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[224, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[224, "capture-fx-graph"], [229, "capture-fx-graph"], [230, "capture-fx-graph"]], "2. Apply Quantization": [[224, "apply-quantization"], [229, "apply-quantization"], [230, "apply-quantization"]], "3. Lower into OpenVINO representation": [[224, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[224, "optional-improve-quantized-model-metrics"]], "PyTorch Prototype Recipes": [[225, "pytorch-prototype-recipes"]], "(prototype) PyTorch 2 Export Post Training Quantization": [[226, "prototype-pytorch-2-export-post-training-quantization"]], "Motivation of PyTorch 2 Export Quantization": [[226, "motivation-of-pytorch-2-export-quantization"]], "Define Helper Functions and Prepare Dataset": [[226, "define-helper-functions-and-prepare-dataset"]], "Set the model to eval mode": [[226, "set-the-model-to-eval-mode"]], "Export the model with torch.export": [[226, "export-the-model-with-torch-export"], [228, "export-the-model-with-torch-export"]], "Import the Backend Specific Quantizer and Configure how to Quantize the Model": [[226, "import-the-backend-specific-quantizer-and-configure-how-to-quantize-the-model"], [228, "import-the-backend-specific-quantizer-and-configure-how-to-quantize-the-model"]], "Prepare the Model for Post Training Quantization": [[226, "prepare-the-model-for-post-training-quantization"]], "Calibration": [[226, "calibration"]], "Convert the Calibrated Model to a Quantized Model": [[226, "convert-the-calibrated-model-to-a-quantized-model"]], "Checking Model Size and Accuracy Evaluation": [[226, "checking-model-size-and-accuracy-evaluation"]], "Save and Load Quantized Model": [[226, "save-and-load-quantized-model"]], "Debugging the Quantized Model": [[226, "debugging-the-quantized-model"]], "Lowering and Performance Evaluation": [[226, "lowering-and-performance-evaluation"]], "Quantization in PyTorch 2.0 Export Tutorial": [[227, "quantization-in-pytorch-2-0-export-tutorial"], [233, "quantization-in-pytorch-2-0-export-tutorial"]], "(prototype) PyTorch 2 Export Quantization-Aware Training (QAT)": [[228, "prototype-pytorch-2-export-quantization-aware-training-qat"]], "Define Helper Functions and Prepare the Dataset": [[228, "define-helper-functions-and-prepare-the-dataset"]], "Prepare the Model for Quantization-Aware Training": [[228, "prepare-the-model-for-quantization-aware-training"]], "Training Loop": [[228, "training-loop"]], "Saving and Loading Model Checkpoints": [[228, "saving-and-loading-model-checkpoints"]], "Convert the Trained Model to a Quantized Model": [[228, "convert-the-trained-model-to-a-quantized-model"]], "PyTorch 2 Export Quantization with X86 Backend through Inductor": [[229, "pytorch-2-export-quantization-with-x86-backend-through-inductor"]], "3. Lower into Inductor": [[229, "lower-into-inductor"], [230, "lower-into-inductor"]], "Quantization Aware Training": [[229, "quantization-aware-training"]], "PyTorch 2 Export Quantization with Intel GPU Backend through Inductor": [[230, "pytorch-2-export-quantization-with-intel-gpu-backend-through-inductor"]], "How to Write a Quantizer for PyTorch 2 Export Quantization": [[231, "how-to-write-a-quantizer-for-pytorch-2-export-quantization"]], "Annotation API": [[231, "annotation-api"]], "1. Annotate Common Operator Patterns": [[231, "annotate-common-operator-patterns"]], "2. Annotate Operators that Shares Quantization Params": [[231, "annotate-operators-that-shares-quantization-params"]], "3. Annotate Operators with Fixed Quantization Parameters": [[231, "annotate-operators-with-fixed-quantization-parameters"]], "4. Annotate Tensors with Derived Quantization Parameters": [[231, "annotate-tensors-with-derived-quantization-parameters"]], "5. A Toy Example with Resnet18": [[231, "a-toy-example-with-resnet18"]], "A Note on IR for PT2E Quantization Flow": [[231, "a-note-on-ir-for-pt2e-quantization-flow"]], "Motivation: Problem of Matching aten IR directly": [[231, "motivation-problem-of-matching-aten-ir-directly"]], "Recommendation: Use SubgraphMatcherWithNameNodeMap for pattern matching": [[231, "recommendation-use-subgraphmatcherwithnamenodemap-for-pattern-matching"]], "Autoloading Out-of-Tree Extension": [[232, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[232, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[232, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[234, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[234, "id1"]], "Skipping Module Parameter Initialization": [[236, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[236, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[236, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[236, "implementation-details"]], "Model Freezing in TorchScript": [[237, "model-freezing-in-torchscript"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[238, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[239, "torch-vmap"]], "So, what is vmap?": [[239, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[240, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[240, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[240, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[240, "desktop-build"]], "Vulkan SDK": [[240, "vulkan-sdk"]], "Android build": [[240, "android-build"]], "Model preparation": [[240, "model-preparation"]], "Using Vulkan backend in code": [[240, "using-vulkan-backend-in-code"]], "C++ API": [[240, "c-api"]], "Python API": [[240, "python-api"]], "Android Java API": [[240, "android-java-api"]], "Building android test app with Vulkan": [[240, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[240, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[241, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[241, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[241, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[241, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[241, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[242, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[243, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[243, "model-setup"], [244, "model-setup"], [252, "model-setup"]], "Setting up and running the optimizer benchmark": [[243, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[244, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[244, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[244, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[245, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[245, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[245, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[246, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[246, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[246, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[247, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[247, "how-dcp-works"]], "How to use DCP": [[247, "how-to-use-dcp"]], "Saving": [[247, "saving"]], "Loading": [[247, "loading"]], "Formats": [[247, "formats"]], "Getting Started with CommDebugMode": [[248, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[248, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[248, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[249, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[249, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[249, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[249, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[249, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Distributed Optimizer with TorchScript support": [[250, "distributed-optimizer-with-torchscript-support"]], "What is Distributed Optimizer?": [[250, "what-is-distributed-optimizer"]], "What is Distributed Optimizer with TorchScript support?": [[250, "what-is-distributed-optimizer-with-torchscript-support"]], "How to write a customized distributed optimizer with TorchScript support?": [[250, "how-to-write-a-customized-distributed-optimizer-with-torchscript-support"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[252, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[252, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[252, "setting-up-and-running-the-compiled-kernel"]], "Fuse Modules Recipe": [[253, "fuse-modules-recipe"]], "Pre-requisites": [[253, "pre-requisites"], [264, "pre-requisites"]], "1. Define the Example Model": [[253, "define-the-example-model"]], "2. Generate Two Models with and without fuse_modules": [[253, "generate-two-models-with-and-without-fuse-modules"]], "3. Build the Android benchmark Tool": [[253, "build-the-android-benchmark-tool"]], "4. Test Compare the Fused and Non-Fused Models": [[253, "test-compare-the-fused-and-non-fused-models"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[254, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[254, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[254, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[254, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[254, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Features": [[255, "features"], [256, "features"]], "Examples \u2013 CPU": [[255, "examples-cpu"]], "Float32": [[255, "float32"], [255, "id1"], [255, "id3"], [255, "id6"], [255, "id9"], [255, "id12"]], "BFloat16": [[255, "bfloat16"], [255, "id2"], [255, "id4"], [255, "id7"], [255, "id10"], [255, "id13"]], "Inference - Imperative Mode": [[255, "inference-imperative-mode"], [255, "id8"]], "Inference - TorchScript Mode": [[255, "inference-torchscript-mode"], [255, "id11"]], "Examples \u2013 GPU": [[255, "examples-gpu"]], "Float16": [[255, "float16"], [255, "id14"]], "C++ (CPU only)": [[255, "c-cpu-only"]], "Model Zoo (CPU only)": [[255, "model-zoo-cpu-only"]], "Tutorials": [[255, "tutorials"], [256, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[256, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[256, "usages"]], "Model": [[256, "model"]], "Accuracy driven quantization": [[256, "accuracy-driven-quantization"]], "Quantization aware training": [[256, "quantization-aware-training"]], "Performance only quantization": [[256, "performance-only-quantization"]], "Quantization outputs": [[256, "quantization-outputs"]], "Deployment": [[256, "deployment"]], "Loading data in PyTorch": [[257, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[258, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[259, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[260, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[261, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[262, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[262, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[262, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[262, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[262, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[262, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[262, "configure-profiling-for-xpu"]], "Read Profiling Result": [[262, "read-profiling-result"]], "Read XPU Profiling Result": [[262, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[262, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[263, "summary-of-pytorch-mobile-recipes"]], "Quantization Recipe": [[264, "quantization-recipe"]], "Workflows": [[264, "workflows"]], "1. Use Pretrained Quantized MobileNet v2": [[264, "use-pretrained-quantized-mobilenet-v2"]], "3. Post Training Static Quantization": [[264, "post-training-static-quantization"]], "4. Quantization Aware Training": [[264, "quantization-aware-training"]], "Model Interpretability using Captum": [[265, "model-interpretability-using-captum"]], "Before you begin": [[265, "before-you-begin"]], "Computing Attribution": [[265, "computing-attribution"]], "Visualizing the Results": [[265, "visualizing-the-results"]], "Final Notes": [[265, "final-notes"]], "Automatic Mixed Precision": [[266, "automatic-mixed-precision"]], "A simple network": [[266, "a-simple-network"]], "Default Precision": [[266, "default-precision"]], "Adding torch.autocast": [[266, "adding-torch-autocast"]], "Adding GradScaler": [[266, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[266, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[266, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[266, "saving-resuming"]], "Inference/Evaluation": [[266, "inference-evaluation"]], "Advanced topics": [[266, "advanced-topics"]], "Speedup with Amp is minor": [[266, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[266, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[266, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[267, "syntaxerror"]], "1. Defining functions to benchmark": [[267, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[267, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[267, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[267, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[267, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[267, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[267, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[267, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[268, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[269, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[269, "import-necessary-libraries-for-loading-our-data"], [284, "import-necessary-libraries-for-loading-our-data"], [285, "import-necessary-libraries-for-loading-our-data"], [286, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[269, "define-and-initialize-the-neural-network"], [285, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[269, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[269, "optional-pass-data-through-your-model-to-test"]], "Dynamic Quantization": [[270, "dynamic-quantization"]], "What is dynamic quantization?": [[270, "what-is-dynamic-quantization"]], "1: Set Up": [[270, "set-up"]], "2: Do the Quantization": [[270, "do-the-quantization"]], "3. Look at Model Size": [[270, "look-at-model-size"]], "4. Look at Latency": [[270, "look-at-latency"]], "5: Look at Accuracy": [[270, "look-at-accuracy"]], "PyTorch Recipes": [[271, "pytorch-recipes"], [287, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[272, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[272, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[272, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[272, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[273, "pytorch-profiler"]], "1. Import all necessary libraries": [[273, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[273, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[273, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[273, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[273, "using-tracing-functionality"]], "6. Examining stack traces": [[273, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[273, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[274, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[275, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[276, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[277, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[278, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[280, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[280, "torch-utils-swap-tensors"]], "Application to nn.Module": [[280, "application-to-nn-module"]], "nn.Module.to() and related methods": [[280, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[280, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[281, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[281, "using-tensorboard-in-pytorch"]], "Log scalars": [[281, "log-scalars"]], "Run TensorBoard": [[281, "run-tensorboard"]], "Timer quick start": [[282, "timer-quick-start"]], "1. Defining a Timer": [[282, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[282, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[282, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[282, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[282, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[282, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[282, "wrapping-up"]], "8. Footnotes": [[282, "footnotes"]], "Performance Tuning Guide": [[283, "performance-tuning-guide"]], "General optimizations": [[283, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[283, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[283, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[283, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[283, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[283, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[283, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[283, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[283, "disable-debugging-apis"]], "CPU specific optimizations": [[283, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[283, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[283, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[283, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[283, "switch-memory-allocator"]], "Use oneDNN Graph with TorchScript for inference": [[283, "use-onednn-graph-with-torchscript-for-inference"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[283, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[283, "gpu-specific-optimizations"]], "Enable Tensor cores": [[283, "enable-tensor-cores"]], "Use CUDA Graphs": [[283, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[283, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[283, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[283, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[283, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[283, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[283, "distributed-optimizations"]], "Use efficient data-parallel backend": [[283, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[283, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[283, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[283, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[284, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[284, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[284, "save-model-a"]], "4. Load into model B": [[284, "load-into-model-b"]], "What is a state_dict in PyTorch": [[285, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[285, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[285, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[286, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[286, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[286, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[286, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[286, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[288, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[289, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[291, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[291, "usage-example"]], "Train FP32": [[291, "train-fp32"]], "Train BF16": [[291, "train-bf16"]], "Inference FP32": [[291, "inference-fp32"]], "Inference BF16": [[291, "inference-bf16"]], "Compile Time Caching Configuration": [[292, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[292, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[292, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[292, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[292, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[292, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[292, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[292, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[292, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[293, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[293, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[293, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[293, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[293, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[294, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[294, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[295, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[295, "advanced-usage"]], "Composability": [[295, "composability"]], "Wrapping Triton kernels with triton_op": [[295, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[295, "adding-training-support"]], "Adding a CPU Fallback": [[295, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[295, "adding-a-flopcounter-formula"]], "Limitations": [[295, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[296, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[296, "description"]], "Preventing recompilation": [[296, "preventing-recompilation"]], "Measuring performance gains": [[296, "measuring-performance-gains"]], "Crashing sooner": [[296, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[297, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[297, "model-compilation"]], "Model Inference in Python": [[297, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[297, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[298, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[298, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[298, "video-classification"]], "Error: Static batch size": [[298, "error-static-batch-size"]], "Solution": [[298, "solution"], [298, "id1"], [298, "id2"], [298, "id3"]], "Automatic Speech Recognition": [[298, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[298, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[298, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[298, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[298, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[298, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[299, "beta-using-torch-logs-python-api-with-torch-compile"]], "TorchScript for Deployment": [[300, "torchscript-for-deployment"]], "What is TorchScript?": [[300, "what-is-torchscript"]], "How to Export Your Model": [[300, "how-to-export-your-model"]], "Loading TorchScript Models in C++": [[300, "loading-torchscript-models-in-c"]], "Building and Running Your C++ Inference Engine": [[300, "building-and-running-your-c-inference-engine"]], "Important Resources": [[300, "important-resources"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[301, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[301, "what-you-will-learn"]], "Introduction of the Optimizations": [[301, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[301, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[301, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[301, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[301, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[301, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[301, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[302, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[302, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[302, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})