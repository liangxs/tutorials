Search.setIndex({"docnames": ["advanced/ONNXLive", "advanced/coding_ddpg", "advanced/cpp_autograd", "advanced/cpp_cuda_graphs", "advanced/cpp_custom_ops", "advanced/cpp_export", "advanced/cpp_extension", "advanced/cpp_frontend", "advanced/custom_ops_landing_page", "advanced/ddp_pipeline", "advanced/dispatcher", "advanced/extend_dispatcher", "advanced/generic_join", "advanced/neural_style_tutorial", "advanced/numpy_extensions_tutorial", "advanced/pendulum", "advanced/privateuseone", "advanced/python_custom_ops", "advanced/rpc_ddp_tutorial", "advanced/semi_structured_sparse", "advanced/sg_execution_times", "advanced/sharding", "advanced/static_quantization_tutorial", "advanced/super_resolution_with_onnxruntime", "advanced/torch-script-parallelism", "advanced/torch_script_custom_classes", "advanced/torch_script_custom_ops", "advanced/usb_semisup_learn", "beginner/Intro_to_TorchScript_tutorial", "beginner/audio_data_augmentation_tutorial", "beginner/audio_datasets_tutorial", "beginner/audio_feature_augmentation_tutorial", "beginner/audio_feature_extractions_tutorial", "beginner/audio_io_tutorial", "beginner/audio_resampling_tutorial", "beginner/basics/autogradqs_tutorial", "beginner/basics/buildmodel_tutorial", "beginner/basics/data_tutorial", "beginner/basics/index", "beginner/basics/intro", "beginner/basics/optimization_tutorial", "beginner/basics/quickstart_tutorial", "beginner/basics/saveloadrun_tutorial", "beginner/basics/sg_execution_times", "beginner/basics/tensorqs_tutorial", "beginner/basics/transforms_tutorial", "beginner/bettertransformer_tutorial", "beginner/blitz/autograd_tutorial", "beginner/blitz/cifar10_tutorial", "beginner/blitz/data_parallel_tutorial", "beginner/blitz/index", "beginner/blitz/neural_networks_tutorial", "beginner/blitz/sg_execution_times", "beginner/blitz/tensor_tutorial", "beginner/chatbot_tutorial", "beginner/colab", "beginner/data_loading_tutorial", "beginner/dcgan_faces_tutorial", "beginner/ddp_series_fault_tolerance", "beginner/ddp_series_intro", "beginner/ddp_series_multigpu", "beginner/ddp_series_theory", "beginner/deep_learning_60min_blitz", "beginner/deeplabv3_on_android", "beginner/deeplabv3_on_ios", "beginner/dist_overview", "beginner/examples_autograd/index", "beginner/examples_autograd/polynomial_autograd", "beginner/examples_autograd/polynomial_custom_function", "beginner/examples_autograd/sg_execution_times", "beginner/examples_nn/dynamic_net", "beginner/examples_nn/index", "beginner/examples_nn/polynomial_module", "beginner/examples_nn/polynomial_nn", "beginner/examples_nn/polynomial_optim", "beginner/examples_nn/sg_execution_times", "beginner/examples_tensor/index", "beginner/examples_tensor/polynomial_numpy", "beginner/examples_tensor/polynomial_tensor", "beginner/examples_tensor/sg_execution_times", "beginner/fgsm_tutorial", "beginner/finetuning_torchvision_models_tutorial", "beginner/former_torchies/autograd_tutorial_old", "beginner/former_torchies/nnft_tutorial", "beginner/former_torchies/parallelism_tutorial", "beginner/former_torchies/tensor_tutorial_old", "beginner/former_torchies_tutorial", "beginner/hta_intro_tutorial", "beginner/hta_trace_diff_tutorial", "beginner/hybrid_frontend/index", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial", "beginner/hybrid_frontend/sg_execution_times", "beginner/hybrid_frontend_tutorial", "beginner/hyperparameter_tuning_tutorial", "beginner/introyt", "beginner/introyt/autogradyt_tutorial", "beginner/introyt/captumyt", "beginner/introyt/index", "beginner/introyt/introyt1_tutorial", "beginner/introyt/introyt_index", "beginner/introyt/modelsyt_tutorial", "beginner/introyt/sg_execution_times", "beginner/introyt/tensorboardyt_tutorial", "beginner/introyt/tensors_deeper_tutorial", "beginner/introyt/trainingyt", "beginner/knowledge_distillation_tutorial", "beginner/nlp/advanced_tutorial", "beginner/nlp/deep_learning_tutorial", "beginner/nlp/index", "beginner/nlp/pytorch_tutorial", "beginner/nlp/sequence_models_tutorial", "beginner/nlp/sg_execution_times", "beginner/nlp/word_embeddings_tutorial", "beginner/nn_tutorial", "beginner/onnx/export_control_flow_model_to_onnx_tutorial", "beginner/onnx/export_simple_model_to_onnx_tutorial", "beginner/onnx/index", "beginner/onnx/intro_onnx", "beginner/onnx/onnx_registry_tutorial", "beginner/onnx/sg_execution_times", "beginner/profiler", "beginner/pytorch_with_examples", "beginner/saving_loading_models", "beginner/sg_execution_times", "beginner/t5_tutoria", "beginner/template_tutorial", "beginner/text_sentiment_ngrams_tutorial", "beginner/torchtext_custom_dataset_tutorial", "beginner/transfer_learning_tutorial", "beginner/transformer_tutorial", "beginner/translation_transformer", "distributed/home", "index", "intermediate/FSDP1_tutorial", "intermediate/FSDP_advanced_tutorial", "intermediate/FSDP_tutorial", "intermediate/TCPStore_libuv_backend", "intermediate/TP_tutorial", "intermediate/autograd_saved_tensors_hooks_tutorial", "intermediate/ax_multiobjective_nas_tutorial", "intermediate/char_rnn_classification_tutorial", "intermediate/char_rnn_generation_tutorial", "intermediate/compiled_autograd_tutorial", "intermediate/custom_function_conv_bn_tutorial", "intermediate/custom_function_double_backward_tutorial", "intermediate/ddp_series_minGPT", "intermediate/ddp_series_multinode", "intermediate/ddp_tutorial", "intermediate/dist_pipeline_parallel_tutorial", "intermediate/dist_tuto", "intermediate/dqn_with_rnn_tutorial", "intermediate/ensembling", "intermediate/forced_alignment_with_torchaudio_tutorial", "intermediate/forward_ad_usage", "intermediate/fx_conv_bn_fuser", "intermediate/fx_profiling_tutorial", "intermediate/inductor_debug_cpu", "intermediate/jacobians_hessians", "intermediate/mario_rl_tutorial", "intermediate/memory_format_tutorial", "intermediate/mnist_train_nas", "intermediate/model_parallel_tutorial", "intermediate/neural_tangent_kernels", "intermediate/nlp_from_scratch_index", "intermediate/nvfuser_intro_tutorial", "intermediate/optimizer_step_in_backward_tutorial", "intermediate/parametrizations", "intermediate/per_sample_grads", "intermediate/pinmem_nonblock", "intermediate/pipeline_tutorial", "intermediate/pipelining_tutorial", "intermediate/process_group_cpp_extension_tutorial", "intermediate/pruning_tutorial", "intermediate/realtime_rpi", "intermediate/reinforcement_ppo", "intermediate/reinforcement_q_learning", "intermediate/rpc_async_execution", "intermediate/rpc_param_server_tutorial", "intermediate/rpc_tutorial", "intermediate/scaled_dot_product_attention_tutorial", "intermediate/seq2seq_translation_tutorial", "intermediate/sg_execution_times", "intermediate/spatial_transformer_tutorial", "intermediate/speech_recognition_pipeline_tutorial", "intermediate/tensorboard_profiler_tutorial", "intermediate/tensorboard_tutorial", "intermediate/text_to_speech_with_torchaudio", "intermediate/tiatoolbox_tutorial", "intermediate/torch_compile_tutorial", "intermediate/torch_export_nightly_tutorial", "intermediate/torch_export_tutorial", "intermediate/torchrec_intro_tutorial", "intermediate/torchrec_tutorial", "intermediate/torchvision_tutorial", "intermediate/transformer_building_blocks", "prototype/backend_config_tutorial", "prototype/context_parallel", "prototype/distributed_rpc_profiling", "prototype/flight_recorder_tutorial", "prototype/gpu_direct_storage", "prototype/gpu_quantization_torchao_tutorial", "prototype/inductor_cpp_wrapper_tutorial", "prototype/inductor_windows", "prototype/inductor_windows_cpu", "prototype/ios_coreml_workflow", "prototype/ios_gpu_workflow", "prototype/lite_interpreter", "prototype/maskedtensor_adagrad", "prototype/maskedtensor_advanced_semantics", "prototype/maskedtensor_overview", "prototype/maskedtensor_sparsity", "prototype/max_autotune_on_CPU_tutorial", "prototype/nestedtensor", "prototype/nnapi_mobilenetv2", "prototype/openvino_quantizer", "prototype/prototype_index", "prototype/python_extension_autoload", "prototype/semi_structured_sparse", "prototype/sg_execution_times", "prototype/skip_param_init", "prototype/torchscript_freezing", "prototype/tracing_based_selective_build", "prototype/vmap_recipe", "prototype/vulkan_workflow", "recipes/amx", "recipes/android_native_app_with_custom_op", "recipes/compiling_optimizer", "recipes/compiling_optimizer_lr_scheduler", "recipes/cuda_rpc", "recipes/distributed_async_checkpoint_recipe", "recipes/distributed_checkpoint_recipe", "recipes/distributed_comm_debug_mode", "recipes/distributed_device_mesh", "recipes/distributed_optim_torchscript", "recipes/distributed_rpc_profiling", "recipes/foreach_map", "recipes/inference_tuning_on_aws_graviton", "recipes/intel_extension_for_pytorch", "recipes/intel_neural_compressor_for_pytorch", "recipes/loading_data_recipe", "recipes/mobile_interpreter", "recipes/mobile_perf", "recipes/model_preparation_android", "recipes/model_preparation_ios", "recipes/profile_with_itt", "recipes/ptmobile_recipes_summary", "recipes/recipes/Captum_Recipe", "recipes/recipes/amp_recipe", "recipes/recipes/benchmark", "recipes/recipes/changing_default_device", "recipes/recipes/defining_a_neural_network", "recipes/recipes/index", "recipes/recipes/module_load_state_dict_tips", "recipes/recipes/profiler_recipe", "recipes/recipes/reasoning_about_shapes", "recipes/recipes/save_load_across_devices", "recipes/recipes/saving_and_loading_a_general_checkpoint", "recipes/recipes/saving_and_loading_models_for_inference", "recipes/recipes/saving_multiple_models_in_one_file", "recipes/recipes/sg_execution_times", "recipes/recipes/swap_tensors", "recipes/recipes/tensorboard_with_pytorch", "recipes/recipes/timer_quick_start", "recipes/recipes/tuning_guide", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model", "recipes/recipes/what_is_state_dict", "recipes/recipes/zeroing_out_gradients", "recipes/recipes_index", "recipes/regional_compilation", "recipes/script_optimized", "recipes/sg_execution_times", "recipes/torch_compile_backend_ipex", "recipes/torch_compile_caching_configuration_tutorial", "recipes/torch_compile_caching_tutorial", "recipes/torch_compile_torch_function_modes", "recipes/torch_compile_user_defined_triton_kernel_tutorial", "recipes/torch_compiler_set_stance_tutorial", "recipes/torch_export_aoti_python", "recipes/torch_export_challenges_solutions", "recipes/torch_logs", "recipes/torchscript_inference", "recipes/xeon_run_cpu", "recipes/zero_redundancy_optimizer", "sg_execution_times"], "filenames": ["advanced/ONNXLive.rst", "advanced/coding_ddpg.rst", "advanced/cpp_autograd.rst", "advanced/cpp_cuda_graphs.rst", "advanced/cpp_custom_ops.rst", "advanced/cpp_export.rst", "advanced/cpp_extension.rst", "advanced/cpp_frontend.rst", "advanced/custom_ops_landing_page.rst", "advanced/ddp_pipeline.rst", "advanced/dispatcher.rst", "advanced/extend_dispatcher.rst", "advanced/generic_join.rst", "advanced/neural_style_tutorial.rst", "advanced/numpy_extensions_tutorial.rst", "advanced/pendulum.rst", "advanced/privateuseone.rst", "advanced/python_custom_ops.rst", "advanced/rpc_ddp_tutorial.rst", "advanced/semi_structured_sparse.rst", "advanced/sg_execution_times.rst", "advanced/sharding.rst", "advanced/static_quantization_tutorial.rst", "advanced/super_resolution_with_onnxruntime.rst", "advanced/torch-script-parallelism.rst", "advanced/torch_script_custom_classes.rst", "advanced/torch_script_custom_ops.rst", "advanced/usb_semisup_learn.rst", "beginner/Intro_to_TorchScript_tutorial.rst", "beginner/audio_data_augmentation_tutorial.rst", "beginner/audio_datasets_tutorial.rst", "beginner/audio_feature_augmentation_tutorial.rst", "beginner/audio_feature_extractions_tutorial.rst", "beginner/audio_io_tutorial.rst", "beginner/audio_resampling_tutorial.rst", "beginner/basics/autogradqs_tutorial.rst", "beginner/basics/buildmodel_tutorial.rst", "beginner/basics/data_tutorial.rst", "beginner/basics/index.rst", "beginner/basics/intro.rst", "beginner/basics/optimization_tutorial.rst", "beginner/basics/quickstart_tutorial.rst", "beginner/basics/saveloadrun_tutorial.rst", "beginner/basics/sg_execution_times.rst", "beginner/basics/tensorqs_tutorial.rst", "beginner/basics/transforms_tutorial.rst", "beginner/bettertransformer_tutorial.rst", "beginner/blitz/autograd_tutorial.rst", "beginner/blitz/cifar10_tutorial.rst", "beginner/blitz/data_parallel_tutorial.rst", "beginner/blitz/index.rst", "beginner/blitz/neural_networks_tutorial.rst", "beginner/blitz/sg_execution_times.rst", "beginner/blitz/tensor_tutorial.rst", "beginner/chatbot_tutorial.rst", "beginner/colab.rst", "beginner/data_loading_tutorial.rst", "beginner/dcgan_faces_tutorial.rst", "beginner/ddp_series_fault_tolerance.rst", "beginner/ddp_series_intro.rst", "beginner/ddp_series_multigpu.rst", "beginner/ddp_series_theory.rst", "beginner/deep_learning_60min_blitz.rst", "beginner/deeplabv3_on_android.rst", "beginner/deeplabv3_on_ios.rst", "beginner/dist_overview.rst", "beginner/examples_autograd/index.rst", "beginner/examples_autograd/polynomial_autograd.rst", "beginner/examples_autograd/polynomial_custom_function.rst", "beginner/examples_autograd/sg_execution_times.rst", "beginner/examples_nn/dynamic_net.rst", "beginner/examples_nn/index.rst", "beginner/examples_nn/polynomial_module.rst", "beginner/examples_nn/polynomial_nn.rst", "beginner/examples_nn/polynomial_optim.rst", "beginner/examples_nn/sg_execution_times.rst", "beginner/examples_tensor/index.rst", "beginner/examples_tensor/polynomial_numpy.rst", "beginner/examples_tensor/polynomial_tensor.rst", "beginner/examples_tensor/sg_execution_times.rst", "beginner/fgsm_tutorial.rst", "beginner/finetuning_torchvision_models_tutorial.rst", "beginner/former_torchies/autograd_tutorial_old.rst", "beginner/former_torchies/nnft_tutorial.rst", "beginner/former_torchies/parallelism_tutorial.rst", "beginner/former_torchies/tensor_tutorial_old.rst", "beginner/former_torchies_tutorial.rst", "beginner/hta_intro_tutorial.rst", "beginner/hta_trace_diff_tutorial.rst", "beginner/hybrid_frontend/index.rst", "beginner/hybrid_frontend/learning_hybrid_frontend_through_example_tutorial.rst", "beginner/hybrid_frontend/sg_execution_times.rst", "beginner/hybrid_frontend_tutorial.rst", "beginner/hyperparameter_tuning_tutorial.rst", "beginner/introyt.rst", "beginner/introyt/autogradyt_tutorial.rst", "beginner/introyt/captumyt.rst", "beginner/introyt/index.rst", "beginner/introyt/introyt1_tutorial.rst", "beginner/introyt/introyt_index.rst", "beginner/introyt/modelsyt_tutorial.rst", "beginner/introyt/sg_execution_times.rst", "beginner/introyt/tensorboardyt_tutorial.rst", "beginner/introyt/tensors_deeper_tutorial.rst", "beginner/introyt/trainingyt.rst", "beginner/knowledge_distillation_tutorial.rst", "beginner/nlp/advanced_tutorial.rst", "beginner/nlp/deep_learning_tutorial.rst", "beginner/nlp/index.rst", "beginner/nlp/pytorch_tutorial.rst", "beginner/nlp/sequence_models_tutorial.rst", "beginner/nlp/sg_execution_times.rst", "beginner/nlp/word_embeddings_tutorial.rst", "beginner/nn_tutorial.rst", "beginner/onnx/export_control_flow_model_to_onnx_tutorial.rst", "beginner/onnx/export_simple_model_to_onnx_tutorial.rst", "beginner/onnx/index.rst", "beginner/onnx/intro_onnx.rst", "beginner/onnx/onnx_registry_tutorial.rst", "beginner/onnx/sg_execution_times.rst", "beginner/profiler.rst", "beginner/pytorch_with_examples.rst", "beginner/saving_loading_models.rst", "beginner/sg_execution_times.rst", "beginner/t5_tutoria.rst", "beginner/template_tutorial.rst", "beginner/text_sentiment_ngrams_tutorial.rst", "beginner/torchtext_custom_dataset_tutorial.rst", "beginner/transfer_learning_tutorial.rst", "beginner/transformer_tutorial.rst", "beginner/translation_transformer.rst", "distributed/home.rst", "index.rst", "intermediate/FSDP1_tutorial.rst", "intermediate/FSDP_advanced_tutorial.rst", "intermediate/FSDP_tutorial.rst", "intermediate/TCPStore_libuv_backend.rst", "intermediate/TP_tutorial.rst", "intermediate/autograd_saved_tensors_hooks_tutorial.rst", "intermediate/ax_multiobjective_nas_tutorial.rst", "intermediate/char_rnn_classification_tutorial.rst", "intermediate/char_rnn_generation_tutorial.rst", "intermediate/compiled_autograd_tutorial.rst", "intermediate/custom_function_conv_bn_tutorial.rst", "intermediate/custom_function_double_backward_tutorial.rst", "intermediate/ddp_series_minGPT.rst", "intermediate/ddp_series_multinode.rst", "intermediate/ddp_tutorial.rst", "intermediate/dist_pipeline_parallel_tutorial.rst", "intermediate/dist_tuto.rst", "intermediate/dqn_with_rnn_tutorial.rst", "intermediate/ensembling.rst", "intermediate/forced_alignment_with_torchaudio_tutorial.rst", "intermediate/forward_ad_usage.rst", "intermediate/fx_conv_bn_fuser.rst", "intermediate/fx_profiling_tutorial.rst", "intermediate/inductor_debug_cpu.rst", "intermediate/jacobians_hessians.rst", "intermediate/mario_rl_tutorial.rst", "intermediate/memory_format_tutorial.rst", "intermediate/mnist_train_nas.rst", "intermediate/model_parallel_tutorial.rst", "intermediate/neural_tangent_kernels.rst", "intermediate/nlp_from_scratch_index.rst", "intermediate/nvfuser_intro_tutorial.rst", "intermediate/optimizer_step_in_backward_tutorial.rst", "intermediate/parametrizations.rst", "intermediate/per_sample_grads.rst", "intermediate/pinmem_nonblock.rst", "intermediate/pipeline_tutorial.rst", "intermediate/pipelining_tutorial.rst", "intermediate/process_group_cpp_extension_tutorial.rst", "intermediate/pruning_tutorial.rst", "intermediate/realtime_rpi.rst", "intermediate/reinforcement_ppo.rst", "intermediate/reinforcement_q_learning.rst", "intermediate/rpc_async_execution.rst", "intermediate/rpc_param_server_tutorial.rst", "intermediate/rpc_tutorial.rst", "intermediate/scaled_dot_product_attention_tutorial.rst", "intermediate/seq2seq_translation_tutorial.rst", "intermediate/sg_execution_times.rst", "intermediate/spatial_transformer_tutorial.rst", "intermediate/speech_recognition_pipeline_tutorial.rst", "intermediate/tensorboard_profiler_tutorial.rst", "intermediate/tensorboard_tutorial.rst", "intermediate/text_to_speech_with_torchaudio.rst", "intermediate/tiatoolbox_tutorial.rst", "intermediate/torch_compile_tutorial.rst", "intermediate/torch_export_nightly_tutorial.rst", "intermediate/torch_export_tutorial.rst", "intermediate/torchrec_intro_tutorial.rst", "intermediate/torchrec_tutorial.rst", "intermediate/torchvision_tutorial.rst", "intermediate/transformer_building_blocks.rst", "prototype/backend_config_tutorial.rst", "prototype/context_parallel.rst", "prototype/distributed_rpc_profiling.rst", "prototype/flight_recorder_tutorial.rst", "prototype/gpu_direct_storage.rst", "prototype/gpu_quantization_torchao_tutorial.rst", "prototype/inductor_cpp_wrapper_tutorial.rst", "prototype/inductor_windows.rst", "prototype/inductor_windows_cpu.rst", "prototype/ios_coreml_workflow.rst", "prototype/ios_gpu_workflow.rst", "prototype/lite_interpreter.rst", "prototype/maskedtensor_adagrad.rst", "prototype/maskedtensor_advanced_semantics.rst", "prototype/maskedtensor_overview.rst", "prototype/maskedtensor_sparsity.rst", "prototype/max_autotune_on_CPU_tutorial.rst", "prototype/nestedtensor.rst", "prototype/nnapi_mobilenetv2.rst", "prototype/openvino_quantizer.rst", "prototype/prototype_index.rst", "prototype/python_extension_autoload.rst", "prototype/semi_structured_sparse.rst", "prototype/sg_execution_times.rst", "prototype/skip_param_init.rst", "prototype/torchscript_freezing.rst", "prototype/tracing_based_selective_build.rst", "prototype/vmap_recipe.rst", "prototype/vulkan_workflow.rst", "recipes/amx.rst", "recipes/android_native_app_with_custom_op.rst", "recipes/compiling_optimizer.rst", "recipes/compiling_optimizer_lr_scheduler.rst", "recipes/cuda_rpc.rst", "recipes/distributed_async_checkpoint_recipe.rst", "recipes/distributed_checkpoint_recipe.rst", "recipes/distributed_comm_debug_mode.rst", "recipes/distributed_device_mesh.rst", "recipes/distributed_optim_torchscript.rst", "recipes/distributed_rpc_profiling.rst", "recipes/foreach_map.rst", "recipes/inference_tuning_on_aws_graviton.rst", "recipes/intel_extension_for_pytorch.rst", "recipes/intel_neural_compressor_for_pytorch.rst", "recipes/loading_data_recipe.rst", "recipes/mobile_interpreter.rst", "recipes/mobile_perf.rst", "recipes/model_preparation_android.rst", "recipes/model_preparation_ios.rst", "recipes/profile_with_itt.rst", "recipes/ptmobile_recipes_summary.rst", "recipes/recipes/Captum_Recipe.rst", "recipes/recipes/amp_recipe.rst", "recipes/recipes/benchmark.rst", "recipes/recipes/changing_default_device.rst", "recipes/recipes/defining_a_neural_network.rst", "recipes/recipes/index.rst", "recipes/recipes/module_load_state_dict_tips.rst", "recipes/recipes/profiler_recipe.rst", "recipes/recipes/reasoning_about_shapes.rst", "recipes/recipes/save_load_across_devices.rst", "recipes/recipes/saving_and_loading_a_general_checkpoint.rst", "recipes/recipes/saving_and_loading_models_for_inference.rst", "recipes/recipes/saving_multiple_models_in_one_file.rst", "recipes/recipes/sg_execution_times.rst", "recipes/recipes/swap_tensors.rst", "recipes/recipes/tensorboard_with_pytorch.rst", "recipes/recipes/timer_quick_start.rst", "recipes/recipes/tuning_guide.rst", "recipes/recipes/warmstarting_model_using_parameters_from_a_different_model.rst", "recipes/recipes/what_is_state_dict.rst", "recipes/recipes/zeroing_out_gradients.rst", "recipes/recipes_index.rst", "recipes/regional_compilation.rst", "recipes/script_optimized.rst", "recipes/sg_execution_times.rst", "recipes/torch_compile_backend_ipex.rst", "recipes/torch_compile_caching_configuration_tutorial.rst", "recipes/torch_compile_caching_tutorial.rst", "recipes/torch_compile_torch_function_modes.rst", "recipes/torch_compile_user_defined_triton_kernel_tutorial.rst", "recipes/torch_compiler_set_stance_tutorial.rst", "recipes/torch_export_aoti_python.rst", "recipes/torch_export_challenges_solutions.rst", "recipes/torch_logs.rst", "recipes/torchscript_inference.rst", "recipes/xeon_run_cpu.rst", "recipes/zero_redundancy_optimizer.rst", "sg_execution_times.rst"], "titles": ["ONNX Live Tutorial", "TorchRL objectives: Coding a DDPG loss", "Autograd in C++ Frontend", "Using CUDA Graphs in PyTorch C++ API", "Custom C++ and CUDA Operators", "Loading a TorchScript Model in C++", "Custom C++ and CUDA Extensions", "Using the PyTorch C++ Frontend", "PyTorch Custom Operators", "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism", "Registering a Dispatched Operator in C++", "Extending dispatcher for a new backend in C++", "Distributed Training with Uneven Inputs Using the Join Context Manager", "Neural Transfer Using PyTorch", "Creating Extensions Using NumPy and SciPy", "Pendulum: Writing your environment and transforms with TorchRL", "Facilitating New Backend Integration by PrivateUse1", "Custom Python Operators", "Combining Distributed DataParallel with Distributed RPC Framework", "(beta) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Exploring TorchRec sharding", "(beta) Static Quantization with Eager Mode in PyTorch", "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime", "Dynamic Parallelism in TorchScript", "Extending TorchScript with Custom C++ Classes", "Extending TorchScript with Custom C++ Operators", "Semi-Supervised Learning using USB built upon PyTorch", "Introduction to TorchScript", "Audio Data Augmentation", "Audio Datasets", "Audio Feature Augmentation", "Audio Feature Extractions", "Audio I/O", "Audio Resampling", "Automatic Differentiation with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Build the Neural Network", "Datasets &amp; DataLoaders", "Learn the Basics", "Learn the Basics", "Optimizing Model Parameters", "Quickstart", "Save and Load the Model", "Computation times", "Tensors", "Transforms", "Fast Transformer Inference with Better Transformer", "A Gentle Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.autograd</span></code>", "Training a Classifier", "Optional: Data Parallelism", "Deep Learning with PyTorch: A 60 Minute Blitz", "Neural Networks", "Computation times", "Tensors", "Chatbot Tutorial", "Running Tutorials in Google Colab", "Writing Custom Datasets, DataLoaders and Transforms", "DCGAN Tutorial", "Fault-tolerant Distributed Training with <code class=\"docutils literal notranslate\"><span class=\"pre\">torchrun</span></code>", "Distributed Data Parallel in PyTorch - Video Tutorials", "Multi GPU training with DDP", "What is Distributed Data Parallel (DDP)", "Deep Learning with PyTorch: A 60 Minute Blitz", "Image Segmentation DeepLabV3 on Android", "Image Segmentation DeepLabV3 on iOS", "PyTorch Distributed Overview", "&lt;no title&gt;", "PyTorch: Tensors and autograd", "PyTorch: Defining New autograd Functions", "Computation times", "PyTorch: Control Flow + Weight Sharing", "&lt;no title&gt;", "PyTorch: Custom nn Modules", "PyTorch: nn", "PyTorch: optim", "Computation times", "&lt;no title&gt;", "Warm-up: numpy", "PyTorch: Tensors", "Computation times", "Adversarial Example Generation", "Finetuning Torchvision Models", "Autograd", "nn Package", "Multi-GPU Examples", "Tensors", "PyTorch for Former Torch Users", "Introduction to Holistic Trace Analysis", "Trace Diff using Holistic Trace Analysis", "&lt;no title&gt;", "Learning Hybrid Frontend Syntax Through Example", "Computation times", "Hybrid Frontend Tutorials", "Hyperparameter tuning with Ray Tune", "Introduction to PyTorch - YouTube Series", "The Fundamentals of Autograd", "Model Understanding with Captum", "Introduction to PyTorch on YouTube", "Introduction to PyTorch", "Introduction to PyTorch - YouTube Series", "Building Models with PyTorch", "Computation times", "PyTorch TensorBoard Support", "Introduction to PyTorch Tensors", "Training with PyTorch", "Knowledge Distillation Tutorial", "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF", "Deep Learning with PyTorch", "Deep Learning for NLP with Pytorch", "Introduction to PyTorch", "Sequence Models and Long Short-Term Memory Networks", "Computation times", "Word Embeddings: Encoding Lexical Semantics", "What is <cite>torch.nn</cite> <em>really</em>?", "Export a model with control flow to ONNX", "Export a PyTorch model to ONNX", "ONNX", "Introduction to ONNX", "Extending the ONNX Exporter Operator Support", "Computation times", "Profiling your PyTorch Module", "Learning PyTorch with Examples", "Saving and Loading Models", "Computation times", "T5-Base Model for Summarization, Sentiment Classification, and Translation", "Template Tutorial", "Text classification with the torchtext library", "Preprocess custom text dataset using torchtext", "Transfer Learning for Computer Vision Tutorial", "Language Modeling with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Language Translation with <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> and torchtext", "Distributed and Parallel Training Tutorials", "Welcome to PyTorch Tutorials", "Getting Started with Fully Sharded Data Parallel(FSDP)", "Advanced Model Training with Fully Sharded Data Parallel (FSDP)", "Getting Started with Fully Sharded Data Parallel (FSDP2)", "Introduction to Libuv TCPStore Backend", "Large Scale Transformer model training with Tensor Parallel (TP)", "Hooks for autograd saved tensors", "Multi-Objective NAS with Ax", "NLP From Scratch: Classifying Names with a Character-Level RNN", "NLP From Scratch: Generating Names with a Character-Level RNN", "Compiled Autograd: Capturing a larger backward graph for <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Fusing Convolution and Batch Norm using Custom Function", "Double Backward with Custom Functions", "Training \u201creal-world\u201d models with DDP", "Multinode Training", "Getting Started with Distributed Data Parallel", "Distributed Pipeline Parallelism Using RPC", "Writing Distributed Applications with PyTorch", "Recurrent DQN: Training recurrent policies", "Model ensembling", "Forced Alignment with Wav2Vec2", "Forward-mode Automatic Differentiation (Beta)", "(beta) Building a Convolution/Batch Norm fuser in FX", "(beta) Building a Simple CPU Performance Profiler with FX", "Inductor CPU backend debugging and profiling", "Jacobians, Hessians, hvp, vhp, and more: composing function transforms", "Train a Mario-playing RL Agent", "Channels Last Memory Format in PyTorch", "&lt;no title&gt;", "Single-Machine Model Parallel Best Practices", "Neural Tangent Kernels", "NLP from Scratch", "Getting Started - Accelerate Your Scripts with nvFuser", "How to save memory by fusing the optimizer step into the backward pass", "Parametrizations Tutorial", "Per-sample-gradients", "A guide on good usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">non_blocking</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pin_memory()</span></code> in PyTorch", "Training Transformer models using Pipeline Parallelism", "Introduction to Distributed Pipeline Parallelism", "Customize Process Group Backends Using Cpp Extensions", "Pruning Tutorial", "Real Time Inference on Raspberry Pi 4 (30 fps!)", "Reinforcement Learning (PPO) with TorchRL Tutorial", "Reinforcement Learning (DQN) Tutorial", "Implementing Batch RPC Processing Using Asynchronous Executions", "Implementing a Parameter Server Using Distributed RPC Framework", "Getting Started with Distributed RPC Framework", "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)", "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention", "Computation times", "Spatial Transformer Networks Tutorial", "Speech Recognition with Wav2Vec2", "PyTorch Profiler With TensorBoard", "Visualizing Models, Data, and Training with TensorBoard", "Text-to-speech with Tacotron2", "Whole Slide Image Classification Using PyTorch and TIAToolbox", "Introduction to <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "torch.export Nightly Tutorial", "torch.export Tutorial", "Introduction to TorchRec", "Introduction to TorchRec", "TorchVision Object Detection Finetuning Tutorial", "Accelerating PyTorch Transformers by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Transformer</span></code> with Nested Tensors and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile()</span></code>", "(prototype) PyTorch BackendConfig Tutorial", "Introduction to Context Parallel", "Profiling PyTorch RPC-Based Workloads", "(prototype) Flight Recorder for Debugging Stuck Jobs", "(prototype) Accelerating <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.load</span></code> with GPUDirect Storage", "(prototype) GPU Quantization with TorchAO", "Inductor C++ Wrapper Tutorial", "How to use <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code> on Windows CPU/XPU", "&lt;no title&gt;", "(Prototype) Convert Mobilenetv2 to Core ML", "(Prototype) Use iOS GPU in PyTorch", "(Prototype) Introduce lite interpreter workflow in Android and iOS", "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor", "(Prototype) MaskedTensor Advanced Semantics", "(Prototype) MaskedTensor Overview", "(Prototype) MaskedTensor Sparsity", "Using Max-Autotune Compilation on CPU for Better Performance", "Getting Started with Nested Tensors", "(Beta) Convert MobileNetV2 to NNAPI", "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend", "PyTorch Prototype Recipes", "Autoloading Out-of-Tree Extension", "(prototype) Accelerating BERT with semi-structured (2:4) sparsity", "Computation times", "Skipping Module Parameter Initialization", "Model Freezing in TorchScript", "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS", "torch.vmap", "PyTorch Vulkan Backend User Workflow", "Leverage Intel\u00ae Advanced Matrix Extensions", "Making Native Android Application that uses PyTorch prebuilt libraries", "(beta) Compiling the optimizer with torch.compile", "(beta) Running the compiled optimizer with an LR Scheduler", "Direct Device-to-Device Communication with TensorPipe CUDA RPC", "Asynchronous Saving with Distributed Checkpoint (DCP)", "Getting Started with Distributed Checkpoint (DCP)", "Getting Started with <code class=\"docutils literal notranslate\"><span class=\"pre\">CommDebugMode</span></code>", "Getting Started with DeviceMesh", "Distributed Optimizer with TorchScript support", "Profiling PyTorch RPC-Based Workloads", "Explicit horizontal fusion with foreach_map and torch.compile", "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors", "Intel\u00ae Extension for PyTorch*", "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor", "Loading data in PyTorch", "(beta) Efficient mobile interpreter in Android and iOS", "Pytorch Mobile Performance Recipes", "Model Preparation for Android Recipe", "Model Preparation for iOS Recipe", "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API", "Summary of PyTorch Mobile Recipes", "Model Interpretability using Captum", "Automatic Mixed Precision", "SyntaxError", "Changing default device", "Defining a Neural Network in PyTorch", "PyTorch Recipes", "Tips for Loading an <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> from a Checkpoint", "PyTorch Profiler", "Reasoning about Shapes in PyTorch", "Save Load Across Devices", "Saving And Loading A General Checkpoint", "Saving And Loading Models For Inference", "Saving Multiple Models In One File", "Computation times", "Extension points in <code class=\"docutils literal notranslate\"><span class=\"pre\">nn.Module</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">load_state_dict</span></code> and tensor subclasses", "How to use TensorBoard with PyTorch", "Timer quick start", "Performance Tuning Guide", "Warmstarting model using parameters from a different model in PyTorch", "What is a state_dict in PyTorch", "Zeroing out gradients in PyTorch", "PyTorch Recipes", "Reducing torch.compile cold start compilation time with regional compilation", "Script and Optimize for Mobile Recipe", "Computation times", "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs", "Compile Time Caching Configuration", "Compile Time Caching in <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "(beta) Utilizing Torch Function modes with torch.compile", "Using User-Defined Triton Kernels with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compile</span></code>", "Dynamic Compilation Control with <code class=\"docutils literal notranslate\"><span class=\"pre\">torch.compiler.set_stance</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">torch.export</span></code> AOTInductor Tutorial for Python runtime (Beta)", "Demonstration of torch.export flow, common challenges and the solutions to address them", "(beta) Using TORCH_LOGS python API with torch.compile", "TorchScript for Deployment", "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script", "Shard Optimizer States with ZeroRedundancyOptimizer", "Computation times"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 46, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 92, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 219, 220, 221, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 244, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "ha": [0, 1, 2, 4, 5, 6, 7, 9, 11, 12, 13, 14, 15, 17, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 39, 41, 46, 47, 48, 51, 54, 55, 67, 73, 80, 81, 88, 90, 93, 94, 95, 96, 98, 99, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 117, 120, 121, 124, 126, 127, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 157, 159, 161, 162, 164, 165, 166, 168, 169, 170, 172, 173, 174, 175, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 191, 193, 194, 196, 197, 199, 200, 203, 206, 207, 208, 209, 210, 212, 214, 216, 217, 219, 220, 221, 227, 228, 231, 233, 234, 237, 238, 246, 248, 249, 253, 260, 262, 263, 268, 269, 274, 275, 277, 278, 280, 281, 282], "been": [0, 1, 3, 5, 7, 9, 15, 16, 19, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 46, 55, 74, 80, 81, 88, 90, 93, 94, 95, 96, 98, 103, 109, 113, 115, 124, 126, 127, 130, 133, 136, 141, 143, 144, 145, 148, 149, 150, 152, 154, 156, 157, 161, 162, 164, 165, 166, 169, 172, 173, 174, 175, 179, 183, 184, 185, 186, 187, 189, 190, 191, 194, 196, 197, 203, 206, 207, 210, 212, 216, 217, 221, 227, 233, 234, 237, 238, 244, 248, 260, 261, 269, 277, 278, 281], "deprec": [0, 6, 9, 10, 26, 46, 124, 126, 127, 129, 130, 133, 135, 136, 148, 161, 164, 169, 182, 184, 190, 197, 234, 239, 255, 256, 257, 258, 269], "redirect": [0, 9, 29, 30, 31, 32, 33, 34, 46, 63, 64, 81, 82, 83, 84, 85, 86, 94, 124, 126, 127, 130, 148, 152, 161, 164, 169, 183, 186, 189, 192, 197, 203, 204, 205, 213, 221, 225, 234, 240, 241, 242, 243, 245, 255, 256, 257, 258, 269], "3": [0, 2, 3, 4, 6, 7, 9, 15, 18, 19, 21, 25, 26, 27, 29, 30, 31, 32, 33, 34, 36, 39, 40, 46, 47, 56, 57, 63, 64, 67, 68, 73, 74, 80, 81, 82, 83, 84, 85, 86, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 124, 125, 126, 127, 130, 133, 134, 135, 137, 141, 142, 143, 144, 148, 149, 150, 152, 156, 158, 159, 161, 162, 163, 164, 165, 167, 169, 172, 173, 174, 176, 177, 178, 179, 182, 183, 186, 187, 188, 189, 190, 191, 193, 194, 196, 198, 200, 202, 203, 204, 205, 212, 213, 217, 219, 221, 223, 224, 225, 227, 231, 232, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 247, 252, 255, 256, 257, 258, 260, 263, 269, 271, 275, 277, 278, 280], "second": [0, 1, 4, 5, 6, 7, 9, 10, 13, 14, 15, 17, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 53, 54, 56, 57, 63, 64, 73, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 93, 95, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 124, 125, 126, 127, 128, 130, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 148, 150, 151, 152, 153, 155, 156, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 179, 180, 182, 183, 184, 185, 186, 188, 189, 190, 191, 193, 194, 198, 200, 203, 204, 205, 207, 208, 209, 210, 213, 221, 222, 225, 227, 228, 231, 235, 238, 240, 241, 242, 243, 245, 248, 249, 252, 254, 255, 256, 257, 258, 260, 262, 263, 268, 269, 274, 275, 276, 277, 279, 281], "go": [1, 5, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 51, 53, 54, 56, 67, 68, 70, 72, 73, 74, 77, 78, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 132, 134, 138, 139, 140, 141, 143, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 179, 180, 182, 184, 185, 188, 190, 191, 193, 195, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 230, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279, 280], "end": [1, 4, 5, 6, 7, 10, 13, 14, 15, 17, 19, 22, 23, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 59, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 134, 136, 137, 138, 139, 140, 141, 143, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 178, 179, 180, 182, 184, 185, 188, 190, 191, 193, 194, 196, 199, 200, 207, 208, 209, 210, 212, 216, 217, 220, 222, 227, 235, 237, 238, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 274, 275, 276, 277, 279, 282], "download": [1, 5, 7, 13, 14, 15, 17, 19, 22, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 133, 134, 138, 139, 140, 141, 143, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 173, 174, 175, 177, 179, 180, 182, 184, 185, 188, 190, 191, 193, 194, 199, 200, 202, 207, 208, 209, 210, 212, 220, 222, 223, 227, 235, 237, 238, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 271, 273, 274, 275, 276, 277, 279], "full": [1, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 17, 19, 22, 23, 25, 27, 28, 35, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 171, 172, 174, 175, 176, 179, 180, 182, 184, 188, 190, 191, 193, 194, 196, 198, 199, 200, 207, 208, 209, 210, 212, 214, 220, 222, 227, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 274, 275, 276, 277, 279, 280, 281], "exampl": [1, 2, 3, 4, 5, 7, 10, 11, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 87, 88, 89, 91, 93, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 123, 125, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 190, 191, 193, 195, 196, 199, 200, 202, 207, 208, 209, 210, 212, 214, 217, 218, 219, 220, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 238, 244, 246, 247, 248, 249, 250, 252, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 272, 273, 274, 275, 277, 278, 279, 280, 282, 283], "author": [1, 4, 6, 12, 13, 14, 15, 18, 19, 22, 27, 39, 49, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 80, 87, 88, 90, 92, 99, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 147, 149, 150, 154, 155, 156, 158, 159, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 188, 190, 194, 195, 196, 198, 200, 201, 202, 211, 214, 216, 217, 222, 223, 226, 227, 229, 230, 231, 232, 235, 236, 247, 252, 253, 260, 263, 268, 272, 273, 274, 275, 276, 277, 278, 279], "vincent": [1, 15, 150, 168, 174], "moen": [1, 15, 150, 168, 174], "separ": [1, 4, 6, 7, 10, 17, 23, 25, 26, 28, 37, 54, 57, 90, 95, 102, 103, 104, 105, 113, 120, 137, 151, 156, 158, 166, 168, 177, 180, 187, 193, 195, 207, 233, 248, 263, 273, 276, 279], "rl": [1, 132, 174, 175, 176, 181, 283], "algorithm": [1, 6, 7, 11, 12, 13, 35, 40, 45, 54, 57, 61, 74, 87, 93, 96, 98, 104, 106, 107, 108, 109, 113, 121, 132, 134, 137, 139, 143, 149, 150, 158, 168, 171, 174, 177, 182, 196, 214, 226, 227, 233, 246, 250, 263], "variou": [1, 4, 10, 16, 44, 51, 53, 54, 55, 88, 90, 93, 98, 102, 110, 113, 120, 122, 139, 149, 155, 157, 172, 174, 177, 178, 187, 191, 194, 198, 200, 209, 212, 224, 231, 235, 262, 266, 272, 275, 278], "piec": [1, 6, 10, 15, 90, 98, 113, 173, 174, 178, 187, 193, 195], "assembl": [1, 10, 54, 98], "script": [1, 6, 7, 11, 13, 14, 15, 17, 22, 23, 24, 25, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 65, 73, 77, 78, 80, 93, 95, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 128, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 179, 180, 182, 187, 188, 190, 191, 193, 194, 198, 200, 207, 208, 209, 210, 220, 223, 227, 233, 235, 236, 237, 244, 247, 248, 249, 252, 253, 254, 260, 263, 267, 268, 274, 275, 276, 277, 279, 280], "collect": [1, 5, 7, 12, 15, 16, 21, 22, 24, 40, 47, 49, 54, 60, 65, 80, 98, 103, 104, 107, 112, 132, 133, 134, 137, 147, 150, 155, 171, 175, 178, 190, 191, 196, 198, 217, 230, 231, 232, 244, 262, 263, 267], "final": [1, 7, 11, 12, 13, 15, 16, 18, 19, 22, 23, 24, 25, 26, 27, 45, 47, 51, 54, 57, 80, 90, 93, 95, 98, 100, 103, 104, 105, 110, 113, 115, 118, 120, 122, 128, 132, 133, 134, 135, 137, 139, 140, 141, 143, 144, 149, 155, 156, 157, 158, 162, 165, 167, 170, 172, 174, 175, 176, 177, 178, 180, 184, 185, 190, 191, 195, 196, 198, 200, 207, 210, 214, 217, 220, 233, 238], "function": [1, 3, 4, 5, 6, 7, 8, 10, 11, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 37, 41, 42, 44, 45, 47, 53, 54, 56, 58, 60, 65, 66, 69, 70, 72, 73, 74, 87, 88, 95, 96, 98, 102, 103, 109, 112, 114, 115, 117, 118, 120, 122, 128, 131, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 149, 150, 151, 154, 155, 156, 158, 159, 165, 166, 168, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 201, 207, 208, 209, 210, 214, 217, 219, 222, 223, 226, 227, 233, 236, 237, 238, 244, 247, 249, 250, 260, 262, 264, 267, 270, 272, 275, 276, 277, 279, 280, 282, 283], "ar": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 195, 196, 198, 199, 200, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 246, 247, 248, 250, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282], "state": [1, 4, 6, 10, 11, 12, 15, 19, 25, 41, 42, 48, 54, 57, 58, 60, 93, 96, 98, 100, 104, 105, 106, 110, 113, 121, 122, 133, 134, 140, 141, 143, 145, 147, 150, 151, 153, 158, 165, 167, 172, 174, 175, 176, 177, 178, 180, 184, 190, 198, 199, 210, 216, 217, 229, 230, 233, 235, 246, 247, 252, 265, 267], "contain": [1, 2, 5, 7, 10, 11, 13, 15, 16, 19, 23, 24, 25, 26, 28, 36, 37, 41, 45, 51, 54, 55, 60, 72, 73, 74, 87, 90, 95, 96, 100, 103, 104, 109, 110, 113, 114, 121, 122, 128, 132, 133, 134, 138, 139, 140, 145, 147, 150, 166, 170, 172, 174, 175, 176, 178, 179, 180, 182, 184, 185, 187, 190, 191, 193, 194, 195, 198, 199, 210, 217, 219, 223, 228, 238, 244, 247, 250, 252, 260, 262, 263, 265, 277, 278, 281], "trainabl": [1, 7, 73, 105, 107], "paramet": [1, 5, 6, 11, 12, 13, 15, 16, 18, 19, 22, 23, 25, 27, 28, 35, 37, 38, 39, 42, 44, 45, 47, 48, 51, 53, 54, 56, 57, 72, 73, 80, 90, 93, 95, 98, 104, 105, 107, 109, 112, 113, 117, 118, 120, 121, 128, 131, 132, 133, 134, 135, 137, 139, 140, 141, 145, 147, 149, 150, 151, 153, 156, 157, 158, 159, 162, 165, 166, 167, 178, 179, 182, 184, 185, 187, 190, 191, 200, 207, 214, 215, 217, 220, 226, 228, 229, 230, 233, 235, 236, 237, 238, 244, 247, 251, 252, 253, 254, 259, 260, 261, 265, 266, 267, 271, 275, 281, 282, 283], "tutori": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 41, 46, 47, 48, 49, 50, 56, 58, 60, 61, 65, 80, 81, 82, 83, 84, 85, 86, 87, 89, 93, 96, 97, 100, 102, 104, 106, 108, 109, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 126, 127, 130, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 164, 165, 167, 168, 169, 170, 171, 173, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 191, 192, 196, 197, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 221, 222, 223, 224, 226, 227, 229, 230, 231, 232, 234, 235, 236, 246, 247, 251, 252, 253, 255, 256, 257, 258, 260, 261, 262, 263, 267, 269, 278, 279, 280, 281, 282, 283], "guid": [1, 6, 10, 19, 26, 65, 87, 90, 118, 132, 133, 149, 159, 173, 181, 184, 190, 191, 200, 214, 217, 235, 244, 246, 248, 251, 259, 267, 281, 283], "you": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 34, 35, 36, 37, 39, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 72, 73, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 196, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 222, 223, 224, 226, 228, 229, 230, 231, 232, 233, 236, 237, 244, 247, 248, 249, 250, 252, 253, 261, 263, 264, 265, 266, 267, 268, 272, 273, 275, 276, 278, 279, 280, 282], "through": [1, 3, 5, 6, 7, 10, 11, 14, 15, 16, 18, 22, 24, 25, 26, 27, 28, 35, 36, 40, 41, 47, 51, 54, 57, 59, 60, 80, 89, 91, 93, 95, 98, 100, 102, 104, 105, 107, 108, 109, 110, 113, 114, 115, 117, 118, 121, 125, 131, 132, 134, 135, 136, 137, 138, 140, 142, 143, 144, 149, 151, 154, 155, 156, 157, 158, 159, 162, 165, 167, 168, 170, 171, 174, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 190, 191, 199, 200, 201, 202, 207, 209, 214, 217, 222, 228, 229, 230, 236, 237, 238, 247, 248, 253, 261, 266, 278, 281, 283], "from": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 24, 26, 27, 28, 35, 37, 40, 41, 42, 43, 44, 48, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 72, 73, 74, 75, 77, 78, 79, 80, 87, 88, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 117, 118, 119, 120, 121, 123, 125, 128, 132, 133, 134, 135, 136, 137, 138, 139, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 184, 185, 188, 190, 194, 195, 196, 198, 200, 202, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 223, 228, 229, 230, 232, 233, 235, 236, 237, 238, 244, 247, 248, 250, 251, 253, 259, 260, 261, 262, 263, 265, 267, 270, 273, 274, 275, 277, 278, 280, 281, 282, 283], "ground": [1, 15, 48, 80, 193], "up": [1, 3, 5, 6, 7, 10, 11, 15, 17, 19, 21, 22, 23, 24, 25, 26, 35, 37, 40, 54, 57, 60, 65, 76, 79, 87, 90, 95, 96, 98, 99, 100, 103, 105, 106, 107, 109, 110, 112, 113, 115, 120, 132, 133, 134, 135, 136, 137, 140, 141, 145, 146, 147, 149, 150, 151, 155, 156, 162, 165, 167, 168, 170, 173, 174, 175, 176, 177, 180, 182, 184, 185, 188, 190, 191, 194, 201, 212, 214, 215, 217, 220, 224, 228, 229, 231, 232, 233, 237, 248, 253, 263, 266, 267, 277, 278, 279, 281, 282, 283], "us": [1, 4, 5, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 24, 35, 36, 37, 40, 41, 42, 44, 45, 48, 49, 51, 53, 54, 56, 57, 59, 60, 61, 62, 65, 67, 68, 70, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 117, 121, 125, 128, 131, 132, 134, 136, 137, 138, 139, 140, 141, 144, 146, 149, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 168, 170, 172, 173, 174, 175, 180, 181, 182, 188, 190, 191, 193, 194, 195, 196, 198, 200, 201, 207, 208, 210, 212, 214, 215, 216, 217, 219, 220, 222, 224, 226, 227, 229, 233, 235, 236, 237, 247, 248, 249, 250, 251, 254, 259, 260, 262, 265, 266, 267, 268, 270, 272, 273, 274, 276, 278, 283], "To": [1, 4, 5, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 22, 23, 26, 35, 36, 40, 41, 42, 45, 51, 54, 55, 56, 62, 70, 78, 87, 88, 90, 93, 96, 102, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 121, 122, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 153, 156, 165, 166, 168, 171, 172, 173, 174, 175, 176, 177, 179, 180, 184, 185, 187, 190, 191, 194, 196, 198, 200, 201, 202, 207, 209, 210, 211, 215, 217, 219, 223, 231, 232, 236, 237, 238, 244, 247, 248, 250, 252, 253, 260, 261, 262, 263, 264, 265, 266, 271, 275, 277, 278, 279, 281], "aim": [1, 7, 105, 108, 136, 165, 175, 178, 210, 238], "we": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 60, 67, 68, 70, 73, 74, 80, 87, 88, 90, 93, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 244, 246, 248, 250, 252, 253, 254, 260, 261, 262, 264, 265, 266, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "focus": [1, 3, 23, 96, 105, 108, 171, 180, 191, 238], "which": [1, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 39, 40, 41, 42, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 60, 61, 65, 67, 68, 72, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 128, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 153, 155, 156, 157, 159, 162, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 199, 200, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 224, 227, 228, 229, 230, 231, 232, 233, 235, 238, 244, 246, 247, 248, 249, 250, 252, 253, 260, 262, 263, 264, 265, 266, 268, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282], "i": [1, 2, 3, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 63, 64, 65, 67, 68, 70, 73, 77, 78, 80, 82, 83, 84, 85, 86, 87, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 114, 115, 117, 118, 120, 121, 123, 125, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 153, 154, 155, 156, 157, 158, 159, 162, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 192, 193, 195, 196, 198, 199, 200, 201, 202, 204, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 225, 226, 227, 229, 230, 235, 236, 237, 238, 239, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 279, 281, 283], "rel": [1, 6, 7, 96, 104, 128, 138, 157, 162, 178, 180, 194, 201, 238, 267], "straightforward": [1, 6, 7, 18, 19, 54, 95, 98, 103, 105, 106, 156, 168, 190, 194, 267], "deep": [1, 7, 13, 14, 28, 39, 51, 54, 57, 74, 77, 78, 98, 99, 100, 103, 105, 109, 111, 112, 121, 131, 132, 140, 141, 142, 143, 147, 156, 157, 158, 166, 172, 175, 180, 187, 191, 224, 226, 227, 238, 244, 250, 262, 263, 268, 281, 283], "determinist": [1, 12, 15, 135, 150, 175, 262, 263], "gradient": [1, 4, 7, 11, 12, 14, 15, 17, 18, 28, 40, 47, 48, 51, 54, 57, 61, 65, 67, 68, 70, 73, 77, 78, 95, 98, 100, 103, 104, 105, 106, 107, 109, 113, 121, 128, 132, 133, 134, 137, 138, 140, 142, 144, 145, 147, 149, 153, 157, 158, 165, 172, 174, 176, 177, 178, 181, 185, 187, 191, 207, 222, 230, 233, 246, 251, 259, 267, 282, 283], "simpl": [1, 3, 4, 5, 6, 7, 10, 13, 16, 18, 19, 22, 24, 25, 26, 27, 28, 51, 54, 56, 59, 61, 72, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 114, 117, 121, 122, 131, 132, 133, 138, 139, 142, 144, 149, 151, 156, 157, 162, 167, 168, 170, 172, 174, 176, 177, 178, 179, 181, 182, 184, 188, 190, 191, 196, 211, 214, 217, 224, 226, 227, 230, 232, 235, 237, 238, 248, 252, 261, 262, 263, 265, 275, 278, 279, 282, 283], "continu": [1, 6, 23, 24, 54, 58, 80, 90, 93, 98, 103, 105, 110, 113, 132, 135, 136, 137, 141, 145, 149, 155, 174, 178, 180, 184, 188, 198, 199, 207, 209, 210, 217, 231, 248, 250, 253, 263, 264, 265, 266, 268], "control": [1, 5, 10, 11, 15, 24, 26, 28, 35, 37, 40, 47, 71, 75, 88, 90, 95, 105, 115, 116, 117, 118, 125, 132, 134, 135, 136, 138, 139, 149, 153, 166, 174, 175, 176, 188, 216, 231, 244, 248, 267, 268, 270, 283], "It": [1, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 45, 47, 48, 49, 51, 54, 56, 57, 80, 81, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 112, 113, 114, 115, 117, 122, 128, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 155, 156, 157, 158, 162, 165, 166, 167, 168, 172, 175, 176, 178, 180, 182, 183, 184, 186, 187, 189, 190, 191, 193, 194, 195, 196, 198, 212, 217, 219, 222, 228, 229, 230, 232, 233, 248, 249, 261, 263, 266, 271, 273, 275, 277, 278, 280, 281], "consist": [1, 3, 4, 7, 15, 16, 25, 27, 28, 35, 36, 37, 40, 47, 105, 107, 113, 135, 137, 145, 154, 155, 158, 162, 165, 174, 175, 179, 180, 184, 191, 194, 195, 196, 198, 209, 210, 227, 248, 253, 263], "learn": [1, 4, 5, 7, 14, 15, 17, 19, 20, 23, 24, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 49, 51, 54, 56, 57, 58, 59, 60, 61, 65, 74, 77, 78, 80, 87, 89, 91, 92, 93, 95, 96, 98, 99, 100, 103, 104, 105, 109, 111, 112, 113, 114, 115, 117, 118, 122, 123, 125, 132, 133, 134, 136, 139, 140, 141, 142, 145, 146, 147, 149, 150, 156, 157, 159, 163, 165, 166, 167, 170, 172, 173, 177, 180, 181, 182, 185, 187, 190, 191, 193, 194, 196, 199, 200, 207, 208, 209, 210, 211, 212, 215, 216, 217, 220, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 238, 244, 246, 252, 260, 263, 267, 268, 271, 272, 273, 276, 278, 280, 282, 283], "parametr": [1, 2, 19, 132, 174, 181, 217, 283], "an": [1, 2, 3, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 21, 22, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 67, 70, 72, 74, 80, 87, 88, 90, 92, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 117, 120, 121, 128, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 149, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 193, 194, 195, 196, 199, 200, 201, 202, 207, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 222, 223, 224, 226, 228, 229, 230, 232, 233, 235, 236, 237, 238, 244, 246, 247, 248, 249, 250, 251, 253, 254, 259, 260, 262, 263, 265, 267, 268, 270, 272, 275, 276, 277, 278, 279, 280, 283], "action": [1, 22, 100, 104, 109, 113, 133, 134, 158, 172, 174, 175, 176, 177, 178, 184, 196, 253, 262, 267, 278], "pair": [1, 7, 51, 54, 57, 96, 104, 140, 141, 143, 167, 174, 175, 180, 184, 193, 195, 227, 244, 262], "output": [1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 15, 17, 18, 19, 22, 23, 24, 25, 26, 28, 35, 36, 40, 44, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 125, 128, 133, 134, 135, 137, 138, 140, 141, 142, 147, 149, 150, 151, 153, 154, 156, 157, 159, 162, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 185, 187, 188, 190, 193, 194, 195, 196, 198, 200, 202, 211, 212, 214, 217, 223, 224, 226, 228, 231, 235, 236, 237, 246, 248, 250, 253, 254, 261, 263, 271, 279, 280, 282], "maxim": [1, 15, 57, 80, 87, 105, 107, 139, 158, 175, 188, 263, 281], "given": [1, 4, 7, 10, 11, 13, 15, 17, 19, 23, 24, 25, 26, 28, 35, 37, 40, 44, 45, 47, 53, 54, 56, 57, 60, 80, 87, 90, 96, 100, 104, 105, 108, 109, 112, 113, 122, 134, 140, 141, 149, 151, 153, 157, 158, 159, 167, 172, 174, 175, 177, 178, 180, 188, 190, 191, 193, 199, 210, 217, 233, 236, 248, 254, 263, 274, 278, 282], "certain": [1, 5, 6, 7, 11, 12, 16, 54, 60, 96, 109, 131, 134, 137, 138, 143, 153, 157, 159, 174, 179, 188, 190, 191, 198, 207, 210, 212, 246, 250, 274, 275, 278, 281], "what": [1, 2, 3, 4, 6, 10, 15, 17, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 47, 49, 50, 58, 59, 60, 65, 80, 92, 93, 96, 98, 100, 103, 104, 106, 107, 109, 110, 112, 114, 118, 123, 125, 132, 134, 136, 137, 138, 139, 141, 142, 145, 146, 149, 150, 158, 159, 165, 170, 172, 174, 175, 176, 179, 185, 187, 190, 191, 193, 194, 196, 199, 209, 216, 226, 229, 247, 248, 249, 250, 251, 252, 259, 262, 263, 267, 278, 283], "how": [1, 2, 4, 5, 6, 7, 10, 11, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 37, 40, 41, 42, 47, 48, 49, 51, 54, 55, 56, 57, 60, 61, 62, 80, 87, 90, 92, 93, 95, 96, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 118, 120, 128, 131, 132, 136, 138, 139, 140, 141, 142, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 162, 163, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 207, 208, 209, 210, 211, 212, 214, 215, 217, 220, 224, 227, 229, 231, 235, 236, 238, 246, 247, 248, 251, 252, 253, 259, 260, 262, 263, 265, 266, 267, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283], "write": [1, 4, 5, 8, 10, 11, 17, 20, 24, 25, 26, 48, 54, 65, 68, 102, 106, 107, 108, 109, 113, 121, 123, 128, 132, 136, 138, 139, 144, 145, 147, 150, 153, 154, 156, 159, 162, 166, 168, 171, 174, 177, 178, 180, 184, 187, 188, 190, 194, 198, 199, 210, 214, 218, 222, 223, 230, 247, 248, 249, 250, 254, 263, 278, 283], "custom": [1, 5, 7, 10, 12, 19, 20, 54, 57, 68, 71, 75, 96, 113, 120, 123, 132, 135, 139, 150, 158, 168, 174, 177, 181, 187, 188, 191, 194, 195, 214, 217, 219, 235, 237, 238, 244, 247, 251, 260, 263, 267, 271, 274, 275, 283], "its": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 28, 35, 36, 40, 45, 47, 51, 54, 56, 57, 58, 60, 73, 80, 87, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 120, 121, 122, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 149, 150, 151, 153, 155, 156, 158, 159, 165, 166, 170, 172, 174, 175, 176, 177, 178, 180, 184, 185, 188, 190, 191, 200, 209, 210, 212, 216, 217, 219, 223, 224, 230, 232, 237, 244, 247, 248, 250, 252, 253, 260, 263, 264, 265, 266, 282], "includ": [1, 2, 3, 4, 5, 6, 7, 10, 15, 16, 17, 25, 26, 27, 28, 40, 41, 44, 53, 54, 58, 60, 65, 74, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 113, 115, 117, 118, 120, 137, 139, 140, 141, 142, 144, 145, 147, 149, 150, 156, 158, 168, 170, 171, 172, 174, 177, 180, 184, 185, 188, 190, 191, 193, 194, 198, 200, 207, 209, 211, 214, 216, 223, 228, 230, 231, 233, 235, 236, 237, 238, 244, 246, 247, 248, 250, 253, 260, 263, 273, 275, 276, 280, 281], "design": [1, 6, 7, 15, 19, 27, 28, 57, 61, 80, 90, 96, 112, 113, 141, 147, 150, 168, 174, 175, 176, 178, 179, 184, 185, 190, 195, 196, 207, 208, 209, 214, 217, 222, 224, 236, 248, 250, 263, 271, 275, 278, 281], "effici": [1, 6, 11, 13, 16, 19, 23, 26, 28, 35, 54, 56, 80, 87, 103, 105, 109, 112, 133, 134, 137, 139, 147, 149, 150, 157, 162, 172, 174, 178, 179, 184, 187, 191, 198, 201, 210, 211, 212, 217, 218, 229, 248, 252, 271, 275, 281, 283], "store": [1, 5, 6, 7, 18, 19, 22, 25, 26, 35, 36, 37, 41, 42, 44, 47, 53, 56, 58, 73, 93, 95, 102, 103, 106, 107, 109, 112, 113, 115, 121, 136, 138, 139, 141, 149, 150, 156, 158, 159, 166, 168, 170, 171, 172, 174, 175, 176, 177, 178, 180, 190, 191, 196, 200, 210, 211, 217, 233, 235, 253, 262, 263, 272, 273], "them": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 19, 21, 22, 26, 28, 35, 37, 40, 47, 48, 51, 53, 54, 56, 58, 60, 65, 73, 80, 93, 95, 96, 98, 100, 102, 103, 104, 105, 108, 109, 110, 112, 113, 114, 115, 117, 118, 121, 122, 132, 134, 135, 137, 139, 140, 141, 143, 144, 149, 150, 151, 155, 156, 157, 162, 165, 166, 167, 168, 172, 173, 175, 176, 177, 178, 187, 188, 190, 193, 194, 196, 200, 209, 211, 212, 216, 217, 219, 227, 236, 237, 238, 247, 248, 252, 260, 262, 263, 267, 272, 273, 281], "trajectori": [1, 15, 150, 174, 175], "transit": [1, 15, 90, 92, 106, 150, 168, 175], "assum": [1, 2, 5, 7, 10, 11, 15, 16, 22, 24, 25, 39, 47, 48, 56, 59, 80, 95, 98, 99, 105, 106, 108, 110, 113, 118, 137, 138, 140, 141, 149, 150, 166, 172, 174, 177, 179, 180, 193, 209, 210, 212, 230, 252, 253, 260, 262, 278], "have": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 62, 73, 74, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 222, 223, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 244, 247, 248, 249, 250, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 275, 276, 277, 278, 280, 281, 282], "complet": [1, 5, 6, 7, 16, 24, 28, 39, 90, 93, 95, 98, 106, 107, 109, 118, 132, 134, 136, 137, 139, 140, 142, 144, 149, 168, 170, 172, 173, 174, 177, 187, 188, 193, 198, 200, 209, 210, 214, 246, 263, 277, 278, 280], "ppo": [1, 132, 181, 283], "give": [1, 2, 6, 7, 12, 15, 19, 26, 28, 40, 49, 51, 54, 55, 57, 80, 95, 96, 98, 100, 105, 107, 109, 110, 112, 113, 122, 141, 145, 151, 154, 155, 156, 157, 158, 167, 173, 177, 180, 184, 187, 188, 190, 191, 194, 208, 212, 217, 233, 236, 248, 280], "compon": [1, 6, 7, 10, 11, 15, 23, 28, 57, 90, 100, 105, 109, 122, 132, 139, 140, 142, 150, 154, 158, 174, 178, 182, 184, 188, 190, 194, 212, 224, 273, 280], "depend": [1, 6, 7, 10, 12, 24, 25, 26, 51, 55, 57, 80, 87, 90, 95, 96, 102, 103, 105, 106, 110, 113, 132, 137, 139, 140, 143, 144, 149, 150, 153, 154, 155, 157, 158, 168, 171, 173, 174, 177, 184, 188, 194, 200, 209, 215, 223, 224, 226, 236, 248, 249, 254, 260, 263, 268, 280, 281], "tensordict": [1, 15, 150, 158, 168, 174], "nn": [1, 2, 5, 6, 7, 12, 13, 14, 15, 16, 18, 19, 21, 22, 24, 25, 28, 40, 41, 42, 47, 48, 49, 51, 54, 60, 71, 74, 75, 80, 93, 95, 98, 104, 107, 112, 115, 117, 120, 123, 128, 132, 133, 134, 135, 137, 138, 140, 141, 142, 143, 147, 150, 153, 154, 159, 162, 166, 167, 170, 174, 175, 176, 177, 178, 179, 182, 185, 187, 188, 190, 191, 195, 196, 208, 211, 212, 217, 219, 226, 228, 229, 230, 232, 235, 236, 237, 238, 244, 247, 250, 251, 253, 254, 259, 261, 263, 264, 265, 267, 268, 271, 280, 282, 283], "tensordictmodul": [1, 150, 174], "although": [1, 13, 18, 47, 54, 106, 107, 112, 113, 115, 118, 136, 138, 158, 166, 168, 177, 188, 190, 220, 236], "should": [1, 2, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 35, 47, 48, 54, 55, 56, 57, 58, 60, 74, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 128, 132, 134, 135, 136, 138, 139, 142, 144, 147, 149, 150, 151, 155, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 185, 187, 188, 190, 191, 193, 198, 199, 200, 202, 207, 208, 209, 214, 216, 222, 223, 229, 230, 236, 244, 247, 248, 253, 261, 262, 263, 266, 267, 274, 278, 280, 281], "suffici": [1, 7, 54, 57, 105, 106, 128, 145, 147, 165, 168, 190], "transpar": [1, 13, 96, 107, 150, 177, 223, 231, 237, 272], "understood": [1, 4, 5, 17, 275], "without": [1, 5, 6, 7, 10, 11, 15, 17, 19, 23, 26, 35, 54, 58, 60, 80, 100, 103, 105, 106, 117, 132, 133, 135, 137, 138, 141, 142, 149, 153, 155, 157, 158, 159, 165, 168, 171, 172, 173, 174, 175, 176, 179, 184, 187, 190, 199, 207, 209, 210, 212, 216, 217, 227, 229, 232, 237, 247, 252, 254, 260, 263, 273, 274, 276, 282], "understand": [1, 2, 4, 5, 7, 8, 16, 26, 47, 48, 57, 62, 87, 90, 95, 97, 98, 99, 100, 102, 103, 104, 106, 109, 113, 114, 118, 128, 132, 135, 138, 139, 140, 141, 144, 149, 153, 156, 168, 180, 187, 190, 191, 199, 208, 211, 229, 232, 244, 246, 261, 265, 268, 272, 273, 275, 277, 278, 281], "class": [1, 2, 5, 6, 7, 10, 11, 14, 16, 22, 24, 26, 27, 28, 35, 37, 39, 40, 41, 42, 48, 51, 54, 57, 58, 70, 72, 80, 88, 90, 96, 98, 100, 102, 103, 104, 107, 108, 112, 113, 115, 118, 121, 122, 128, 132, 133, 134, 135, 139, 140, 141, 142, 144, 145, 147, 149, 150, 155, 156, 158, 159, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 185, 187, 190, 193, 195, 198, 207, 208, 209, 211, 219, 228, 229, 230, 232, 233, 236, 238, 244, 246, 248, 250, 262, 266, 268, 278], "do": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 42, 51, 54, 55, 56, 57, 59, 67, 68, 74, 90, 93, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 121, 122, 125, 132, 133, 137, 138, 139, 140, 146, 147, 149, 150, 151, 154, 155, 156, 157, 158, 162, 165, 166, 168, 171, 172, 173, 174, 175, 178, 180, 185, 187, 190, 191, 193, 194, 196, 198, 200, 208, 209, 210, 216, 217, 219, 220, 222, 230, 233, 238, 244, 247, 248, 249, 252, 260, 261, 262, 263, 264, 266, 267, 275, 276, 277, 280], "sota": 1, "implement": [1, 2, 3, 5, 6, 7, 11, 12, 13, 14, 15, 16, 19, 23, 27, 36, 37, 39, 47, 49, 51, 54, 56, 60, 62, 65, 67, 68, 70, 72, 73, 74, 77, 78, 90, 95, 98, 104, 112, 113, 114, 121, 131, 132, 135, 137, 138, 140, 142, 144, 149, 150, 151, 153, 156, 157, 158, 159, 162, 167, 168, 170, 172, 174, 175, 178, 181, 184, 190, 191, 193, 194, 195, 196, 198, 201, 208, 210, 211, 212, 214, 216, 217, 223, 224, 229, 233, 236, 237, 238, 248, 252, 260, 263, 271, 272, 274, 275, 278, 281, 283], "rather": [1, 14, 26, 28, 54, 57, 74, 80, 90, 100, 103, 105, 112, 113, 122, 132, 141, 143, 156, 166, 167, 168, 174, 187, 190, 194, 198, 200, 207, 224, 248, 263, 272, 276], "provid": [1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 36, 37, 48, 54, 56, 57, 60, 61, 80, 87, 88, 90, 93, 95, 96, 98, 103, 104, 105, 106, 107, 113, 114, 115, 117, 118, 121, 122, 131, 132, 134, 136, 137, 138, 139, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 168, 172, 173, 174, 176, 177, 179, 184, 187, 188, 190, 191, 193, 194, 198, 209, 210, 215, 217, 219, 222, 224, 230, 231, 233, 235, 236, 237, 238, 244, 246, 247, 248, 250, 252, 253, 261, 262, 263, 268, 273, 276, 277, 278, 281], "high": [1, 2, 6, 7, 16, 22, 26, 28, 48, 54, 57, 58, 60, 62, 65, 87, 90, 100, 107, 112, 115, 120, 132, 133, 134, 137, 139, 142, 143, 149, 181, 184, 185, 187, 190, 191, 201, 210, 214, 215, 228, 233, 262, 263, 275, 280, 281, 282, 283], "level": [1, 2, 4, 6, 7, 17, 19, 22, 23, 26, 28, 48, 54, 58, 60, 62, 65, 73, 100, 108, 115, 121, 132, 133, 134, 137, 142, 145, 147, 149, 153, 154, 156, 159, 163, 179, 180, 181, 184, 187, 188, 190, 191, 194, 214, 215, 217, 228, 231, 232, 233, 238, 272, 282, 283], "illustr": [1, 22, 36, 48, 51, 61, 128, 137, 138, 139, 151, 168, 175, 185, 187, 193, 209, 210, 232, 244, 246, 253, 260], "": [1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 15, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 62, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 162, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 200, 201, 202, 207, 209, 210, 212, 215, 216, 217, 219, 222, 224, 226, 228, 229, 230, 231, 232, 233, 235, 236, 246, 247, 248, 250, 252, 253, 260, 261, 262, 263, 265, 266, 267, 268, 272, 273, 275, 280, 281, 282], "librari": [1, 3, 4, 5, 6, 7, 8, 10, 13, 15, 17, 21, 23, 25, 26, 28, 37, 41, 48, 55, 56, 62, 65, 93, 96, 113, 117, 118, 132, 136, 139, 143, 144, 155, 168, 170, 171, 173, 174, 178, 184, 191, 194, 198, 202, 211, 221, 223, 224, 232, 236, 237, 244, 267, 268, 275, 277], "featur": [1, 5, 7, 11, 12, 13, 15, 22, 25, 26, 37, 41, 45, 54, 55, 56, 57, 87, 88, 90, 95, 98, 100, 103, 105, 106, 112, 113, 117, 121, 132, 133, 138, 142, 150, 156, 157, 158, 165, 168, 171, 173, 174, 178, 179, 185, 188, 190, 193, 194, 201, 210, 211, 212, 214, 215, 216, 217, 222, 223, 224, 228, 233, 235, 236, 244, 246, 250, 252, 260, 262, 263, 266, 267, 268, 272, 275, 278], "context": [1, 2, 6, 10, 15, 18, 19, 47, 54, 80, 95, 100, 112, 113, 120, 131, 132, 137, 142, 153, 166, 168, 174, 177, 178, 179, 180, 184, 188, 194, 199, 201, 211, 215, 217, 223, 228, 231, 247, 249, 252, 253, 254, 263, 276, 278, 281], "bash": [1, 21, 23, 158, 175, 244], "pip3": [1, 21, 55, 134, 150, 168, 174, 175, 184, 191, 200], "instal": [1, 4, 6, 7, 10, 19, 23, 26, 27, 39, 55, 56, 58, 60, 62, 93, 99, 102, 113, 117, 133, 134, 137, 140, 141, 145, 146, 149, 150, 153, 155, 158, 163, 168, 171, 174, 175, 176, 180, 184, 187, 188, 193, 198, 199, 200, 216, 223, 236, 244, 246, 248, 250, 253, 262, 264, 265, 266, 268, 275, 280, 281], "mujoco": [1, 150, 174], "glfw": 1, "cuda": [1, 5, 7, 10, 11, 12, 13, 16, 19, 21, 22, 26, 27, 36, 41, 44, 47, 48, 49, 58, 59, 60, 67, 68, 78, 80, 88, 93, 103, 107, 113, 120, 121, 122, 128, 132, 133, 134, 135, 136, 137, 140, 143, 145, 146, 147, 149, 159, 165, 166, 170, 171, 175, 176, 177, 178, 179, 182, 184, 187, 188, 191, 196, 198, 199, 200, 201, 211, 217, 226, 227, 229, 230, 232, 235, 247, 248, 249, 253, 267, 273, 276, 277, 278, 282], "avail": [1, 2, 3, 4, 6, 7, 11, 13, 16, 19, 21, 22, 23, 24, 25, 26, 35, 36, 37, 40, 41, 42, 44, 47, 48, 53, 54, 55, 56, 57, 58, 67, 80, 93, 96, 98, 100, 103, 104, 105, 109, 113, 115, 121, 128, 134, 138, 140, 149, 150, 153, 158, 159, 168, 172, 173, 174, 175, 178, 179, 180, 184, 187, 190, 191, 193, 198, 214, 215, 217, 222, 228, 230, 237, 244, 246, 248, 249, 250, 263, 264, 265, 266, 268, 277, 279, 280], "seri": [1, 7, 16, 26, 57, 58, 59, 60, 61, 87, 97, 100, 103, 104, 131, 132, 136, 140, 141, 145, 146, 155, 163, 172, 174, 180, 194, 209, 236, 281], "easili": [1, 6, 13, 22, 27, 36, 49, 65, 80, 96, 103, 104, 105, 113, 120, 121, 122, 134, 137, 139, 140, 147, 149, 154, 155, 156, 162, 172, 174, 175, 178, 187, 188, 190, 193, 196, 200, 214, 215, 219, 229, 230, 232, 238, 248, 265], "reusabl": [1, 7, 28], "swappabl": 1, "signatur": [1, 6, 10, 11, 15, 16, 26, 118, 149, 166, 177, 190, 235], "main": [1, 3, 5, 6, 7, 12, 18, 22, 25, 26, 40, 57, 58, 60, 93, 105, 118, 121, 133, 134, 140, 145, 149, 156, 168, 175, 176, 177, 178, 182, 190, 191, 193, 194, 200, 201, 222, 223, 229, 237, 238, 244, 263, 280, 282], "characterist": [1, 15, 47, 142, 155, 157, 158, 173, 179, 190, 278], "thei": [1, 3, 5, 6, 7, 10, 11, 13, 15, 17, 18, 22, 23, 24, 26, 28, 36, 37, 44, 48, 53, 54, 57, 60, 80, 87, 90, 95, 98, 100, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 134, 138, 139, 140, 141, 144, 147, 149, 150, 156, 157, 159, 165, 166, 174, 175, 176, 178, 180, 187, 190, 191, 194, 195, 202, 207, 208, 209, 210, 212, 219, 220, 224, 230, 232, 237, 248, 252, 253, 261, 262, 265, 266], "copi": [1, 6, 7, 13, 21, 25, 26, 39, 44, 48, 49, 55, 60, 80, 87, 95, 99, 104, 105, 120, 122, 125, 132, 133, 138, 143, 147, 149, 150, 154, 155, 158, 166, 177, 184, 187, 190, 196, 198, 214, 223, 228, 229, 235, 236, 252, 263], "loss_modul": 1, "whatev": [1, 10, 25, 26, 98, 103, 104, 107, 109, 113, 122, 244], "need": [1, 3, 4, 5, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 65, 67, 68, 72, 87, 88, 93, 96, 98, 102, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 122, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 162, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 187, 188, 190, 191, 193, 195, 198, 199, 200, 207, 211, 212, 216, 217, 219, 223, 228, 229, 230, 232, 233, 235, 236, 237, 238, 244, 247, 248, 250, 253, 260, 261, 262, 263, 264, 265, 266, 268, 272, 276, 277, 278, 280], "follow": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 39, 40, 44, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 80, 87, 88, 90, 92, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 122, 125, 128, 132, 133, 134, 135, 137, 138, 139, 142, 145, 146, 147, 149, 150, 154, 155, 156, 157, 158, 159, 163, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 179, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 201, 208, 210, 211, 212, 214, 216, 217, 219, 222, 223, 230, 232, 233, 236, 237, 244, 247, 250, 252, 253, 254, 260, 261, 268, 271, 272, 273, 275, 277, 278, 280, 281], "convent": [1, 15, 57, 113, 122, 150, 187, 194, 233, 248], "torch": [1, 2, 3, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 28, 36, 37, 38, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 65, 67, 68, 72, 78, 80, 90, 93, 95, 96, 98, 102, 103, 104, 105, 107, 110, 112, 115, 117, 118, 120, 121, 123, 128, 132, 133, 134, 135, 136, 137, 141, 144, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 191, 193, 195, 196, 198, 200, 201, 207, 208, 210, 211, 212, 215, 216, 217, 218, 219, 220, 223, 224, 227, 228, 229, 230, 232, 233, 236, 237, 238, 244, 249, 250, 251, 253, 254, 261, 262, 263, 264, 265, 266, 267, 270, 271, 272, 280, 282, 283], "receiv": [1, 5, 7, 15, 18, 60, 93, 103, 109, 121, 149, 168, 170, 174, 176, 177, 178, 188, 191, 198, 247, 250, 263], "input": [1, 2, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 18, 23, 24, 25, 26, 28, 35, 36, 39, 40, 44, 47, 48, 49, 51, 53, 54, 61, 65, 67, 68, 70, 72, 73, 74, 77, 78, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 131, 133, 134, 137, 139, 140, 141, 142, 143, 145, 147, 149, 150, 151, 153, 156, 157, 158, 159, 162, 165, 167, 170, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 193, 195, 196, 200, 210, 212, 214, 217, 220, 222, 223, 224, 226, 228, 230, 235, 236, 237, 238, 246, 247, 250, 253, 254, 266, 272, 276, 278, 280, 281], "all": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 36, 37, 40, 41, 44, 45, 47, 48, 49, 51, 54, 55, 56, 57, 58, 60, 61, 65, 80, 87, 90, 95, 96, 98, 100, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 159, 162, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 190, 191, 193, 195, 196, 198, 199, 200, 207, 208, 210, 212, 214, 215, 216, 217, 219, 222, 223, 228, 231, 235, 237, 238, 244, 246, 248, 250, 252, 260, 261, 262, 264, 265, 266, 267, 268, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283], "necessari": [1, 4, 5, 6, 7, 10, 11, 13, 16, 21, 22, 26, 27, 42, 48, 57, 58, 60, 90, 93, 103, 104, 106, 113, 122, 133, 134, 137, 143, 147, 158, 170, 176, 177, 178, 184, 190, 195, 196, 209, 212, 214, 216, 247, 263, 268, 276], "inform": [1, 2, 4, 5, 6, 8, 10, 11, 15, 17, 23, 25, 26, 28, 35, 49, 54, 58, 80, 87, 93, 95, 100, 102, 103, 105, 109, 110, 112, 122, 133, 138, 139, 140, 141, 147, 149, 150, 153, 154, 155, 158, 173, 174, 175, 177, 179, 180, 184, 185, 187, 188, 190, 191, 193, 195, 198, 199, 200, 210, 212, 214, 219, 222, 223, 224, 230, 231, 232, 244, 247, 248, 262, 263, 265, 266, 276, 279, 280, 281], "return": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 21, 22, 24, 26, 28, 36, 37, 40, 41, 44, 49, 51, 54, 56, 57, 80, 87, 95, 96, 103, 104, 105, 107, 109, 110, 113, 115, 118, 120, 122, 133, 134, 135, 137, 141, 142, 144, 147, 149, 150, 153, 156, 158, 159, 162, 166, 170, 171, 173, 174, 175, 176, 177, 178, 179, 182, 184, 185, 187, 188, 190, 191, 193, 195, 201, 202, 207, 209, 211, 214, 216, 217, 222, 223, 226, 228, 229, 230, 232, 235, 236, 237, 238, 244, 246, 248, 250, 253, 262, 273, 276, 278, 280], "replay_buff": 1, "sampl": [1, 4, 7, 10, 36, 37, 40, 41, 44, 48, 51, 53, 54, 56, 57, 60, 65, 93, 98, 100, 102, 103, 105, 115, 122, 128, 132, 133, 140, 143, 149, 157, 158, 165, 166, 174, 175, 176, 178, 181, 187, 190, 193, 194, 212, 222, 226, 246, 253, 262, 263, 276, 283], "loss_dict": 1, "instanc": [1, 5, 6, 7, 12, 13, 15, 24, 25, 26, 28, 36, 42, 49, 58, 59, 60, 65, 87, 93, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 114, 121, 133, 134, 138, 139, 142, 145, 146, 147, 150, 156, 158, 168, 170, 174, 176, 177, 178, 188, 216, 219, 235, 236, 237, 244, 247, 253, 261, 262, 263, 268, 278, 280, 281, 282], "written": [1, 4, 5, 6, 7, 10, 11, 15, 17, 25, 26, 28, 90, 102, 108, 113, 114, 144, 150, 155, 162, 166, 167, 170, 179, 184, 187, 198, 199, 200, 207, 235, 237, 261, 273, 275], "under": [1, 5, 6, 10, 21, 22, 26, 35, 51, 54, 55, 57, 59, 61, 65, 102, 105, 107, 120, 121, 135, 137, 138, 142, 149, 157, 158, 166, 168, 172, 178, 184, 185, 193, 195, 199, 208, 210, 228, 230, 231, 233, 238, 244, 247, 272, 275], "loss_": 1, "smth": 1, "where": [1, 3, 4, 5, 7, 10, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 35, 37, 51, 54, 56, 65, 68, 73, 88, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 121, 132, 134, 137, 139, 140, 141, 144, 146, 147, 149, 151, 156, 159, 162, 165, 166, 167, 168, 170, 173, 174, 175, 176, 177, 178, 179, 180, 185, 188, 190, 191, 193, 194, 195, 196, 198, 200, 207, 210, 211, 217, 229, 232, 233, 235, 244, 247, 248, 250, 260, 261, 262, 266, 267, 278, 281], "string": [1, 4, 10, 16, 25, 26, 54, 56, 103, 115, 139, 140, 141, 150, 172, 174, 180, 187, 191, 198, 244, 248, 262], "describ": [1, 5, 6, 7, 10, 11, 15, 16, 18, 22, 23, 24, 25, 26, 42, 44, 53, 54, 57, 65, 80, 98, 105, 115, 118, 125, 131, 149, 162, 170, 174, 175, 178, 184, 187, 190, 191, 215, 219, 232, 235, 248, 281], "addit": [1, 2, 4, 6, 10, 12, 16, 19, 22, 55, 60, 80, 96, 103, 105, 110, 113, 115, 120, 134, 137, 138, 140, 147, 149, 151, 154, 156, 159, 172, 176, 177, 180, 185, 188, 190, 194, 207, 208, 209, 210, 214, 215, 216, 217, 223, 229, 233, 236, 237, 248, 253, 263, 274, 275, 277, 278, 281], "kei": [1, 4, 7, 10, 12, 15, 16, 54, 87, 108, 112, 115, 120, 122, 125, 134, 135, 136, 139, 150, 158, 168, 173, 174, 176, 179, 180, 184, 185, 187, 190, 191, 194, 196, 212, 216, 217, 226, 227, 235, 237, 252, 261, 263, 264, 274, 275], "mai": [1, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 24, 25, 26, 28, 40, 54, 55, 57, 73, 80, 90, 95, 96, 98, 100, 103, 107, 114, 118, 121, 122, 133, 136, 137, 138, 139, 142, 143, 144, 149, 150, 151, 153, 156, 157, 162, 165, 166, 168, 173, 174, 177, 180, 184, 187, 188, 190, 194, 195, 198, 209, 212, 217, 219, 224, 226, 230, 232, 248, 253, 263, 266, 273, 275, 276, 278], "metric": [1, 19, 93, 102, 103, 105, 120, 134, 184, 187, 193, 217, 238, 244, 248, 261], "log": [1, 21, 40, 54, 55, 57, 58, 80, 102, 104, 106, 107, 110, 112, 113, 133, 136, 139, 146, 173, 174, 176, 178, 182, 184, 185, 187, 190, 191, 211, 227, 231, 238, 267, 273, 279, 281], "dure": [1, 3, 10, 13, 15, 21, 22, 28, 35, 36, 40, 41, 42, 54, 57, 67, 68, 90, 95, 98, 100, 103, 104, 105, 107, 112, 113, 114, 121, 122, 132, 133, 134, 135, 137, 138, 141, 142, 143, 144, 145, 147, 150, 154, 155, 156, 162, 166, 173, 174, 175, 176, 178, 184, 188, 190, 193, 198, 199, 202, 211, 214, 215, 219, 223, 230, 233, 237, 244, 253, 260, 261, 268], "reason": [1, 6, 7, 10, 15, 16, 17, 19, 26, 28, 35, 57, 87, 95, 98, 105, 107, 110, 113, 122, 128, 138, 143, 149, 156, 174, 179, 180, 190, 191, 198, 200, 209, 217, 230, 248, 251, 252, 259, 267, 277, 283], "independ": [1, 26, 54, 112, 113, 157, 158, 162, 177, 207, 216, 235], "let": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 36, 40, 47, 48, 49, 51, 54, 56, 57, 73, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 122, 128, 135, 137, 139, 144, 147, 149, 150, 151, 154, 155, 156, 157, 159, 162, 165, 166, 167, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 196, 200, 202, 207, 208, 212, 217, 226, 230, 232, 235, 236, 246, 248, 250, 252, 253, 260, 261, 262, 263, 266, 268, 277, 278, 280], "user": [1, 3, 6, 15, 19, 21, 22, 25, 27, 28, 45, 48, 54, 55, 87, 88, 90, 96, 105, 109, 118, 125, 134, 135, 136, 137, 140, 141, 147, 154, 156, 159, 168, 176, 178, 179, 180, 182, 184, 187, 190, 191, 193, 194, 195, 196, 207, 208, 209, 210, 215, 216, 217, 224, 228, 229, 230, 231, 232, 233, 235, 237, 238, 244, 253, 267, 268, 270, 272, 273, 274, 281, 283], "differ": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 18, 19, 21, 22, 23, 25, 26, 27, 35, 40, 44, 51, 53, 54, 56, 57, 65, 78, 80, 87, 88, 90, 93, 96, 98, 100, 103, 104, 105, 106, 107, 112, 113, 115, 132, 133, 134, 135, 137, 139, 140, 141, 143, 146, 147, 149, 151, 155, 156, 157, 159, 162, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 194, 195, 198, 200, 201, 207, 208, 209, 210, 211, 212, 217, 219, 223, 229, 230, 231, 232, 233, 235, 236, 244, 248, 251, 253, 259, 261, 262, 263, 267, 268, 273, 276, 278, 281, 282, 283], "set": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 25, 26, 27, 28, 35, 40, 42, 47, 48, 51, 53, 54, 55, 57, 58, 60, 65, 67, 68, 73, 80, 87, 88, 92, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 117, 121, 122, 128, 132, 133, 134, 135, 137, 140, 141, 142, 145, 146, 147, 149, 150, 156, 158, 165, 166, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 188, 190, 191, 193, 194, 207, 209, 211, 212, 214, 216, 217, 223, 224, 229, 230, 232, 236, 237, 238, 244, 248, 249, 252, 260, 262, 264, 266, 273, 279, 281], "sum": [1, 2, 4, 5, 6, 8, 12, 15, 17, 21, 22, 24, 36, 40, 47, 54, 57, 87, 95, 96, 106, 107, 109, 133, 134, 135, 141, 142, 144, 149, 157, 175, 176, 177, 178, 182, 184, 188, 190, 191, 208, 226, 228, 229, 230, 235, 238, 248, 266, 282], "can": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 59, 60, 62, 65, 73, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 202, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 219, 220, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "simpli": [1, 3, 5, 6, 7, 10, 14, 22, 24, 26, 47, 48, 54, 58, 90, 98, 109, 112, 121, 122, 136, 137, 139, 141, 144, 149, 156, 157, 165, 171, 172, 174, 175, 176, 177, 180, 182, 184, 185, 188, 190, 191, 194, 195, 196, 198, 208, 216, 219, 222, 230, 237, 248, 262, 264, 265, 266], "done": [1, 4, 5, 6, 7, 10, 11, 15, 18, 19, 22, 23, 24, 25, 26, 28, 40, 54, 59, 87, 90, 100, 103, 105, 106, 107, 113, 115, 133, 134, 137, 138, 141, 143, 150, 151, 155, 156, 158, 159, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 185, 187, 190, 191, 198, 200, 217, 219, 233, 237, 252, 263, 277, 280], "via": [1, 3, 4, 6, 7, 8, 18, 19, 21, 23, 25, 26, 42, 59, 60, 80, 90, 105, 132, 133, 134, 137, 139, 149, 150, 157, 166, 173, 174, 179, 185, 187, 188, 190, 191, 193, 194, 199, 202, 211, 214, 217, 228, 232, 233, 236, 237, 238, 244, 252, 260, 261, 263, 267, 272, 275], "loss_val": 1, "item": [1, 2, 7, 11, 12, 16, 40, 44, 54, 73, 80, 104, 121, 122, 125, 133, 134, 135, 140, 141, 149, 150, 159, 173, 174, 176, 177, 178, 182, 185, 187, 190, 195, 235, 238, 247, 263], "startswith": [1, 88, 159], "parent": [1, 4, 15, 232], "As": [1, 2, 3, 5, 6, 7, 10, 11, 12, 13, 15, 18, 22, 23, 24, 25, 26, 28, 42, 47, 54, 55, 57, 80, 90, 93, 96, 98, 100, 103, 104, 105, 113, 115, 121, 122, 133, 134, 135, 136, 137, 138, 139, 147, 149, 150, 153, 154, 155, 156, 157, 158, 165, 166, 168, 170, 172, 174, 175, 176, 177, 178, 179, 184, 187, 190, 191, 193, 194, 195, 200, 210, 212, 216, 224, 228, 231, 236, 238, 244, 248, 252, 263, 268, 275, 280, 281, 282], "mani": [1, 2, 5, 6, 7, 11, 15, 16, 17, 19, 21, 26, 28, 35, 36, 40, 41, 54, 56, 57, 70, 74, 80, 87, 95, 96, 98, 100, 103, 105, 107, 108, 109, 113, 115, 117, 121, 134, 137, 139, 143, 149, 151, 157, 159, 162, 167, 168, 174, 176, 177, 180, 188, 190, 191, 194, 209, 217, 222, 237, 238, 246, 247, 248, 250, 263, 268, 275, 281], "other": [1, 6, 7, 10, 11, 12, 15, 19, 22, 24, 25, 26, 28, 35, 36, 39, 44, 48, 51, 53, 54, 57, 58, 60, 61, 62, 73, 74, 80, 87, 88, 93, 95, 96, 98, 103, 105, 107, 109, 110, 112, 113, 121, 122, 125, 133, 135, 136, 137, 140, 141, 143, 145, 146, 147, 149, 150, 153, 154, 155, 156, 157, 158, 162, 165, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 185, 188, 190, 191, 193, 194, 195, 198, 200, 207, 208, 209, 210, 212, 217, 219, 230, 232, 247, 248, 250, 252, 253, 260, 261, 262, 263, 264, 265, 266, 268, 272, 273, 274, 275, 276, 280, 282], "expect": [1, 4, 5, 6, 7, 11, 12, 15, 23, 25, 26, 49, 51, 54, 56, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 114, 122, 128, 136, 139, 143, 147, 150, 157, 158, 165, 166, 172, 173, 174, 175, 176, 177, 179, 187, 190, 191, 193, 195, 198, 214, 231, 237, 244, 246, 247, 248, 253, 260, 263, 276, 278, 282], "ani": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 22, 24, 25, 26, 35, 45, 47, 49, 51, 54, 56, 58, 60, 95, 98, 100, 103, 105, 106, 108, 109, 112, 113, 115, 117, 122, 131, 133, 135, 137, 138, 140, 142, 144, 145, 149, 151, 153, 154, 155, 158, 159, 165, 166, 167, 168, 170, 173, 174, 175, 177, 178, 182, 184, 187, 190, 191, 199, 201, 207, 208, 209, 210, 211, 214, 217, 219, 224, 226, 227, 229, 230, 232, 233, 235, 244, 247, 250, 252, 254, 260, 262, 266, 272, 273, 275, 276, 277, 279, 281], "similar": [1, 3, 4, 6, 10, 11, 12, 15, 16, 22, 25, 26, 44, 53, 54, 87, 88, 96, 98, 100, 103, 105, 106, 112, 113, 118, 121, 137, 140, 144, 149, 150, 166, 174, 176, 177, 178, 179, 180, 184, 185, 187, 190, 193, 195, 199, 207, 208, 209, 210, 211, 212, 236, 247, 248, 262, 263, 272, 278, 282], "structur": [1, 5, 6, 7, 10, 15, 20, 21, 22, 23, 24, 25, 26, 36, 41, 42, 44, 53, 54, 57, 58, 90, 95, 98, 100, 104, 105, 106, 110, 115, 122, 132, 142, 145, 151, 155, 158, 159, 166, 167, 172, 174, 178, 185, 187, 188, 193, 210, 215, 222, 261, 275, 277, 283], "format": [1, 6, 13, 19, 22, 23, 26, 28, 45, 56, 104, 113, 117, 122, 132, 133, 134, 136, 149, 155, 156, 173, 176, 178, 181, 182, 184, 185, 187, 191, 193, 207, 209, 210, 217, 224, 233, 237, 238, 246, 248, 267, 280, 283], "make": [1, 4, 5, 6, 7, 10, 11, 13, 15, 21, 22, 25, 26, 36, 40, 41, 45, 47, 48, 49, 54, 55, 56, 58, 59, 60, 62, 73, 80, 93, 95, 98, 100, 102, 103, 104, 105, 107, 108, 109, 111, 112, 113, 114, 117, 118, 122, 125, 128, 132, 133, 134, 135, 137, 139, 140, 141, 142, 143, 147, 149, 150, 154, 155, 156, 157, 158, 165, 166, 168, 171, 172, 174, 175, 176, 177, 178, 180, 185, 187, 188, 190, 191, 193, 194, 196, 198, 200, 207, 208, 209, 210, 212, 222, 228, 230, 231, 232, 233, 236, 237, 246, 247, 248, 252, 254, 261, 262, 263, 267, 272, 273, 275, 278, 280, 283], "possibl": [1, 2, 4, 5, 6, 7, 8, 10, 11, 15, 16, 19, 25, 26, 95, 96, 100, 103, 106, 109, 117, 135, 138, 142, 143, 144, 150, 151, 153, 155, 157, 158, 168, 173, 174, 176, 177, 180, 188, 190, 191, 193, 194, 198, 212, 217, 219, 224, 233, 235, 237, 238, 247, 252, 263, 275, 281], "re": [1, 4, 5, 6, 7, 8, 11, 15, 18, 22, 24, 25, 26, 27, 39, 41, 44, 48, 53, 54, 55, 80, 96, 98, 100, 102, 103, 104, 105, 106, 113, 121, 128, 138, 140, 141, 150, 151, 153, 157, 162, 165, 167, 168, 173, 174, 175, 176, 177, 180, 190, 191, 193, 199, 200, 207, 219, 222, 230, 232, 247, 248, 252, 262, 263], "across": [1, 4, 6, 10, 12, 15, 18, 21, 23, 27, 44, 54, 57, 59, 60, 61, 87, 96, 103, 105, 115, 131, 133, 134, 135, 137, 145, 146, 147, 149, 151, 158, 168, 170, 172, 175, 177, 178, 190, 191, 196, 227, 230, 232, 235, 246, 261, 263, 264, 266, 267, 272, 276, 278, 281, 282], "modal": [1, 168, 246], "complex": [1, 7, 26, 28, 36, 37, 55, 72, 73, 95, 96, 100, 105, 115, 121, 122, 131, 133, 147, 162, 166, 168, 176, 178, 185, 188, 190, 191, 198, 212, 220, 231, 232, 254, 264, 275], "read": [1, 2, 6, 7, 8, 15, 22, 25, 26, 41, 51, 54, 56, 80, 98, 109, 110, 113, 122, 128, 131, 134, 135, 136, 138, 139, 140, 141, 142, 149, 154, 156, 165, 168, 173, 174, 175, 177, 180, 182, 185, 188, 194, 199, 247, 248, 278, 281], "multipl": [1, 4, 6, 10, 11, 12, 15, 17, 18, 19, 21, 22, 23, 26, 44, 49, 53, 54, 58, 59, 60, 61, 65, 70, 87, 93, 95, 96, 100, 103, 104, 105, 109, 113, 121, 131, 133, 135, 137, 138, 139, 140, 141, 147, 149, 151, 156, 158, 168, 170, 173, 174, 176, 177, 178, 180, 184, 185, 187, 188, 190, 191, 194, 196, 198, 200, 211, 212, 217, 224, 230, 235, 236, 247, 248, 253, 262, 263, 264, 267, 277, 281], "entri": [1, 5, 12, 15, 26, 58, 109, 112, 120, 122, 145, 150, 156, 172, 174, 176, 184, 190, 198, 209, 210, 212, 216, 228, 265, 272], "In": [1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 39, 41, 42, 44, 47, 49, 53, 54, 55, 56, 57, 58, 60, 61, 62, 68, 73, 80, 87, 88, 90, 92, 93, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 122, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 154, 155, 156, 157, 158, 159, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 246, 247, 248, 250, 252, 253, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "word": [1, 7, 11, 12, 15, 48, 54, 80, 87, 96, 100, 105, 106, 108, 110, 111, 122, 132, 140, 141, 149, 163, 165, 166, 172, 178, 180, 191, 208, 210, 212, 278, 283], "allow": [1, 2, 5, 6, 7, 10, 11, 12, 13, 15, 22, 25, 26, 27, 28, 35, 36, 37, 47, 54, 55, 56, 57, 58, 87, 88, 90, 93, 95, 96, 100, 103, 105, 107, 109, 110, 112, 113, 114, 115, 121, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 147, 149, 150, 154, 158, 159, 162, 165, 166, 168, 171, 172, 174, 175, 176, 178, 179, 180, 182, 187, 188, 190, 191, 193, 194, 196, 198, 201, 207, 208, 212, 214, 223, 228, 232, 233, 235, 244, 247, 248, 253, 260, 261, 262, 272, 281], "u": [1, 4, 6, 7, 10, 11, 12, 15, 17, 19, 22, 23, 26, 28, 35, 37, 48, 51, 54, 56, 57, 74, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 112, 113, 118, 121, 134, 137, 140, 143, 145, 149, 150, 151, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 173, 174, 175, 177, 180, 185, 187, 188, 190, 191, 194, 200, 207, 208, 210, 212, 214, 217, 222, 226, 233, 235, 246, 248, 250, 252, 260, 262, 276], "oblivi": [1, 174], "type": [1, 4, 5, 6, 7, 10, 11, 15, 21, 22, 23, 24, 25, 26, 40, 44, 53, 54, 55, 56, 80, 87, 90, 96, 98, 99, 102, 104, 109, 113, 115, 118, 131, 133, 134, 137, 139, 151, 156, 159, 167, 168, 171, 172, 174, 176, 177, 178, 179, 184, 187, 188, 190, 194, 195, 207, 211, 214, 219, 224, 228, 229, 230, 233, 235, 237, 238, 244, 246, 260, 261, 263, 264, 271, 274, 281], "being": [1, 3, 4, 5, 6, 7, 11, 13, 15, 19, 23, 24, 26, 51, 54, 57, 87, 96, 104, 105, 106, 107, 109, 113, 115, 128, 134, 137, 139, 143, 149, 150, 166, 168, 170, 172, 174, 175, 177, 188, 190, 191, 208, 209, 212, 217, 219, 229, 237, 248, 252, 263, 277, 281], "run": [1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 51, 53, 56, 57, 61, 62, 65, 68, 73, 77, 78, 87, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 188, 191, 193, 194, 198, 200, 201, 207, 208, 209, 210, 211, 214, 215, 216, 217, 220, 222, 223, 224, 229, 230, 231, 232, 233, 236, 237, 244, 247, 248, 249, 252, 254, 260, 262, 263, 267, 268, 270, 272, 274, 275, 276, 277, 278, 279, 281, 283], "elementari": [1, 2], "onli": [1, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 21, 22, 23, 25, 26, 35, 42, 47, 48, 49, 51, 54, 58, 60, 61, 80, 87, 93, 95, 98, 100, 103, 105, 106, 107, 112, 113, 120, 122, 125, 128, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 178, 179, 180, 184, 185, 187, 188, 190, 191, 193, 194, 195, 199, 200, 207, 208, 209, 210, 211, 212, 214, 215, 216, 219, 222, 223, 226, 227, 228, 232, 233, 235, 244, 247, 248, 253, 260, 263, 264, 265, 268, 272, 275, 276, 278, 281, 282], "those": [1, 4, 5, 6, 7, 8, 11, 12, 15, 19, 35, 42, 47, 93, 95, 103, 106, 112, 113, 118, 136, 137, 138, 140, 151, 155, 165, 170, 171, 172, 178, 180, 185, 187, 190, 191, 200, 208, 217, 219, 222, 223, 224, 230, 238, 244, 247, 248, 262, 272, 275, 277, 281], "keep": [1, 4, 7, 11, 12, 15, 26, 35, 44, 47, 54, 56, 57, 80, 87, 90, 98, 100, 103, 105, 107, 109, 110, 113, 121, 122, 132, 133, 134, 135, 136, 137, 138, 141, 146, 147, 150, 156, 162, 168, 178, 180, 190, 191, 194, 248, 263, 282], "didact": [1, 149], "ll": [1, 4, 5, 6, 7, 10, 11, 17, 19, 22, 23, 25, 26, 36, 37, 39, 44, 53, 54, 55, 82, 83, 84, 85, 93, 95, 96, 98, 100, 102, 103, 104, 106, 113, 115, 135, 140, 141, 147, 149, 150, 151, 153, 157, 162, 165, 167, 173, 174, 175, 177, 180, 185, 190, 191, 194, 200, 207, 209, 211, 217, 226, 227, 235, 248, 274, 279], "displai": [1, 2, 6, 7, 13, 37, 48, 96, 102, 104, 120, 128, 143, 180, 184, 228, 231, 247, 248, 261], "each": [1, 2, 4, 6, 7, 10, 11, 12, 13, 15, 17, 18, 19, 21, 22, 24, 26, 27, 28, 35, 36, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 56, 57, 58, 60, 61, 65, 70, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 117, 120, 121, 122, 128, 131, 132, 133, 134, 135, 137, 139, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 153, 155, 157, 158, 159, 162, 165, 166, 167, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 190, 191, 193, 194, 196, 198, 199, 201, 207, 210, 212, 217, 227, 228, 231, 232, 233, 235, 237, 238, 244, 246, 247, 248, 250, 252, 253, 254, 260, 261, 262, 263, 265, 266, 278, 279, 281, 282], "popul": [1, 25, 35, 47, 54, 93, 103, 104, 134, 150, 158, 174, 176, 198, 227, 233, 235, 262, 273], "later": [1, 3, 4, 5, 6, 7, 12, 17, 26, 35, 44, 51, 54, 80, 93, 96, 100, 105, 109, 110, 113, 122, 133, 134, 136, 137, 141, 142, 144, 149, 151, 153, 154, 155, 156, 157, 158, 162, 167, 170, 174, 175, 178, 179, 180, 185, 187, 190, 191, 194, 196, 198, 199, 202, 207, 216, 226, 227, 229, 231, 235, 244, 247, 248, 249, 252, 260, 263, 268, 272, 273, 274, 275, 277, 278, 279], "stage": [1, 15, 18, 100, 113, 170, 201, 211, 223, 228, 229, 235], "start": [1, 5, 6, 7, 12, 18, 19, 21, 22, 26, 27, 28, 35, 39, 47, 48, 54, 55, 57, 58, 59, 60, 65, 80, 93, 95, 96, 99, 100, 103, 104, 105, 108, 109, 113, 114, 115, 118, 131, 132, 134, 136, 137, 138, 139, 140, 141, 142, 143, 149, 156, 157, 158, 165, 166, 168, 173, 175, 176, 177, 180, 184, 185, 187, 188, 190, 191, 193, 196, 198, 200, 202, 209, 214, 217, 218, 228, 229, 233, 236, 244, 248, 251, 253, 259, 261, 266, 267, 270, 272, 273, 275, 282, 283], "solv": [1, 7, 15, 54, 56, 105, 112, 128, 166, 174, 176, 178, 209, 248, 252, 263], "task": [1, 7, 14, 15, 19, 24, 27, 40, 41, 54, 104, 105, 106, 112, 120, 128, 131, 132, 133, 140, 150, 166, 168, 174, 175, 180, 182, 187, 193, 217, 248, 253, 262, 263, 272, 278, 281], "strategi": [1, 6, 19, 21, 27, 57, 87, 132, 141, 149, 156, 157, 167, 168, 176, 177, 217, 224, 229, 231, 232, 233, 238, 263], "predict": [1, 22, 23, 36, 39, 40, 41, 42, 47, 48, 54, 57, 67, 68, 72, 73, 74, 77, 78, 80, 95, 96, 98, 100, 104, 105, 106, 110, 112, 113, 137, 139, 140, 141, 151, 157, 158, 168, 175, 180, 185, 191, 193, 217, 236, 246, 250, 267, 278, 280], "henc": [1, 15, 19, 44, 47, 53, 87, 133, 138, 147, 159, 162, 168, 171, 174, 176, 178, 191, 217, 236, 237, 248, 278], "our": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 18, 19, 22, 23, 24, 25, 26, 28, 35, 36, 37, 39, 40, 41, 44, 45, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 65, 67, 68, 70, 72, 73, 74, 80, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 110, 112, 113, 115, 118, 120, 121, 128, 132, 133, 134, 136, 139, 140, 141, 142, 144, 145, 146, 150, 153, 155, 156, 157, 158, 159, 162, 166, 167, 168, 170, 172, 174, 175, 176, 177, 179, 180, 182, 185, 187, 188, 190, 191, 193, 194, 195, 196, 200, 202, 207, 208, 209, 210, 216, 217, 220, 222, 227, 229, 230, 233, 235, 236, 246, 248, 262, 267, 268, 273, 274, 282], "two": [1, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 35, 37, 40, 41, 44, 45, 47, 53, 54, 55, 57, 62, 80, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 120, 121, 128, 133, 134, 139, 140, 142, 143, 144, 146, 147, 149, 150, 153, 155, 156, 157, 158, 159, 162, 166, 167, 168, 170, 171, 172, 174, 175, 176, 178, 179, 180, 187, 191, 193, 194, 195, 196, 198, 200, 201, 208, 210, 212, 214, 217, 219, 220, 224, 228, 232, 233, 235, 236, 238, 244, 248, 250, 252, 253, 260, 262, 263, 264, 267, 273, 275, 277, 280, 281, 282], "constructor": [1, 7, 11, 12, 13, 24, 25, 26, 28, 72, 74, 90, 100, 104, 121, 133, 134, 147, 168, 171, 172, 174, 176, 178, 210, 219, 247, 248], "both": [1, 2, 5, 6, 7, 10, 11, 12, 13, 15, 18, 22, 23, 24, 25, 26, 27, 28, 37, 54, 56, 57, 65, 80, 87, 90, 96, 103, 104, 105, 112, 113, 120, 121, 134, 135, 137, 139, 143, 146, 147, 149, 153, 154, 156, 157, 159, 162, 168, 172, 174, 176, 177, 178, 179, 180, 190, 191, 193, 194, 195, 200, 201, 207, 210, 211, 228, 229, 230, 232, 236, 237, 238, 244, 246, 247, 248, 260, 262, 272, 273, 278, 280, 281], "compat": [1, 5, 6, 7, 10, 12, 19, 55, 102, 103, 109, 114, 136, 142, 150, 179, 188, 190, 216, 219, 233, 277, 278, 280], "comput": [1, 3, 4, 6, 7, 10, 12, 13, 14, 17, 18, 19, 22, 23, 24, 26, 27, 28, 40, 44, 48, 51, 53, 54, 56, 57, 58, 62, 65, 67, 68, 70, 73, 77, 78, 80, 88, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 113, 115, 117, 121, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 156, 158, 165, 166, 167, 168, 170, 172, 173, 174, 175, 177, 179, 180, 184, 187, 188, 190, 191, 193, 194, 196, 198, 200, 211, 212, 215, 217, 219, 222, 223, 224, 226, 227, 233, 235, 236, 244, 247, 248, 250, 252, 254, 262, 275, 278, 280, 281], "fit": [1, 7, 11, 12, 23, 65, 93, 112, 121, 133, 134, 135, 137, 147, 168, 178, 191, 247, 281], "gener": [1, 5, 6, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 58, 67, 68, 70, 72, 73, 74, 77, 78, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 123, 125, 128, 132, 137, 138, 140, 142, 143, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 172, 174, 175, 176, 178, 179, 180, 181, 182, 184, 185, 187, 188, 190, 191, 193, 194, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 214, 217, 220, 222, 224, 227, 229, 230, 235, 236, 237, 238, 244, 246, 247, 249, 250, 252, 253, 254, 260, 261, 262, 264, 265, 266, 267, 268, 273, 274, 275, 276, 277, 278, 279, 281, 283], "crucial": [1, 2, 13, 15, 26, 87, 109, 150, 168, 174, 191, 263], "convert_to_funct": 1, "extract": [1, 6, 23, 54, 57, 80, 102, 105, 128, 132, 140, 141, 153, 156, 167, 174, 180, 188, 190, 193, 228, 233, 235, 250], "convert": [1, 6, 11, 13, 22, 23, 25, 26, 36, 37, 44, 45, 48, 54, 56, 57, 60, 80, 98, 100, 103, 105, 113, 115, 117, 122, 132, 135, 140, 141, 173, 174, 176, 177, 182, 185, 191, 200, 207, 208, 210, 211, 212, 214, 215, 230, 233, 237, 246, 260, 263, 267], "strictli": [1, 103, 174], "speak": [1, 10, 47, 103, 138, 149, 263], "one": [1, 4, 5, 6, 7, 8, 10, 12, 13, 15, 16, 19, 21, 22, 24, 25, 26, 28, 35, 37, 39, 44, 45, 49, 51, 53, 54, 56, 57, 60, 61, 65, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 109, 110, 112, 113, 118, 121, 122, 125, 128, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 185, 187, 190, 191, 193, 195, 198, 199, 200, 207, 208, 209, 211, 212, 217, 222, 229, 230, 231, 232, 233, 248, 250, 252, 253, 263, 264, 266, 267, 275, 276, 277, 278, 281, 282], "perfectli": [1, 15], "howev": [1, 4, 6, 7, 8, 10, 11, 13, 15, 16, 17, 19, 23, 25, 26, 28, 35, 42, 49, 51, 54, 56, 57, 80, 90, 93, 105, 106, 121, 128, 137, 138, 142, 143, 144, 149, 150, 151, 155, 159, 165, 168, 171, 172, 175, 176, 177, 178, 179, 180, 185, 187, 188, 190, 191, 195, 201, 202, 208, 209, 212, 217, 222, 224, 230, 231, 235, 236, 248, 252, 260, 262, 263, 268, 275, 278, 281], "encourag": [1, 7, 22, 100, 175, 180, 187], "usag": [1, 3, 4, 5, 12, 14, 16, 24, 26, 40, 87, 95, 120, 132, 133, 135, 138, 149, 150, 156, 157, 170, 174, 176, 178, 179, 181, 184, 194, 196, 200, 202, 211, 212, 224, 229, 237, 244, 247, 261, 263, 267, 276, 280, 281, 283], "doe": [1, 2, 4, 6, 7, 10, 14, 15, 16, 17, 22, 25, 26, 28, 35, 45, 47, 51, 77, 78, 80, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 112, 113, 115, 118, 121, 122, 128, 133, 134, 135, 136, 142, 144, 147, 149, 150, 154, 157, 158, 159, 165, 166, 168, 170, 173, 174, 175, 177, 178, 179, 180, 184, 185, 188, 190, 191, 193, 194, 198, 199, 200, 208, 209, 210, 219, 222, 229, 233, 244, 247, 248, 252, 260, 262, 263, 275, 277, 281], "often": [1, 5, 6, 7, 11, 15, 19, 44, 54, 80, 93, 95, 96, 98, 103, 105, 107, 109, 112, 113, 121, 122, 137, 138, 139, 141, 158, 166, 190, 191, 198, 212, 217, 220, 226, 229, 233, 247, 262, 263], "same": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 16, 19, 22, 23, 24, 25, 26, 28, 35, 36, 42, 44, 47, 48, 54, 56, 57, 58, 60, 70, 78, 80, 90, 93, 95, 103, 104, 105, 107, 109, 110, 112, 113, 115, 118, 120, 121, 122, 133, 134, 135, 136, 137, 138, 140, 142, 143, 146, 147, 149, 151, 153, 156, 157, 158, 159, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 194, 195, 196, 199, 201, 207, 208, 209, 210, 212, 217, 229, 230, 244, 247, 248, 253, 255, 256, 257, 258, 260, 263, 266, 272, 273, 276, 277, 280, 281, 282], "usual": [1, 6, 7, 10, 17, 22, 26, 47, 96, 98, 100, 102, 103, 107, 108, 110, 112, 113, 128, 137, 138, 141, 143, 144, 147, 149, 150, 156, 159, 165, 168, 172, 174, 182, 190, 194, 222, 247, 252, 253, 263, 281], "former": [1, 6, 140, 141, 180], "some": [1, 3, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 23, 25, 26, 28, 35, 36, 37, 40, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 67, 73, 80, 87, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 118, 120, 121, 122, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 162, 165, 167, 168, 170, 172, 174, 175, 177, 178, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 196, 198, 200, 207, 208, 209, 210, 212, 214, 216, 217, 219, 220, 222, 230, 233, 237, 238, 247, 248, 250, 252, 253, 254, 262, 263, 264, 268, 275, 276, 278, 281], "lag": [1, 174], "absolut": [1, 7, 11, 87, 107, 172, 175, 262], "dilut": 1, "move": [1, 5, 6, 8, 13, 26, 29, 30, 31, 32, 33, 34, 36, 41, 44, 47, 51, 53, 80, 81, 94, 95, 107, 113, 133, 134, 135, 137, 146, 147, 150, 152, 165, 166, 168, 171, 175, 177, 178, 182, 183, 184, 186, 189, 193, 203, 206, 208, 223, 228, 229, 230, 236, 248, 262, 263], "averag": [1, 3, 22, 54, 57, 65, 87, 93, 96, 98, 104, 105, 113, 133, 136, 141, 149, 167, 175, 178, 180, 182, 184, 248, 263], "These": [1, 6, 10, 12, 13, 15, 19, 22, 23, 24, 28, 42, 47, 54, 57, 60, 65, 87, 93, 100, 108, 110, 112, 113, 120, 128, 149, 158, 174, 177, 179, 180, 187, 190, 191, 194, 200, 214, 217, 236, 248, 262, 263, 272, 273, 275], "associ": [1, 4, 6, 7, 10, 11, 36, 37, 55, 87, 96, 144, 153, 168, 172, 179, 187, 191, 199, 208, 217, 219, 250, 260, 263, 277], "One": [1, 2, 4, 5, 6, 7, 11, 12, 16, 24, 26, 54, 56, 80, 87, 95, 100, 103, 105, 106, 107, 109, 133, 134, 135, 136, 137, 138, 141, 147, 149, 151, 154, 165, 166, 168, 182, 185, 188, 190, 191, 193, 194, 198, 209, 222, 229, 230, 238, 248, 254, 260, 262, 263, 278], "advantag": [1, 3, 7, 15, 19, 26, 54, 90, 103, 106, 113, 131, 134, 135, 138, 149, 150, 166, 168, 174, 188, 194, 210, 217, 229, 230, 237, 244, 263, 273, 277], "match": [1, 5, 6, 11, 15, 19, 22, 23, 25, 56, 73, 98, 103, 105, 113, 115, 118, 121, 122, 151, 154, 156, 159, 165, 167, 174, 177, 188, 190, 208, 210, 217, 236, 237, 247, 250, 254, 264, 281], "exactli": [1, 6, 10, 11, 13, 19, 28, 35, 47, 56, 57, 98, 109, 112, 113, 115, 121, 150, 156, 166, 190, 191, 217], "current": [1, 4, 6, 7, 10, 11, 12, 13, 15, 16, 22, 25, 26, 36, 40, 41, 44, 54, 57, 67, 80, 87, 96, 105, 113, 117, 121, 128, 133, 134, 136, 138, 139, 140, 141, 149, 150, 153, 158, 159, 167, 168, 170, 172, 174, 175, 176, 177, 178, 179, 180, 184, 190, 191, 194, 195, 198, 207, 209, 210, 212, 230, 233, 236, 253, 263, 272, 275], "configur": [1, 5, 6, 7, 15, 21, 22, 23, 25, 26, 27, 54, 55, 87, 96, 104, 134, 137, 145, 147, 154, 156, 165, 174, 177, 184, 187, 191, 200, 202, 211, 228, 236, 237, 238, 263, 267, 268, 273, 275, 278, 281], "pessimist": [1, 174], "bound": [1, 26, 54, 122, 135, 139, 156, 174, 175, 184, 190, 191, 193, 194, 200, 247, 248, 253, 263, 281], "pai": [1, 11, 49, 54, 136, 263, 276], "attent": [1, 11, 49, 54, 100, 132, 136, 137, 140, 141, 163, 181, 182, 196, 200, 212, 215, 275, 283], "create_target_param": 1, "keyword": [1, 6, 172, 174, 187, 252, 260], "argument": [1, 2, 4, 5, 6, 7, 10, 15, 17, 24, 25, 26, 35, 41, 44, 47, 48, 53, 56, 60, 74, 87, 95, 96, 100, 102, 103, 105, 107, 110, 112, 114, 120, 121, 122, 133, 134, 141, 146, 147, 149, 150, 151, 156, 157, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 184, 187, 188, 190, 191, 195, 196, 198, 209, 211, 222, 223, 228, 231, 235, 247, 248, 252, 253, 260, 261, 263, 264, 275, 281], "below": [1, 2, 4, 5, 7, 11, 12, 13, 15, 18, 21, 22, 23, 26, 27, 37, 42, 44, 47, 49, 53, 56, 57, 58, 59, 60, 61, 62, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 125, 135, 136, 137, 139, 142, 143, 145, 146, 147, 149, 150, 153, 156, 159, 165, 171, 174, 175, 176, 177, 178, 179, 184, 185, 187, 188, 190, 191, 193, 194, 198, 200, 201, 202, 208, 209, 210, 211, 212, 214, 216, 219, 220, 227, 228, 229, 230, 231, 233, 235, 236, 238, 244, 247, 248, 252, 253, 268, 271, 272, 275, 276, 277, 278, 281, 282], "tell": [1, 17, 21, 26, 74, 93, 95, 98, 100, 104, 112, 113, 121, 139, 140, 150, 151, 153, 165, 175, 176, 178, 180, 190, 248, 253], "creat": [1, 2, 5, 6, 7, 11, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 39, 42, 44, 45, 47, 48, 51, 53, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 95, 96, 98, 100, 102, 104, 105, 106, 108, 110, 112, 114, 115, 118, 121, 122, 125, 132, 134, 135, 136, 137, 142, 144, 147, 149, 150, 153, 154, 158, 159, 163, 166, 167, 168, 170, 171, 173, 174, 175, 177, 178, 180, 184, 185, 187, 188, 190, 191, 193, 194, 196, 199, 200, 202, 207, 210, 212, 214, 219, 223, 226, 227, 229, 230, 232, 235, 236, 244, 247, 248, 250, 253, 254, 260, 261, 264, 265, 266, 267, 268, 275, 277, 278, 280, 282, 283], "If": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 21, 24, 25, 26, 27, 35, 36, 39, 41, 44, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 65, 67, 80, 87, 93, 95, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 121, 122, 125, 128, 133, 134, 135, 136, 137, 138, 141, 143, 147, 149, 150, 151, 153, 156, 157, 159, 165, 166, 167, 168, 171, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 193, 194, 195, 198, 199, 200, 201, 207, 208, 210, 211, 212, 216, 217, 219, 222, 223, 224, 229, 230, 233, 237, 238, 244, 246, 247, 249, 252, 253, 260, 261, 262, 263, 264, 266, 268, 275, 276, 281], "fals": [1, 2, 4, 7, 11, 12, 15, 22, 23, 26, 40, 42, 47, 60, 67, 68, 80, 87, 88, 95, 104, 109, 115, 121, 122, 128, 133, 134, 135, 137, 143, 153, 156, 159, 165, 166, 168, 173, 176, 177, 182, 185, 187, 188, 190, 195, 198, 201, 208, 209, 211, 214, 216, 217, 223, 226, 235, 236, 237, 238, 247, 260, 263, 264, 271, 278, 281, 282], "see": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 17, 19, 21, 22, 23, 24, 26, 27, 28, 36, 40, 41, 44, 48, 49, 51, 53, 54, 55, 56, 57, 60, 65, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 120, 122, 133, 134, 135, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 198, 200, 207, 209, 210, 211, 214, 215, 216, 217, 219, 220, 222, 223, 224, 227, 230, 231, 232, 233, 235, 236, 239, 244, 246, 247, 248, 253, 260, 261, 262, 263, 264, 265, 266, 272, 273, 274, 276, 277, 279, 280, 281], "target_actor_network_param": 1, "attribut": [1, 7, 12, 15, 25, 28, 35, 47, 51, 58, 80, 87, 90, 100, 112, 113, 118, 138, 150, 153, 159, 166, 170, 172, 190, 212, 215, 220, 224, 247, 266, 267, 278], "still": [1, 6, 7, 10, 11, 12, 13, 15, 16, 19, 21, 22, 23, 26, 51, 57, 80, 93, 95, 103, 105, 109, 113, 115, 120, 122, 134, 140, 141, 142, 147, 149, 150, 153, 154, 155, 159, 165, 168, 178, 188, 190, 191, 195, 196, 200, 201, 207, 209, 211, 217, 229, 230, 232, 236, 262, 263, 276, 282], "access": [1, 6, 7, 11, 15, 19, 22, 26, 36, 37, 55, 73, 80, 93, 95, 98, 100, 103, 104, 105, 110, 113, 121, 122, 132, 134, 138, 145, 149, 154, 166, 168, 173, 175, 177, 187, 190, 199, 207, 208, 210, 211, 214, 217, 229, 232, 244, 262, 266, 272], "just": [1, 2, 3, 4, 5, 6, 7, 10, 11, 15, 17, 18, 19, 22, 24, 25, 26, 28, 35, 48, 49, 51, 54, 55, 56, 57, 58, 61, 77, 78, 80, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 122, 128, 133, 134, 137, 139, 140, 141, 147, 150, 156, 157, 162, 165, 166, 168, 171, 172, 173, 174, 175, 176, 177, 178, 185, 187, 188, 190, 191, 193, 200, 201, 209, 217, 230, 232, 233, 237, 248, 249, 250, 262, 263, 266, 268, 281], "detach": [1, 2, 7, 12, 35, 80, 95, 103, 109, 136, 162, 167, 196], "version": [1, 3, 4, 5, 6, 7, 10, 11, 13, 15, 23, 25, 26, 28, 96, 98, 100, 103, 104, 113, 114, 115, 117, 118, 133, 134, 138, 149, 150, 151, 153, 157, 159, 166, 168, 170, 171, 172, 173, 174, 182, 184, 185, 187, 191, 193, 194, 198, 199, 200, 202, 207, 216, 223, 235, 236, 237, 238, 247, 248, 252, 262, 268, 273, 277, 280], "q": [1, 47, 54, 132, 137, 158, 179, 187, 217], "base": [1, 6, 7, 11, 12, 15, 18, 19, 21, 23, 26, 27, 28, 37, 48, 54, 62, 80, 90, 93, 95, 96, 100, 104, 105, 107, 115, 120, 122, 131, 132, 133, 134, 135, 136, 139, 140, 142, 150, 158, 168, 170, 171, 172, 175, 177, 180, 184, 185, 187, 190, 191, 193, 196, 201, 209, 211, 214, 215, 216, 217, 228, 236, 247, 260, 262, 263, 267, 273, 277, 278], "empir": [1, 162, 174], "bootstrap": [1, 150], "td": 1, "0": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 26, 28, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 60, 68, 69, 73, 75, 77, 78, 79, 80, 87, 90, 91, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 125, 128, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 187, 188, 191, 193, 194, 195, 196, 198, 199, 200, 201, 207, 208, 210, 211, 212, 216, 217, 218, 220, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 248, 249, 250, 252, 253, 254, 259, 260, 261, 262, 263, 268, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "low": [1, 4, 5, 6, 7, 15, 17, 23, 27, 28, 54, 57, 73, 87, 100, 107, 121, 132, 140, 184, 190, 194, 214, 237, 238, 262], "varianc": [1, 7, 22, 102, 174], "bia": [1, 2, 6, 7, 22, 47, 51, 73, 80, 107, 113, 121, 122, 133, 142, 143, 150, 157, 172, 174, 178, 179, 182, 194, 195, 211, 212, 217, 260], "mean": [1, 2, 4, 6, 7, 11, 13, 15, 22, 26, 28, 40, 51, 54, 56, 57, 73, 80, 87, 90, 95, 98, 100, 103, 104, 105, 106, 107, 109, 112, 120, 121, 122, 134, 137, 139, 140, 143, 147, 149, 159, 166, 168, 173, 174, 175, 177, 178, 180, 182, 184, 185, 187, 190, 191, 199, 207, 209, 212, 216, 222, 223, 224, 226, 230, 235, 248, 252, 253, 262, 263, 268, 278, 281], "obtain": [1, 27, 35, 40, 54, 73, 93, 113, 115, 121, 139, 140, 143, 149, 157, 167, 174, 175, 177, 184, 187, 193, 199, 253, 277], "reward": [1, 5, 15, 150, 158, 174, 175, 176, 178], "noth": [1, 26, 80, 98, 113, 144, 168, 178, 184, 195, 280], "els": [1, 5, 6, 10, 12, 21, 22, 26, 28, 51, 54, 56, 80, 93, 95, 104, 112, 114, 134, 135, 141, 149, 159, 170, 171, 176, 177, 178, 182, 185, 187, 188, 190, 196, 201, 211, 217, 228, 232, 233, 235, 247, 278, 280, 282], "mont": 1, "carlo": 1, "1": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 35, 36, 39, 40, 45, 47, 54, 56, 57, 58, 60, 68, 73, 80, 91, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 133, 134, 135, 137, 140, 141, 142, 143, 144, 145, 146, 147, 149, 151, 153, 154, 155, 156, 157, 158, 159, 163, 165, 166, 167, 172, 173, 174, 175, 176, 177, 178, 179, 182, 187, 188, 191, 194, 196, 198, 200, 201, 202, 207, 208, 209, 210, 211, 212, 215, 216, 217, 219, 220, 223, 224, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 247, 252, 254, 261, 263, 271, 272, 277, 278, 280, 281, 282], "case": [1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 14, 15, 18, 19, 23, 25, 26, 28, 35, 42, 47, 54, 56, 65, 73, 80, 87, 90, 95, 96, 102, 103, 105, 106, 107, 109, 110, 112, 113, 118, 121, 122, 131, 133, 134, 135, 137, 138, 139, 142, 143, 144, 149, 150, 151, 153, 156, 157, 159, 162, 165, 166, 167, 168, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 193, 194, 195, 196, 200, 207, 209, 210, 211, 212, 214, 216, 217, 219, 222, 223, 230, 233, 237, 246, 247, 248, 253, 254, 260, 262, 266, 268, 273, 275, 276, 278, 281], "whole": [1, 3, 28, 48, 51, 100, 113, 122, 132, 136, 149, 172, 174, 180, 191, 208, 222, 268], "sequenc": [1, 6, 7, 13, 24, 26, 44, 53, 54, 72, 73, 100, 106, 108, 111, 112, 121, 122, 132, 140, 141, 150, 163, 166, 174, 179, 181, 194, 196, 200, 212, 215, 222, 226, 227, 232, 235, 247, 253, 263, 283], "upcom": 1, "intermedi": [1, 28, 81, 95, 100, 103, 132, 145, 153, 156, 157, 158, 165, 168, 181, 189, 194, 217, 248, 254, 280], "lambda": [1, 6, 25, 113, 142, 173, 176, 190, 217, 235, 247, 248], "also": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 40, 41, 44, 47, 51, 53, 54, 56, 57, 58, 59, 65, 73, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 120, 121, 122, 133, 134, 136, 137, 138, 139, 140, 141, 143, 144, 147, 149, 150, 153, 155, 156, 157, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 193, 194, 195, 196, 198, 202, 207, 208, 209, 210, 216, 217, 219, 220, 222, 223, 224, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 247, 248, 249, 252, 253, 260, 261, 262, 263, 265, 266, 268, 272, 273, 274, 276, 277, 279, 280, 281, 282], "compromis": 1, "easi": [1, 2, 6, 7, 26, 27, 37, 48, 49, 56, 73, 95, 96, 103, 105, 107, 134, 135, 137, 139, 149, 154, 157, 162, 166, 170, 174, 184, 190, 191, 201, 217, 222, 237, 248, 262, 278], "valueestim": 1, "enum": 1, "pointer": [1, 6, 7, 8, 25, 26, 177], "defin": [1, 2, 6, 13, 15, 16, 17, 18, 19, 21, 23, 24, 26, 28, 35, 40, 41, 42, 45, 47, 49, 57, 66, 69, 70, 72, 73, 74, 80, 90, 93, 95, 100, 102, 104, 106, 107, 112, 113, 115, 118, 122, 132, 133, 134, 138, 140, 142, 145, 149, 150, 151, 154, 155, 158, 162, 165, 167, 168, 175, 176, 177, 179, 182, 184, 185, 188, 190, 194, 198, 207, 214, 216, 217, 226, 229, 230, 233, 235, 236, 237, 238, 251, 252, 253, 259, 260, 267, 268, 270, 274, 276, 277, 278, 282, 283], "default": [1, 3, 4, 6, 7, 10, 11, 12, 16, 19, 22, 23, 24, 27, 35, 40, 44, 47, 49, 54, 56, 57, 60, 67, 68, 87, 98, 100, 102, 103, 107, 109, 114, 118, 121, 128, 132, 133, 134, 135, 136, 137, 140, 149, 150, 151, 153, 154, 156, 159, 165, 168, 171, 173, 176, 177, 178, 182, 184, 185, 187, 188, 190, 191, 194, 195, 196, 198, 201, 210, 211, 214, 216, 219, 223, 224, 229, 230, 233, 236, 237, 244, 248, 251, 252, 253, 259, 261, 263, 266, 268, 271, 272, 273, 276, 278, 281, 282, 283], "here": [1, 2, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27, 28, 37, 40, 41, 44, 45, 48, 51, 53, 55, 56, 57, 58, 60, 74, 80, 86, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 120, 121, 122, 125, 128, 133, 134, 135, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 172, 174, 175, 177, 178, 179, 180, 184, 185, 188, 190, 191, 193, 194, 195, 202, 207, 209, 210, 211, 212, 214, 217, 227, 230, 231, 233, 236, 237, 238, 247, 248, 249, 252, 253, 263, 268, 273, 275, 278, 281], "take": [1, 2, 3, 4, 5, 6, 7, 10, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 36, 37, 44, 47, 48, 51, 53, 54, 55, 56, 57, 73, 80, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 109, 110, 112, 113, 118, 121, 122, 128, 136, 137, 138, 139, 140, 141, 142, 144, 147, 149, 155, 157, 158, 165, 168, 173, 174, 175, 176, 177, 178, 180, 184, 185, 187, 188, 190, 191, 193, 194, 196, 200, 202, 207, 210, 212, 214, 217, 222, 229, 230, 233, 236, 237, 238, 248, 249, 250, 253, 260, 262, 263, 264, 265, 266, 268, 273, 278, 280, 281], "simplest": [1, 7, 26, 35, 51, 95, 103, 107, 150, 174, 180, 263], "show": [1, 6, 11, 12, 17, 19, 21, 22, 25, 27, 48, 56, 57, 65, 80, 87, 88, 90, 93, 95, 96, 98, 100, 103, 104, 113, 118, 120, 133, 136, 139, 140, 141, 143, 144, 147, 150, 156, 159, 168, 171, 173, 175, 176, 178, 182, 184, 185, 187, 188, 190, 191, 194, 195, 207, 217, 227, 228, 229, 230, 232, 233, 237, 244, 247, 248, 253, 261, 262, 263, 268, 277, 278, 281, 282], "chang": [1, 2, 6, 7, 11, 12, 13, 15, 22, 24, 25, 26, 27, 35, 44, 47, 53, 55, 56, 57, 58, 60, 87, 88, 90, 93, 95, 96, 98, 99, 104, 105, 106, 108, 109, 110, 115, 122, 132, 133, 136, 137, 139, 140, 142, 145, 146, 149, 150, 153, 156, 157, 158, 165, 166, 168, 171, 172, 176, 182, 184, 187, 188, 190, 191, 194, 200, 201, 209, 211, 212, 214, 216, 223, 224, 227, 228, 229, 230, 235, 237, 238, 247, 248, 251, 259, 260, 261, 263, 264, 271, 276, 277, 278, 279, 281, 283], "instruct": [1, 7, 22, 26, 27, 39, 96, 99, 102, 104, 140, 141, 150, 153, 170, 172, 174, 176, 178, 180, 223, 224, 236, 237, 244, 246, 263, 267, 280, 281], "queri": [1, 15, 25, 54, 98, 103, 122, 136, 177, 179, 193, 194, 196, 212], "correspond": [1, 2, 3, 4, 6, 7, 10, 11, 13, 15, 16, 36, 37, 41, 47, 54, 60, 87, 95, 96, 100, 102, 107, 110, 120, 122, 133, 138, 139, 142, 156, 165, 170, 172, 174, 177, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 199, 210, 216, 238, 246, 252, 253, 263, 267, 281], "make_value_estim": 1, "central": [1, 10, 80, 95, 103, 104, 110, 112, 145, 266], "quit": [1, 7, 19, 26, 54, 80, 138, 149, 165, 174, 178, 190, 191, 207, 217, 229, 232, 235, 248, 262], "weight": [1, 2, 3, 5, 6, 7, 13, 14, 15, 19, 22, 23, 27, 35, 36, 47, 48, 54, 67, 68, 71, 73, 74, 75, 77, 78, 80, 95, 98, 100, 103, 104, 105, 107, 108, 110, 113, 122, 128, 132, 133, 140, 142, 143, 145, 150, 151, 154, 156, 157, 159, 165, 166, 167, 172, 174, 175, 178, 180, 182, 184, 187, 191, 194, 195, 200, 211, 214, 217, 219, 229, 233, 236, 238, 250, 260, 265, 266, 271, 278, 280, 283], "when": [1, 4, 6, 7, 10, 11, 12, 13, 15, 16, 17, 19, 21, 23, 24, 25, 26, 28, 35, 37, 40, 42, 44, 47, 48, 49, 51, 53, 54, 55, 57, 58, 60, 65, 80, 87, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 109, 112, 113, 114, 117, 118, 120, 121, 122, 132, 133, 134, 135, 136, 138, 139, 141, 142, 143, 146, 147, 149, 150, 153, 155, 156, 158, 159, 162, 165, 166, 168, 171, 172, 174, 175, 176, 178, 179, 180, 184, 187, 188, 190, 191, 193, 194, 198, 200, 207, 210, 211, 212, 214, 216, 217, 219, 220, 223, 224, 227, 228, 230, 231, 232, 236, 244, 247, 248, 250, 252, 253, 254, 260, 262, 263, 264, 266, 267, 272, 273, 275, 276, 278, 281, 282], "must": [1, 2, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 25, 26, 36, 37, 54, 57, 80, 90, 95, 96, 103, 106, 112, 117, 118, 122, 134, 147, 149, 150, 151, 153, 168, 174, 177, 184, 187, 188, 190, 191, 195, 198, 199, 207, 208, 210, 212, 219, 222, 228, 231, 252, 254, 260, 263, 275], "sure": [1, 5, 6, 7, 10, 11, 12, 15, 22, 25, 42, 56, 62, 93, 98, 102, 104, 105, 106, 112, 118, 122, 133, 137, 141, 142, 147, 149, 150, 155, 168, 174, 176, 187, 191, 208, 210, 222, 228, 237, 246, 247, 252, 261, 263, 272, 273, 275], "out": [1, 2, 4, 5, 6, 7, 10, 11, 12, 15, 16, 17, 19, 23, 24, 25, 26, 27, 28, 35, 39, 40, 44, 45, 47, 48, 49, 53, 54, 56, 57, 63, 64, 65, 80, 82, 83, 84, 85, 86, 88, 90, 93, 95, 96, 98, 100, 103, 105, 106, 108, 110, 113, 117, 120, 132, 133, 135, 136, 137, 138, 139, 140, 144, 145, 147, 149, 150, 151, 155, 156, 157, 159, 165, 168, 171, 172, 173, 174, 176, 177, 178, 180, 184, 185, 187, 190, 191, 194, 196, 198, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 217, 222, 223, 224, 225, 232, 237, 238, 240, 241, 242, 243, 245, 246, 251, 253, 259, 260, 263, 267, 273, 276, 277, 278, 281, 283], "graph": [1, 6, 11, 15, 17, 23, 25, 26, 28, 51, 54, 67, 70, 73, 77, 78, 87, 90, 92, 95, 106, 108, 114, 117, 118, 121, 132, 138, 140, 144, 154, 155, 156, 157, 159, 177, 178, 184, 185, 187, 194, 195, 201, 202, 223, 224, 233, 235, 237, 238, 250, 261, 268, 272, 273, 277, 279, 280], "otherwis": [1, 4, 10, 11, 22, 26, 36, 41, 54, 60, 67, 80, 87, 90, 103, 113, 121, 122, 128, 133, 138, 144, 147, 150, 156, 157, 159, 165, 174, 175, 177, 188, 191, 217, 222, 223, 228, 262, 276, 281], "mix": [1, 10, 16, 65, 120, 159, 214, 237, 238, 251, 259, 267, 283], "For": [1, 2, 4, 5, 6, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 28, 35, 40, 41, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 67, 68, 73, 80, 87, 88, 93, 96, 100, 102, 103, 104, 105, 106, 107, 108, 110, 112, 113, 115, 121, 122, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 146, 147, 149, 150, 151, 154, 155, 156, 158, 159, 166, 170, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 184, 187, 188, 190, 191, 193, 194, 195, 196, 198, 199, 200, 201, 207, 208, 209, 210, 212, 214, 216, 217, 219, 223, 224, 226, 227, 229, 230, 231, 232, 233, 235, 236, 237, 238, 244, 246, 247, 248, 250, 252, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 279, 280, 281, 282], "hold_out_param": 1, "now": [1, 2, 5, 6, 7, 10, 11, 12, 13, 16, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 40, 41, 47, 48, 49, 51, 54, 55, 56, 57, 60, 80, 90, 93, 94, 95, 96, 102, 103, 104, 105, 107, 109, 112, 113, 115, 118, 121, 128, 132, 134, 137, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 154, 155, 156, 157, 158, 162, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 178, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 196, 200, 202, 207, 208, 212, 214, 216, 217, 219, 222, 227, 229, 230, 233, 249, 250, 260, 261, 262, 265, 273, 280], "reli": [1, 3, 4, 7, 10, 15, 26, 42, 54, 95, 112, 138, 158, 165, 168, 172, 174, 190, 202, 209, 211, 224, 228, 263], "miss": [1, 56, 122, 142, 147, 150, 184, 188, 196, 208, 247, 262, 264, 281], "glue": [1, 178], "cost": [1, 6, 15, 54, 105, 107, 120, 133, 134, 137, 138, 142, 162, 184, 190, 229, 249, 263, 276, 277], "deliv": [1, 224, 237, 275], "most": [1, 2, 5, 6, 12, 15, 19, 25, 26, 28, 35, 39, 47, 54, 56, 57, 80, 93, 95, 96, 98, 100, 103, 107, 109, 110, 113, 120, 121, 122, 128, 131, 133, 137, 138, 139, 141, 143, 144, 149, 155, 156, 158, 159, 165, 168, 173, 174, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 194, 209, 210, 211, 217, 229, 237, 238, 246, 253, 260, 262, 263, 268, 272, 276, 278, 281], "first": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 39, 42, 45, 48, 49, 54, 55, 56, 57, 58, 60, 65, 73, 74, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 107, 109, 110, 112, 113, 118, 120, 121, 122, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 162, 165, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 180, 184, 187, 188, 190, 191, 193, 194, 195, 196, 198, 200, 202, 207, 209, 210, 212, 217, 220, 222, 228, 229, 230, 232, 233, 236, 238, 247, 248, 250, 252, 253, 260, 263, 268, 273, 275, 276, 277, 278, 281], "taken": [1, 7, 10, 15, 22, 25, 28, 87, 88, 100, 150, 165, 174, 187, 190, 200, 214, 254, 277], "care": [1, 4, 6, 15, 24, 80, 93, 95, 105, 144, 149, 168, 174, 178, 194, 207, 229, 248, 249, 262], "condit": [1, 15, 54, 60, 103, 110, 114, 133, 149, 166, 168, 188, 190, 216, 219, 233], "remaind": [1, 98, 153], "cheetah": 1, "goal": [1, 7, 15, 16, 48, 54, 57, 65, 80, 90, 105, 138, 139, 149, 150, 155, 174, 176, 178, 198, 207, 238], "half": [1, 10, 19, 128, 159, 170, 217, 247, 282], "fast": [1, 6, 7, 19, 21, 24, 54, 95, 113, 133, 137, 147, 162, 168, 174, 179, 187, 191, 194, 198, 200, 215, 217, 262], "dm_control": 1, "gym": [1, 15, 132, 150, 158, 174, 175, 176, 178, 194], "env": [1, 21, 136, 146, 149, 150, 174, 175, 176, 178, 196, 198, 223, 248, 262, 278], "gymenv": [1, 174], "halfcheetah": 1, "v4": 1, "dmcontrolenv": 1, "By": [1, 10, 19, 22, 28, 35, 44, 47, 67, 68, 87, 93, 95, 103, 109, 112, 113, 114, 121, 134, 137, 139, 149, 151, 153, 155, 156, 165, 172, 175, 184, 190, 198, 201, 208, 210, 212, 217, 223, 229, 230, 235, 244, 250, 253, 263, 268, 272, 273, 275, 278, 281], "disabl": [1, 12, 16, 104, 133, 134, 142, 158, 162, 173, 177, 179, 184, 188, 200, 207, 208, 209, 210, 216, 223, 230, 247, 272, 281], "render": [1, 7, 87, 96, 102, 158, 168, 174], "easier": [1, 19, 21, 26, 27, 55, 56, 106, 113, 133, 139, 156, 165, 176, 180, 185, 200, 207, 210, 217, 222, 230, 233, 248, 262, 275], "than": [1, 3, 4, 6, 7, 10, 11, 12, 13, 14, 15, 19, 22, 26, 28, 48, 53, 54, 55, 57, 58, 65, 72, 74, 80, 87, 90, 95, 98, 100, 103, 105, 106, 107, 109, 112, 113, 115, 121, 122, 128, 132, 133, 134, 136, 139, 141, 143, 146, 147, 149, 151, 156, 157, 158, 162, 165, 166, 167, 168, 173, 174, 175, 176, 184, 185, 187, 188, 191, 193, 194, 198, 200, 207, 212, 217, 220, 223, 224, 248, 252, 263, 264, 267, 272, 278, 281], "imag": [1, 22, 26, 36, 37, 39, 45, 47, 51, 54, 56, 57, 62, 80, 87, 93, 96, 98, 100, 103, 104, 105, 113, 132, 137, 142, 151, 158, 159, 165, 167, 175, 182, 184, 185, 191, 193, 212, 214, 223, 224, 232, 246, 250, 261, 264, 265, 267, 280], "focu": [1, 4, 7, 11, 21, 96, 105, 107, 117, 134, 137, 138, 174, 176, 178, 180, 190, 200, 208, 238], "pass": [1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 22, 25, 26, 28, 35, 36, 37, 40, 41, 42, 47, 48, 54, 56, 57, 58, 61, 67, 68, 70, 77, 78, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 113, 114, 121, 122, 132, 133, 134, 137, 138, 139, 140, 143, 144, 145, 147, 149, 150, 151, 153, 155, 158, 159, 162, 166, 167, 170, 172, 174, 175, 176, 177, 178, 180, 181, 182, 184, 187, 188, 190, 191, 194, 195, 196, 200, 207, 210, 219, 227, 228, 230, 231, 233, 235, 236, 247, 248, 252, 253, 254, 260, 263, 266, 282, 283], "pixel": [1, 23, 36, 45, 48, 80, 100, 103, 105, 150, 159, 182, 187, 278], "from_pixel": 1, "true": [1, 2, 4, 5, 6, 7, 11, 12, 13, 16, 17, 22, 25, 26, 27, 35, 37, 40, 42, 47, 51, 54, 56, 67, 68, 80, 87, 93, 95, 98, 103, 104, 109, 114, 115, 117, 120, 121, 122, 128, 133, 134, 135, 136, 137, 139, 142, 143, 144, 147, 149, 150, 153, 156, 159, 166, 173, 176, 177, 178, 179, 182, 184, 185, 187, 188, 190, 193, 194, 195, 196, 198, 201, 208, 209, 210, 211, 214, 216, 217, 223, 228, 229, 230, 235, 237, 238, 253, 260, 266, 268, 271, 275, 280, 281, 282], "pixels_onli": 1, "make_env": 1, "helper": [1, 6, 10, 18, 19, 26, 51, 56, 60, 96, 102, 104, 105, 106, 114, 133, 134, 139, 140, 141, 149, 150, 175, 176, 177, 178, 180, 182, 185, 187, 193, 217, 226, 227, 253, 278], "either": [1, 2, 4, 5, 6, 7, 10, 17, 22, 26, 48, 54, 78, 93, 104, 105, 113, 115, 117, 122, 128, 134, 137, 147, 150, 159, 172, 175, 176, 177, 184, 188, 190, 194, 210, 212, 216, 217, 220, 233, 237, 238, 244, 247, 253, 260, 263, 275, 280], "backend": [1, 6, 7, 12, 15, 21, 23, 27, 28, 58, 60, 131, 132, 139, 142, 146, 147, 150, 159, 173, 174, 181, 184, 188, 190, 191, 196, 202, 211, 215, 216, 224, 228, 236, 244, 247, 267, 274, 278, 283], "consid": [1, 4, 7, 11, 12, 15, 26, 35, 42, 54, 73, 80, 87, 121, 133, 135, 144, 147, 149, 159, 162, 165, 166, 168, 171, 176, 180, 184, 188, 190, 191, 193, 198, 207, 208, 209, 211, 222, 229, 252, 253, 254, 273], "abov": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 18, 22, 23, 25, 26, 47, 48, 54, 56, 57, 70, 72, 73, 80, 87, 95, 96, 98, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 121, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 149, 153, 156, 157, 158, 159, 162, 165, 166, 167, 168, 170, 172, 174, 176, 177, 178, 179, 184, 187, 188, 190, 191, 193, 195, 196, 198, 200, 202, 207, 208, 209, 210, 211, 216, 229, 230, 231, 232, 233, 236, 237, 238, 244, 246, 248, 252, 253, 260, 261, 272, 278, 281], "dm": [1, 141], "want": [1, 2, 4, 5, 6, 7, 8, 10, 11, 13, 15, 16, 18, 22, 24, 25, 26, 27, 35, 36, 37, 40, 42, 47, 48, 51, 54, 56, 57, 65, 67, 68, 72, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 121, 122, 128, 136, 137, 138, 139, 149, 150, 151, 153, 155, 157, 159, 162, 166, 168, 170, 172, 173, 174, 177, 179, 180, 182, 187, 188, 190, 191, 193, 194, 207, 209, 214, 215, 222, 230, 231, 238, 244, 247, 248, 252, 260, 262, 264, 275, 277], "modifi": [1, 3, 7, 11, 12, 15, 22, 41, 45, 47, 48, 57, 80, 105, 106, 115, 137, 140, 149, 155, 156, 171, 174, 176, 180, 190, 194, 195, 196, 220, 260, 276, 278], "represent": [1, 5, 11, 15, 26, 28, 47, 57, 90, 96, 100, 102, 105, 107, 110, 112, 114, 115, 117, 132, 139, 154, 155, 158, 180, 184, 185, 190, 191, 194, 212, 215, 220, 233, 248, 260, 262, 277, 280], "more": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 15, 16, 17, 19, 22, 23, 24, 25, 28, 37, 39, 40, 41, 44, 47, 48, 49, 53, 54, 55, 56, 57, 58, 60, 61, 65, 72, 80, 90, 96, 98, 100, 102, 104, 105, 106, 107, 109, 110, 112, 113, 115, 117, 120, 121, 122, 128, 131, 132, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 153, 154, 155, 158, 162, 165, 166, 168, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 185, 187, 188, 190, 191, 193, 194, 195, 198, 200, 207, 208, 209, 210, 212, 214, 215, 217, 220, 222, 223, 224, 228, 230, 231, 232, 233, 236, 237, 238, 244, 246, 252, 260, 262, 263, 268, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283], "friendli": [1, 5, 16, 26, 233, 247], "append": [1, 10, 15, 18, 21, 22, 24, 54, 80, 103, 120, 122, 134, 141, 149, 172, 174, 176, 177, 178, 180, 185, 217, 233, 235, 281], "special": [1, 11, 21, 25, 26, 44, 53, 80, 98, 100, 107, 109, 112, 113, 118, 138, 150, 159, 171, 172, 184, 187, 212, 214, 219, 230, 260, 263, 278], "torchr": 1, "transformedenv": [1, 15, 174], "common": [1, 5, 7, 10, 11, 15, 17, 19, 22, 40, 41, 48, 54, 56, 65, 87, 98, 103, 105, 107, 109, 112, 114, 122, 128, 132, 137, 147, 155, 158, 166, 168, 172, 173, 174, 179, 187, 190, 191, 193, 209, 212, 217, 233, 238, 248, 249, 262, 263, 264, 267, 268, 274], "rescal": [1, 56, 193, 200], "heurist": [1, 87, 198, 236, 275], "multipli": [1, 4, 6, 13, 22, 53, 54, 95, 96, 98, 103, 113, 154, 180, 262, 274], "5": [1, 2, 3, 6, 7, 12, 19, 26, 39, 40, 49, 52, 54, 57, 70, 80, 87, 90, 93, 98, 100, 102, 104, 107, 110, 111, 112, 117, 120, 121, 122, 133, 134, 141, 143, 147, 149, 156, 159, 173, 176, 177, 178, 182, 187, 190, 191, 193, 194, 198, 202, 216, 217, 219, 222, 224, 226, 232, 235, 236, 237, 238, 244, 261, 268, 271, 280], "interfac": [1, 4, 5, 6, 7, 15, 16, 23, 25, 26, 28, 54, 103, 113, 139, 146, 149, 174, 187, 191, 201, 237, 244, 278], "between": [1, 6, 7, 10, 12, 13, 15, 18, 19, 22, 24, 25, 26, 36, 44, 51, 53, 54, 70, 78, 80, 87, 88, 90, 93, 95, 98, 100, 103, 105, 106, 107, 110, 112, 113, 121, 132, 133, 135, 137, 139, 149, 150, 155, 159, 162, 168, 170, 172, 175, 177, 178, 179, 180, 185, 187, 188, 190, 191, 193, 194, 196, 198, 199, 200, 201, 207, 208, 210, 214, 215, 217, 229, 231, 247, 248, 249, 253, 263, 268, 278, 279, 282], "simul": [1, 19, 21, 22, 100, 142, 174, 217, 232], "work": [1, 2, 4, 5, 6, 7, 8, 13, 15, 17, 19, 21, 23, 24, 25, 26, 28, 39, 40, 47, 54, 55, 56, 57, 60, 61, 65, 80, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 108, 112, 113, 114, 117, 132, 138, 140, 141, 143, 144, 145, 147, 149, 150, 151, 153, 154, 155, 157, 165, 166, 167, 168, 171, 172, 173, 174, 176, 178, 179, 180, 184, 187, 190, 191, 193, 194, 198, 200, 207, 208, 209, 210, 217, 219, 220, 222, 223, 224, 229, 232, 236, 237, 247, 248, 253, 260, 262, 263, 268, 271, 272, 275, 278], "doubl": [1, 2, 4, 6, 7, 26, 40, 95, 102, 113, 120, 132, 143, 150, 158, 167, 174, 185, 236, 247], "precis": [1, 5, 10, 11, 16, 23, 65, 138, 143, 144, 159, 168, 174, 185, 214, 236, 237, 238, 251, 259, 267, 268, 283], "number": [1, 4, 6, 7, 12, 13, 16, 21, 22, 24, 26, 37, 40, 45, 48, 56, 57, 58, 60, 70, 87, 90, 93, 95, 98, 100, 105, 107, 109, 112, 113, 120, 121, 122, 133, 134, 136, 137, 138, 139, 140, 146, 147, 149, 150, 151, 153, 156, 157, 162, 166, 168, 170, 172, 173, 174, 175, 176, 177, 178, 184, 187, 188, 191, 193, 198, 200, 210, 211, 212, 222, 223, 226, 230, 236, 248, 250, 253, 262, 263, 273, 279, 281], "presum": 1, "singl": [1, 2, 4, 5, 6, 7, 10, 11, 12, 16, 19, 21, 23, 24, 25, 26, 41, 44, 47, 51, 56, 58, 59, 60, 61, 65, 90, 93, 95, 96, 100, 102, 103, 104, 105, 107, 113, 132, 133, 134, 135, 137, 140, 142, 143, 144, 145, 146, 147, 149, 150, 157, 158, 162, 167, 168, 170, 174, 175, 176, 177, 178, 180, 184, 187, 188, 190, 191, 194, 195, 196, 198, 200, 212, 217, 222, 230, 236, 248, 262, 263, 278, 281], "ones": [1, 2, 4, 5, 7, 12, 15, 17, 22, 24, 100, 103, 105, 149, 151, 155, 166, 167, 168, 170, 171, 174, 175, 184, 190, 194, 195, 208, 219, 233, 237, 262, 278], "goe": [1, 5, 6, 26, 56, 103, 106, 107, 132, 136, 144, 157, 171, 174, 177, 191], "wai": [1, 2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 23, 24, 25, 28, 35, 39, 41, 44, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 72, 77, 80, 87, 93, 95, 96, 98, 99, 103, 106, 107, 109, 112, 113, 115, 117, 118, 122, 131, 133, 137, 138, 139, 140, 144, 146, 147, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 170, 172, 174, 176, 177, 179, 182, 185, 190, 191, 193, 194, 195, 196, 200, 208, 209, 210, 212, 215, 219, 230, 233, 246, 249, 253, 254, 260, 263, 275], "repres": [1, 4, 6, 11, 13, 14, 21, 23, 24, 28, 36, 47, 54, 56, 57, 65, 67, 80, 87, 90, 95, 96, 98, 100, 104, 105, 112, 114, 115, 117, 120, 121, 133, 134, 135, 137, 139, 140, 142, 150, 153, 155, 158, 159, 174, 175, 178, 180, 187, 190, 191, 193, 194, 198, 207, 212, 248, 250, 260, 262], "doubletofloat": [1, 174], "in_kei": [1, 15, 150, 174], "list": [1, 4, 6, 7, 10, 12, 13, 15, 16, 18, 22, 23, 24, 27, 37, 41, 44, 48, 51, 53, 54, 55, 57, 73, 80, 93, 96, 100, 103, 109, 110, 112, 114, 115, 117, 118, 121, 138, 141, 149, 159, 166, 168, 173, 176, 177, 178, 180, 184, 185, 187, 188, 190, 191, 201, 209, 212, 214, 217, 223, 228, 232, 233, 235, 246, 248, 252, 253, 267, 272, 278, 281], "refer": [1, 4, 5, 6, 7, 8, 10, 14, 16, 19, 24, 25, 26, 27, 28, 35, 41, 65, 80, 87, 90, 95, 96, 103, 105, 107, 109, 110, 112, 114, 115, 117, 118, 120, 122, 133, 134, 135, 137, 138, 141, 142, 146, 147, 149, 156, 165, 168, 172, 174, 176, 177, 178, 184, 187, 190, 191, 193, 194, 198, 202, 207, 210, 214, 216, 217, 236, 238, 246, 247, 248, 250, 252, 253, 260, 263, 273, 275, 278, 280, 281], "float": [1, 4, 6, 7, 10, 12, 22, 26, 40, 56, 80, 98, 103, 109, 112, 120, 133, 134, 137, 139, 149, 159, 171, 172, 176, 178, 182, 190, 191, 193, 195, 198, 200, 201, 209, 210, 211, 223, 233, 235, 236, 238, 247, 253, 260], "while": [1, 2, 3, 5, 6, 7, 12, 13, 14, 15, 19, 22, 24, 26, 37, 40, 54, 57, 60, 87, 96, 103, 114, 115, 120, 131, 132, 134, 135, 136, 138, 139, 142, 145, 147, 149, 150, 156, 157, 159, 165, 168, 172, 173, 174, 177, 178, 179, 180, 182, 188, 190, 191, 194, 195, 198, 200, 207, 208, 209, 210, 211, 212, 214, 217, 229, 247, 248, 252, 253, 260, 268, 272, 275, 278], "in_keys_inv": [1, 15], "befor": [1, 3, 4, 6, 7, 10, 11, 12, 13, 15, 18, 22, 23, 25, 26, 28, 35, 40, 42, 47, 48, 49, 51, 54, 56, 57, 60, 65, 80, 90, 95, 96, 100, 105, 106, 107, 109, 110, 112, 113, 115, 117, 118, 120, 121, 122, 128, 132, 134, 135, 137, 139, 140, 142, 147, 149, 150, 153, 156, 158, 163, 165, 166, 168, 170, 172, 173, 174, 176, 177, 178, 180, 184, 185, 188, 190, 191, 193, 195, 198, 207, 208, 210, 216, 229, 232, 247, 248, 250, 252, 261, 263, 264, 265, 266, 268, 272, 273, 275, 276, 281, 282], "concaten": [1, 15, 44, 53, 54, 109, 110, 137, 141, 175], "cattensor": 1, "leav": [1, 10, 17, 19, 35, 47, 54, 56, 58, 90, 95, 139, 165, 166, 173, 217, 236, 260], "constant": [1, 2, 7, 26, 28, 44, 53, 87, 93, 95, 103, 107, 115, 136, 150, 166, 175, 185, 188, 190, 211, 217, 235, 263], "significantli": [1, 22, 110, 131, 137, 143, 168, 188, 200, 214, 220, 254, 273, 281], "speed": [1, 6, 7, 11, 15, 22, 23, 35, 37, 40, 53, 54, 90, 95, 98, 99, 105, 113, 131, 132, 134, 135, 137, 140, 145, 150, 151, 156, 159, 168, 173, 174, 176, 179, 188, 194, 200, 201, 214, 215, 220, 224, 228, 229, 233, 248, 261, 263, 267, 277, 278, 281], "throughput": [1, 134, 168, 263, 281], "choos": [1, 10, 11, 13, 16, 54, 57, 60, 65, 70, 93, 96, 107, 117, 121, 122, 136, 137, 141, 147, 149, 158, 166, 173, 174, 175, 180, 184, 187, 191, 193, 196, 200, 202, 228, 244, 247, 253, 268], "whether": [1, 7, 10, 11, 12, 15, 25, 54, 57, 95, 96, 98, 102, 103, 105, 113, 115, 122, 144, 149, 155, 158, 165, 168, 174, 176, 184, 185, 187, 190, 195, 210, 248, 253, 263, 264], "individu": [1, 6, 7, 13, 24, 28, 36, 54, 90, 95, 96, 100, 121, 135, 137, 139, 143, 167, 168, 172, 177, 180, 185, 188, 190, 191, 194, 195, 244, 247, 248, 263, 273], "approach": [1, 4, 5, 6, 7, 8, 25, 26, 28, 42, 61, 96, 113, 117, 122, 136, 140, 145, 166, 167, 168, 174, 175, 177, 180, 188, 190, 193, 198, 207, 210, 211, 214, 222, 238, 248, 260, 267, 268], "parallelenv": [1, 174], "num_work": [1, 48, 56, 93, 133, 134, 182, 184, 185, 263], "4": [1, 2, 3, 4, 6, 7, 10, 13, 17, 18, 20, 24, 26, 27, 39, 40, 49, 56, 58, 59, 60, 67, 68, 70, 75, 80, 93, 96, 98, 100, 102, 103, 104, 106, 107, 109, 112, 113, 119, 121, 132, 133, 134, 136, 142, 143, 145, 146, 149, 150, 156, 158, 159, 165, 170, 172, 175, 176, 177, 178, 182, 187, 188, 190, 193, 194, 196, 198, 200, 202, 210, 215, 224, 229, 232, 236, 261, 268, 272, 273, 278, 281, 283], "leverag": [1, 7, 54, 80, 105, 118, 122, 132, 134, 137, 147, 149, 157, 193, 201, 211, 215, 216, 231, 232, 233, 235, 263, 264, 267, 277, 281], "vector": [1, 2, 5, 6, 7, 13, 15, 25, 26, 35, 54, 57, 87, 95, 96, 100, 102, 103, 105, 107, 109, 110, 112, 113, 140, 141, 142, 150, 153, 167, 171, 180, 191, 201, 211, 222, 224, 236, 237, 263, 275, 280], "capabl": [1, 3, 12, 16, 19, 54, 80, 137, 159, 168, 179, 184, 217, 224, 226, 227, 235, 247, 263], "pytorch": [1, 2, 4, 10, 12, 15, 17, 19, 20, 21, 24, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 49, 53, 54, 56, 57, 58, 60, 61, 63, 64, 66, 69, 71, 75, 76, 79, 80, 81, 82, 83, 84, 85, 88, 89, 90, 93, 95, 96, 105, 106, 111, 113, 114, 116, 117, 122, 123, 125, 128, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 162, 163, 165, 167, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 188, 189, 190, 196, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 220, 221, 222, 226, 227, 228, 229, 230, 231, 232, 233, 235, 240, 242, 243, 246, 247, 248, 249, 252, 255, 256, 257, 258, 259, 260, 262, 268, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283], "adopt": [1, 23, 27, 65, 165, 171, 177, 216, 238], "frame_skip": [1, 174], "frame": [1, 7, 150, 158, 173, 174, 184, 198, 278], "count": [1, 7, 12, 22, 25, 40, 48, 54, 87, 107, 149, 150, 174, 178, 180, 184, 187, 231], "frames_per_batch": [1, 174], "total_fram": [1, 174], "adjust": [1, 15, 22, 35, 40, 41, 47, 57, 80, 95, 98, 104, 137, 139, 140, 162, 176, 263], "total": [1, 6, 12, 13, 14, 15, 17, 18, 19, 20, 24, 28, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 69, 73, 75, 77, 78, 79, 80, 88, 90, 91, 93, 95, 98, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 118, 119, 120, 123, 125, 128, 134, 136, 138, 139, 140, 141, 143, 149, 150, 151, 153, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 172, 173, 174, 175, 177, 179, 180, 181, 182, 184, 187, 188, 190, 191, 193, 194, 200, 207, 208, 209, 210, 218, 227, 228, 235, 236, 238, 248, 249, 252, 253, 254, 259, 260, 262, 268, 270, 274, 275, 276, 277, 279, 281, 283], "rais": [1, 10, 12, 17, 22, 80, 114, 136, 137, 138, 141, 156, 159, 173, 174, 188, 190, 229, 233, 263, 276, 278], "skip": [1, 5, 6, 11, 15, 19, 22, 26, 47, 106, 122, 144, 153, 158, 176, 178, 184, 188, 190, 194, 215, 216, 217, 228, 248, 253, 266, 281], "unchang": [1, 10, 88, 95], "seem": [1, 48, 57, 138, 140, 150, 168, 170, 191, 248], "like": [1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 17, 18, 19, 21, 23, 24, 25, 26, 28, 36, 37, 40, 41, 44, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 65, 73, 87, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 120, 121, 125, 128, 131, 132, 133, 137, 138, 139, 141, 144, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 159, 162, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 179, 180, 184, 185, 187, 190, 191, 193, 194, 195, 201, 208, 209, 210, 214, 215, 216, 217, 222, 223, 224, 230, 231, 232, 233, 236, 237, 238, 244, 246, 247, 248, 249, 250, 253, 262, 263, 272, 273, 274, 275, 276, 278, 280, 281], "cheat": [1, 103, 132, 180], "compar": [1, 6, 11, 16, 19, 22, 23, 26, 40, 48, 88, 96, 103, 105, 110, 113, 118, 128, 133, 135, 136, 137, 139, 149, 155, 156, 157, 159, 162, 165, 167, 168, 172, 174, 175, 176, 178, 180, 184, 187, 188, 190, 194, 196, 199, 200, 201, 207, 215, 217, 224, 228, 229, 235, 236, 237, 252, 261, 262, 263, 267, 276, 277, 281], "dataset": [1, 7, 19, 27, 35, 36, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 54, 57, 58, 60, 62, 80, 96, 100, 105, 107, 123, 128, 131, 132, 133, 134, 139, 140, 141, 145, 149, 151, 167, 168, 173, 177, 179, 180, 182, 184, 185, 187, 191, 214, 217, 237, 238, 239, 250, 263, 267, 271, 278, 283], "10m": 1, "element": [1, 6, 7, 13, 19, 22, 41, 44, 53, 54, 80, 95, 96, 100, 103, 107, 109, 110, 112, 132, 138, 149, 156, 162, 166, 174, 187, 190, 193, 208, 209, 210, 212, 217, 248, 250, 263], "2": [1, 2, 3, 4, 6, 7, 10, 12, 13, 15, 16, 17, 18, 20, 21, 23, 24, 26, 27, 36, 39, 40, 47, 54, 56, 57, 58, 60, 67, 68, 69, 73, 74, 79, 80, 93, 95, 96, 98, 103, 104, 105, 106, 107, 109, 112, 114, 117, 118, 121, 122, 125, 128, 132, 133, 134, 135, 137, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 156, 157, 159, 163, 165, 167, 172, 173, 174, 175, 176, 177, 178, 179, 182, 187, 188, 190, 191, 194, 196, 198, 199, 200, 201, 202, 207, 212, 215, 216, 219, 223, 224, 226, 227, 228, 231, 232, 233, 235, 236, 237, 238, 247, 249, 252, 260, 263, 268, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283], "anoth": [1, 4, 5, 6, 10, 12, 15, 23, 24, 26, 28, 35, 44, 47, 53, 54, 57, 67, 80, 90, 98, 100, 103, 104, 106, 110, 113, 120, 121, 122, 132, 141, 142, 143, 144, 146, 149, 150, 153, 154, 166, 168, 172, 174, 176, 177, 178, 179, 180, 188, 190, 191, 193, 195, 200, 223, 246, 248, 253, 263, 264, 281], "actual": [1, 3, 6, 7, 10, 12, 14, 15, 16, 22, 24, 25, 26, 28, 35, 42, 54, 56, 57, 80, 90, 98, 105, 106, 109, 112, 118, 132, 135, 138, 139, 140, 143, 147, 149, 154, 155, 165, 168, 174, 180, 184, 185, 188, 190, 191, 199, 200, 207, 209, 222, 248, 274], "ratio": [1, 56, 87, 105, 156, 168, 174, 184, 193], "interact": [1, 6, 7, 15, 54, 56, 96, 102, 103, 139, 142, 144, 158, 174, 177, 182, 185, 188, 190, 191, 231, 275], "nutshel": [1, 209], "cautiou": 1, "about": [1, 4, 5, 6, 7, 10, 11, 15, 16, 19, 22, 23, 24, 25, 26, 39, 40, 41, 44, 47, 54, 57, 58, 59, 60, 62, 77, 78, 80, 93, 95, 98, 100, 102, 103, 105, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 128, 131, 132, 134, 136, 139, 140, 141, 144, 146, 147, 149, 151, 154, 155, 156, 157, 165, 167, 168, 173, 174, 175, 176, 178, 179, 180, 182, 184, 187, 188, 190, 191, 193, 194, 198, 199, 200, 208, 209, 210, 215, 216, 217, 220, 229, 231, 232, 233, 251, 252, 259, 260, 262, 265, 267, 273, 277, 278, 283], "deal": [1, 6, 48, 54, 56, 57, 98, 105, 113, 121, 122, 134, 157, 168, 174, 190, 191, 231, 238, 265], "lead": [1, 4, 6, 7, 15, 17, 54, 57, 80, 87, 93, 105, 113, 140, 142, 144, 150, 168, 190, 209, 222, 229, 260, 263, 268, 281], "bias": [1, 36, 47, 100, 105, 122, 179, 194, 260, 265, 266], "comparison": [1, 19, 24, 88, 96, 103, 104, 105, 106, 133, 156, 157, 196, 200, 207, 209, 212, 214, 217, 262], "scale": [1, 7, 22, 36, 45, 56, 61, 80, 100, 102, 105, 115, 131, 132, 133, 134, 136, 147, 149, 150, 158, 170, 174, 175, 181, 182, 191, 195, 196, 200, 231, 232, 238, 247, 263, 268, 275, 280, 283], "help": [1, 4, 6, 10, 11, 16, 19, 21, 22, 25, 26, 35, 36, 47, 54, 57, 73, 87, 93, 96, 105, 106, 109, 110, 112, 113, 122, 131, 132, 133, 134, 139, 146, 147, 150, 151, 156, 157, 162, 165, 171, 174, 175, 176, 177, 178, 179, 180, 187, 188, 190, 191, 198, 200, 208, 209, 210, 212, 214, 216, 217, 222, 226, 228, 229, 230, 232, 233, 235, 238, 244, 246, 247, 248, 250, 261, 263, 264, 267, 273, 275, 276, 279, 281], "signal": [1, 47, 96, 98, 174, 176, 253, 262], "magnitud": [1, 19, 95, 172, 191, 217, 247], "truncat": [1, 103, 120, 156, 174, 217], "A": [1, 6, 7, 10, 12, 13, 15, 19, 24, 25, 28, 35, 36, 37, 41, 44, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 72, 73, 74, 77, 78, 80, 87, 88, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 114, 121, 122, 131, 132, 134, 138, 139, 140, 141, 144, 145, 149, 151, 155, 159, 165, 166, 167, 174, 175, 176, 177, 179, 180, 181, 182, 185, 187, 188, 190, 191, 194, 198, 199, 211, 212, 216, 217, 230, 236, 237, 248, 252, 260, 263, 265, 273, 275, 278, 280, 281, 283], "thousand": [1, 112, 131, 137, 140, 150, 180, 187], "500": [1, 7, 27, 56, 141, 159, 170, 175, 178, 182, 248], "good": [1, 2, 5, 6, 7, 23, 24, 48, 55, 57, 98, 102, 103, 105, 112, 115, 132, 133, 139, 149, 150, 156, 162, 173, 175, 179, 181, 185, 187, 190, 191, 193, 194, 211, 244, 248, 263, 268, 281, 283], "statist": [1, 57, 98, 104, 132, 143, 154, 155, 172, 174, 180, 184, 185, 187, 238, 248], "arbitrari": [1, 6, 10, 15, 17, 35, 78, 96, 105, 110, 134, 151, 158, 167, 185, 188, 194, 253, 254], "random": [1, 7, 15, 18, 22, 23, 24, 28, 44, 47, 48, 49, 51, 53, 56, 57, 67, 68, 70, 77, 78, 80, 96, 98, 102, 109, 110, 113, 114, 115, 120, 121, 128, 133, 134, 139, 141, 142, 147, 149, 151, 158, 162, 165, 166, 172, 174, 175, 176, 178, 180, 185, 188, 228, 235, 248, 250, 254, 263], "standard": [1, 6, 10, 23, 26, 28, 44, 48, 53, 57, 80, 87, 93, 96, 98, 105, 106, 107, 113, 115, 117, 118, 149, 173, 182, 188, 190, 191, 193, 200, 212, 250, 263], "deviat": [1, 80, 87, 98, 105], "observationnorm": [1, 174], "init_stat": 1, "purpos": [1, 6, 23, 24, 25, 62, 80, 90, 95, 100, 104, 121, 133, 138, 139, 141, 149, 150, 154, 155, 156, 165, 170, 173, 174, 177, 178, 184, 188, 191, 198, 200, 208, 211, 230, 238, 260, 263, 268, 272], "get": [1, 2, 6, 7, 8, 10, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 37, 39, 47, 48, 49, 54, 55, 56, 57, 60, 61, 65, 80, 88, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 113, 114, 115, 120, 121, 122, 128, 131, 132, 134, 136, 137, 139, 140, 141, 142, 149, 151, 154, 155, 157, 165, 166, 167, 168, 171, 172, 173, 174, 175, 176, 177, 180, 182, 184, 185, 187, 190, 191, 193, 198, 199, 200, 202, 207, 214, 216, 217, 218, 223, 224, 228, 229, 233, 236, 244, 248, 253, 263, 266, 267, 268, 278, 280, 281, 282, 283], "summari": [1, 87, 112, 139, 150, 168, 174, 184, 190, 261, 262], "dummi": [1, 4, 10, 17, 23, 90, 98, 104, 147, 151, 157, 167, 170, 171, 191, 214, 230, 238, 278, 280], "over": [1, 4, 5, 6, 7, 11, 12, 15, 17, 19, 21, 22, 23, 25, 26, 36, 37, 40, 41, 44, 48, 51, 53, 54, 55, 56, 57, 58, 60, 80, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 113, 120, 121, 132, 133, 134, 135, 136, 137, 140, 142, 146, 147, 149, 151, 154, 155, 156, 157, 158, 159, 162, 167, 172, 174, 175, 176, 177, 178, 179, 180, 184, 185, 187, 188, 190, 191, 193, 194, 196, 200, 211, 217, 222, 236, 247, 263, 266, 276, 277], "earlier": [1, 5, 6, 7, 25, 26, 80, 98, 100, 103, 106, 107, 110, 113, 133, 135, 137, 150, 165, 168, 174, 180, 190, 247, 248], "turn": [1, 5, 6, 7, 10, 15, 16, 22, 23, 26, 28, 45, 54, 96, 100, 103, 120, 141, 150, 157, 165, 166, 168, 172, 176, 180, 191, 201, 208, 209, 211, 233, 280], "seen": [1, 11, 12, 21, 22, 48, 51, 54, 56, 100, 103, 105, 110, 112, 113, 120, 150, 167, 177, 188, 190, 191, 211, 248, 275], "requir": [1, 2, 4, 5, 6, 7, 10, 11, 13, 15, 16, 17, 21, 22, 23, 25, 26, 27, 28, 39, 45, 47, 54, 55, 56, 57, 60, 65, 88, 90, 93, 95, 99, 104, 112, 113, 117, 118, 133, 137, 139, 141, 143, 144, 146, 147, 149, 150, 151, 153, 154, 157, 162, 165, 166, 167, 168, 170, 173, 174, 176, 177, 178, 179, 180, 187, 188, 190, 191, 193, 194, 198, 199, 200, 201, 202, 208, 209, 210, 214, 219, 222, 224, 226, 227, 229, 230, 232, 236, 237, 238, 247, 249, 250, 252, 253, 260, 262, 263, 268, 272, 273, 274, 275, 276, 279], "select": [1, 4, 6, 11, 26, 55, 87, 93, 102, 105, 113, 115, 159, 172, 175, 176, 178, 184, 185, 188, 190, 198, 202, 209, 211, 215, 217, 223, 236, 253, 263, 273, 275], "recal": [1, 7, 26, 57, 95, 103, 106, 112, 147, 174, 185, 208, 209, 210, 260, 262], "wrap": [1, 4, 6, 7, 11, 18, 25, 28, 37, 41, 49, 93, 98, 107, 109, 110, 115, 120, 133, 135, 138, 143, 147, 150, 154, 158, 168, 174, 177, 178, 187, 190, 191, 199, 226, 227, 230, 231, 244, 247, 253, 282], "flow": [1, 5, 6, 15, 24, 26, 28, 35, 47, 57, 71, 75, 90, 102, 105, 115, 116, 117, 118, 132, 135, 174, 175, 184, 188, 199, 214, 263, 267, 283], "handl": [1, 6, 10, 11, 17, 26, 54, 57, 58, 90, 100, 103, 113, 114, 118, 132, 133, 140, 151, 163, 167, 168, 170, 172, 173, 174, 177, 178, 179, 187, 188, 190, 191, 207, 209, 212, 222, 224, 229, 230, 237, 246, 252, 253, 262, 278, 281], "specifi": [1, 4, 5, 6, 7, 10, 12, 17, 19, 22, 23, 25, 26, 27, 37, 41, 56, 57, 87, 93, 95, 96, 98, 100, 103, 104, 109, 114, 121, 133, 134, 135, 136, 137, 139, 140, 144, 150, 151, 153, 171, 172, 174, 177, 178, 182, 184, 187, 190, 195, 196, 207, 208, 209, 210, 212, 214, 215, 217, 222, 223, 228, 238, 252, 253, 261, 263, 264, 272, 275, 277, 278, 280, 281], "scenario": [1, 5, 7, 15, 114, 115, 117, 118, 122, 128, 138, 168, 175, 178, 190, 198, 211, 236, 260, 264, 281], "tensordictsequenti": [1, 150], "valueoper": 1, "automat": [1, 2, 4, 6, 7, 10, 11, 16, 25, 28, 36, 38, 39, 41, 44, 47, 49, 50, 51, 53, 58, 62, 65, 102, 104, 106, 113, 121, 125, 132, 133, 134, 135, 137, 138, 139, 144, 154, 156, 159, 168, 170, 174, 175, 178, 181, 182, 184, 187, 190, 191, 196, 198, 216, 224, 228, 229, 230, 233, 236, 237, 238, 244, 249, 251, 252, 253, 259, 262, 263, 267, 275, 283], "out_kei": [1, 15, 150, 174], "state_action_valu": 1, "state_valu": 1, "built": [1, 4, 5, 6, 7, 8, 10, 20, 25, 26, 35, 51, 95, 96, 98, 100, 107, 132, 140, 149, 150, 174, 179, 185, 188, 190, 193, 233, 238, 246, 248, 250, 266, 273, 283], "present": [1, 7, 10, 21, 25, 40, 87, 88, 105, 114, 166, 171, 172, 175, 176, 178, 187, 188, 190, 193, 212, 263, 282], "origin": [1, 6, 7, 10, 13, 15, 19, 22, 23, 26, 35, 54, 57, 80, 93, 96, 103, 105, 110, 114, 115, 135, 137, 138, 140, 141, 162, 163, 166, 167, 168, 172, 175, 187, 188, 190, 195, 200, 201, 210, 214, 217, 235, 237, 238, 244, 278], "paper": [1, 6, 13, 18, 19, 57, 80, 125, 134, 137, 174, 175, 177, 179, 180, 182, 191, 194, 212, 217], "found": [1, 4, 5, 6, 7, 11, 18, 25, 26, 28, 54, 55, 96, 105, 135, 139, 141, 147, 149, 150, 154, 155, 159, 168, 177, 178, 179, 187, 190, 212, 223, 237, 244, 263, 278], "ddpgmlpactor": 1, "ddpgmlpqnet": 1, "sinc": [1, 3, 4, 5, 6, 10, 11, 12, 14, 15, 18, 22, 23, 24, 26, 48, 54, 56, 57, 58, 80, 90, 95, 96, 98, 105, 106, 107, 109, 110, 112, 113, 115, 128, 135, 136, 137, 139, 140, 141, 142, 144, 145, 149, 150, 154, 155, 165, 166, 168, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 185, 187, 188, 190, 191, 193, 194, 195, 200, 207, 208, 209, 224, 226, 228, 229, 230, 244, 248, 252, 253, 254, 266, 268, 276, 278, 282], "lazi": 1, "materi": [1, 133, 137, 157, 191, 194, 199, 207, 219, 254, 260], "abl": [1, 3, 4, 5, 6, 7, 15, 16, 19, 26, 35, 36, 54, 67, 80, 90, 98, 105, 106, 108, 112, 113, 121, 128, 139, 143, 144, 145, 146, 149, 150, 151, 156, 158, 159, 165, 167, 174, 177, 185, 188, 190, 191, 193, 194, 198, 209, 217, 224, 235, 250, 260, 266, 275, 278], "devic": [1, 3, 4, 7, 10, 11, 12, 15, 17, 18, 19, 21, 22, 23, 26, 28, 44, 47, 48, 49, 53, 54, 55, 57, 58, 60, 61, 65, 68, 78, 80, 93, 103, 105, 107, 115, 121, 131, 132, 133, 135, 137, 139, 140, 146, 147, 149, 150, 156, 159, 165, 168, 170, 172, 173, 174, 177, 178, 182, 184, 191, 193, 195, 196, 198, 199, 201, 202, 214, 216, 217, 219, 226, 227, 229, 230, 232, 235, 236, 237, 248, 251, 253, 254, 259, 260, 264, 266, 267, 273, 274, 275, 277, 278, 279, 282, 283], "achiev": [1, 3, 4, 7, 15, 19, 22, 27, 35, 48, 54, 61, 87, 93, 105, 132, 135, 138, 143, 149, 150, 156, 165, 166, 168, 172, 174, 175, 184, 191, 194, 195, 199, 200, 217, 220, 228, 236, 263, 267, 275, 277, 281], "oper": [1, 5, 7, 14, 15, 16, 19, 20, 21, 22, 23, 24, 28, 35, 36, 41, 47, 49, 51, 54, 56, 65, 67, 68, 78, 87, 88, 90, 98, 99, 103, 105, 106, 107, 112, 113, 114, 115, 116, 117, 120, 121, 132, 133, 135, 136, 137, 138, 140, 142, 144, 149, 150, 151, 153, 154, 156, 157, 159, 162, 167, 170, 171, 173, 174, 176, 180, 184, 185, 187, 188, 190, 191, 194, 200, 207, 208, 211, 214, 215, 217, 220, 222, 223, 230, 231, 233, 235, 236, 237, 244, 246, 247, 248, 250, 253, 254, 262, 266, 267, 273, 274, 275, 278, 281, 282, 283], "practic": [1, 6, 7, 12, 23, 26, 40, 42, 51, 54, 56, 57, 95, 96, 98, 103, 105, 107, 113, 114, 121, 125, 128, 132, 137, 138, 145, 150, 156, 159, 166, 172, 174, 175, 190, 194, 207, 208, 212, 248, 249, 252, 263, 268, 277, 278, 281], "small": [1, 3, 6, 7, 19, 21, 23, 24, 26, 27, 28, 47, 48, 51, 62, 80, 95, 98, 100, 102, 103, 105, 107, 108, 110, 115, 121, 128, 133, 134, 136, 139, 140, 141, 143, 155, 165, 166, 168, 173, 174, 175, 178, 180, 182, 187, 191, 193, 198, 200, 207, 217, 236, 247, 248, 250, 263, 278, 279], "fake": [1, 7, 19, 22, 28, 51, 57, 165, 190, 212, 217], "spec": [1, 118, 150, 174, 178, 190, 195, 248], "ornsteinuhlenbeckprocessmodul": 1, "suggest": [1, 4, 5, 13, 57, 92, 105, 135, 141, 156, 157, 158, 159, 162, 184, 187, 198], "ou": 1, "nois": [1, 7, 13, 57, 80, 231, 262], "reach": [1, 11, 19, 57, 65, 105, 140, 147, 149, 158, 159, 174, 178, 190, 217, 238, 248], "minimum": [1, 4, 87, 135, 174, 178, 209], "iter": [1, 3, 5, 7, 12, 13, 15, 27, 35, 36, 40, 41, 47, 48, 51, 57, 58, 60, 90, 93, 95, 96, 98, 100, 104, 106, 113, 115, 122, 139, 141, 142, 145, 147, 150, 154, 156, 174, 175, 176, 177, 178, 182, 184, 185, 188, 191, 193, 227, 244, 247, 261, 263, 266, 276, 278, 282], "reset": [1, 22, 40, 98, 103, 113, 128, 141, 150, 174, 175, 176, 178, 184, 188, 201, 238, 279], "develop": [1, 3, 4, 5, 6, 10, 11, 13, 16, 24, 25, 26, 27, 28, 87, 90, 96, 109, 113, 115, 117, 142, 149, 159, 171, 178, 184, 188, 194, 195, 200, 201, 202, 207, 210, 211, 220, 230, 231, 233, 235, 237, 238, 251, 263, 280], "tight": [1, 114, 115, 117, 118], "per": [1, 4, 6, 7, 10, 12, 22, 105, 112, 132, 134, 140, 141, 143, 147, 149, 150, 157, 159, 165, 170, 172, 178, 179, 180, 181, 184, 185, 187, 190, 191, 193, 196, 198, 199, 207, 222, 224, 228, 229, 230, 233, 238, 248, 252, 262, 272, 281, 282, 283], "sync": [1, 11, 12, 18, 60, 132, 133, 134, 135, 136, 158, 191], "natur": [1, 6, 7, 19, 21, 26, 27, 28, 49, 80, 100, 105, 113, 139, 140, 150, 168, 177, 187, 209, 212, 217, 224], "resourc": [1, 58, 80, 93, 115, 117, 133, 147, 149, 165, 174, 184, 187, 198, 233, 235, 248, 263, 268, 271, 281], "alloc": [1, 7, 21, 24, 25, 26, 44, 53, 60, 103, 143, 149, 165, 168, 184, 190, 191, 212, 219, 230, 252, 253, 282], "gpu": [1, 3, 5, 13, 19, 21, 22, 23, 44, 47, 51, 53, 54, 55, 57, 58, 59, 61, 62, 65, 68, 78, 87, 88, 98, 99, 103, 104, 105, 107, 115, 121, 125, 128, 131, 132, 133, 134, 135, 137, 138, 140, 145, 146, 147, 149, 150, 151, 156, 159, 162, 165, 167, 170, 174, 175, 177, 178, 179, 187, 188, 193, 196, 198, 199, 201, 202, 214, 215, 217, 218, 223, 224, 226, 229, 230, 233, 244, 247, 248, 253, 266, 267, 273, 275, 283], "worker": [1, 7, 12, 18, 56, 57, 98, 131, 133, 134, 136, 149, 159, 174, 177, 178, 184, 228, 233, 263], "so": [1, 2, 3, 4, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 48, 51, 54, 56, 57, 58, 70, 73, 80, 88, 90, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 115, 120, 121, 128, 132, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 149, 150, 154, 156, 157, 158, 165, 166, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 184, 187, 188, 190, 191, 193, 194, 195, 198, 199, 200, 207, 209, 210, 211, 212, 217, 219, 223, 233, 235, 236, 237, 244, 247, 248, 252, 262, 263, 266, 267, 276, 277, 278, 281, 282], "syncdatacollector": [1, 174], "process": [1, 4, 5, 6, 7, 12, 13, 15, 16, 18, 19, 21, 23, 25, 26, 27, 28, 37, 40, 41, 45, 51, 54, 55, 56, 57, 61, 65, 80, 87, 90, 95, 96, 98, 100, 104, 105, 113, 114, 115, 122, 125, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 145, 146, 149, 150, 155, 156, 158, 159, 167, 168, 173, 175, 177, 178, 179, 180, 184, 187, 190, 191, 198, 199, 200, 211, 214, 215, 216, 217, 220, 224, 228, 229, 230, 232, 238, 248, 250, 252, 253, 262, 263, 264, 266, 267, 272, 277, 278, 279, 281, 282], "offer": [1, 4, 8, 12, 15, 17, 21, 41, 45, 47, 58, 65, 95, 96, 107, 134, 135, 137, 151, 153, 156, 157, 168, 191, 194, 230, 233, 246, 248, 253, 262, 263, 268, 281], "multiasyncdatacollector": [1, 174], "rollout": [1, 174], "asynchron": [1, 24, 131, 132, 136, 139, 171, 174, 178, 253, 267], "manner": [1, 6, 10, 15, 22, 35, 95, 113, 174, 187, 191, 233], "therebi": [1, 201, 207, 212, 278], "decoupl": [1, 37, 166], "factori": [1, 7, 103, 109, 208, 209, 249, 252], "empti": [1, 4, 6, 7, 10, 15, 22, 24, 26, 103, 141, 156, 159, 173, 180, 184, 187, 190, 194, 199, 219, 223, 253, 262], "maximum": [1, 12, 54, 87, 100, 110, 139, 141, 150, 156, 174, 179, 180, 211, 263], "non": [1, 2, 3, 6, 10, 12, 15, 22, 25, 36, 54, 56, 58, 59, 61, 87, 90, 100, 103, 105, 106, 108, 112, 113, 122, 134, 135, 139, 143, 144, 149, 150, 153, 157, 159, 162, 172, 176, 179, 180, 184, 188, 191, 194, 200, 207, 214, 219, 230, 248, 260, 264, 277, 281], "termin": [1, 15, 26, 58, 93, 174, 175, 177, 178, 187, 223], "max_frames_per_traj": [1, 174], "effect": [1, 6, 7, 10, 12, 17, 26, 60, 80, 87, 96, 100, 103, 105, 113, 118, 137, 140, 141, 147, 151, 165, 167, 168, 172, 175, 179, 180, 187, 191, 209, 222, 229, 231, 247, 263, 268, 277], "regist": [1, 8, 17, 25, 40, 47, 51, 100, 118, 120, 122, 132, 134, 135, 137, 147, 153, 165, 166, 174, 190, 198, 199, 224, 233, 237, 244, 247, 254, 265], "new": [1, 2, 4, 5, 6, 7, 8, 10, 13, 15, 17, 25, 26, 27, 28, 34, 35, 39, 44, 47, 49, 53, 54, 55, 57, 60, 66, 69, 80, 82, 83, 84, 85, 87, 90, 102, 103, 104, 105, 107, 110, 112, 117, 118, 120, 122, 128, 132, 133, 134, 135, 136, 138, 142, 150, 153, 154, 156, 158, 165, 166, 167, 168, 171, 172, 174, 175, 176, 179, 180, 184, 187, 190, 191, 193, 195, 198, 199, 201, 202, 207, 212, 215, 222, 223, 224, 233, 244, 253, 260, 263, 264, 267, 269, 283], "stepcount": [1, 150, 174], "infer": [1, 3, 7, 8, 10, 11, 22, 23, 24, 25, 26, 42, 44, 53, 54, 96, 98, 100, 104, 105, 109, 112, 113, 115, 132, 135, 138, 139, 142, 143, 154, 156, 174, 176, 187, 188, 190, 191, 193, 211, 212, 214, 215, 217, 220, 223, 224, 230, 238, 244, 250, 251, 265, 267, 268, 275, 278, 281], "manual": [1, 4, 6, 10, 13, 17, 25, 26, 37, 51, 54, 58, 74, 77, 78, 103, 105, 113, 121, 122, 135, 144, 150, 151, 166, 167, 168, 170, 190, 191, 212, 224, 228, 232, 235, 244, 247, 263, 281], "around": [1, 6, 7, 12, 26, 27, 37, 41, 54, 60, 96, 98, 100, 103, 105, 128, 132, 141, 151, 156, 157, 162, 167, 180, 184, 185, 190, 191, 199, 207, 208, 236, 254], "1m": [1, 141, 150, 174, 196], "outer": [1, 7, 134, 157], "loop": [1, 3, 5, 6, 10, 12, 18, 22, 24, 28, 39, 41, 48, 51, 54, 56, 57, 80, 90, 95, 98, 102, 105, 113, 121, 133, 135, 139, 140, 142, 151, 156, 157, 158, 165, 167, 168, 177, 178, 185, 191, 217, 236, 248, 253, 263, 266], "equal": [1, 5, 11, 95, 103, 105, 138, 159, 172, 174, 175, 187, 190, 198, 210, 233, 278, 281], "length": [1, 13, 15, 54, 57, 95, 96, 100, 112, 113, 115, 137, 141, 174, 179, 180, 191, 194, 196, 209, 212, 215, 217, 222, 233, 267, 277], "sub": [1, 7, 23, 28, 95, 120, 137, 142, 170, 174, 178, 184, 188, 191, 232, 272, 281], "shape": [1, 4, 5, 17, 19, 26, 35, 44, 47, 53, 54, 56, 57, 73, 90, 95, 98, 105, 106, 109, 112, 120, 121, 134, 137, 140, 141, 142, 151, 153, 157, 159, 167, 174, 184, 187, 191, 193, 194, 200, 210, 212, 217, 219, 236, 244, 248, 251, 253, 259, 267, 272, 273, 275, 276, 278, 283], "env_per_collector": 1, "traj_len": 1, "perform": [1, 3, 5, 7, 10, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 24, 26, 28, 35, 36, 40, 41, 45, 47, 48, 49, 54, 61, 68, 77, 80, 87, 90, 93, 95, 98, 100, 103, 104, 105, 106, 107, 112, 113, 122, 131, 132, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 149, 150, 153, 154, 157, 158, 162, 168, 170, 171, 174, 175, 176, 178, 181, 182, 185, 187, 188, 190, 191, 193, 194, 196, 199, 200, 201, 207, 208, 212, 214, 215, 217, 219, 224, 226, 228, 232, 233, 235, 237, 244, 247, 248, 249, 251, 252, 253, 259, 262, 266, 267, 268, 271, 275, 277, 278, 279, 280, 283], "assess": [1, 168, 191], "mode": [1, 5, 13, 23, 40, 42, 47, 54, 56, 57, 60, 80, 87, 90, 92, 96, 102, 104, 122, 132, 134, 142, 143, 144, 150, 154, 156, 158, 159, 162, 170, 176, 179, 180, 181, 182, 185, 187, 188, 190, 191, 194, 195, 198, 214, 215, 230, 233, 236, 238, 248, 263, 267, 270, 277, 278, 281, 283], "dedic": [1, 11, 60, 103, 177, 178, 246, 247, 282], "frequenc": [1, 88, 139], "everi": [1, 2, 7, 10, 11, 15, 16, 19, 21, 22, 27, 35, 36, 37, 41, 47, 48, 51, 54, 56, 57, 60, 65, 95, 98, 100, 102, 103, 104, 128, 137, 138, 140, 141, 143, 149, 150, 153, 159, 165, 166, 167, 168, 172, 174, 175, 176, 178, 180, 184, 185, 188, 190, 191, 212, 217, 226, 249, 261, 263, 274, 282], "10": [1, 3, 5, 7, 10, 12, 19, 22, 26, 36, 37, 40, 45, 47, 48, 49, 54, 56, 58, 80, 88, 93, 98, 104, 115, 120, 122, 133, 134, 136, 141, 142, 147, 149, 151, 159, 173, 176, 177, 178, 179, 180, 182, 184, 185, 187, 190, 191, 194, 195, 198, 200, 202, 215, 217, 219, 223, 226, 228, 229, 232, 235, 236, 238, 244, 248, 250, 253, 261, 262, 278], "come": [1, 6, 7, 11, 19, 22, 23, 25, 26, 45, 56, 57, 80, 90, 93, 95, 100, 103, 105, 106, 118, 122, 133, 137, 139, 149, 150, 156, 165, 166, 168, 171, 174, 179, 188, 190, 191, 194, 200, 217, 238, 248, 273, 282], "flavor": [1, 4, 6, 26], "priorit": [1, 212, 263], "error": [1, 4, 5, 6, 7, 10, 11, 12, 13, 17, 25, 40, 41, 47, 51, 54, 55, 58, 73, 95, 98, 100, 103, 105, 109, 113, 117, 118, 121, 134, 136, 138, 144, 165, 171, 174, 175, 188, 191, 194, 198, 200, 207, 216, 232, 237, 248, 260, 263, 266, 276, 280], "higher": [1, 22, 23, 48, 53, 58, 87, 95, 96, 100, 105, 107, 121, 133, 134, 140, 141, 144, 153, 157, 173, 174, 175, 184, 185, 187, 190, 191, 214, 220, 222, 224, 227, 232, 235], "likelihood": [1, 40, 54, 100, 107, 113], "regular": [1, 5, 6, 7, 10, 11, 22, 26, 27, 105, 113, 125, 140, 141, 157, 166, 167, 168, 182, 191, 194, 207, 209, 212, 214, 237, 263, 275], "circular": [1, 198, 216], "compos": [1, 4, 6, 7, 8, 11, 17, 19, 22, 24, 28, 65, 80, 98, 100, 104, 107, 132, 133, 149, 153, 154, 162, 167, 173, 174, 177, 179, 181, 182, 185, 187, 194, 232, 237, 238, 250, 253, 268, 271, 273, 283], "pick": [1, 7, 22, 48, 106, 140, 175, 180, 233, 244, 262, 267, 273], "tensor": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 15, 16, 17, 19, 22, 23, 24, 25, 26, 36, 37, 38, 39, 40, 41, 42, 45, 47, 48, 49, 50, 51, 52, 54, 56, 62, 65, 66, 68, 69, 70, 72, 73, 74, 76, 79, 80, 90, 95, 96, 97, 99, 100, 102, 104, 105, 107, 110, 113, 114, 115, 118, 120, 122, 132, 133, 134, 135, 141, 142, 143, 144, 147, 149, 150, 151, 153, 156, 157, 159, 162, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 190, 191, 193, 196, 198, 199, 200, 201, 202, 207, 208, 209, 215, 217, 218, 219, 220, 222, 223, 228, 231, 232, 233, 235, 236, 237, 246, 247, 248, 250, 251, 252, 253, 254, 259, 262, 265, 266, 267, 272, 275, 280, 283], "physic": [1, 15, 112, 168, 252, 263, 281], "memori": [1, 5, 6, 7, 10, 11, 18, 19, 21, 22, 24, 25, 26, 40, 44, 53, 54, 56, 60, 93, 100, 103, 104, 105, 108, 111, 113, 115, 122, 132, 133, 134, 135, 137, 145, 149, 150, 156, 157, 158, 162, 172, 177, 179, 181, 184, 187, 190, 191, 193, 194, 196, 198, 199, 200, 207, 210, 212, 217, 224, 228, 237, 247, 248, 252, 254, 267, 272, 282, 283], "map": [1, 7, 13, 36, 54, 57, 96, 98, 100, 105, 110, 112, 122, 135, 140, 150, 151, 157, 165, 166, 167, 174, 175, 178, 187, 190, 193, 217, 222, 228, 230, 235, 252, 262, 263, 265], "arrai": [1, 7, 35, 36, 47, 48, 51, 56, 65, 77, 78, 90, 95, 96, 103, 112, 113, 115, 120, 121, 140, 141, 158, 173, 180, 182, 187, 210, 246], "desir": [1, 4, 6, 10, 13, 15, 18, 54, 56, 57, 80, 87, 105, 122, 135, 149, 154, 172, 182, 184, 187, 190, 196, 198, 200, 208, 219, 244, 247, 250, 278, 281], "hyperparamet": [1, 7, 15, 19, 57, 113, 122, 123, 132, 139, 140, 207, 212, 265, 283], "temporari": [1, 6, 139], "directori": [1, 5, 6, 7, 13, 25, 26, 37, 54, 56, 57, 93, 102, 105, 122, 125, 128, 139, 140, 141, 156, 180, 184, 187, 198, 200, 230, 238, 244, 261, 272, 281], "disk": [1, 5, 26, 28, 37, 98, 102, 115, 122, 150, 168, 198, 199, 248, 252, 253, 261, 272, 273], "along": [1, 5, 6, 7, 10, 15, 19, 24, 26, 35, 36, 44, 47, 53, 54, 58, 59, 60, 61, 88, 95, 96, 98, 99, 100, 102, 103, 104, 105, 109, 110, 113, 114, 128, 133, 134, 140, 141, 145, 146, 150, 165, 172, 175, 177, 185, 187, 190, 191, 196, 209, 214, 215, 217, 219, 277], "dimens": [1, 6, 7, 13, 15, 21, 23, 24, 36, 44, 51, 53, 54, 96, 98, 100, 102, 109, 110, 112, 113, 132, 137, 140, 150, 151, 159, 167, 173, 174, 176, 190, 191, 196, 208, 212, 215, 222, 247, 263, 278], "feed": [1, 7, 13, 22, 48, 51, 54, 98, 100, 104, 105, 108, 110, 115, 122, 137, 140, 141, 147, 158, 175, 180, 185, 230, 250, 266], "adapt": [1, 2, 15, 19, 27, 93, 98, 115, 139, 196, 217, 248], "divid": [1, 10, 11, 12, 13, 15, 16, 22, 90, 105, 107, 136, 149, 166, 168, 178, 278, 281], "yield": [1, 7, 12, 13, 19, 22, 24, 40, 42, 103, 122, 137, 138, 176, 178, 194, 200, 210, 217, 236, 238, 263], "regard": [1, 7, 12, 15, 26, 122, 156, 157, 174, 184, 191, 277], "200": [1, 7, 150, 159, 178, 200, 236], "random_crop_len": 1, "25": [1, 25, 26, 80, 95, 105, 120, 123, 128, 133, 141, 177, 182, 187, 200, 235, 236, 248, 253], "balanc": [1, 7, 21, 147, 184, 191, 244], "choic": [1, 4, 5, 7, 10, 17, 93, 139, 141, 149, 168, 191, 226, 263], "heterogen": [1, 215], "figur": [1, 10, 13, 15, 25, 54, 56, 80, 87, 98, 105, 132, 136, 137, 139, 141, 150, 156, 168, 176, 184, 185, 187, 190], "dataflow": 1, "8": [1, 3, 6, 7, 19, 20, 22, 26, 40, 80, 93, 100, 101, 110, 120, 121, 134, 137, 141, 143, 147, 154, 156, 159, 170, 173, 182, 184, 187, 190, 191, 196, 198, 200, 202, 217, 223, 224, 228, 229, 230, 231, 232, 233, 235, 236, 238, 247, 253, 263, 270, 281, 282], "1000": [1, 2, 22, 47, 102, 104, 128, 133, 134, 138, 156, 174, 185, 217, 228, 244, 248, 262], "known": [1, 4, 5, 6, 13, 19, 95, 137, 149, 153, 155, 172, 175, 180, 190, 191, 198, 217, 224, 248, 262, 273], "utd": 1, "64": [1, 6, 7, 16, 19, 21, 22, 26, 37, 40, 41, 47, 80, 93, 103, 110, 113, 133, 134, 137, 150, 151, 167, 173, 176, 177, 182, 191, 196, 211, 217, 222, 224, 235, 236, 238, 248, 253, 268], "reproduc": [1, 13, 57, 80, 98, 103, 105, 156, 174, 175, 178, 188, 236, 248, 263], "realiz": [1, 19, 217], "sever": [1, 2, 3, 4, 11, 12, 16, 18, 22, 25, 28, 35, 41, 45, 49, 51, 57, 58, 59, 80, 105, 107, 134, 140, 146, 149, 158, 165, 166, 168, 171, 174, 176, 177, 184, 185, 188, 190, 194, 209, 214, 236, 237, 248, 262, 272, 273, 281], "qnet": 1, "ve": [1, 6, 7, 10, 19, 24, 25, 28, 49, 51, 55, 95, 96, 98, 100, 103, 104, 113, 132, 138, 150, 155, 157, 165, 167, 168, 177, 185, 190, 191, 200, 207, 209, 210, 211, 217, 229, 230, 248], "becaus": [1, 2, 4, 5, 6, 7, 10, 13, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 35, 37, 42, 44, 47, 48, 51, 53, 54, 56, 57, 60, 61, 80, 90, 93, 95, 96, 98, 100, 103, 105, 106, 107, 109, 113, 114, 115, 118, 122, 128, 134, 135, 138, 140, 143, 144, 147, 150, 153, 157, 158, 159, 162, 167, 168, 172, 176, 178, 180, 182, 184, 188, 190, 193, 194, 200, 207, 209, 217, 220, 222, 226, 235, 236, 248, 260, 263, 265, 266, 278], "_must_": 1, "off": [1, 10, 18, 22, 24, 27, 35, 47, 54, 56, 100, 103, 122, 133, 139, 140, 156, 165, 174, 176, 177, 178, 187, 207, 229, 267, 280], "dictat": [1, 15], "introduc": [1, 12, 16, 18, 19, 24, 25, 26, 27, 36, 39, 59, 93, 96, 105, 107, 120, 121, 132, 134, 136, 142, 147, 156, 159, 165, 176, 178, 179, 180, 187, 188, 190, 191, 199, 201, 202, 207, 209, 210, 211, 214, 217, 220, 222, 224, 228, 229, 237, 260, 263, 278, 279, 281], "outdat": 1, "trick": [1, 4, 7, 11, 54, 103, 144, 149, 157], "multi": [1, 6, 7, 15, 21, 51, 54, 57, 58, 59, 61, 65, 95, 96, 100, 103, 107, 132, 134, 135, 137, 145, 146, 147, 150, 174, 176, 179, 181, 184, 193, 212, 230, 232, 263, 281, 283], "altern": [1, 7, 11, 26, 53, 54, 110, 128, 133, 151, 155, 159, 171, 174, 180, 184, 187, 188, 194, 200, 210, 211, 230, 260, 263, 279], "hack": [1, 207, 260], "find": [1, 2, 4, 5, 6, 7, 10, 11, 19, 25, 26, 35, 37, 44, 53, 80, 87, 88, 90, 93, 98, 100, 103, 106, 109, 113, 132, 133, 136, 140, 141, 149, 153, 154, 156, 166, 175, 178, 180, 184, 190, 191, 207, 208, 209, 210, 211, 217, 238, 244, 246, 248, 261], "well": [1, 3, 4, 5, 6, 7, 10, 11, 12, 22, 23, 25, 26, 37, 44, 48, 53, 54, 58, 87, 90, 93, 96, 98, 105, 107, 109, 113, 115, 122, 128, 133, 134, 135, 138, 139, 140, 143, 144, 149, 150, 153, 154, 165, 166, 168, 170, 173, 176, 177, 178, 179, 180, 184, 185, 187, 188, 191, 193, 207, 208, 209, 212, 219, 229, 230, 232, 237, 244, 248, 252, 260, 262, 265, 273, 274, 275, 278, 279, 281], "despit": [1, 80, 142, 147], "fact": [1, 3, 4, 6, 7, 10, 13, 15, 22, 25, 26, 35, 44, 80, 95, 96, 98, 100, 103, 105, 107, 112, 138, 166, 174, 175, 185, 190, 191, 194], "part": [1, 3, 6, 7, 10, 11, 14, 15, 16, 18, 23, 26, 40, 47, 49, 54, 57, 80, 93, 95, 96, 100, 106, 108, 112, 113, 114, 132, 134, 137, 138, 140, 141, 144, 145, 149, 150, 155, 156, 163, 165, 166, 174, 180, 190, 191, 196, 198, 200, 201, 207, 209, 211, 215, 233, 238, 244, 246, 247, 260, 262, 268, 272, 275, 278], "made": [1, 7, 11, 16, 22, 28, 56, 57, 93, 96, 103, 105, 134, 136, 138, 149, 150, 168, 180, 185, 187, 190, 210, 215, 246, 263], "thank": [1, 22, 54, 113, 139, 140, 141, 149, 180, 194], "hardupd": 1, "softupd": [1, 150], "appropri": [1, 7, 10, 54, 96, 113, 139, 147, 166, 177, 185, 191, 194, 199, 214, 236, 237, 247], "locat": [1, 4, 7, 34, 37, 44, 53, 87, 96, 98, 112, 120, 149, 168, 174, 184, 193, 198, 230, 244, 253, 263, 272], "adam": [1, 7, 12, 14, 40, 51, 57, 74, 104, 107, 121, 135, 149, 165, 175, 176, 178, 226, 227, 229, 230, 235, 282], "pretti": [1, 18, 24, 48, 103, 120, 121, 157, 178, 222], "plot": [1, 7, 56, 57, 80, 87, 95, 139, 150, 168, 175, 176, 182, 185, 187], "alreadi": [1, 2, 4, 5, 6, 7, 11, 12, 16, 25, 26, 95, 98, 103, 105, 106, 113, 137, 139, 147, 159, 165, 168, 170, 173, 174, 179, 185, 191, 209, 211, 216, 228, 232, 233, 236, 237, 248, 250, 263, 264, 265, 266, 268, 282], "mention": [1, 4, 6, 7, 11, 12, 16, 18, 57, 80, 90, 103, 105, 106, 122, 133, 137, 149, 150, 168, 175, 177, 184, 187, 190, 194, 230, 244, 252, 260, 272, 281], "greater": [1, 12, 54, 57, 96, 121, 138, 223, 281], "concret": [1, 6, 7, 10, 12, 95, 168, 174, 190, 207], "takeawai": [1, 125, 194, 263], "further": [1, 5, 6, 7, 10, 22, 24, 26, 51, 80, 93, 100, 105, 113, 137, 149, 154, 156, 168, 172, 174, 187, 188, 190, 200, 212, 214, 215, 216, 229, 233, 237, 252, 271], "might": [1, 4, 6, 10, 11, 16, 17, 18, 28, 35, 42, 48, 55, 56, 57, 58, 95, 98, 103, 105, 106, 110, 112, 115, 118, 120, 135, 144, 145, 146, 147, 149, 154, 155, 157, 166, 168, 175, 178, 179, 180, 184, 188, 190, 191, 193, 194, 198, 200, 207, 216, 223, 232, 248, 249, 253, 260, 263, 268, 278, 281], "dispatch": [1, 4, 6, 16, 132, 135, 171, 194, 224, 236, 244, 247, 274], "distpatch": 1, "iql": 1, "flexibl": [1, 2, 6, 7, 26, 27, 28, 54, 90, 95, 113, 115, 122, 132, 134, 135, 145, 194, 214, 230, 248], "runnable_code_remov": [1, 13, 14, 15, 17, 19, 23, 25, 26, 27, 28, 35, 36, 37, 39, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 57, 67, 68, 70, 72, 73, 74, 77, 78, 90, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 117, 118, 120, 121, 122, 125, 128, 138, 139, 140, 143, 150, 151, 153, 154, 155, 156, 157, 158, 160, 162, 165, 166, 167, 168, 172, 174, 175, 179, 180, 184, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 246, 247, 248, 249, 250, 252, 253, 254, 260, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "minut": [1, 13, 14, 15, 17, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 73, 77, 78, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 125, 128, 136, 138, 139, 140, 141, 143, 150, 151, 153, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 172, 173, 174, 175, 179, 180, 182, 185, 188, 190, 191, 193, 194, 200, 207, 208, 209, 210, 227, 235, 249, 252, 254, 260, 268, 274, 275, 276, 277, 279], "002": [1, 13, 14, 15, 17, 20, 28, 35, 36, 37, 41, 42, 43, 44, 45, 47, 48, 49, 51, 52, 53, 73, 75, 77, 78, 79, 90, 91, 93, 95, 100, 101, 102, 103, 106, 110, 111, 112, 113, 118, 119, 123, 125, 128, 134, 138, 139, 140, 143, 150, 151, 153, 155, 156, 157, 158, 162, 165, 166, 167, 172, 174, 175, 180, 181, 193, 194, 207, 208, 209, 210, 218, 227, 249, 252, 254, 259, 260, 268, 270, 274, 275, 276, 277, 279, 283], "jupyt": [1, 13, 14, 15, 17, 19, 23, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 174, 175, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "notebook": [1, 13, 14, 15, 17, 19, 21, 23, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 174, 175, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "coding_ddpg": [1, 20, 283], "ipynb": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 174, 175, 179, 180, 182, 184, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "python": [1, 3, 5, 7, 11, 13, 14, 15, 16, 19, 20, 21, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 58, 60, 61, 62, 67, 68, 70, 72, 73, 74, 77, 78, 80, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 132, 133, 134, 138, 139, 140, 141, 142, 143, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 173, 174, 175, 177, 179, 180, 182, 184, 188, 190, 191, 193, 194, 196, 198, 199, 200, 201, 207, 208, 209, 210, 212, 214, 215, 216, 220, 222, 227, 230, 231, 232, 233, 235, 237, 238, 244, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 274, 275, 276, 278, 280, 281, 283], "sourc": [1, 3, 6, 7, 11, 12, 13, 14, 15, 17, 18, 19, 23, 25, 26, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 60, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 134, 137, 138, 139, 140, 141, 143, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 171, 172, 174, 175, 176, 178, 179, 180, 182, 184, 187, 188, 190, 191, 193, 194, 198, 199, 200, 201, 207, 208, 209, 210, 212, 215, 220, 222, 223, 227, 235, 237, 238, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "py": [1, 4, 6, 7, 10, 11, 13, 14, 15, 17, 19, 20, 22, 23, 25, 26, 27, 28, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 67, 68, 69, 70, 72, 73, 74, 75, 77, 78, 79, 80, 89, 90, 91, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 125, 128, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 170, 171, 172, 174, 175, 177, 179, 180, 181, 182, 184, 188, 190, 191, 193, 194, 196, 198, 199, 200, 207, 208, 209, 210, 212, 216, 218, 220, 222, 223, 227, 231, 232, 235, 238, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 259, 260, 261, 262, 263, 264, 265, 266, 268, 270, 274, 275, 276, 277, 278, 279, 281, 283], "zip": [1, 7, 13, 14, 15, 17, 19, 21, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 174, 175, 176, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 217, 220, 222, 227, 233, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "galleri": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 174, 175, 179, 180, 182, 184, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279, 283], "sphinx": [1, 13, 14, 15, 17, 19, 23, 27, 28, 35, 36, 37, 39, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 56, 57, 67, 68, 70, 72, 73, 74, 77, 78, 80, 90, 93, 95, 96, 98, 99, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 117, 118, 120, 122, 125, 128, 138, 139, 140, 141, 143, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 165, 166, 167, 168, 172, 174, 175, 179, 180, 182, 184, 188, 190, 191, 193, 194, 199, 200, 207, 208, 209, 210, 212, 220, 222, 227, 235, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 268, 274, 275, 276, 277, 279], "The": [2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 41, 44, 45, 47, 48, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 65, 72, 73, 74, 78, 80, 87, 88, 90, 96, 97, 98, 100, 102, 103, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 129, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 187, 188, 190, 191, 193, 195, 196, 198, 199, 200, 201, 207, 208, 209, 210, 211, 212, 214, 216, 217, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 247, 248, 250, 252, 253, 260, 261, 262, 263, 266, 268, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282], "packag": [2, 4, 6, 7, 19, 21, 25, 26, 27, 48, 51, 56, 62, 65, 73, 74, 93, 104, 105, 107, 113, 117, 121, 128, 131, 132, 133, 134, 147, 149, 155, 171, 173, 175, 178, 182, 184, 187, 188, 216, 217, 232, 237, 246, 250, 253, 262, 266, 267, 278, 280], "build": [2, 7, 15, 22, 23, 28, 35, 37, 38, 39, 40, 41, 42, 44, 45, 51, 54, 65, 73, 74, 93, 95, 96, 97, 98, 99, 102, 103, 104, 106, 112, 113, 120, 121, 125, 131, 132, 140, 141, 149, 150, 153, 163, 165, 167, 168, 174, 175, 176, 177, 178, 181, 190, 191, 198, 202, 212, 215, 222, 237, 248, 250, 262, 263, 275, 278, 283], "highli": [2, 6, 7, 11, 21, 54, 93, 180, 191, 222, 263], "dynam": [2, 5, 6, 7, 10, 13, 15, 16, 22, 23, 25, 26, 28, 35, 47, 58, 70, 95, 105, 108, 111, 114, 121, 122, 132, 142, 159, 172, 174, 195, 200, 237, 238, 247, 251, 263, 267, 270, 273, 275, 278, 283], "neural": [2, 6, 14, 15, 19, 20, 23, 35, 38, 39, 41, 47, 50, 52, 54, 56, 62, 73, 80, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 110, 112, 115, 117, 121, 128, 132, 139, 140, 141, 142, 143, 150, 163, 172, 174, 175, 177, 180, 181, 182, 185, 187, 211, 214, 215, 217, 224, 236, 237, 244, 251, 259, 263, 267, 268, 283], "network": [2, 3, 6, 10, 13, 14, 15, 19, 22, 23, 24, 28, 35, 38, 39, 40, 41, 42, 47, 50, 52, 54, 56, 62, 73, 74, 80, 95, 96, 98, 100, 104, 105, 106, 108, 109, 111, 112, 113, 115, 117, 121, 128, 132, 138, 139, 142, 143, 146, 147, 162, 163, 166, 168, 172, 177, 181, 184, 185, 187, 198, 211, 214, 215, 217, 224, 236, 237, 238, 244, 251, 254, 259, 263, 267, 268, 283], "api": [2, 4, 6, 8, 9, 10, 11, 12, 15, 16, 17, 21, 23, 24, 25, 26, 27, 28, 36, 37, 39, 41, 44, 45, 53, 61, 87, 96, 117, 120, 122, 132, 133, 134, 136, 137, 138, 139, 142, 147, 149, 155, 156, 157, 161, 167, 169, 170, 176, 177, 178, 184, 188, 190, 191, 193, 195, 196, 199, 200, 211, 214, 215, 220, 222, 228, 229, 230, 231, 232, 237, 238, 246, 248, 249, 253, 262, 267, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 283], "explor": [2, 7, 10, 15, 24, 26, 49, 54, 80, 118, 132, 139, 144, 150, 156, 158, 165, 168, 170, 174, 175, 179, 180, 191, 194, 198, 211, 231, 246, 267, 272, 275, 278, 281], "note": [2, 4, 5, 6, 7, 10, 13, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 35, 47, 48, 49, 51, 54, 55, 57, 80, 90, 95, 96, 98, 100, 103, 104, 107, 108, 109, 110, 112, 113, 118, 120, 122, 128, 133, 134, 135, 137, 138, 143, 144, 146, 147, 149, 151, 153, 154, 156, 157, 159, 165, 167, 168, 171, 172, 176, 177, 178, 179, 184, 185, 187, 188, 190, 191, 193, 194, 195, 198, 199, 207, 208, 209, 210, 212, 217, 219, 220, 222, 224, 228, 229, 230, 232, 233, 253, 262, 265, 268, 272, 273, 274, 275, 281, 282], "pleas": [2, 4, 5, 6, 7, 8, 10, 11, 17, 22, 23, 25, 26, 48, 49, 51, 56, 63, 64, 86, 93, 133, 134, 137, 147, 149, 151, 153, 154, 155, 156, 159, 165, 167, 171, 176, 177, 178, 182, 184, 187, 188, 190, 191, 193, 194, 195, 198, 199, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 225, 230, 232, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 249, 278, 281], "differenti": [2, 6, 7, 15, 21, 28, 38, 39, 44, 50, 51, 62, 95, 121, 132, 150, 167, 175, 181, 182, 209, 283], "requires_grad": [2, 4, 7, 10, 35, 40, 47, 51, 67, 68, 80, 95, 103, 109, 113, 121, 128, 142, 144, 159, 196, 217, 252, 266], "track": [2, 6, 10, 15, 36, 40, 47, 57, 87, 95, 100, 102, 103, 104, 107, 109, 113, 121, 134, 136, 141, 142, 146, 150, 154, 178, 180, 184, 216, 231, 253, 261, 266, 277, 278], "auto": [2, 3, 6, 7, 10, 11, 13, 25, 60, 133, 134, 156, 171, 190, 191, 201, 211, 223, 235, 237, 238, 248, 262, 281], "x": [2, 4, 6, 7, 13, 21, 22, 23, 24, 25, 26, 28, 35, 40, 44, 47, 51, 53, 54, 56, 57, 67, 68, 72, 73, 74, 77, 78, 80, 90, 95, 98, 100, 103, 104, 105, 106, 107, 109, 113, 115, 121, 122, 133, 135, 137, 138, 140, 141, 142, 144, 147, 149, 157, 159, 166, 168, 170, 171, 173, 176, 177, 178, 182, 185, 187, 188, 190, 193, 195, 200, 201, 202, 211, 212, 214, 217, 228, 229, 230, 232, 235, 236, 237, 238, 244, 248, 261, 262, 273, 275, 278], "std": [2, 5, 6, 7, 13, 16, 22, 25, 26, 56, 80, 98, 105, 171, 173, 178, 182, 187, 201, 207, 237, 248, 280], "cout": [2, 5, 7, 25, 26, 280], "endl": [2, 7, 25, 26], "cpufloattyp": [2, 5, 7, 26], "y": [2, 6, 21, 23, 25, 26, 35, 40, 44, 45, 47, 53, 56, 57, 67, 68, 72, 73, 74, 77, 78, 80, 87, 90, 95, 100, 103, 104, 105, 106, 109, 110, 113, 121, 134, 138, 159, 170, 171, 184, 187, 188, 190, 201, 202, 209, 211, 228, 261, 262, 273, 275], "wa": [2, 3, 4, 5, 6, 12, 17, 19, 23, 25, 26, 28, 48, 56, 57, 80, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 113, 115, 118, 122, 133, 137, 139, 142, 147, 149, 158, 162, 165, 166, 167, 168, 170, 172, 173, 174, 175, 178, 179, 180, 185, 190, 191, 194, 200, 209, 210, 217, 230, 244, 247, 248, 253, 255, 256, 257, 258, 278, 281], "result": [2, 4, 5, 6, 7, 10, 11, 13, 15, 19, 22, 23, 24, 26, 27, 28, 35, 40, 42, 44, 47, 48, 56, 68, 87, 88, 93, 95, 96, 98, 103, 104, 105, 109, 113, 114, 118, 121, 122, 125, 134, 135, 136, 137, 138, 141, 147, 149, 150, 153, 154, 156, 157, 158, 159, 162, 167, 168, 171, 172, 173, 175, 176, 177, 178, 179, 185, 187, 188, 190, 193, 194, 195, 196, 198, 200, 208, 209, 210, 211, 212, 219, 220, 223, 226, 228, 229, 235, 236, 238, 250, 252, 253, 260, 262, 263, 267, 268, 272, 273, 275, 276, 277, 280, 281, 282], "grad_fn": [2, 5, 28, 35, 47, 51, 95, 109, 138, 144], "name": [2, 4, 5, 6, 7, 10, 11, 13, 14, 15, 17, 19, 21, 22, 24, 25, 26, 35, 55, 56, 57, 87, 106, 112, 113, 115, 118, 120, 122, 132, 134, 137, 139, 142, 147, 150, 156, 159, 163, 166, 170, 171, 172, 174, 175, 176, 177, 179, 180, 181, 184, 187, 188, 191, 193, 198, 214, 216, 217, 220, 223, 230, 232, 236, 237, 238, 248, 252, 253, 262, 264, 277, 280, 281, 283], "addbackward1": 2, "z": [2, 6, 26, 57, 90, 103, 109, 159, 190, 209], "27": [2, 56, 104, 156, 178, 200, 235, 236, 248, 277], "mulbackward1": 2, "meanbackward0": 2, "requires_grad_": [2, 35, 109], "exist": [2, 5, 7, 10, 11, 12, 17, 19, 25, 26, 28, 51, 57, 58, 65, 72, 80, 88, 90, 103, 109, 121, 132, 142, 149, 154, 172, 173, 178, 179, 180, 182, 184, 187, 188, 190, 194, 207, 208, 210, 216, 217, 228, 229, 231, 233, 247, 248, 260, 263], "flag": [2, 4, 6, 15, 26, 47, 95, 109, 166, 180, 190, 215, 252, 262, 268, 281], "place": [2, 6, 7, 12, 15, 21, 25, 26, 44, 47, 49, 53, 57, 90, 96, 100, 102, 107, 109, 113, 115, 134, 139, 147, 149, 151, 165, 167, 168, 174, 180, 187, 188, 190, 191, 194, 196, 207, 214, 222, 228, 230, 235, 252, 260, 262, 263], "randn": [2, 4, 6, 7, 13, 26, 109, 115, 122, 142, 147, 176, 178, 201, 202, 211, 214, 222, 228, 248, 261, 278, 282], "b": [2, 4, 6, 7, 19, 21, 24, 26, 35, 40, 47, 67, 68, 80, 88, 95, 103, 104, 107, 110, 112, 113, 120, 121, 138, 140, 141, 156, 157, 159, 173, 175, 182, 188, 190, 191, 194, 198, 202, 211, 217, 248, 253, 273], "sumbackward0": 2, "backprop": [2, 47, 109, 113, 140, 158], "scalar": [2, 6, 15, 16, 26, 35, 47, 54, 57, 67, 95, 98, 103, 109, 121, 185, 190, 223, 235], "backward": [2, 3, 4, 7, 10, 12, 13, 14, 16, 17, 18, 22, 28, 35, 40, 47, 49, 51, 57, 67, 68, 77, 78, 80, 95, 96, 98, 104, 109, 110, 113, 121, 128, 132, 133, 137, 138, 141, 145, 147, 149, 153, 157, 162, 167, 170, 176, 177, 178, 181, 182, 184, 185, 190, 191, 194, 226, 227, 228, 229, 230, 233, 235, 237, 238, 247, 253, 261, 263, 266, 271, 275, 277, 282, 283], "equival": [2, 5, 6, 12, 25, 26, 35, 47, 95, 107, 121, 135, 153, 167, 170, 175, 177, 187, 190, 191, 194, 201, 207, 209, 212, 217, 263, 279, 280], "print": [2, 5, 6, 7, 12, 15, 21, 22, 24, 25, 26, 28, 36, 40, 41, 48, 49, 54, 56, 57, 58, 80, 90, 93, 95, 98, 100, 103, 104, 105, 107, 112, 113, 114, 115, 117, 122, 133, 134, 135, 136, 141, 142, 143, 146, 147, 149, 150, 154, 156, 159, 166, 170, 171, 173, 176, 177, 178, 180, 182, 185, 188, 190, 191, 194, 195, 198, 202, 207, 209, 216, 217, 223, 226, 228, 229, 230, 231, 232, 235, 236, 237, 238, 247, 248, 253, 254, 263, 265, 279, 280, 282], "d": [2, 4, 6, 7, 10, 22, 25, 41, 57, 65, 67, 68, 95, 96, 98, 100, 103, 107, 112, 113, 121, 134, 137, 139, 141, 143, 147, 149, 157, 158, 165, 170, 184, 187, 190, 194, 210, 232, 237, 276], "dx": [2, 68, 107, 121, 144], "grad": [2, 4, 7, 13, 17, 35, 47, 51, 67, 80, 95, 109, 113, 121, 133, 138, 141, 142, 144, 147, 149, 153, 157, 162, 165, 176, 177, 178, 194, 207, 222, 227, 233, 235, 247, 266], "5000": [2, 104, 141, 248], "got": [2, 16, 22, 60, 96, 103, 106, 107, 109, 113, 147, 159, 171, 177, 190, 278], "matrix": [2, 6, 7, 13, 19, 26, 35, 44, 47, 53, 87, 95, 98, 100, 103, 106, 107, 109, 112, 113, 120, 137, 140, 141, 157, 162, 166, 179, 180, 182, 187, 190, 191, 194, 210, 212, 217, 222, 236, 237, 238, 244, 250, 263, 267, 277], "explan": [2, 57, 185, 252], "arriv": [2, 7, 16, 26, 134, 147, 176, 263], "valu": [2, 4, 5, 6, 7, 13, 15, 21, 22, 23, 24, 25, 26, 28, 35, 36, 40, 44, 45, 47, 51, 53, 54, 55, 60, 67, 80, 87, 90, 93, 95, 96, 98, 100, 103, 104, 105, 107, 109, 110, 112, 113, 115, 121, 137, 138, 139, 142, 146, 147, 149, 155, 158, 170, 171, 175, 176, 177, 178, 179, 180, 184, 187, 188, 191, 194, 196, 198, 207, 208, 209, 210, 212, 214, 215, 220, 227, 233, 235, 247, 248, 253, 260, 261, 272, 281, 282], "section": [2, 4, 5, 6, 7, 10, 12, 16, 21, 22, 24, 26, 36, 37, 39, 40, 41, 42, 44, 47, 48, 51, 55, 56, 57, 80, 96, 99, 103, 104, 105, 106, 107, 110, 112, 113, 118, 135, 138, 142, 143, 149, 156, 158, 162, 168, 175, 176, 178, 184, 187, 190, 191, 193, 194, 195, 208, 209, 219, 224, 227, 235, 237, 244, 247, 248, 252, 263, 273, 277], "look": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 21, 23, 25, 26, 28, 37, 42, 44, 47, 48, 51, 53, 54, 55, 56, 57, 60, 80, 90, 93, 95, 96, 98, 100, 102, 103, 104, 106, 107, 109, 110, 112, 113, 114, 115, 122, 128, 133, 135, 137, 138, 139, 144, 149, 150, 151, 159, 162, 165, 168, 172, 173, 174, 177, 178, 179, 180, 184, 185, 187, 190, 191, 193, 194, 201, 207, 210, 212, 214, 231, 235, 236, 237, 248, 250, 253, 261, 262, 264, 265, 266, 268, 273, 277], "jacobian": [2, 47, 95, 132, 153, 181, 222, 283], "product": [2, 3, 5, 7, 44, 47, 53, 90, 95, 107, 115, 132, 134, 149, 153, 170, 180, 181, 191, 196, 222, 267, 275, 283], "norm": [2, 15, 19, 22, 57, 100, 105, 132, 137, 166, 170, 172, 181, 187, 194, 217, 283], "1021": 2, "4020": 2, "314": 2, "6695": 2, "613": [2, 236], "4944": 2, "v": [2, 19, 21, 22, 35, 47, 57, 58, 60, 95, 102, 104, 109, 110, 112, 134, 137, 153, 159, 175, 177, 184, 185, 194, 199, 200, 209, 215, 217, 236, 276], "0001": [2, 22, 93, 156, 238], "kfloat": [2, 3, 4, 201, 223], "102": 2, "4000": [2, 98, 104, 262], "1024": [2, 6, 21, 24, 87, 105, 136, 159, 226, 235, 248], "0000": [2, 26, 217], "stop": [2, 5, 6, 26, 35, 56, 93, 95, 109, 141, 159, 165, 174, 176, 180, 184, 198, 253], "histori": [2, 35, 44, 51, 53, 95, 103, 109, 141, 142, 172], "put": [2, 6, 7, 10, 13, 15, 18, 36, 49, 54, 56, 90, 98, 100, 103, 132, 133, 134, 149, 150, 166, 174, 175, 177, 178, 187], "nogradguard": [2, 280], "block": [2, 4, 6, 7, 10, 11, 13, 19, 22, 25, 26, 35, 36, 51, 54, 87, 95, 109, 114, 133, 136, 137, 149, 150, 156, 168, 170, 176, 177, 178, 179, 184, 187, 196, 200, 211, 217, 224, 228, 263, 268], "pow": [2, 6, 207, 235], "no_grad": [2, 22, 35, 40, 47, 95, 104, 107, 109, 110, 113, 121, 133, 134, 141, 158, 173, 177, 182, 185, 190, 211, 214, 219, 233, 235, 237, 263, 271, 280], "Or": [2, 24, 26, 142, 165, 178, 195, 223], "content": [2, 4, 6, 15, 26, 28, 55, 61, 102, 103, 104, 122, 129, 138, 147, 149, 168, 173, 174, 178, 180, 188, 190, 198, 239, 248, 262, 277, 278], "eq": [2, 22, 26, 54, 133, 177, 182, 190, 238, 253], "bool": [2, 12, 15, 16, 26, 171, 187, 195, 211, 217, 281], "is_leaf": 2, "detach_": [2, 178], "register_hook": [2, 142], "retain_grad": 2, "doc": [2, 4, 5, 7, 8, 54, 67, 80, 95, 103, 104, 105, 117, 120, 121, 128, 135, 146, 149, 154, 155, 168, 176, 178, 187, 190, 191, 212, 222, 244, 247, 261, 276, 277], "applic": [2, 3, 12, 13, 15, 16, 26, 37, 54, 65, 96, 100, 105, 115, 128, 131, 132, 133, 138, 139, 143, 147, 155, 165, 168, 172, 176, 178, 187, 190, 200, 209, 216, 223, 228, 229, 230, 235, 236, 238, 244, 263, 267, 277, 281], "calcul": [2, 13, 19, 35, 40, 47, 48, 54, 57, 61, 80, 87, 90, 93, 95, 96, 98, 104, 105, 113, 140, 141, 158, 175, 176, 178, 179, 180, 187, 191, 194, 196, 209, 217, 232, 238, 266], "penalti": [2, 166, 173, 247], "h": [2, 4, 5, 6, 7, 10, 11, 25, 26, 28, 54, 56, 104, 137, 156, 159, 170, 171, 193, 235, 237, 262, 280, 281], "model": [2, 3, 6, 10, 12, 15, 18, 20, 25, 26, 27, 35, 37, 38, 39, 44, 45, 47, 48, 51, 53, 57, 58, 59, 61, 67, 70, 72, 73, 74, 92, 93, 95, 97, 99, 103, 106, 107, 108, 109, 111, 113, 116, 117, 118, 120, 121, 123, 131, 132, 133, 139, 140, 141, 142, 143, 146, 149, 153, 154, 156, 157, 163, 165, 166, 167, 174, 175, 176, 177, 178, 179, 181, 188, 190, 191, 194, 196, 198, 200, 201, 211, 212, 215, 216, 217, 218, 222, 224, 228, 229, 230, 231, 232, 233, 236, 247, 251, 252, 254, 259, 260, 261, 266, 267, 268, 271, 273, 275, 276, 281, 282, 283], "linear": [2, 6, 7, 12, 18, 19, 22, 28, 40, 44, 47, 49, 51, 53, 73, 80, 98, 103, 104, 108, 115, 120, 121, 122, 128, 133, 135, 137, 140, 141, 142, 147, 156, 157, 166, 170, 176, 177, 178, 180, 182, 185, 190, 194, 195, 200, 207, 211, 212, 214, 217, 219, 224, 226, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 244, 247, 252, 254, 260, 261, 265, 268, 282], "loss": [2, 3, 6, 7, 12, 15, 18, 19, 20, 22, 35, 41, 44, 47, 53, 70, 72, 73, 74, 77, 78, 80, 93, 95, 98, 102, 107, 112, 113, 121, 122, 132, 133, 134, 135, 140, 142, 149, 158, 159, 167, 170, 175, 177, 178, 180, 182, 184, 185, 191, 217, 233, 237, 238, 261, 271, 282, 283], "target": [2, 3, 5, 7, 15, 18, 21, 22, 25, 26, 40, 48, 51, 54, 60, 80, 96, 103, 105, 107, 110, 112, 113, 118, 133, 141, 149, 150, 156, 165, 167, 168, 170, 171, 173, 175, 176, 177, 178, 180, 182, 185, 187, 188, 190, 193, 195, 214, 223, 237, 238, 244, 248, 250, 271, 280], "mseloss": [2, 13, 40, 51, 147, 176, 229, 230, 261, 282], "grad_output": [2, 10, 11], "ones_lik": [2, 103], "create_graph": [2, 144], "gradient_penalti": 2, "dim": [2, 5, 6, 12, 24, 36, 80, 98, 103, 104, 133, 135, 141, 159, 170, 172, 173, 176, 177, 178, 182, 185, 187, 196, 208, 209, 223, 236, 238, 278, 280], "add": [2, 4, 5, 7, 8, 10, 11, 13, 15, 16, 17, 19, 22, 24, 25, 26, 40, 48, 51, 55, 80, 90, 93, 100, 103, 104, 107, 110, 118, 125, 132, 133, 134, 137, 141, 142, 143, 149, 150, 154, 155, 156, 157, 165, 167, 168, 171, 173, 174, 176, 177, 178, 180, 184, 190, 194, 196, 200, 201, 207, 209, 216, 217, 223, 230, 233, 235, 248, 250, 253, 267, 275, 279], "combined_loss": 2, "1042": 2, "0638": 2, "0103": 2, "0723": 2, "2543": 2, "1222": 2, "0071": 2, "0814": 2, "1683": 2, "1052": 2, "0355": 2, "document": [2, 4, 5, 6, 7, 17, 23, 35, 51, 57, 65, 87, 90, 93, 95, 96, 100, 102, 103, 104, 109, 122, 128, 132, 147, 149, 150, 153, 155, 156, 177, 178, 179, 182, 184, 187, 188, 190, 193, 195, 199, 209, 214, 222, 223, 230, 237, 238, 263, 272, 273, 275, 276, 279, 280], "link": [2, 5, 6, 7, 11, 13, 25, 26, 39, 41, 57, 87, 99, 113, 115, 125, 149, 153, 209, 211, 223, 237, 278], "ad": [2, 6, 7, 11, 16, 21, 25, 26, 27, 28, 35, 40, 54, 55, 58, 80, 88, 90, 95, 98, 100, 102, 103, 104, 107, 109, 122, 133, 134, 140, 141, 142, 147, 150, 153, 157, 162, 165, 171, 175, 179, 180, 190, 193, 216, 237, 238, 260, 262, 265, 276], "subclass": [2, 6, 7, 15, 19, 28, 36, 37, 72, 95, 98, 100, 113, 121, 132, 135, 139, 150, 172, 177, 185, 193, 209, 212, 217, 236, 246, 247, 251, 259, 267, 275, 280, 283], "encod": [2, 15, 44, 45, 51, 53, 100, 108, 111, 134, 139, 141, 150, 166, 174, 178, 187, 194, 200, 217, 247, 278, 283], "method": [2, 4, 5, 6, 7, 10, 11, 12, 13, 15, 18, 19, 22, 24, 26, 28, 35, 36, 42, 44, 48, 51, 54, 56, 60, 80, 88, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 113, 114, 122, 131, 132, 136, 139, 140, 144, 147, 150, 153, 154, 155, 156, 157, 158, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 185, 187, 188, 190, 191, 194, 207, 211, 214, 217, 229, 230, 238, 246, 247, 250, 261, 262, 263, 268, 278, 281], "forward": [2, 3, 5, 10, 11, 12, 13, 15, 16, 18, 22, 25, 26, 28, 35, 36, 40, 41, 47, 49, 51, 54, 57, 61, 67, 68, 70, 77, 78, 80, 90, 95, 98, 100, 103, 104, 105, 106, 107, 108, 110, 113, 114, 115, 121, 122, 128, 132, 133, 134, 137, 138, 140, 141, 143, 144, 145, 147, 149, 154, 162, 165, 166, 167, 170, 172, 175, 176, 177, 178, 180, 181, 182, 184, 185, 187, 188, 190, 191, 195, 211, 223, 227, 228, 229, 230, 231, 232, 235, 236, 237, 238, 244, 247, 250, 253, 254, 263, 278, 280, 282, 283], "detail": [2, 4, 6, 7, 10, 11, 13, 16, 17, 18, 23, 25, 26, 28, 37, 40, 47, 48, 49, 57, 58, 80, 87, 88, 90, 100, 103, 104, 114, 118, 133, 135, 137, 139, 141, 143, 145, 147, 154, 156, 162, 165, 178, 179, 182, 184, 185, 188, 190, 191, 195, 196, 198, 207, 208, 209, 210, 214, 216, 222, 224, 227, 231, 235, 236, 237, 244, 246, 247, 248, 252, 262, 263, 273, 278], "namespac": [2, 4, 7, 10, 11, 25, 26, 36, 113, 118, 171, 188, 195, 212, 280], "inherit": [2, 12, 16, 25, 41, 56, 90, 98, 103, 104, 107, 155, 158, 174, 187, 193, 198, 209, 212, 233, 278], "linearfunct": 2, "public": [2, 10, 11, 16, 135, 171], "static": [2, 4, 10, 11, 15, 24, 95, 153, 154, 171, 190, 191, 200, 238, 263], "option": [2, 4, 6, 7, 10, 11, 12, 20, 26, 39, 48, 50, 52, 56, 58, 87, 93, 95, 96, 99, 100, 103, 105, 118, 120, 131, 132, 135, 136, 139, 145, 150, 151, 156, 159, 168, 170, 172, 173, 187, 188, 190, 191, 198, 200, 228, 233, 235, 247, 248, 253, 263, 267, 271, 272, 273, 276, 277, 279, 283], "autogradcontext": [2, 10, 11], "ctx": [2, 4, 6, 10, 11, 21, 144, 228], "save_for_backward": [2, 4, 6, 144], "mm": [2, 6, 201, 223, 224], "t": [2, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 19, 22, 24, 25, 26, 28, 35, 39, 40, 44, 47, 48, 51, 55, 57, 58, 60, 65, 80, 93, 95, 96, 98, 100, 103, 104, 105, 106, 107, 109, 110, 112, 113, 115, 118, 121, 122, 128, 133, 134, 138, 144, 150, 151, 153, 155, 156, 157, 158, 159, 162, 165, 167, 168, 172, 173, 174, 175, 176, 178, 179, 180, 185, 187, 188, 190, 191, 194, 195, 196, 198, 200, 207, 208, 209, 211, 217, 222, 223, 226, 227, 233, 235, 236, 244, 247, 248, 250, 262, 263, 264, 265, 266, 274, 275, 276, 278, 279, 280, 281], "unsqueez": [2, 15, 51, 73, 103, 121, 167, 173, 176, 178, 185, 223], "expand_a": [2, 22], "tensor_list": [2, 10, 11, 149], "save": [2, 4, 5, 7, 12, 13, 22, 23, 26, 35, 36, 37, 38, 39, 40, 44, 45, 48, 53, 54, 55, 57, 80, 93, 102, 104, 105, 123, 128, 132, 133, 135, 137, 139, 143, 156, 157, 170, 172, 176, 177, 178, 180, 181, 184, 187, 191, 198, 218, 223, 237, 238, 250, 251, 252, 253, 261, 262, 263, 265, 266, 267, 268, 273, 277, 280, 283], "get_saved_vari": 2, "grad_input": [2, 144], "grad_weight": 2, "grad_bia": 2, "Then": [2, 4, 13, 16, 19, 23, 25, 27, 28, 48, 49, 57, 80, 90, 106, 107, 110, 112, 113, 118, 125, 132, 133, 147, 165, 170, 171, 172, 174, 175, 176, 178, 180, 184, 196, 216, 217, 228, 232, 260], "appli": [2, 3, 5, 6, 7, 10, 11, 15, 16, 19, 22, 26, 28, 35, 36, 45, 56, 57, 73, 80, 87, 90, 95, 98, 100, 103, 105, 107, 121, 132, 133, 135, 140, 142, 143, 144, 147, 149, 151, 154, 157, 158, 159, 162, 165, 166, 167, 170, 172, 174, 176, 177, 178, 180, 182, 187, 190, 191, 193, 194, 196, 198, 200, 207, 208, 212, 217, 219, 222, 224, 226, 230, 231, 232, 233, 237, 246, 260, 263, 268, 271, 272, 275, 277, 279], "5314": 2, "2807": 2, "4864": 2, "7608": 2, "9101": 2, "0073": 2, "mulconst": 2, "object": [2, 4, 5, 6, 7, 11, 12, 15, 20, 22, 25, 26, 35, 36, 37, 40, 41, 47, 54, 56, 57, 80, 95, 96, 98, 100, 103, 105, 109, 113, 121, 122, 128, 132, 138, 140, 141, 143, 149, 153, 155, 168, 171, 176, 177, 178, 179, 181, 182, 184, 185, 187, 190, 196, 212, 229, 230, 233, 237, 238, 248, 260, 262, 263, 265, 267, 268, 278, 283], "stash": 2, "saved_data": 2, "were": [2, 3, 6, 7, 13, 19, 21, 26, 35, 57, 88, 90, 95, 100, 103, 105, 107, 109, 113, 125, 139, 142, 146, 147, 151, 159, 166, 174, 175, 177, 179, 180, 190, 191, 194, 199, 207, 217, 222, 235, 244, 248, 252, 253, 260, 278, 281], "todoubl": 2, "On": [2, 5, 6, 7, 10, 22, 24, 25, 26, 99, 103, 113, 128, 134, 147, 149, 159, 166, 172, 176, 177, 188, 191, 193, 194, 215, 217, 220, 236, 244, 247, 263, 281], "easiest": [2, 6, 26, 39, 99, 113, 157, 174, 190, 263], "your": [2, 4, 7, 8, 10, 12, 13, 16, 17, 19, 20, 21, 22, 25, 26, 28, 35, 36, 39, 41, 47, 48, 49, 51, 54, 55, 56, 58, 59, 60, 72, 80, 87, 93, 95, 96, 99, 100, 103, 104, 107, 109, 110, 112, 114, 115, 117, 118, 121, 122, 123, 125, 132, 133, 134, 135, 138, 140, 143, 144, 145, 146, 147, 149, 150, 153, 155, 157, 158, 159, 163, 165, 166, 168, 171, 172, 173, 174, 177, 178, 179, 182, 184, 185, 187, 188, 190, 191, 194, 198, 201, 202, 211, 215, 216, 217, 219, 222, 223, 226, 231, 233, 246, 247, 248, 253, 261, 262, 264, 265, 266, 267, 268, 275, 276, 277, 278, 283], "tabl": [2, 18, 24, 112, 120, 132, 134, 149, 156, 177, 178, 184, 190, 191, 236, 248, 253], "set_data": 2, "data": [2, 3, 4, 6, 8, 12, 13, 15, 18, 19, 21, 23, 24, 25, 26, 27, 35, 36, 39, 40, 44, 45, 47, 50, 51, 52, 53, 56, 65, 77, 78, 80, 87, 90, 95, 96, 98, 102, 104, 105, 106, 107, 108, 109, 110, 112, 115, 121, 122, 131, 132, 138, 139, 145, 149, 150, 151, 154, 155, 156, 157, 158, 159, 162, 163, 165, 167, 168, 170, 173, 175, 176, 177, 178, 188, 193, 194, 199, 200, 208, 210, 211, 212, 214, 215, 217, 222, 223, 224, 230, 231, 232, 233, 236, 237, 238, 244, 246, 247, 248, 252, 253, 254, 260, 261, 267, 268, 271, 277, 278, 282, 283], "output_nr": 2, "after": [2, 3, 6, 7, 11, 13, 15, 16, 17, 19, 21, 22, 23, 24, 26, 27, 28, 35, 36, 37, 44, 47, 49, 51, 54, 57, 58, 93, 95, 96, 100, 105, 106, 107, 110, 112, 113, 115, 122, 132, 134, 135, 136, 137, 140, 141, 142, 143, 146, 147, 149, 150, 151, 156, 158, 159, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 178, 180, 182, 184, 185, 190, 191, 193, 195, 214, 216, 217, 219, 220, 223, 230, 247, 248, 252, 253, 260, 261, 263, 273, 275, 277, 282], "file": [2, 4, 6, 7, 10, 11, 16, 20, 22, 23, 24, 25, 26, 43, 52, 55, 56, 57, 60, 69, 75, 79, 87, 88, 91, 93, 95, 96, 101, 109, 111, 113, 119, 120, 123, 125, 134, 138, 140, 141, 147, 149, 156, 165, 168, 171, 173, 181, 184, 187, 190, 193, 196, 199, 201, 202, 210, 211, 212, 216, 218, 223, 224, 230, 231, 232, 237, 238, 247, 248, 252, 253, 259, 261, 262, 264, 267, 270, 272, 273, 277, 278, 280, 281, 283], "bug": [2, 6, 11, 26, 102, 156, 194, 198, 201, 211, 278], "report": [2, 11, 19, 26, 57, 80, 93, 95, 98, 100, 104, 132, 136, 156, 168, 176, 178, 179, 198, 201, 211, 217, 253, 275], "github": [2, 3, 5, 7, 11, 12, 18, 22, 25, 26, 27, 54, 58, 59, 60, 65, 118, 132, 133, 134, 136, 137, 143, 145, 146, 147, 149, 151, 153, 154, 155, 158, 159, 167, 170, 171, 176, 177, 178, 184, 187, 193, 195, 196, 199, 200, 201, 211, 222, 223, 224, 230, 232, 237, 238, 246, 278], "issu": [2, 5, 6, 7, 10, 22, 23, 25, 26, 56, 134, 135, 146, 151, 154, 155, 156, 159, 167, 168, 173, 184, 188, 190, 191, 194, 198, 199, 200, 201, 207, 209, 211, 212, 216, 222, 224, 230, 231, 244, 247, 249, 260, 278], "fix": [2, 15, 19, 23, 26, 27, 35, 54, 55, 56, 57, 105, 138, 175, 176, 200, 217, 244, 262, 263, 276], "soon": [2, 6, 57, 159, 165, 229, 237], "overview": [2, 6, 7, 12, 58, 60, 98, 131, 132, 140, 141, 147, 149, 154, 171, 174, 176, 177, 178, 180, 184, 194, 207, 208, 210, 215, 218, 224, 226, 283], "alwai": [2, 3, 4, 5, 7, 15, 18, 21, 22, 25, 26, 45, 57, 98, 100, 104, 110, 112, 113, 135, 136, 137, 138, 143, 149, 150, 168, 173, 174, 175, 176, 178, 190, 191, 193, 207, 211, 224, 276], "problem": [2, 5, 7, 12, 15, 16, 21, 25, 26, 54, 56, 57, 106, 108, 112, 113, 121, 128, 139, 150, 154, 156, 157, 166, 174, 176, 178, 184, 188, 191, 207, 209, 224, 248, 249, 252, 263, 278, 281], "question": [2, 5, 6, 7, 10, 11, 19, 25, 26, 54, 96, 134, 149, 155, 180, 191, 208, 217, 224, 248], "forum": [2, 5, 6, 7, 25, 26, 48, 154, 155, 224], "touch": [2, 5, 7, 15, 25, 26, 224], "view": [3, 11, 12, 15, 16, 18, 22, 28, 55, 58, 60, 61, 65, 80, 87, 96, 102, 103, 104, 109, 112, 113, 115, 121, 122, 133, 136, 137, 139, 145, 146, 147, 149, 154, 156, 170, 171, 176, 177, 178, 179, 180, 182, 185, 196, 198, 212, 223, 227, 230, 231, 232, 235, 244, 246, 254, 261, 279], "edit": [3, 7, 12, 13, 18, 22, 23, 53, 55, 65, 136, 137, 147, 149, 155, 156, 170, 171, 173, 176, 177, 178, 196, 200, 230, 232], "code": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 35, 36, 37, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 117, 118, 120, 121, 122, 125, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 165, 166, 167, 168, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 196, 198, 199, 200, 208, 209, 210, 211, 212, 216, 217, 220, 222, 224, 227, 228, 230, 231, 232, 233, 235, 237, 238, 246, 247, 248, 249, 250, 252, 253, 254, 260, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283], "prerequisit": [3, 4, 17, 58, 60, 61, 108, 125, 134, 136, 137, 142, 145, 146, 147, 149, 150, 159, 170, 171, 176, 177, 178, 187, 191, 194, 196, 199, 216, 229, 230, 232, 263], "frontend": [3, 4, 11, 89, 91, 132, 201, 212, 215, 237, 238, 271, 283], "semant": [3, 4, 7, 25, 54, 73, 103, 108, 110, 111, 121, 135, 149, 190, 191, 209, 210, 212, 215, 218, 222, 283], "11": [3, 6, 7, 12, 19, 21, 26, 40, 120, 133, 134, 141, 153, 173, 178, 182, 187, 188, 191, 231, 232, 235, 236, 248, 253, 280, 283], "nvidia": [3, 6, 19, 55, 143, 149, 159, 188, 217, 232, 247, 263, 267], "toolkit": [3, 26, 108, 154, 158, 168, 190, 261], "releas": [3, 4, 5, 7, 11, 19, 23, 26, 55, 115, 120, 122, 133, 134, 138, 154, 165, 177, 179, 184, 217, 228, 229, 236, 237, 238, 253, 263, 268, 278], "greatli": [3, 7, 54, 95, 113, 175], "reduc": [3, 7, 12, 19, 22, 37, 40, 47, 61, 98, 100, 104, 105, 120, 133, 134, 135, 137, 139, 140, 143, 145, 147, 149, 157, 158, 159, 165, 168, 172, 173, 176, 178, 182, 184, 187, 188, 191, 196, 201, 217, 220, 231, 247, 248, 251, 252, 267, 270, 272, 273, 281, 282, 283], "cpu": [3, 4, 6, 7, 10, 11, 12, 15, 16, 21, 22, 23, 26, 36, 41, 44, 47, 48, 53, 54, 57, 67, 78, 80, 87, 88, 93, 103, 105, 107, 113, 115, 120, 121, 128, 132, 133, 135, 136, 137, 140, 147, 149, 159, 166, 170, 171, 173, 174, 176, 177, 178, 179, 180, 181, 182, 184, 187, 191, 193, 198, 199, 201, 214, 215, 219, 223, 228, 229, 233, 235, 236, 247, 248, 249, 252, 253, 260, 267, 278, 283], "overhead": [3, 6, 7, 11, 19, 61, 87, 120, 133, 134, 137, 142, 147, 157, 159, 168, 173, 176, 178, 179, 184, 188, 194, 198, 200, 201, 212, 217, 229, 248, 253, 263, 274, 281], "increas": [3, 6, 7, 21, 22, 23, 27, 40, 41, 48, 80, 87, 88, 93, 96, 105, 113, 133, 134, 135, 137, 139, 140, 141, 145, 154, 165, 168, 173, 184, 191, 200, 212, 231, 236, 246, 247, 248, 262, 263, 266, 267, 268, 281], "mostli": [3, 11, 22, 90, 95, 105, 140, 178, 180, 195], "util": [3, 4, 6, 11, 16, 22, 25, 26, 27, 28, 37, 40, 41, 48, 54, 56, 58, 60, 80, 87, 98, 102, 104, 113, 120, 121, 122, 128, 132, 133, 134, 135, 137, 140, 142, 149, 153, 154, 156, 157, 159, 166, 168, 170, 171, 173, 174, 177, 179, 180, 182, 184, 185, 187, 188, 193, 199, 212, 214, 217, 219, 223, 226, 229, 230, 233, 235, 237, 238, 244, 246, 247, 261, 262, 267, 270, 271, 273, 275, 277, 281, 283], "deploy": [3, 5, 28, 105, 139, 201, 214, 237, 267, 277], "import": [3, 4, 5, 6, 7, 10, 11, 12, 15, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 40, 47, 51, 54, 55, 56, 57, 58, 80, 87, 90, 95, 96, 98, 100, 102, 103, 104, 105, 107, 110, 113, 115, 117, 122, 125, 133, 134, 135, 136, 137, 141, 142, 143, 144, 147, 149, 150, 153, 154, 155, 159, 165, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 184, 185, 188, 190, 191, 195, 196, 198, 201, 202, 207, 209, 210, 211, 212, 214, 216, 217, 219, 223, 224, 226, 227, 228, 229, 230, 232, 233, 235, 236, 237, 238, 244, 248, 260, 261, 262, 263, 268, 271, 273, 278, 279, 281, 282], "appear": [3, 12, 15, 25, 28, 112, 190, 244], "won": [3, 6, 11, 47, 113, 121, 133, 144, 153, 162, 167, 174, 190, 191, 211, 247], "heart": [3, 54, 236], "veri": [3, 4, 5, 6, 7, 10, 15, 16, 21, 22, 24, 25, 26, 27, 28, 44, 49, 51, 53, 54, 70, 80, 90, 96, 100, 107, 109, 113, 121, 128, 133, 137, 138, 140, 165, 166, 175, 176, 178, 179, 180, 182, 184, 185, 191, 193, 207, 209, 244, 253, 262, 276], "time": [3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 16, 17, 19, 22, 24, 26, 28, 35, 36, 37, 40, 41, 42, 44, 45, 47, 48, 49, 51, 53, 54, 55, 56, 57, 65, 70, 73, 77, 78, 80, 88, 90, 93, 95, 96, 98, 100, 102, 103, 104, 105, 106, 107, 109, 110, 112, 113, 114, 115, 118, 121, 122, 125, 128, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 147, 149, 150, 151, 153, 155, 156, 157, 158, 159, 162, 165, 166, 167, 168, 172, 174, 175, 176, 177, 178, 179, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 198, 200, 207, 208, 209, 210, 211, 214, 215, 217, 220, 223, 227, 228, 229, 230, 235, 236, 244, 247, 248, 249, 251, 252, 254, 260, 263, 267, 274, 275, 276, 277, 279, 280], "tool": [3, 7, 10, 15, 24, 28, 56, 87, 93, 95, 96, 100, 104, 106, 121, 133, 147, 149, 150, 156, 168, 176, 179, 184, 185, 187, 194, 198, 231, 244, 252, 275, 281], "compil": [3, 5, 7, 8, 10, 11, 17, 19, 24, 25, 28, 90, 106, 132, 149, 155, 181, 190, 200, 201, 212, 215, 224, 233, 237, 248, 251, 253, 262, 263, 267, 270, 271, 278, 280, 283], "boost": [3, 105, 107, 156, 157, 200, 211, 215, 224, 233, 237, 238], "would": [3, 4, 5, 6, 7, 10, 15, 17, 18, 21, 22, 23, 24, 25, 26, 28, 35, 47, 54, 58, 60, 80, 93, 95, 98, 100, 103, 105, 109, 112, 113, 118, 122, 128, 133, 136, 137, 138, 139, 140, 141, 143, 144, 147, 150, 154, 155, 156, 157, 159, 165, 166, 167, 171, 173, 174, 175, 176, 177, 178, 180, 187, 188, 190, 191, 193, 194, 198, 199, 209, 210, 215, 222, 224, 230, 232, 233, 244, 272, 273, 277, 281], "demonstr": [3, 4, 15, 17, 18, 19, 23, 24, 25, 28, 42, 47, 55, 62, 87, 90, 96, 98, 104, 114, 118, 131, 132, 133, 134, 136, 137, 138, 143, 144, 147, 151, 153, 154, 155, 156, 159, 162, 168, 170, 171, 174, 176, 177, 178, 179, 184, 187, 190, 191, 194, 195, 196, 198, 199, 200, 201, 209, 211, 212, 214, 216, 217, 219, 220, 227, 229, 230, 232, 235, 236, 238, 247, 248, 252, 253, 266, 267, 272, 274, 275, 276, 277, 279, 281, 282], "mnist": [3, 7, 37, 48, 51, 80, 98, 102, 104, 131, 132, 133, 139, 143, 149, 151, 167, 177, 182, 185, 238, 250, 267], "libtorch": [3, 4, 7, 25, 26, 223, 237, 267, 280], "counterpart": [3, 19, 156, 190, 217, 232, 237], "syntax": [3, 26, 28, 53, 89, 91, 92, 122, 132, 248, 283], "step": [3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 26, 35, 39, 40, 47, 48, 51, 54, 57, 65, 80, 87, 90, 95, 98, 104, 105, 106, 107, 113, 115, 118, 131, 132, 133, 134, 135, 140, 141, 142, 143, 145, 147, 149, 150, 156, 158, 162, 166, 168, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 190, 191, 195, 198, 199, 200, 202, 211, 212, 214, 217, 219, 223, 226, 227, 229, 230, 233, 235, 237, 238, 244, 247, 260, 261, 263, 271, 277, 282, 283], "depict": [3, 102, 191], "chunk": [3, 6, 60, 149, 165, 168, 170, 196], "batch": [3, 6, 7, 18, 19, 22, 23, 24, 37, 40, 41, 42, 49, 51, 54, 56, 57, 58, 60, 61, 80, 87, 93, 95, 96, 98, 102, 103, 104, 105, 110, 113, 122, 128, 131, 132, 133, 134, 135, 137, 138, 139, 140, 145, 149, 150, 151, 158, 159, 162, 165, 167, 168, 170, 173, 174, 175, 177, 178, 179, 181, 182, 184, 185, 187, 188, 191, 193, 194, 196, 200, 209, 212, 215, 217, 222, 238, 247, 248, 283], "data_load": [3, 7, 22], "optim": [3, 6, 7, 10, 11, 12, 13, 15, 16, 18, 19, 21, 22, 23, 24, 26, 28, 35, 36, 37, 38, 39, 42, 44, 45, 47, 51, 54, 58, 60, 65, 70, 71, 72, 75, 80, 87, 90, 93, 95, 98, 102, 105, 106, 114, 118, 122, 128, 132, 133, 134, 137, 142, 143, 145, 147, 149, 150, 151, 154, 155, 156, 158, 159, 166, 167, 168, 172, 173, 174, 175, 176, 177, 180, 181, 182, 184, 185, 187, 188, 190, 193, 194, 200, 202, 207, 212, 214, 215, 217, 220, 223, 224, 229, 230, 235, 237, 238, 247, 248, 252, 260, 261, 264, 267, 268, 270, 271, 272, 275, 277, 278, 280, 283], "zero_grad": [3, 7, 22, 40, 51, 80, 95, 104, 113, 133, 134, 135, 141, 147, 149, 165, 176, 178, 182, 185, 191, 229, 230, 237, 238, 261, 266, 271], "nll_loss": [3, 80, 133, 149, 177, 182, 238], "updat": [3, 7, 11, 12, 13, 14, 15, 18, 19, 22, 24, 26, 40, 47, 48, 54, 56, 57, 74, 87, 95, 105, 107, 112, 113, 114, 121, 122, 132, 133, 134, 135, 139, 143, 147, 150, 159, 165, 174, 175, 177, 178, 184, 191, 194, 207, 216, 217, 224, 226, 230, 233, 235, 238, 247, 260, 265, 282], "captur": [3, 5, 7, 25, 26, 28, 57, 95, 114, 115, 117, 132, 133, 153, 187, 188, 190, 191, 194, 198, 201, 248, 278], "But": [3, 7, 10, 11, 23, 48, 49, 57, 80, 96, 103, 109, 112, 138, 147, 159, 165, 166, 167, 175, 190, 193, 207, 210, 222, 238, 248], "slightli": [3, 6, 15, 26, 134, 149, 150, 168, 173, 180, 210, 248, 263], "prealloc": 3, "reus": [3, 11, 70, 113, 121, 144, 153, 166, 175, 191, 263, 267, 268, 281], "tensoropt": [3, 201], "floatcuda": 3, "dtype": [3, 4, 10, 11, 15, 16, 17, 56, 103, 109, 115, 135, 144, 159, 170, 182, 190, 195, 196, 199, 201, 210, 223, 235, 237, 247, 260, 271, 273], "longcuda": 3, "klong": 3, "zero": [3, 7, 12, 19, 22, 35, 40, 45, 51, 54, 80, 95, 96, 98, 100, 103, 104, 112, 113, 133, 134, 141, 149, 150, 162, 166, 168, 171, 172, 176, 178, 180, 185, 207, 209, 210, 216, 217, 238, 247, 251, 253, 259, 262, 263, 267, 278, 282, 283], "ktrainbatchs": 3, "28": [3, 7, 19, 37, 40, 80, 100, 102, 113, 151, 167, 182, 185, 217, 235, 236, 238, 248, 262], "copy_": [3, 44, 53, 120, 135, 156, 176, 182, 252, 260], "training_step": 3, "call": [3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 23, 24, 25, 26, 27, 28, 35, 36, 37, 40, 42, 44, 45, 47, 48, 49, 51, 54, 56, 57, 58, 60, 72, 80, 90, 95, 96, 98, 100, 102, 103, 105, 107, 109, 112, 113, 118, 120, 121, 122, 131, 132, 133, 135, 136, 137, 138, 139, 141, 142, 147, 149, 150, 153, 154, 155, 156, 158, 159, 162, 165, 166, 167, 168, 170, 171, 172, 174, 176, 177, 178, 179, 180, 182, 184, 187, 190, 191, 198, 201, 216, 217, 222, 223, 224, 227, 229, 230, 231, 233, 235, 236, 247, 248, 249, 250, 252, 253, 261, 262, 263, 266, 273, 274, 275, 276, 278, 281], "void": [3, 4, 6, 7, 16, 25, 26, 156, 171, 201, 211, 235, 248, 253, 262], "net": [3, 7, 22, 48, 49, 51, 54, 57, 80, 90, 93, 98, 102, 103, 105, 133, 149, 162, 173, 177, 182, 184, 185, 238, 250], "stream": [3, 16, 87, 103, 106, 135, 168, 173, 201, 235, 237], "cudagraph": 3, "cudastream": 3, "capturestream": 3, "getstreamfrompool": 3, "setcurrentcudastream": 3, "capture_begin": 3, "capture_end": 3, "warm": [3, 24, 76, 79, 120, 184, 188, 212, 220, 235, 236, 248, 253, 283], "side": [3, 23, 56, 57, 87, 112, 151, 159, 165, 167, 168, 171, 175, 176, 182, 184, 244], "prepar": [3, 12, 19, 22, 28, 48, 56, 57, 73, 74, 102, 110, 121, 122, 151, 165, 170, 171, 174, 176, 214, 215, 217, 228, 253, 267], "cach": [3, 142, 156, 184, 194, 200, 211, 263, 267, 276, 281], "cubla": [3, 248], "cudnn": [3, 6, 140, 143, 150, 159, 247], "warmupstream": 3, "int": [3, 4, 5, 6, 7, 12, 21, 22, 25, 26, 56, 58, 60, 133, 134, 136, 147, 149, 156, 170, 171, 176, 177, 178, 184, 188, 190, 193, 196, 198, 211, 223, 232, 237, 280, 281], "num_warmup_it": 3, "success": [3, 7, 15, 26, 80, 109, 139, 156, 180, 223, 244], "replac": [3, 4, 7, 22, 27, 47, 60, 62, 96, 107, 113, 114, 118, 120, 128, 132, 133, 135, 149, 153, 159, 172, 178, 180, 184, 190, 193, 196, 200, 209, 212, 221, 237, 248, 278], "replai": [3, 15, 28, 158], "spin": [3, 98], "ordinari": 3, "epoch": [3, 7, 18, 22, 37, 40, 41, 57, 58, 60, 93, 98, 102, 105, 107, 113, 122, 128, 133, 134, 135, 139, 140, 149, 159, 165, 174, 178, 182, 185, 193, 238, 261], "59584": 3, "60000": [3, 40, 104, 141, 149, 182], "3921": 3, "test": [3, 10, 22, 23, 25, 26, 27, 37, 40, 41, 54, 88, 90, 96, 98, 104, 105, 107, 108, 114, 115, 125, 132, 133, 134, 140, 149, 151, 153, 156, 159, 168, 173, 177, 180, 182, 185, 188, 190, 198, 200, 215, 222, 235, 236, 237, 238, 248, 280], "2051": 3, "accuraci": [3, 19, 22, 23, 27, 40, 41, 48, 98, 104, 105, 113, 131, 132, 133, 134, 135, 139, 162, 172, 173, 177, 182, 185, 187, 214, 217, 236, 247, 261, 266, 267], "938": [3, 7, 159], "1826": 3, "1273": 3, "960": 3, "1796": 3, "1012": [3, 159], "968": 3, "1603": 3, "0869": 3, "973": 3, "2315": 3, "0736": 3, "978": 3, "6": [3, 7, 12, 22, 26, 39, 40, 54, 90, 96, 98, 100, 103, 104, 112, 114, 118, 120, 122, 143, 144, 149, 156, 159, 171, 172, 173, 176, 178, 182, 187, 188, 190, 194, 200, 202, 217, 232, 235, 236, 238, 247, 275, 276, 277, 280, 281], "0511": 3, "0704": 3, "977": [3, 159, 236], "7": [3, 6, 7, 19, 21, 22, 25, 26, 39, 40, 56, 90, 104, 120, 128, 133, 134, 149, 158, 159, 173, 182, 187, 188, 191, 196, 199, 200, 202, 211, 219, 223, 224, 226, 227, 232, 235, 236, 238, 247, 274, 278], "0802": 3, "0654": 3, "979": 3, "0774": 3, "0604": 3, "980": 3, "9": [3, 4, 6, 7, 19, 21, 22, 26, 37, 40, 43, 47, 54, 80, 93, 98, 104, 112, 113, 120, 122, 156, 166, 173, 176, 182, 185, 187, 191, 202, 217, 218, 223, 235, 236, 237, 238, 248, 250, 253, 271], "0669": 3, "0544": 3, "984": [3, 236], "0219": 3, "0517": 3, "983": 3, "real": [3, 7, 15, 23, 35, 41, 57, 59, 95, 105, 106, 107, 108, 112, 132, 133, 140, 141, 149, 150, 165, 171, 175, 180, 188, 190, 191, 198, 209, 212, 236, 248], "0m44": 3, "287": 3, "018": 3, "sy": [3, 21, 22, 58, 60, 147, 149, 171, 226, 235], "0m1": 3, "116": [3, 198], "produc": [3, 5, 6, 7, 12, 25, 26, 28, 73, 105, 114, 121, 139, 142, 150, 151, 153, 155, 157, 159, 168, 174, 175, 180, 187, 190, 191, 195, 214, 223, 230, 247, 263, 268], "4092": 3, "2037": 3, "2039": 3, "1274": 3, "961": 3, "1779": 3, "1017": [3, 104], "1559": 3, "0871": 3, "972": 3, "2240": 3, "0735": [3, 217], "0520": 3, "0710": 3, "0935": 3, "0666": [3, 26], "0744": 3, "0603": 3, "981": 3, "0762": 3, "0547": 3, "0207": 3, "0525": 3, "0m6": 3, "952": [3, 156], "0m7": 3, "048": [3, 224], "0m0": 3, "619": 3, "gain": [3, 6, 19, 87, 184, 196, 215, 217], "six": [3, 174, 182], "kind": [3, 6, 7, 22, 26, 40, 48, 51, 54, 80, 96, 104, 106, 110, 122, 132, 281], "larg": [3, 4, 6, 7, 8, 13, 17, 18, 19, 21, 26, 40, 44, 54, 65, 93, 96, 100, 102, 105, 110, 112, 113, 115, 121, 128, 131, 132, 133, 134, 136, 139, 143, 147, 149, 151, 162, 168, 170, 174, 175, 177, 178, 179, 187, 188, 191, 193, 196, 198, 209, 217, 219, 226, 232, 236, 247, 253, 254, 263, 268], "improv": [3, 6, 7, 10, 11, 19, 22, 23, 24, 27, 40, 54, 61, 98, 103, 105, 113, 118, 131, 132, 133, 134, 135, 136, 137, 140, 143, 154, 159, 166, 175, 179, 180, 187, 188, 194, 198, 199, 200, 211, 215, 217, 224, 226, 228, 233, 235, 237, 247, 248, 261, 263, 271, 275], "due": [3, 6, 7, 19, 21, 25, 57, 87, 90, 103, 114, 118, 133, 137, 142, 147, 165, 166, 177, 188, 194, 198, 200, 209, 214, 217, 219, 227, 231, 233, 238, 278, 281], "size": [3, 4, 6, 7, 10, 12, 13, 15, 19, 21, 22, 23, 24, 26, 35, 36, 40, 41, 45, 47, 48, 49, 51, 54, 56, 57, 60, 87, 93, 96, 98, 100, 103, 104, 105, 109, 110, 112, 113, 122, 128, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 149, 150, 151, 156, 157, 158, 159, 162, 165, 167, 168, 171, 173, 174, 175, 176, 177, 180, 182, 184, 187, 188, 190, 191, 193, 194, 196, 198, 199, 200, 207, 210, 212, 215, 217, 229, 230, 231, 233, 237, 247, 248, 252, 254, 261, 262, 263, 267, 282], "larger": [3, 10, 13, 80, 87, 95, 105, 113, 117, 122, 132, 133, 134, 137, 139, 145, 154, 168, 175, 178, 180, 184, 187, 188, 200, 212, 220, 229, 230, 236, 248, 268], "heavi": [3, 7, 54, 105, 109], "less": [3, 6, 7, 8, 10, 17, 22, 61, 87, 100, 105, 106, 113, 117, 128, 134, 139, 150, 153, 165, 168, 174, 175, 176, 184, 185, 188, 190, 191, 194, 198, 200, 232, 248, 252], "impact": [3, 13, 19, 40, 93, 105, 150, 168, 176, 179, 200, 217, 246, 281, 282], "smaller": [3, 40, 56, 100, 105, 112, 113, 133, 137, 174, 176, 187, 220, 248, 252, 268], "nevertheless": [3, 6, 22, 26, 159, 174], "richard": 4, "zou": 4, "integr": [4, 7, 11, 15, 17, 26, 39, 93, 114, 118, 120, 132, 139, 142, 170, 184, 185, 188, 194, 195, 211, 215, 216, 223, 229, 236, 244, 246, 260, 265, 275, 281], "opcheck": [4, 17], "basic": [4, 10, 12, 16, 17, 18, 26, 27, 35, 36, 37, 40, 41, 42, 43, 44, 45, 54, 59, 61, 62, 78, 82, 85, 92, 95, 98, 99, 100, 103, 105, 108, 112, 113, 114, 115, 117, 118, 121, 132, 137, 140, 143, 156, 163, 170, 174, 179, 191, 194, 208, 212, 229, 230, 248, 261, 267, 272, 273, 277, 278, 283], "program": [4, 5, 6, 21, 24, 25, 26, 28, 65, 100, 106, 108, 109, 112, 132, 137, 140, 155, 168, 170, 177, 188, 196, 198, 202, 216, 230, 248, 263, 277, 278, 280, 281], "amd": [4, 6], "rocm": [4, 6, 184], "modif": [4, 15, 16, 22, 23, 24, 93, 106, 113, 143, 149, 172, 174, 177, 182, 185, 190, 194, 262, 268, 278], "e": [4, 5, 6, 7, 8, 10, 11, 12, 17, 21, 25, 26, 28, 35, 36, 41, 47, 48, 54, 56, 57, 65, 80, 90, 93, 95, 98, 100, 103, 105, 108, 112, 113, 122, 128, 132, 133, 135, 136, 137, 139, 140, 141, 144, 146, 147, 149, 151, 154, 159, 166, 167, 171, 172, 176, 178, 180, 184, 188, 190, 194, 195, 209, 210, 212, 214, 215, 219, 222, 223, 228, 232, 233, 235, 237, 248, 250, 253, 262, 263, 265, 266, 280], "g": [4, 6, 7, 8, 10, 11, 12, 15, 17, 21, 26, 28, 47, 54, 56, 57, 65, 93, 95, 98, 100, 103, 105, 107, 108, 112, 128, 132, 133, 135, 139, 140, 141, 147, 149, 151, 156, 165, 167, 171, 174, 176, 178, 180, 184, 188, 190, 194, 195, 201, 210, 214, 215, 222, 223, 232, 235, 248, 253, 262, 263], "etc": [4, 8, 11, 17, 48, 49, 51, 54, 56, 74, 98, 100, 103, 106, 107, 108, 109, 113, 122, 137, 168, 172, 174, 175, 180, 190, 191, 194, 209, 214, 228, 233, 236, 237, 248, 250, 263, 265], "wish": [4, 6, 7, 8, 17, 26, 57, 80, 96, 103, 122, 136, 162, 167, 177, 187, 191, 195, 208, 230, 247, 276], "bring": [4, 8, 96, 136, 168, 174, 184, 187, 191, 200, 210, 222, 233, 253, 263, 281], "bless": 4, "path": [4, 5, 6, 7, 21, 22, 25, 26, 37, 54, 55, 56, 57, 58, 80, 87, 93, 95, 98, 103, 104, 105, 106, 113, 122, 133, 134, 141, 156, 171, 187, 188, 194, 198, 199, 200, 207, 214, 223, 224, 229, 230, 235, 244, 248, 260, 262, 263, 264, 280, 281], "fuse": [4, 6, 19, 22, 132, 156, 173, 181, 194, 195, 200, 211, 217, 223, 235, 267, 283], "subsystem": [4, 8, 17, 190, 275], "def": [4, 5, 6, 7, 10, 12, 15, 21, 22, 24, 25, 26, 40, 56, 58, 60, 80, 90, 104, 115, 122, 133, 134, 135, 136, 137, 141, 142, 144, 147, 149, 156, 159, 166, 170, 171, 176, 177, 178, 182, 185, 187, 195, 196, 201, 202, 207, 211, 214, 216, 217, 219, 226, 228, 229, 230, 232, 233, 235, 236, 238, 244, 248, 261, 273, 278, 282], "mymuladd": 4, "bind": [4, 5, 7, 8, 11, 26, 132, 136, 199, 263, 281], "precompil": 4, "instead": [4, 5, 6, 7, 8, 10, 11, 17, 19, 22, 23, 25, 26, 28, 35, 48, 49, 54, 56, 57, 58, 68, 95, 98, 103, 104, 106, 107, 112, 113, 120, 121, 128, 133, 134, 135, 138, 139, 141, 144, 145, 149, 154, 155, 157, 158, 159, 162, 165, 171, 172, 173, 176, 177, 178, 180, 182, 184, 185, 187, 188, 190, 191, 193, 194, 195, 200, 207, 209, 210, 211, 212, 217, 222, 223, 230, 233, 236, 239, 244, 254, 268, 274, 276, 282], "cpp_extens": [4, 6, 11, 26, 171, 248], "extens": [4, 7, 8, 16, 20, 25, 26, 57, 96, 122, 132, 135, 142, 144, 149, 187, 201, 207, 209, 215, 236, 238, 248, 251, 259, 267, 274, 283], "ahead": [4, 6, 25, 40, 98, 142, 165, 185, 190, 195, 230, 263, 277, 280], "setuptool": [4, 11, 171, 184], "load_inlin": [4, 26, 248], "setup": [4, 6, 7, 11, 18, 22, 25, 39, 57, 58, 60, 133, 134, 139, 147, 165, 171, 178, 198, 200, 209, 210, 216, 222, 223, 229, 230, 232, 248, 262], "extension_cpp": 4, "ext_modul": [4, 6, 11, 26, 171], "cppextens": [4, 6, 11, 26, 171], "muladd": 4, "cpp": [4, 5, 6, 7, 10, 25, 26, 131, 132, 156, 211, 215, 237, 262, 277, 280], "py_limited_api": 4, "min": [4, 22, 57, 87, 100, 105, 128, 149, 171, 174, 176, 178, 187, 190, 278], "expos": [4, 6, 7, 10, 25, 26, 104, 135, 178, 191, 216, 223, 263], "stabl": [4, 5, 23, 29, 30, 31, 32, 33, 54, 67, 80, 105, 106, 117, 121, 128, 136, 152, 173, 183, 184, 186, 221, 238, 247], "limit": [4, 5, 7, 11, 12, 16, 19, 22, 42, 54, 65, 80, 114, 133, 137, 140, 150, 151, 158, 159, 167, 168, 180, 188, 190, 191, 200, 217, 229, 248, 260], "subset": [4, 15, 24, 26, 90, 93, 98, 102, 105, 117, 128, 149, 171, 187, 209, 210, 236, 248, 280], "extra_compile_arg": [4, 11], "cxx": [4, 5, 7, 25, 26, 202, 223, 237], "dpy_limited_api": 4, "0x03090000": 4, "wheel": [4, 54, 105, 174, 184, 215], "cmdclass": [4, 6, 11, 26, 171], "build_ext": [4, 6, 11, 26, 171], "buildextens": [4, 6, 11, 26, 171], "bdist_wheel": 4, "cp39": 4, "cu": [4, 6], "cudaextens": [4, 6, 171], "cpython": [4, 6, 26, 262], "agnost": [4, 6, 249], "pure": [4, 5, 6, 7, 11, 26, 132, 140, 144, 151, 167, 190, 193, 201, 211], "agnostic": 4, "minim": [4, 7, 11, 13, 19, 26, 40, 57, 67, 68, 72, 73, 74, 77, 78, 80, 87, 95, 107, 112, 113, 121, 132, 134, 139, 146, 156, 170, 175, 188, 207, 214, 217, 263, 266, 268], "oldest": 4, "hexcod": 4, "throughout": [4, 13, 28, 57, 110, 149, 165, 168, 174, 185, 209, 260], "environ": [4, 5, 6, 7, 8, 12, 17, 20, 21, 25, 28, 39, 60, 87, 90, 96, 99, 102, 115, 125, 132, 133, 134, 137, 142, 146, 147, 149, 156, 168, 170, 171, 175, 176, 177, 178, 188, 190, 191, 194, 196, 198, 211, 216, 223, 224, 228, 229, 230, 231, 232, 233, 236, 244, 246, 248, 262, 263, 272, 277, 279, 280, 281, 282, 283], "unknown": 4, "behavior": [4, 10, 11, 12, 13, 15, 25, 28, 40, 54, 56, 100, 110, 113, 114, 150, 155, 156, 159, 165, 168, 182, 188, 190, 208, 209, 219, 252, 263, 274, 276, 281], "runnabl": [4, 139, 156, 266], "three": [4, 7, 11, 13, 15, 16, 37, 40, 56, 57, 68, 80, 87, 90, 95, 96, 102, 103, 106, 113, 118, 121, 122, 132, 136, 137, 140, 141, 159, 163, 166, 168, 171, 174, 178, 179, 180, 182, 184, 185, 191, 198, 200, 210, 211, 244, 253, 280], "line": [4, 5, 6, 7, 10, 13, 17, 24, 25, 26, 54, 55, 56, 60, 61, 87, 98, 102, 103, 104, 105, 107, 113, 120, 139, 140, 141, 147, 149, 155, 156, 173, 175, 177, 178, 180, 184, 185, 188, 190, 198, 201, 202, 207, 209, 229, 230, 232, 237, 238, 252, 261, 263, 278, 279, 280, 281], "specif": [4, 6, 7, 10, 11, 12, 19, 21, 22, 25, 26, 28, 37, 41, 48, 60, 80, 87, 93, 95, 96, 98, 100, 102, 104, 107, 108, 109, 113, 114, 115, 117, 118, 122, 125, 133, 134, 137, 140, 141, 143, 149, 150, 156, 168, 170, 172, 174, 176, 177, 178, 179, 180, 184, 185, 190, 191, 193, 194, 195, 208, 211, 212, 214, 216, 217, 223, 224, 228, 229, 230, 236, 237, 244, 246, 253, 260, 262, 267, 272, 275, 277, 281, 282], "verifi": [4, 7, 23, 90, 95, 103, 118, 125, 144, 151, 153, 154, 157, 159, 172, 173, 191, 193, 199, 223, 236, 237, 244, 280], "met": [4, 15, 133, 168], "crash": [4, 7, 198], "wors": [4, 22], "silent": [4, 17, 156, 188, 260], "incorrect": [4, 17, 57, 95, 98, 138, 144, 168, 188], "avoid": [4, 6, 18, 48, 93, 102, 105, 133, 134, 135, 137, 143, 147, 149, 159, 162, 165, 174, 176, 188, 190, 199, 200, 207, 208, 212, 215, 216, 217, 219, 229, 247, 248, 252, 253, 260, 272, 281], "unstabl": 4, "libtorch_python": 4, "particular": [4, 5, 6, 7, 10, 12, 26, 37, 48, 56, 87, 88, 93, 95, 96, 98, 100, 112, 137, 139, 140, 142, 149, 151, 162, 167, 170, 177, 187, 190, 193, 194, 195, 207, 208, 210, 212, 252, 263, 272], "aten": [4, 6, 10, 11, 16, 26, 118, 120, 156, 184, 190, 201, 211, 214, 235, 236, 237, 244, 253, 262], "strongli": [4, 16, 150, 166, 194], "recommend": [4, 5, 7, 8, 10, 11, 16, 21, 22, 23, 26, 65, 87, 96, 102, 113, 117, 132, 135, 141, 147, 163, 173, 180, 184, 190, 191, 193, 194, 196, 198, 209, 214, 215, 224, 229, 236, 237, 244, 252, 261, 262, 263, 280], "ascertain": [4, 199], "compliant": [4, 193, 229, 230], "safe": [4, 22, 26, 105, 168], "guarante": [4, 11, 105, 146, 149, 159, 168, 172, 177, 178, 190, 208, 278], "better": [4, 6, 7, 15, 19, 22, 24, 37, 40, 41, 48, 57, 61, 95, 98, 100, 102, 105, 112, 113, 117, 120, 132, 135, 136, 139, 140, 141, 142, 156, 157, 158, 165, 167, 168, 174, 175, 180, 184, 185, 187, 190, 196, 200, 207, 208, 217, 224, 248, 263, 271, 281], "wild": 4, "west": 4, "There": [4, 5, 7, 10, 11, 15, 16, 19, 25, 26, 28, 35, 51, 80, 90, 95, 96, 98, 100, 103, 104, 105, 106, 107, 110, 112, 113, 128, 131, 141, 142, 146, 150, 151, 155, 157, 159, 162, 165, 167, 170, 173, 174, 177, 178, 180, 190, 191, 192, 193, 194, 195, 198, 209, 217, 248, 250, 255, 256, 257, 258, 262, 263, 266, 269, 272, 277, 279, 281], "caveat": [4, 147, 176, 198, 248, 252], "yourself": [4, 5, 6, 7, 10, 26, 39, 98, 109, 132, 158, 191], "truli": [4, 7, 54, 158], "relev": [4, 5, 7, 15, 58, 106, 108, 112, 125, 134, 137, 172, 187, 190, 199, 263, 265, 272, 278], "third": [4, 7, 10, 13, 17, 25, 26, 57, 67, 68, 70, 72, 73, 74, 77, 78, 100, 103, 110, 121, 132, 136, 144, 171, 180, 207, 222], "intend": [4, 6, 7, 10, 13, 26, 95, 105, 133, 137, 156, 159, 179, 188, 190, 194, 207, 228, 250, 263, 273], "influenc": [4, 7, 57, 100, 168, 281], "accordingli": [4, 5, 11, 21, 25, 150, 165, 176, 187, 224], "command": [4, 5, 6, 7, 15, 26, 55, 96, 102, 104, 117, 125, 132, 135, 146, 147, 168, 171, 174, 176, 177, 178, 180, 184, 185, 187, 193, 196, 198, 202, 230, 232, 236, 237, 253, 261, 263, 277, 278, 279, 280], "consequ": [4, 137, 168, 175, 190], "properli": [4, 10, 11, 15, 26, 55, 60, 105, 144, 147, 149, 159, 165, 166, 174, 176, 177, 178, 180, 194, 207, 209, 219, 260], "could": [4, 5, 6, 7, 10, 11, 12, 26, 57, 93, 95, 100, 105, 106, 107, 109, 110, 112, 115, 120, 133, 134, 137, 138, 141, 149, 159, 165, 168, 174, 175, 176, 177, 178, 180, 184, 185, 187, 190, 193, 195, 207, 209, 211, 214, 222, 230, 231, 232, 233, 237, 238, 244, 252, 253, 281], "outsid": [4, 11, 15, 16, 26, 49, 132, 135, 137, 143, 184, 187, 190, 207, 260, 268, 276], "cannot": [4, 6, 7, 12, 15, 21, 25, 26, 54, 65, 87, 103, 114, 118, 121, 122, 135, 136, 144, 147, 149, 150, 159, 168, 174, 188, 190, 200, 220, 222, 235, 275], "mymuladd_cpu": 4, "const": [4, 5, 6, 7, 10, 11, 16, 25, 26, 156, 171, 201, 211, 235, 237, 248, 262, 280], "torch_check": [4, 6, 10], "torch_internal_assert": [4, 10], "devicetyp": [4, 10, 16], "a_contig": 4, "contigu": [4, 6, 10, 36, 159, 211, 263], "b_contig": 4, "a_ptr": 4, "data_ptr": [4, 10, 26, 201], "b_ptr": 4, "result_ptr": [4, 10], "int64_t": [4, 7, 10, 26, 211, 235], "numel": [4, 10, 159, 176, 207, 262], "order": [4, 5, 7, 8, 12, 13, 16, 17, 19, 23, 25, 35, 36, 37, 48, 49, 54, 55, 60, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 93, 95, 96, 98, 103, 113, 114, 115, 117, 118, 120, 121, 132, 133, 135, 138, 139, 141, 144, 147, 149, 155, 156, 157, 159, 171, 172, 177, 180, 182, 187, 188, 190, 191, 193, 194, 195, 196, 209, 212, 217, 222, 233, 235, 252, 262, 272, 273, 281], "torch_librari": [4, 5, 7, 8, 10, 17, 25, 26, 237, 280], "ensur": [4, 6, 10, 11, 12, 13, 15, 16, 22, 25, 40, 41, 54, 58, 61, 68, 105, 113, 114, 120, 121, 122, 133, 146, 147, 149, 153, 168, 170, 174, 175, 177, 179, 187, 188, 191, 199, 201, 211, 216, 219, 229, 248, 250, 260, 266, 275, 280, 281], "awar": [4, 80, 95, 103, 137, 139, 149, 150, 159, 179, 190, 207, 275], "top": [4, 6, 7, 10, 19, 22, 23, 25, 26, 39, 55, 56, 57, 87, 88, 96, 99, 102, 104, 105, 113, 137, 149, 173, 178, 179, 184, 185, 188, 193, 214, 217, 236, 244, 246, 280], "project": [4, 5, 6, 7, 26, 57, 95, 102, 122, 137, 171, 175, 180, 185, 212, 237, 238, 244, 267, 280, 282], "schema": [4, 11, 23, 26], "mutat": [4, 10, 11, 17, 121, 151, 167, 168, 190, 222, 227, 235], "m": [4, 5, 6, 7, 10, 11, 15, 16, 22, 25, 26, 35, 47, 54, 95, 100, 104, 109, 113, 133, 134, 141, 156, 157, 159, 171, 173, 176, 178, 211, 217, 219, 230, 236, 244, 263, 281], "torch_library_impl": [4, 10, 11, 16], "impl": [4, 10, 11, 16, 262], "myaddmul": 4, "__global__": [4, 6], "muladd_kernel": 4, "idx": [4, 22, 37, 56, 173, 185, 217], "blockidx": [4, 6], "blockdim": [4, 6], "threadidx": [4, 6], "mymuladd_cuda": 4, "255": [4, 7, 13, 105, 187, 195, 253], "256": [4, 7, 19, 22, 56, 93, 137, 138, 158, 180, 190, 217, 224, 235, 236, 253], "faketensor": [4, 17, 190, 199], "kernel": [4, 6, 7, 8, 10, 14, 17, 19, 21, 26, 88, 100, 103, 113, 118, 132, 135, 140, 151, 156, 159, 166, 167, 168, 179, 180, 181, 184, 188, 190, 191, 194, 200, 201, 202, 211, 214, 217, 221, 224, 233, 244, 248, 250, 252, 253, 263, 267, 270, 273, 278, 283], "meta": [4, 17, 21, 135, 137, 139, 151, 167, 174, 190, 219, 254, 260, 267], "abstract": [4, 6, 12, 15, 37, 56, 65, 93, 103, 104, 108, 113, 121, 137, 139, 149, 154, 168, 171, 174, 191, 231, 232], "metadata": [4, 11, 17, 19, 25, 142, 174, 185, 190, 199, 217, 252], "correct": [4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 22, 40, 47, 48, 51, 54, 68, 80, 90, 93, 95, 96, 98, 100, 103, 104, 106, 107, 113, 121, 133, 134, 138, 143, 150, 156, 159, 166, 174, 176, 177, 180, 182, 184, 185, 191, 196, 199, 212, 232, 238, 247, 260, 278], "stride": [4, 6, 7, 17, 22, 57, 80, 96, 100, 133, 143, 156, 159, 182, 187, 190, 195, 199, 210, 252], "register_fak": [4, 17], "though": [4, 7, 11, 26, 51, 80, 95, 103, 105, 106, 128, 143, 144, 151, 155, 167, 174, 185, 190, 191, 200, 207, 237, 248, 262], "definit": [4, 6, 7, 10, 11, 23, 25, 28, 42, 51, 73, 80, 90, 107, 121, 132, 155, 166, 175, 179, 208, 238, 262, 263], "load": [4, 6, 19, 21, 22, 23, 24, 26, 27, 35, 36, 38, 39, 40, 44, 45, 47, 51, 56, 57, 60, 80, 93, 98, 103, 104, 106, 113, 115, 123, 132, 133, 135, 140, 156, 159, 165, 168, 170, 174, 184, 185, 187, 190, 193, 198, 200, 201, 216, 217, 218, 223, 229, 235, 237, 238, 247, 251, 259, 260, 262, 267, 268, 277, 278, 283], "strive": 4, "load_librari": [4, 25, 26], "next": [4, 5, 6, 7, 10, 12, 13, 15, 16, 18, 19, 22, 23, 25, 26, 37, 47, 54, 56, 58, 60, 61, 87, 90, 95, 98, 100, 103, 104, 105, 106, 110, 113, 115, 122, 133, 134, 135, 137, 138, 140, 141, 142, 143, 144, 146, 150, 151, 155, 156, 158, 162, 165, 167, 168, 175, 176, 177, 178, 180, 182, 184, 185, 190, 191, 196, 200, 202, 209, 210, 217, 220, 233, 236, 237, 244, 252, 253, 268, 273], "_c": [4, 80, 136, 198, 235], "_": [4, 6, 12, 13, 15, 16, 22, 24, 44, 53, 54, 57, 103, 104, 106, 113, 117, 135, 136, 140, 149, 159, 162, 174, 176, 178, 185, 196, 214, 226, 228, 235, 236, 247, 252, 278, 282], "_check": 4, "empty_lik": [4, 103, 159, 207], "formula": [4, 11, 17, 105, 153, 174], "matter": [4, 6, 187, 207, 209, 226, 247], "wrong": [4, 57, 80, 107, 140, 156, 188], "hold": [4, 6, 15, 18, 21, 51, 67, 68, 70, 72, 73, 74, 93, 113, 121, 133, 134, 135, 140, 146, 165, 175, 176, 178, 252, 260, 263], "happen": [4, 10, 24, 26, 28, 35, 36, 37, 40, 47, 57, 95, 98, 100, 103, 105, 107, 113, 115, 134, 135, 137, 144, 147, 149, 168, 172, 176, 184, 185, 190, 191, 200, 231, 248, 252, 263, 266, 276, 278], "modul": [4, 6, 13, 14, 15, 18, 21, 22, 24, 25, 26, 27, 36, 40, 41, 42, 45, 48, 49, 51, 54, 58, 60, 65, 71, 73, 75, 80, 95, 96, 98, 103, 104, 107, 112, 115, 117, 122, 123, 128, 132, 133, 134, 135, 137, 138, 141, 142, 143, 147, 149, 154, 155, 156, 159, 162, 165, 167, 170, 171, 173, 174, 176, 177, 178, 179, 182, 185, 187, 188, 190, 194, 195, 198, 200, 201, 211, 214, 215, 216, 217, 220, 223, 228, 229, 230, 231, 232, 236, 237, 238, 244, 248, 250, 251, 253, 259, 263, 265, 267, 268, 280, 281, 283], "initi": [4, 7, 10, 12, 15, 18, 21, 22, 23, 24, 25, 26, 28, 36, 37, 40, 47, 54, 60, 68, 77, 78, 80, 96, 98, 103, 104, 105, 107, 110, 112, 113, 120, 121, 122, 128, 133, 134, 137, 140, 141, 150, 151, 154, 156, 159, 165, 168, 170, 172, 173, 175, 176, 177, 178, 180, 182, 184, 188, 191, 194, 196, 198, 210, 215, 220, 223, 229, 230, 232, 236, 244, 246, 248, 252, 260, 263, 268, 280], "pybind11_modul": [4, 6, 171], "notic": [4, 6, 10, 15, 24, 25, 26, 28, 35, 47, 48, 57, 80, 90, 95, 98, 103, 105, 107, 122, 144, 149, 156, 158, 166, 167, 174, 184, 188, 190, 194, 207, 209, 266, 278, 280], "pybind11": [4, 6, 10, 25, 26, 171, 248], "promis": [4, 113, 211], "With": [4, 5, 10, 11, 16, 18, 19, 21, 22, 24, 44, 53, 57, 80, 90, 95, 96, 102, 109, 135, 137, 144, 147, 149, 156, 162, 165, 170, 176, 177, 178, 179, 180, 181, 196, 200, 201, 217, 224, 227, 228, 229, 232, 233, 244, 246, 252, 260, 263, 277, 280, 281, 282, 283], "sadli": 4, "foreshadow": 4, "wonder": [4, 6, 107, 165, 168, 191, 194], "sai": [4, 5, 6, 7, 17, 27, 47, 56, 103, 107, 109, 112, 135, 138, 151, 157, 165, 172, 184, 200], "not_agnost": 4, "csrc": [4, 6, 25, 26, 171], "extension_bad": 4, "__init__": [4, 5, 6, 7, 12, 15, 22, 24, 25, 36, 40, 41, 56, 58, 80, 98, 100, 104, 107, 115, 122, 133, 140, 141, 142, 147, 149, 170, 172, 176, 177, 178, 182, 185, 187, 195, 211, 216, 219, 228, 229, 230, 232, 233, 236, 238, 244, 250, 252, 278], "successfulli": [4, 5, 7, 25, 55, 115, 136, 139, 149, 156, 170, 177, 190, 191, 209, 223, 235, 236, 250, 264, 265, 266, 280], "extern": [4, 56, 105, 122, 139, 155, 156, 201, 211, 235, 263], "pyobject": 4, "pyinit__c": 4, "struct": [4, 7, 16, 25], "pymoduledef": 4, "module_def": 4, "pymoduledef_head_init": 4, "null": [4, 7, 198, 244], "interpret": [4, 6, 7, 26, 28, 61, 87, 90, 96, 112, 132, 141, 142, 180, 188, 190, 201, 215, 233, 248, 251, 259, 262, 267, 278, 281, 283], "global": [4, 6, 7, 28, 54, 61, 93, 137, 165, 170, 177, 182, 190, 216, 217, 226, 228, 231, 233, 235, 249, 260, 262, 263], "variabl": [4, 5, 6, 7, 10, 23, 25, 26, 35, 54, 87, 93, 95, 103, 106, 107, 109, 113, 125, 142, 146, 149, 156, 170, 176, 179, 190, 191, 194, 198, 200, 202, 209, 211, 212, 216, 222, 223, 224, 236, 244, 272, 279, 281], "pymodule_cr": 4, "entir": [4, 6, 7, 15, 18, 21, 22, 28, 51, 54, 58, 105, 107, 110, 113, 128, 132, 133, 134, 140, 142, 143, 154, 165, 167, 170, 172, 174, 178, 180, 190, 191, 207, 208, 209, 230, 247, 252, 254, 263, 267, 268, 278], "statement": [4, 10, 24, 28, 35, 47, 49, 114, 180, 190, 216, 247, 249], "trigger": [4, 135, 147, 156, 168, 176, 178, 263], "challeng": [4, 15, 109, 110, 114, 133, 136, 137, 149, 154, 166, 175, 187, 230, 231, 232, 248, 267], "shift": [4, 174], "toward": [4, 22, 54, 105, 141, 175], "trivial": [4, 15, 56, 61, 103, 138, 191, 219, 231], "pathlib": [4, 113, 134, 187], "so_fil": 4, "__file__": [4, 6, 171, 248], "glob": [4, 141], "assert": [4, 6, 12, 21, 22, 56, 115, 135, 142, 147, 156, 177, 179, 185, 190, 196, 198, 217, 226, 235, 273], "len": [4, 22, 40, 56, 60, 80, 104, 113, 115, 128, 133, 134, 135, 141, 149, 176, 177, 182, 185, 187, 217, 232, 233, 238], "f": [4, 6, 10, 12, 13, 17, 21, 22, 25, 35, 40, 47, 51, 58, 60, 80, 95, 104, 107, 113, 115, 122, 133, 134, 136, 137, 138, 147, 149, 156, 157, 170, 171, 173, 176, 177, 178, 182, 185, 187, 196, 198, 201, 217, 222, 226, 228, 229, 230, 232, 233, 235, 236, 238, 244, 248, 280, 282], "register_autograd": [4, 17, 275], "prefer": [4, 5, 7, 10, 17, 58, 157, 162, 171, 174, 188, 191, 198, 211, 247, 275], "directli": [4, 5, 6, 7, 10, 12, 13, 15, 17, 23, 25, 26, 28, 36, 44, 53, 57, 90, 93, 95, 96, 103, 114, 115, 117, 118, 135, 136, 137, 142, 144, 145, 157, 168, 173, 174, 178, 180, 191, 198, 200, 209, 210, 219, 223, 228, 230, 233, 238, 281], "_backward": 4, "saved_tensor": [4, 6, 144], "grad_a": 4, "grad_b": 4, "none": [4, 12, 15, 16, 21, 22, 54, 56, 93, 95, 105, 113, 115, 133, 134, 135, 149, 151, 156, 159, 167, 170, 177, 187, 190, 195, 214, 217, 219, 224, 229, 230, 232, 233, 235, 261, 273], "needs_input_grad": 4, "_setup_context": 4, "saved_a": 4, "saved_b": 4, "setup_context": 4, "composit": [4, 7, 8, 12, 17, 28, 107, 108, 157, 170, 174, 232, 275], "had": [4, 7, 26, 51, 56, 95, 98, 103, 110, 113, 115, 121, 165, 166, 175, 185, 237, 244, 260], "own": [4, 6, 7, 10, 11, 12, 15, 18, 19, 21, 26, 28, 36, 37, 54, 57, 68, 80, 93, 95, 96, 98, 113, 118, 120, 121, 132, 133, 134, 135, 141, 142, 143, 147, 156, 165, 166, 172, 173, 174, 177, 178, 180, 187, 188, 190, 191, 193, 194, 195, 198, 200, 217, 229, 231, 233, 248, 260], "mymul": 4, "mymul_cpu": 4, "correctli": [4, 13, 17, 54, 57, 80, 95, 96, 98, 125, 132, 135, 153, 159, 165, 168, 170, 172, 173, 187, 188, 191, 194, 209, 232, 266], "mathemat": [4, 11, 14, 17, 47, 53, 68, 95, 98, 100, 109, 149, 174, 190], "plan": [4, 5, 7, 8, 11, 21, 122, 134, 137, 187, 191, 210, 223], "gradcheck": [4, 17, 143, 144, 153, 263], "sample_input": [4, 122], "make_tensor": 4, "make_nondiff_tensor": 4, "20": [4, 5, 7, 22, 26, 40, 87, 90, 93, 103, 120, 133, 139, 140, 141, 147, 149, 150, 159, 165, 172, 176, 178, 182, 184, 217, 235, 238, 248, 253, 262, 278, 282], "14": [4, 7, 25, 26, 27, 80, 98, 104, 133, 156, 182, 187, 194, 236, 237, 238, 248, 253, 281], "123": [4, 56, 178, 236], "reference_muladd": 4, "extend": [4, 5, 6, 7, 10, 22, 27, 57, 93, 114, 115, 116, 117, 132, 133, 141, 150, 173, 177, 178, 187, 191, 195, 198, 201, 215, 237, 238, 263, 268, 272, 274], "arg": [4, 21, 22, 24, 56, 58, 60, 80, 109, 122, 133, 134, 147, 149, 155, 159, 175, 176, 177, 178, 182, 187, 188, 190, 201, 226, 228, 229, 230, 233, 235, 237, 278, 282], "assert_clos": [4, 115], "check": [4, 5, 6, 7, 10, 14, 15, 16, 22, 23, 25, 26, 28, 39, 40, 41, 44, 47, 48, 49, 54, 55, 57, 60, 63, 64, 80, 86, 90, 95, 98, 100, 103, 104, 105, 106, 109, 113, 115, 120, 132, 133, 134, 135, 136, 139, 140, 147, 149, 150, 153, 156, 159, 167, 168, 172, 173, 174, 177, 187, 188, 190, 191, 193, 194, 202, 204, 205, 210, 211, 212, 213, 214, 216, 223, 225, 230, 236, 237, 240, 241, 242, 243, 244, 245, 247, 253, 271, 273, 277, 278, 280], "undefin": [4, 149, 194, 207, 208, 209], "myadd_out": 4, "myadd_out_cpu": 4, "is_contigu": [4, 6, 159, 262], "caus": [4, 13, 16, 24, 25, 80, 87, 95, 103, 113, 138, 156, 168, 173, 176, 180, 184, 187, 190, 191, 198, 207, 216, 244, 249, 263, 276, 281], "incompat": [4, 5, 136, 190, 278], "went": [4, 57, 100, 103, 142, 156], "fairli": [4, 6, 105, 113, 149, 165, 175, 194], "longer": [5, 13, 24, 25, 28, 57, 63, 64, 95, 107, 113, 121, 135, 138, 142, 156, 165, 172, 175, 176, 188, 190, 204, 205, 211, 212, 213, 220, 223, 225, 227, 233, 240, 241, 242, 243, 245, 248, 263, 280], "activ": [5, 6, 7, 11, 13, 15, 16, 19, 22, 24, 25, 28, 36, 57, 63, 64, 87, 95, 96, 98, 105, 107, 113, 134, 137, 142, 145, 149, 157, 165, 172, 173, 184, 194, 195, 196, 201, 202, 204, 205, 213, 214, 217, 220, 224, 225, 233, 236, 237, 238, 240, 241, 242, 243, 244, 245, 246, 253, 263, 280], "primari": [5, 6, 7, 16, 154, 168, 201, 211, 212, 223, 231, 262, 263, 281], "languag": [5, 6, 7, 24, 26, 27, 28, 48, 54, 100, 106, 108, 110, 132, 137, 139, 140, 141, 163, 178, 180, 196, 201, 224, 235, 236, 263, 268, 273, 275, 278, 280], "suitabl": [5, 10, 45, 145, 149, 187, 262], "eas": [5, 6, 90, 103, 104, 134, 194, 237, 252, 267], "situat": [5, 16, 26, 28, 40, 95, 103, 135, 143, 144, 147, 149, 193, 200], "properti": [5, 6, 7, 12, 15, 24, 26, 28, 35, 44, 53, 95, 98, 103, 109, 112, 139, 159, 166, 180, 190, 208, 237, 247, 248, 260, 265, 280], "unfavor": 5, "latter": [5, 6, 7, 139, 176], "land": [5, 17, 26, 132, 142, 158, 194, 209, 237, 282], "latenc": [5, 7, 19, 132, 137, 139, 146, 156, 168, 173, 188, 217, 236, 272, 273, 281], "strict": [5, 115, 122, 187, 208, 237, 264], "even": [5, 6, 7, 10, 11, 15, 18, 24, 26, 28, 47, 48, 56, 80, 95, 98, 100, 103, 112, 113, 122, 133, 134, 137, 142, 144, 147, 154, 155, 157, 166, 168, 174, 176, 179, 187, 190, 191, 194, 200, 207, 209, 210, 220, 236, 248, 263, 264], "java": 5, "rust": 5, "paragraph": [5, 7, 26], "outlin": [5, 6, 7, 26, 168, 191], "journei": [5, 7, 57], "enabl": [5, 6, 7, 10, 12, 15, 16, 18, 21, 22, 26, 27, 37, 51, 60, 61, 87, 95, 103, 105, 117, 122, 133, 134, 136, 137, 139, 142, 143, 144, 147, 149, 156, 159, 168, 170, 172, 173, 174, 184, 185, 187, 190, 191, 195, 199, 200, 207, 209, 211, 212, 215, 216, 224, 229, 230, 231, 233, 236, 237, 244, 247, 253, 260, 267, 268, 272, 273, 274, 276, 277, 281, 282], "vanilla": [5, 6, 7, 26, 54, 70, 107, 121, 187, 194, 207, 282], "eager": [5, 11, 26, 90, 92, 142, 156, 159, 179, 188, 190, 194, 214, 226, 235, 238, 263, 276, 278], "discuss": [5, 6, 7, 10, 11, 16, 18, 26, 48, 80, 95, 98, 100, 104, 109, 110, 133, 134, 142, 149, 154, 155, 156, 162, 168, 170, 188, 194, 198, 207, 208, 209, 210, 252, 273, 275], "littl": [5, 19, 28, 57, 98, 105, 107, 113, 150, 174, 176, 178, 179, 182, 184, 217], "effort": [5, 15, 54, 56, 57, 118, 262], "mechan": [5, 6, 7, 12, 15, 16, 27, 35, 54, 61, 104, 132, 144, 155, 166, 180, 182, 184, 190, 214, 215, 233, 237, 238, 244, 272, 273], "evalu": [5, 7, 13, 19, 22, 23, 27, 40, 42, 80, 95, 96, 102, 104, 105, 115, 122, 142, 157, 162, 170, 175, 177, 185, 188, 190, 193, 217, 238, 278], "onc": [5, 6, 7, 10, 11, 12, 15, 18, 19, 23, 24, 25, 26, 28, 35, 37, 40, 56, 57, 61, 87, 96, 98, 102, 103, 104, 105, 106, 110, 115, 145, 150, 159, 165, 166, 172, 173, 174, 175, 177, 180, 184, 185, 190, 191, 199, 200, 212, 217, 231, 235, 237, 244, 247, 248, 263, 277, 278], "record": [5, 7, 10, 22, 23, 26, 28, 35, 47, 54, 113, 122, 132, 133, 134, 142, 143, 144, 165, 174, 175, 177, 178, 190, 215, 238, 253, 278], "explicit": [5, 7, 24, 26, 132, 135, 159, 168, 178, 190, 194, 208, 216, 244, 247, 267, 270, 275, 283], "pars": [5, 6, 26, 54, 56, 112, 133, 134, 139, 198, 248], "subject": [5, 12, 15, 26, 133, 153, 180, 190, 211, 212, 214, 222, 223, 224, 228, 235, 248, 277], "constraint": [5, 7, 13, 19, 21, 90, 107, 132, 137, 139, 166, 174, 187, 191, 196, 198, 217, 229, 247, 248, 260, 278], "impos": [5, 249, 260], "guidanc": [5, 10, 136, 247, 281], "offici": [5, 87, 118, 136, 149, 175, 188, 190, 237], "jit": [5, 7, 10, 16, 22, 24, 25, 28, 90, 117, 154, 188, 220, 223, 224, 233, 235, 237, 248, 253, 268, 275, 277, 278, 280], "scriptmodul": [5, 25, 26, 28, 90, 220, 280], "embed": [5, 18, 24, 26, 54, 100, 106, 108, 110, 111, 122, 132, 134, 135, 137, 170, 177, 178, 180, 185, 194, 196, 231, 283], "torchvis": [5, 11, 13, 22, 37, 39, 40, 41, 45, 47, 48, 55, 62, 80, 93, 96, 98, 99, 102, 104, 105, 128, 132, 133, 134, 155, 165, 173, 176, 177, 181, 182, 184, 185, 187, 188, 200, 214, 223, 237, 238, 253, 261, 263, 266, 271, 277, 278, 280, 283], "resnet18": [5, 47, 159, 173, 184, 187, 214, 277, 280], "normal": [5, 7, 10, 12, 13, 22, 23, 24, 40, 42, 45, 54, 56, 57, 80, 90, 96, 98, 100, 104, 105, 107, 112, 121, 122, 128, 133, 141, 143, 149, 150, 166, 168, 173, 176, 177, 179, 180, 182, 185, 187, 188, 191, 194, 200, 208, 233, 237, 238, 263, 271, 276], "rand": [5, 6, 7, 16, 24, 90, 103, 104, 144, 195, 196, 217, 223, 226, 229, 230, 235, 236, 237, 244, 263, 271, 273, 280], "224": [5, 13, 22, 23, 56, 105, 173, 182, 187, 214, 223, 237, 271, 278, 280, 281], "traced_script_modul": 5, "ident": [5, 7, 19, 60, 90, 95, 103, 104, 113, 121, 137, 146, 154, 162, 182, 185, 190, 210, 217, 248], "2698": 5, "0381": 5, "4023": 5, "3010": 5, "0448": 5, "slicebackward": 5, "circumst": [5, 6, 168, 247], "emploi": [5, 105, 180, 184, 194, 229], "form": [5, 7, 13, 16, 19, 26, 45, 51, 54, 57, 65, 106, 113, 115, 138, 141, 156, 180, 187, 194, 200, 212, 217, 219, 229, 230, 244, 263, 273, 281], "mymodul": [5, 7, 219, 228], "self": [5, 6, 7, 10, 11, 12, 15, 16, 22, 24, 25, 27, 28, 37, 40, 54, 56, 58, 60, 80, 104, 107, 113, 115, 120, 121, 122, 132, 133, 137, 141, 142, 147, 149, 156, 158, 166, 170, 176, 177, 178, 182, 184, 185, 187, 190, 194, 195, 211, 219, 228, 229, 230, 232, 233, 236, 238, 244, 253, 260, 268, 278], "n": [5, 6, 7, 13, 19, 22, 25, 26, 35, 40, 47, 56, 65, 77, 78, 87, 90, 95, 100, 103, 105, 113, 121, 133, 134, 135, 147, 149, 157, 158, 159, 162, 170, 172, 176, 177, 178, 180, 182, 185, 190, 191, 193, 198, 200, 211, 217, 222, 237, 263, 280], "super": [5, 6, 7, 12, 21, 22, 23, 24, 25, 28, 40, 80, 104, 115, 122, 133, 136, 141, 142, 147, 158, 170, 176, 177, 178, 182, 185, 187, 195, 211, 219, 228, 229, 230, 232, 236, 238, 244, 278], "mv": 5, "my_modul": 5, "sm": [5, 184], "exclud": [5, 10, 47, 135, 188, 214, 253], "doesn": [5, 8, 10, 11, 14, 17, 19, 28, 65, 107, 109, 112, 113, 138, 157, 159, 168, 172, 187, 188, 190, 195, 200, 207, 217, 222, 226, 227, 235, 262, 263, 274, 278, 279, 281], "support": [5, 7, 12, 15, 16, 18, 19, 21, 22, 25, 26, 27, 35, 41, 51, 56, 61, 63, 64, 80, 88, 90, 95, 96, 97, 98, 99, 100, 103, 104, 105, 114, 115, 116, 117, 120, 132, 133, 134, 135, 136, 139, 144, 146, 147, 149, 150, 153, 156, 159, 166, 168, 170, 171, 172, 173, 174, 176, 177, 178, 184, 187, 188, 190, 193, 195, 198, 199, 202, 204, 205, 207, 208, 209, 211, 212, 213, 214, 216, 217, 223, 224, 225, 226, 227, 228, 230, 235, 236, 237, 238, 240, 241, 242, 243, 245, 246, 248, 253, 263, 267, 272, 274, 277, 278, 279, 281], "yet": [5, 7, 11, 12, 21, 26, 55, 80, 95, 98, 103, 117, 118, 142, 149, 168, 177, 180, 191, 195, 212, 230, 233, 237, 278], "ignor": [5, 22, 56, 105, 110, 112, 122, 171, 187, 190, 193, 195, 208, 209, 212, 247, 253, 264, 276], "readi": [5, 7, 11, 18, 25, 26, 54, 96, 98, 104, 106, 107, 112, 113, 132, 134, 149, 162, 170, 171, 174, 176, 177, 178, 191, 193, 253, 278], "hand": [5, 6, 7, 10, 15, 19, 21, 26, 80, 103, 106, 112, 113, 141, 149, 167, 168, 188, 190, 191, 208, 217, 229, 230, 268], "shown": [5, 7, 10, 19, 22, 23, 24, 57, 95, 103, 113, 135, 137, 139, 156, 158, 175, 176, 178, 179, 184, 187, 188, 191, 198, 208, 209, 210, 216, 217, 230, 236, 237, 244, 277, 278, 279, 281, 282], "filenam": [5, 7, 120, 141, 187, 198, 247], "traced_resnet_model": 5, "pt": [5, 7, 25, 26, 58, 122, 133, 134, 135, 223, 237, 238, 273, 280], "my_module_model": 5, "left": [5, 19, 35, 47, 51, 54, 56, 57, 68, 90, 95, 102, 103, 107, 112, 121, 122, 149, 158, 162, 174, 175, 177, 179, 184, 185, 217, 244, 267], "realm": [5, 7], "cross": [5, 10, 14, 23, 48, 57, 98, 100, 104, 137, 139, 263, 266, 281], "sphere": 5, "distribut": [5, 6, 7, 15, 16, 22, 57, 80, 93, 98, 103, 104, 105, 107, 112, 132, 133, 134, 135, 136, 137, 139, 145, 146, 159, 165, 171, 174, 176, 184, 194, 196, 198, 214, 215, 219, 228, 231, 232, 248, 267, 281, 282], "encompass": 5, "share": [5, 6, 7, 11, 12, 21, 25, 26, 44, 53, 60, 71, 75, 93, 105, 109, 132, 134, 138, 147, 149, 150, 158, 168, 174, 177, 178, 190, 198, 230, 237, 248, 252, 262, 272, 277, 281, 283], "header": [5, 6, 7, 10, 25, 26, 171, 248], "cmake": [5, 7, 223, 237, 280], "futur": [5, 21, 24, 25, 54, 113, 118, 120, 133, 153, 158, 165, 171, 175, 176, 177, 178, 195, 210, 229, 236, 265, 276], "begin": [5, 6, 7, 12, 13, 19, 22, 25, 26, 28, 35, 47, 54, 55, 57, 60, 80, 90, 95, 98, 110, 112, 134, 137, 163, 165, 175, 177, 184, 185, 191, 209, 217, 235, 247, 248, 250, 253, 264, 265, 266, 268], "iostream": [5, 6, 7, 25, 26, 237], "argc": [5, 25, 26, 237, 280], "char": [5, 25, 26, 156, 237, 280], "argv": [5, 25, 26, 58, 60, 237, 280], "cerr": [5, 25, 26, 237, 280], "app": [5, 26, 115, 132, 229, 230, 237, 267], "export": [5, 8, 10, 20, 24, 26, 51, 90, 95, 116, 117, 132, 146, 147, 156, 179, 181, 188, 211, 216, 224, 236, 247, 263, 267, 283], "try": [5, 7, 13, 15, 16, 19, 22, 24, 25, 26, 28, 40, 44, 48, 51, 53, 54, 57, 58, 65, 80, 95, 103, 104, 105, 106, 107, 108, 109, 113, 114, 115, 120, 136, 139, 140, 141, 142, 150, 154, 156, 158, 159, 162, 165, 168, 170, 171, 172, 174, 175, 180, 184, 188, 190, 194, 196, 200, 208, 217, 233, 236, 237, 247, 248, 260, 261, 278, 280, 281], "deseri": [5, 7, 26, 122, 280], "catch": [5, 10, 12, 25, 188, 190, 237, 276, 280], "c10": [5, 10, 11, 16, 25, 171, 201, 211, 236, 237, 248, 262, 280], "ok": [5, 112, 136, 176], "accept": [5, 6, 23, 45, 93, 95, 105, 110, 137, 139, 153, 157, 162, 167, 168, 174, 177, 184, 187, 195, 219, 222, 228, 236, 253, 263], "proce": [5, 12, 28, 105, 107, 156, 190, 198, 263], "examin": [5, 12, 25, 28, 87, 95, 96, 102, 104, 105, 149, 155, 168, 191], "moment": [5, 7, 12, 195, 210, 223, 235], "cmakelist": [5, 7, 25, 26, 237, 280], "txt": [5, 6, 7, 25, 26, 54, 140, 141, 156, 173, 180, 231, 237, 280], "cmake_minimum_requir": [5, 7, 25, 26, 237, 280], "fatal_error": [5, 7, 25, 26, 237, 280], "custom_op": [5, 17, 118, 275, 280], "find_packag": [5, 7, 25, 26, 237, 280], "add_execut": [5, 7, 25, 26, 237, 280], "target_link_librari": [5, 7, 25, 26, 237, 280], "set_properti": [5, 7, 237, 280], "cxx_standard": [5, 7, 237, 280], "17": [5, 7, 24, 26, 40, 98, 104, 120, 156, 182, 190, 220, 235, 236, 248], "last": [5, 7, 12, 15, 22, 26, 36, 47, 54, 57, 58, 80, 88, 90, 93, 98, 100, 103, 104, 107, 110, 115, 128, 132, 137, 138, 141, 149, 150, 156, 165, 174, 175, 176, 178, 179, 180, 181, 185, 190, 193, 207, 210, 214, 237, 247, 263, 267, 278, 283], "thing": [5, 6, 7, 10, 16, 17, 24, 25, 26, 28, 35, 47, 48, 51, 54, 90, 93, 95, 98, 103, 104, 105, 106, 107, 109, 110, 112, 113, 132, 135, 137, 138, 139, 144, 145, 146, 149, 150, 155, 156, 159, 166, 173, 174, 182, 190, 200, 216, 229, 248, 266], "grab": [5, 7, 8, 57, 102, 173, 178], "latest": [5, 7, 9, 11, 15, 23, 93, 96, 121, 122, 132, 134, 142, 149, 161, 169, 173, 174, 177, 180, 182, 187, 188], "page": [5, 7, 8, 11, 17, 25, 26, 55, 59, 65, 94, 113, 120, 121, 132, 140, 142, 168, 178, 184, 190, 191, 224, 229, 234, 237, 263, 276], "websit": [5, 7, 96, 175, 244, 246], "unzip": [5, 7, 22, 55, 187, 193, 277], "archiv": [5, 6, 7, 28, 159, 190, 277], "folder": [5, 7, 22, 26, 55, 57, 87, 88, 96, 98, 134, 185, 193, 198, 223], "bin": [5, 7, 25, 26, 98, 149, 201, 237, 244, 277], "lib": [5, 6, 7, 11, 21, 25, 26, 156, 182, 198, 237, 262, 278, 281], "against": [5, 17, 25, 26, 40, 41, 48, 100, 102, 115, 136, 149, 159, 174, 194, 228, 237, 248], "window": [5, 6, 7, 23, 48, 56, 100, 112, 115, 132, 147, 177, 184, 193, 215, 223, 244, 263], "debug": [5, 7, 10, 22, 28, 65, 106, 132, 138, 175, 181, 190, 201, 215, 231, 248, 262, 272, 283], "abi": [5, 6, 7, 25, 26, 223, 237], "laid": 5, "within": [5, 6, 15, 21, 24, 26, 65, 90, 95, 96, 102, 113, 114, 115, 120, 137, 142, 144, 154, 156, 166, 172, 175, 177, 187, 188, 191, 194, 199, 201, 210, 211, 212, 216, 223, 232, 236, 248, 254, 263, 272, 274, 277, 281], "mkdir": [5, 7, 26, 184, 187], "cd": [5, 7, 25, 26, 184, 193, 223, 244], "dcmake_prefix_path": [5, 7, 25, 26, 237, 280], "config": [5, 7, 11, 19, 23, 93, 133, 135, 139, 142, 173, 195, 199, 200, 201, 211, 217, 235, 237, 238, 260, 268, 272, 275, 278], "someth": [5, 6, 7, 12, 15, 22, 26, 28, 48, 93, 98, 103, 107, 109, 149, 156, 173, 180, 190, 194, 222, 248, 262], "root": [5, 6, 7, 15, 25, 26, 35, 37, 40, 47, 56, 57, 98, 106, 135, 143, 150, 156, 177, 178, 182, 198, 237, 244, 261, 271], "4b5a67132e81": 5, "identif": [5, 7, 25, 26, 237], "gnu": [5, 6, 7, 25, 26, 237, 263, 281], "usr": [5, 7, 21, 25, 26, 149, 182, 237], "cc": [5, 7, 25, 26, 47, 223, 235, 237], "detect": [5, 7, 12, 13, 21, 25, 26, 57, 100, 132, 173, 181, 184, 188, 190, 237, 250, 263, 276, 281, 283], "info": [5, 6, 7, 25, 26, 87, 136, 146, 149, 158, 187, 190, 224, 237, 238], "pthread": [5, 6, 7, 25, 26, 237], "pthread_creat": [5, 7, 25, 26, 237], "thread": [5, 6, 7, 10, 24, 25, 26, 57, 120, 135, 136, 147, 168, 173, 176, 177, 178, 233, 237, 244, 248, 253, 262, 263, 281], "scan": [5, 7, 25, 26, 98, 100, 187, 190], "50": [5, 7, 19, 22, 24, 25, 26, 57, 58, 98, 104, 113, 141, 150, 159, 172, 175, 178, 182, 193, 214, 217, 220, 235, 236, 238, 263], "cmakefil": [5, 7, 25, 26], "dir": [5, 7, 25, 26, 87, 102, 139, 159, 198, 262, 272], "o": [5, 6, 7, 12, 21, 22, 25, 26, 54, 55, 56, 58, 60, 105, 133, 134, 136, 141, 147, 149, 162, 165, 168, 170, 171, 173, 176, 177, 178, 187, 196, 198, 199, 216, 217, 228, 229, 230, 232, 235, 248, 252, 282], "100": [5, 7, 22, 24, 25, 26, 40, 53, 80, 104, 107, 133, 136, 141, 142, 147, 156, 159, 173, 174, 175, 178, 182, 185, 187, 211, 217, 232, 236, 238, 248, 262, 273], "suppli": [5, 7, 109, 159, 173], "binari": [5, 7, 23, 25, 26, 54, 57, 103, 115, 149, 159, 188, 208, 215, 228, 237, 277], "1d": [5, 73, 100, 121, 222, 263], "4d": [5, 51, 159], "path_to_model": 5, "coupl": [5, 15, 39, 54, 99, 103, 104, 112, 134, 137, 144, 150, 151, 165, 168, 185, 190, 220, 263], "awai": [5, 6, 7, 26, 51, 100, 102, 106, 107, 109, 174, 175, 176, 191, 210, 231], "ivalu": [5, 26, 171, 223, 237, 280], "push_back": [5, 25, 26, 237, 280], "totensor": [5, 22, 26, 40, 56, 80, 98, 104, 133, 149, 173, 177, 182, 185, 187, 223, 237, 238, 271, 280], "slice": [5, 6, 44, 53, 110, 113, 172, 194, 212, 223, 232, 262], "eras": [5, 28], "http": [5, 7, 21, 22, 27, 28, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 86, 89, 97, 102, 105, 108, 115, 116, 117, 118, 121, 128, 133, 140, 141, 143, 152, 153, 154, 155, 159, 165, 167, 173, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 195, 200, 203, 206, 208, 210, 220, 221, 222, 223, 238, 246, 247, 248, 251, 252, 255, 256, 257, 258, 261, 278], "org": [5, 7, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 86, 89, 97, 100, 102, 104, 105, 108, 116, 117, 121, 128, 140, 141, 152, 153, 154, 155, 165, 173, 180, 183, 184, 186, 188, 189, 190, 191, 200, 203, 206, 208, 210, 215, 220, 221, 222, 223, 238, 244, 247, 251, 252, 255, 256, 257, 258, 280], "cppdoc": [5, 7], "pariti": [5, 194], "manipul": [5, 44, 45, 98, 102, 121, 135, 155, 165], "five": 5, "ideal": [5, 7, 15, 37, 95, 98, 103, 105, 168, 180, 190, 224, 273], "previous": [5, 6, 10, 23, 35, 90, 109, 113, 142, 153, 154, 170, 172, 174, 175, 176, 184, 190, 207, 222, 260, 267, 277], "kcuda": [5, 7, 201], "live": [5, 7, 11, 16, 103, 132, 138, 168, 177, 178, 210, 233], "hopefulli": [5, 7, 55, 56, 80, 90, 107, 122, 264], "equip": [5, 6, 144, 150, 207, 281], "concept": [5, 7, 12, 25, 39, 40, 60, 99, 108, 109, 113, 121, 125, 132, 139, 158, 168, 176, 179, 180, 191, 198, 201, 211, 253, 262, 281], "close": [5, 7, 15, 19, 22, 26, 57, 95, 100, 103, 105, 106, 134, 139, 165, 185, 217, 261, 263], "Of": [5, 15, 26, 105, 109, 113, 138, 149, 185, 208, 210, 244, 277], "cours": [5, 7, 15, 19, 22, 26, 58, 95, 96, 103, 105, 108, 109, 112, 113, 138, 149, 185, 217, 244], "did": [5, 7, 10, 17, 22, 26, 28, 48, 57, 95, 98, 100, 103, 115, 136, 149, 153, 166, 174, 177, 180, 191, 198, 248], "cover": [5, 6, 8, 15, 16, 18, 21, 25, 28, 37, 51, 103, 108, 118, 125, 132, 134, 139, 149, 170, 171, 174, 177, 178, 185, 188, 190, 209, 211, 212, 228, 236, 237, 247, 255, 256, 257, 258, 261, 262, 263, 274, 281], "insid": [5, 6, 7, 11, 18, 21, 25, 26, 36, 40, 49, 135, 137, 184, 188, 193, 211, 217, 222, 224], "shortli": [5, 176], "master": [5, 18, 22, 54, 133, 143, 149, 154, 155, 159, 177, 178, 193, 195, 198, 215, 223, 228, 237], "html": [5, 29, 30, 31, 32, 33, 38, 49, 50, 54, 67, 80, 81, 82, 83, 84, 85, 89, 97, 105, 108, 116, 117, 121, 125, 128, 152, 154, 155, 183, 186, 187, 189, 190, 191, 203, 206, 208, 210, 220, 221, 247, 251, 252, 255, 256, 257, 258], "peter": 6, "goldsborough": 6, "newest": [6, 10, 23, 26, 115], "date": [6, 7, 10, 11, 26, 80, 82, 83, 84, 85, 86, 134, 177, 237, 260, 277], "plethora": 6, "relat": [6, 12, 15, 57, 95, 96, 103, 104, 109, 112, 132, 137, 156, 166, 190, 194, 211, 248, 263], "algebra": [6, 15, 44, 53, 98, 103, 107, 236], "wrangl": 6, "novel": [6, 96, 196], "research": [6, 7, 19, 22, 26, 28, 54, 57, 80, 90, 96, 103, 107, 125, 149, 162, 167, 172, 187, 217, 233, 278], "power": [6, 7, 26, 47, 54, 62, 70, 80, 93, 95, 98, 105, 107, 113, 121, 132, 133, 139, 147, 149, 156, 158, 162, 171, 172, 173, 180, 187, 200, 210, 235, 248, 275, 281], "spare": [6, 7], "deriv": [6, 7, 11, 17, 19, 26, 28, 35, 40, 44, 47, 53, 95, 103, 107, 109, 110, 112, 121, 138, 140, 144, 153, 157, 217, 263], "express": [6, 8, 17, 26, 95, 98, 100, 103, 106, 117, 125, 137, 190, 194, 209, 214, 235], "realli": [6, 10, 26, 28, 48, 95, 100, 103, 106, 107, 112, 121, 123, 132, 138, 185, 207, 209, 222, 248, 283], "frequent": [6, 25, 26, 35, 87, 112, 121, 133, 209, 237, 276], "expens": [6, 19, 44, 105, 120, 178, 190, 200, 217, 253, 262, 276], "few": [6, 7, 10, 11, 16, 22, 24, 25, 26, 51, 56, 61, 90, 95, 96, 98, 103, 105, 107, 108, 109, 110, 112, 122, 131, 134, 135, 138, 140, 141, 142, 147, 149, 150, 166, 168, 173, 174, 177, 180, 188, 194, 195, 200, 208, 209, 210, 227, 230, 233, 237, 238, 247, 262, 263, 264, 272], "plausibl": 6, "address": [6, 13, 21, 25, 27, 87, 100, 132, 136, 149, 168, 176, 177, 190, 191, 194, 216, 231, 238, 260, 267, 281], "nativ": [6, 7, 10, 16, 17, 23, 26, 60, 93, 117, 118, 132, 134, 137, 150, 170, 178, 194, 195, 196, 200, 207, 210, 233, 236, 237, 253, 262, 263, 267], "much": [6, 7, 10, 11, 13, 15, 19, 22, 26, 28, 40, 57, 61, 95, 96, 105, 106, 107, 112, 113, 122, 134, 138, 139, 154, 157, 158, 165, 168, 173, 174, 177, 178, 180, 184, 185, 188, 190, 191, 198, 200, 207, 210, 217, 244, 247, 248, 252, 261, 263, 264, 267, 268, 281], "boilerpl": [6, 7, 22, 48, 107, 185, 207], "degre": [6, 40, 68, 100, 121, 139, 180, 184, 196, 210], "organ": [6, 10, 15, 26, 56, 98, 122, 140, 196, 248, 281], "tackl": [6, 120], "decid": [6, 7, 10, 11, 19, 21, 57, 65, 93, 95, 175, 190, 191, 210, 215, 217, 266], "contribut": [6, 57, 65, 87, 96, 103, 159, 184], "upstream": [6, 237, 263], "rest": [6, 7, 15, 48, 128, 135, 150, 155, 174, 176, 177, 191, 194, 209, 260], "walk": [6, 7, 11, 16, 18, 25, 26, 27, 28, 47, 59, 95, 108, 113, 125, 131, 132, 138, 156, 158, 177, 195, 200, 201, 202, 214, 247, 261], "chase": 6, "someon": [6, 180], "fire": [6, 147], "don": [6, 7, 10, 11, 17, 24, 47, 48, 57, 58, 60, 80, 93, 100, 103, 106, 107, 110, 113, 118, 122, 128, 138, 144, 155, 157, 158, 165, 168, 174, 175, 178, 179, 190, 191, 207, 208, 209, 227, 233, 235, 244, 247, 275, 276], "dai": [6, 137, 191, 260], "head": [6, 8, 19, 24, 39, 88, 100, 120, 137, 147, 179, 193, 212, 217], "straight": [6, 7, 26, 180], "recurr": [6, 48, 54, 106, 110, 132, 140, 141, 163, 166, 180, 181, 283], "unit": [6, 7, 28, 54, 100, 103, 133, 134, 157, 168, 172, 174, 175, 180, 187, 190, 194, 250, 263], "superior": [6, 136, 211], "art": [6, 48, 57, 96, 98, 100, 172, 246], "lstm": [6, 48, 54, 100, 108, 111, 140, 141, 178, 283], "lack": [6, 16, 87, 96, 207, 231], "forget": [6, 7, 113, 122, 188], "gate": [6, 54, 100, 194, 260], "exponenti": [6, 54, 95, 103, 107, 109, 166, 175, 200], "elu": [6, 214], "intern": [6, 10, 11, 12, 16, 25, 41, 42, 54, 61, 73, 100, 105, 121, 132, 133, 135, 139, 149, 184, 198, 207, 215, 220, 224, 229, 262], "never": [6, 95, 106, 107, 108, 112, 138, 172, 182], "lltm": 6, "long": [6, 7, 11, 23, 26, 54, 55, 87, 93, 100, 103, 107, 108, 109, 111, 113, 134, 136, 138, 141, 150, 155, 156, 166, 170, 175, 178, 184, 191, 194, 196, 198, 201, 248, 262, 263, 266, 276, 283], "term": [6, 7, 16, 44, 57, 65, 80, 95, 96, 100, 104, 107, 108, 109, 111, 120, 134, 136, 137, 162, 172, 174, 190, 191, 194, 200, 210, 219, 254, 281, 283], "signific": [6, 7, 22, 57, 87, 96, 134, 136, 140, 143, 155, 156, 157, 159, 165, 168, 174, 179, 184, 188, 191, 198, 220, 230, 231, 232, 236, 238, 247, 248, 263, 275], "enough": [6, 7, 19, 24, 26, 54, 87, 98, 109, 113, 121, 138, 143, 173, 190, 198, 217, 229, 236, 247], "lstmcell": 6, "cell": [6, 24, 26, 28, 55, 95, 96, 98, 100, 103, 104, 120, 168, 175, 179, 187, 191, 200, 263], "plain": [6, 7, 26, 54, 113, 135, 140, 141, 180, 193, 260, 262], "input_featur": [6, 278], "state_s": 6, "candid": [6, 156], "reset_paramet": [6, 135], "stdv": 6, "math": [6, 11, 90, 95, 109, 141, 162, 173, 235, 263], "sqrt": [6, 90, 113, 194, 207, 219, 235], "uniform_": [6, 7, 178, 219], "old_h": 6, "old_cel": 6, "cat": [6, 23, 24, 44, 48, 53, 96, 98, 106, 109, 141, 156, 178, 180, 185, 193, 246], "gate_weight": 6, "split": [6, 10, 21, 22, 23, 24, 49, 54, 57, 90, 93, 98, 102, 104, 132, 140, 141, 147, 170, 174, 177, 178, 180, 191, 193, 228, 244], "combin": [6, 11, 24, 40, 60, 65, 93, 95, 98, 100, 105, 106, 109, 112, 113, 131, 132, 133, 138, 140, 141, 143, 151, 162, 168, 172, 175, 178, 180, 190, 191, 194, 201, 212, 231, 232, 238, 248, 263], "input_g": 6, "sigmoid": [6, 7, 57, 100, 195, 263], "output_g": 6, "tanh": [6, 7, 57, 100, 107, 174, 263], "candidate_cel": 6, "new_cel": 6, "hidden": [6, 24, 54, 96, 100, 105, 106, 110, 113, 137, 139, 140, 141, 150, 154, 178, 179, 180, 246], "new_h": [6, 56], "batch_siz": [6, 7, 15, 22, 23, 37, 40, 54, 56, 57, 60, 80, 93, 104, 133, 134, 135, 137, 149, 175, 176, 177, 182, 184, 185, 187, 191, 211, 217, 237, 238, 247, 271, 278], "rnn": [6, 24, 28, 49, 54, 100, 132, 150, 163, 166, 177, 180, 181, 263, 283], "new_c": 6, "intel": [6, 149, 156, 159, 214, 216, 223, 267], "mkl": [6, 156, 211, 253, 281], "nnpack": 6, "why": [6, 7, 10, 12, 15, 17, 28, 48, 57, 90, 96, 105, 107, 112, 122, 125, 144, 147, 156, 165, 180, 188, 190, 191, 208, 210, 248, 277, 278], "room": [6, 105, 168, 236], "obviou": [6, 190, 248], "knowledg": [6, 54, 57, 80, 107, 108, 123, 125, 132, 156, 158, 283], "know": [6, 7, 10, 12, 21, 22, 25, 26, 35, 47, 54, 77, 78, 80, 98, 100, 103, 107, 109, 112, 113, 121, 138, 140, 141, 144, 149, 150, 151, 156, 158, 159, 162, 167, 168, 170, 174, 175, 176, 180, 185, 190, 191, 193, 195, 208, 238, 248, 274], "execut": [6, 7, 10, 12, 16, 18, 20, 23, 24, 25, 26, 28, 35, 36, 42, 43, 47, 49, 52, 55, 69, 75, 79, 87, 91, 95, 98, 101, 103, 106, 111, 114, 118, 119, 123, 131, 132, 135, 136, 138, 139, 142, 149, 150, 155, 156, 159, 168, 171, 174, 175, 177, 178, 179, 181, 188, 190, 194, 196, 198, 201, 211, 218, 220, 223, 224, 228, 236, 244, 247, 259, 262, 270, 273, 277, 278, 280, 281, 283], "involv": [6, 10, 16, 19, 22, 26, 28, 39, 42, 55, 90, 95, 96, 103, 106, 109, 115, 122, 131, 138, 140, 146, 158, 165, 178, 180, 190, 198, 199, 200, 212, 217, 254, 263, 268, 275, 278], "launch": [6, 7, 24, 58, 65, 136, 139, 146, 147, 176, 177, 178, 179, 184, 196, 223, 236, 238, 248, 253, 263, 281], "amount": [6, 22, 28, 80, 87, 122, 137, 147, 168, 172, 188, 191, 200, 253, 263], "becom": [6, 7, 12, 24, 27, 57, 80, 90, 96, 105, 137, 144, 157, 159, 168, 184, 185, 191, 198, 201, 212, 226, 233, 236, 247, 281], "furthermor": [6, 22, 105, 151, 157, 185, 201, 231, 248], "itself": [6, 12, 26, 35, 36, 47, 87, 90, 100, 103, 105, 109, 110, 113, 118, 122, 137, 138, 140, 144, 149, 158, 174, 177, 178, 180, 191, 233, 247, 253, 277], "slow": [6, 7, 10, 40, 133, 135, 168, 191, 194, 253, 263], "down": [6, 10, 11, 12, 22, 36, 37, 55, 87, 93, 95, 100, 102, 107, 113, 133, 150, 156, 157, 158, 177, 182, 185, 190, 198, 207, 262, 263], "therefor": [6, 7, 16, 22, 54, 56, 105, 122, 131, 140, 147, 159, 162, 168, 171, 172, 177, 178, 190, 202, 209, 210, 223, 247, 281], "rewrit": [6, 24, 49, 142, 166, 190, 222, 223], "group": [6, 12, 21, 22, 27, 54, 65, 88, 100, 103, 120, 131, 132, 133, 134, 135, 136, 141, 143, 145, 147, 149, 156, 170, 184, 191, 193, 194, 198, 229, 230, 232, 233, 235, 248, 278, 281, 282], "profit": 6, "fewer": [6, 12, 143, 157], "visibl": [6, 25, 26, 48, 93, 102, 187], "translat": [6, 26, 28, 54, 115, 117, 118, 132, 140, 141, 162, 163, 181, 209, 263, 278, 283], "benefit": [6, 7, 19, 21, 47, 90, 93, 134, 136, 153, 159, 165, 168, 179, 194, 200, 217, 233, 236, 237, 247, 263, 274, 281], "massiv": [6, 28, 48, 109, 112, 191, 237], "parallel": [6, 7, 12, 18, 21, 48, 50, 52, 54, 56, 60, 80, 93, 98, 122, 132, 139, 145, 149, 162, 174, 177, 178, 191, 198, 211, 215, 229, 230, 231, 233, 235, 247, 253, 281, 282, 283], "lltm_cpp": 6, "conveni": [6, 10, 15, 25, 26, 48, 51, 54, 96, 109, 113, 138, 141, 151, 157, 171, 174, 198, 208, 210, 230, 237, 247, 248, 262], "wrapper": [6, 7, 10, 60, 113, 122, 133, 134, 144, 150, 158, 174, 187, 191, 199, 215, 229, 230, 275], "include_dir": [6, 11, 171], "include_path": 6, "manag": [6, 25, 36, 47, 54, 65, 95, 113, 120, 131, 135, 137, 142, 145, 146, 147, 166, 179, 184, 188, 191, 199, 229, 230, 231, 232, 233, 247, 248, 249, 252, 253, 254, 263, 276, 281], "And": [6, 7, 11, 17, 25, 26, 27, 28, 57, 96, 109, 115, 140, 144, 156, 157, 159, 162, 173, 184, 185, 188, 190, 248, 262], "overal": [6, 22, 54, 100, 133, 134, 149, 168, 175, 187, 190, 191, 236, 248, 263], "d_sigmoid": 6, "bit": [6, 16, 26, 28, 56, 73, 98, 103, 120, 121, 150, 173, 174, 180, 191, 200, 207, 224, 238, 248], "datatyp": [6, 26, 44, 53, 78, 98, 103, 120, 237, 247], "Its": [6, 105, 107, 212], "inspect": [6, 26, 95, 105, 118, 134, 135, 139, 155, 179, 182, 188, 190, 191, 233, 248, 277], "dispos": 6, "nvcc": 6, "hit": [6, 22, 80, 137, 184], "workaround": [6, 26, 90, 144, 153, 278], "logic": [6, 7, 12, 19, 26, 40, 45, 90, 106, 114, 132, 133, 139, 146, 170, 172, 177, 178, 187, 217, 219, 230, 233, 281], "sigmoidalphablendforwardcuda": 6, "open": [6, 39, 41, 55, 93, 96, 98, 99, 102, 104, 112, 115, 117, 132, 134, 141, 149, 151, 155, 165, 167, 180, 182, 184, 187, 194, 202, 223, 237, 238, 244], "port": [6, 18, 136, 149, 177, 191, 198, 244, 272], "lltm_forward": 6, "addmm": [6, 7, 120, 156, 223, 224, 236, 253], "transpos": [6, 7, 13, 44, 53, 54, 56, 57, 104, 156, 182, 185, 212, 223, 278], "alpha": [6, 7, 16, 141, 158, 187, 207, 235], "respect": [6, 8, 17, 18, 35, 37, 39, 40, 41, 47, 54, 56, 57, 67, 68, 95, 96, 107, 109, 121, 125, 137, 138, 150, 153, 156, 157, 167, 168, 174, 178, 180, 184, 191, 196, 228, 260, 265, 275, 281], "ultim": [6, 22, 54, 57, 90, 207, 224], "plop": [6, 26], "autograd": [6, 8, 13, 16, 17, 18, 24, 28, 36, 37, 39, 40, 41, 42, 44, 45, 50, 51, 52, 62, 66, 69, 73, 96, 97, 98, 99, 100, 102, 103, 104, 108, 109, 113, 132, 140, 141, 144, 147, 156, 157, 162, 167, 175, 176, 177, 180, 181, 190, 222, 228, 233, 244, 247, 263, 275, 280, 283], "nice": [6, 54, 113, 165, 167, 190, 191, 194], "dig": [6, 96, 107, 179, 190], "deeper": [6, 12, 13, 41, 96, 103, 105, 107, 155, 156, 179, 190, 227, 235, 280], "interest": [6, 7, 11, 15, 19, 23, 26, 28, 48, 54, 56, 93, 95, 96, 105, 107, 114, 115, 117, 118, 128, 134, 139, 157, 165, 166, 174, 182, 190, 191, 193, 194, 217, 222, 248, 262, 265, 266], "alex": 6, "grave": 6, "thesi": 6, "d_tanh": 6, "relu": [6, 7, 13, 22, 26, 40, 51, 57, 80, 100, 104, 107, 113, 115, 122, 133, 147, 156, 173, 176, 177, 178, 182, 185, 211, 214, 229, 230, 231, 232, 236, 237, 238, 247, 263], "exp": [6, 106, 107, 144, 209], "d_elu": 6, "mask": [6, 19, 96, 100, 120, 132, 150, 166, 172, 179, 187, 193, 200, 207, 208, 210, 212, 215, 217, 237, 278], "type_a": 6, "lltm_backward": 6, "grad_h": 6, "grad_cel": 6, "d_output_g": 6, "d_tanh_new_cel": 6, "d_new_cel": 6, "d_old_cel": 6, "d_candidate_cel": 6, "d_input_g": 6, "d_gate": 6, "d_weight": 6, "d_bia": 6, "keepdim": [6, 22, 80, 133, 177, 182, 238], "d_x": 6, "d_old_h": 6, "d_input": 6, "span": [6, 19, 106, 147, 184, 217, 244], "four": [6, 15, 21, 25, 90, 98, 100, 103, 121, 134, 149, 170, 185, 194, 214, 278], "torch_extension_nam": [6, 171], "macro": [6, 7, 10, 16, 26], "maintain": [6, 11, 15, 25, 35, 36, 37, 47, 54, 80, 100, 105, 110, 132, 136, 145, 149, 158, 175, 178, 190, 216, 223, 229, 247, 282], "mismatch": [6, 105, 190, 198], "nasti": [6, 260], "hard": [6, 7, 10, 16, 24, 37, 107, 139, 168, 172, 190, 248, 272], "At": [6, 7, 10, 15, 16, 19, 23, 26, 47, 51, 54, 55, 90, 93, 110, 113, 121, 133, 134, 137, 150, 153, 158, 174, 175, 176, 179, 180, 184, 207, 210, 217, 223, 253, 260, 263, 277], "point": [6, 7, 10, 11, 12, 15, 19, 21, 22, 23, 25, 26, 47, 51, 54, 55, 56, 57, 58, 87, 90, 95, 98, 100, 103, 105, 106, 108, 109, 110, 112, 113, 121, 133, 135, 137, 138, 139, 144, 145, 147, 155, 158, 162, 168, 174, 176, 180, 185, 187, 190, 191, 198, 200, 207, 209, 210, 216, 217, 238, 251, 259, 261, 263, 267, 274, 278, 283], "bdist_egg": 6, "egg_info": [6, 26], "egg": [6, 26], "pkg": [6, 26], "dependency_link": [6, 26], "top_level": [6, 26], "manifest": [6, 26, 209], "bdist": 6, "linux": [6, 7, 21, 23, 25, 26, 115, 137, 147, 149, 173, 184, 193, 223, 237, 263, 281], "x86_64": [6, 21, 26], "install_lib": 6, "temp": [6, 22, 26, 142, 272], "gcc": [6, 26, 156, 211], "local": [6, 7, 10, 18, 21, 22, 25, 26, 39, 54, 55, 65, 95, 99, 106, 114, 122, 125, 134, 135, 137, 139, 147, 149, 165, 172, 176, 177, 178, 180, 182, 191, 196, 198, 199, 228, 233, 247, 250, 263, 272, 273, 281, 282], "miniconda": [6, 21, 26], "compiler_compat": [6, 26], "wl": [6, 25, 26], "sysroot": [6, 26], "wsign": [6, 26], "dndebug": [6, 26], "fwrapv": [6, 26], "o3": [6, 26, 248], "wall": [6, 26, 106, 155, 248], "wstrict": [6, 26], "prototyp": [6, 11, 12, 16, 26, 37, 190, 191, 201, 203, 211, 212, 218, 222, 223, 228, 235, 283], "fpic": [6, 26], "python3": [6, 21, 25, 26, 182, 184, 198, 236, 262, 278], "site": [6, 8, 21, 25, 26, 55, 57, 155, 180, 253, 262, 278], "th": [6, 15, 26, 56, 107, 112, 149, 158], "thc": [6, 26], "7m": [6, 26], "dtorch_api_include_extension_h": [6, 26], "dtorch_extension_nam": [6, 26], "d_glibcxx_use_cxx11_abi": [6, 26], "cc1plu": [6, 26], "warn": [6, 22, 26, 56, 156, 187, 207, 208, 209, 210, 233, 248, 253, 262], "valid": [6, 23, 26, 27, 40, 54, 93, 100, 102, 104, 105, 117, 120, 122, 128, 133, 134, 139, 140, 143, 144, 168, 171, 187, 190, 193, 208, 209, 217, 248, 273, 276], "objc": [6, 26], "l": [6, 13, 15, 26, 47, 56, 57, 95, 107, 141, 174, 175, 190, 198, 248, 277], "rpath": [6, 26], "37m": [6, 26], "stub": 6, "loader": [6, 7, 27, 41, 48, 104, 113, 174, 177, 193, 248], "byte": [6, 190, 199, 278], "37": [6, 19, 120, 173, 178, 217, 235, 236, 253], "pyc": 6, "native_lib": 6, "zip_saf": 6, "analyz": [6, 22, 26, 87, 132, 165, 174, 188, 190, 262, 278], "__pycache__": 6, "dist": [6, 12, 21, 133, 134, 136, 147, 149, 170, 171, 177, 182, 196, 198, 229, 230, 232, 282], "py3": 6, "remov": [6, 19, 22, 54, 57, 58, 88, 113, 118, 120, 125, 135, 138, 147, 154, 156, 165, 173, 179, 180, 187, 188, 190, 191, 194, 200, 207, 208, 212, 217, 233, 248, 262], "everyth": [6, 17, 47, 93, 103, 105, 107, 139, 140, 144, 150, 173, 174, 175, 176, 180, 185, 191, 199, 228], "pth": [6, 22, 26, 80, 122, 187, 200, 230, 237, 238, 278], "finish": [6, 7, 18, 26, 49, 98, 147, 176, 178, 185, 214, 228, 229, 244, 250, 263], "ubuntu": [6, 7, 184, 281], "16": [6, 19, 22, 26, 40, 93, 98, 100, 104, 105, 115, 122, 147, 150, 159, 173, 178, 182, 185, 187, 190, 193, 200, 211, 217, 229, 230, 235, 236, 248, 253, 277, 278], "04": [6, 184, 202, 236, 248], "recent": [6, 54, 110, 120, 136, 137, 149, 156, 162, 166, 175, 184, 278, 281], "maco": [6, 7, 115, 149, 187, 263], "clang": [6, 202, 223], "worst": 6, "resolv": [6, 26, 105, 154, 159, 190, 209, 231, 278], "symbol": [6, 28, 154, 248, 262, 278], "linker": [6, 26], "pycapsul": [6, 26], "builtin": [6, 171, 248, 262], "arg0": 6, "arg1": [6, 177], "arg2": [6, 177], "arg3": 6, "arg4": 6, "citizen": [6, 26, 207, 209], "lltmfunction": 6, "staticmethod": [6, 144, 176, 187], "benchmark": [6, 16, 19, 27, 37, 120, 132, 139, 156, 157, 168, 173, 179, 188, 194, 200, 211, 212, 214, 217, 235, 237, 238, 253, 259, 262, 263, 267, 273, 278, 281, 283], "measur": [6, 13, 24, 40, 87, 95, 96, 98, 100, 105, 112, 133, 136, 155, 157, 168, 174, 175, 179, 182, 188, 200, 211, 220, 228, 236, 247, 248, 253, 262, 267, 268, 277], "durat": [6, 88, 171, 175, 184, 198], "32": [6, 21, 22, 24, 56, 60, 80, 93, 98, 100, 103, 105, 110, 115, 120, 133, 141, 159, 162, 167, 170, 173, 177, 178, 181, 182, 184, 187, 190, 196, 211, 235, 236, 238, 248], "128": [6, 7, 25, 56, 57, 60, 80, 93, 105, 133, 137, 140, 141, 149, 151, 173, 176, 177, 178, 191, 194, 224, 228, 237, 248, 262, 271], "rang": [6, 7, 12, 13, 15, 21, 22, 24, 40, 45, 48, 56, 57, 58, 80, 87, 93, 96, 104, 105, 113, 114, 115, 117, 118, 133, 134, 135, 136, 139, 141, 149, 170, 173, 176, 178, 180, 182, 184, 185, 190, 193, 195, 196, 198, 200, 201, 217, 226, 228, 229, 232, 235, 236, 238, 244, 246, 247, 253, 261, 263, 275, 278, 281, 282], "100000": [6, 141, 248], "3f": [6, 22, 217], "wrote": [6, 26, 188, 193], "post": [6, 7, 12, 23, 54, 105, 133, 134, 135, 139, 159, 182, 191, 196, 238, 246], "my": [6, 24, 55, 106, 112, 194, 220], "machin": [6, 7, 21, 23, 24, 28, 39, 41, 45, 48, 54, 55, 56, 58, 59, 60, 61, 65, 80, 93, 95, 96, 99, 115, 117, 132, 133, 134, 139, 145, 146, 147, 149, 155, 167, 168, 173, 177, 178, 179, 180, 191, 193, 198, 220, 226, 235, 236, 244, 261, 263, 272, 273, 278, 281], "506": 6, "480": [6, 253], "444": 6, "694": 6, "349": [6, 98], "335": [6, 159, 178, 282], "443": [6, 178, 253], "523": 6, "speedup": [6, 19, 24, 48, 121, 132, 151, 156, 167, 194, 200, 211, 212, 217, 236, 263, 268, 277], "30": [6, 7, 22, 49, 87, 107, 132, 134, 136, 141, 159, 172, 176, 178, 217, 235, 248, 253], "albeit": [6, 15], "major": [6, 11, 12, 22, 100, 103, 112, 128, 136, 156, 165, 179, 188, 191, 210, 233, 235, 236, 268, 275, 282], "particularli": [6, 14, 19, 58, 113, 166, 180, 211, 217, 263], "engin": [6, 7, 15, 23, 35, 47, 93, 95, 133, 142, 168, 173, 178, 187, 190, 191, 193, 198, 222, 224, 237, 278], "correspondingli": 6, "big": [6, 57, 100, 106, 112, 121, 135, 141, 151, 165, 174, 180, 187], "win": [6, 165], "No": [6, 7, 58, 118, 135, 156, 195, 227, 275], "cuda_devic": 6, "creation": [6, 7, 11, 103, 210, 219, 252], "is_avail": [6, 7, 13, 80, 93, 103, 159, 170, 171, 175, 177, 182, 196, 216, 278], "synchron": [6, 12, 18, 60, 61, 87, 133, 135, 147, 149, 174, 176, 177, 184, 188, 198, 199, 228, 229, 244, 247, 248, 276, 282], "1e6": [6, 22, 226, 235, 282], "1e5": 6, "again": [6, 7, 24, 28, 48, 55, 95, 96, 100, 102, 103, 105, 106, 113, 114, 138, 143, 149, 150, 165, 176, 178, 180, 184, 187, 188, 191, 199, 200, 216, 248], "187": [6, 248], "719": 6, "410": [6, 159], "815": 6, "149": 6, "802": [6, 156], "393": 6, "458": [6, 156], "That": [6, 7, 19, 26, 47, 48, 49, 54, 95, 96, 98, 103, 107, 109, 110, 112, 113, 115, 137, 140, 147, 153, 155, 157, 159, 162, 165, 174, 175, 179, 184, 190, 191, 193, 207, 208, 210, 217, 262, 267], "great": [6, 54, 115, 121, 122, 209, 248, 265], "pull": [6, 24, 96, 103, 104, 155, 216], "dive": [6, 7, 12, 26, 41, 142, 147, 156, 211, 262], "elabor": [6, 7, 137, 156, 176], "fly": [6, 15, 26, 56, 106, 174, 194], "background": [6, 7, 26, 36, 80, 102, 173, 185, 187, 193, 273, 274], "tmp": [6, 26, 156, 187, 198, 201, 235, 272, 273], "torch_extens": 6, "emit": [6, 7, 106, 190], "ninja": 6, "verbos": [6, 26, 146, 187, 190, 224, 231], "complic": [6, 15, 106, 107, 112, 113, 121, 139, 190, 222, 232, 247, 248], "techniqu": [6, 18, 19, 22, 24, 54, 65, 105, 106, 112, 114, 132, 137, 143, 144, 145, 155, 163, 166, 168, 170, 172, 178, 187, 191, 194, 200, 207, 212, 217, 220, 263, 278, 281], "fine": [6, 7, 19, 22, 54, 56, 95, 106, 131, 138, 149, 156, 173, 184, 188, 191, 207, 217, 247, 248, 262, 263, 281], "system": [6, 7, 10, 11, 13, 15, 16, 25, 26, 28, 60, 105, 132, 135, 139, 149, 166, 168, 173, 174, 176, 188, 190, 191, 198, 223, 224, 229, 250, 263, 272, 281], "increment": [6, 12, 90, 109, 113, 149, 175], "thu": [6, 7, 10, 11, 22, 23, 24, 26, 35, 42, 54, 90, 93, 105, 113, 134, 151, 165, 168, 180, 211, 219, 233, 244, 248, 253, 263, 281], "didn": [6, 10, 25, 96, 115, 155, 176, 222], "prospect": 6, "pointwis": [6, 10, 154, 159, 235, 263, 267], "declar": [6, 7, 14, 26, 80], "best": [6, 7, 10, 26, 40, 42, 47, 57, 65, 80, 93, 104, 115, 118, 120, 122, 128, 132, 145, 149, 151, 156, 167, 168, 173, 176, 178, 182, 190, 194, 200, 211, 217, 236, 237, 238, 253, 262, 263, 266, 267, 273, 275, 281], "lltm_cuda": 6, "lltm_cuda_forward": 6, "lltm_cuda_backward": 6, "check_cuda": 6, "is_cuda": [6, 159], "check_contigu": 6, "check_input": 6, "lltm_cuda_kernel": 6, "peek": [6, 227], "cuda_runtim": 6, "templat": [6, 10, 25, 26, 123, 149, 156, 211, 238, 283], "typenam": 6, "scalar_t": [6, 156], "__device__": 6, "__forceinline__": 6, "fmax": 6, "fmin": 6, "d_relu": 6, "explicitli": [6, 7, 21, 28, 40, 44, 47, 53, 57, 58, 93, 95, 109, 135, 136, 137, 146, 150, 159, 178, 179, 182, 190, 210, 212, 216, 244, 263], "zeros_lik": [6, 103, 176, 233], "dim3": 6, "at_dispatch_floating_typ": 6, "lltm_forward_cuda": 6, "lltm_cuda_forward_kernel": 6, "indic": [6, 7, 11, 12, 15, 26, 36, 54, 67, 68, 87, 95, 96, 98, 100, 102, 106, 107, 112, 118, 120, 121, 139, 140, 150, 156, 172, 174, 175, 177, 184, 185, 187, 191, 198, 207, 209, 210, 224, 246, 248, 278, 280], "runtim": [6, 10, 15, 20, 21, 24, 26, 28, 44, 55, 87, 90, 95, 98, 99, 103, 117, 118, 120, 132, 136, 137, 142, 143, 155, 165, 168, 170, 184, 188, 190, 191, 200, 202, 211, 223, 224, 226, 235, 236, 247, 248, 253, 266, 267, 274, 283], "back": [6, 7, 10, 11, 15, 16, 22, 23, 25, 26, 35, 48, 51, 56, 80, 93, 95, 103, 105, 109, 113, 115, 120, 135, 138, 159, 165, 168, 174, 176, 177, 178, 180, 187, 188, 190, 191, 194, 207, 212, 230, 260, 263, 275, 276], "determin": [6, 7, 10, 12, 19, 22, 44, 53, 96, 98, 103, 104, 105, 106, 109, 112, 115, 136, 137, 139, 151, 165, 166, 167, 172, 188, 190, 191, 198, 212, 216, 217, 248, 253, 254, 263], "conceptu": [6, 7, 35, 47, 54, 121, 262], "switch": [6, 10, 16, 22, 102, 103, 122, 165, 191, 223, 236, 247, 249, 253, 266], "scalartyp": 6, "messag": [6, 17, 54, 95, 118, 142, 149, 187, 190, 224, 281], "alia": [6, 11, 103], "instanti": [6, 7, 11, 15, 24, 25, 28, 37, 42, 56, 57, 70, 72, 90, 98, 105, 113, 115, 121, 139, 171, 172, 175, 187, 219, 235, 252], "retriev": [6, 7, 15, 18, 24, 35, 37, 54, 138, 139, 170, 174, 176, 177, 191, 244, 281], "at_dispatch_all_typ": 6, "sens": [6, 10, 13, 15, 105, 112, 113, 151, 168, 185], "routin": [6, 7, 26, 191], "convolut": [6, 7, 10, 13, 14, 23, 57, 96, 98, 103, 105, 113, 122, 128, 132, 159, 162, 172, 181, 182, 190, 223, 224, 236, 237, 244, 247, 250, 253, 254, 265, 266, 277, 283], "harder": [6, 105, 200], "ourselv": [6, 7, 40, 54, 143, 174], "grid": [6, 56, 102, 104, 113, 128, 182, 185, 201], "fill": [6, 7, 15, 98, 112, 113, 140, 150, 208, 209], "matric": [6, 13, 19, 26, 28, 44, 53, 95, 109, 157, 166, 217, 224], "2048": [6, 21, 105], "heard": 6, "introductori": 6, "ever": [6, 7, 26, 138, 147, 190, 252], "__restrict__": [6, 211], "size_t": 6, "column": [6, 21, 26, 95, 103, 107, 109, 120, 137, 140, 156, 157, 162, 184, 187, 191, 208, 209, 210, 253], "index": [6, 7, 16, 37, 44, 45, 48, 53, 54, 56, 80, 88, 103, 104, 106, 107, 109, 110, 112, 113, 120, 133, 138, 139, 140, 141, 149, 166, 170, 176, 180, 182, 184, 187, 188, 190, 191, 200, 212, 222, 235, 281], "gates_row": 6, "primarili": [6, 87, 177, 188, 231, 247, 263], "imagin": [6, 95, 103, 106, 112, 144, 149, 165, 166, 180, 191, 248, 260], "giant": [6, 180], "million": [6, 128, 134, 150], "serial": [6, 7, 11, 26, 28, 41, 42, 113, 122, 132, 190, 199, 244, 248, 277], "faster": [6, 7, 10, 13, 22, 54, 61, 80, 100, 103, 105, 113, 122, 132, 134, 136, 146, 147, 150, 151, 157, 159, 167, 168, 176, 180, 188, 193, 198, 211, 220, 247, 248, 262, 263, 264, 267, 281], "right": [6, 7, 10, 11, 13, 15, 23, 26, 35, 39, 44, 47, 53, 54, 57, 68, 87, 95, 100, 102, 105, 107, 109, 112, 121, 140, 149, 158, 162, 165, 174, 175, 176, 179, 180, 184, 187, 193, 194, 222, 236, 244], "inde": [6, 15, 17, 105, 143, 157, 168, 174, 179, 188, 191, 209, 210, 248], "ineffici": [6, 87, 212], "readabl": [6, 28, 37, 56, 96, 103, 106, 141, 184, 198, 248, 262], "especi": [6, 8, 19, 22, 54, 57, 80, 96, 103, 134, 136, 147, 155, 162, 165, 168, 190, 194, 200, 208, 217, 238], "dimension": [6, 36, 44, 51, 53, 54, 57, 65, 77, 78, 95, 100, 102, 103, 105, 108, 109, 110, 112, 121, 137, 142, 159, 172, 179, 180, 185, 187, 191, 210, 224, 232], "row": [6, 21, 26, 56, 80, 95, 100, 103, 107, 109, 110, 112, 113, 135, 137, 139, 140, 157, 176, 191, 208, 210, 222, 244], "arithmet": [6, 22, 44, 98, 103, 168], "fortun": [6, 7, 11, 16, 26, 93, 149, 150, 248], "foo": [6, 24, 25, 177, 202, 216, 219, 262], "12": [6, 26, 40, 43, 98, 104, 120, 123, 133, 134, 141, 156, 176, 182, 185, 195, 200, 217, 235, 236, 238, 248, 270, 283], "foo_a": 6, "trace": [6, 10, 11, 17, 23, 24, 35, 47, 95, 102, 120, 132, 142, 154, 156, 162, 168, 179, 184, 190, 198, 211, 215, 220, 231, 237, 267, 274, 275, 279], "packed_accessor64": 6, "packed_accessor32": 6, "pack": [6, 54, 156, 174, 176, 178, 211, 228], "integ": [6, 7, 10, 45, 98, 103, 107, 109, 112, 139, 172, 190, 193, 200, 210, 224, 253], "fundament": [6, 54, 97, 100, 109, 112, 121, 132, 158, 168, 190, 191, 208, 230, 262], "packedtensoraccessor32": 6, "restrictptrtrait": 6, "decompos": [6, 11, 19, 133, 190, 217], "packedaccessor32": 6, "variant": [6, 54, 98, 100, 102, 104, 137, 143, 173, 179, 191, 194, 196, 235], "int32_t": 6, "packedaccessor64": 6, "slower": [6, 19, 61, 147, 168, 173, 175, 188, 193, 200, 201, 212, 217], "host": [6, 21, 39, 59, 87, 99, 106, 133, 134, 137, 147, 149, 168, 170, 177, 178, 184, 232, 233, 253, 263, 272], "reshap": [6, 7, 13, 22, 56, 100, 103, 112, 113, 170, 212, 223, 238], "pattern": [6, 19, 24, 100, 102, 137, 149, 154, 156, 166, 177, 207, 209, 214, 217, 219, 232, 237], "lltm_cuda_backward_kernel": 6, "lltm_backward_cuda": 6, "d_gate_weight": 6, "hassl": [6, 7], "entail": [6, 190], "simpler": [6, 113, 135, 137, 143, 153, 166, 222, 248], "hope": [6, 28, 54, 158, 165, 188, 194, 236], "fastest": [6, 179, 273], "129": [6, 120], "431": 6, "304": [6, 54], "641": [6, 159], "faq": [6, 25, 26], "blog": [6, 133, 134, 140, 145, 194, 236, 246], "framework": [7, 11, 27, 28, 39, 57, 95, 107, 108, 121, 131, 132, 168, 170, 176, 179, 187, 194, 198, 214, 224, 228, 233, 238, 278], "sit": [7, 114, 115, 117, 118, 166], "atop": 7, "substanti": [7, 139, 168], "codebas": [7, 11, 15], "foundat": [7, 140, 174, 187, 191], "underli": [7, 10, 15, 26, 44, 53, 65, 80, 103, 105, 122, 139, 151, 156, 167, 177, 190, 198, 209, 210, 212, 232, 233, 263], "popular": [7, 73, 80, 105, 121, 139, 149, 150, 191, 194, 200, 211, 237, 238, 267, 278], "stochast": [7, 40, 51, 57, 70, 95, 98, 104, 113, 121, 149, 174, 175], "descent": [7, 40, 47, 51, 70, 95, 98, 104, 113, 121, 149, 191, 200, 266], "digit": [7, 51, 98, 113, 132, 133, 134, 187, 278], "whirlwind": 7, "wet": 7, "appetit": 7, "watch": [7, 104, 145, 149], "lightn": [7, 139], "talk": [7, 10, 54, 57, 60, 98, 109, 168, 174, 177, 190, 191], "cppcon": 7, "2018": 7, "quick": [7, 19, 36, 53, 95, 105, 107, 110, 112, 132, 134, 147, 151, 157, 167, 191, 200, 217, 248, 251, 259, 267, 280, 283], "humor": 7, "sweep": [7, 179], "philosophi": 7, "ecosystem": [7, 118, 142], "descript": [7, 55, 133, 134, 156, 174, 176, 177, 178, 179, 187, 190, 214, 248, 263, 278, 279], "embark": 7, "excit": [7, 25, 26, 155, 165], "team": [7, 118, 139, 175, 187, 194], "job": [7, 49, 57, 58, 59, 65, 87, 105, 136, 139, 145, 146, 147, 149, 170, 215], "reinforc": [7, 15, 104, 132, 158, 176, 177, 181, 283], "game": [7, 48, 57, 158, 278], "tractabl": [7, 106], "multithread": [7, 47, 61, 120, 168, 233, 244, 248, 281], "lock": [7, 15, 28, 61, 149, 168, 176, 177, 229, 233], "gil": [7, 61, 147, 233], "multiprocess": [7, 12, 15, 37, 41, 56, 58, 60, 61, 133, 134, 147, 149, 174, 177, 178, 198, 228, 229, 230, 233, 281, 282], "scalabl": [7, 132, 136, 139, 191, 207, 224, 236, 237, 263, 281], "shortcom": [7, 209], "neuroevolut": 7, "owner": [7, 176, 177, 178], "anyth": [7, 14, 17, 48, 77, 78, 98, 100, 103, 106, 109, 110, 112, 113, 121, 173, 194, 200, 244, 260, 261, 278], "serv": [7, 40, 62, 65, 90, 98, 105, 110, 121, 132, 147, 155, 158, 171, 177, 178, 191, 199, 209, 228, 231, 235, 247, 248, 262, 272], "web": [7, 115, 244], "server": [7, 18, 28, 131, 132, 136, 147, 171, 178, 195, 230, 233, 237, 244, 272, 278, 281], "3d": [7, 65, 100, 102, 109, 110, 170, 187, 263], "graphic": [7, 179, 223], "photo": [7, 96], "softwar": [7, 171, 184, 198, 223], "remain": [7, 93, 95, 105, 135, 136, 149, 154, 165, 168, 172, 180, 195, 196, 198, 200, 209, 212, 263], "forth": [7, 113], "retain": [7, 44, 53, 103, 122], "intuit": [7, 57, 80, 98, 103, 107, 122, 156, 180, 187, 190, 208, 244, 260], "tradit": [7, 57, 105, 107, 157, 177, 190, 191, 194, 198, 211], "experi": [7, 11, 105, 106, 134, 136, 149, 158, 168, 171, 174, 175, 179, 180, 182, 187, 188, 190, 191, 194, 200, 207, 215, 216, 222, 228, 231, 247, 262, 264, 272, 278, 279, 281], "compet": [7, 139, 168], "meant": [7, 8, 12, 90, 95, 100, 134, 191, 198, 209, 263, 280], "complement": 7, "alik": 7, "love": 7, "simplic": [7, 80, 134, 143, 168, 174, 175, 211, 232, 248], "core": [7, 10, 11, 12, 49, 106, 107, 108, 121, 122, 132, 137, 149, 150, 156, 159, 168, 173, 184, 190, 198, 215, 244, 247, 262, 281], "principl": [7, 10, 110, 112, 139], "curiou": [7, 151, 165, 167, 227], "tri": [7, 21, 57, 95, 106, 112, 175, 190, 223, 247, 278], "experienc": [7, 90], "ask": [7, 19, 25, 26, 96, 98, 100, 141, 150, 168, 174, 190, 191, 216, 217, 248], "rememb": [7, 48, 57, 80, 110, 113, 120, 122, 157, 158, 165, 168, 180, 191, 194, 248], "dot": [7, 15, 35, 57, 110, 112, 132, 157, 180, 181, 196, 222, 248, 275, 283], "colon": [7, 187], "free": [7, 11, 22, 25, 26, 28, 40, 47, 54, 80, 90, 105, 114, 115, 117, 118, 122, 134, 135, 139, 149, 154, 155, 158, 159, 165, 168, 174, 176, 180, 184, 190, 233, 262], "too": [7, 11, 15, 22, 48, 68, 73, 87, 93, 98, 100, 105, 106, 112, 113, 120, 121, 135, 137, 147, 165, 168, 172, 175, 176, 178, 180, 190, 207, 262, 276], "cu90": 7, "url": [7, 22, 184, 188, 191, 200, 261], "wget": [7, 21, 193, 200], "nightli": [7, 21, 153, 188, 193, 198, 200, 215, 222, 238, 278], "dep": 7, "tini": [7, 133, 165, 278], "ey": [7, 23, 26, 168], "fledg": 7, "visual": [7, 15, 28, 47, 57, 80, 87, 88, 98, 104, 132, 134, 138, 139, 144, 155, 174, 184, 187, 201, 202, 209, 231, 253, 261, 267], "studio": [7, 202], "qmake": 7, "makefil": 7, "feel": [7, 11, 22, 40, 47, 54, 105, 114, 115, 117, 118, 122, 134, 154, 155, 156, 158, 159, 165, 184, 190], "comfort": 7, "box": [7, 10, 11, 12, 17, 19, 45, 80, 132, 135, 139, 142, 144, 149, 173, 176, 184, 190, 193, 194, 217, 222, 224, 237, 244, 246, 278], "cmake_prefix_path": [7, 25, 26], "invok": [7, 10, 25, 26, 28, 105, 147, 149, 153, 155, 156, 168, 171, 177, 178, 201, 209, 220, 224, 244, 260, 271, 275, 281], "agre": [7, 26, 282], "break": [7, 10, 11, 12, 17, 22, 36, 37, 56, 87, 95, 100, 114, 122, 135, 136, 141, 142, 165, 176, 178, 188, 196, 207, 277], "unexpect": [7, 56, 209, 263], "pwd": [7, 244], "fa350df05ecf": 7, "home": [7, 44, 53, 207, 223, 234], "enter": [7, 54, 134, 147, 149], "ran": [7, 112, 136, 174, 177, 179, 248], "me": [7, 19, 54, 165, 180, 217], "besid": [7, 26, 98, 112, 166, 176, 238, 246, 263], "encapsul": [7, 40, 51, 100, 104, 142, 165, 176], "buffer": [7, 15, 48, 51, 122, 134, 135, 143, 147, 151, 153, 158, 162, 165, 166, 167, 168, 172, 175, 190, 196, 198, 199, 219, 223, 229, 252, 265, 266], "nest": [7, 15, 36, 47, 98, 103, 132, 135, 154, 174, 176, 178, 179, 215, 218, 283], "similarli": [7, 13, 25, 56, 88, 96, 103, 135, 138, 139, 140, 156, 157, 165, 168, 170, 195, 199, 210, 230], "w": [7, 35, 40, 47, 51, 56, 80, 110, 112, 134, 159, 178, 184, 190, 193, 200, 211], "register_paramet": [7, 219], "reflect": [7, 10, 26, 44, 53, 98, 103, 174, 190], "magic": [7, 107, 141, 149, 157], "assign": [7, 25, 45, 49, 51, 58, 96, 100, 103, 105, 106, 107, 110, 112, 114, 135, 149, 166, 174, 191, 232, 244, 260, 263, 281], "behind": [7, 10, 19, 26, 49, 87, 105, 107, 113, 121, 143, 175, 195, 208, 210, 215, 217, 219], "scene": [7, 26, 113, 121, 219, 278], "another_bia": 7, "recurs": [7, 18, 48, 135, 142, 188, 219, 261], "0808": 7, "8613": 7, "2017": [7, 80], "5206": 7, "5353": 7, "3740": 7, "0976": 7, "4786": 7, "4928": 7, "1434": 7, "4713": 7, "1735": 7, "3293": 7, "3467": 7, "3858": 7, "1980": 7, "1986": 7, "1975": 7, "4278": 7, "1831": 7, "2709": 7, "3730": 7, "4307": 7, "3236": 7, "0629": 7, "2038": 7, "4638": 7, "2023": [7, 187], "1230": 7, "0516": 7, "aptli": [7, 14], "register_modul": 7, "dropout": [7, 22, 23, 40, 42, 54, 80, 100, 104, 113, 122, 133, 137, 139, 141, 150, 176, 178, 180, 182, 212, 217, 238, 280], "conv2d": [7, 13, 22, 48, 51, 57, 80, 98, 104, 113, 115, 122, 133, 143, 159, 173, 177, 182, 185, 190, 195, 214, 224, 237, 238, 244, 253, 263], "subtleti": [7, 210], "bodi": [7, 156], "upon": [7, 20, 54, 61, 128, 149, 153, 180, 185, 188, 194, 198, 246, 263, 283], "tree": [7, 11, 16, 25, 54, 106, 112, 143, 215, 231], "p": [7, 21, 22, 54, 73, 80, 100, 106, 112, 113, 121, 133, 134, 141, 143, 149, 154, 159, 162, 165, 176, 177, 178, 193, 217, 223, 224, 228, 233, 235], "0345": 7, "4456": 7, "6313": 7, "3585": 7, "4008": [7, 26], "1647": 7, "2891": 7, "0527": 7, "0354": 7, "3084": 7, "2025": [7, 277], "0343": 7, "1824": 7, "4630": 7, "2862": 7, "2500": 7, "0420": 7, "3679": 7, "1482": 7, "0460": 7, "1967": 7, "2132": 7, "1992": 7, "4257": 7, "0739": 7, "01": [7, 12, 22, 40, 43, 47, 51, 104, 119, 120, 123, 149, 178, 181, 182, 194, 202, 226, 235, 236, 238, 277, 282, 283], "6861": 7, "1166": 7, "45": [7, 139, 141, 156, 178, 235, 236], "0333": 7, "9983": 7, "0705": 7, "named_paramet": [7, 36, 191], "ordereddict": [7, 193], "13": [7, 26, 98, 120, 141, 178, 182, 187, 194, 235, 236, 244], "48": [7, 19, 156, 159, 185, 217, 235, 236, 253], "1863": 7, "8611": 7, "1228": 7, "3269": 7, "9858": [7, 182], "0339": 7, "2484": 7, "2035": 7, "2103": 7, "0715": 7, "2975": 7, "4350": 7, "1878": 7, "3616": 7, "1050": 7, "4982": 7, "0335": 7, "1605": 7, "4963": 7, "4099": 7, "2883": 7, "1818": 7, "3447": 7, "1501": 7, "0215": 7, "0250": 7, "0408": 7, "3756": 7, "2149": [7, 235], "3636": 7, "8559": 7, "1572": 7, "1069": 7, "1247": 7, "8060": 7, "topic": [7, 54, 65, 80, 96, 103, 114, 115, 117, 118, 125, 131, 192, 221, 233, 255, 256, 257, 258, 269], "devour": 7, "menu": [7, 55], "pipelin": [7, 18, 65, 113, 132, 174, 187, 193, 198], "briefli": [7, 40, 65, 132, 137, 174, 188, 194, 224], "who": [7, 54, 80, 105, 108, 136, 149, 165, 190, 230, 244, 248, 273, 277], "heap": 7, "referenc": [7, 178], "lower": [7, 15, 19, 55, 80, 87, 100, 102, 132, 134, 135, 136, 139, 147, 153, 156, 165, 166, 174, 175, 179, 185, 187, 190, 191, 194, 195, 210, 217, 262, 263, 278], "heavili": [7, 168, 180, 200], "ergonom": 7, "far": [7, 15, 23, 25, 51, 54, 68, 95, 98, 100, 103, 105, 106, 107, 121, 138, 149, 165, 172, 175, 180, 190, 191, 194, 207, 248], "stack": [7, 10, 15, 16, 24, 25, 44, 53, 98, 120, 132, 137, 151, 158, 162, 168, 171, 176, 180, 184, 185, 187, 191, 194, 198], "shared_ptr": [7, 25], "cognit": 7, "think": [7, 25, 26, 48, 57, 73, 96, 98, 106, 107, 109, 110, 112, 121, 155, 157, 174, 177, 179, 191, 194, 210, 222], "everywher": [7, 103, 112], "make_shar": 7, "stai": [7, 87, 136, 137, 142, 174, 175, 176], "shorten": [7, 26], "wait": [7, 18, 24, 87, 136, 141, 147, 149, 150, 168, 171, 176, 177, 178, 184, 187, 191, 198, 229, 235, 252, 253, 263], "hell": 7, "lot": [7, 10, 11, 16, 22, 24, 56, 95, 106, 113, 133, 135, 149, 162, 177, 180, 184, 188, 191, 200, 207, 247, 248, 262], "came": [7, 57, 208], "scheme": [7, 21, 104, 105, 132, 191, 207, 214, 219, 252, 260], "hide": [7, 143, 174, 222], "reserv": [7, 11, 16, 184, 199], "simplifi": [7, 11, 15, 27, 113, 140, 147, 170, 180, 187, 193, 198, 207, 210, 214, 215, 232], "linearimpl": 7, "torch_modul": 7, "brief": [7, 27, 87, 95, 106, 174, 191, 194], "typedef": 7, "among": [7, 10, 25, 58, 87, 93, 104, 137, 172, 184, 246, 281], "holder": 7, "arrow": [7, 47, 137], "resembl": [7, 13, 26, 106, 145, 175], "extra": [7, 10, 61, 98, 103, 105, 109, 110, 113, 117, 135, 140, 141, 143, 150, 153, 166, 174, 180, 187, 188, 193, 237, 253, 262, 263], "netimpl": 7, "subtl": [7, 103, 247], "deserv": 7, "construct": [7, 15, 23, 24, 25, 28, 35, 51, 57, 70, 72, 90, 105, 121, 128, 132, 135, 141, 144, 150, 151, 157, 163, 167, 174, 175, 177, 180, 191, 193, 194, 212, 215, 219, 222, 236, 238, 247, 250, 265, 282], "tricki": [7, 19, 144, 154, 190, 191, 217], "nullptr": [7, 201], "familiar": [7, 10, 11, 25, 39, 40, 44, 48, 53, 58, 59, 61, 90, 98, 99, 103, 104, 106, 108, 113, 122, 132, 134, 138, 145, 146, 149, 158, 170, 177, 190, 216, 244, 248, 262], "pythonista": 7, "disadvantag": [7, 122], "said": [7, 26, 28, 158, 165, 174, 175, 207, 208], "introduct": [7, 12, 17, 19, 50, 52, 58, 59, 60, 61, 62, 89, 90, 95, 100, 107, 108, 111, 114, 115, 116, 118, 123, 132, 142, 145, 146, 156, 181, 194, 209, 217, 237, 248, 263, 267, 275, 278, 280, 283], "sooner": [7, 134], "technic": [7, 26, 149, 150, 165, 191, 207, 226, 227, 235], "henceforth": 7, "recap": [7, 51, 175, 210, 252], "adversari": [7, 48, 104, 123, 132, 283], "architectur": [7, 19, 28, 36, 57, 61, 80, 90, 100, 105, 106, 132, 134, 137, 139, 145, 151, 162, 168, 170, 172, 179, 185, 187, 188, 194, 211, 214, 217, 237, 244, 247, 263], "repositori": [7, 11, 59, 88, 125, 134, 137, 149, 170, 171, 178, 179, 180, 193, 198, 223], "distinct": [7, 19, 24, 57, 87, 103, 112, 134, 178, 185, 190, 191, 217, 278], "transform": [7, 13, 19, 20, 22, 23, 26, 27, 28, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 54, 57, 80, 93, 95, 96, 98, 103, 104, 120, 123, 131, 132, 133, 135, 149, 150, 151, 153, 154, 156, 158, 162, 165, 166, 173, 177, 180, 181, 184, 185, 187, 193, 196, 200, 212, 214, 217, 233, 236, 237, 238, 248, 250, 260, 262, 263, 268, 271, 275, 278, 283], "probabl": [7, 10, 25, 36, 54, 57, 80, 96, 100, 103, 105, 106, 109, 112, 133, 138, 139, 141, 173, 175, 182, 185, 187, 212, 236], "judg": 7, "closer": [7, 95, 105, 175], "feedback": [7, 22, 134, 154, 155, 158, 159, 199, 215, 235], "authent": 7, "theori": [7, 54, 57, 95, 105, 138, 168], "delic": 7, "tandem": [7, 274], "indistinguish": 7, "fool": [7, 54, 80], "excel": [7, 56, 185, 229], "realist": [7, 24, 194, 212], "2d": [7, 36, 57, 100, 113, 135, 140, 154, 176, 187, 191, 232], "dcgangeneratorimpl": 7, "knoises": 7, "conv1": [7, 51, 80, 100, 104, 115, 122, 133, 167, 172, 177, 182, 185, 238], "convtranspose2dopt": 7, "batch_norm1": 7, "conv2": [7, 80, 100, 104, 115, 122, 133, 177, 182, 185, 238], "pad": [7, 22, 54, 100, 143, 179, 194, 209, 212, 217, 263], "batch_norm2": 7, "conv3": 7, "batch_norm3": 7, "conv4": 7, "convtranspose2d": 7, "batchnorm2d": [7, 22, 57, 113, 143, 155, 195, 263], "dcgangener": 7, "chosen": [7, 23, 25, 96, 100, 136, 175, 188, 247, 248, 278], "student": [7, 105], "harm": [7, 105], "discoveri": [7, 190], "fed": [7, 13, 41, 54, 57, 187, 191], "soylent": 7, "regularli": [7, 58], "channel": [7, 11, 13, 22, 24, 47, 48, 57, 96, 98, 100, 103, 105, 113, 132, 137, 172, 181, 185, 193, 228, 237, 250, 263, 283], "moduleopt": 7, "linearopt": 7, "leaki": [7, 57], "squash": [7, 150, 158], "sequenti": [7, 13, 22, 40, 54, 73, 100, 112, 121, 150, 154, 166, 182, 212, 219, 222, 226, 235, 236, 263, 281, 282], "orient": [7, 182], "layer": [7, 10, 11, 12, 13, 14, 16, 18, 19, 22, 23, 35, 40, 41, 42, 47, 51, 54, 57, 60, 65, 73, 80, 93, 95, 98, 102, 103, 104, 105, 107, 113, 121, 122, 128, 132, 133, 134, 135, 139, 140, 141, 142, 150, 159, 166, 170, 172, 173, 174, 177, 178, 180, 182, 190, 191, 193, 196, 200, 211, 214, 217, 226, 227, 228, 231, 235, 236, 246, 247, 250, 252, 254, 260, 264, 265, 268, 280], "conv2dopt": 7, "leakyrelu": [7, 57], "leakyreluopt": 7, "negative_slop": 7, "fourth": [7, 70, 121, 144], "knob": [7, 281], "sampler": [7, 22, 37, 60, 104, 133, 134, 174, 182], "collat": [7, 56], "wherev": 7, "make_data_load": 7, "unique_ptr": 7, "spawn": [7, 12, 21, 54, 57, 58, 60, 65, 133, 147, 149, 176, 177, 178, 198, 228, 229, 230, 282], "concurr": [7, 120, 137, 139, 168, 196, 229, 263, 281], "kbatchsiz": 7, "dataloaderopt": 7, "consol": [7, 185, 187], "label": [7, 37, 40, 41, 45, 47, 48, 56, 57, 80, 93, 95, 96, 98, 102, 103, 104, 107, 112, 120, 128, 134, 137, 140, 147, 168, 173, 176, 180, 185, 191, 193, 217, 238, 244, 248, 250, 253, 267, 278, 282], "field": [7, 11, 12, 15, 16, 36, 54, 100, 110, 112, 149, 165, 176, 184, 190, 193, 198, 209, 233], "rebuild": [7, 248], "danc": [7, 13], "generator_optim": 7, "adamopt": 7, "2e": [7, 95], "beta": [7, 20, 23, 115, 132, 181, 210, 267, 270, 283], "make_tupl": 7, "discriminator_optim": 7, "5e": 7, "adagrad": [7, 104, 121, 210, 215, 218, 283], "lbfg": [7, 13], "rmsprop": [7, 40, 51, 74, 107, 121], "sgd": [7, 22, 40, 47, 48, 51, 72, 74, 93, 104, 107, 113, 121, 122, 147, 149, 176, 177, 178, 182, 185, 237, 238, 261, 265, 266, 271], "exhaust": [7, 12, 190], "knumberofepoch": 7, "batch_index": 7, "real_imag": 7, "real_label": 7, "real_output": 7, "d_loss_real": 7, "binary_cross_entropi": [7, 247], "fake_imag": 7, "fake_label": 7, "fake_output": 7, "d_loss_fak": 7, "d_loss": 7, "fill_": [7, 184], "g_loss": 7, "printf": 7, "r": [7, 12, 15, 22, 40, 47, 51, 56, 80, 90, 106, 132, 156, 157, 158, 159, 162, 175, 176, 178, 187, 193, 222, 237, 248, 263, 281], "2ld": 7, "3ld": 7, "4f": [7, 133, 134, 141, 182], "batches_per_epoch": 7, "uniformli": [7, 93, 175, 263], "robust": [7, 54, 58, 59, 80, 103, 136, 175, 236], "smooth": [7, 105, 114, 187], "propag": [7, 11, 18, 35, 40, 47, 49, 51, 57, 105, 109, 110, 113, 144, 153, 159, 174, 263], "repeat": [7, 15, 21, 22, 26, 95, 140, 141, 174, 184, 190, 196, 207, 228, 235, 253, 262, 268], "spiel": 7, "progress": [7, 10, 16, 27, 57, 58, 102, 104, 150, 180, 185, 198, 211, 230], "observ": [7, 15, 22, 51, 56, 87, 104, 128, 133, 134, 139, 142, 150, 158, 159, 165, 168, 174, 175, 176, 178, 179, 180, 188, 194, 195, 210, 214, 220, 226, 236, 247, 248, 254, 260, 267, 268, 279, 282], "meaning": [7, 54, 105, 159, 198], "3c0711f20896": 7, "dcga": 7, "6876": 7, "1304": 7, "3776": 7, "3101": 7, "300": [7, 134, 178, 236, 248, 262], "3652": 7, "6626": 7, "400": [7, 122, 248, 262, 278], "8057": 7, "2795": [7, 248], "3531": 7, "4452": 7, "600": [7, 159, 175, 280], "3501": 7, "0811": 7, "700": 7, "3581": 7, "5623": 7, "800": 7, "6423": 7, "7385": 7, "900": 7, "3592": 7, "7333": 7, "4660": 7, "5242": 7, "6364": 7, "0886": 7, "3717": 7, "8103": 7, "0201": 7, "3544": 7, "4522": 7, "6545": 7, "quickli": [7, 39, 48, 87, 105, 106, 107, 112, 113, 121, 137, 165, 175, 180, 198, 233, 238], "onto": [7, 10, 15, 18, 21, 48, 100, 102, 103, 132, 150, 165, 177, 178, 191, 198, 219, 263], "somewher": [7, 26, 100, 106, 107, 122], "kcpu": [7, 201, 223], "whose": [7, 87, 90, 95, 96, 105, 112, 134, 138, 159, 168, 187, 246, 248], "insert": [7, 13, 19, 22, 100, 178, 190, 195, 214, 217], "op": [7, 11, 12, 16, 24, 25, 26, 53, 87, 118, 132, 133, 134, 135, 137, 142, 143, 147, 149, 156, 159, 173, 184, 194, 195, 200, 201, 208, 209, 211, 212, 219, 224, 228, 235, 238, 247, 252, 267], "previou": [7, 12, 15, 16, 18, 19, 25, 26, 40, 54, 58, 60, 103, 104, 105, 113, 118, 128, 134, 135, 136, 140, 141, 144, 145, 146, 150, 158, 165, 168, 170, 172, 174, 175, 176, 178, 179, 180, 184, 185, 187, 188, 190, 191, 217, 224, 248, 254, 263, 278], "resid": [7, 105, 168], "downstream": [7, 187], "portabl": [7, 273], "augment": [7, 27, 56, 113, 128, 132, 182, 190, 193], "period": [7, 54, 57, 136, 139, 158, 184, 198], "middl": 7, "procedur": [7, 26, 51, 131, 175, 182], "restor": [7, 80, 122, 147, 159, 265], "session": [7, 23, 105, 115], "essenti": [7, 11, 15, 17, 35, 54, 106, 107, 109, 132, 142, 149, 163, 168, 175, 190, 214, 219, 238, 281], "interv": [7, 15, 95, 139, 178], "kcheckpointeveri": 7, "str": [7, 21, 22, 25, 88, 134, 170, 174, 177, 187, 190, 220, 233, 281], "checkpoint_count": 7, "counter": [7, 12, 54, 57, 80, 142, 149, 275], "bump": 7, "beta1": [7, 57, 235], "krestorefromcheckpoint": 7, "intermediari": [7, 138], "xxx": [7, 16, 56], "matplotlib": [7, 13, 37, 56, 57, 62, 80, 95, 96, 98, 102, 104, 141, 175, 180, 182, 185, 187], "argpars": [7, 133, 134, 176, 177, 178], "pyplot": [7, 13, 56, 80, 104, 113, 141, 182, 185, 187], "plt": [7, 13, 56, 80, 104, 141, 180, 182, 185, 187], "parser": [7, 106, 133, 134, 176, 177, 178], "argumentpars": [7, 133, 134, 176, 177, 178], "add_argu": [7, 133, 134, 176, 177, 178], "png": [7, 56, 132, 193], "parse_arg": [7, 133, 134, 176, 177, 178], "sample_fil": 7, "mul": [7, 142, 156, 190, 223, 235, 248, 262], "uint8": [7, 193], "numpi": [7, 13, 17, 20, 22, 45, 48, 56, 62, 76, 78, 79, 80, 95, 104, 113, 115, 120, 132, 144, 173, 178, 182, 185, 187, 188, 207, 215, 217, 246, 262, 278, 283], "axi": [7, 24, 56, 87, 109, 110, 140, 168, 172, 187], "subplot": [7, 56, 80, 182], "imshow": [7, 13, 56, 80, 104, 182, 185, 187], "cmap": [7, 80, 104, 185], "grai": [7, 80, 158], "get_xaxi": 7, "set_vis": 7, "get_yaxi": 7, "savefig": 7, "out_fil": 7, "57": [7, 19, 120, 156, 235, 253], "4953": 7, "0195": 7, "3610": 7, "8148": 7, "4072": 7, "36760": 7, "4444": 7, "3761": 7, "8790": 7, "3977": 7, "3315": 7, "120": [7, 104, 115, 122, 128, 178, 185, 253], "8084": 7, "hoorai": [7, 28], "ball": 7, "court": 7, "digest": [7, 262], "necess": [7, 54, 102], "broad": [7, 62, 96, 104], "space": [7, 15, 25, 54, 57, 80, 95, 96, 100, 105, 106, 110, 112, 139, 150, 158, 165, 168, 174, 175, 178, 180, 184, 185, 187, 191, 194, 199], "consult": [7, 165, 246], "stuck": [7, 215], "whenev": [7, 25, 58, 72, 103, 106, 107, 224, 266], "rate": [7, 40, 47, 57, 93, 98, 100, 104, 105, 107, 128, 133, 134, 139, 140, 158, 175, 177, 191, 193, 198, 233, 261, 263], "vmap": [8, 10, 132, 153, 157, 162, 167, 215, 218, 283], "oppos": [8, 25, 54, 57, 128, 149, 157, 162, 177, 248], "treat": [8, 17, 95, 112, 167, 176, 188, 190, 191, 220], "opaqu": [8, 17, 26, 262, 275], "callabl": [8, 17, 24, 45, 56, 113, 184, 188, 190, 246, 275], "aotinductor": [8, 190, 267, 275, 278], "toe": 8, "registr": [8, 10, 11, 16, 17, 25, 26, 237, 238, 244], "pybind": 8, "ed": [8, 277], "respons": [10, 12, 18, 21, 54, 95, 96, 104, 113, 132, 137, 143, 147, 149, 176, 177, 180, 188, 190, 226, 228, 246], "nontrivi": 10, "cut": [10, 170, 190], "concern": [10, 24, 107, 191, 207, 233, 238], "rule": [10, 25, 35, 47, 51, 95, 103, 110, 138, 151, 157, 166, 167, 174, 175, 190, 247], "convers": [10, 54, 95, 103, 159, 180, 207, 233, 235, 260], "highest": [10, 22, 48, 54, 102, 136, 141, 175, 187, 188, 263], "prioriti": [10, 136], "transfer": [10, 20, 25, 48, 56, 105, 113, 122, 123, 132, 149, 168, 173, 177, 184, 193, 199, 223, 249, 264, 283], "redispatch": 10, "unlik": [10, 13, 19, 96, 103, 105, 121, 138, 153, 154, 159, 180, 190, 216, 217, 275, 281], "style": [10, 137, 170, 190, 193, 230], "abid": [10, 57], "myop": 10, "myadd": [10, 11], "myadd_cpu": 10, "self_": 10, "other_": 10, "self_ptr": 10, "other_ptr": 10, "myadd_cuda": 10, "boundari": [10, 135, 174, 272], "myops_cpu": 10, "myops_cuda": 10, "subdivid": 10, "xla": [10, 11, 16, 260], "torch_xla": [10, 11], "useabl": 10, "behav": [10, 17, 23, 103, 113, 159, 166, 176, 244], "autogradnotimplementedfallback": 10, "notimpl": 10, "node": [10, 21, 23, 26, 35, 47, 51, 58, 59, 60, 61, 65, 67, 95, 102, 106, 115, 118, 121, 131, 134, 135, 136, 140, 142, 145, 146, 147, 155, 156, 177, 180, 190, 196, 201, 214, 232, 235, 263, 281], "preserv": [10, 19, 25, 28, 103, 132, 135, 159, 172, 208, 214, 217, 260, 265], "require_grad": 10, "ness": 10, "pin": [10, 104, 138, 168, 263], "lost": [10, 19, 159, 217], "alias": [10, 11, 190], "adinplaceorview": 10, "bookkeep": [10, 248], "autogradnotimplementedinplaceorviewfallback": 10, "logi": 10, "annot": [10, 11, 21, 24, 25, 26, 37, 56, 107, 118, 187, 188, 190, 233, 248], "guess": [10, 40, 47, 54, 57, 140, 180], "twist": 10, "constitut": [10, 15], "hood": [10, 22, 54, 57, 59, 61, 65, 121, 137, 138, 157, 158, 168, 178, 210, 228, 231, 233], "singleton": [10, 177], "findschemaorthrow": 10, "decltyp": [10, 235], "qualifi": [10, 25, 230], "overload": [10, 25], "typic": [10, 12, 15, 22, 24, 37, 47, 51, 53, 59, 60, 87, 98, 106, 107, 112, 135, 137, 139, 143, 145, 156, 165, 168, 174, 177, 187, 188, 190, 191, 235, 236, 237, 238, 247, 249, 263, 268, 278, 281], "cast": [10, 19, 21, 78, 120, 134, 135, 168, 190, 217, 247], "lookup": [10, 18, 112, 142, 178], "typo": 10, "myaddfunct": [10, 11], "autononvariabletypemod": [10, 11], "myadd_autograd": [10, 11], "except": [10, 12, 19, 26, 44, 47, 53, 54, 57, 96, 100, 103, 107, 110, 114, 128, 135, 136, 140, 151, 153, 157, 159, 167, 171, 180, 190, 199, 212, 215, 217, 219, 222, 223, 237, 272, 278], "raii": 10, "guard": [10, 147, 227, 235], "infinit": 10, "overflow": [10, 54, 200, 247], "send": [10, 11, 12, 13, 48, 49, 65, 80, 93, 149, 158, 168, 170, 171, 176, 177, 178, 191, 228, 253], "consider": [10, 11, 23, 133, 190, 191, 278], "handler": [10, 187, 260], "autogradcpu": 10, "autogradcuda": 10, "pythondispatch": 10, "_python_dispatch": 10, "isn": [10, 95, 106, 153, 168, 173, 185, 190, 191, 209, 248, 250, 264, 265], "glorifi": 10, "add_cpu": 10, "add_cuda": 10, "unsupport": [10, 114, 118, 132, 188, 190, 278], "decentr": 10, "importantli": [10, 22, 26, 144, 165, 168, 207, 248], "parti": [10, 17, 25, 26, 135, 136, 171], "aspect": [10, 16, 56, 80, 149, 193, 248], "patch": [10, 11, 175], "dispatchkei": [10, 11], "varieti": [10, 27, 36, 54, 95, 96, 100, 104, 113, 122, 141, 168, 194, 210, 281], "fallback": [10, 11, 16, 114, 194], "opt": [10, 25, 113, 139, 159, 171, 177, 178, 184, 200, 219, 226], "amp": [10, 16, 65, 135, 159, 211, 224, 237, 267, 271], "incom": [10, 98, 184], "float16": [10, 16, 134, 159, 224, 247], "float32": [10, 15, 26, 115, 134, 135, 159, 173, 178, 196, 201, 211, 235, 247, 260], "matmul": [10, 26, 137, 156, 190, 200, 217, 222, 224, 236, 247], "impair": 10, "converg": [10, 40, 54, 57, 68, 104, 105, 121, 122, 137, 149, 166, 175, 180, 227, 247, 264, 267], "hypothet": 10, "autocast_mod": 10, "mymatmul_autocast": 10, "excludedispatchkeyguard": 10, "no_autocast": 10, "mymatmul": 10, "cached_cast": 10, "khalf": 10, "elig": [10, 263], "polici": [10, 16, 132, 133, 135, 158, 175, 176, 178, 181, 281, 283], "mixtur": [10, 235], "meanwhil": [10, 138, 156, 208, 237], "float64": 10, "unaffect": [10, 105], "forc": [10, 15, 19, 26, 54, 100, 115, 132, 180, 188, 194, 207, 209, 217, 247, 263, 272], "fallthrough": 10, "occur": [10, 12, 17, 22, 26, 28, 58, 87, 105, 156, 159, 168, 176, 177, 184, 187, 190, 191, 198, 200, 231, 253, 274], "fall": [10, 16, 96, 166, 175, 276], "unfortun": [10, 26, 28, 121, 149, 190], "aren": [10, 144, 150, 190, 191, 209, 263, 266], "dri": [10, 184], "reduct": [10, 103, 133, 134, 135, 138, 143, 165, 171, 182, 184, 187, 194, 207, 209, 215, 247, 263], "gemm": [10, 156, 211, 236], "unless": [10, 23, 44, 53, 103, 107, 114, 174, 190, 200, 222, 252], "categori": [10, 11, 22, 80, 87, 96, 103, 128, 140, 141, 184, 190], "promote_typ": 10, "widest": 10, "safest": 10, "my_multiple_input_op_autocast": 10, "t0": [10, 134, 226, 235, 248], "t1": [10, 248], "optimist": 10, "exec_typ": 10, "my_multiple_input_op": 10, "myadd_autocast": 10, "gymnast": 10, "invoc": [10, 28, 155, 176, 244, 268, 274], "stabil": [10, 105, 175], "41478": 10, "repo": [11, 16, 21, 22, 59, 87, 132, 145, 149, 168, 176, 177, 191, 199, 200, 238], "mainten": [11, 187], "solut": [11, 19, 57, 114, 122, 132, 156, 167, 168, 187, 188, 191, 209, 212, 217, 231, 248, 263, 267, 273], "pr": [11, 185, 194, 237, 262], "propos": [11, 27, 137, 150, 166, 207, 209, 231], "request": [11, 28, 35, 47, 93, 103, 113, 134, 166, 173, 176, 177, 182, 201, 209, 210, 211, 216, 228, 229, 233], "hardwar": [11, 16, 19, 23, 44, 53, 55, 103, 105, 115, 140, 149, 151, 157, 159, 167, 168, 171, 172, 191, 194, 200, 217, 224, 236, 237, 238, 249, 263, 271, 275, 278], "googl": [11, 19, 24, 27, 28, 39, 54, 57, 102, 132, 149, 150, 174, 175, 184, 191, 281], "tpu": [11, 171, 266], "chip": 11, "layout": [11, 19, 137, 194, 207, 210, 215, 217, 232, 263], "spars": [11, 18, 100, 107, 112, 132, 150, 172, 191, 194, 209, 215, 218, 260, 283], "quantiz": [11, 105, 128, 132, 165, 218, 224, 251, 260, 267, 283], "enforc": [11, 15, 25, 139, 166, 207, 208], "mainli": [11, 15, 16, 21, 156, 184, 188, 214, 238, 277], "haven": [11, 26, 93, 95, 98, 103, 106, 110, 112, 151, 155, 167, 233], "identifi": [11, 19, 37, 58, 60, 80, 87, 88, 96, 113, 120, 146, 158, 159, 163, 172, 177, 190, 193, 198, 210, 217, 231, 278], "carri": [11, 15, 54, 57, 95, 103, 105, 109, 145, 150, 159, 180, 252], "privateuse1": [11, 132, 216], "autogradprivateuse1": [11, 16], "privateuse2": [11, 16], "autogradprivateuse2": [11, 16], "privateuse3": [11, 16], "autogradprivateuse3": [11, 16], "tensorimpl": [11, 16, 248, 262], "storag": [11, 16, 17, 104, 109, 122, 138, 150, 151, 159, 168, 174, 184, 198, 207, 209, 210, 215, 218, 219, 229, 230, 247, 252, 260, 283], "dispatchkeyset": [11, 16], "k": [11, 13, 22, 87, 96, 106, 137, 159, 176, 177, 179, 198, 211, 217], "caffe2": [11, 90], "typemeta": 11, "data_typ": [11, 109], "opaquetensorimpl": 11, "tweak": [11, 54, 266], "overrid": [11, 16, 56, 98, 107, 136, 155, 159, 171, 187, 267, 274], "vulkan": [11, 215], "submit": [11, 237], "src": [11, 12, 118, 149, 171, 223, 262], "registrationdeclar": 11, "snippet": [11, 24, 133, 134, 136, 142, 149, 156, 171, 179, 196, 199, 207, 211, 216, 232, 247, 252, 263, 267], "ab": [11, 188, 224, 253], "abs_": 11, "abs_out": 11, "absolute_": 11, "absolute_out": 11, "angl": [11, 15, 112], "angle_out": 11, "sgn": 11, "uniqu": [11, 19, 54, 58, 60, 106, 107, 108, 110, 112, 134, 146, 177, 180, 191, 193, 207, 217, 278], "boolean": [11, 117, 150, 190], "impli": [11, 105, 110, 190, 229, 252, 262, 275], "schema_my_op1": 11, "my_op1": 11, "schema_my_op2": 11, "my_op2": 11, "schema_my_op2_backward": 11, "my_op2_backward": 11, "zoom": [11, 87, 102, 139, 184, 187], "1600": [11, 248, 262], "grow": [11, 54, 107, 136, 138, 145, 229], "unrealist": 11, "classifi": [11, 13, 22, 27, 36, 47, 50, 51, 52, 57, 62, 80, 87, 93, 98, 100, 105, 122, 128, 132, 135, 141, 158, 163, 180, 181, 193, 194, 246, 267, 278, 283], "accompani": 11, "comment": [11, 149, 165, 180, 207, 222, 237, 238, 249], "sacrif": [11, 172], "max_pool2d": [11, 80, 115, 133, 177, 182, 223, 238, 253], "worri": [11, 57, 107, 144, 147, 165, 178, 232], "my_op": [11, 26], "squeez": [11, 15, 80, 103, 185, 200], "max": [11, 12, 22, 54, 57, 80, 87, 100, 133, 139, 149, 174, 182, 185, 187, 190, 194, 200, 212, 215, 217, 263, 278, 281, 282], "op_backward": 11, "proper": [11, 35, 134, 137, 147, 159, 174, 178, 187, 191, 207, 263], "rare": [11, 16, 54, 128, 168, 180, 263], "assumpt": [11, 15, 80, 105, 112, 113, 162, 168], "myadd_schema": 11, "train": [11, 13, 18, 19, 21, 23, 26, 35, 39, 40, 41, 45, 47, 50, 51, 52, 56, 59, 61, 62, 65, 67, 68, 70, 72, 73, 74, 77, 78, 80, 87, 90, 96, 97, 99, 100, 103, 105, 106, 108, 110, 112, 113, 115, 121, 132, 133, 135, 136, 139, 142, 143, 147, 159, 160, 162, 163, 166, 167, 170, 171, 173, 176, 177, 178, 179, 181, 184, 187, 188, 190, 193, 196, 198, 199, 209, 217, 224, 226, 227, 229, 230, 231, 232, 233, 247, 250, 253, 261, 264, 265, 267, 268, 278, 280, 282, 283], "my_add": 11, "_xlac": 11, "torch_xla_sourc": 11, "library_dir": 11, "extra_link_arg": 11, "make_relative_rpath": 11, "seamlessli": [11, 15, 58, 137, 191, 194, 248, 273], "nm": [11, 237], "torchvsion": 11, "adhoc": 11, "unbox": 11, "potenti": [11, 15, 28, 80, 95, 106, 134, 136, 142, 168, 177, 188, 190, 193, 198, 214, 215, 233, 273, 275], "wiki": [11, 153, 159], "suit": [11, 96, 120, 174, 211, 236], "ship": [11, 48, 98], "delet": [11, 88, 138, 147, 165, 170, 178, 187, 200], "old": [11, 22, 122, 135, 136, 172, 182, 184, 212], "until": [11, 54, 87, 95, 134, 136, 140, 141, 149, 150, 156, 165, 168, 174, 176, 177, 178, 184, 196, 207, 228, 248], "interrupt": [11, 58, 93, 180], "quarterli": 11, "cadenc": 11, "join": [11, 21, 44, 53, 54, 55, 56, 58, 104, 131, 133, 140, 141, 147, 149, 176, 177, 178, 198, 228, 229, 230, 248, 282], "announc": 11, "slack": [11, 48], "com": [11, 21, 22, 27, 28, 54, 118, 133, 140, 141, 143, 153, 154, 155, 159, 167, 180, 187, 193, 195, 200, 222, 223, 246, 248, 278], "Not": [11, 147, 173, 282], "search": [11, 21, 54, 132, 139, 156, 172, 190, 200, 281], "instantiate_device_type_test": 11, "testtorchdevicetyp": 11, "testviewop": 11, "testtensordeviceop": 11, "testtypepromot": 11, "__reduce_ex__": 11, "monkei": 11, "direct": [11, 26, 28, 35, 47, 51, 57, 80, 95, 96, 98, 104, 112, 139, 149, 153, 158, 162, 166, 180, 199, 200, 210, 229, 233, 267, 276], "suppos": [11, 25, 105, 106, 107, 112, 133, 188, 193, 195, 216, 233, 237], "vice": [11, 26, 44, 53], "versa": [11, 26, 44, 53], "Such": [11, 12, 95], "seamless": [11, 191, 215, 231], "coverag": [11, 153, 157, 159, 212, 214, 247], "comprehens": [11, 24, 27, 44, 53, 96, 118, 156, 190, 235, 262, 263], "refactor": [11, 122, 145], "codegen": [11, 156, 235], "dev": [11, 107, 142, 173, 184, 187, 188, 215, 244, 247], "andrew": [12, 195], "gu": 12, "shard": [12, 131, 132, 145, 196, 228, 230, 231, 232, 267], "saw": [12, 15, 24, 26, 40, 54, 98, 100, 103, 107, 109, 153, 154, 157, 158], "skeleton": [12, 15, 260], "implicitli": [12, 47, 54, 95, 133, 144, 179, 190, 244], "schedul": [12, 87, 93, 104, 128, 133, 134, 135, 147, 170, 175, 184, 193, 253, 263, 267, 270, 281, 283], "rank": [12, 18, 21, 49, 58, 60, 87, 132, 133, 134, 135, 136, 147, 149, 170, 171, 176, 177, 178, 191, 196, 198, 228, 229, 230, 232, 281, 282], "commun": [12, 16, 21, 60, 132, 133, 134, 135, 137, 139, 145, 146, 147, 170, 171, 174, 176, 177, 178, 184, 187, 190, 191, 196, 198, 202, 215, 231, 232, 263, 267], "particip": [12, 100, 146, 177, 247, 263], "hang": [12, 60, 141], "persist": [12, 25, 42, 229, 247], "facilit": [12, 15, 54, 96, 103, 105, 122, 132, 135, 137, 150, 212, 216, 263], "earli": [12, 26, 57, 93, 147, 149, 168, 195, 209, 235], "shadow": 12, "hook": [12, 135, 137, 142, 147, 172, 181, 235, 254, 283], "mp": [12, 16, 36, 41, 44, 58, 60, 67, 80, 103, 121, 128, 132, 133, 134, 147, 149, 176, 177, 178, 228, 229, 230, 282], "ddp": [12, 18, 58, 59, 65, 132, 133, 134, 135, 137, 146, 184, 232, 282], "nccl": [12, 21, 58, 60, 87, 133, 134, 136, 137, 147, 149, 184, 191, 196, 198, 229, 230, 232], "world_siz": [12, 18, 21, 58, 60, 133, 134, 136, 147, 149, 170, 171, 176, 177, 178, 196, 198, 228, 229, 230, 232, 282], "num_input": 12, "master_addr": [12, 21, 58, 60, 133, 136, 147, 149, 171, 176, 177, 178, 198, 228, 229, 230, 282], "localhost": [12, 21, 58, 60, 102, 133, 136, 147, 171, 176, 177, 178, 184, 185, 191, 228, 229, 230, 232, 261, 272, 282], "master_port": [12, 21, 58, 60, 133, 136, 147, 149, 171, 176, 177, 178, 198, 228, 229, 230, 282], "29500": [12, 21, 149, 171, 176, 177, 178, 228, 282], "init_process_group": [12, 18, 21, 58, 60, 133, 134, 136, 147, 149, 170, 171, 196, 198, 229, 230, 232, 282], "device_id": [12, 60, 122, 134, 135, 147, 282], "nproc": [12, 58, 60, 133, 147, 176, 178, 196, 228, 229, 230, 282], "__name__": [12, 56, 58, 60, 133, 134, 136, 147, 149, 159, 170, 176, 177, 178, 196, 228, 229, 230, 235, 244, 282], "__main__": [12, 56, 58, 60, 133, 134, 147, 149, 170, 176, 177, 178, 196, 228, 229, 230, 235, 244, 248, 282], "arbitrarili": [12, 54, 105, 254], "prior": [12, 16, 22, 55, 57, 95, 100, 105, 147, 158, 172, 185, 194, 228, 230], "togeth": [12, 19, 24, 28, 36, 42, 54, 56, 65, 90, 98, 100, 103, 104, 105, 109, 113, 133, 135, 143, 147, 150, 151, 168, 176, 178, 180, 187, 194, 217, 233, 262, 275], "lr": [12, 22, 40, 51, 57, 93, 98, 104, 113, 122, 128, 133, 134, 135, 147, 149, 156, 158, 175, 176, 177, 178, 182, 185, 226, 229, 230, 233, 235, 237, 238, 261, 267, 270, 271, 282, 283], "notabl": [12, 22, 93, 260], "addition": [12, 13, 40, 87, 138, 139, 147, 168, 190, 193, 198, 216, 229, 230, 272, 281], "divide_by_initial_world_s": 12, "world": [12, 15, 21, 26, 41, 59, 95, 103, 107, 137, 149, 155, 158, 171, 175, 176, 177, 190, 191, 198, 212, 229, 230, 232, 236], "nonetheless": [12, 105], "mind": [12, 44, 54, 57, 90, 105, 146, 162], "preliminari": [12, 149], "delv": [12, 156, 275], "insight": [12, 80, 87, 149, 179, 248, 262], "join_hook": 12, "kwarg": [12, 24, 122, 135, 155, 159, 174, 177, 190, 191, 211, 219, 226, 233, 235, 278], "join_devic": 12, "join_process_group": 12, "processgroup": [12, 18, 21, 65, 131, 132, 137, 178, 191, 198, 232, 263], "throw_on_early_termin": 12, "explain": [12, 13, 19, 23, 26, 47, 51, 57, 80, 96, 107, 113, 136, 137, 156, 188, 190, 201, 211, 214, 217, 253, 273, 278], "joinconfig": 12, "_join_config": 12, "main_hook": 12, "repeatedli": [12, 100, 174, 178, 199], "post_hook": 12, "is_last_join": 12, "broadcast": [12, 73, 113, 121, 135, 147, 149, 171, 190, 262, 282], "vacuou": 12, "contextlib": [12, 56, 182, 187], "nullcontext": 12, "conform": [12, 187], "interleav": [12, 196], "syncbatchnorm": [12, 60], "__exit__": 12, "heartbeat": 12, "notify_join_context": 12, "serializ": 12, "fulli": [12, 13, 15, 16, 23, 24, 25, 39, 65, 87, 93, 98, 99, 100, 113, 128, 131, 132, 139, 142, 145, 159, 162, 175, 177, 179, 184, 209, 217, 224, 230, 235, 237, 250], "proceed": [12, 51, 105, 118, 168], "overlap": [12, 24, 61, 133, 134, 135, 140, 145, 147, 168, 184, 187, 196, 263], "moreov": [12, 168, 207, 237, 248], "permit": [12, 247], "customiz": [12, 150], "idea": [12, 26, 27, 80, 90, 105, 107, 108, 109, 112, 121, 137, 143, 150, 156, 166, 175, 178, 180, 207, 222, 228, 233, 244, 248, 263, 281, 282], "counterjoinhook": 12, "sync_max_count": 12, "all_reduc": [12, 65, 133, 134, 149, 171, 198, 231], "get_rank": [12, 135, 147, 149], "process_group": [12, 198, 232], "common_rank": 12, "find_common_rank": 12, "max_count": 12, "clone": [12, 25, 26, 59, 103, 140, 144, 145, 149, 156, 159, 170, 196, 278], "__call__": [12, 56, 159, 172], "meth": [12, 15], "to_consid": 12, "reduceop": [12, 133, 134, 149], "device_count": [12, 58, 60, 93, 103, 133, 147, 229, 230, 232], "highlight": [12, 54, 90, 114, 125, 134, 135, 179, 184, 188, 190, 191, 228, 237, 238, 275], "alexi": 13, "jacq": 13, "winston": 13, "her": [13, 171], "leon": 13, "gati": 13, "alexand": [13, 214], "ecker": 13, "matthia": 13, "bethg": 13, "artist": 13, "distanc": [13, 67, 68, 72, 73, 74, 77, 78, 95, 105, 121], "d_c": 13, "d_": [13, 104], "indispens": [13, 174], "pil": [13, 23, 45, 56, 173, 187, 193], "pretrain": [13, 23, 27, 47, 80, 96, 112, 128, 132, 173, 180, 187, 214, 223, 237, 238, 277, 278, 280], "resiz": [13, 22, 23, 51, 56, 57, 150, 237, 271], "unabl": [13, 17, 26, 151, 167, 190, 209], "caff": 13, "picasso": 13, "jpg": [13, 37, 56, 57, 96], "reconvert": 13, "f_": [13, 174], "xl": [13, 236], "w_": [13, 112], "cl": [13, 202], "c": [13, 16, 17, 21, 22, 24, 28, 47, 56, 67, 68, 90, 95, 96, 102, 103, 105, 112, 121, 132, 134, 141, 142, 144, 149, 156, 159, 168, 173, 178, 179, 187, 188, 190, 191, 198, 202, 211, 235, 238, 244, 247, 248, 260, 261, 267, 277], "squar": [13, 40, 51, 56, 67, 68, 72, 73, 74, 77, 78, 95, 100, 103, 105, 121, 143, 144, 158, 166, 175, 179, 195], "contentloss": 13, "recomput": [13, 105, 143, 145, 166, 263], "act": [13, 47, 54, 95, 100, 103, 139, 150, 172, 175, 177, 190, 191], "gram": 13, "g_": 13, "hat": [13, 110], "counteract": 13, "pool": [13, 21, 57, 100, 104, 105, 113, 122, 185, 191], "tend": [13, 19, 95, 100, 105, 200, 217], "almost": [13, 22, 110, 112, 133, 137, 150, 173, 190, 200], "sl": 13, "19": [13, 19, 26, 40, 104, 156, 175, 182, 190, 200, 201, 217, 236, 253], "vgg": 13, "child": [13, 120, 184, 232], "connect": [13, 51, 93, 98, 100, 112, 128, 132, 136, 137, 149, 153, 155, 162, 172, 173, 175, 194, 198, 232, 250], "eval": [13, 19, 22, 23, 40, 42, 54, 80, 104, 113, 122, 133, 134, 143, 154, 177, 180, 182, 187, 214, 217, 223, 237, 238, 271, 278, 280], "485": [13, 22, 56, 105, 173, 182], "456": [13, 22, 56, 105, 173, 182], "406": [13, 22, 56, 105, 173, 182], "229": [13, 22, 56, 105, 173, 182], "225": [13, 22, 56, 105, 120, 173, 182], "vgg19": [13, 159], "maxpool2d": [13, 51, 104, 122, 155, 182, 185], "align": [13, 132, 179, 180, 199, 208, 235, 244], "depth": [13, 47, 57, 61, 95, 98, 103, 109, 138, 156, 190, 226, 263], "immedi": [13, 21, 24, 44, 53, 57, 100, 103, 110, 149, 165, 176, 177, 184, 200], "white": [13, 17, 19, 80, 100, 113, 185, 187, 217], "input_img": 13, "content_img": 13, "bfg": 13, "closur": [13, 190, 233], "reevalu": 13, "exce": [13, 80, 143, 191], "sphinx_gallery_thumbnail_numb": 13, "neural_style_tutori": [13, 20, 283], "paszk": [14, 149, 175], "dziedzic": 14, "shall": [14, 51, 57], "learnabl": [14, 51, 72, 121, 122, 132, 219, 265], "badfftfunct": 14, "literatur": [14, 175], "confusingli": 14, "correl": [14, 87, 100, 113, 156], "filter": [14, 27, 54, 88, 96, 105, 138, 180, 191, 198, 262], "flip": [14, 24, 157], "wrt": [14, 144], "numpy_extensions_tutori": [14, 20, 283], "freeli": 15, "inspir": [15, 149, 157, 162, 179, 222], "v1": [15, 19, 159, 175, 176, 178, 217, 228, 248], "openai": [15, 132, 158, 174, 175, 176, 178, 278], "farama": [15, 174], "gymnasium": [15, 174, 175], "stateless": [15, 25, 151, 153], "encount": [15, 54, 134, 142, 156, 188, 190, 191, 194, 216, 263, 272, 278], "undertaken": 15, "broader": [15, 28], "wider": [15, 157], "acquaint": 15, "set_se": 15, "avenu": [15, 90], "backpropag": [15, 40, 41, 47, 51, 54, 80, 95, 106, 107, 108, 110, 112, 113, 121, 138, 158, 191], "_set_se": 15, "torqu": 15, "upward": 15, "posit": [15, 96, 100, 107, 132, 166, 174, 175, 179, 180, 187, 190, 194, 198, 217, 246, 281], "angular": 15, "stand": [15, 90, 95, 113, 158, 194, 210], "equat": [15, 57, 175, 250, 254], "motion": 15, "veloc": [15, 175], "theta": [15, 80, 107, 174, 182], "_t": [15, 158], "sin": [15, 17, 67, 68, 72, 73, 74, 77, 78, 95, 103, 121, 202, 263, 273], "theta_t": 15, "dt": 15, "rad": 15, "sec": [15, 133], "gravit": 15, "mass": 15, "accord": [15, 16, 27, 35, 103, 104, 122, 156, 158, 170, 172, 175, 179, 187, 210, 219, 224, 272], "theta_": [15, 158], "001": [15, 56, 104, 122, 147, 176, 185, 235, 237, 271], "deleg": [15, 24, 132, 223], "privat": [15, 16, 26, 136, 171, 172, 207], "merg": [15, 25, 49, 96, 100, 173, 187, 237], "is_shar": 15, "new_th": 15, "plu": [15, 107, 141], "new_thdot": 15, "neg": [15, 24, 40, 54, 96, 100, 106, 107, 113, 114, 156, 168, 172, 174, 235, 246], "discourag": [15, 44, 53, 174], "possibli": [15, 57, 135, 174, 190, 198, 273], "omit": [15, 26, 95, 120, 135, 156, 174, 194, 253, 260, 262], "agent": [15, 132, 175, 176, 178, 181, 182, 283], "param": [15, 22, 56, 122, 133, 134, 135, 144, 147, 149, 151, 153, 167, 177, 178, 195, 207, 233, 235, 260, 282], "mandatori": [15, 153, 174], "domain": [15, 27, 37, 41, 54, 55, 80, 104, 118, 132, 174, 212, 263], "accur": [15, 22, 80, 93, 98, 120, 139, 155, 168, 178, 188, 209, 214, 276], "lazili": [15, 165], "costli": [15, 138, 263], "observation_spec": [15, 174], "compositespec": 15, "dictionari": [15, 41, 42, 54, 87, 112, 115, 122, 141, 165, 167, 174, 176, 177, 180, 187, 191, 199, 252, 265, 267], "action_spec": [15, 174], "reward_spec": [15, 174], "done_spec": 15, "input_spec": [15, 174], "state_spec": 15, "output_spec": 15, "neither": [15, 103, 195, 281], "shortcut": 15, "tensorspec": 15, "irrelev": [15, 171], "incorpor": [15, 105, 114, 132, 150, 179], "pseudo": [15, 27], "_make_spec": 15, "pendulumenv": 15, "gen_param": 15, "batch_lock": 15, "homonym": [15, 168], "check_env_spec": [15, 174], "rand_step": 15, "randomli": [15, 48, 56, 57, 77, 78, 93, 98, 100, 121, 141, 158, 175, 180, 191], "invers": [15, 103, 199, 208, 228], "showcas": [15, 26, 70, 134, 135, 162, 165, 191, 201, 215], "thdot": 15, "summar": [15, 54, 56, 113, 125, 131, 134, 139, 184, 190], "_apply_transform": 15, "_call": 15, "inv": 15, "_inv_apply_transform": 15, "eventu": [15, 136, 143, 150], "out_keys_inv": 15, "unitari": 15, "sine": [15, 121], "cosin": [15, 236], "raw": [15, 26, 36, 48, 54, 73, 87, 121, 198, 276], "del_kei": 15, "mdp": 15, "gather": [15, 60, 96, 102, 104, 133, 135, 137, 147, 149, 150, 155, 174, 196, 215, 222, 247], "unexplor": 15, "abil": [15, 26, 103, 113, 122, 137, 138, 149, 182, 185, 188, 194, 209, 223], "recreat": [15, 35, 47], "clip": [15, 54, 80, 174, 182], "scratch": [15, 35, 47, 54, 58, 105, 106, 122, 125, 128, 132, 181, 198, 264, 267, 283], "advanc": [16, 19, 20, 22, 26, 47, 93, 108, 111, 114, 115, 117, 118, 131, 132, 135, 147, 168, 187, 191, 194, 207, 210, 211, 214, 215, 217, 218, 222, 231, 233, 237, 238, 263, 267, 281, 283], "verif": [16, 177], "rapid": [16, 95, 210], "manufactur": 16, "imposs": [16, 98, 106, 165, 222], "simultan": [16, 25, 28, 35, 47, 61, 132, 139, 149, 168, 173, 263], "began": 16, "enhanc": [16, 96, 136, 140, 168, 182, 202, 211, 216, 224, 233, 263, 278, 281], "rapidli": 16, "wrapper_custom_tensor_add": 16, "torch_fn": 16, "custom_cpu_fallback": 16, "operatorhandl": 16, "hint": [16, 21, 95, 105, 106, 110, 118, 138, 149, 176, 184, 190, 235], "cpu_fallback": 16, "cppfunction": 16, "makefromboxedfunct": 16, "cumtomselufunct": 16, "selu": 16, "wrapper_autogradcumstom__selu": 16, "wrapper_autogradcustom__selu": 16, "autocastprivateuse1": 16, "autocast": [16, 211, 217, 224, 237, 271], "kernel_privateuseon": 16, "makefallthrough": 16, "backendmodul": 16, "_register_device_modul": 16, "backend_nam": 16, "get_amp_supported_dtyp": 16, "is_autocast_en": 16, "get_autocast_dtyp": 16, "set_autocast_dtyp": 16, "set_autocast_en": 16, "generatorimpl": 16, "builder": [16, 190], "register_generator_privateuse1": 16, "customgeneratorimpl": 16, "make_custom_gener": 16, "deviceindex": 16, "device_index": 16, "make_gener": 16, "make_cumstom_gener": 16, "event": [16, 25, 87, 120, 133, 134, 176, 188, 198, 253, 261, 276], "deviceguard": 16, "deviceguardimplinterfac": 16, "c10_register_guard_impl": 16, "customguardimpl": 16, "backend_meta_": 16, "extrameta": 16, "backendmeta": 16, "custombackendmetadata": 16, "unordered_map": 16, "tensorbackendmetaregistri": 16, "for_seri": 16, "for_deseri": 16, "expand": [16, 95, 109, 115, 156, 163, 185, 212, 229, 278], "timer": [16, 57, 180, 217, 226, 235, 251, 259, 283], "ascend": [16, 57, 88, 216], "npu": [16, 214, 216], "meet": [16, 55, 57, 219, 238, 248], "usabl": [16, 122, 150, 154, 198, 264], "compli": 16, "habit": 16, "torch_npu": [16, 216], "exclus": [16, 26, 172], "rename_privateuse1_backend": 16, "register_privateuse1_backend": 16, "unsupported_dtyp": 16, "quint8": [16, 195], "generate_methods_for_privateuse1_backend": 16, "for_tensor": 16, "for_modul": 16, "for_storag": 16, "is_npu": 16, "perhap": [17, 80, 140, 172, 230], "prevent": [17, 40, 54, 60, 113, 120, 138, 141, 147, 156, 158, 168, 190, 191, 216, 247, 248, 263, 268, 281], "induc": [17, 172, 198], "bad": [17, 93, 138, 200, 263], "fullgraph": [17, 142, 188, 226, 275], "uncom": [17, 54, 56, 68, 78, 98, 102, 109, 113, 121, 170, 175], "cropped_img": 17, "img": [17, 56, 96, 104, 132, 185, 187], "black": [17, 80, 87, 100, 113, 132, 137, 139, 176, 180], "aka": [17, 157, 159, 168, 194, 237, 277], "mutates_arg": 17, "led": 17, "past": [17, 54, 55, 104, 109, 190, 194], "exercis": [17, 22, 48, 149, 247], "reader": [17, 110, 149, 194, 262], "region": [17, 96, 103, 139, 155, 182, 187, 193, 244, 247, 251, 263, 267, 270, 274, 276, 283], "unus": [17, 156, 171], "forgot": [17, 198], "python_custom_op": [17, 20, 283], "pritam": 18, "damania": 18, "yi": [18, 190, 277], "wang": [18, 27, 115, 117, 118, 156, 158, 198], "distributeddataparallel": [18, 60, 61, 65, 131, 133, 134, 135, 149, 171, 178, 247, 282], "paradigm": [18, 19, 65, 105, 121, 131, 177, 178, 217], "dens": [18, 19, 191, 194, 207, 212, 217], "fc": [18, 47, 158, 219], "replic": [18, 21, 61, 65, 132, 133, 137, 145, 147, 149, 177, 178, 191, 232], "trainer": [18, 27, 60, 139, 145, 176, 177, 178, 217, 230], "hybrid": [18, 89, 91, 232, 283], "pipedream": 18, "embeddingbag": [18, 21], "drive": [18, 28, 57, 95, 98, 100, 132, 158, 168, 207, 228], "respond": [18, 96, 158, 177], "amongst": [18, 191, 208], "themselv": [18, 100, 191, 209], "remotemodul": 18, "kick": [18, 35, 47, 165, 176, 177, 178], "remot": [18, 65, 131, 139, 176, 177, 178, 184, 228, 233, 244, 272, 281], "hybridmodel": 18, "allreduc": [18, 87, 133, 137, 147, 171, 198, 263], "firstli": [18, 118, 156, 175], "tcp": [18, 60, 136, 145, 146, 149, 228], "init_method": [18, 147, 149, 196], "_run_train": [18, 178], "rpc_async": [18, 176, 178], "exit": [18, 153, 176, 177, 178, 198, 226, 227, 235, 274, 279, 281], "conflict": [18, 156, 190], "remote_emb_modul": 18, "rref": [18, 176, 177, 228, 233], "distributedoptim": [18, 177, 178, 228, 233], "remote_paramet": 18, "cannnot": 18, "crossentropyloss": [18, 22, 40, 104, 107, 137, 170, 178, 185, 237, 271], "get_next_batch": [18, 176, 178], "jess": [19, 217], "cai": [19, 217], "seek": [19, 90, 96, 217, 231], "grain": [19, 37, 95, 134, 149, 184, 188, 217, 247, 248, 262], "2n": [19, 217], "degrad": [19, 80, 217], "sparsifi": [19, 132, 172, 217], "answer": [19, 40, 96, 100, 107, 149, 155, 165, 180, 190, 191, 217], "tune": [19, 22, 40, 87, 105, 113, 123, 131, 132, 133, 139, 142, 173, 200, 211, 214, 217, 238, 251, 259, 262, 267, 281, 283], "recov": [19, 133, 134, 147, 159, 217], "nearli": [19, 113, 185, 217, 248], "f1": [19, 188, 217], "86": [19, 56, 156, 173, 178, 194, 217, 235, 236, 248], "92": [19, 182, 217, 236, 248], "3x": [19, 68, 121, 217, 224, 247, 263], "beginn": [19, 38, 43, 49, 50, 52, 69, 75, 79, 82, 83, 84, 85, 89, 91, 97, 99, 101, 108, 111, 116, 119, 121, 123, 132, 217, 220, 255, 256, 257, 258], "to_sparse_semi_structur": [19, 217], "motiv": [19, 80, 136, 156, 177, 195, 201, 208, 209, 212, 217], "affect": [19, 96, 100, 104, 105, 144, 168, 170, 217, 263], "swap": [19, 56, 107, 137, 168, 174, 194, 200, 212, 217, 260], "compress": [19, 96, 172, 207, 210, 214, 217, 238], "arrang": [19, 121, 217], "drawback": [19, 112, 190, 217, 229, 230], "2020": [19, 217], "amper": [19, 134, 162, 167, 217, 247], "cutlass": [19, 211, 217], "cusparselt": [19, 217], "milder": [19, 217], "account": [19, 55, 113, 150, 165, 168, 180, 185, 194, 214, 217, 277], "retrain": [19, 217], "sweet": [19, 217], "spot": [19, 98, 102, 103, 140, 217], "2x": [19, 23, 90, 132, 144, 165, 217, 236], "theoret": [19, 57, 168, 207, 217, 268], "granular": [19, 134, 156, 191, 217, 253, 263, 281], "fp16": [19, 134, 159, 200, 211, 217], "resnet": [19, 47, 48, 96, 138, 184, 217, 263], "imagenet": [19, 48, 56, 96, 128, 173, 217], "76": [19, 56, 159, 178, 194, 217, 235, 248], "resnext": [19, 217], "101_32x8d": [19, 217], "79": [19, 156, 217, 235, 248, 253], "xception": [19, 217], "ssd": [19, 217, 263], "rn50": [19, 217], "coco2017": [19, 217], "bbap": [19, 217], "24": [19, 22, 104, 156, 173, 194, 217, 236, 248], "maskrcnn": [19, 217], "fairseq": [19, 217], "en": [19, 24, 153, 180, 187, 217], "de": [19, 21, 25, 180, 217], "wmt14": [19, 217], "bleu": [19, 217], "squad": [19, 217], "91": [19, 178, 217, 236, 248], "workflow": [19, 22, 39, 87, 92, 93, 114, 132, 133, 191, 210, 215, 217, 267], "perspect": [19, 26, 109, 174, 217, 281], "subproblem": [19, 217], "bmatrix": [19, 110, 217], "handoff": [19, 217], "anticip": [19, 217], "area": [19, 96, 100, 185, 193, 200, 210, 217, 246], "colab": [19, 21, 27, 28, 39, 44, 53, 99, 102, 113, 132, 149, 150, 157, 174, 175, 187, 191], "pip": [19, 23, 27, 55, 87, 96, 102, 115, 117, 158, 173, 175, 184, 187, 188, 193, 198, 200, 214, 223, 236, 238, 246, 248, 250, 253, 261, 264, 265, 266, 268, 275, 281], "panda": [19, 56, 80, 187], "hug": [19, 156], "face": [19, 48, 56, 57, 80, 156, 278], "token": [19, 54, 112, 134, 137, 141, 170, 179, 180, 194, 217, 263, 278], "val": [19, 22, 25, 134, 173, 217], "segment": [19, 132, 194, 200, 217], "text": [19, 37, 48, 57, 80, 90, 96, 106, 107, 109, 110, 112, 131, 132, 134, 140, 141, 149, 163, 168, 174, 175, 180, 184, 187, 194, 217, 244, 246, 278], "wikipedia": [19, 153, 217], "articl": [19, 37, 217], "score": [19, 54, 96, 106, 110, 112, 120, 179, 180, 193, 194, 196, 217, 246, 278], "fair": [19, 105, 212, 217], "lowest": [19, 133, 172, 217], "l1": [19, 93, 172, 217], "ao": [19, 22, 195, 200, 214, 217], "satisfi": [19, 139, 217, 219, 263], "anytim": [19, 217], "pruner": [19, 217], "update_mask": [19, 217], "shot": [19, 176, 217, 278], "wouldn": [19, 112, 133, 150, 217], "squash_mask": [19, 217], "quickstart": [19, 35, 36, 37, 38, 39, 40, 42, 44, 45, 132, 217], "28x": [19, 217], "amen": [19, 217], "spent": [19, 87, 179, 184, 217, 248, 253, 268], "delta": [19, 156, 175, 217, 248, 262], "exact": [19, 105, 122, 143, 179, 190, 194, 198, 217, 226], "78": [19, 217, 235, 248], "53": [19, 104, 141, 159, 182, 217, 235, 236, 253], "44": [19, 40, 104, 156, 178, 182, 217], "09": [19, 54, 156, 178, 217, 236], "93": [19, 120, 178, 217, 236, 248, 253], "49": [19, 159, 178, 217, 235, 248], "15": [19, 26, 27, 40, 49, 80, 98, 100, 128, 141, 182, 185, 187, 193, 217, 220, 235, 236, 248, 253, 259], "54": [19, 159, 235, 248], "71x": 19, "35": [19, 80, 137, 141, 159, 181, 182, 220, 235, 236, 238, 283], "74": [19, 178, 235, 236, 248, 253], "23x": 19, "72": [19, 173, 235, 248, 253], "71": [19, 22, 24, 56, 104, 156, 178, 235], "59": [19, 173, 187, 235, 248, 253], "41": [19, 133, 141, 173, 235, 248, 253], "22x": 19, "286": [19, 159, 187, 217], "65": [19, 40, 56, 104, 141, 178, 193, 194, 235, 248], "247": [19, 178], "63": [19, 40, 235, 253], "14x": 19, "46": [19, 156, 159, 173, 235], "02x": 19, "ye": [19, 55, 165, 275], "47": [19, 93, 159, 235, 236, 248, 253], "68": [19, 40, 56, 156, 235, 248], "18x": [19, 217], "36": [19, 173, 235, 236], "13x": 19, "159": 19, "22": [19, 40, 104, 141, 156, 159, 178, 235, 236, 248], "142": [19, 80, 236], "23": [19, 40, 80, 123, 141, 156, 178, 181, 235, 236, 248, 253, 262, 283], "12x": [19, 194], "sparsesemistructuredtensor": [19, 217], "semi_structured_spars": [19, 20, 283], "00": [20, 40, 43, 52, 69, 75, 79, 80, 91, 98, 101, 104, 111, 119, 120, 123, 156, 178, 181, 182, 187, 200, 202, 218, 236, 253, 259, 270, 283], "011": [20, 52], "mem": [20, 43, 52, 69, 75, 79, 87, 91, 101, 111, 119, 120, 123, 181, 218, 253, 259, 270, 283], "mb": [20, 22, 43, 52, 69, 75, 79, 91, 101, 111, 119, 120, 123, 133, 181, 218, 253, 259, 270, 282, 283], "torchrl": [20, 132, 150, 158, 181, 283], "ddpg": [20, 132, 283], "pendulum": [20, 132, 174, 283], "scipi": [20, 48, 132, 144, 188, 283], "acceler": [20, 36, 41, 44, 53, 54, 55, 62, 65, 67, 80, 105, 117, 121, 128, 132, 140, 159, 168, 212, 215, 218, 224, 227, 236, 237, 263, 283], "bert": [20, 100, 132, 133, 214, 215, 283], "semi": [20, 132, 194, 215, 283], "sparsiti": [20, 112, 132, 172, 194, 207, 209, 215, 218, 283], "000": [20, 22, 37, 43, 69, 75, 101, 114, 119, 123, 139, 158, 159, 181, 185, 187, 218, 259, 283], "onnx": [20, 90, 119, 132, 283], "super_resolution_with_onnxruntim": [20, 23, 283], "supervis": [20, 107, 132, 182, 187, 283], "usb": [20, 132, 173, 283], "usb_semisup_learn": [20, 27, 283], "embeddingplann": [21, 132], "conda": [21, 26, 87, 96, 102, 149, 156, 198, 200, 215, 238, 246, 261, 262, 281], "cudatoolkit": 21, "sudo": [21, 184, 223], "rm": [21, 228], "miniconda3": [21, 25, 262], "py37_4": 21, "sh": [21, 147, 223, 244], "anaconda": [21, 87, 96, 149, 261], "chmod": 21, "fbgemm": [21, 22, 191, 195], "ipython": [21, 120], "cp": [21, 196, 223], "restart": [21, 26, 96, 102, 146, 175], "newli": [21, 128, 149, 233], "python37": 21, "dynload": 21, "enviro": 21, "spmd": [21, 137, 230], "mimic": [21, 22, 105, 200, 207], "launcher": 21, "embeddingbagcollect": 21, "bag": [21, 39, 104, 185, 191], "ebc": [21, 191], "4096": [21, 191, 236], "parameterconstraint": 21, "placement": [21, 135, 214, 281], "evenli": [21, 95], "intra": [21, 24, 104, 134, 137, 232], "interconnect": [21, 250], "nvlink": [21, 137, 228], "data_parallel": 21, "planner": 21, "embedding_typ": 21, "embeddingcomputekernel": 21, "shardingtyp": 21, "dict": [21, 54, 56, 159, 165, 174, 190, 193, 229, 230, 233, 235, 247, 252], "large_table_cnt": 21, "small_table_cnt": 21, "large_t": 21, "embeddingbagconfig": 21, "large_table_": 21, "embedding_dim": [21, 100], "num_embed": 21, "feature_nam": 21, "large_table_feature_": 21, "poolingtyp": 21, "small_tabl": 21, "small_table_": 21, "small_table_feature_": 21, "gen_constraint": 21, "sharding_typ": 21, "table_wis": 21, "large_table_constraint": 21, "small_table_constraint": 21, "mimick": 21, "single_rank_execut": 21, "embeddingbagcollectionshard": [21, 191], "model_parallel": 21, "embeddingshardingplann": 21, "topologi": [21, 191, 230, 232, 237, 244], "moduleshard": 21, "shardingenv": 21, "init_distributed_single_host": 21, "pyre": 21, "fixm": 21, "set_devic": [21, 58, 60, 133, 134, 147, 196, 201, 229, 230, 232, 235], "compute_devic": 21, "pg": [21, 198], "sharder": [21, 191], "shardingplan": 21, "collective_plan": 21, "sharded_model": 21, "from_process_group": 21, "spmd_sharing_simul": 21, "get_context": [21, 149], "exitcod": 21, "factor": [21, 23, 100, 128, 168, 175, 176, 188, 191, 200, 229], "medium": [21, 136, 193, 263], "large_table_0": 21, "parametershard": 21, "compute_kernel": 21, "batched_fus": 21, "sharding_spec": 21, "enumerableshardingspec": 21, "shardmetadata": 21, "shard_offset": 21, "shard_siz": 21, "large_table_1": 21, "small_table_0": 21, "small_table_1": 21, "finer": [21, 37, 253], "halv": [21, 120], "row_wis": 21, "512": [21, 40, 134, 170, 190, 217, 224, 237, 248, 253], "imbal": [21, 263], "vertic": [21, 24], "column_wis": 21, "unfortu": 21, "batched_dens": 21, "raghuraman": 22, "krishnamoorthi": 22, "seth": [22, 39], "weidman": 22, "jerri": 22, "zhang": [22, 229, 230, 232], "decreas": [22, 41, 54, 80, 88, 105, 113, 137, 140, 191, 210], "mobilenetv2": [22, 215], "np": [22, 56, 80, 104, 106, 173, 178, 182, 185, 187, 208, 217, 262, 278], "dataload": [22, 35, 36, 38, 39, 40, 41, 42, 44, 45, 48, 49, 57, 60, 80, 93, 105, 123, 133, 134, 140, 149, 168, 170, 177, 182, 184, 185, 187, 214, 237, 238, 239, 251, 263, 271, 283], "filterwarn": [22, 56, 187], "deprecationwarn": 22, "seed": [22, 57, 80, 98, 105, 133, 134, 149, 175, 176, 178], "manual_se": [22, 80, 103, 133, 134, 149, 175, 176, 196, 217, 282], "191009": 22, "floatfunct": 22, "quantstub": 22, "dequantstub": 22, "relu6": 22, "_make_divis": 22, "divisor": 22, "min_valu": 22, "tf": [22, 102], "divis": [22, 103, 190, 235], "tensorflow": [22, 102, 106, 108, 121], "blob": [22, 26, 118, 133, 154, 184, 195, 223], "slim": [22, 121], "mobilenet": [22, 132, 173], "new_v": 22, "round": [22, 118, 134, 176, 248, 262], "convbnrelu": 22, "in_plan": 22, "out_plan": 22, "kernel_s": [22, 80, 133, 182, 195, 238], "momentum": [22, 47, 48, 70, 74, 93, 98, 104, 113, 121, 122, 143, 149, 176, 185, 191, 195, 233, 237, 238, 265, 266, 271], "inplac": [22, 80, 133, 217], "invertedresidu": 22, "inp": [22, 177, 182, 190, 211, 231], "oup": 22, "expand_ratio": 22, "hidden_dim": [22, 100], "use_res_connect": 22, "pw": 22, "dw": 22, "conv": [22, 57, 100, 143, 154, 155, 159, 177, 244, 253], "skip_add": 22, "num_class": [22, 176, 185, 187, 193], "width_mult": 22, "inverted_residual_set": 22, "round_nearest": 22, "v2": [22, 105, 125, 150, 173, 191, 216, 224, 229, 235], "width": [22, 47, 48, 51, 100, 103, 139, 162, 187, 193, 278], "input_channel": 22, "last_channel": 22, "1280": [22, 193], "96": [22, 156, 159, 178, 236], "160": [22, 178, 187, 248, 253], "320": [22, 182, 238], "valueerror": [22, 233, 278], "invert": [22, 132, 174, 208], "residu": [22, 137], "output_channel": 22, "quant": [22, 195], "dequant": [22, 195, 200, 238], "isinst": [22, 56, 80, 135, 159, 201, 217], "init": [22, 25, 26, 136, 216, 219], "kaiming_normal_": 22, "fan_out": 22, "zeros_": 22, "elif": [22, 159, 170, 233, 235], "ones_": 22, "normal_": 22, "bn": [22, 143, 155, 195], "numer": [22, 23, 44, 54, 77, 78, 103, 105, 106, 115, 121, 135, 139, 196, 217, 247, 263], "fuse_model": 22, "is_qat": [22, 195], "fuse_modul": 22, "fuse_modules_qat": 22, "averagemet": 22, "fmt": 22, "avg": [22, 40, 236, 253], "__str__": [22, 191], "fmtstr": 22, "__dict__": [22, 214, 260], "topk": [22, 141, 238, 280], "maxk": 22, "pred": [22, 40, 113, 133, 137, 177, 182, 185, 238], "correct_k": 22, "mul_": [22, 233], "criterion": [22, 51, 141, 178, 180, 185, 237, 261, 271], "neval_batch": 22, "top1": [22, 238], "acc": [22, 80, 187], "2f": [22, 133, 173, 176, 178], "top5": [22, 280], "cnt": [22, 80], "acc1": 22, "acc5": 22, "load_model": 22, "model_fil": 22, "state_dict": [22, 42, 54, 58, 60, 93, 104, 133, 134, 135, 147, 172, 188, 229, 230, 237, 247, 250, 251, 259, 260, 264, 267, 283], "weights_onli": [22, 42, 80, 122, 135, 147, 187, 238], "load_state_dict": [22, 42, 58, 80, 93, 104, 122, 135, 147, 187, 229, 230, 238, 247, 251, 259, 264, 283], "print_size_of_model": 22, "getsiz": 22, "data_path": [22, 93], "prepare_data_load": 22, "randomresizedcrop": [22, 56], "randomhorizontalflip": [22, 56], "dataset_test": 22, "centercrop": 22, "train_sampl": 22, "randomsampl": 22, "test_sampl": 22, "sequentialsampl": 22, "train_batch_s": 22, "data_loader_test": 22, "eval_batch_s": 22, "pre": [22, 37, 106, 132, 134, 137, 149, 173, 187, 191, 193, 194, 200, 211, 230, 233, 273, 281], "saved_model_dir": 22, "float_model_fil": 22, "mobilenet_pretrained_float": 22, "scripted_float_model_fil": 22, "mobilenet_quantization_script": 22, "scripted_quantized_model_fil": 22, "mobilenet_quantization_scripted_quant": 22, "float_model": [22, 214], "fusion": [22, 87, 132, 155, 156, 191, 200, 211, 233, 237, 263, 267, 270, 279, 283], "baselin": [22, 24, 27, 96, 105, 187, 200, 217, 248, 262], "un": [22, 103, 180], "num_eval_batch": 22, "sophist": [22, 121, 174], "num_calibration_batch": 22, "mymodel": [22, 195], "estim": [22, 51, 56, 57, 100, 139, 174, 175, 180, 191, 200, 248, 268], "qconfig": [22, 195], "default_qconfig": 22, "calibr": [22, 168, 195, 214, 238], "56": [22, 40, 159, 173, 217, 235, 248, 253, 281], "4x": [22, 134], "x86": [22, 195, 211, 224], "basi": [22, 134], "histogram": [22, 261], "per_channel_quantized_model": 22, "get_default_qconfig": 22, "67": [22, 120, 156, 195, 235, 236], "qat": [22, 195], "int8": [22, 173, 200, 211, 224, 238], "train_one_epoch": [22, 104], "ntrain_batch": 22, "avgloss": 22, "5f": 22, "start_tim": 22, "global_avg": 22, "qat_model": 22, "get_default_qat_qconfig": 22, "prepare_qat": 22, "freez": [22, 47, 128, 215, 218, 237, 283], "num_train_batch": 22, "nepoch": 22, "disable_observ": 22, "intrins": [22, 195], "freeze_bn_stat": 22, "quantized_model": [22, 214], "confirm": [22, 23, 93, 96, 113, 114, 134, 157, 176, 280], "allud": [22, 80], "run_benchmark": 22, "img_load": 22, "elaps": [22, 133, 180], "num_batch": [22, 40, 149], "enumer": [22, 40, 56, 93, 104, 133, 135, 137, 173, 177, 182, 184, 185, 217, 237, 238, 271], "num_imag": 22, "0f": [22, 182, 238], "macbook": [22, 180], "pro": [22, 99], "61": [22, 40, 120, 159, 217, 235, 236], "welcom": 22, "dynamo_export": 23, "torchdynamo": [23, 132, 142, 190, 202, 214], "technologi": [23, 65, 105, 132, 149, 194, 233, 267], "torchscript": [23, 115, 117, 123, 132, 154, 215, 218, 253, 267, 283], "platform": [23, 26, 115, 147, 149, 184, 224, 236, 244, 263, 271, 280, 281], "mac": [23, 223], "prove": 23, "onnxruntim": [23, 115, 117], "resolut": [23, 100, 187], "video": [23, 40, 47, 48, 58, 60, 61, 95, 96, 98, 100, 102, 103, 104, 125, 131, 132, 145, 146, 184], "wide": [23, 36, 65, 95, 100, 113, 136, 137, 140, 141, 149, 171, 180, 200, 233, 246, 263], "superresolut": 23, "shi": 23, "et": [23, 27, 54, 57, 80, 149, 172, 180], "al": [23, 27, 54, 57, 80, 172, 180], "upscal": 23, "ycbcr": 23, "ordinarili": [23, 247], "torch_model": [23, 115], "batchnorm": [23, 57, 60, 122, 154, 159, 214, 263, 265], "ax": [23, 56, 107, 110, 132, 180, 181, 185, 283], "dynamic_ax": 23, "torch_out": 23, "super_resolut": 23, "modelproto": 23, "bundl": [23, 273], "ml": [23, 39, 80, 103, 105, 131, 132, 139, 191, 215, 235, 236], "proto": 23, "checker": [23, 115], "check_model": [23, 115], "onnx_model": [23, 115], "rtol": 23, "1e": [23, 40, 93, 100, 135, 143, 176, 178, 195, 196, 217, 235], "03": [23, 98, 177, 178, 181, 187, 196, 236, 262, 283], "atol": [23, 196, 217], "05": [23, 24, 80, 104, 134, 178, 181, 195, 236], "contact": [23, 134, 222], "pronounc": [23, 168], "famou": [23, 27, 80], "preprocess": [23, 56, 105, 113, 132, 140, 180, 187], "224x224": [23, 96, 173], "cb": 23, "cr": 23, "grayscal": [23, 37, 150, 158], "blue": [23, 47, 134, 137, 244], "red": [23, 137, 142, 185, 244], "chroma": 23, "sensit": [23, 105, 145, 153], "human": [23, 54, 80, 96, 141, 158, 180, 187, 198], "mobil": [23, 63, 64, 105, 195, 202, 204, 205, 213, 215, 223, 225, 242, 243, 251, 267], "deploi": [23, 59, 115, 132, 139, 146, 172, 173], "cloud": [23, 39, 59, 99, 113, 115, 281], "inferenc": [23, 42], "azur": [23, 184], "servic": [23, 54, 173, 237, 268, 281], "inter": [24, 132, 137, 146, 162, 194, 232, 263], "workload": [24, 26, 105, 120, 131, 132, 135, 146, 147, 184, 191, 202, 211, 229, 232, 233, 236, 237, 267, 281], "fragment": [24, 263], "fork": [24, 175, 281], "fn": [24, 142, 149, 153, 156, 159, 188, 201, 226, 235, 273, 276], "fut": [24, 176, 178], "x_normal": 24, "x_parallel": 24, "async": [24, 176, 178, 191, 229, 263], "sort": [24, 28, 100, 106, 110, 120, 173, 194, 253, 263], "parlanc": 24, "revers": [24, 47, 54, 95, 135, 153, 162, 166, 173, 180, 191], "bidirectionalrecurrentlstm": 24, "cell_f": 24, "input_s": [24, 141, 198], "hidden_s": [24, 54, 141], "cell_b": 24, "output_f": 24, "x_rev": 24, "output_b": 24, "output_b_rev": 24, "lstmensembl": 24, "n_model": 24, "modulelist": [24, 166], "demo": [24, 28, 49, 132, 171, 184, 236], "took": [24, 95, 149, 155, 165, 179, 188, 198, 276], "future_f": 24, "stuff": 24, "worth": [24, 26, 57, 165, 168, 177], "profil": [24, 87, 123, 132, 133, 168, 179, 181, 211, 236, 248, 251, 259, 263, 267, 283], "chrome": [24, 95, 168, 179, 184, 253], "prof": [24, 179, 236, 253], "export_chrome_trac": [24, 179], "json": [24, 120, 168, 179, 184, 231, 253, 277], "navig": [24, 65, 184, 185, 244], "click": [24, 55, 102, 113, 115, 184, 185, 191, 244], "button": [24, 55, 57, 115, 184, 244], "timelin": [24, 165, 184, 244], "horizont": [24, 132, 267, 270, 283], "opportun": [24, 90, 115, 150, 191, 233], "breviti": [24, 26, 194, 207, 260], "intro": [24, 38, 39, 43, 60, 107, 108, 131, 150, 185, 227, 235, 283], "tracer": [24, 170], "member": [25, 72, 121, 215, 216], "portion": [25, 87, 165, 168, 170, 172, 198, 236, 244, 262], "custom_class": 25, "mystackclass": 25, "customclasshold": 25, "stack_": 25, "push": [25, 57, 80, 100, 105, 157, 200, 222], "pop": [25, 100, 217], "pop_back": 25, "intrusive_ptr": [25, 171, 248, 262], "make_intrus": [25, 171], "elem": [25, 260], "smart": [25, 190], "class_": 25, "my_class": 25, "contructor": 25, "yourclass": 25, "ref": 25, "unari": 25, "add_librari": [25, 26], "cmake_cxx_standard": 25, "custom_class_project": 25, "rh": 25, "devtoolset": 25, "torchbind_tutori": 25, "j": [25, 26, 35, 47, 80, 95, 104, 105, 106, 110, 135, 180, 198], "libcustom_class": 25, "hi": [25, 158, 212], "mom": 25, "scripted_foo": 25, "filesystem": [25, 98, 149, 199], "treatment": [25, 187, 209, 210], "cpp_inference_exampl": 25, "foobarbaz": 25, "tostr": 25, "add_subdirectori": [25, 26], "drill": [25, 95, 262], "75": [25, 26, 105, 128, 133, 141, 235], "momfoobarbaz": 25, "incred": 25, "make_custom_class": 25, "tocustomclass": 25, "iscustomclass": 25, "export_attr": 25, "runtimeerror": [25, 136, 141, 171, 173, 278], "__torch__": 25, "def_pickl": 25, "pushivalueimpl": 25, "pickler": 25, "__getstate__": 25, "__setstate__": 25, "pickl": [25, 42, 93, 113, 122, 165, 198, 248], "salient": 25, "wherea": [25, 113, 142, 185, 187, 200, 208, 209], "confus": [25, 26, 113, 140, 153, 187, 191, 200, 208, 209, 210], "manipulate_inst": 25, "trycustomop": 25, "bar": [25, 54, 87, 177, 187, 188, 219, 244], "relax": [25, 166, 278], "standalon": [25, 58, 196, 247, 275], "blend": [25, 26], "smoothli": [25, 26], "subsequ": [26, 80, 96, 105, 122, 133, 140, 150, 176, 178, 180, 188, 198, 200, 263, 266, 272, 281], "resort": 26, "emb": [26, 110, 112, 178], "opencv": [26, 48], "vision": [26, 27, 41, 48, 56, 96, 100, 123, 132, 159, 165, 215, 246, 278, 280, 283], "mat": 26, "warpperspect": 26, "warp_perspect": 26, "warp": 26, "image_mat": 26, "cv": [26, 27, 212], "col": 26, "cv_32fc1": 26, "warp_mat": 26, "output_mat": 26, "dsize": 26, "output_tensor": 26, "from_blob": 26, "ptr": 26, "short": [26, 28, 87, 100, 103, 106, 108, 111, 131, 141, 149, 166, 168, 174, 180, 182, 190, 263, 266, 283], "opencv2": 26, "hpp": [26, 171], "alongsid": [26, 153, 185, 187, 191, 247], "goodi": 26, "hardcod": [26, 143, 190], "strikingli": 26, "flat": [26, 135], "scope": [26, 100, 103, 109, 120, 138, 142, 190, 244, 268], "dealloc": [26, 184, 263], "invalid": [26, 208, 209, 210, 233, 248, 263], "quot": [26, 128], "metaprogram": 26, "experiment": [26, 133, 139, 154, 178, 195, 196, 198, 201, 214, 238, 261, 263], "target_compile_featur": 26, "cxx_std_14": 26, "opencv_cor": 26, "opencv_imgproc": 26, "libwarp_perspect": 26, "sensat": 26, "0x7f618fc6fa50": 26, "3218": 26, "4611": 26, "4636": 26, "3746": 26, "0978": 26, "5005": 26, "3245": 26, "0169": 26, "4458": 26, "1862": 26, "1692": 26, "noteworthi": [26, 236], "frozen": [26, 35, 47, 135, 158, 211, 220], "prim": 26, "revel": 26, "drop": [26, 55, 100, 102, 115, 145, 165, 178, 200, 236], "26": [26, 40, 104, 156, 158, 159, 173, 178, 235, 236], "restrict": [26, 28, 54, 90, 149, 184, 188, 190, 195, 222], "script_method": [26, 90], "42": [26, 80, 175, 178, 235, 248], "tensortobool": 26, "block0": 26, "block1": 26, "21": [26, 104, 120, 141, 173, 235, 236, 248, 253, 262], "sent": [26, 149, 168, 176, 190, 228], "wire": 26, "dlopen": 26, "example_app": 26, "cxx_range_for": 26, "throw": [26, 95, 103, 136, 176], "errorreport": 26, "mayb": [26, 109, 112, 151, 190, 215], "subdirectori": [26, 57, 193], "prefix": [26, 134, 138, 142, 150, 184, 188, 190, 198, 200, 248, 262, 281, 282], "inconveni": [26, 207], "altogeth": [26, 162, 209], "nb": [26, 104, 222], "impress": [26, 156, 190], "opencv_photo": 26, "happi": [26, 154, 155], "4125": 26, "8262": 26, "5345": 26, "6111": [26, 248], "3997": 26, "4683": 26, "5969": 26, "0850": 26, "0698": 26, "4597": 26, "0926": 26, "5727": 26, "9319": 26, "4834": 26, "1747": 26, "0162": 26, "9521": 26, "6269": 26, "lastli": [26, 93, 132, 165, 190], "driver": [26, 98, 184], "infrastructur": [26, 65], "vener": 26, "beforehand": [26, 162], "is_python_modul": 26, "extra_ldflag": 26, "lopencv_cor": 26, "lopencv_imgproc": 26, "approxim": [26, 54, 96, 134, 143, 155, 158, 162, 172, 175, 236, 250, 263], "0x7f3e0f840b10": 26, "op_sourc": 26, "cpp_sourc": [26, 248], "rout": [26, 142, 156, 190], "quirki": 26, "with_opt": 26, "no_python_abi_suffix": 26, "bottom": [26, 106, 184, 187, 190, 244], "suffix": [26, 44, 53, 87, 156], "tag": [26, 56, 100, 108, 112, 190, 199, 252, 261], "0x7ff51c5b7bd0": 26, "hao": 27, "chen": [27, 190], "unifi": [27, 132, 143, 231, 246, 278], "ssl": 27, "modular": [27, 37, 122, 188, 265], "fixmatch": 27, "defixmatch": 27, "speech": [27, 80, 100, 106, 108, 112, 132, 141, 263], "light": [27, 28, 57, 98, 102, 103, 143, 246], "vit": [27, 278], "strong": [27, 106, 190, 210, 278], "unlabel": [27, 103], "confid": [27, 57, 96, 98, 104, 107, 139, 174, 175, 185, 247], "threshold": [27, 54, 87, 139, 174, 178, 187, 236, 263], "statu": [27, 136, 139, 142, 178, 190, 277], "absorb": 27, "gaussian": [27, 57, 139, 174], "overcom": [27, 114], "quantiti": [27, 105, 132, 137, 157, 162, 167], "qualiti": [27, 158, 180], "trade": [27, 139, 165, 211], "afford": 27, "nlp": [27, 98, 100, 107, 110, 111, 112, 125, 132, 181, 212, 247, 263, 283], "audio": [27, 37, 48, 132, 152, 183, 186], "semilearn": 27, "get_dataset": 27, "get_data_load": 27, "weak": 27, "get_net_build": 27, "get_algorithm": 27, "get_config": 27, "hyper": [27, 179, 281], "87": [27, 120, 178, 211, 236, 248], "lb_imb_ratio": 27, "ulb_imb_ratio": 27, "microsoft": [27, 39, 117, 118, 184, 202], "kihyuk": 27, "sohn": 27, "yidong": 27, "jame": [28, 155], "reed": [28, 155], "jamesre": 28, "fb": 28, "michael": [28, 106, 226, 227, 235, 247, 274, 279], "suo": 28, "rev2": 28, "hierarchi": 28, "3x4": 28, "my_cel": 28, "redefin": 28, "mycel": 28, "succinctli": [28, 166], "mydecisiong": 28, "tape": 28, "rewind": 28, "tracedmodul": [28, 90], "ir": [28, 156, 233, 273], "commonli": [28, 45, 54, 74, 93, 100, 105, 121, 170, 173, 180, 184, 195, 233, 237, 254, 263, 268], "acquir": [28, 103, 122, 172, 174, 178], "traced_cel": 28, "laden": 28, "submodul": [28, 54, 90, 100, 114, 135, 166, 179, 216, 219], "branch": [28, 95, 114, 190, 193, 223, 237], "nowher": 28, "faithfulli": [28, 114, 207], "analysi": [28, 93, 95, 104, 132, 133, 155, 156, 179, 184, 187, 190, 196, 200, 244, 262, 278], "decis": [28, 95, 108, 111, 150, 168, 190, 207, 208, 210, 224, 263, 273, 279, 283], "inlin": [28, 57, 95, 98, 102, 104, 142, 154, 156, 207, 211, 215, 220, 268], "freestand": 28, "neurip": 28, "1hiicg6jrkbnr5hvk2": 28, "vnmi88vi9puzej": 28, "intro_to_torchscript_tutori": [28, 123, 220, 283], "audio_data_augmentation_tutori": [29, 31], "audio_datasets_tutori": 30, "audio_feature_extractions_tutori": 32, "audio_io_tutori": 33, "frac": [35, 47, 68, 90, 95, 106, 107, 109, 112, 121, 138, 144, 149, 174, 175, 194], "partial": [35, 47, 93, 95, 109, 122, 133, 134, 135, 137, 138, 142, 150, 157, 196, 233, 237, 264, 267], "leaf": [35, 47, 95, 188], "retain_graph": [35, 142], "surround": [35, 168], "mark": [35, 54, 137, 142, 159, 175, 176, 190, 209, 244], "acycl": [35, 47], "dag": 35, "chain": [35, 47, 95, 103, 107, 108, 135, 143, 156, 176, 209], "accumul": [35, 47, 51, 54, 57, 95, 98, 109, 144, 158, 165, 175, 176, 177, 178, 247, 266], "vec": [35, 47, 95, 211], "langl": 35, "x_1": [35, 109, 162], "x_n": [35, 57], "rangl": 35, "y_1": [35, 109], "y_m": 35, "ccc": [35, 47, 95], "y_": [35, 47, 95, 106], "x_": [35, 47, 95], "cdot": [35, 47, 57, 95, 112, 138], "vdot": [35, 47, 95], "ddot": [35, 47, 95], "v_1": 35, "v_m": 35, "life": [35, 105, 140, 141, 229], "autogradqs_tutori": [35, 38, 43, 82, 283], "compris": [36, 37, 57, 122], "fashionmnist": [36, 37, 39, 40, 41, 45, 104, 185], "mtia": [36, 41, 44, 67, 80, 103, 121, 128], "xpu": [36, 41, 44, 67, 80, 103, 121, 128, 237, 253], "neuralnetwork": [36, 40], "minibatch": [36, 37, 102, 113, 140, 151, 167, 170], "28x28": [36, 113, 185, 250], "784": [36, 102, 113, 151, 185], "nonlinear": 36, "phenomena": 36, "seq_modul": 36, "logit": [36, 40, 105, 236], "infti": [36, 175], "parameter": [36, 217], "preview": 36, "buildmodel_tutori": [36, 38, 43, 283], "messi": 37, "primit": [37, 41, 121, 132, 137, 157, 168, 191, 194, 198, 224], "fashion": [37, 54, 102, 104, 117, 134, 137, 139, 177, 182, 185, 187, 188, 191, 237], "zalando": 37, "60": [37, 40, 115, 134, 140, 141, 159, 173, 178, 180, 185, 190, 235, 236, 253], "internet": [37, 173], "target_transform": [37, 41, 45], "training_data": [37, 40, 110], "img_dir": 37, "csv": [37, 54, 56, 134], "annotations_fil": 37, "tshirt1": 37, "tshirt2": 37, "ankleboot999": 37, "decode_imag": 37, "img_label": 37, "tupl": [37, 44, 53, 56, 87, 98, 100, 103, 105, 110, 112, 115, 159, 175, 190, 193, 196, 210, 262, 280], "reshuffl": 37, "overfit": [37, 98, 113, 122, 141], "train_featur": 37, "train_label": 37, "shuffl": [37, 41, 56, 60, 80, 98, 104, 113, 133, 134, 149, 173, 177, 182, 184, 185, 196, 238], "data_tutori": [37, 38, 43, 283], "quickstart_tutori": [38, 41, 43, 283], "tensorqs_tutori": [38, 43, 44, 85, 283], "tensor_tutori": [38, 50, 52, 53, 283], "transforms_tutori": [38, 43, 45, 283], "autograd_tutori": [38, 47, 50, 52, 283], "optimization_tutori": [38, 40, 43, 283], "saveloadrun_tutori": [38, 42, 43, 283], "sphx_glr_beginner_basics_autogradqs_tutori": [38, 43, 283], "sphx_glr_beginner_basics_buildmodel_tutori": [38, 43, 283], "sphx_glr_beginner_basics_intro": [38, 43, 283], "sphx_glr_beginner_basics_saveloadrun_tutori": [38, 43, 283], "sphx_glr_beginner_basics_transforms_tutori": [38, 43, 283], "sphx_glr_beginner_basics_data_tutori": [38, 43, 283], "sphx_glr_beginner_basics_quickstart_tutori": [38, 43, 283], "sphx_glr_beginner_basics_tensorqs_tutori": [38, 43, 283], "sphx_glr_beginner_basics_optimization_tutori": [38, 43, 283], "suraj": [39, 58, 59, 60, 61, 120, 145, 146, 158], "subramanian": [39, 58, 59, 60, 61, 120, 145, 146, 158], "juarez": 39, "cassi": 39, "breviu": 39, "dmitri": 39, "soshnikov": 39, "ari": 39, "bornstein": 39, "belong": [39, 140, 191], "shirt": [39, 104, 185], "trouser": [39, 104, 185], "pullov": [39, 104, 185], "dress": [39, 104, 185], "coat": [39, 104, 185], "sandal": [39, 104, 185], "sneaker": [39, 104, 185], "ankl": [39, 104, 185], "boot": [39, 104, 173, 185], "favorit": [39, 99, 149, 155], "id": [39, 87, 99, 142, 147, 176, 177, 178, 187, 190, 191, 217, 229, 230, 235, 281], "walkthrough": [40, 47, 53, 87, 120], "3blue1brown": [40, 47], "test_data": 40, "train_dataload": 40, "test_dataload": 40, "flatten": [40, 51, 73, 80, 105, 113, 115, 121, 133, 137, 177, 190, 236], "linear_relu_stack": [40, 236], "4m": [40, 104], "5k": [40, 104], "364kb": 40, "229k": [40, 104], "38": [40, 104, 120, 178, 235, 236, 262], "686kb": 40, "950k": 40, "20mb": 40, "83m": 40, "02": [40, 57, 101, 123, 156, 178, 202, 236, 283], "65mb": 40, "0m": [40, 104, 141], "3mb": [40, 104, 182], "62": [40, 178, 217, 235], "3m": [40, 141], "1mb": 40, "85": [40, 104, 133, 141, 182, 236, 248, 253], "6mb": [40, 104], "5mb": [40, 80, 104], "29": [40, 104, 173, 178, 248], "329kb": 40, "42m": [40, 104], "361kb": 40, "06": [40, 104, 236], "682kb": 40, "885k": 40, "46mb": 40, "93m": [40, 104], "12mb": [40, 104], "08mb": 40, "15k": [40, 104], "2mb": [40, 104, 182], "unpredict": [40, 95, 147], "learning_r": [40, 51, 105, 141], "jump": [40, 80, 110, 114, 115, 117, 118, 158, 273], "untrain": 40, "dissimilar": [40, 103, 112], "regress": [40, 113, 182, 248, 261], "nllloss": [40, 107, 141], "classif": [40, 48, 57, 80, 93, 96, 98, 103, 104, 105, 107, 128, 132, 133, 141, 173, 182, 193, 194, 223, 266], "logsoftmax": [40, 141], "loss_fn": [40, 104, 147, 170, 176, 229, 230, 282], "deposit": [40, 47], "train_loop": 40, "test_loop": 40, "unnecessari": [40, 187, 190, 194, 228, 266, 281], "7f": 40, "5d": 40, "test_loss": [40, 133, 182], "argmax": [40, 110, 133, 177, 236, 238], "1f": [40, 185], "8f": 40, "296621": 40, "291897": 40, "6464": 40, "272190": 40, "12864": 40, "264961": 40, "19264": 40, "248135": 40, "25664": 40, "226567": 40, "32064": 40, "232967": 40, "38464": 40, "204684": 40, "44864": 40, "188445": 40, "51264": 40, "161490": 40, "57664": 40, "159089": 40, "163170": 40, "160961": 40, "105868": 40, "115964": 40, "072888": 40, "018862": 40, "041233": 40, "972116": 40, "958065": 40, "893826": 40, "897259": 40, "917226": 40, "902605": 40, "789834": 40, "818434": 40, "721259": 40, "676807": 40, "680673": 40, "596938": 40, "606740": 40, "496101": 40, "525201": 40, "581378": 40, "562731": 40, "413822": 40, "472466": 40, "363436": 40, "362819": 40, "361876": 40, "298833": 40, "330114": 40, "220070": 40, "256399": 40, "326450": 40, "323552": 40, "155730": 40, "249470": 40, "132278": 40, "162823": 40, "172819": 40, "118424": 40, "155949": 40, "064796": 40, "092438": 40, "155301": 40, "175473": 40, "987506": 40, "112815": 40, "990813": 40, "029144": 40, "057148": 40, "004626": 40, "041116": 40, "968319": 40, "987128": 40, "035218": 40, "079809": 40, "872887": 40, "022689": 40, "902333": 40, "934274": 40, "981178": 40, "930204": 40, "960094": 40, "902746": 40, "66": [40, 133, 235, 236, 248], "914882": 40, "946108": 40, "012616": 40, "790494": 40, "958763": 40, "843133": 40, "864163": 40, "927504": 40, "879987": 40, "900267": 40, "854875": 40, "862375": 40, "877150": 40, "961363": 40, "728669": 40, "910761": 40, "800762": 40, "810896": 40, "886659": 40, "844601": 40, "854986": 40, "817644": 40, "69": [40, 235, 248], "822302": 40, "822028": 40, "919700": 40, "680602": 40, "873091": 40, "768882": 40, "769723": 40, "853583": 40, "818413": 40, "819835": 40, "787434": 40, "70": [40, 56, 141, 159, 178, 217, 235, 248], "790434": 40, "warmstart": [40, 251, 259, 267, 283], "166": [40, 43, 179, 283], "torchtext": [41, 55, 98, 104, 132], "torchaudio": [41, 55, 98, 104, 132, 134, 173, 184, 200], "cifar": [41, 48, 98, 185], "coco": [41, 193], "conduct": [41, 96, 156, 171, 200], "unpickl": [42, 122, 198], "fail": [42, 95, 103, 114, 122, 156, 159, 168, 173, 175, 179, 188, 190, 198, 215, 216, 237, 247, 278], "inconsist": [42, 122, 156], "legaci": [42, 136], "checkpoint": [42, 54, 93, 135, 145, 165, 170, 199, 200, 237, 247, 251, 259, 265, 267, 283], "tip": [42, 57, 99, 112, 185, 251, 259, 267, 283], "182": 43, "ndarrai": [44, 45, 53, 56, 103, 187], "elimin": [44, 115, 120, 143, 151, 156, 157, 173, 190, 194, 212, 216, 233], "overridden": [44, 53, 150, 252], "1200": [44, 248], "breez": [44, 53], "subtli": [44, 53], "y1": [44, 193, 261], "y2": 44, "y3": 44, "wise": [44, 53, 80, 103, 107, 137, 149, 156, 159, 162, 190, 191, 263, 277], "z1": [44, 156], "z2": 44, "z3": 44, "aggreg": [44, 47, 98, 120, 158, 187, 208, 253], "operand": [44, 95, 190], "denot": [44, 107, 110, 191, 207, 208, 212], "t_": [44, 53], "problemat": [44, 53, 156, 166, 263], "hot": [45, 54, 80, 100, 112, 140, 141, 150, 180], "floattensor": [45, 103], "intens": [45, 90, 156, 168, 224, 281], "scatter_": [45, 176], "prop": 47, "proportion": [47, 165], "travers": [47, 178, 238], "height": [47, 51, 100, 103, 187, 193, 244, 278], "3a": [47, 173], "9a": 47, "2b": 47, "dq": 47, "bf": 47, "external_grad": 47, "finetun": [47, 132, 138, 165, 181, 283], "unfrozen": 47, "exclusionari": 47, "autodiff": [47, 132, 157], "pillow": [48, 98], "librosa": 48, "cython": 48, "nltk": 48, "spaci": 48, "viz": [48, 96], "huge": [48, 107, 112, 121, 137, 147, 150], "airplan": [48, 98, 105], "automobil": [48, 98, 105], "bird": [48, 98], "deer": [48, 98], "dog": [48, 98, 105, 193, 246], "frog": [48, 98], "hors": [48, 98], "truck": [48, 98, 105], "3x32x32": 48, "color": [48, 56, 57, 96, 98, 100, 102, 103, 139, 158, 159, 173, 185, 187, 193], "32x32": [48, 51, 98, 105, 115, 185], "extrem": [48, 112, 159, 191], "pilimag": 48, "brokenpipeerror": 48, "fun": [48, 54, 114, 115, 117, 118, 174], "entropi": [48, 57, 98, 100, 104, 137, 266], "learnt": 48, "truth": [48, 80, 115, 193, 215], "okai": 48, "wasn": [48, 106, 109, 190], "energi": [48, 54], "chanc": [48, 54, 105, 158], "hmmm": 48, "plai": [48, 54, 57, 105, 107, 132, 174, 181, 281, 283], "chat": [48, 54, 180], "cifar10_tutori": [48, 50, 52, 283], "sung": 49, "kim": 49, "jenni": 49, "kang": 49, "mytensor": 49, "my_tensor": [49, 122], "parallelli": 49, "getitem": 49, "cnn": [49, 105, 132, 162, 166, 167, 182, 187, 193, 237], "capsul": 49, "monitor": [49, 113, 149], "output_s": [49, 56, 141, 198], "former_torchi": 49, "parallelism_tutori": 49, "data_parallel_tutori": [49, 50, 52, 84, 283], "neural_networks_tutori": [50, 51, 52, 283], "gentl": [50, 52, 61, 62, 131, 283], "glimps": 51, "convnet": [51, 96, 150, 158, 177], "lenet": [51, 80, 98, 102, 104, 172, 238], "mini": [51, 54, 57, 102, 110, 113, 167, 173, 185, 238], "nsampl": 51, "nchannel": 51, "least": [51, 80, 103, 122, 139, 141, 147, 158, 168, 173, 180, 190, 230, 233, 248, 282], "clear": [51, 56, 80, 95, 106, 107, 112, 138, 142, 156, 168, 178, 187, 201, 209, 235, 248], "sub_": 51, "nesterov": [51, 122], "blitz": [52, 84, 115, 140, 141, 180, 185, 283], "matthew": [54, 92, 122], "inkawhich": [54, 57, 80, 90, 92, 122], "movi": [54, 55, 96], "cornel": [54, 55], "dialog": [54, 55], "corpu": [54, 55], "artifici": [54, 105, 250], "intellig": 54, "onlin": [54, 150, 158, 174, 177], "helpdesk": 54, "bot": 54, "predefin": [54, 105, 113, 150, 238, 263], "compani": 54, "IT": 54, "teach": [54, 57, 105, 180], "boom": 54, "hello": [54, 107, 165], "am": [54, 109, 141, 180], "hospit": 54, "lawyer": 54, "friend": [54, 165], "arrest": 54, "kid": 54, "sorri": 54, "san": 54, "francisco": [54, 113], "goodby": 54, "luong": [54, 180], "jointli": [54, 180], "acknowledg": [54, 149], "borrow": [54, 178], "yuan": 54, "kuei": 54, "wu": [54, 136, 196, 201, 211], "ywk991112": 54, "sean": [54, 140, 141, 180], "robertson": [54, 140, 141, 180], "spro": 54, "floydhub": 54, "textutil": 54, "__": [54, 67, 80, 105, 121, 128, 187, 191], "reformat": 54, "rich": [54, 244], "charact": [54, 112, 132, 145, 163, 174, 180, 181, 283], "220": [54, 178], "579": [54, 159], "exchang": [54, 115, 117, 134, 149, 180, 184], "292": [54, 93], "035": 54, "617": 54, "713": [54, 98], "utter": [54, 55], "divers": 54, "variat": [54, 104, 113, 144, 194, 207, 220, 248, 262], "formal": [54, 207, 230], "sentiment": 54, "datafil": 54, "tab": [54, 102, 104, 180, 185, 244], "sentenc": [54, 100, 106, 107, 110, 112, 141, 149, 180, 194, 212], "jsonl": [54, 55], "loadlinesandconvers": 54, "lineid": 54, "characterid": 54, "conversationid": 54, "movieid": 54, "extractsentencepair": 54, "formatted_movie_lin": 54, "unescap": 54, "delimit": 54, "busi": [54, 141, 281], "vocabulari": [54, 98, 100, 112, 137, 140, 212, 263], "implicit": [54, 95, 135, 190, 244, 263], "discret": [54, 237], "voc": 54, "addword": 54, "addsent": 54, "infrequ": 54, "unicod": [54, 140, 141, 180], "ascii": [54, 112, 140, 141, 180], "unicodetoascii": [54, 141], "letter": [54, 140, 141, 180], "lowercas": [54, 113, 180], "punctuat": [54, 180], "normalizestr": 54, "aid": [54, 122, 191, 252], "max_length": [54, 141, 217], "filterpair": 54, "stackoverflow": [54, 140, 141, 180, 248], "518232": [54, 140, 141, 180], "2809427": [54, 140, 141, 180], "tactic": 54, "benefici": [54, 100, 131, 175, 211, 216, 263, 266, 281], "soften": 54, "difficulti": [54, 174], "min_count": 54, "massag": 54, "accommod": 54, "shorter": [54, 56, 113, 180, 184, 207], "eos_token": 54, "english": [54, 107, 110, 140, 141, 163, 180], "indexesfromsent": 54, "zeropad": 54, "inputvar": 54, "outputvar": 54, "pad_token": 54, "batch2traindata": 54, "bunch": [54, 140, 141, 244, 277], "aforement": [54, 87, 105, 194, 238, 273], "brain": 54, "sutskev": 54, "discov": [54, 118, 149, 177, 194, 216], "accomplish": [54, 57, 140, 149, 162, 219, 232, 248, 262], "jeddy92": 54, "io": [54, 56, 102, 132, 141, 176, 179, 187, 215, 267], "ts_seq2seq_intro": 54, "invent": [54, 57, 174], "cho": 54, "2014": [54, 57], "bidirect": [54, 150], "gru": [54, 100, 140, 141, 180], "colah": 54, "2015": [54, 105], "fp": [54, 93, 132, 162], "unpack": [54, 223], "pack_padded_sequ": 54, "pad_packed_sequ": 54, "input_seq": 54, "input_length": [54, 134], "n_layer": [54, 170], "num_direct": 54, "sole": [54, 184], "combat": [54, 112], "bahdanau": [54, 180], "groundwork": 54, "h_t": [54, 110], "attn": [54, 180], "softmax": [54, 100, 105, 110, 112, 113, 140, 141, 173, 176, 178, 185, 194, 212, 236, 280], "unidirect": 54, "input_step": 54, "last_hidden": 54, "encoder_output": 54, "num_word": 54, "masknllloss": 54, "clever": [54, 107], "teacher": [54, 105, 132, 180], "teacher_forcing_ratio": [54, 180], "instabl": [54, 180], "craft": [54, 80, 112, 141], "explod": [54, 100], "essenc": [54, 109], "nan": [54, 208, 235], "overshoot": 54, "steep": 54, "cliff": 54, "goodfellow": [54, 57, 80], "2016": 54, "www": [54, 180, 193], "deeplearningbook": 54, "sos_token": 54, "realiti": [54, 57, 80, 109, 113, 179, 262], "tie": 54, "trainit": [54, 180], "n_iter": [54, 141], "explanatori": 54, "lift": [54, 222], "tarbal": 54, "NOT": [54, 90, 122, 142, 144, 145, 147, 165], "decoder_output": 54, "greedysearchdecod": 54, "searcher": 54, "evaluateinput": 54, "press": [54, 57], "gracefulli": [54, 58, 177, 230], "prompt": [54, 55, 200, 278], "regardless": [54, 103, 104, 157, 168, 177], "attn_model": 54, "concat": [54, 109], "loadfilenam": 54, "save_dir": [54, 187], "model_nam": [54, 134, 214, 217, 237], "corpus_nam": [54, 55], "encoder_n_lay": 54, "decoder_n_lay": 54, "_checkpoint": [54, 134], "tar": [54, 122], "checkpoint_it": 54, "folk": 54, "congratul": [54, 118, 138, 140, 191, 250, 264, 265, 266], "tailor": [54, 149, 168, 191, 281], "cool": [54, 57, 165, 167, 222], "003": [54, 57, 98, 101, 105, 107, 109, 111, 123, 168, 179, 181, 188, 190, 191, 200, 218, 283], "chatbot_tutori": [54, 123, 283], "wen": [55, 188, 190, 276], "uninstal": 55, "reinstal": 55, "torchdata": 55, "chatbot": [55, 123, 283], "browser": [55, 102, 104, 115, 184, 231], "subfold": 55, "visit": [55, 200, 238], "in_": 55, "_colab": 55, "_name": 55, "mount": [55, 198], "gdrive": 55, "upload": [55, 231], "rerun": [55, 142, 165], "evolv": [55, 156, 162], "t4": 55, "sasank": [56, 128], "chilamkurthi": [56, 128], "scikit": 56, "pd": [56, 187], "skimag": 56, "ion": [56, 182], "exitstack": [56, 182], "0x7f023ab780d0": 56, "facial": 56, "pose": [56, 231, 232], "landmark": 56, "dlib": 56, "image_nam": 56, "part_0_x": 56, "part_0_i": 56, "part_1_x": 56, "part_1_i": 56, "part_2_x": 56, "part_67_x": 56, "part_67_i": 56, "0805personali01": 56, "83": [56, 236, 262], "98": [56, 156, 178, 182, 236], "84": [56, 104, 115, 120, 122, 158, 185], "134": 56, "1084239450_e76e00b7e7": 56, "236": 56, "257": [56, 248], "312": [56, 159, 278], "person": [56, 191, 193], "img_nam": 56, "landmarks_fram": 56, "read_csv": 56, "face_landmark": 56, "iloc": 56, "asarrai": 56, "33": [56, 173, 178, 235, 236, 248], "34": [56, 120, 173, 236, 248, 253, 262], "97": [56, 156, 178, 182, 236], "show_landmark": 56, "scatter": [56, 133, 135, 147, 149, 187], "marker": [56, 141, 190], "paus": [56, 176], "imread": 56, "__len__": [56, 113, 140, 149, 193], "__getitem__": [56, 113, 140, 149, 193], "facelandmarksdataset": 56, "csv_file": 56, "root_dir": 56, "is_tensor": 56, "tolist": [56, 190, 217], "face_dataset": 56, "fig": [56, 185], "tight_layout": [56, 80], "set_titl": [56, 182, 185], "324": [56, 159], "215": [56, 187], "333": [56, 159], "250": [56, 159, 178, 253], "258": [56, 159], "434": 56, "290": [56, 178], "randomcrop": 56, "crop": [56, 98, 139, 182, 193], "tsfm": 56, "transformed_sampl": 56, "edg": [56, 100, 115, 121, 132, 155, 184, 195, 250, 278], "new_w": 56, "randint": [56, 57, 135, 141, 159, 170, 237], "from_numpi": [56, 176, 178], "safer": [56, 248], "stick": [56, 149, 159], "tsfrm": 56, "transformed_dataset": 56, "lose": [56, 58, 103, 105, 158], "collate_fn": 56, "show_landmarks_batch": 56, "sample_batch": 56, "images_batch": 56, "landmarks_batch": 56, "im_siz": 56, "grid_border_s": 56, "make_grid": [56, 104, 182, 185], "titl": [56, 80, 140, 168, 180, 187], "indent": [56, 159, 248], "i_batch": 56, "4th": [56, 170, 224], "ioff": [56, 182], "imagefold": [56, 57, 98], "ant": [56, 128], "xxy": 56, "jpeg": 56, "xxz": 56, "bee": [56, 128], "nsdf3": 56, "asd932_": 56, "data_transform": 56, "hymenoptera_dataset": 56, "hymenoptera_data": 56, "dataset_load": 56, "928": [56, 123, 283], "data_loading_tutori": [56, 123, 283], "nathan": [57, 80, 90, 92], "celebr": [57, 132], "pictur": [57, 80, 135, 137, 180], "thorough": 57, "shed": [57, 246], "spend": [57, 87, 165, 248, 253], "sake": [57, 150, 172, 175, 264, 265], "ian": 57, "constantli": [57, 80, 175], "outsmart": 57, "equilibrium": 57, "perfect": [57, 95, 147, 209], "notat": [57, 80], "chw": [57, 173], "3x64x64": 57, "thought": [57, 88, 208, 262], "latent": [57, 112], "p_": 57, "p_g": 57, "minimax": 57, "logd": 57, "underset": 57, "mathbb": [57, 90, 162, 175], "sim": 57, "radford": 57, "unsupervis": 57, "drawn": [57, 113, 174], "rgb": [57, 98, 105, 158, 173, 187], "volum": [57, 133], "manualse": 57, "10000": [57, 80, 98, 104, 141, 170, 178, 182, 248, 262], "dataroot": 57, "image_s": [57, 278], "spatial": [57, 96, 98, 100, 132, 181, 193, 283], "64x64": 57, "nc": [57, 211], "nz": 57, "ngf": 57, "ndf": 57, "num_epoch": 57, "0002": 57, "ngpu": 57, "celeb": 57, "img_align_celeba": 57, "celeba": 57, "188242": 57, "173822": 57, "284702": 57, "537394": 57, "stdev": 57, "weights_init": 57, "reiniti": 57, "criteria": 57, "netg": 57, "netd": 57, "critic": [57, 90, 135, 146, 168, 196, 229, 233, 262], "downsampl": [57, 98, 158], "promot": 57, "healthi": 57, "bceloss": 57, "ell": [57, 180], "l_1": 57, "l_n": 57, "quad": [57, 175], "y_n": 57, "bce": 57, "gt": [57, 120], "fixed_nois": 57, "establish": 57, "Be": [57, 95], "somewhat": [57, 168], "collaps": 57, "ganhack": 57, "secondli": 57, "loss_d": 57, "loss_g": 57, "versu": [57, 80, 132, 140, 224], "anim": [57, 98], "music": 57, "dcgan_faces_tutori": [57, 123, 283], "mingpt": [58, 59, 60, 61, 145, 146], "aw": [58, 60, 133, 145, 146, 267], "p3": [58, 59, 60, 68, 121, 145, 146], "8xlarg": [58, 60], "youtub": [58, 59, 60, 61, 95, 96, 98, 100, 102, 103, 104, 132, 145, 146], "failur": [58, 114, 146, 147, 156, 190, 198, 227, 278], "disrupt": [58, 198, 276], "suscept": [58, 232], "elast": [58, 134, 147, 232], "attempt": [58, 95, 103, 107, 134, 168, 190, 198, 224, 252, 276], "minutia": 58, "multinod": [58, 145, 191], "load_snapshot": 58, "snapshot_path": 58, "train_step": 58, "should_checkpoint": 58, "save_snapshot": 58, "membership": [58, 146], "intervent": [58, 105, 273], "diff": [58, 60, 87, 132, 248, 262], "multigpu": [58, 60, 146], "multigpu_torchrun": 58, "envvari": 58, "ddp_setup": [58, 60], "12355": [58, 60, 133, 147, 229, 230], "local_rank": [58, 134, 146, 147, 170, 198], "gpu_id": [58, 60, 146], "_save_snapshot": 58, "model_st": 58, "epochs_run": 58, "_load_snapshot": 58, "max_epoch": 58, "_run_epoch": [58, 60], "total_epoch": [58, 60], "save_everi": [58, 60], "nproc_per_nod": [58, 134, 135, 147, 170, 198, 232], "migrat": [58, 60, 263], "fault": [59, 60, 61, 93, 145, 146, 168], "toler": [59, 60, 61, 93, 95, 145, 146], "cluster": [59, 102, 134, 139, 145, 146, 147, 149, 230, 232, 272], "torchrun": [59, 65, 134, 135, 145, 146, 170, 196, 198, 232], "amazon": 59, "ec2": [59, 133], "gentli": 59, "gpt": [59, 133, 145, 146, 170], "stat": [60, 134, 142, 174, 184, 191, 253, 262], "replica": [60, 61, 65, 133, 135, 147, 149, 282], "convert_sync_batchnorm": 60, "single_gpu": 60, "mytraindataset": 60, "distributedsampl": [60, 61, 133, 134], "destroy_process_group": [60, 133, 134, 136, 147, 170, 196, 229, 230], "excess": [60, 87, 137, 188, 237, 247], "train_data": 60, "train_dataset": [60, 105, 134, 217, 237, 271], "set_epoch": [60, 133, 134], "b_sz": 60, "_run_batch": 60, "ckp": 60, "_save_checkpoint": 60, "load_train_obj": 60, "prepare_dataload": 60, "shorthand": 60, "ring": [61, 137, 196], "older": [61, 120, 121, 151, 167, 168, 175, 200], "destroi": [61, 95, 153], "soumith": [62, 149], "chintala": [62, 149], "scientif": [62, 100, 103, 121], "cifar10": [62, 93, 98, 184, 237, 266, 271], "executorch": [63, 64, 132, 204, 205, 213, 221, 223, 225, 240, 241, 242, 243, 245, 278], "Will": [65, 135], "constabl": [65, 135], "categor": [65, 87, 102, 150, 176, 178, 191], "fsdp": [65, 135, 137, 145, 229, 230, 232], "tp": [65, 198, 232], "pp": 65, "dtensor": [65, 137, 231, 267], "devicemesh": [65, 137, 267], "reshard": [65, 135, 230], "mesh": [65, 131, 135, 137, 232], "recip": [65, 120, 132, 206, 223, 226, 228, 231, 233, 235, 244, 246, 247, 248, 249, 250, 252, 253, 259, 260, 264, 265, 266, 268, 270, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283], "c10d": [65, 147, 171, 198, 263], "all_gath": [65, 133, 134, 149, 171], "p2p": 65, "isend": [65, 149], "guidelin": [65, 263], "fullyshardeddataparallel": [65, 133, 134, 135, 137, 229, 230, 232], "torchtitan": [65, 170, 196], "polynomi": [67, 68, 70, 72, 73, 74, 77, 78, 121], "pi": [67, 68, 72, 73, 74, 77, 78, 95, 132, 175, 235], "euclidean": [67, 68, 72, 73, 74, 77, 78, 95, 105, 121], "polynomial_autograd": [67, 69, 283], "bx": [68, 121, 235], "cx": [68, 107, 121], "p_3": [68, 121], "5x": [68, 121], "legendr": [68, 121], "polynomial_custom_funct": [68, 69, 283], "examples_autograd": [69, 283], "strang": [70, 90, 121], "fifth": [70, 121], "tough": [70, 121], "dynamic_net": [70, 75, 283], "polynomial_modul": [72, 75, 283], "2000": [73, 98, 104, 105, 121, 185, 187, 190, 198, 248, 282], "flaten": [73, 121], "mse": [73, 100, 105, 121], "polynomial_nn": [73, 75, 283], "polynomial_optim": [74, 75, 283], "examples_nn": [75, 283], "polynomial_numpi": [77, 79, 283], "biggest": [78, 198], "polynomial_tensor": [78, 79, 283], "004": 79, "examples_tensor": [79, 283], "appreci": [80, 106], "overlook": [80, 248], "secur": [80, 184], "vulner": 80, "surpris": [80, 166], "impercept": 80, "perturb": [80, 96], "drastic": [80, 190, 277], "overarch": 80, "misclassif": 80, "alter": [80, 122, 200, 254, 265], "har": 80, "remark": [80, 188], "mathbf": 80, "nabla_": [80, 107], "007": 80, "misclassifi": 80, "gibbon": 80, "clearli": [80, 139, 198, 207, 208], "pretrained_model": [80, 187], "lenet_mnist_model": [80, 238], "0x7f02eed61070": 80, "dropout1": [80, 133, 177], "dropout2": [80, 133, 177], "fc1": [80, 104, 115, 122, 133, 151, 177, 182, 185, 238], "9216": [80, 133, 177], "fc2": [80, 104, 115, 122, 133, 177, 182, 185, 238], "log_softmax": [80, 100, 113, 133, 177, 182, 238], "test_load": [80, 105, 133, 177, 182, 238], "1307": [80, 133, 149, 177, 182, 238], "3081": [80, 133, 149, 177, 182, 238], "current_acceler": 80, "map_loc": [80, 122, 135, 147, 187, 247, 252], "91m": [80, 182], "136mb": 80, "9k": [80, 182], "7mb": 80, "65m": [80, 182, 200], "291mb": 80, "54k": [80, 182], "in_featur": [80, 133, 195, 211, 217, 219, 254], "out_featur": [80, 133, 195, 211, 217], "fgsm_attack": 80, "clean": [80, 133, 134, 140, 147, 165, 170, 191, 196, 207], "data_grad": 80, "_imag": 80, "_grad": 80, "sign_data_grad": 80, "perturbed_imag": 80, "clamp": [80, 223], "denorm": 80, "strength": [80, 185], "_data": 80, "adv_exampl": 80, "init_pr": 80, "bother": 80, "datagrad": 80, "data_denorm": 80, "perturbed_data": 80, "reappli": [80, 276], "perturbed_data_norm": 80, "final_pr": 80, "adv_ex": 80, "adv": 80, "final_acc": 80, "ttest": 80, "ep": [80, 143, 178, 190, 195, 207, 217, 235, 278], "ex": [80, 202, 217, 244], "9912": 80, "9605": 80, "8743": 80, "7108": 80, "4874": 80, "2710": 80, "271": 80, "1420": 80, "trend": [80, 88, 184], "curv": [80, 184, 185], "linearli": 80, "figsiz": [80, 185], "ytick": [80, 185], "arang": [80, 185, 235, 261], "xtick": [80, 185], "xlabel": [80, 187], "ylabel": [80, 187], "lunch": 80, "BUT": [80, 109], "percept": 80, "tradeoff": [80, 132, 138, 139, 149, 174, 268], "evid": [80, 136], "fontsiz": 80, "orig": [80, 154], "defend": 80, "nip": 80, "defens": 80, "competit": [80, 151, 167, 281], "defenc": 80, "dirti": 80, "989": [80, 123, 283], "fgsm_tutori": [80, 123, 283], "torchvision_tutori": [81, 181, 193, 283], "nn_tutori": [83, 113, 123, 283], "anupam": [87, 88], "bhatnagar": [87, 88], "holistictraceanalysi": 87, "env_nam": [87, 174], "deactiv": 87, "trace_dir": 87, "trace_analysi": 87, "traceanalysi": 87, "engag": [87, 215], "datafram": [87, 139, 187], "time_spent_df": 87, "get_temporal_breakdown": 87, "enqueu": 87, "slowdown": [87, 134, 138], "consecut": [87, 141, 150, 158, 168, 173, 187, 281], "insuffici": [87, 175], "delai": [87, 147, 176, 191], "stall": [87, 198, 281], "gap": [87, 90], "nanosecond": 87, "consecutive_kernel_delai": 87, "get_idle_time_breakdown": 87, "idle_time_df": 87, "show_idle_interval_stat": 87, "percentag": [87, 172, 212], "visualize_pctg": 87, "comm": 87, "comp": 87, "proport": [87, 165], "pie": [87, 165], "chart": [87, 102, 275], "kernel_type_metrics_df": 87, "kernel_metrics_df": 87, "get_gpu_kernel_breakdown": 87, "bottleneck": [87, 120, 134, 137, 146, 165, 168, 176, 184, 188, 226, 244], "plotli": [87, 96, 139], "hover": [87, 139, 173], "pan": 87, "num_kernel": [87, 235], "duration_ratio": 87, "preced": [87, 95, 103, 143, 150, 154, 214], "lab": [87, 185], "image_render": 87, "jupyterlab": 87, "gpu_kernel_breakdown": 87, "tflop": 87, "oversubscrib": 87, "unresolv": [87, 209], "extent": [87, 103], "overlap_df": 87, "get_comm_comp_overlap": 87, "h2d": [87, 228], "d2h": [87, 228], "d2d": 87, "memcpi": 87, "memset": 87, "outstand": 87, "generate_trace_with_count": 87, "_with_count": 87, "screenshot": [87, 244], "get_memory_bw_summari": 87, "get_queue_length_summari": 87, "get_memory_bw_time_seri": 87, "get_queue_length_time_seri": 87, "mem_bw_summari": 87, "queue_len_summari": 87, "mem_bw_seri": 87, "queue_len_seri": 87, "get_queue_length_seri": 87, "25th": 87, "50th": 87, "75th": 87, "percentil": 87, "cudalaunchkernel": 87, "cudamemcpyasync": 87, "cudamemsetasync": 87, "kernel_info_df": 87, "get_cuda_kernel_launch_stat": 87, "outlier": [87, 175], "microsecond": [87, 157, 179, 248], "cutoff": 87, "runtime_cutoff": 87, "launch_delay_cutoff": 87, "occasion": [88, 177, 180], "hta": [88, 184], "tracediff": 88, "cumul": [88, 175], "compare_trac": 88, "ops_diff": 88, "absent": 88, "visualize_counts_diff": 88, "visualize_duration_diff": 88, "ten": [88, 98, 102, 105], "df": 88, "compare_traces_output": 88, "sort_valu": 88, "diff_count": 88, "largest": [88, 113, 187], "diff_dur": 88, "differer": 88, "overshadow": 88, "profilerstep": [88, 156], "loc": [88, 174, 247], "trace_diff_demo": 88, "learning_hybrid_frontend_through_example_tutori": [89, 90, 91, 283], "hybrid_frontend": [89, 91, 283], "introduction_to_hybrid_frontend_tutori": 89, "shini": 90, "enjoi": [90, 158], "aquaint": 90, "bridg": [90, 231], "refin": [90, 190], "gradual": [90, 165], "proven": [90, 210], "resouc": 90, "consumpt": [90, 98, 100, 102, 104, 120, 134, 137, 139, 156, 168, 172, 184, 263, 267, 282], "discrep": [90, 214], "interwork": 90, "intrus": [90, 165], "decor": [90, 95, 118, 131, 142, 158, 176, 188, 263, 276], "broken": [90, 109], "epsilon": [90, 143, 150, 174, 175], "biggl": 90, "lfloor": 90, "prod_": 90, "biggr": 90, "rfloor": 90, "hline": 90, "190": [90, 178, 187, 248], "4377": 90, "59051": 90, "accomod": [90, 145], "dramat": [93, 113], "industri": [93, 96], "slight": [93, 136, 144, 236, 249], "trial": [93, 139, 247], "train_cifar": 93, "data_dir": [93, 134], "l2": [93, 100, 172], "get_checkpoint": 93, "as_directori": 93, "checkpoint_dir": [93, 229, 230], "pkl": 93, "rb": 93, "checkpoint_st": 93, "start_epoch": 93, "net_state_dict": 93, "optimizer_state_dict": [93, 122, 229, 230, 237], "80": [93, 139, 140, 141, 159, 178, 235, 278], "luckili": [93, 156, 190, 191, 209, 248], "trainload": [93, 185], "fraction": [93, 248], "checkpoint_data": 93, "tempfil": [93, 147, 235], "temporarydirectori": 93, "wb": 93, "dump": [93, 156, 224, 231], "from_directori": 93, "val_loss": [93, 134], "val_step": 93, "wast": [93, 184, 212, 215, 219, 248, 252, 254, 268], "loguniform": [93, 248], "ashaschedul": 93, "functool": [93, 133, 134], "gpus_per_tri": 93, "resources_per_tri": 93, "num_sampl": [93, 134], "checkpoint_at_end": 93, "000668163": 93, "31479": 93, "0977": 93, "0331514": 93, "31605": 93, "0983": 93, "000150295": 93, "30755": 93, "1023": 93, "0128248": 93, "66912": 93, "4391": 93, "00464561": 93, "7316": 93, "3463": 93, "00031556": 93, "19409": 93, "1736": 93, "00574329": 93, "85679": 93, "3368": 93, "00325652": 93, "30272": 93, "0984": 93, "000342987": 93, "76044": 93, "003734": 93, "53101": 93, "4761": 93, "0037339984519545164": 93, "5310075663924216": 93, "4737": 93, "hyperparameter_tuning_tutori": [93, 123, 283], "tensorboard": [95, 96, 97, 98, 99, 100, 103, 104, 132, 139, 181, 251, 253, 259, 267, 283], "rigidli": 95, "sign": [95, 166], "contextu": 95, "nudg": [95, 98, 104], "calculu": 95, "linspac": 95, "next_funct": 95, "machineri": [95, 248], "co": [95, 112, 202, 253, 263], "ins": [95, 188], "ideal_output": 95, "layer2": 95, "blow": 95, "b1": 95, "b2": 95, "temporarili": 95, "enable_grad": 95, "sin_": 95, "handi": [95, 98, 113, 149, 158, 185], "bake": [95, 154], "hessian": [95, 132, 181, 222, 283], "twice": [95, 113, 144, 168, 200, 236, 248, 253, 282], "jvp": [95, 153, 157], "vjp": [95, 157, 162, 222], "vhp": [95, 132, 181, 283], "hvp": [95, 132, 181, 283], "autogradyt_tutori": [95, 97, 101, 283], "latin": 96, "increasingli": [96, 194], "ai": [96, 107, 108, 113, 133, 139, 158, 180, 198, 211, 224, 230, 237, 246, 263], "review": [96, 145, 163, 190, 207, 208, 210, 216, 223, 237, 268], "neuron": [96, 105, 246], "analag": 96, "ablat": 96, "permut": [96, 105, 159, 173, 187, 235], "valuabl": [96, 105, 180, 212, 235], "certainli": [96, 155, 208, 210], "attr": [96, 159, 171, 224], "widget": 96, "toolset": 96, "flask": 96, "renam": [96, 195], "virtual": [96, 168, 171, 202, 252], "recogn": [96, 100, 171, 250], "visualize_image_attr": 96, "integrated_gradi": 96, "strongest": [96, 98, 100, 104], "visualize_image_attr_multipl": 96, "heat": [96, 173], "upsampl": 96, "interpol": 96, "layerattribut": 96, "teapot": 96, "trilobit": 96, "fossil": 96, "attributionvisu": 96, "imagefeatur": 96, "heatmap": 96, "captumyt": [96, 101, 283], "introyt": [97, 101, 283], "introyt1_tutori": [97, 98, 101, 283], "tensors_deeper_tutori": [97, 101, 103, 283], "modelsyt_tutori": [97, 100, 101, 283], "tensorboardyt_tutori": [97, 101, 102, 283], "trainingyt_tutori": 97, "captumyt_tutori": 97, "captum": [97, 251, 259, 267, 283], "sphx_glr_beginner_introyt_introyt_index": [97, 101, 283], "sphx_glr_beginner_introyt_modelsyt_tutori": [97, 101, 283], "sphx_glr_beginner_introyt_autogradyt_tutori": [97, 101, 283], "sphx_glr_beginner_introyt_tensors_deeper_tutori": [97, 101, 283], "sphx_glr_beginner_introyt_captumyt": [97, 101, 283], "sphx_glr_beginner_introyt_introyt1_tutori": [97, 101, 283], "sphx_glr_beginner_introyt_tensorboardyt_tutori": [97, 101, 283], "sphx_glr_beginner_introyt_trainingyt": [97, 101, 283], "5x3": 98, "helpfulli": 98, "prng": 98, "r3": 98, "r1": 98, "r2": 98, "trigonometr": [98, 103], "singular": [98, 166, 179, 277], "decomposit": [98, 115, 118, 135, 156], "diagram": [98, 175], "earliest": 98, "explos": 98, "handwritten": [98, 133], "abridg": 98, "c1": [98, 156], "s2": [98, 190], "c3": 98, "s4": [98, 190], "f5": 98, "f6": 98, "artifact": [98, 145, 190, 272, 273, 277], "gist": 98, "tile": [98, 102, 104, 187, 217, 224], "hasn": 98, "shouldn": [98, 172], "center": [98, 100, 104, 175, 184, 263], "concatdataset": 98, "trainset": [98, 185], "50000": [98, 141], "4914": 98, "4822": 98, "4465": 98, "2470": 98, "2435": 98, "2616": 98, "rotat": [98, 102, 182, 185], "vehicl": [98, 178], "told": [98, 174], "strip": [98, 141, 217, 262], "ingredi": 98, "inner": [98, 168, 174], "235": [98, 120], "940": 98, "6000": [98, 104], "8000": [98, 104, 262], "573": 98, "507": 98, "12000": [98, 104], "442": 98, "378": 98, "364": [98, 159, 181, 283], "319": [98, 236, 253], "284": [98, 178], "267": 98, "monoton": 98, "descend": 98, "memor": 98, "roughli": [98, 106, 121, 134, 147, 156, 263], "brad": 99, "heintz": 99, "introyt_index": [99, 101, 283], "lin": 100, "nearbi": 100, "lenet5": 100, "1x32x32": 100, "liken": 100, "5x5": 100, "3x5": 100, "presenc": [100, 188, 190, 246], "6x28x28": 100, "2x2": 100, "6x14x14": 100, "sought": 100, "3x3": 100, "16x12x12": 100, "16x6x6": 100, "576": 100, "instrument": [100, 155, 267], "dna": 100, "nucleotid": 100, "moder": 100, "beyond": [100, 103, 109, 171, 172, 263], "tagger": [100, 106], "noun": 100, "verb": 100, "vocab_s": [100, 135, 170, 237], "tagset_s": 100, "decod": [100, 106, 134, 170, 178, 179, 194, 200, 247, 278], "transformerencod": [100, 194], "transformerdecod": [100, 194], "subcompon": [100, 188], "transformerencoderlay": [100, 179, 194], "transformerdecoderlay": [100, 170, 194], "twin": 100, "maxpool": 100, "quadrant": 100, "6x6": 100, "vanish": [100, 107], "offset": [100, 191, 199, 217, 229], "neighborhood": 100, "sometim": [100, 103, 121, 138, 144, 146, 147, 150, 157, 175, 178, 180, 190, 200, 209, 210, 263], "suffer": [100, 184, 233], "steepest": 100, "feasibl": [100, 133, 135], "hardtanh": 100, "58": [101, 104, 140, 159, 217, 235, 238, 283], "708": 101, "trainingyt": [101, 104, 283], "696": [101, 104, 283], "garment": 102, "tb": [102, 278], "gfile": 102, "tensorflow_stub": 102, "add_imag": [102, 185], "summarywrit": [102, 104, 185, 261], "flush": [102, 104, 247, 261], "log_dir": [102, 139, 185], "logdir": [102, 184, 185, 261], "6006": [102, 184, 185, 261], "efficaci": 102, "add_graph": [102, 185], "add_embed": [102, 185], "projector": 102, "toggl": [102, 199, 282], "night": [102, 185], "icon": 102, "dark": [102, 187], "upack": 103, "attach": [103, 175, 281], "terminologi": [103, 109], "likewis": [103, 165], "fctori": 103, "assur": [103, 168], "random1": 103, "random3": 103, "random2": 103, "random4": 103, "rng": [103, 149], "_like": [103, 159], "rand_lik": 103, "int16": 103, "cue": 103, "intent": [103, 208, 230], "subtract": [103, 105, 263], "2x4": 103, "1x4": 103, "honor": 103, "3rd": [103, 135, 142, 224, 237], "2nd": [103, 110, 135, 142, 177], "hundr": [103, 131, 137, 187, 191], "bitwis": [103, 247], "inventori": [103, 104], "occupi": [103, 244], "discard": [103, 133, 134, 184, 253, 262], "underscor": 103, "add_": [103, 141, 190, 207, 223, 233], "deepli": 103, "nor": [103, 149, 195, 207, 281], "mid": 103, "someplac": 103, "ram": [103, 134, 168, 191, 252], "colloqui": 103, "fragil": 103, "robustli": [103, 117], "whichev": 103, "thrown": [103, 210, 223], "226": 103, "zeroth": 103, "bracket": [103, 195], "rescu": 103, "squeeze_": 103, "unsqueeze_": [103, 141], "radic": 103, "parenthes": 103, "comma": 103, "convinc": [103, 165], "kinship": 103, "autom": [104, 121, 139, 155, 159, 187], "outcom": [104, 139, 198], "datetim": [104, 134, 136, 198], "training_set": 104, "validation_set": 104, "training_load": 104, "validation_load": 104, "362kb": 104, "681kb": 104, "852k": 104, "41mb": 104, "26m": 104, "9mb": 104, "18": [104, 118, 120, 140, 141, 156, 173, 178, 182, 200, 235, 236, 248, 277], "8m": 104, "5m": 104, "327kb": 104, "363kb": 104, "683kb": 104, "918k": 104, "60mb": 104, "10mb": 104, "saniti": [104, 139, 174, 187, 280], "matplotlib_imshow": [104, 185], "one_channel": [104, 185], "unnorm": [104, 185], "npimg": [104, 185], "grei": [104, 185], "datait": [104, 185], "img_grid": [104, 185], "garmentclassifi": 104, "fc3": [104, 115, 122, 185], "dummy_output": 104, "dummy_label": 104, "8550": 104, "2692": 104, "1731": 104, "0255": 104, "7986": 104, "8995": 104, "1044": 104, "4857": 104, "0324": 104, "9805": 104, "4804": 104, "6184": 104, "4637": 104, "4872": 104, "8871": 104, "6154": 104, "7105": 104, "8322": 104, "4439": 104, "0400": [104, 182], "6801": 104, "6234": 104, "2597": 104, "5752": 104, "5984": 104, "7981": 104, "1109": 104, "9902": 104, "1357": 104, "5201": 104, "2472": 104, "3134": 104, "8709": 104, "6883": 104, "1838": 104, "9057": 104, "6925": 104, "2707": 104, "4712": 104, "460033416748047": 104, "chose": [104, 173], "epoch_index": 104, "tb_writer": 104, "running_loss": [104, 185], "last_loss": 104, "999": [104, 185, 235], "tb_x": 104, "add_scalar": [104, 185, 261], "timestamp": [104, 141, 155, 244], "strftime": [104, 134], "writer": [104, 140, 154, 173, 174, 185, 198, 229, 261], "fashion_trainer_": 104, "epoch_numb": 104, "best_vloss": 104, "1_000_000": 104, "avg_loss": 104, "running_vloss": 104, "vdata": 104, "vinput": 104, "vlabel": 104, "voutput": 104, "vloss": 104, "avg_vloss": 104, "model_path": 104, "model_": 104, "7278012413904071": 104, "8203388306051492": 104, "3000": [104, 185, 190, 278], "69625834518997": 104, "5958360454444773": 104, "5858210529020871": 104, "5521113401494222": 104, "7000": 104, "5196099908601027": 104, "5242491606835974": 104, "9000": 104, "47146154848719013": 104, "4788522168942727": 104, "11000": 104, "43041893711674495": 104, "4311845180997625": 104, "13000": 104, "4328474251385778": 104, "14000": 104, "40699997688143047": 104, "15000": [104, 141], "41500898419838633": 104, "4164225459098816": 104, "40804345335310793": 104, "40878241783819974": 104, "40142238640843425": 104, "3702532030667353": 104, "35769362370867747": 104, "3787833879289683": 104, "3649455013385159": 104, "363297014300013": 104, "3651831208335352": 104, "3829623956481228": 104, "3448300796108015": 104, "34241661894008574": 104, "34540821068748484": 104, "3534101412782911": 104, "3513522097985842": 104, "3554467260837555": 104, "3343119554308796": 104, "32467661069791937": 104, "3479384613045804": 104, "3345453869666089": 104, "3166797570010385": 104, "3141669433499628": 104, "31628558392764533": 104, "3340807808020327": 104, "3314122709772819": 104, "33395513393034343": 104, "3199512311099679": 104, "31420421667162735": 104, "3020308203174063": 104, "3396745135256351": 104, "31405842686300456": 104, "34658491611480713": 104, "29030611277880963": 104, "2998743583323667": 104, "2867491265709541": 104, "2768688905529998": 104, "29571865826759314": 104, "30516132019864745": 104, "29261375414053326": 104, "2968144909320108": 104, "3035916802756401": 104, "3095661942404695": 104, "3151113959993745": 104, "2933923530298998": 104, "29089838899063764": 104, "3031307376513287": 104, "2921537490662886": 104, "3220919370651245": 104, "28262536315420583": 104, "275829573643191": 104, "28895640274376455": 104, "2788234046184989": 104, "28314582476380745": 104, "27270513294736703": 104, "28135465568197104": 104, "262665620300756": 104, "28324377357375125": 104, "2758961036804721": 104, "2780911257560147": 104, "28035138402393206": 104, "27236856213663485": 104, "2728675102629568": 104, "284274886552972": 104, "3148944675922394": 104, "saved_model": 104, "alexandro": 105, "chariton": 105, "computation": [105, 187], "lightweight": [105, 132, 172, 247], "drone": 105, "phone": [105, 115], "4gb": [105, 165, 173], "3072": [105, 159, 217], "satur": [105, 247], "held": [105, 140, 177], "greedi": [105, 150, 175], "num_images_to_keep": 105, "50_000": 105, "test_dataset": 105, "10_000": 105, "extractor": [105, 187], "train_load": [105, 133, 134, 177, 182, 184, 237, 238, 271], "detriment": 105, "conclud": [105, 144, 149, 190], "interven": [105, 190], "soft": [105, 175], "mistaken": 105, "alon": [105, 122, 137, 180, 185], "exploit": [105, 158, 180], "meaningfulli": 105, "temperatur": 105, "smoother": 105, "soft_target_loss_weight": 105, "ce_loss_weight": 105, "train_knowledge_distil": 105, "ce": [105, 180], "coeffici": 105, "convei": 105, "naiv": [105, 138, 157, 167, 179, 212], "rational": 105, "capac": [105, 145, 174, 187, 263], "cosineembeddingloss": 105, "obvious": [105, 109, 178], "somehow": [105, 112, 191], "hidden_represent": 105, "hidden_representation_s": 105, "avg_pool1d": 105, "modifiedlightnnregressor": 105, "cosineloss": 105, "wiggl": 105, "hinton": 105, "vinyal": 105, "dean": 105, "workshop": 105, "romero": 105, "balla": 105, "kahou": 105, "chassang": 105, "gatta": 105, "bengio": 105, "fitnet": 105, "thin": [105, 199], "confer": 105, "knowledge_distillation_tutori": [105, 123, 283], "kit": 106, "dynet": [106, 108], "opposit": [106, 168, 208], "theano": [106, 108], "kera": [106, 108, 121], "difficult": [106, 157, 166, 180, 191, 209, 222, 235], "constitu": 106, "green": [106, 134, 137, 185], "fat": 106, "exception": 106, "entiti": [106, 112, 191, 265, 266], "recognit": [106, 132, 224, 263], "ner": 106, "sound": [106, 109, 121], "scari": 106, "viterbi": [106, 110], "sum_": [106, 112, 175], "psi_i": 106, "sum_i": 106, "partit": [106, 132, 137, 142, 149, 230, 263], "emiss": 106, "timestep": [106, 110, 140, 141, 175], "textbf": 106, "psi_": 106, "y_i": [106, 110], "rightarrow": [106, 149, 175], "x_i": [106, 107], "tran": [106, 187], "h_i": [106, 110], "collin": 106, "robert": [106, 107, 109, 110, 112], "guthri": [106, 107, 109, 110, 112], "prepare_sequ": 106, "anywai": [106, 109, 168], "gold": [106, 180], "perceptron": 106, "score_sent": 106, "advanced_tutori": [106, 108, 111, 283], "workhors": 107, "2x5": 107, "acx": 107, "ac": [107, 187], "sigma": [107, 174], "plenti": 107, "peopl": [107, 108, 128], "shy": 107, "linearit": 107, "sum_j": 107, "x_j": 107, "unseen": [107, 112], "eta": 107, "vari": [107, 135, 143, 158, 168, 180, 188, 190, 194, 209, 212, 226, 247], "spanish": [107, 140, 141], "bow": 107, "vocab": [107, 110, 137], "word_to_ix": [107, 110, 112], "bowclassifi": 107, "creo": 107, "bigger": [107, 140, 141, 173, 187], "deep_learning_tutori": [107, 108, 111, 283], "russel": 108, "norvig": 108, "book": 108, "rip": 108, "pytorch_tutori": [108, 109, 111, 283], "word_embeddings_tutori": [108, 111, 112, 283], "lexic": [108, 111, 283], "sequence_models_tutori": [108, 110, 111, 283], "bi": [108, 111, 283], "crf": [108, 111, 283], "2x2x2": 109, "complain": [109, 190], "x_2": [109, 162], "vagu": 109, "programm": [109, 112], "x_0": 109, "overbrac": [109, 110, 112], "y_0": 109, "z_0": 109, "z_1": 109, "y_2": 109, "z_2": 109, "gloss": 109, "new_z": 109, "NO": 109, "forgotten": 109, "classic": [110, 113, 159, 166, 182, 260], "markov": 110, "myriad": 110, "cow": 110, "q_": [110, 112, 158], "1st": [110, 133, 135, 142], "unfamiliar": 110, "w_1": 110, "w_m": 110, "w_i": [110, 112], "_i": 110, "_1": 110, "_m": 110, "_j": 110, "ah_i": 110, "affin": [110, 143, 182, 195, 263, 281], "affix": [110, 112], "bear": 110, "ly": 110, "adverb": 110, "c_w": 110, "x_w": 110, "po": [110, 187], "012": [111, 218], "capit": 112, "enorm": [112, 187], "notion": 112, "mathematician": 112, "physicist": 112, "role": [112, 172, 178, 191, 281], "orthograph": 112, "linguist": 112, "hypothesi": 112, "coffe": 112, "phi": 112, "gave": 112, "pain": 112, "earth": 112, "herself": 112, "longtensor": [112, 141, 176, 178], "ith": [112, 212], "shakespear": [112, 179], "sonnet": 112, "word_i": 112, "context_s": 112, "beauti": 112, "cbow": 112, "probabilist": [112, 174], "percent": 112, "q_w": 112, "raw_text": 112, "dedupl": 112, "jeremi": 113, "howard": [113, 158, 170, 171], "rachel": 113, "thoma": 113, "ingham": 113, "elegantli": [113, 250], "concis": 113, "trail": 113, "signifi": 113, "xavier": [113, 114], "initialis": 113, "prewritten": 113, "talli": 113, "debugg": 113, "set_trac": 113, "logist": 113, "cross_entropi": [113, 137], "clearer": [113, 185], "uppercas": 113, "zero_": [113, 171, 178, 182], "prone": [113, 142, 194, 232], "gone": [113, 138], "xb": 113, "faciallandmarkdataset": 113, "tensordataset": 113, "x_train": 113, "y_train": 113, "start_i": 113, "end_i": 113, "yb": 113, "train_d": 113, "cleaner": [113, 207, 209, 215], "train_dl": 113, "phase": [113, 149, 178, 253, 279], "loss_batch": 113, "rid": [113, 114, 135, 157, 233, 278], "avgpool2d": 113, "adaptiveavgpool2d": [113, 150], "lucki": [113, 172], "rent": 113, "hour": [113, 278], "mnist_sampl": 113, "fastai": 113, "practition": [113, 149, 210], "dupr\u00e9": 114, "circumv": 114, "forwardwithcontrolflowtest": 114, "modelwithcontrolflowtest": 114, "mlp": [114, 137, 151, 191], "unexpectedli": [114, 244], "succe": [114, 117, 190], "assertionerror": [114, 156], "dynamo": [114, 115, 117, 142, 156, 201, 278, 279], "identity2": 114, "fx": [114, 115, 132, 156, 181, 190, 195, 202, 238, 272, 283], "imperfect": 114, "faith": 114, "pitfal": [114, 190], "necessarili": [114, 115, 117, 118, 142, 144, 168, 190], "export_control_flow_model_to_onnx_tutori": [114, 116, 119, 283], "ti": [115, 117, 118], "tai": [115, 117, 118], "justin": [115, 118, 121], "chu": [115, 118], "thiago": [115, 117], "crepaldi": [115, 117], "gamut": 115, "supercomput": 115, "constrain": [115, 139, 166], "onnxscript": [115, 117, 118], "upgrad": [115, 117, 166, 173, 184, 215], "imageclassifiermodel": 115, "example_input": [115, 195, 214], "onnx_program": 115, "fold": [115, 154, 214], "redund": [115, 118, 150], "onnxprogram": [115, 118], "protobuf": 115, "image_classifier_model": 115, "drag": [115, 165, 184, 185, 231], "onnx_input": 115, "ort_sess": 115, "inferencesess": 115, "cpuexecutionprovid": 115, "onnxruntime_input": 115, "input_arg": 115, "input_valu": 115, "get_input": [115, 235], "onnxruntime_output": 115, "13272801": 115, "2287639": 115, "49259508": 115, "12813608": 115, "2346265": 115, "23604076": 115, "20590253": 115, "0117004": 115, "6647358": 115, "35571033": 115, "8995264": 115, "19010834": 115, "4882655": 115, "0131719": 115, "98236173": 115, "13099578": 115, "7167586": 115, "25204092": 115, "5962346": 115, "8837534": 115, "7761409": 115, "9913297": 115, "9858686": 115, "5466525": 115, "810541": 115, "6884411": 115, "6538951": 115, "1860595": 115, "31433445": 115, "09826439": 115, "6651591": 115, "7961134": 115, "3301929": 115, "4437901": 115, "12129085": 115, "81503433": 115, "torch_output": 115, "03785496": 115, "11440175": 115, "08122428": 115, "08505919": 115, "07213745": 115, "04864623": 115, "09764305": 115, "05809091": 115, "02643182": 115, "04434608": 115, "457": [115, 119, 283], "export_simple_model_to_onnx_tutori": [115, 116, 119, 283], "intro_onnx": [116, 117, 119, 283], "onnx_registry_tutori": [116, 118, 119, 283], "sphx_glr_beginner_onnx_export_control_flow_model_to_onnx_tutori": [116, 119, 283], "sphx_glr_beginner_onnx_intro_onnx": [116, 119, 283], "sphx_glr_beginner_onnx_onnx_registry_tutori": [116, 119, 283], "sphx_glr_beginner_onnx_export_simple_model_to_onnx_tutori": [116, 119, 283], "consum": [117, 120, 138, 156, 168, 174, 176, 178, 179, 253, 263, 280], "exportedprogram": [117, 118, 122, 190, 277, 278], "newer": [117, 148, 159, 165, 167, 192, 221, 255, 256, 257, 258, 263], "__version__": [117, 173, 223], "registri": 118, "_op": 118, "opoverload": 118, "opset": 118, "native_funct": 118, "yaml": [118, 145, 238], "custom_translation_t": 118, "node_add_0": 118, "input_i": 118, "input_x": 118, "gelu": [118, 214], "op_typ": 118, "mylibrari": 118, "add_and_round_op": 118, "459": 119, "quicker": 120, "record_funct": [120, 156, 236, 253], "incur": [120, 137, 198, 228, 229, 263], "investig": [120, 159, 172, 187, 188, 190, 262], "with_stack": [120, 184], "key_averag": [120, 236], "group_by_stack_n": 120, "traceback": [120, 156, 278], "sort_bi": [120, 236, 253], "193a910735e8": 120, "stacktrac": 120, "88": [120, 178], "212": 120, "953": 120, "mnt": [120, 149], "xarfus": 120, "au": 120, "07": [120, 134, 236, 253, 262], "715": 120, "848m": 120, "350": 120, "151u": 120, "293": [120, 159], "342u": 120, "095u": 120, "931": 120, "footprint": [120, 133, 134, 135, 145, 165, 236, 247, 282], "006": 120, "476": 120, "338": 120, "759m": 120, "as_strid": [120, 156], "281": [120, 159], "808u": 120, "275": 120, "721u": 120, "_local": 120, "268": 120, "650u": [120, 253], "_scalar_dens": 120, "347": 120, "argwher": 120, "nonzero": [120, 263], "089m": 120, "402m": 120, "491m": 120, "119": 120, "441": 120, "587u": 120, "_numpi": 120, "395": [120, 178], "602u": 120, "801m": 120, "rpc": [120, 132, 233, 267], "johnson": 121, "brows": 121, "utf": [121, 141], "modern": [121, 168, 188, 191], "50x": 121, "hairi": 121, "thankfulli": 121, "wave": 121, "tflearn": 121, "burden": [121, 180, 263], "facil": 122, "running_mean": [122, 265], "themodelclass": 122, "param_tensor": 122, "var_nam": 122, "param_group": [122, 227, 233, 235], "dampen": 122, "weight_decai": [122, 233, 235], "4675713712": 122, "4675713784": 122, "4675714000": 122, "4675714072": 122, "4675714216": 122, "4675714288": 122, "4675714432": 122, "4675714504": 122, "4675714648": 122, "4675714720": 122, "_use_new_zipfile_seri": 122, "best_model_st": 122, "deepcopi": 122, "pt2": [122, 190, 226, 227, 232, 235, 277], "simplemodel": 122, "exported_program": [122, 278], "saved_exported_program": 122, "model_state_dict": [122, 135, 229, 230, 237], "theoptimizerclass": 122, "modela_state_dict": 122, "modela": 122, "modelb_state_dict": 122, "modelb": 122, "optimizera_state_dict": 122, "optimizera": 122, "optimizerb_state_dict": 122, "optimizerb": 122, "themodelaclass": 122, "themodelbclass": 122, "theoptimizeraclass": 122, "theoptimizerbclass": 122, "gan": [122, 132, 166], "ensembl": [122, 132, 181, 283], "remap": 122, "overwrit": 122, "saving_loading_model": [122, 123, 255, 256, 257, 258, 283], "937": 123, "distil": [123, 132, 238, 283], "dcgan": [123, 132, 283], "transfer_learning_tutori": [123, 128, 283], "rai": [123, 132, 283], "template_tutori": [123, 125, 283], "firstnam": 125, "lastnam": 125, "gallery_pattern": 125, "neural_style_transfer_tutori": 125, "_build": 125, "beginner_sourc": [125, 283], "link1": [125, 134], "link2": [125, 134], "cs231n": 128, "licens": [128, 182], "bsd": [128, 182], "todai": [128, 191, 209, 235], "lr_schedul": [128, 133, 134], "num_ftr": 128, "class_nam": [128, 187], "decai": [128, 150, 175, 233], "checkout": [128, 223], "spread": [131, 187], "demand": [131, 198], "distributeddata": 131, "uneven": 131, "huggingfac": [131, 133, 134, 194, 217, 278], "hf": 131, "t5": 131, "async_execut": [131, 132, 176], "dataparallel": [131, 132, 138, 247, 263], "plug": [131, 171, 182], "foreach_map": [132, 267, 270, 283], "inductor": [132, 142, 181, 190, 200, 202, 211, 214, 215, 235, 273, 275, 279, 283], "bite": [132, 267], "non_block": [132, 181, 283], "pin_memori": [132, 133, 134, 181, 263, 283], "slide": [132, 263], "tiatoolbox": 132, "resampl": 132, "waveform": 132, "wav2vec2": 132, "dqn": [132, 181, 283], "cartpol": [132, 150, 175, 178], "v0": [132, 158, 175, 193], "proxim": [132, 174], "mario": [132, 166, 181, 283], "_static": 132, "thumbnail": [132, 187], "holist": 132, "fuser": [132, 181, 283], "nchw": [132, 159, 237], "raspberri": 132, "nerur": 132, "netork": 132, "exploresever": 132, "func": [132, 151, 153, 157, 162, 167, 222, 274, 278], "tangent": [132, 153, 181, 283], "plugin": [132, 184], "orthogon": [132, 166], "symmetr": [132, 166, 214], "prune": [132, 166, 181, 215, 238, 283], "snapshot": [132, 145, 190], "torchx": 132, "scaled_dot_product_attent": [132, 179, 194, 196], "paral": 132, "fsdp2": [132, 133], "fully_shard": [132, 135], "fsdp1": [132, 133], "libuv": 132, "tcpstore": [132, 147], "sdk": 132, "v3": 132, "camera": [132, 173], "xnnpack": [132, 195], "metal": 132, "shader": 132, "android": [132, 215, 267], "deeplab": 132, "fp32": [132, 134, 145, 159, 179, 195, 200, 211, 224, 235, 238], "torchrec": [132, 181, 283], "distributedmodelparallel": 132, "sheet": 132, "hamid": [133, 134], "shojanazeri": [133, 134], "yanli": [133, 134], "zhao": [133, 134], "shen": [133, 147, 171, 176, 178], "li": [133, 141, 147, 149, 168, 171, 176, 178, 188], "1t": [133, 145], "courtesi": 133, "patrick": 133, "hu": 133, "reduce_scatt": [133, 134, 137], "possess": [133, 200, 252], "toi": [133, 147, 154, 178, 190, 191, 230, 260], "fsdp_mnist": 133, "size_based_auto_wrap_polici": 133, "default_auto_wrap_polici": 133, "fsdp_auto_wrap_polici": 133, "auto_wrap_polici": [133, 134, 135], "steplr": [133, 134], "fully_sharded_data_parallel": [133, 229, 230], "cpuoffload": [133, 135], "backwardprefetch": [133, 134], "enable_wrap": [133, 134], "cleanup": [133, 134, 147, 229, 230], "ddp_loss": 133, "batch_idx": [133, 182, 237, 238, 271], "tloss": [133, 182, 238], "6f": [133, 182, 238], "view_a": [133, 177, 182, 238], "fsdp_main": [133, 134], "dataset1": 133, "dataset2": 133, "sampler1": [133, 134], "num_replica": [133, 134], "sampler2": [133, 134], "train_kwarg": [133, 134], "test_kwarg": [133, 134], "test_batch_s": [133, 134], "cuda_kwarg": [133, 134], "my_auto_wrap_polici": 133, "min_num_param": 133, "init_start_ev": [133, 134], "enable_tim": [133, 134], "init_end_ev": [133, 134], "adadelta": 133, "step_siz": [133, 134, 235], "gamma": [133, 134, 158, 175, 176, 178], "elapsed_tim": 133, "save_model": [133, 134], "barrier": [133, 134, 136, 147, 149, 196], "mnist_cnn": 133, "metavar": [133, 134, 176, 178], "store_tru": [133, 134], "110": [133, 178, 248], "40": [133, 141, 158, 159, 178, 180, 194, 201, 211, 217, 235, 236, 248, 277], "67462890625sec": 133, "_fsdp_wrapped_modul": 133, "flattenparamswrapp": 133, "_fpw_modul": 133, "peak": [133, 135, 143, 165, 173, 194, 196, 200, 229, 275, 281, 282], "g4dn": 133, "xlarg": 133, "allgath": [133, 134, 137, 171, 263], "seal": 133, "20000": [133, 141], "89130859375sec": 133, "auto_wrap": 133, "offload": [133, 134, 135, 236, 244], "cpu_offload": [133, 135], "offload_param": [133, 135], "dpp": 133, "ddp_mnist": 133, "39": [133, 178, 194, 236, 248], "77766015625sec": 133, "wright": 134, "rohan": [134, 177], "varma": [134, 177], "wikihow": 134, "p4dn": 134, "a100": [134, 138, 167, 188, 194, 200, 217], "pressur": [134, 229], "fdsp": 134, "xxl": 134, "billion": [134, 137], "3b": [134, 173], "wikihowal": 134, "wikihowsep": 134, "summarization_dataset": 134, "t5_train": 134, "autotoken": [134, 217], "gpt2tokenizerfast": 134, "t5token": 134, "t5forconditionalgener": 134, "modeling_t5": 134, "t5block": 134, "checkpoint_wrapp": 134, "checkpointimpl": 134, "apply_activation_checkpointing_wrapp": 134, "mixedprecis": 134, "shardingstrategi": [134, 232], "fullstatedictconfig": 134, "statedicttyp": [134, 229, 230], "transformer_auto_wrap_polici": 134, "tqdm": [134, 150, 174, 217], "setup_model": 134, "from_pretrain": [134, 217, 237, 278], "get_date_of_run": 134, "2022": [134, 202], "08": [134, 156, 178, 196, 235, 236, 238, 248, 277], "31": [134, 141, 156, 235, 236, 248, 253, 262], "12_pm": 134, "date_of_run": 134, "s_": [134, 175], "format_metrics_to_gb": 134, "gigabyt": 134, "metric_num": 134, "g_gigabyt": 134, "ndigit": 134, "fsdp_loss": 134, "inner_pbar": 134, "colour": 134, "desc": [134, 198], "r0": 134, "input_id": [134, 137, 217, 278], "source_id": 134, "attention_mask": [134, 278], "source_mask": 134, "target_id": 134, "train_accuraci": 134, "val_load": 134, "load_dataset": [134, 217, 278], "type_path": 134, "output_length": 134, "print_text": 134, "1500": [134, 248], "150": [134, 178], "val_dataset": 134, "t5_auto_wrap_polici": 134, "transformer_layer_cl": 134, "sharding_strategi": [134, 135, 232], "shard_grad_op": [134, 135], "zero2": 134, "full_shard": [134, 135], "zero3": 134, "bf16_readi": 134, "is_bf16_support": 134, "loosevers": 134, "is_nccl_avail": [134, 196], "mp_polici": [134, 135], "bfsixteen": 134, "mixed_precis": [134, 135], "current_devic": [134, 247], "adamw": [134, 175], "best_val_loss": 134, "inf": [134, 190, 209, 212, 235], "curr_val_loss": 134, "file_save_nam": 134, "time_of_run": 134, "dur": 134, "train_acc_track": 134, "val_acc_track": 134, "training_start_tim": 134, "track_memori": 134, "mem_alloc_track": 134, "mem_reserved_track": 134, "run_valid": 134, "zone": 134, "memory_alloc": 134, "memory_reserv": 134, "save_polici": 134, "offload_to_cpu": 134, "rank0_onli": 134, "state_dict_typ": 134, "full_state_dict": [134, 135], "cpu_stat": 134, "currepoch": 134, "save_nam": 134, "store_fals": 134, "nnode": [134, 147, 170, 196, 198], "transfom": 134, "mhsa": 134, "ffn": [134, 194], "bfloat16": [134, 135, 196, 200, 211, 224, 247, 260, 271], "v100": [134, 188], "fpsixteen": 134, "param_dtyp": [134, 135], "reduce_dtyp": [134, 135], "buffer_dtyp": [134, 135], "fp32_polici": 134, "grad_bf16": 134, "oom": [134, 165, 247], "freed": [134, 165], "backward_pr": [134, 135], "backward_prefetch": [134, 135], "backward_post": [134, 135], "wei": 135, "feng": [135, 158, 171], "yifan": 135, "mao": 135, "unshard": [135, 191, 196], "recordstream": 135, "float8": 135, "nf4": 135, "qlora": 135, "eg": 135, "fsdpmodul": 135, "fsdptransform": 135, "tok_embed": [135, 137, 170], "fsdptransformerblock": 135, "joint": [135, 273], "to_loc": 135, "clip_grad_norm_": 135, "seq_len": 135, "queu": [135, 229], "set_modules_to_forward_prefetch": 135, "set_modules_to_backward_prefetch": 135, "perf": [135, 217], "layers_to_prefetch": 135, "num_to_forward_prefetch": 135, "num_to_backward_prefetch": 135, "upcast": 135, "model_arg": [135, 170], "fsdp_kwarg": 135, "mixedprecisionpolici": 135, "max_norm": 135, "resum": [135, 188, 230, 267, 278], "distributed_tensor": 135, "distribute_tensor": 135, "mmap": 135, "full_sd": 135, "meta_sharded_sd": 135, "sharded_sd": 135, "param_nam": [135, 260], "full_tensor": 135, "sharded_meta_param": 135, "sharded_tensor": 135, "device_mesh": [135, 137, 196, 232], "full_param": 135, "cpu_state_dict": 135, "sharded_param": 135, "del": [135, 170, 201, 235], "set_model_state_dict": 135, "broadcast_from_rank0": 135, "statedictopt": 135, "get_model_state_dict": 135, "set_optimizer_state_dict": 135, "get_optimizer_state_dict": 135, "modulewrappolici": 135, "transformerblock": [135, 137], "param_init_fn": 135, "itertool": [135, 178], "to_empti": [135, 219, 260], "sublay": 135, "reshard_after_forward": 135, "hybrid_shard": [135, 232], "_hybrid_shard_zero2": 135, "offload_polici": 135, "cpuoffloadpolici": 135, "cast_forward_input": 135, "cast_root_forward_input": 135, "output_dtyp": [135, 195, 198], "sync_module_st": 135, "rank0": [135, 176, 178, 198], "forward_prefetch": 135, "fsdp_modul": 135, "limit_all_gath": 135, "use_orig_param": [135, 137], "no_sync": [135, 263], "set_requires_gradient_sync": 135, "ignored_param": 135, "ignored_st": 135, "xilun": [136, 196], "roll": 136, "1k": [136, 137], "98304": 136, "96k": 136, "perf_count": 136, "logger": [136, 187], "getlogg": [136, 187], "var": 136, "preset": [136, 214], "env_rank": 136, "env_world_s": 136, "env_master_addr": 136, "env_master_port": 136, "23456": [136, 149], "tcp_store": 136, "is_mast": 136, "time_elaps": 136, "client": 136, "timeout": [136, 147, 171, 198], "store_based_barri": 136, "timedelta": [136, 198], "diststoreerror": 136, "_diststoreerror": 136, "_store_based_barri": 136, "group_nam": 136, "rendezvous_count": 136, "default_pg_timeout": 136, "logging_interv": 136, "store_kei": 136, "store_based_barrier_kei": 136, "worker_count": 136, "last_worker_kei": 136, "last_work": 136, "num_workers_join": 136, "tcpstore_test": 136, "number_run": 136, "spectrum": 136, "listen_fd": 136, "socket": [136, 149, 156, 263, 281], "listen_sock": 136, "af_inet": 136, "sock_stream": 136, "addr": [136, 198], "getsocknam": 136, "master_listen_fd": 136, "notimplementederror": 136, "gloo": [136, 147, 149, 171, 184, 191, 282], "vairabl": 136, "plane": 136, "notifi": [136, 176], "wanchao": [137, 232], "liang": [137, 232], "tianyu": 137, "liu": 137, "megatron": 137, "lm": [137, 228], "sp": 137, "parallelstyl": 137, "parallelize_modul": 137, "foward": 137, "aris": [137, 190, 194, 200, 209, 278], "exceed": [137, 174], "domin": [137, 159, 187, 220], "ballpark": 137, "flop": [137, 191, 275], "llm": [137, 170, 211], "trillion": [137, 145], "month": 137, "llama": [137, 194, 214], "70b": 137, "2k": 137, "llama2": 137, "colwiseparallel": 137, "rowwiseparallel": 137, "sequenceparallel": 137, "rmsnormpython": 137, "preparemoduleinput": 137, "preparemoduleoutput": 137, "init_device_mesh": [137, 196, 232], "tp_mesh": [137, 232], "feedforward": 137, "swiglu": 137, "w2": 137, "silu": 137, "w1": 137, "w3": 137, "colwis": 137, "rowwis": 137, "parallelize_plan": 137, "layer_tp_plan": 137, "feed_foward": 137, "feed_forward": 137, "wq": 137, "wk": 137, "wv": 137, "wo": 137, "tp_plan": 137, "draft": [137, 149], "num_head": 137, "layer_id": [137, 170], "transformer_block": 137, "attn_lay": 137, "n_head": [137, 170], "n_kv_head": 137, "input_layout": 137, "output_layout": 137, "attention_norm": 137, "ffn_norm": 137, "desired_input_layout": 137, "yellow": 137, "loss_parallel": 137, "use_local_output": 137, "seq": 137, "dp": [137, 198], "mesh_2d": [137, 232], "submesh": 137, "dp_mesh": 137, "model_tp": 137, "model_2d": 137, "broadli": 138, "torchviz": [138, 144], "orang": [138, 173], "_save": 138, "kept": [138, 198], "_saved_self": 138, "_saved_oth": 138, "cycl": [138, 184, 224, 248, 253], "thumb": [138, 157, 174, 247], "pack_hook": 138, "unpack_hook": 138, "silli": 138, "harmless": 138, "debat": 138, "__repr__": [138, 248], "152": 138, "48gb": 138, "5gb": 138, "6x": 138, "leak": 138, "autograd_saved_tensors_hooks_tutori": [138, 181, 283], "david": 139, "eriksson": 139, "balandat": 139, "methodologi": [139, 233, 237], "laptop": 139, "sustain": [139, 229], "studi": [139, 172, 187], "botorch": 139, "bayesian": 139, "mnist_train_na": [139, 160, 181, 283], "appdef": 139, "kubernet": 139, "local_cwd": 139, "fetch": [139, 141, 176, 177, 178, 191, 273], "proxi": [139, 207, 210, 248, 268], "tensorboardcurvemetr": 139, "curve_nam": 139, "lower_is_bett": 139, "favor": [139, 162, 174, 190], "multiobjectiveoptimizationconfig": 139, "94": [139, 182, 236, 253], "generationstrategi": 139, "scheduleropt": 139, "max_pending_tri": 139, "pareto": 139, "frontier": 139, "surrog": 139, "uncertainti": 139, "95": [139, 141, 178, 195, 236], "num_param": 139, "val_acc": 139, "contour": 139, "hidden_size_1": 139, "kiuk": 139, "chung": 139, "tristan": [139, 173], "rice": [139, 173], "ax_multiobjective_nas_tutori": [139, 160, 181, 283], "surnam": 140, "spell": 140, "lua": [140, 141, 180], "unreason": [140, 141], "roman": 140, "alphabet": 140, "n_letter": [140, 141], "line_length": 140, "all_lett": [140, 141], "linetotensor": 140, "namesdataset": 140, "20074": 140, "charrnn": 140, "label_from_output": 140, "histor": [140, 141], "all_loss": [140, 141], "minu": [140, 184], "bright": 140, "incorrectli": 140, "chines": [140, 141], "korean": [140, 141], "italian": [140, 141], "greek": [140, 141], "poorli": 140, "gender": 140, "subreddit": 140, "char_rnn_classification_tutori": [140, 181, 283], "russian": 141, "ru": 141, "rovakov": 141, "uantov": 141, "shavakov": 141, "german": 141, "ger": 141, "gerren": 141, "ereng": 141, "rosher": 141, "spa": 141, "salla": 141, "parer": 141, "allan": 141, "chi": 141, "chan": 141, "iun": 141, "unicodedata": 141, "ascii_lett": 141, "eo": [141, 180], "findfil": 141, "nfd": 141, "mn": 141, "readlin": 141, "some_fil": [141, 147], "category_lin": 141, "all_categori": 141, "splitext": 141, "basenam": 141, "n_categori": 141, "n\u00e9\u00e0l": 141, "arab": 141, "czech": 141, "dutch": 141, "french": [141, 163, 180], "irish": 141, "japanes": 141, "polish": 141, "portugues": 141, "scottish": 141, "vietnames": 141, "neal": 141, "o2o": 141, "muscl": [141, 187], "fuzz": 141, "chao": 141, "i2h": 141, "i2o": 141, "input_combin": 141, "output_combin": 141, "inithidden": 141, "randomchoic": 141, "randomtrainingpair": 141, "abcd": 141, "categorytensor": 141, "inputtensor": [141, 171, 223], "targettensor": 141, "letter_index": 141, "randomtrainingexampl": 141, "category_tensor": 141, "input_line_tensor": 141, "target_line_tensor": 141, "contrast": [141, 147, 167, 168, 190, 207], "0005": 141, "timesinc": 141, "floor": 141, "print_everi": 141, "plot_everi": 141, "total_loss": 141, "6711": 141, "5024": 141, "6350": 141, "8273": 141, "25000": 141, "7431": 141, "30000": [141, 149], "4913": 141, "35000": 141, "0877": 141, "40000": [141, 248], "7873": 141, "45000": 141, "5975": 141, "6307": 141, "51": [141, 159, 178, 182, 235, 236, 283], "55000": 141, "55": [141, 159, 235, 248, 281], "2398": 141, "2m": 141, "8594": 141, "65000": [141, 262], "4305": 141, "70000": 141, "2964": 141, "75000": 141, "9428": 141, "43": [141, 235, 236, 248], "80000": 141, "3363": 141, "85000": 141, "5742": 141, "90000": [141, 248], "90": [141, 178, 236], "1769": 141, "95000": 141, "7771": 141, "0193": 141, "line2d": 141, "0x7f026df75d20": 141, "output_nam": 141, "start_lett": 141, "topv": 141, "topi": 141, "abc": [141, 187], "rovekov": 141, "uandanov": 141, "sharanok": 141, "geller": 141, "roura": 141, "sanera": 141, "pareraz": 141, "arana": 141, "han": [141, 202], "iung": 141, "fiction": 141, "countri": 141, "citi": 141, "870": [141, 181, 248, 283], "char_rnn_generation_tutori": [141, 181, 283], "simon": 142, "fan": [142, 173], "torch_log": [142, 190, 211, 267, 268, 270, 278, 283], "_dynamo": [142, 156, 188, 190, 235, 268, 278], "compiled_autograd": 142, "intercept": 142, "bytecod": [142, 188], "aotdispatch": 142, "rewritten": 142, "compiled_autograd_verbos": 142, "stderr": 142, "aot0_": 142, "aot0_view_2": 142, "view_2": 142, "aot": [142, 156, 235, 275], "unoptim": [142, 188], "aot_eag": [142, 156], "graph_break": [142, 278], "unique_graph": 142, "call_hook": 142, "div": [142, 156, 207, 235], "adjac": 143, "dilat": 143, "track_running_statist": 143, "denomin": 143, "nenadmarku": [143, 154], "bulk": 143, "fusedconvbn": 143, "geforc": 143, "rtx": 143, "3070": 143, "56gb": 143, "unfus": 143, "68gb": 143, "shallow": [143, 150], "custom_function_conv_bn_tutori": [143, 181, 283], "grad_out": 144, "finit": [144, 162], "differenc": 144, "magnifi": 144, "gradgradcheck": [144, 263], "grad_x": 144, "make_dot": 144, "dout": 144, "ouptut": 144, "sinh": 144, "cosh": 144, "expx": 144, "expnegx": 144, "_grad_out_exp": 144, "_grad_out_negexp": 144, "sinhbad": 144, "cube_backward": 144, "cubebackward": 144, "cube_forward": 144, "cube_backward_backward": 144, "sav_grad_out": 144, "cube_backward_backward_grad_out": 144, "cube": 144, "dgrad_out": 144, "reachabl": [145, 146, 149], "2xlarg": [145, 146], "hydra": 145, "slurm": [145, 146, 147, 149], "char_dataset": 145, "gpt2_train_cfg": 145, "bucket": [145, 263], "aggress": 145, "rendezv": [146, 171], "nccl_debug": 146, "diagnos": 146, "nccl_socket_ifnam": 146, "eth0": 146, "joe": 147, "zhu": [147, 156], "chirag": [147, 198], "pandya": [147, 198], "clarifi": 147, "filestor": 147, "libtmp": 147, "toymodel": [147, 229, 230, 232], "net1": [147, 229, 230, 231, 232], "net2": [147, 229, 230, 231, 232], "demo_bas": 147, "ddp_model": [147, 282], "run_demo": 147, "demo_fn": 147, "caution": 147, "straggler": [147, 184], "inevit": 147, "spike": [147, 173], "AND": 147, "recoveri": 147, "torchelast": 147, "demo_checkpoint": 147, "checkpoint_path": 147, "gettempdir": 147, "toympmodel": 147, "dev0": 147, "dev1": 147, "output_devic": 147, "demo_model_parallel": 147, "mp_model": 147, "ddp_mp_model": 147, "n_gpu": 147, "elastic_ddp": 147, "rdzv_id": [147, 232], "rdzv_backend": 147, "rdzv_endpoint": [147, 232], "29400": [147, 232], "scontrol": 147, "hostnam": 147, "slurm_nodelist": 147, "srun": 147, "torchrun_script": 147, "s\u00e9b": 149, "arnold": 149, "sysadmin": 149, "coordin": [149, 182, 193, 200, 210, 281], "pdsh": 149, "clustershel": 149, "init_process": 149, "127": [149, 195], "set_start_method": 149, "ip": 149, "recv": [149, 170, 178], "irecv": 149, "dst": 149, "req": 149, "behaviour": 149, "fanci": 149, "baidu": 149, "deepspeech": 149, "facebook": 149, "communc": 149, "new_group": [149, 170, 232], "commut": 149, "band": 149, "bor": 149, "bxor": 149, "premul_sum": 149, "scatter_list": 149, "gather_list": 149, "all_to_al": 149, "output_tensor_list": 149, "input_tensor_list": 149, "random_split": 149, "data_idx": 149, "datapartition": 149, "1234": 149, "data_len": 149, "part_len": 149, "partition_dataset": 149, "get_world_s": 149, "bsz": 149, "partition_s": 149, "train_set": [149, 184], "ceil": 149, "epoch_loss": 149, "average_gradi": 149, "voil\u00e0": 149, "send_buff": 149, "recv_buff": 149, "accum": [149, 211], "send_req": 149, "bandwidth": [149, 184, 191, 215, 236], "subsect": 149, "mpi": 149, "eleg": 149, "smi": [149, 247], "mvapich2": 149, "ipc": [149, 184], "recompil": [149, 188, 227, 268, 272, 273], "requisit": 149, "forg": [149, 238, 281], "openmpi": 149, "mpirun": 149, "myscript": 149, "handshak": 149, "superflu": 149, "everybodi": 149, "readili": 149, "race": [149, 233], "fcntl": 149, "nf": [149, 198], "sharedfil": 149, "everyon": 149, "unclear": [149, 190], "natalia": 149, "gimelshein": 149, "actor": 150, "carrier": [150, 174], "step_mdp": 150, "brought": [150, 168, 174, 190], "84x84": 150, "accessori": [150, 173], "inittrack": 150, "stamp": 150, "is_init": 150, "tensordictprim": 150, "primer": [150, 210], "disappear": 150, "lstmmodul": 150, "backbon": [150, 187], "flank": 150, "assist": [150, 232], "tensordictmodulebas": 150, "batch_first": 150, "make_tensordict_prim": 150, "qvaluemodul": 150, "action_valu": 150, "qvalueactor": 150, "set_recurrent_mod": 150, "uniniti": [150, 219], "dqnloss": 150, "delay_valu": 150, "lazymemmapstorag": 150, "dqn_with_rnn_tutori": [150, 181, 283], "tradition": [151, 219], "pretend": [151, 167], "stack_module_st": 151, "functional_cal": [151, 162, 167], "num_model": 151, "front": [151, 172, 190], "in_dim": [151, 167, 222], "weren": [151, 167], "forced_alignment_tutori": 152, "incomplet": [153, 168], "eagerli": [153, 165, 190, 276], "primal": 153, "dual": 153, "dual_level": 153, "fresh": [153, 247], "check_forward_ad": 153, "check_backward_ad": 153, "check_undefined_grad": 153, "check_batched_grad": 153, "functorch": 153, "downsid": [153, 168], "reformul": [153, 162], "ft": 153, "make_functional_with_buff": 153, "analog": [153, 190, 191, 209, 210], "consolid": [153, 176, 191], "dual_numb": 153, "forward_ad_usag": [153, 181, 283], "horac": 154, "he": [154, 158, 180], "clariti": 154, "simplif": 154, "conclus": 154, "hear": [154, 155], "tracker": [154, 155], "fx_conv_bn_fus": [154, 181, 283], "longest": 155, "nicer": 155, "tabul": [155, 188, 198, 275], "ca": 155, "graphmodul": [155, 195], "symbolic_trac": 155, "profilinginterpret": 155, "clock": [155, 248], "51393": 155, "fx_profiling_tutori": [155, 181, 283], "xuan": 156, "liao": 156, "haozh": 156, "jiong": [156, 201, 211], "gong": [156, 201, 211], "weihan": 156, "intricaci": 156, "troubleshoot": 156, "pinpoint": [156, 190, 231], "narrow": [156, 190, 198, 212], "torch_compile_debug": 156, "xx": 156, "_inductor": [156, 190, 201, 211, 235, 277], "model___20": 156, "torchinductor_root": 156, "rx": 156, "crxfi2ybd7yp5sbj2pnhw33wfhtdw7wumvrobyp5sjvdui5ktjc2": 156, "fx_graph_runn": 156, "fx_graph_transform": 156, "ir_pre_fus": 156, "ir_post_fus": 156, "output_cod": [156, 211, 235, 279], "triton": [156, 188, 202, 211, 235, 267, 270, 272, 277, 283], "gv": 156, "cgv6n5aotqjo5w4vknjibhengeycuattfto532hkxpozszcgxr3x": 156, "tmp2": [156, 211, 235], "tmp1": [156, 211, 235], "exc": [156, 278], "backendcompilerfail": 156, "cppcompileerror": 156, "xg": 156, "cxga5tk3b4lkwoxyigrtocjp5s7vc5cg2ikuscf6bk6pjqip2bhx": 156, "unsign": [156, 248], "max_propagate_nan": 156, "tmp3": [156, 211, 235], "tmp0": [156, 211, 235], "deduct": 156, "substitut": [156, 157, 165], "deduc": 156, "in_ptr0": [156, 235], "in_ptr1": [156, 235], "out_ptr0": 156, "pragma": [156, 211], "ivdep": [156, 211], "i0": 156, "static_cast": [156, 211, 235], "0l": [156, 211, 235], "8390l": 156, "1l": [156, 201, 211], "i1": 156, "8l": 156, "buf0": [156, 201], "schedulernod": 156, "computedbuff": 156, "memorydep": 156, "c0": 156, "67120": 156, "unmet_depend": 156, "met_depend": 156, "arg0_1": [156, 201, 235], "8390": 156, "arg1_1": [156, 235], "nodeus": 156, "can_inplac": 156, "buf0_loop_bodi": 156, "var_rang": 156, "z0": 156, "index0": 156, "index1": 156, "get_index": 156, "get_index_1": 156, "load_1": 156, "get_index_2": 156, "minifi": 156, "dead": 156, "minif": 156, "allclos": [156, 196, 217, 235], "tol": 156, "test_script": 156, "expected_result": 156, "actual_result": 156, "torchdynamo_repro_aft": 156, "torchdynamo_repro_level": 156, "mobilebertforquestionansw": 156, "xeon": [156, 159, 224, 237, 267], "platinum": 156, "8358": 156, "60ghz": 156, "kmp_blocktim": [156, 263, 281], "kmp_set": 156, "kmp_affin": [156, 263, 281], "compact": [156, 263, 281], "ld_preload": [156, 263, 281], "conda_prefix": [156, 248], "dirnam": [156, 171, 244], "libiomp5": [156, 263, 281], "libjemalloc": [156, 281], "malloc_conf": [156, 281], "oversize_threshold": [156, 281], "background_thread": [156, 281], "metadata_thp": [156, 281], "dirty_decay_m": 156, "muzzy_decay_m": 156, "numactl": [156, 263, 281], "bench": 156, "eager_t": 156, "num_it": 156, "inductor_t": 156, "1023553796113": 156, "339": 156, "95180135127157": 156, "359459053287382": 156, "355x": 156, "enable_kernel_profil": 156, "73": [156, 178, 217, 235, 248], "370": 156, "814m": 156, "362": 156, "89": [156, 178, 253], "161": 156, "276m": 156, "363": 156, "121": [156, 253], "416m": 156, "488": [156, 248], "154m": 156, "194": 156, "clamp_min": [156, 236], "81": [156, 236], "444m": 156, "bmm": [156, 212, 224, 248], "258m": [156, 236], "810": 156, "920m": 156, "447m": 156, "_softmax": 156, "087m": 156, "376": 156, "888m": 156, "77": [156, 235], "430m": 156, "502m": 156, "161m": 156, "850": 156, "377m": 156, "386": [156, 178, 253], "index_select": 156, "000u": [156, 253], "986": 156, "420m": 156, "703": 156, "656": [156, 282], "963": 156, "864m": 156, "_mkl_linear": [156, 211], "231": [156, 248, 253], "573m": [156, 253], "992m": 156, "336": [156, 253], "642m": 156, "graph_0_cpp_fused_constant_pad_nd_embedding_0": 156, "915": 156, "911": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_151": 156, "901": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_226": 156, "899": [156, 280], "graph_0_cpp_fused__mkl_linear_add_mul_relu_361": 156, "898": [156, 280], "graph_0_cpp_fused__mkl_linear_add_mul_relu_121": 156, "895": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_31": 156, "893": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_76": 156, "892": [156, 173, 248, 280], "graph_0_cpp_fused__mkl_linear_add_mul_relu_256": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_346": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_241": 156, "891": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_316": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_91": 156, "890": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_106": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_211": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_61": 156, "889": 156, "graph_0_cpp_fused__mkl_linear_add_mul_relu_286": 156, "graph_0_cpp_fused_": 156, "63x": 156, "cblas_sgemm_comput": 156, "339m": 156, "94x": 156, "cpp_fused__mkl_linear_add_mul_relu_151": 156, "clrlgu27q4ggd472umdzwsu6qcpqxcuusjxqvx2hwitjbujiiz7z": 156, "bottl": [156, 229], "neck": [156, 229], "780875144992024": 156, "9588955780491233": 156, "0286805751604735": 156, "smallest": [156, 172], "solid": 156, "analyt": 156, "hotspot": [156, 244], "phenomenon": 156, "inductor_debug_cpu": [156, 181, 283], "annoi": 157, "jax": [157, 162, 222], "argnum": 157, "millisecond": [157, 171, 263], "get_perf": 157, "rigor": 157, "taller": 157, "hessiani": 157, "overwhelm": 157, "jacobians_hessian": [157, 181, 283], "yuansong": 158, "steven": 158, "guo": 158, "cheatsheet": 158, "companion": 158, "bro": 158, "ne": [158, 180, 253], "emul": 158, "tube": 158, "mushroom": 158, "screen": [158, 175, 244], "next_stat": [158, 175], "240": [158, 178, 253], "pipe": 158, "sky": 158, "grayscaleobserv": 158, "resizeobserv": 158, "skipfram": 158, "framestack": 158, "movement": 158, "exploration_r": 158, "marionet": 158, "ddqn": 158, "_e": 158, "argmax_": 158, "td_target": 158, "td_t": 158, "td_e": 158, "leftarrow": 158, "nabla": 158, "episod": [158, 175, 176, 178], "mario_rl_tutori": [158, 181, 283], "vitali": 159, "fedyunin": 159, "densest": 159, "4x4": 159, "10x3x16x16": 159, "768": [159, 217], "memory_format": [159, 223, 224, 233, 237], "channels_last": [159, 224, 237], "contiguous_format": 159, "minor": [159, 178, 185, 237, 238], "ambigu": [159, 208, 209], "n1hw": 159, "contrari": [159, 168, 172], "restrid": 159, "special_x": 159, "unintend": 159, "7603": 159, "apex": 159, "main_amp": 159, "resnet50": [159, 173, 176, 237, 271], "o2": 159, "opt_level": 159, "keep_batchnorm_fp32": 159, "nonetyp": 159, "loss_scal": 159, "cast_model_typ": 159, "patch_torch_funct": 159, "master_weight": 159, "125": [159, 253], "866": 159, "230": [159, 178, 187], "949": 159, "6735125184": 159, "6735": 159, "prec": 159, "259": 159, "562": 159, "773": 159, "481": 159, "355": 159, "693": 159, "6968704462": 159, "6852": 159, "461": 159, "775": 159, "089": 159, "433": 159, "965": 159, "7877287269": 159, "7194": 159, "833": 159, "771": 159, "710": 159, "487": 159, "8285319805": 159, "7467": 159, "260": [159, 178], "380": 159, "770": 159, "090": 159, "525": 159, "908": 159, "7370464802": 159, "7447": 159, "360": 159, "623": 159, "555": 159, "728": 159, "7592862844": 159, "7472": 159, "917": 159, "345": [159, 193], "774": 159, "746": [159, 181, 182, 248, 283], "115": [159, 236], "9698858261": 159, "9218": 159, "597": 159, "659": 159, "2505953312": 159, "0879": 159, "52": [159, 235, 236], "767": 159, "785": 159, "7579724789": 159, "7580": 159, "198": 159, "482": 159, "135": [159, 173, 248], "414": 159, "716": [159, 236, 248, 270], "7007197738": 159, "7293": 159, "387": 159, "1010": 159, "516": 159, "7113101482": 159, "7233": 159, "667": 159, "197": 159, "340": 159, "1013": 159, "023": 159, "588": 159, "8943189979": 159, "7661": 159, "541": 159, "7113249302": 159, "9551": 159, "1011": 159, "163": 159, "683": 159, "574": 159, "8537774086": 159, "7716": 159, "279": 159, "453": 159, "7595844269": 159, "3413": 159, "429": 159, "269": 159, "827": 159, "743": 159, "883": 159, "8196096420": 159, "4011": 159, "volta": [159, 247, 263], "alexnet": 159, "mnasnet0_5": 159, "mnasnet0_75": 159, "mnasnet1_0": 159, "mnasnet1_3": 159, "mobilenet_v2": [159, 173, 193, 223], "resnet101": 159, "resnet152": 159, "resnet34": 159, "resnext50_32x4d": 159, "shufflenet_v2_x0_5": [159, 173], "shufflenet_v2_x1_0": [159, 173], "shufflenet_v2_x1_5": [159, 173], "shufflenet_v2_x2_0": [159, 173], "squeezenet1_0": 159, "squeezenet1_1": 159, "vgg11": 159, "vgg11_bn": 159, "vgg13": 159, "vgg13_bn": 159, "vgg16": 159, "vgg16_bn": 159, "vgg19_bn": 159, "wide_resnet101_2": 159, "wide_resnet50_2": 159, "ic": 159, "lake": [159, 237], "densenet121": 159, "densenet161": 159, "densenet169": 159, "googlenet": [159, 173], "inception_v3": [159, 173], "resnext101_32x8d": [159, 173], "spite": 159, "contains_cl": 159, "print_input": 159, "check_wrapp": 159, "check_cl": 159, "was_cl": 159, "old_attr": 159, "getattr": 159, "exclude_funct": 159, "has_nam": 159, "__class__": [159, 260], "setattr": 159, "nc11": 159, "memory_format_tutori": [159, 181, 283], "year": [162, 166, 194], "j_": 162, "diagon": 162, "asymptot": 162, "i_o": 162, "i_": 162, "e_o": 162, "textrm": 162, "_o": 162, "tensorfloat": 162, "sacrific": 162, "empirical_ntk_ntk_vp": 162, "luck": [162, 165, 191], "neural_tangent_kernel": [162, 181, 283], "homepag": [164, 197], "ooz": 165, "_might_": 165, "2p": 165, "ephemer": 165, "memory_viz": 165, "devot": 165, "bat": [165, 202], "2gb": [165, 173], "6gb": 165, "foreach": [165, 235], "reveal": [165, 179, 188, 246, 248], "silver": 165, "bullet": 165, "sizabl": [165, 168], "tantamount": 165, "eat": 165, "lora": 165, "unlock": [165, 214, 233], "vit_l_16": 165, "neat": 165, "lrschedul": [165, 267], "slate": 165, "woohoo": 165, "apart": 165, "shrunk": 165, "0gb": 165, "optimizer_step_in_backward_tutori": [165, 181, 283], "lezcano": 166, "surprisingli": 166, "ill": 166, "frobeniu": 166, "spectral": 166, "lipschitz": 166, "x\u1d40": 166, "upper": [166, 179, 190, 253], "triangular": 166, "reimplement": [166, 172, 190], "skew": [166, 184, 253], "unparametr": 166, "linearsymmetr": 166, "moduledict": [166, 170, 217], "parametrizationlist": [166, 217], "inbuilt": 166, "caylei": 166, "spd": 166, "right_invers": 166, "remove_parametr": 166, "parametri": 166, "leave_parametr": 166, "privaci": [167, 172], "sample_grad": 167, "compute_loss": 167, "ft_compute_grad": 167, "0th": [167, 172, 179, 212], "25x": [167, 187, 217], "opacu": 167, "per_sample_grad": [167, 181, 283], "cpu_tensor": 168, "cuda_tensor": [168, 263], "erron": 168, "carefulli": [168, 263], "distinguish": [168, 178, 185], "isol": [168, 188], "illus": 168, "anywher": 168, "cudastreamsynchron": 168, "dma": 168, "volterra": 168, "tesla": 168, "h100": [168, 188], "t3_cuda": 168, "belief": [168, 190], "brand": 168, "cudahostalloc": 168, "cudamemcpi": 168, "doubt": 168, "interestingli": 168, "tick": 168, "__whenev": 168, "memory__": 168, "corrupt": 168, "garbag": 168, "reliabl": [168, 248], "annihil": 168, "legitim": 168, "notori": 168, "inher": [168, 190, 191, 230], "blockag": 168, "afterward": [168, 190, 199], "non_blocking_pin": 168, "ration": 168, "outweigh": [168, 236], "perman": [168, 172], "shuttl": 168, "expedit": 168, "advers": 168, "bu": 168, "monopol": 168, "pinmem_nonblock": [168, 181, 283], "huang": [170, 171, 196, 229, 230], "microbatch": 170, "micro": 170, "educ": [170, 194], "dataclass": 170, "modelarg": 170, "witout": 170, "layernorm": [170, 194, 217], "splitpoint": 170, "pipelinestag": 170, "schedulegpip": 170, "pp_group": 170, "stage_index": 170, "num_stag": 170, "init_distribut": 170, "peer": [170, 282], "manual_model_split": 170, "split_spec": 170, "mirror": 170, "build_stag": 170, "gpipe": 170, "1f1b": 170, "interleaved1f1b": 170, "loopedbf": 170, "num_microbatch": 170, "example_input_microbatch": 170, "tracer_model_split": 170, "tokenwise_loss_fn": 170, "n_microbatch": 170, "pipelining_tutori": 170, "tian": 171, "si": 171, "zeroredundancyoptim": [171, 267], "processgroupnccl": 171, "processgroupgloo": 171, "processgroupmpi": 171, "ucc": 171, "oneccl": [171, 263], "trainum": 171, "emerg": 171, "backenddummi": 171, "chrono": 171, "outputtensor": [171, 223], "allgatheropt": 171, "allreduceopt": 171, "workdummi": 171, "optyp": 171, "recvanysourc": 171, "future_": 171, "iscomplet": 171, "issuccess": 171, "kunsettimeout": 171, "getfutur": 171, "outputtensorvec": 171, "listtyp": 171, "tensortyp": 171, "markcomplet": 171, "createbackenddummi": 171, "backenddummyconstructor": 171, "__attribute__": 171, "register_backend": 171, "cpp_function": [171, 248], "libraries_dir": 171, "abspath": 171, "dummy_collect": 171, "michela": 172, "paganini": 172, "biolog": 172, "batteri": 172, "subnetwork": 172, "lotteri": 172, "ticket": 172, "destruct": [172, 281], "0a0": [172, 223], "8e8a5e0": 172, "lecun": 172, "1998": 172, "unprun": 172, "basepruningmethod": 172, "adequ": [172, 174], "weight_orig": 172, "_orig": 172, "intact": [172, 176, 260], "weight_mask": 172, "_mask": 172, "forward_pre_hook": 172, "l1_unstructur": 172, "bias_orig": 172, "bias_mask": 172, "pruningcontain": 172, "compute_mask": 172, "ln_structur": 172, "undo": 172, "reassign": 172, "global_unstructur": 172, "apply_mask": 172, "unstructur": 172, "preprun": 172, "pruning_typ": 172, "pruning_tutori": [172, 181, 283], "sink": 173, "5v": 173, "sd": 173, "card": [173, 179], "8gb": 173, "arm": [173, 236], "64bit": 173, "aarch64": 173, "arm64": [173, 223], "raspberrypi": 173, "raspios_arm64": 173, "rpi": 173, "sdcard": 173, "start_x": 173, "128m": 173, "gpu_mem": 173, "commment": 173, "camera_auto_detect": 173, "v4l2": 173, "reboot": 173, "video4linux2": 173, "video0": 173, "picamera": 173, "36fp": 173, "30fp": 173, "framer": 173, "cv2": 173, "cap": [173, 174, 184], "videocaptur": 173, "cap_prop_frame_width": 173, "cap_prop_frame_height": 173, "cap_prop_fp": 173, "bgr": 173, "ret": [173, 176], "input_tensor": [173, 182], "input_batch": 173, "qnnpack": [173, 195], "mobilenet_v3_larg": 173, "109": 173, "233": [173, 178], "885": [173, 236], "204": [173, 236, 248], "195": [173, 178], "132": 173, "82": [173, 236, 253], "prequant": 173, "20fp": 173, "cap_v4l2": 173, "last_log": 173, "frame_count": 173, "ui": [173, 184, 244, 261, 267], "htop": 173, "mug": 173, "allevi": 173, "set_num_thread": 173, "repetit": [174, 248], "maximis": 174, "clipppoloss": 174, "theta_k": 174, "pi_": 174, "lingua": 174, "franca": 174, "sub_batch_s": 174, "deepmind": [174, 182], "interchang": 174, "panel": [174, 184], "transmit": 174, "gymwrapp": 174, "loos": 174, "supplementari": 174, "stringent": 174, "n_step": [174, 176, 178], "mu_": 174, "d_ob": 174, "d_action": 174, "mu": [174, 187], "normalparamextractor": 174, "probabilisticactor": 174, "tanhnorm": 174, "discount": [174, 175, 176], "amort": [174, 176], "datacollector": 174, "multisyncdatacollector": 174, "refil": 174, "replaybuff": 174, "gae": 174, "value_target": 174, "videorecord": 174, "reinforcement_ppo": [174, 181, 283], "tower": 175, "cart": 175, "pole": 175, "upright": 175, "classic_control": 175, "action_spac": 175, "observation_spac": 175, "decorrel": 175, "replaymemori": 175, "cyclic": 175, "formul": 175, "r_": 175, "t_0": 175, "r_t": 175, "uncertain": 175, "tempor": 175, "max_a": 175, "univers": [175, 187], "obei": 175, "bellman": 175, "huber": 175, "noisi": [175, 248, 262], "mathcal": 175, "le": [175, 180], "mathrm": 175, "select_act": [175, 176, 178], "eps_start": 175, "eps_end": 175, "eps_decai": 175, "plot_dur": 175, "underneath": [175, 190], "tau": 175, "optimize_model": 175, "s_t": 175, "a_t": 175, "num_episod": [175, 176], "target_net": 175, "reinforcement_q_learn": [175, 181, 283], "calle": [176, 177, 228], "unblock": 176, "idl": [176, 184, 253], "callback": 176, "update_and_fetch_model": 176, "future_model": 176, "batch_update_s": 176, "batchupdateparameterserv": 176, "curr_update_s": 176, "get_model": 176, "ps_rref": 176, "local_valu": [176, 177], "setti": 176, "set_result": 176, "rpc_sync": [176, 177, 178, 228], "image_w": 176, "image_h": 176, "one_hot_indic": 176, "random_": 176, "get_worker_info": [176, 178], "543": 176, "num": 176, "affine1": [176, 178], "affine2": [176, 178], "action_scor": [176, 178], "govern": 176, "select_action_batch": 176, "run_episod": [176, 178], "agent_rref": [176, 178], "ep_reward": [176, 178], "num_step": 176, "start_step": 176, "curr_reward": 176, "prob": [176, 178, 185], "saved_log_prob": [176, 178], "rob": 176, "ob_rref": [176, 178], "running_reward": [176, 178], "ob_rank": [176, 178], "ob_info": [176, 178], "observer_nam": [176, 178], "future_act": 176, "pending_st": 176, "select_acion": 176, "ob_id": [176, 178], "log_prob": [176, 178], "stitch": [176, 177], "oberv": [176, 178], "wait_al": 176, "policy_loss": [176, 178], "passiv": [176, 178], "run_work": [176, 177, 178, 228], "n_episod": 176, "print_log": 176, "init_rpc": [176, 177, 178, 228], "agent_nam": [176, 178], "i_episod": [176, 178], "last_reward": [176, 178], "tlast": [176, 178], "taverag": [176, 178], "shutdown": [176, 177, 178, 228], "tik": [176, 228], "tok": [176, 228], "dist_autograd": [177, 178], "num_gpu": 177, "dropout2d": [177, 182, 238], "next_devic": 177, "caller": [177, 228], "call_method": 177, "remote_method": 177, "foo_inst": 177, "parameterserv": 177, "input_devic": 177, "intention": [177, 178, 228], "miscellan": 177, "get_dist_gradi": 177, "get_gradi": 177, "get_param_rref": 177, "cid": 177, "cpu_grad": 177, "k_cpu": 177, "v_cpu": 177, "paramt": 177, "param_rref": [177, 178], "run_parameter_serv": 177, "param_serv": 177, "global_lock": 177, "get_parameter_serv": 177, "parameter_serv": 177, "shut": 177, "offlin": 177, "trainernet": 177, "param_server_rref": 177, "get_global_param_rref": 177, "paramat": 177, "remote_param": [177, 178], "model_output": 177, "run_training_loop": 177, "nueral": 177, "context_id": [177, 178], "get_accuraci": 177, "correct_sum": 177, "trainer_": 177, "traffic": 177, "listen": 177, "subprocess": [177, 248, 263], "rpc_parameter_serv": 177, "solver": 178, "formatter_class": 178, "argumentdefaultshelpformatt": 178, "log_interv": 178, "99": [178, 182], "report_reward": 178, "_max_episode_step": 178, "lifetim": 178, "finfo": 178, "reward_threshold": 178, "finish_episod": 178, "min_reward": 178, "surpass": 178, "ob": 178, "ctrl": 178, "475": 178, "111": [178, 248, 280, 281], "131": 178, "130": [178, 236], "137": 178, "140": 178, "104": 178, "170": [178, 193], "126": 178, "180": [178, 190, 236, 248], "213": 178, "322": [178, 236], "165": 178, "272": [178, 236], "210": 178, "168": [178, 281], "184": 178, "208": [178, 187, 246], "270": [178, 187], "405": 178, "280": 178, "464": 178, "3163778435275": 178, "embeddingt": 178, "destin": [178, 228], "rnnmodel": 178, "ntoken": 178, "ninp": 178, "nhid": 178, "nlayer": 178, "emb_table_rref": 178, "decoder_rref": 178, "_remote_method": 178, "rremot": 178, "_parameter_rref": 178, "parameter_rref": [178, 228], "run_train": 178, "nindic": 178, "driss": 179, "guessou": 179, "multiheadattent": 179, "flashattent": 179, "flash": [179, 200], "andrej": 179, "karpathi": 179, "nanogpt": 179, "causalselfattent": 179, "mine": 179, "616": 179, "726": 179, "amaz": 179, "compiled_causal_attention_trac": 179, "concentr": 179, "6090": 179, "49m": 179, "3273": 179, "17m": 179, "commit": [179, 215, 224], "ae3a8d5": 179, "causal_upper_left": 179, "causal_lower_right": 179, "is_caus": [179, 194, 196], "causalbia": 179, "corner": 179, "attn_scor": 179, "sdpa_kernel": [179, 196], "scaled_dot_product_attention_tutori": [179, 181, 283], "il": 180, "est": [180, 184], "peindr": 180, "tableau": 180, "paint": 180, "pourquoi": 180, "pa": 180, "essay": 180, "vin": 180, "delicieux": 180, "delici": 180, "wine": 180, "poet": 180, "romancier": 180, "she": 180, "novelist": 180, "vou": 180, "trop": 180, "maigr": 180, "skinni": 180, "condens": [180, 262], "unfold": 180, "phrase": 180, "tatoeba": 180, "eng": 180, "manyth": 180, "anki": 180, "fra": 180, "cold": [180, 251, 267, 270, 272, 283], "froid": 180, "dozen": 180, "trim": [180, 262], "lang": 180, "word2index": 180, "index2word": 180, "word2count": 180, "apostroph": 180, "je": 180, "sui": 180, "noir": 180, "attn_appli": 180, "exhibit": 180, "coher": 180, "grammar": 180, "wander": 180, "freedom": 180, "plot_loss": 180, "judgement": 180, "matshow": 180, "iot": 180, "word2vec": 180, "glove": 180, "autoencod": 180, "seq2seq_translation_tutori": [180, 181, 283], "041": 181, "spatial_transformer_tutori": [181, 182, 283], "torchrec_intro_tutori": [181, 191, 283], "torch_compile_tutori": [181, 188, 283], "torch_export_tutori": [181, 189, 190, 283], "sdpa": [181, 194, 196, 283], "sphx_glr_intermediate_transformer_building_block": [181, 283], "transformer_building_block": [181, 194, 283], "na": [181, 283], "sphx_glr_intermediate_mnist_train_na": [181, 283], "tensorboard_profiler_tutori": [181, 184, 283], "ghassen": 182, "hamrouni": 182, "geometr": 182, "invari": [182, 208], "0x7f027dcf7be0": 182, "urllib": 182, "build_open": 182, "addhead": 182, "mozilla": 182, "install_open": 182, "138mb": 182, "238mb": 182, "boil": 182, "affine_grid": 182, "grid_sampl": 182, "conv2_drop": [182, 238], "regressor": 182, "fc_loc": 182, "size_averag": 182, "ntest": 182, "convert_image_np": 182, "visualize_stn": 182, "transformed_input_tensor": 182, "in_grid": 182, "out_grid": 182, "axarr": 182, "5082": 182, "userwarn": 182, "align_corn": 182, "5015": 182, "377223": 182, "32000": 182, "778281": 182, "_reduct": 182, "2688": 182, "9220": 182, "517448": 182, "154362": 182, "4523": 182, "8526": 182, "193018": 182, "147959": 182, "1162": 182, "9667": 182, "374007": 182, "188070": 182, "0785": 182, "9772": 182, "115233": 182, "313378": 182, "0699": 182, "9802": 182, "223008": 182, "124963": 182, "0600": 182, "9820": 182, "289855": 182, "025998": 182, "0594": 182, "9817": 182, "098911": 182, "058813": 182, "0554": 182, "9845": 182, "032574": 182, "184720": 182, "0573": 182, "9830": 182, "151273": 182, "241687": 182, "0538": 182, "9841": 182, "049288": 182, "129114": 182, "0444": 182, "9866": 182, "115460": 182, "108654": 182, "0738": 182, "9783": 182, "259828": 182, "050361": 182, "0482": 182, "136493": 182, "184315": 182, "1982": 182, "9387": 182, "687369": 182, "233240": 182, "0419": 182, "9886": 182, "117748": 182, "213766": 182, "9880": 182, "160282": 182, "069350": 182, "0726": 182, "9757": 182, "268947": 182, "046919": 182, "0369": 182, "9898": 182, "033918": 182, "033581": 182, "0454": 182, "045866": 182, "142566": 182, "0572": 182, "9844": 182, "speech_recognition_pipeline_tutori": 183, "perfetto": 184, "warmup": [184, 194, 220, 226, 227, 235, 236, 253, 276, 277], "on_trace_readi": [184, 253], "tensorboard_trace_handl": 184, "record_shap": [184, 253], "profile_memori": [184, 253], "torch_tb_profil": 184, "safari": 184, "pytorch_profil": 184, "breakdown": 184, "dropdown": 184, "callstack": 184, "multiprocessor": 184, "occup": 184, "tooltip": 184, "toolbar": 184, "keyboard": 184, "mous": 184, "resnet18_4work": 184, "76m": 184, "132m": 184, "torchtbprofil": 184, "memory_demo_1_10": 184, "gpu0": 184, "children": [184, 253], "distributed_bert": 184, "docker": 184, "profiler_tutori": 184, "test_cifar10": 184, "vi": 184, "hub": 184, "kfd": 184, "sys_ptrac": 184, "seccomp": 184, "unconfin": 184, "shm": [184, 228], "8g": 184, "apt": [184, 187, 281], "libjpeg": 184, "whl": [184, 188, 191, 200], "rocm5": 184, "scp": 184, "testset": 185, "testload": 185, "plot_classes_pr": 185, "fashion_mnist_experiment_1": 185, "four_fashion_mnist_imag": 185, "refresh": [185, 191], "select_n_random": 185, "datapoint": 185, "perm": 185, "randperm": 185, "class_label": [185, 187], "label_img": 185, "thoroughli": 185, "images_to_prob": 185, "preds_tensor": 185, "el": 185, "add_subplot": 185, "add_figur": 185, "global_step": [185, 261], "scroll": 185, "test_siz": 185, "class_prob": 185, "class_probs_batch": 185, "test_prob": 185, "test_label": 185, "add_pr_curve_tensorboard": 185, "class_index": 185, "tensorboard_truth": 185, "tensorboard_prob": 185, "add_pr_curv": 185, "poke": 185, "tacotron2_pipeline_tutori": 186, "wsi": 187, "tissu": 187, "surgeri": 187, "biopsi": 187, "scanner": 187, "pathologist": 187, "diseas": 187, "cancer": 187, "microscop": 187, "tumor": 187, "growth": [187, 210], "patient": 187, "000x100": 187, "25x0": 187, "micron": 187, "pyramid": 187, "magnif": 187, "sketch": 187, "histoencod": 187, "jopo666": 187, "openjpeg": 187, "openslid": 187, "pixman": 187, "qq": 187, "libopenjp2": 187, "libpixman": 187, "echo": 187, "brew": 187, "__future__": [187, 252, 260], "hashandl": 187, "nopython": 187, "shutil": 187, "zipfil": 187, "mpl": 187, "cm": 187, "sklearn": 187, "accuracy_scor": 187, "confusion_matrix": 187, "patch_predictor": 187, "iopatchpredictorconfig": 187, "misc": 187, "download_data": 187, "grab_files_from_dir": 187, "overlay_prediction_mask": 187, "wsicor": 187, "wsiread": 187, "rcparam": 187, "dpi": 187, "facecolor": 187, "on_gpu": 187, "suppress": 187, "overli": 187, "suppress_console_output": 187, "redirect_stderr": 187, "stringio": 187, "abnorm": [187, 244], "global_save_dir": 187, "rmdir": 187, "dir_path": 187, "is_dir": 187, "rmtree": 187, "kather": 187, "100k": 187, "wsi_path": 187, "sample_wsi": 187, "sv": 187, "patches_path": 187, "kather100k": 187, "weights_path": 187, "dc": 187, "warwick": 187, "uk": 187, "tcga": 187, "3l": 187, "aa1b": 187, "01z": 187, "dx1": 187, "8923a151": 187, "a690": 187, "40b7": 187, "9e5a": 187, "fcbedfc2394f": 187, "extractal": 187, "pc": 187, "label_list": 187, "patch_list": 187, "dataset_path": 187, "image_ext": 187, "tif": 187, "label_dict": 187, "glass": 187, "mucosa": 187, "deb": 187, "debri": 187, "tum": 187, "colorect": 187, "adenocarcinoma": 187, "epithelium": 187, "adi": 187, "adipos": 187, "muc": 187, "mucu": 187, "stroma": 187, "lym": 187, "lymphocyt": 187, "dataset_class_path": 187, "patch_list_single_class": 187, "file_typ": 187, "299": 187, "211": [187, 236, 253], "176": 187, "178": 187, "209": 187, "232": [187, 248], "modelabc": 187, "tia": 187, "toolbox": 187, "readthedoc": 187, "_autosummari": 187, "models_abc": 187, "preproc_func": 187, "predictor": [187, 278], "pretrained_weight": 187, "cnnmodel": 187, "fromarrai": 187, "conf": [187, 238], "df_cm": 187, "993000": 187, "000000": 187, "00000": 187, "988636": 187, "011364": 187, "991304": 187, "008696": 187, "996503": 187, "003497": 187, "004808": 187, "990385": 187, "988764": 187, "011236": 187, "996296": 187, "003704": 187, "004785": 187, "985646": 187, "004310": 187, "99569": 187, "input_resolut": 187, "patch_input_shap": 187, "stride_shap": 187, "wsi_ioconfig": 187, "mpp": 187, "return_prob": 187, "ioconfig": 187, "greatest": [187, 247], "merge_predict": 187, "wsi_output": 187, "wsi_predict": 187, "overlai": 187, "overlay_patch_predict": 187, "overview_resolut": 187, "overview_unit": 187, "wsi_overview": 187, "slide_thumbnail": 187, "label_color_dict": 187, "get_cmap": 187, "set1": 187, "pred_map": 187, "label_info": 187, "return_ax": 187, "histologi": 187, "pohjonen": 187, "joona": 187, "helsinki": 187, "umap": 187, "semantic_segmentor": 187, "deepfeatureextractor": 187, "iosegmentorconfig": 187, "histoencwrapp": 187, "histoenc": 187, "feat_extract": 187, "extract_featur": 187, "num_block": 187, "avg_pool": 187, "infer_batch": 187, "batch_data": 187, "img_patches_devic": 187, "inference_mod": [187, 217], "create_encod": 187, "prostate_medium": 187, "662": 187, "446": 187, "605": 187, "169": [187, 236], "155": 187, "output_resolut": 187, "patch_output_shap": 187, "auto_generate_mask": 187, "otsu": 187, "num_loader_work": 187, "num_postproc_work": 187, "wsi_featur": 187, "umap_reduc": 187, "n_neighbor": 187, "n_compon": 187, "manhattan": 187, "random_st": 187, "fit_transform": 187, "npy": 187, "feat": 187, "5mpp": 187, "4mpp": 187, "histolog": 187, "william": [188, 190, 276], "devel": 188, "elsewher": 188, "torchinductor": [188, 201, 202, 211, 263, 272], "torchtriton": 188, "cu117": 188, "opt_mod": 188, "mod": [188, 190, 220, 278], "complex_funct": 188, "complex_conjug": 188, "outer_funct": 188, "_orig_": 188, "dashboard": [188, 261], "struggl": 188, "fn1": 188, "fn2": 188, "f2": 188, "disallow": 188, "zhengxu": 190, "angela": [190, 277], "pian": 190, "pawakapan": 190, "synonym": 190, "dynamic_shap": [190, 278], "graph_signatur": 190, "range_constraint": 190, "stronger": [190, 278], "safeti": [190, 278], "cond": 190, "predic": 190, "true_fn": 190, "false_fn": 190, "while_loop": 190, "associative_scan": 190, "adher": [190, 219], "x0": [190, 193, 211, 235], "x1": [190, 193, 211, 235], "s0": 190, "s1": 190, "x2": [190, 235], "x3": [190, 235], "s3": 190, "s5": 190, "proof": 190, "_log": [190, 235, 279], "set_log": [190, 235], "spit": 190, "create_symbol": 190, "int_oo": 190, "2841": 190, "runtime_assert": 190, "ncreate_symbol": 190, "nruntime_assert": 190, "dynamic_shapes_tutori": 190, "_subclass": [190, 278], "fake_impl": 190, "845": [190, 280], "infer_s": [190, 262], "torchdynamo_extended_debug_guard_ad": 190, "_meta_registr": 190, "2127": 190, "meta_mm": 190, "aliv": 190, "attract": 190, "friction": 190, "believ": [190, 208], "stanc": [190, 276], "constraintviol": 190, "unrel": [190, 276], "univari": 190, "diverg": [190, 207, 209, 248], "unbind": 190, "unback": 190, "nomenclatur": 190, "absenc": [190, 231, 246], "u0": 190, "unhint": 190, "is_compil": 190, "invas": 190, "bypass": [190, 211], "offend": 190, "smarter": 190, "prevail": 190, "prohibit": 190, "_check_is_s": 190, "guard_size_oblivi": 190, "starter": 190, "guardondatadependentsymnod": 190, "_schema": 190, "is_mut": 190, "export_for_train": 190, "run_decomposit": 190, "mutabl": 190, "conv1d": [190, 224, 263], "cond_pred": 190, "tensorrt": [190, 195], "pt2_path": 190, "aoti_compile_and_packag": [190, 277], "compiler_aot_inductor": 190, "aoti_compil": 190, "aoti_load_packag": [190, 277], "cu121": [191, 200], "fbgemm_gpu": 191, "torchmetr": 191, "cardin": 191, "relationship": 191, "hash": 191, "conjunct": [191, 198, 199, 263], "ctr": 191, "dlrm": [191, 263], "embedding_collect": 191, "embedding_bag_collect": 191, "vast": [191, 210], "collis": [191, 262], "80g": 191, "embeddingcollect": 191, "jaggedtensor": 191, "keyedjaggedtensor": 191, "keyedtensor": 191, "product_t": 191, "user_t": 191, "id_list_featur": 191, "id_score_list_featur": 191, "id_list_feature_offset": 191, "q1": 191, "product_jt": 191, "user_jt": 191, "q2": 191, "reread": 191, "to_dict": 191, "congrat": 191, "pat": 191, "grasp": 191, "scarc": [191, 229], "hbm": 191, "gb": [191, 194], "shardedembeddingbagcollect": 191, "incredibli": 191, "ton": 191, "everytim": 191, "await": 191, "input_dist": 191, "tbe": 191, "output_dist": 191, "twpooledembeddingshard": 191, "kjt": 191, "canon": 191, "dmp": 191, "hyperoptim": 191, "combinedoptim": 191, "keyedoptim": 191, "in_backward_optimizer_filt": 191, "fused_optim": 191, "fused_param": 191, "apply_optimizer_in_backward": 191, "criteo": 191, "1tb": 191, "penn": 193, "fudan": 193, "databas": [193, 272, 273], "pedestrian": 193, "keypoint": 193, "tv_tensor": 193, "boundingbox": 193, "y0": 193, "image_id": 193, "iscrowd": 193, "pycocotool": 193, "gautamchitni": 193, "git": [193, 200], "cocoapi": 193, "cocodataset": 193, "pythonapi": 193, "get_height_and_width": 193, "ci": 193, "upenn": 193, "edu": 193, "jshi": 193, "ped_html": 193, "pennfudanp": 193, "pedmask": 193, "fudanped00001_mask": 193, "fudanped00002_mask": 193, "fudanped00003_mask": 193, "fudanped00004_mask": 193, "pngimag": 193, "fudanped00001": 193, "fudanped00002": 193, "fudanped00003": 193, "fudanped00004": 193, "tvtensor": 193, "zoo": 193, "fasterrcnn": 193, "rpn": 193, "anchor": 193, "featmap_nam": 193, "rcnn": 193, "train2017": 193, "mikayla": [194, 252, 260], "gawarecki": [194, 252, 260], "jag": [194, 212], "famili": [194, 236, 281], "xformer": 194, "torchtun": 194, "rag": [194, 212], "ux": [194, 212, 214], "key_padding_mask": 194, "qk": 194, "premis": 194, "rmsnorm": 194, "sinusoid": 194, "rotari": [194, 196], "alibi": 194, "threefold": 194, "query_padding_mask": 194, "mha": [194, 208], "nestedtensor": [194, 212, 215, 218, 283], "cleanli": [194, 226, 227, 235, 274, 279], "zipf": [194, 212], "attn_mask": 194, "padded_tim": 194, "03454": 194, "padded_peak_memori": 194, "nested_tim": 194, "00612": 194, "nested_peak_memori": 194, "padded_bw_tim": 194, "09337": 194, "padded_bw_peak_mem": 194, "nested_bw_tim": 194, "01452": 194, "nested_bw_peak_mem": 194, "144": [194, 236], "out_proj": 194, "000244140625": 194, "packed_proj": 194, "001556396484375": 194, "001953125": 194, "causal": 194, "trust": 194, "ragged": 194, "alibi_mod": 194, "block_mask": 194, "create_nested_block_mask": 194, "e_q": 194, "e_tot": 194, "05x": 194, "swish": 194, "08x": [194, 236], "kv": [194, 196], "lucidrain": 194, "navit": 194, "visiontransform": 194, "readm": 195, "prepare_fx": 195, "convert_fx": 195, "default_weight_observ": 195, "get_default_qconfig_map": 195, "minmaxobserv": 195, "backend_config": 195, "backendpatternconfig": 195, "dtypewithconstraint": 195, "observationtyp": 195, "quantize_fx": 195, "fp32_linear": 195, "quant1": 195, "dequant1": 195, "quant2": 195, "dequant2": 195, "fp32_conv_relu": 195, "quint8_with_constraint": 195, "quant_min_lower_bound": 195, "quant_max_upper_bound": 195, "scale_min_lower_bound": 195, "weighted_int8_dtype_config": 195, "input_dtyp": [195, 198], "weight_dtyp": 195, "qint8": 195, "bias_dtyp": 195, "fuse_conv2d_relu": 195, "convrelu2d": 195, "linear_config": 195, "set_pattern": 195, "set_observation_typ": 195, "output_use_different_observer_as_input": 195, "add_dtype_config": 195, "set_root_modul": 195, "set_qat_modul": 195, "set_reference_quantized_modul": 195, "conv_relu_config": 195, "set_fused_modul": 195, "set_fuser_method": 195, "fused_conv_relu_config": 195, "my_backend": 195, "set_backend_pattern_config": 195, "quant_max": 195, "activation_observ": 195, "with_arg": 195, "quant_min": 195, "qconfig_map": 195, "set_object_typ": 195, "use_bn": 195, "quantizedlinear": 195, "012136868201196194": 195, "zero_point": 195, "qscheme": 195, "per_tensor_affin": 195, "quantizedconvrelu2d": 195, "0029353597201406956": 195, "linear_input_scale_0": 195, "linear_input_zero_point_0": 195, "quantize_per_tensor": [195, 238], "dequantize_2": 195, "015307803638279438": 195, "track_running_stat": 195, "dequantize_1": 195, "get_fbgemm_backend_config": 195, "get_qnnpack_backend_config": 195, "get_native_backend_config": 195, "union": 195, "md": 195, "rfc": [195, 208, 211, 216], "0019": 195, "chien": [196, 229, 230], "chin": [196, 229, 230], "llama3": 196, "freq_ci": 196, "context_parallel": 196, "buffer_seq_dim": 196, "miscalcul": 196, "set_rotate_method": 196, "sdpbackend": 196, "sdpa_exampl": 196, "nhead": 196, "qkv_len": 196, "8192": [196, 248], "flash_attent": 196, "cudnn_attent": 196, "qkv": 196, "cp_sdpa_exampl": 196, "_attent": 196, "context_parallel_unshard": 196, "context_parallel_sdpa_exampl": 196, "device_typ": [196, 271], "mesh_shap": 196, "mesh_dim_nam": [196, 232], "cp_qkv": 196, "cp_out": 196, "alltoal": [196, 263], "junji": 198, "impedi": 198, "starvat": 198, "deadlock": 198, "indefinit": 198, "diagnost": 198, "flight_record": 198, "torch_nccl_trace_buffer_s": 198, "torch_nccl_dump_on_timeout": 198, "torch_nccl_debug_info_temp_fil": 198, "nccl_trace_rank_": 198, "torch_nccl_trace_cpp_stack": 198, "torch_symbolize_mod": 198, "torch_nccl_enable_tim": 198, "dladdr": 198, "addr2lin": 198, "debuginfowrit": 198, "registerwrit": 198, "_distributed_c10d": [198, 235], "_dump_nccl_trac": 198, "includecollect": 198, "includestacktrac": 198, "onlyact": 198, "pg_config": 198, "default_pg": 198, "pg_statu": 198, "last_enqueued_collect": 198, "last_started_collect": 198, "last_completed_collect": 198, "test_short_pickl": 198, "test_c10d_nccl": 198, "3647": 198, "spawn_main": 198, "record_id": 198, "pg_id": 198, "collective_seq_id": 198, "p2p_seq_id": 198, "op_id": 198, "profiling_nam": 198, "time_created_n": 198, "1724779239936775119": 198, "time_discovered_started_n": 198, "time_discovered_completed_n": 198, "1724779239975811724": 198, "retir": 198, "timeout_m": 198, "600000": 198, "is_p2p": 198, "fr_trace": 198, "use_distribut": 198, "torchfrtrac": 198, "culprit": 198, "recod": 198, "trace_": 198, "trace_0": 198, "trace_1": 198, "bounc": 199, "gd": 199, "cufil": 199, "4kb": 199, "storage_align": 199, "gdsfile": 199, "skip_data": 199, "faketensormod": 199, "gds_register_buff": 199, "cufilebufregist": 199, "save_storag": 199, "cufilewrit": 199, "load_storag": 199, "cufileread": 199, "gpu_direct_storag": [199, 218, 283], "hdcharl": 200, "pg509": 200, "330": 200, "myenv": 200, "facebookresearch": 200, "vit_h": 200, "dl": [200, 224, 238], "fbaipublicfil": 200, "segment_anyth": 200, "sam_vit_h_4b8939": 200, "sam_checkpoint_base_path": 200, "image_encod": 200, "instant": 200, "protect": 200, "bf16": [200, 211, 224, 236], "43m": 200, "17gb": 200, "7x": 200, "186": [200, 236], "16m": 200, "95m": 200, "24gb": 200, "autotun": [200, 215, 263, 272, 273, 275], "int4": 200, "int8dynamicactivationint8weightconfig": 200, "int8weightonlyconfig": 200, "int4weightonlyconfig": 200, "apply_dynamic_qu": 200, "apply_weight_only_int8_qu": 200, "04m": 200, "58gb": 200, "int32": [200, 235], "force_fuse_int_mm_with_mul": 200, "78m": 200, "37gb": 200, "unquant": 200, "epilogu": [200, 211], "enlarg": 200, "39gb": 200, "10x": [200, 224], "appl": 200, "677": 200, "28m": 200, "729": 200, "gpu_quantization_torchao_tutori": [200, 218, 283], "chunyuan": [201, 211], "bao": [201, 277], "cpp_wrapper": 201, "opt_fn": 201, "assert_size_strid": [201, 235], "empty_strid": [201, 223, 235, 253], "cpp_fused_add_lift_fresh_0": 201, "c_void_p": [201, 235], "constant0": 201, "inductor_entry_cpp": 201, "19l": 201, "cppwrappercodecach": 201, "cpp_wrapper_src": 201, "c2buojsvlqbywxe3itb43hldieh4jqulk72iswa2awalwev7hjn2": 201, "_wrap_func": 201, "args_tensor": 201, "constants_tensor": 201, "_deviceguard": [201, 235], "lift_fresh": 201, "stream0": [201, 235], "get_cuda_stream": 201, "triton_poi_fused_add_lift_fresh_0": 201, "run_intermediate_hook": [201, 235], "cudaguard": 201, "device_guard": 201, "loadkernel": 201, "torchinductor_us": 201, "cmm6xjgijjffxjku4akv55eyzibirvw6bti6uqmfnruujm5cvvmw": 201, "cubin": [201, 273, 277], "triton_poi_fused_add_lift_fresh_0_0d1d2d3": 201, "cudeviceptr": 201, "var_0": 201, "reinterpret_cast": 201, "var_1": 201, "var_2": 201, "var_3": 201, "kernel_args_var_0": 201, "cudastream_t": 201, "getcurrentcudastream": 201, "launchkernel": 201, "czbpeilh4qqmbyejdgsbpdfuk2ss5jigl2qjb7xs4gearrjvuwem": 201, "zhaoqiong": 202, "zheng": 202, "xu": 202, "msvc": 202, "desktop": 202, "checkmark": 202, "cmd": 202, "vc": 202, "auxiliari": [202, 224], "vcvars64": 202, "opt_foo1": 202, "9074e": 202, "3994e": 202, "3894e": 202, "2630e": 202, "3060e": 202, "1833e": 202, "4016e": 202, "1905e": 202, "0637e": 202, "3648e": 202, "3728e": 202, "2863e": 202, "6888e": 202, "5442e": 202, "6790e": 202, "2025e": 202, "2647e": 202, "2684e": 202, "2483e": 202, "2845e": 202, "7747e": 202, "2028e": 202, "1431e": 202, "7196e": 202, "5304e": 202, "1945e": 202, "6654e": 202, "7376e": 202, "3644e": 202, "3600e": 202, "0157e": 202, "7200e": 202, "0146e": 202, "8175e": 202, "4057e": 202, "8119e": 202, "2853e": 202, "2773e": 202, "5082e": 202, "4615e": 202, "4140e": 202, "2130e": 202, "0762e": 202, "3914e": 202, "1122e": 202, "6895e": 202, "8852e": 202, "3310e": 202, "4101e": 202, "8318e": 202, "2355e": 202, "9290e": 202, "3707e": 202, "3754e": 202, "3768e": 202, "8970e": 202, "1171e": 202, "9944e": 202, "2553e": 202, "3394e": 202, "3428e": 202, "8400e": 202, "1756e": 202, "0654e": 202, "7973e": 202, "4019e": 202, "1886e": 202, "9194e": 202, "3632e": 202, "1811e": 202, "1615e": 202, "6622e": 202, "2089e": 202, "2011e": 202, "0659e": 202, "0892e": 202, "1932e": 202, "3888e": 202, "3898e": 202, "3218e": 202, "4139e": 202, "4000e": 202, "1192e": 202, "0175e": 202, "6432e": 202, "0498e": 202, "4115e": 202, "3212e": 202, "0964e": 202, "0127e": 202, "7244e": 202, "2799e": 202, "3595e": 202, "0907e": 202, "7191e": 202, "4062e": 202, "3672e": 202, "8502e": 202, "5216e": 202, "6046e": 202, "icx": 202, "win64": 202, "inductor_window": 203, "mobile_interpret": 206, "1369": 207, "weed": 207, "state_sum": 207, "addcmul_": 207, "addcdiv_": 207, "clr": 207, "_make_spars": 207, "grad_indic": 207, "sparse_coo_tensor": [207, 210], "coalesc": [207, 247], "_indic": 207, "grad_valu": 207, "_valu": 207, "sparse_mask": [207, 210], "std_valu": 207, "sqrt_": 207, "state_sum2": 207, "masked_grad": 207, "get_data": [207, 209], "std2": 207, "masked_tensor": [207, 209, 210], "to_spars": [207, 210], "param2": [207, 219], "glanc": [207, 260], "dodg": 207, "make_spars": 207, "brittl": 207, "argu": 207, "densif": 207, "csc": [207, 210], "bsr": [207, 210], "bsc": 207, "conflat": 207, "disentangl": 207, "purposefulli": 207, "relianc": 207, "unreli": [207, 209], "maskedarrai": [207, 215], "maskedtensor_adagrad": [207, 218, 283], "maskedtensor_overview": [208, 209, 210, 218, 283], "Their": [208, 210], "unspecifi": [208, 209, 210, 215], "intersect": 208, "logical_or": 208, "to_tensor": [208, 209], "mt0": 208, "get_mask": [208, 209], "mt1": 208, "revisit": 208, "ma": 208, "masked_arrai": 208, "mask0": 208, "mask1": 208, "necessit": 208, "maskedtensor_advanced_semant": [208, 218, 283], "as_masked_tensor": 209, "as_tensor": 209, "afterthought": 209, "born": 209, "recur": 209, "inabl": 209, "10729": 209, "troubl": 209, "52248": 209, "frustrat": 209, "4132": 209, "67180": 209, "longstand": 209, "unsaf": 209, "61474": 209, "nanmax": 209, "nanmin": 209, "lend": 209, "substructur": 210, "sparse_coo": 210, "sparse_csr": 210, "ndim": 210, "nse": 210, "int64": 210, "sparse_tensor_data": 210, "sparse_tensor_mask": 210, "dense_masked_tensor": 210, "to_sparse_coo": 210, "to_sparse_csr": 210, "nuanc": 210, "crow_indic": 210, "col_indic": 210, "nnz": 210, "to_dens": 210, "is_spars": 210, "is_sparse_coo": 210, "is_sparse_csr": 210, "mt": 210, "mt2": 210, "surfac": 210, "synergi": 210, "invest": 210, "maskedtensor_spars": [210, 218, 283], "lesli": 211, "fang": 211, "onednn": [211, 224, 236, 237, 244], "torchinductor_max_autotune_gemm_backend": 211, "upfront": [211, 252], "torchinductor_freez": 211, "log_autotuning_result": 211, "amp_en": 211, "outperform": 211, "linear_unari": 211, "64x16": 211, "32x16": 211, "cpp_packed_gemm_0": 211, "2142": 211, "_linear_pointwis": 211, "2441": 211, "mkldnn": [211, 224, 236], "anymor": [211, 261], "cpp_fused__to_copy_relu_1": 211, "async_compil": [211, 235], "cpp_pybind": [211, 235], "kernel_micro_gemm_amx_kernel_32_2": 211, "amxstat": 211, "amx_stat": 211, "lda": 211, "ldb": 211, "ldc": 211, "uint8_t": 211, "tilecfg_row": 211, "kernel_micro_gemm": 211, "constexpr": [211, 235], "num_thread": [211, 248], "64l": 211, "omp": [211, 281], "tid": 211, "omp_get_thread_num": 211, "mc_block_id": 211, "num_mc_blocks_per_thread": 211, "n_block_start": 211, "n_block_end": 211, "nc_block": 211, "kc": 211, "k_block_start": 211, "k_block_end": 211, "kc_block": 211, "nci": 211, "nc_block_end": 211, "m_end": 211, "m_start": 211, "16l": 211, "div_floor_integ": 211, "n_end": 211, "n_start": 211, "loadu": 211, "local_acc_buf": 211, "nr": 211, "tmp4": [211, 235], "tmp5": [211, 235], "tmp6": [211, 235], "tmp7": [211, 235], "tmp8": [211, 235], "32l": 211, "invalu": 212, "nt": 212, "poss": 212, "irregularli": 212, "legal": 212, "semnat": 212, "law": 212, "daniil": 214, "lyakhov": 214, "aamir": 214, "nazir": 214, "suslov": 214, "yamini": 214, "nimmagadda": 214, "kozlov": 214, "openvinoquant": 214, "quantize_pt2": 214, "prepare_pt2": 214, "convert_pt2": 214, "traced_b": 214, "disable_patch": 214, "exported_model": 214, "asymmetr": 214, "prelu": 214, "quantizationpreset": 214, "model_typ": 214, "modeltyp": 214, "ignored_scop": 214, "layer_1": 214, "layer_2": 214, "layer_3": 214, "ignoredscop": 214, "regex": 214, "layer_": 214, "subgraph": 214, "target_devic": 214, "cpu_spr": 214, "targetdevic": 214, "prepared_model": 214, "fold_quant": 214, "optimized_model": 214, "smoothquant": 214, "biascorrect": 214, "calibration_load": 214, "transform_fn": 214, "data_item": 214, "calibration_dataset": 214, "smooth_quant": 214, "fast_bias_correct": 214, "pypi": [215, 238], "optimizi": 215, "nnapi": 215, "autovector": [215, 222], "maskedtensor": [215, 218, 283], "coo": 215, "csr": 215, "flight": 215, "flightrecord": 215, "autoload": 215, "gpudirect": [215, 218, 283], "yuanhao": 216, "ji": 216, "effortless": 216, "gaudi": 216, "hpu": 216, "huawei": 216, "torch_device_backend_autoload": 216, "torch_foo": 216, "_autoload": 216, "entry_point": 216, "habana_framework": 216, "__autoload": 216, "device_backend": 216, "is_load": 216, "entrypoint": 216, "_force_cutlass": 217, "2560": 217, "10240": 217, "dense_output": 217, "dense_t": 217, "stmt": [217, 226, 235, 248], "blocked_autorang": [217, 226, 235, 248], "median": [217, 248, 262], "1e3": 217, "sparse_output": 217, "sparse_t": 217, "80gb": 217, "870m": 217, "630m": 217, "382x": 217, "weightnormsparsifi": 217, "preprocess_validation_funct": 217, "384": [217, 278], "only_second": 217, "return_overflowing_token": 217, "return_offsets_map": 217, "sample_map": 217, "overflow_to_sample_map": 217, "example_id": 217, "sample_idx": 217, "sequence_id": 217, "offset_map": 217, "preprocess_train_funct": 217, "start_posit": 217, "end_posit": 217, "start_char": 217, "answer_start": 217, "end_char": 217, "context_start": 217, "context_end": 217, "compute_metr": 217, "start_logit": 217, "end_logit": 217, "n_best": 217, "max_answer_length": 217, "example_to_featur": 217, "defaultdict": 217, "predicted_answ": 217, "feature_index": 217, "start_index": 217, "argsort": 217, "end_index": 217, "logit_scor": 217, "best_answ": 217, "prediction_text": 217, "theoretical_answ": 217, "measure_execution_tim": 217, "dataset_for_model": 217, "remove_column": 217, "set_format": 217, "batch_size_to_time_sec": 217, "column_nam": 217, "p50": 217, "automodelforquestionansw": 217, "squad_dataset": 217, "tokenized_squad_dataset": 217, "data_col": 217, "datacollatorwithpad": 217, "hyperparam": 217, "training_arg": 217, "trainingargu": 217, "num_train_epoch": 217, "lr_scheduler_typ": 217, "per_device_train_batch_s": 217, "per_device_eval_batch_s": 217, "eval_dataset": 217, "fp16_baselin": 217, "fp16_time": 217, "cuda_fp16": 217, "exact_match": 217, "53358561967833": 217, "9280493093186": 217, "927572380751371": 217, "607915310189128": 217, "18846387788653": 217, "91255673766136": 217, "sparsity_level": 217, "elemen": 217, "sparse_block_shap": 217, "zeros_per_block": 217, "sparse_config": 217, "tensor_fqn": 217, "fqn": [217, 229, 230], "named_modul": 217, "paramter": 217, "bertoutput": 217, "parametrizedlinear": 217, "fakespars": 217, "elementwise_affin": 217, "59602649006622": 217, "51610004515979": 217, "set_printopt": [217, 248], "edgeitem": 217, "0237": 217, "0130": 217, "0462": 217, "0272": 217, "0436": 217, "0492": 217, "0844": 217, "0340": 217, "0302": 217, "0350": 217, "0303": 217, "0175": 217, "0529": 217, "0327": 217, "0213": 217, "0258": 217, "0239": 217, "0380": 217, "0562": 217, "0432": 217, "0598": 217, "0262": 217, "0227": 217, "0244": 217, "0921": 217, "0784": 217, "0761": 217, "0225": 217, "0395": 217, "0684": 217, "0344": 217, "metrics_spars": 217, "sparse_perf": 217, "43897824030275": 217, "48718950090766": 217, "621004460379481": 217, "368514601141214": 217, "702805917710066": 217, "244": [217, 244], "19364519417286": 217, "87x": 217, "torchao": [218, 283], "torchscript_freez": [218, 220, 283], "vmap_recip": [218, 222, 283], "uniform": [219, 281], "orthogonal_": 219, "skip_init": 219, "param1": 219, "kaiming_uniform_": 219, "register_buff": 219, "some_buff": 219, "intial": 219, "0107": 220, "0048": 220, "42368": 222, "unsuccessfulli": 222, "rummag": 222, "shenanigin": 222, "8304": 222, "23475": [222, 235], "performantli": 222, "7786": 222, "batch_of_sampl": 222, "grad_sampl": 222, "ivan": 223, "kobzarev": 223, "use_vulkan": 223, "vulkan_wrapp": 223, "use_vulkan_wrapp": 223, "libvulkan": 223, "vulkansdk": 223, "lunarg": 223, "vulkan_sdk": 223, "vulkan_sdk_root": 223, "install_vulkan": 223, "pytorch_root": 223, "use_vulkan_shaderc_runtim": 223, "macosx_deployment_target": 223, "41237a4": 223, "android_abi": 223, "v8a": 223, "build_android": 223, "pytorch_android": 223, "aar": 223, "build_pytorch_android": 223, "script_model": 223, "mobilenet2": 223, "32bit": 223, "mobile_optim": 223, "optimize_for_mobil": 223, "script_model_vulkan": 223, "optimization_blocklist": 223, "mobileoptimizertyp": 223, "vulkan_automatic_gpu_transf": 223, "is_vulkan_avail": 223, "tensor_vulkan": 223, "tensor_output_vulkan": 223, "tensor_output": 223, "_adaptive_avg_pool2d": 223, "_cat": 223, "avg_pool2d": 223, "hardtanh_": 223, "relu_": 223, "transpose_": 223, "upsample_nearest2d": 223, "floatbuff": 223, "allocatefloatbuff": 223, "fromblob": 223, "mmodul": 223, "test_app": 223, "testapp": 223, "mainact": 223, "l133": 223, "apploc": 223, "asset": 223, "gradl": 223, "installmbvulkanlocalbasedebug": 223, "mbq": 223, "swiftshad": 223, "googlesourc": 223, "tmul": 224, "gen": 224, "processor": [224, 237, 263, 267, 281], "avx": [224, 237], "vnni": [224, 237], "024": 224, "conv3d": [224, 263], "conv_transpose1d": 224, "conv_transpose2d": 224, "conv_transpose3d": 224, "baddbmm": 224, "addbmm": 224, "onednn_verbos": 224, "verbose_on": 224, "6dbeffbae1f23cbbeae17adb7b5b13f1f37c080": 224, "openmp": [224, 244], "nthr": 224, "isa": 224, "prim_templ": 224, "prop_kind": 224, "memory_descriptor": 224, "problem_desc": 224, "exec_tim": 224, "exec": 224, "reorder": [224, 236, 244, 263], "undef": 224, "src_f32": 224, "f0": 224, "dst_f32": 224, "scratchpad": 224, "2561": 224, "avx512_core_amx_bf16": 224, "forward_train": 224, "src_bf16": 224, "acdb": 224, "wei_bf16": 224, "abcd16b16a2b": 224, "bia_f32": 224, "dst_bf16": 224, "alg": 224, "convolution_direct": 224, "mb7_ic2oc1_ih224oh111kh3sh2dh1ph1_iw224ow111kw3sw2dw1pw1": 224, "628906": 224, "brg": 224, "avx512_core_amx_int8": 224, "src_s8": 224, "wei_s8": 224, "ba16a64b4a": 224, "dst_s8": 224, "1x30522": 224, "30522x768": 224, "1x768": 224, "66382": 224, "lazo": [226, 227, 235, 274, 279], "get_device_cap": [226, 235], "benchmark_torch_function_in_microsecond": [226, 235], "eager_runtim": [226, 235], "compiled_runtim": [226, 235], "747": 226, "2437149845064u": 226, "392": 226, "07384741178u": 226, "linearlr": 227, "compiling_optimizer_lr_schedul": [227, 270, 283], "set_device_map": 228, "worker0": 228, "worker1": 228, "payload": [228, 260], "infiniband": 228, "cma": 228, "comm_mod": [228, 231], "pend": [228, 261], "current_stream": 228, "tensorpiperpcbackendopt": 228, "num_worker_thread": 228, "rpc_backend_opt": 228, "34x": 228, "3145179748535156": 228, "06867480278015137": 228, "luca": [229, 230], "pasqualin": [229, 230], "iri": [229, 230, 232], "rodrigo": [229, 230], "kumpera": [229, 230], "async_sav": 229, "checkpoint_size_per_rank": 229, "number_of_rank": 229, "pageabl": 229, "get_state_dict": [229, 230], "set_state_dict": [229, 230], "appstat": [229, 230], "protocol": [229, 230], "load_stat_dict": [229, 230], "sharded_state_dict": [229, 230], "optim_state_dict": [229, 230], "run_fsdp_checkpoint_save_exampl": [229, 230], "checkpoint_futur": 229, "checkpoint_id": [229, 230], "_step": 229, "attack": 229, "storagewrit": 229, "cached_state_dict": 229, "storage_writ": 229, "adddition": 230, "run_fsdp_checkpoint_load_exampl": 230, "run_checkpoint_load_exampl": 230, "format_util": 230, "torch_to_dcp": 230, "dcp_to_torch": 230, "dcp_to_torch_sav": 230, "torch_save_to_dcp": 230, "torch_save_checkpoint_dir": 230, "torch_save_checkpoint": 230, "_new": 230, "anshul": 231, "sinha": 231, "distributedtensor": 231, "interoper": 231, "mlpmodul": 231, "generate_comm_debug_tracing_t": 231, "noise_level": 231, "log_comm_debug_tracing_table_to_fil": 231, "file_nam": [231, 278], "transformer_operation_log": 231, "generate_json_dump": 231, "c10d_function": 231, "comm_mode_features_exampl": 231, "effortlessli": 232, "homogen": 232, "num_node_devic": 232, "shard_rank_list": 232, "shard_group": 232, "current_shard_group": 232, "current_replicate_group": 232, "shard_factor": 232, "replicate_group_rank": 232, "replicate_group": 232, "2d_setup": 232, "thru": 232, "get_group": 232, "mesh_dim": 232, "2d_setup_with_device_mesh": 232, "meshshap": 232, "mesh_3d": 232, "hsdp_mesh": 232, "tp_group": 232, "quasi": 233, "hyperbol": 233, "qhm": 233, "qhm_updat": 233, "dp_list": 233, "momentum_buffer_list": 233, "nu": 233, "weight_decay_typ": 233, "d_p": 233, "momentum_buff": 233, "polymorph": 233, "functionalqhm": 233, "params_with_grad": 233, "preserve_format": 233, "functional_optim_map": 233, "remote_params_list": 233, "dist_optim": 233, "_foreach": 235, "horizton": 235, "model_copi": 235, "output_copi": 235, "_higher_order_op": 235, "exp_avg": [235, 282], "exp_avg_sq": [235, 282], "update_exp_avg_sq": 235, "beta2": 235, "addcmul": 235, "update_param": 235, "bias_correction1": 235, "bias_correction2": 235, "denom": 235, "foreach_map_adam": 235, "updated_step": 235, "_foreach_copy_": 235, "hop": 235, "exp_avgs_upd": 235, "lerp": 235, "exp_avgs_sq_upd": 235, "params_upd": 235, "opt_eag": 235, "opt_eager_copi": 235, "compiled_adam": 235, "eager_p": 235, "compile_p": 235, "v0710": 235, "377000": 235, "2104": 235, "__output_cod": 235, "0_infer": 235, "ctype": 235, "c_long": 235, "c_int": 235, "cmath": 235, "nanj": 235, "maybe_profil": 235, "memory_plan": 235, "_align": 235, "asynccompil": 235, "select_algorithm": 235, "extern_kernel": 235, "multi_kernel": 235, "multikernelcal": 235, "_cuda_getcurrentrawstream": 235, "get_raw_stream": 235, "tl": 235, "triton_heurist": 235, "start_graph": 235, "end_graph": 235, "inductor_op": 235, "_quantiz": 235, "empty_strided_cpu": 235, "_empty_strided_cpu": 235, "empty_strided_cuda": 235, "_empty_strided_cuda": 235, "empty_strided_xpu": 235, "_empty_strided_xpu": 235, "reinterpret_tensor": 235, "_reinterpret_tensor": 235, "alloc_from_pool": 235, "_alloc_from_pool": 235, "empty_strided_p2p": 235, "_symmetricmemori": 235, "torchinductor_ci": 235, "ej": 235, "cejr7t4zzqo7llcoxga7clgyc6gs3676lsm4dvilpfw64kudp2n": 235, "unsort": 235, "triton_for_fused_0": 235, "triton_help": 235, "libdevic": 235, "tl_math": 235, "autotunehint": 235, "reductionhint": 235, "tilehint": 235, "deviceproperti": 235, "num_warp": 235, "triton_meta": 235, "in_ptr2": 235, "in_ptr3": 235, "in_ptr4": 235, "in_ptr5": 235, "in_ptr6": 235, "in_ptr7": 235, "in_ptr8": 235, "in_ptr9": 235, "in_ptr10": 235, "in_ptr11": 235, "in_ptr12": 235, "in_ptr13": 235, "in_ptr14": 235, "in_ptr15": 235, "in_ptr16": 235, "in_ptr17": 235, "in_ptr18": 235, "in_ptr19": 235, "in_ptr20": 235, "in_ptr21": 235, "in_ptr22": 235, "in_ptr23": 235, "in_ptr24": 235, "in_ptr25": 235, "in_ptr26": 235, "in_ptr27": 235, "in_ptr28": 235, "in_ptr29": 235, "in_ptr30": 235, "in_ptr31": 235, "in_ptr32": 235, "in_ptr33": 235, "in_ptr34": 235, "in_ptr35": 235, "in_ptr36": 235, "in_ptr37": 235, "in_ptr38": 235, "in_ptr39": 235, "in_ptr40": 235, "in_ptr41": 235, "in_ptr42": 235, "in_ptr43": 235, "in_ptr44": 235, "in_ptr45": 235, "in_ptr46": 235, "in_ptr47": 235, "in_ptr48": 235, "in_ptr49": 235, "out_ptr6": 235, "out_ptr7": 235, "out_ptr8": 235, "out_ptr15": 235, "out_ptr16": 235, "out_ptr17": 235, "out_ptr24": 235, "out_ptr25": 235, "out_ptr26": 235, "out_ptr33": 235, "out_ptr34": 235, "out_ptr35": 235, "out_ptr42": 235, "out_ptr43": 235, "out_ptr44": 235, "out_ptr51": 235, "out_ptr52": 235, "out_ptr53": 235, "out_ptr60": 235, "out_ptr61": 235, "out_ptr62": 235, "out_ptr69": 235, "out_ptr70": 235, "out_ptr71": 235, "out_ptr78": 235, "out_ptr79": 235, "out_ptr80": 235, "out_ptr87": 235, "out_ptr88": 235, "out_ptr89": 235, "multi_processor_count": 235, "regs_per_multiprocessor": 235, "65536": 235, "max_threads_per_multi_processor": 235, "1536": 235, "warp_siz": 235, "tt": 235, "inductor_meta": 235, "grid_typ": 235, "sequentialcombokernelgrid": 235, "combo_grid_meta": 235, "min_block": 235, "default_config": 235, "xblock": 235, "no_x_dim_0": 235, "xnumel_0": 235, "1048576": 235, "no_x_dim_1": 235, "xnumel_1": 235, "no_x_dim_2": 235, "xnumel_2": 235, "no_x_dim_3": 235, "xnumel_3": 235, "no_x_dim_4": 235, "xnumel_4": 235, "no_x_dim_5": 235, "xnumel_5": 235, "no_x_dim_6": 235, "xnumel_6": 235, "no_x_dim_7": 235, "xnumel_7": 235, "no_x_dim_8": 235, "xnumel_8": 235, "no_x_dim_9": 235, "xnumel_9": 235, "kernel_nam": 235, "mutated_arg_nam": 235, "backend_hash": 235, "1e2c16421d4c3dba4ad92bfc4278a3cb24c43deda6ee7ff9e3fbb1dbb80802db": 235, "are_deterministic_algorithms_en": 235, "assert_indirect_index": 235, "autotune_local_cach": 235, "autotune_pointwis": 235, "autotune_remote_cach": 235, "force_disable_cach": 235, "dynamic_scale_rblock": 235, "max_autotun": [235, 277], "max_autotune_pointwis": 235, "min_split_scan_rblock": 235, "spill_threshold": 235, "store_cubin": 235, "pid": 235, "program_id": 235, "num_xblocks_0": 235, "cdiv": 235, "num_xblocks_1": 235, "num_xblocks_2": 235, "num_xblocks_3": 235, "num_xblocks_4": 235, "num_xblocks_5": 235, "num_xblocks_6": 235, "num_xblocks_7": 235, "num_xblocks_8": 235, "num_xblocks_9": 235, "pid_offset": 235, "xnumel": 235, "r0_numel": 235, "xoffset": 235, "xindex": 235, "xmask": 235, "int1": 235, "tmp11": 235, "tmp18": 235, "tmp20": 235, "09999999999999998": 235, "tmp9": 235, "tmp10": 235, "tmp12": 235, "tmp13": 235, "tmp14": 235, "0010000000000000009": 235, "tmp15": 235, "tmp16": 235, "tmp17": 235, "tmp19": 235, "tmp21": 235, "tmp22": 235, "tmp23": 235, "tmp24": 235, "tmp25": 235, "tmp26": 235, "tmp27": 235, "tmp28": 235, "tmp29": 235, "tmp30": 235, "tmp31": 235, "tmp32": 235, "tmp33": 235, "tmp34": 235, "tmp35": 235, "tmp36": 235, "tmp37": 235, "tmp38": 235, "tmp39": 235, "tmp40": 235, "tmp41": 235, "tmp47": 235, "tmp48": 235, "tmp53": 235, "tmp60": 235, "tmp62": 235, "tmp42": 235, "tmp43": 235, "tmp44": 235, "tmp45": 235, "tmp46": 235, "tmp49": 235, "tmp50": 235, "tmp51": 235, "tmp52": 235, "tmp54": 235, "tmp55": 235, "tmp56": 235, "tmp57": 235, "tmp58": 235, "tmp59": 235, "tmp61": 235, "tmp63": 235, "tmp64": 235, "tmp65": 235, "tmp66": 235, "tmp67": 235, "tmp68": 235, "tmp69": 235, "tmp70": 235, "tmp71": 235, "tmp72": 235, "tmp73": 235, "tmp74": 235, "tmp75": 235, "tmp76": 235, "tmp77": 235, "tmp78": 235, "tmp79": 235, "tmp80": 235, "tmp81": 235, "tmp82": 235, "tmp83": 235, "tmp89": 235, "tmp90": 235, "tmp95": 235, "tmp102": 235, "tmp104": 235, "tmp84": 235, "tmp85": 235, "tmp86": 235, "tmp87": 235, "tmp88": 235, "tmp91": 235, "tmp92": 235, "tmp93": 235, "tmp94": 235, "tmp96": 235, "tmp97": 235, "tmp98": 235, "tmp99": 235, "tmp100": 235, "tmp101": 235, "tmp103": 235, "tmp105": 235, "tmp106": 235, "tmp107": 235, "tmp108": 235, "tmp109": 235, "tmp110": 235, "tmp111": 235, "tmp112": 235, "tmp113": 235, "tmp114": 235, "tmp115": 235, "tmp116": 235, "tmp117": 235, "tmp118": 235, "tmp119": 235, "tmp120": 235, "tmp121": 235, "tmp122": 235, "tmp123": 235, "tmp124": 235, "tmp125": 235, "tmp131": 235, "tmp132": 235, "tmp137": 235, "tmp144": 235, "tmp146": 235, "tmp126": 235, "tmp127": 235, "tmp128": 235, "tmp129": 235, "tmp130": 235, "tmp133": 235, "tmp134": 235, "tmp135": 235, "tmp136": 235, "tmp138": 235, "tmp139": 235, "tmp140": 235, "tmp141": 235, "tmp142": 235, "tmp143": 235, "tmp145": 235, "tmp147": 235, "tmp148": 235, "tmp149": 235, "tmp150": 235, "tmp151": 235, "tmp152": 235, "tmp153": 235, "tmp154": 235, "tmp155": 235, "tmp156": 235, "tmp157": 235, "tmp158": 235, "tmp159": 235, "tmp160": 235, "tmp161": 235, "tmp162": 235, "tmp163": 235, "tmp164": 235, "tmp165": 235, "tmp166": 235, "tmp167": 235, "x4": 235, "tmp173": 235, "tmp174": 235, "tmp179": 235, "tmp186": 235, "tmp188": 235, "tmp168": 235, "tmp169": 235, "tmp170": 235, "tmp171": 235, "tmp172": 235, "tmp175": 235, "tmp176": 235, "tmp177": 235, "tmp178": 235, "tmp180": 235, "tmp181": 235, "tmp182": 235, "tmp183": 235, "tmp184": 235, "tmp185": 235, "tmp187": 235, "tmp189": 235, "tmp190": 235, "tmp191": 235, "tmp192": 235, "tmp193": 235, "tmp194": 235, "tmp195": 235, "tmp196": 235, "tmp197": 235, "tmp198": 235, "tmp199": 235, "tmp200": 235, "tmp201": 235, "tmp202": 235, "tmp203": 235, "tmp204": 235, "tmp205": 235, "tmp206": 235, "tmp207": 235, "tmp208": 235, "tmp209": 235, "x5": 235, "tmp215": 235, "tmp216": 235, "tmp221": 235, "tmp228": 235, "tmp230": 235, "tmp210": 235, "tmp211": 235, "tmp212": 235, "tmp213": 235, "tmp214": 235, "tmp217": 235, "tmp218": 235, "tmp219": 235, "tmp220": 235, "tmp222": 235, "tmp223": 235, "tmp224": 235, "tmp225": 235, "tmp226": 235, "tmp227": 235, "tmp229": 235, "tmp231": 235, "tmp232": 235, "tmp233": 235, "tmp234": 235, "tmp235": 235, "tmp236": 235, "tmp237": 235, "tmp238": 235, "tmp239": 235, "tmp240": 235, "tmp241": 235, "tmp242": 235, "tmp243": 235, "tmp244": 235, "tmp245": 235, "tmp246": 235, "tmp247": 235, "tmp248": 235, "tmp249": 235, "tmp250": 235, "tmp251": 235, "x6": 235, "tmp257": 235, "tmp258": 235, "tmp263": 235, "tmp270": 235, "tmp272": 235, "tmp252": 235, "tmp253": 235, "tmp254": 235, "tmp255": 235, "tmp256": 235, "tmp259": 235, "tmp260": 235, "tmp261": 235, "tmp262": 235, "tmp264": 235, "tmp265": 235, "tmp266": 235, "tmp267": 235, "tmp268": 235, "tmp269": 235, "tmp271": 235, "tmp273": 235, "tmp274": 235, "tmp275": 235, "tmp276": 235, "tmp277": 235, "tmp278": 235, "tmp279": 235, "tmp280": 235, "tmp281": 235, "tmp282": 235, "tmp283": 235, "tmp284": 235, "tmp285": 235, "tmp286": 235, "tmp287": 235, "tmp288": 235, "tmp289": 235, "tmp290": 235, "tmp291": 235, "tmp292": 235, "tmp293": 235, "x7": 235, "tmp299": 235, "tmp300": 235, "tmp305": 235, "tmp312": 235, "tmp314": 235, "tmp294": 235, "tmp295": 235, "tmp296": 235, "tmp297": 235, "tmp298": 235, "tmp301": 235, "tmp302": 235, "tmp303": 235, "tmp304": 235, "tmp306": 235, "tmp307": 235, "tmp308": 235, "tmp309": 235, "tmp310": 235, "tmp311": 235, "tmp313": 235, "tmp315": 235, "tmp316": 235, "tmp317": 235, "tmp318": 235, "tmp319": 235, "tmp320": 235, "tmp321": 235, "tmp322": 235, "tmp323": 235, "tmp324": 235, "tmp325": 235, "tmp326": 235, "tmp327": 235, "tmp328": 235, "tmp329": 235, "tmp330": 235, "tmp331": 235, "tmp332": 235, "tmp333": 235, "tmp334": 235, "tmp335": 235, "x8": 235, "tmp341": 235, "tmp342": 235, "tmp347": 235, "tmp354": 235, "tmp356": 235, "tmp336": 235, "tmp337": 235, "tmp338": 235, "tmp339": 235, "tmp340": 235, "tmp343": 235, "tmp344": 235, "tmp345": 235, "tmp346": 235, "tmp348": 235, "tmp349": 235, "tmp350": 235, "tmp351": 235, "tmp352": 235, "tmp353": 235, "tmp355": 235, "tmp357": 235, "tmp358": 235, "tmp359": 235, "tmp360": 235, "tmp361": 235, "tmp362": 235, "tmp363": 235, "tmp364": 235, "tmp365": 235, "tmp366": 235, "tmp367": 235, "tmp368": 235, "tmp369": 235, "tmp370": 235, "tmp371": 235, "tmp372": 235, "tmp373": 235, "tmp374": 235, "tmp375": 235, "tmp376": 235, "tmp377": 235, "x9": 235, "tmp383": 235, "tmp384": 235, "tmp389": 235, "tmp396": 235, "tmp398": 235, "tmp378": 235, "tmp379": 235, "tmp380": 235, "tmp381": 235, "tmp382": 235, "tmp385": 235, "tmp386": 235, "tmp387": 235, "tmp388": 235, "tmp390": 235, "tmp391": 235, "tmp392": 235, "tmp393": 235, "tmp394": 235, "tmp395": 235, "tmp397": 235, "tmp399": 235, "tmp400": 235, "tmp401": 235, "tmp402": 235, "tmp403": 235, "tmp404": 235, "tmp405": 235, "tmp406": 235, "tmp407": 235, "tmp408": 235, "tmp409": 235, "tmp410": 235, "tmp411": 235, "tmp412": 235, "tmp413": 235, "tmp414": 235, "tmp415": 235, "tmp416": 235, "tmp417": 235, "tmp418": 235, "tmp419": 235, "device_str": 235, "cpp_fused__foreach_copy_1": 235, "cpicxudqmdsjh5cm4klbtbrvy2cxwr7whxl3md2zzdjdf3orvfdf": 235, "out_ptr1": 235, "out_ptr3": 235, "out_ptr5": 235, "out_ptr9": 235, "out_ptr11": 235, "out_ptr13": 235, "out_ptr19": 235, "arg2_1": 235, "arg3_1": 235, "arg4_1": 235, "arg5_1": 235, "arg6_1": 235, "arg7_1": 235, "arg8_1": 235, "arg9_1": 235, "arg10_1": 235, "arg11_1": 235, "arg12_1": 235, "arg13_1": 235, "arg14_1": 235, "arg15_1": 235, "arg16_1": 235, "arg17_1": 235, "arg18_1": 235, "arg19_1": 235, "arg20_1": 235, "arg21_1": 235, "arg22_1": 235, "arg23_1": 235, "arg24_1": 235, "arg25_1": 235, "arg26_1": 235, "arg27_1": 235, "arg28_1": 235, "arg29_1": 235, "arg30_1": 235, "arg31_1": 235, "arg32_1": 235, "arg33_1": 235, "arg34_1": 235, "arg35_1": 235, "arg36_1": 235, "arg37_1": 235, "arg38_1": 235, "arg39_1": 235, "arg40_1": 235, "arg41_1": 235, "arg42_1": 235, "arg43_1": 235, "arg44_1": 235, "arg45_1": 235, "arg46_1": 235, "arg47_1": 235, "arg48_1": 235, "arg49_1": 235, "benchmark_compiled_modul": 235, "rand_strid": 235, "print_perform": 235, "wrapper_benchmark": 235, "compiled_module_main": 235, "431000": 235, "2115": 235, "cbxwuspm7iljtlkypwgm5a6rrandaew4wqmdmng4lzas4ogomxpw": 235, "i0710": 235, "961000": 235, "787000": 235, "1_infer": 235, "837000": 235, "c655isihixkazmceuwbfqagiscwkui2zsppjfrucnr3s5l4gahqw": 235, "876000": 235, "1214": 235, "0496050005822u": 235, "754": 235, "5008082603856u": 235, "701": [235, 270, 283], "sunita": 236, "nadamp": 236, "graviton3": 236, "sve": 236, "simd": 236, "graviton2": 236, "bla": 236, "acl": 236, "c7g": 236, "bfloa16": 236, "r7g": 236, "m7g": 236, "4vcpu": 236, "profileract": [236, 253], "myneuralnetwork": 236, "11008": 236, "pred_probab": 236, "y_pred": 236, "set_grad_en": 236, "mymodel_infer": 236, "self_cpu_time_tot": [236, 253], "813": 236, "255m": 236, "177": 236, "032m": 236, "160u": 236, "162": [236, 248], "054m": 236, "540": 236, "180u": 236, "738m": 236, "201": 236, "955m": 236, "985": 236, "282m": 236, "421m": 236, "043m": 236, "810u": 236, "356m": 236, "179": 236, "388m": 236, "896": 236, "940u": 236, "mmla": 236, "torchbench": 236, "dnnl_default_fpmath_mod": 236, "943": 236, "052": 236, "507m": 236, "167": [236, 281], "653m": 236, "838": 236, "265u": 236, "107": 236, "593m": 236, "358": 236, "643u": 236, "167m": 236, "262": 236, "911m": 236, "060": 236, "533m": 236, "414m": 236, "892m": 236, "307u": 236, "281m": 236, "934m": 236, "849": [236, 248], "670u": 236, "fastmath": 236, "821": 236, "914": 236, "713m": 236, "244m": 236, "711": 236, "220u": 236, "322m": 236, "307": 236, "740u": 236, "094": 236, "495m": 236, "921": 236, "736m": 236, "131m": 236, "441m": 236, "803u": 236, "942m": 236, "186m": 236, "720": 236, "930u": 236, "848": 236, "944": 236, "148m": 236, "141": [236, 248], "309m": 236, "706": 236, "545u": 236, "916m": 236, "720u": 236, "431m": 236, "471m": 236, "951": 236, "170m": 236, "027m": 236, "243m": 236, "143u": 236, "928m": 236, "143": [236, 281], "237m": 236, "185u": 236, "47x": 236, "till": 236, "torch_mkldnn_matmul_min_dim": 236, "958": 236, "612m": 236, "124m": 236, "620u": 236, "951m": 236, "170u": 236, "423m": 236, "034": 236, "691m": 236, "988": 236, "628m": 236, "520m": 236, "945m": 236, "817u": 236, "382m": 236, "136": 236, "910u": 236, "781": 236, "604m": 236, "295": 236, "437m": 236, "477m": 236, "516m": 236, "558": 236, "387u": 236, "708m": 236, "499m": 236, "788": 236, "627m": 236, "982m": 236, "385m": 236, "617u": 236, "932m": 236, "297": 236, "369m": 236, "487m": 236, "038m": 236, "060m": 236, "300u": 236, "013m": 236, "106": [236, 283], "710u": 236, "521m": 236, "750m": 236, "216": 236, "475m": 236, "033m": 236, "110u": 236, "285m": 236, "345m": 236, "725u": 236, "margin": 236, "thp_mem_alloc_en": 236, "321": 236, "069m": 236, "568m": 236, "613m": 236, "602m": 236, "682": 236, "007u": 236, "777m": 236, "697": 236, "082m": 236, "329": 236, "097m": 236, "547m": 236, "325": 236, "115m": 236, "626m": 236, "avx512": 237, "amx": [237, 238], "xmx": 237, "claus": [237, 238, 282], "nhwc": 237, "cooper": 237, "roialign": 237, "intel_extension_for_pytorch": [237, 271], "ipex": [237, 267, 271], "bertmodel": 237, "seq_length": 237, "check_trac": 237, "cache_en": 237, "memoryformat": 237, "channelslast": 237, "intel_ext_pt_cpu": 237, "libpytorch_path": 237, "ldd": 237, "workspac": 237, "cmake_have_libc_pthread": 237, "0x00007f3cf98e0000": 237, "libc10": 237, "0x00007f3cf985a000": 237, "libintel": 237, "ext": 237, "0x00007f3cf70fc000": 237, "libtorch_cpu": [237, 262], "0x00007f3ce16ac000": 237, "libdnnl_graph": 237, "0x00007f3cde954000": 237, "mitig": [238, 263], "fc1_drop": 238, "pytorch_fx": 238, "accuracy_criterion": 238, "neural_compressor": 238, "calib_dataload": 238, "eval_dataload": 238, "q_model": 238, "top1metr": 238, "quant_aware_train": 238, "training_func": 238, "q_func": 238, "dummy_dataset": 238, "dummydataset": 238, "2021": 238, "linearrelu": 238, "best_configur": 238, "best_model_weight": 238, "int8_model": 238, "gui": [244, 267], "emit_itt": 244, "8080": 244, "path_of_launch": 244, "iteration_n": 244, "range_push": 244, "range_pop": 244, "oneapi": 244, "brown": 244, "percerntag": 244, "jitter": [244, 248], "enrich": 244, "queue": [244, 263], "ittsampl": 244, "292820": 244, "unmark": 244, "iteration_": 244, "basefold": 244, "bash_sourc": 244, "gradcam": 246, "283": 246, "occlus": 246, "deconvolut": 246, "guidedbackprop": 246, "deeplift": 246, "gradientshap": 246, "forward_func": 246, "pictori": 246, "textual": 246, "distractor": 246, "visualize_text": 246, "imdb_torchtext_interpret": 246, "gilbert": 246, "tanner": 246, "gilberttann": 246, "captum_recip": [246, 251, 259, 283], "carilli": 247, "ture": 247, "kepler": 247, "maxwel": 247, "pascal": 247, "modest": 247, "in_siz": 247, "out_siz": 247, "num_lay": 247, "underflow": 247, "scaler": 247, "unscal": 247, "unscale_": 247, "rough": 247, "binary_cross_entropy_with_logit": 247, "suspect": 247, "docstr": 247, "subregion": 247, "backtrac": 247, "torch_show_cpp_stacktrac": 247, "amp_recip": [247, 251, 259, 283], "tediou": 248, "mistak": 248, "mul_sum": 248, "0x7fb10400d0f0": 248, "batched_dot_mul_sum": 248, "379": 248, "0x7fb103d67048": 248, "batched_dot_bmm": 248, "sub_label": 248, "0x7fb103d54080": 248, "118": 248, "0x7fb16935d2e8": 248, "2775": 248, "0x7fb10400d080": 248, "181": 248, "min_run_tim": [248, 262], "274": 248, "748": 248, "432": [248, 253], "22657": 248, "11899": 248, "609": 248, "23098": 248, "27246": 248, "267073": 248, "118823": 248, "189": 248, "2782": 248, "7471": 248, "11874": 248, "173": 248, "7264": 248, "27824": 248, "100060": 248, "121499": 248, "188": 248, "2773": 248, "12833": 248, "6295": 248, "27062": 248, "71804": 248, "120365": 248, "103": 248, "2804": 248, "6764": 248, "11871": 248, "6640": 248, "27592": 248, "73003": 248, "120083": 248, "callgrindstat": [248, 262], "trip": [248, 262], "batched_dot": 248, "36000": 248, "stark": 248, "fuzzer": 248, "10000000": 248, "k0": 248, "k1": 248, "discontigu": 248, "725": 248, "383": 248, "1468": 248, "5039": 248, "2140": 248, "1296": 248, "41000": 248, "1598": 248, "310": 248, "519": 248, "763": 248, "1082": 248, "473": 248, "16384": 248, "12642115": 248, "4800": 248, "20400": 248, "110000": 248, "400000": 248, "493": 248, "1100": [248, 262], "2440": 248, "2030": 248, "495": 248, "23600": 248, "24000": [248, 262], "62374": 248, "240372": 248, "16000": 248, "40156": 248, "2670": 248, "opac": 248, "complementari": 248, "insensit": 248, "environment": 248, "cpp_lib": 248, "batched_dot_src": 248, "extra_cflag": 248, "extra_include_path": 248, "getenv": 248, "batched_dot_mul_sum_v0": 248, "batched_dot_mul_sum_v1": 248, "module_import_str": 248, "67631": 248, "importlib": 248, "spec_from_file_loc": 248, "repr": 248, "module_from_spec": 248, "exec_modul": 248, "textwrap": 248, "pretty_print": 248, "t_baselin": 248, "stats_v0": 248, "collect_callgrind": 248, "stats_v1": 248, "as_standard": [248, 262], "denois": 248, "cancel": [248, 263], "ing": 248, "wrap_pybind_function_impl_": 248, "linewidth": 248, "valgrind_wrapp": [248, 262], "timer_interfac": [248, 262], "0x7fb0f06e7630": 248, "2392671": 248, "4367": 248, "rel_with_deb_info": [248, 262], "0x7fb10400d208": 248, "2378978": 248, "functioncount": [248, 262], "0x7fb1000ab358": 248, "0x000000000020d9e0": 248, "0x000000000020db10": 248, "integer_sequ": 248, "0ul": 248, "1ul": 248, "5200": 248, "undefinedtensorimpl": 248, "reset_": 248, "5935": 248, "0x000000000022c0e0": 248, "13693": 248, "changing_default_devic": [249, 259, 283], "subsidiari": [250, 264, 265], "neighbor": 250, "sharp": 250, "blurri": 250, "defining_a_neural_network": [250, 251, 259, 283], "what_is_state_dict": [251, 259, 265, 283], "saving_and_loading_models_for_infer": 251, "custom_dataset_transforms_load": 251, "dynamic_quant": 251, "warmstarting_model_using_parameters_from_a_different_model": [251, 259, 264, 283], "zeroing_out_gradi": [251, 259, 266, 283], "mobile_perf": 251, "regional_compil": [251, 268, 270, 283], "syntaxerror": [251, 259, 283], "undesir": 252, "unload": 252, "somemodul": 252, "overwritten": [252, 266, 281], "param_in_model": 252, "param_in_state_dict": 252, "set_swap_module_params_on_convers": [252, 260], "swap_tensor": [252, 259, 283], "module_load_state_dict_tip": [252, 259, 283], "shivam": 253, "raikundalia": 253, "model_infer": 253, "_fork": 253, "509m": 253, "503m": 253, "931m": 253, "597m": 253, "700m": 253, "585m": 253, "_convolut": 253, "450m": 253, "mkldnn_convolut": 253, "838m": 253, "114m": 253, "556m": 253, "batch_norm": 253, "693m": 253, "734": 253, "_batch_norm_impl_index": 253, "482m": 253, "724": 253, "100u": 253, "native_batch_norm": 253, "229m": 253, "109m": 253, "705": 253, "450u": 253, "332": 253, "631m": 253, "286u": 253, "668m": 253, "292m": 253, "988u": 253, "549m": 253, "dnn": 253, "group_by_input_shap": 253, "008m": 253, "956m": 253, "909m": 253, "834m": 253, "332m": 253, "303m": 253, "273m": 253, "233m": 253, "751m": 253, "occurr": 253, "666m": 253, "484m": 253, "_convolution_nogroup": 253, "thnn_conv2d": 253, "thnn_conv2d_forward": 253, "im2col_kernel": 253, "844m": 253, "sgemm_32x32x32_nn": 253, "206m": 253, "sgemm_32x32x32_nn_vec": 253, "093m": 253, "015m": 253, "567m": 253, "871m": 253, "560u": 253, "convolution_overrid": 253, "gen_conv": 253, "216u": 253, "640u": 253, "632u": 253, "conv_reord": 253, "880u": 253, "448u": 253, "712": 253, "486m": 253, "max_pool2d_with_indic": 253, "kb": 253, "572": 253, "resize_": 253, "masked_select": 253, "112": [253, 278, 281], "122": 253, "064m": 253, "viewer": 253, "439": 253, "_conv_forward": 253, "1051": 253, "_call_impl": 253, "016m": 253, "659m": 253, "skip_first": 253, "step_num": 253, "profiler_recip": [253, 259, 283], "reasoning_about_shap": [254, 259, 283], "008": 259, "tensorboard_with_pytorch": [259, 261, 283], "timer_quick_start": [259, 262, 283], "tuning_guid": [259, 263, 283], "hereaft": 260, "__slots__": 260, "pertin": 260, "__torch_dispatch__": [260, 278], "new_param": 260, "myquantizedlinearweight": 260, "__setattr__": 260, "module_load": 260, "__torch_function__": 260, "param_kei": 260, "scalar_valu": 261, "walltim": 261, "train_model": 261, "tfevent": 261, "OR": 261, "timeit": 262, "0x7f1929a38ed0": 262, "iqr": 262, "424": 262, "0x7f192b019ed0": 262, "unsurprisingli": 262, "0x7f1929a35850": 262, "563600": 262, "tensormethod": 262, "ab_ref": 262, "0x7f192a6dfd90": 262, "47264": 262, "_int_fre": 262, "25963": 262, "_int_malloc": 262, "19900": 262, "tensorit": 262, "tensoriteratorconfig": 262, "18000": 262, "__tls_get_addr": 262, "13500": 262, "malloc": [262, 263, 281], "11300": 262, "smallvector": 262, "10345": 262, "_int_memalign": 262, "9200": 262, "iteratorbas": 262, "get_strid": 262, "173472": 262, "0x7f192995d750": 262, "118200": 262, "tensoriter": 262, "20900": 262, "15900": 262, "15100": 262, "cpualloc": 262, "12500": 262, "352327": 262, "a0": 262, "b0": 262, "a1": 262, "a127": 262, "pickleabl": 262, "broadcasting_stat": 262, "17600": 262, "tensoriteratorbas": 262, "compute_strid": 262, "12700": 262, "allocate_or_resize_output": 262, "10200": 262, "smallvectorimpl": 262, "7400": 262, "6200": 262, "invert_perm": 262, "6064": 262, "5100": 262, "reorder_dimens": 262, "4300": 262, "compatible_strid": 262, "check_tensor_options_and_extract_memory_format": 262, "__memcmp_avx2_movb": 262, "empty_cpu": 262, "1300": 262, "2400": 262, "6100": 262, "compute_fast_setup_typ": 262, "22600": 262, "fast_set_up": 262, "58091": 262, "580": 262, "0x7f19299544d0": 262, "compute_shap": 262, "2300": 262, "coalesce_dimens": 262, "promin": 262, "__add__": 262, "__sub__": 262, "dice": 262, "szymon": 263, "migacz": 263, "set_to_non": 263, "elementwis": [263, 279], "anomali": 263, "detect_anomali": 263, "set_detect_anomali": 263, "emit_nvtx": 263, "nth": 263, "cpunodebind": 263, "membind": 263, "pytorch_script": 263, "omp_num_thread": [263, 281], "thrash": 263, "gomp_cpu_affin": 263, "omp_proc_bind": 263, "omp_schedul": 263, "libgomp": [263, 281], "sleep": 263, "jemalloc": [263, 281], "tcmalloc": [263, 281], "emphas": 263, "ccl": 263, "set_float32_matmul_precis": 263, "judgment": 266, "itt": 267, "vtune": 267, "set_stanc": [267, 270, 283], "usecas": 267, "torchcompil": 267, "prebuilt": 267, "torchscipt": 267, "pod": 267, "andriod": 267, "run_cpu": 267, "graviton": 267, "compressor": 267, "tensorpip": 267, "dcp": 267, "commdebugmod": 267, "animesh": 268, "jain": 268, "startup": 268, "inline_inbuilt_nn_modul": 268, "graph_cod": 268, "strateg": 268, "torch_compiler_set_stance_tutori": [270, 276, 283], "torch_compile_torch_function_mod": [270, 274, 283], "torch_compile_user_defined_triton_kernel_tutori": [270, 275, 283], "sphx_glr_recipes_torch_export_aoti_python": [270, 283], "torch_export_aoti_python": [270, 277, 283], "compile_model": 271, "resnet50_weight": 271, "weights_prepack": 271, "oguz": [272, 273, 275], "ulgen": [272, 273, 275], "sam": [272, 278], "larsen": 272, "fxgraphcach": [272, 273], "aotautogradcach": [272, 273], "redi": [272, 273], "usernam": 272, "aotautograd": [272, 273], "fxgraph": 272, "torchinductor_": 272, "torchinductor_myusernam": [272, 273], "triton_cache_dir": 272, "torchinductor_redis_host": 272, "torchinductor_redis_port": 272, "6379": 272, "cachebench": 273, "onward": 273, "save_cache_artifact": 273, "load_cache_artifact": 273, "artifact_byt": 273, "cache_info": 273, "pgo": 273, "tritoncach": 273, "inductorcach": 273, "autotuningcach": 273, "torchinductor_cache_dir": 273, "basetorchfunctionmod": 274, "flopcountermod": 275, "wrap_triton": 275, "footgun": 275, "register_kernel": 275, "register_flop_formula": 275, "flop_count": 275, "mysin": 275, "force_eag": 276, "eager_on_recompil": 276, "fail_on_recompil": 276, "torch.export": 277, "torch._inductor.aoti_compile_and_packag": 277, "aot_compil": 277, "torch._export.aoti_load_packag": 277, "ankith": [277, 278], "gunap": [277, 278], "_export": 277, "aot_load": 277, "runner": 277, "archive_format": 277, "10088": 277, "cagzt6akdaczvxwtbvqe34otfe5jlorktbqlojbzqjqvbfsjlge4": 277, "17160": 277, "c6oytfjmt5w4c7onvtm6fray7clirxt7q5xjbwx3hdydclmwoujz": 277, "16616": 277, "c7ydp7nocyz323hij4tmlf2kcedmwlyg6r57gaqzcsy3huneamu6": 277, "17776": 277, "cyqdf46ordevqhiddvpdpp3uzwatfbzdpl3auj2nx23uxvplnne2": 277, "10856": 277, "cpzfebfgrusqslui7fxsuoo4tvwulmrxirc5tmrpa4mvrbdno7kn": 277, "14608": 277, "c5ukeoz5wmaszd7vczdz2qhtt6n7tdbl3b6wuy4rb2se24fjwfoi": 277, "11376": 277, "csu3nstcp56tsjfycygaqsewpu64l5s6zavvz7537cm4s4cv2k3r": 277, "10984": 277, "cp76lez4glmgq7gedf2u25zvvv6rksv5lav4q22dibd2zicbgwj3": 277, "14736": 277, "c2bb5p6tnwz4elgujqelsrp3unvkgsyiv7xqxmpvuxcm4jfl7pc2": 277, "c6eopmb2b4ngodwsayae4r5q6ni3jlfogfbdk3ypg56tgpzhubfi": 277, "11624": 277, "chmwe6lvoekzfowdbiizitm3haiiuad5kdm6sd2m6mv6dkn2zk32": 277, "15632": 277, "c3jop5g344hj3ztsu4qm6ibxyaaerlhkzh2e6emak23rxfje6jam": 277, "25472": 277, "chaiixybeiuuitm2nmqnxzijzwgnn2n7uuss4qmsupgblfh3h5hk": 277, "139389": 277, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t": 277, "cvk6qzuybruhwxtfblzxiov3rlrziv5fkqc4mdhbmantfu3lmd6t_metadata": 277, "47195424": 277, "47523148": 277, "jordi": 278, "ramon": 278, "marco": 278, "carranza": 278, "mvit": 278, "whisper": 278, "blip": 278, "sam2": 278, "timm": 278, "multiscal": 278, "kinet": 278, "mvit_v1_b_weight": 278, "mvit_v1_b": 278, "224x224x3": 278, "input_fram": 278, "num_clip": 278, "print_exc": 278, "batch_dim": 278, "asr": 278, "transcrib": 278, "spoken": 278, "680k": 278, "whisperprocessor": 278, "whisperforconditionalgener": 278, "decoder_input_id": 278, "decoder_start_token_id": 278, "internaltorchdynamoerror": 278, "attributeerror": 278, "dynamiccach": 278, "key_cach": 278, "non_strict": 278, "proxytensor": 278, "gameplai": 278, "gamer": 278, "salesforc": 278, "blip_decod": 278, "caption_input": 278, "model_url": 278, "googleapi": 278, "sfr": 278, "model_base_capfilt_larg": 278, "exportdb": 278, "bos_token_id": 278, "anaconda3": 278, "functional_tensor": 278, "545": 278, "outs_unwrap": 278, "_op_dk": 278, "sam2imagepredictor": 278, "_predict": 278, "unnorm_coord": 278, "unnorm_box": 278, "mask_input": 278, "multimask_output": 278, "return_logit": 278, "image_predict": 278, "sam2_image_predictor": 278, "359": 278, "exporthelp": 278, "model_to_export": 278, "aoti": 278, "repl": 280, "r18": 280, "r18_script": 280, "dummy_input": 280, "unscripted_output": 280, "unscript": 280, "scripted_output": 280, "unscripted_top5": 280, "scripted_top5": 280, "463": 280, "731": 280, "msg_without_backtrac": 280, "output_sm": 280, "softmaxfuncopt": 280, "top5_tensor": 280, "ndone": 280, "418": 280, "644": 280, "cpulongtyp": 280, "exposit": 280, "preload": 281, "tunabl": 281, "taskset": 281, "uma": 281, "lscpu": 281, "9480": 281, "223": 281, "vendor": 281, "genuineintel": 281, "node0": 281, "node1": 281, "cento": 281, "yum": 281, "libiomp": 281, "perftool": 281, "gperftool": 281, "libjemalloc2": 281, "ninstanc": 281, "ncore": 281, "program_arg": 281, "iomp": 281, "prepend": 281, "core_id": 281, "dafault": 281, "ncores_per_inst": 281, "libtcmalloc": 281, "preliminarili": 281, "deepspe": 282, "marian": 282, "oftentim": 282, "print_peak_memori": 282, "max_memory_alloc": 282, "use_zero": 282, "optimizer_class": 282, "0mb": 282, "992": 282, "1361": 282, "3453": 282, "6123046875": 282, "1697": 282, "124": 283, "intermediate_sourc": 283, "recipes_sourc": 283, "prototype_sourc": 283, "advanced_sourc": 283}, "objects": {}, "objtypes": {}, "objnames": {}, "titleterms": {"onnx": [0, 23, 114, 115, 116, 117, 118], "live": 0, "tutori": [0, 39, 42, 54, 55, 57, 59, 62, 92, 99, 105, 125, 128, 131, 132, 134, 166, 172, 174, 175, 182, 189, 190, 193, 194, 195, 201, 237, 238, 277], "torchrl": [1, 15, 174], "object": [1, 107, 139, 193], "code": [1, 2, 8, 15, 25, 39, 40, 59, 99, 201, 207, 223, 244], "ddpg": 1, "loss": [1, 13, 40, 48, 51, 54, 57, 100, 104, 105, 106, 137, 141, 150, 174, 247, 266], "overview": [1, 19, 65, 114, 118, 125, 142, 150, 156, 179, 191, 198, 209, 229, 238, 263], "prerequisit": [1, 40, 105, 114, 118, 173, 198, 201, 211, 214, 231, 235, 253, 268, 272, 273, 275, 276, 277, 278], "import": [1, 13, 49, 60, 93, 187, 250, 253, 264, 265, 266, 280], "setup": [1, 19, 21, 26, 93, 113, 142, 149, 150, 162, 170, 173, 184, 185, 195, 196, 217, 226, 227, 235, 250, 253, 264, 265, 266, 268, 279], "lossmodul": 1, "The": [1, 7, 8, 93, 95, 104, 138, 170, 171, 180, 194, 244], "__init__": [1, 37], "method": [1, 16, 25, 149, 162, 193, 210, 260], "valu": [1, 150, 166, 174, 190], "estim": [1, 158], "actor": 1, "put": [1, 158, 173, 193], "thing": [1, 15], "togeth": [1, 15, 137, 158, 165, 173, 193, 247], "forward": [1, 6, 7, 24, 120, 135, 142, 153, 157, 193, 194], "call": [1, 188], "environ": [1, 15, 26, 58, 136, 150, 158, 174, 187, 200, 202], "transform": [1, 9, 15, 45, 46, 56, 100, 129, 130, 134, 137, 157, 167, 169, 170, 174, 179, 182, 194], "parallel": [1, 9, 24, 49, 59, 61, 65, 131, 133, 134, 135, 137, 147, 148, 161, 169, 170, 196, 232, 263], "execut": [1, 5, 15, 21, 115, 170, 176, 184, 253, 263], "normal": [1, 48, 174, 266], "observ": 1, "stat": 1, "build": [1, 4, 5, 6, 11, 25, 26, 36, 100, 107, 154, 155, 171, 194, 221, 223, 266, 280], "model": [1, 5, 7, 9, 13, 19, 21, 22, 23, 24, 28, 36, 40, 41, 42, 49, 54, 60, 65, 80, 81, 90, 96, 98, 100, 102, 104, 105, 110, 112, 114, 115, 122, 124, 128, 129, 134, 135, 137, 138, 145, 147, 150, 151, 155, 158, 159, 161, 162, 169, 170, 172, 173, 180, 182, 184, 185, 187, 193, 195, 214, 220, 223, 226, 227, 235, 237, 238, 242, 243, 244, 246, 250, 253, 257, 258, 263, 264, 265, 277, 278, 280], "explor": [1, 5, 21], "data": [1, 7, 9, 22, 29, 37, 41, 48, 49, 54, 55, 57, 59, 60, 61, 93, 100, 103, 113, 128, 133, 134, 135, 137, 140, 141, 147, 174, 180, 182, 184, 185, 187, 190, 191, 198, 209, 239, 250, 263, 264, 265, 266], "collector": [1, 150, 174], "evalu": [1, 54, 128, 138, 139, 140, 180, 247], "your": [1, 5, 6, 11, 15, 37, 65, 98, 102, 113, 120, 164, 193, 200, 232, 250, 280], "record": [1, 184, 198], "replai": [1, 150, 174, 175], "buffer": [1, 150, 174, 263], "storag": [1, 199, 278], "batch": [1, 10, 15, 143, 154, 157, 176, 236, 263, 278], "size": [1, 278], "modul": [1, 5, 7, 16, 28, 72, 90, 100, 113, 120, 121, 150, 153, 166, 172, 191, 219, 252, 260, 278], "construct": [1, 21, 60, 209, 210], "target": [1, 158, 263], "network": [1, 7, 36, 48, 51, 57, 93, 107, 110, 140, 141, 150, 158, 174, 175, 180, 182, 194, 247, 250, 264, 265, 266], "updat": [1, 51, 158, 176, 219], "optim": [1, 40, 41, 48, 57, 74, 104, 107, 113, 115, 121, 135, 139, 165, 178, 191, 226, 227, 233, 236, 263, 265, 266, 269, 281, 282], "time": [1, 20, 23, 43, 52, 69, 75, 79, 87, 91, 101, 111, 119, 120, 123, 173, 181, 218, 253, 259, 262, 268, 270, 272, 273, 283], "train": [1, 3, 4, 7, 9, 12, 15, 17, 22, 27, 36, 37, 48, 54, 57, 58, 60, 93, 95, 98, 102, 104, 107, 122, 128, 131, 134, 137, 138, 140, 141, 145, 146, 149, 150, 158, 165, 169, 174, 175, 180, 182, 185, 191, 214, 237, 238, 263, 266, 271, 275], "polici": [1, 15, 134, 150, 174], "experi": [1, 15, 16, 139, 195], "result": [1, 3, 49, 57, 80, 115, 120, 139, 140, 144, 174, 180, 182, 184, 191, 217, 244, 246, 248], "conclus": [1, 2, 3, 4, 6, 7, 15, 16, 17, 19, 22, 24, 25, 26, 54, 87, 105, 114, 115, 118, 125, 136, 137, 142, 150, 155, 156, 158, 159, 165, 168, 170, 174, 179, 188, 190, 191, 194, 196, 198, 199, 200, 201, 202, 207, 208, 209, 210, 211, 212, 214, 216, 217, 220, 224, 227, 229, 230, 231, 232, 235, 236, 252, 260, 263, 268, 272, 273, 274, 275, 276, 277, 278, 279, 281], "next": [1, 48, 57, 80, 173, 174], "step": [1, 5, 125, 165, 170, 171, 173, 174, 184, 194, 248, 250, 253, 264, 265, 266, 268], "autograd": [2, 4, 10, 11, 35, 47, 67, 68, 82, 95, 121, 138, 142, 153, 178], "c": [2, 3, 4, 5, 6, 7, 8, 10, 11, 25, 26, 201, 223, 237, 262, 280], "frontend": [2, 7, 90, 92], "basic": [2, 7, 24, 28, 38, 39, 142, 147, 153, 168, 171, 176, 188, 190, 220, 236, 275], "oper": [2, 4, 6, 8, 10, 11, 17, 25, 26, 44, 53, 95, 109, 118, 168, 195, 209, 210, 212, 224, 263], "comput": [2, 15, 20, 35, 43, 47, 52, 69, 75, 79, 87, 91, 101, 109, 111, 112, 119, 123, 128, 157, 162, 181, 218, 246, 259, 263, 270, 283], "higher": 2, "order": [2, 263], "gradient": [2, 13, 35, 80, 96, 135, 167, 209, 247, 263, 266], "us": [2, 3, 6, 7, 9, 12, 13, 14, 23, 25, 26, 27, 28, 39, 47, 55, 58, 88, 113, 114, 115, 118, 120, 122, 127, 133, 135, 142, 143, 145, 147, 148, 150, 151, 153, 167, 169, 171, 176, 177, 178, 179, 184, 185, 187, 199, 202, 205, 209, 211, 223, 225, 228, 230, 231, 232, 238, 244, 246, 252, 253, 261, 263, 264, 275, 277, 279, 281, 282], "custom": [2, 4, 6, 8, 11, 15, 16, 17, 25, 26, 37, 56, 72, 118, 121, 127, 128, 131, 143, 144, 153, 171, 172, 190, 193, 232, 233], "function": [2, 13, 16, 22, 35, 40, 48, 51, 57, 68, 80, 90, 93, 100, 104, 105, 106, 107, 113, 121, 143, 144, 153, 157, 162, 167, 172, 174, 235, 248, 253, 263, 266, 274], "translat": [2, 124, 130, 180], "from": [2, 8, 22, 23, 25, 47, 55, 113, 115, 122, 140, 141, 145, 163, 180, 187, 191, 193, 252, 264], "python": [2, 4, 6, 8, 17, 25, 26, 90, 171, 223, 277, 279], "cuda": [3, 4, 6, 8, 55, 87, 168, 228, 263], "graph": [3, 35, 47, 102, 109, 115, 142, 188, 190, 214, 263, 278], "pytorch": [3, 5, 6, 7, 8, 11, 13, 16, 22, 23, 27, 28, 47, 50, 55, 59, 62, 65, 67, 68, 70, 72, 73, 74, 78, 86, 94, 97, 98, 99, 100, 102, 103, 104, 107, 108, 109, 110, 112, 115, 118, 120, 121, 132, 149, 159, 168, 173, 184, 187, 191, 194, 195, 197, 205, 214, 215, 223, 224, 225, 234, 236, 237, 238, 239, 241, 244, 245, 250, 251, 253, 254, 261, 263, 264, 265, 266, 267, 271], "api": [3, 5, 7, 65, 95, 135, 153, 159, 165, 171, 198, 201, 223, 244, 263, 279], "get": [3, 5, 11, 36, 87, 112, 133, 135, 147, 156, 164, 178, 212, 230, 231, 232, 237, 238], "start": [3, 87, 102, 133, 135, 147, 164, 178, 212, 230, 231, 232, 237, 238, 262, 268, 281], "set": [4, 93, 136, 139, 187, 195, 198, 200, 202, 226, 227, 235, 263, 272], "up": [4, 77, 121, 139, 187, 193, 195, 200, 202, 226, 227, 235, 236, 262], "system": 4, "defin": [4, 7, 10, 22, 25, 36, 48, 51, 54, 68, 105, 114, 121, 139, 170, 174, 187, 193, 195, 248, 250, 262, 264, 265, 266, 275], "op": [4, 6, 10, 190, 274], "ad": [4, 10, 17, 93, 185, 191, 247, 275], "backend": [4, 10, 11, 16, 136, 149, 156, 171, 195, 214, 223, 263, 271, 281], "implement": [4, 10, 25, 26, 40, 57, 80, 106, 118, 143, 166, 171, 176, 177, 179, 207, 209, 219, 235], "an": [4, 11, 15, 23, 48, 110, 112, 118, 122, 138, 150, 174, 191, 198, 227, 252, 281], "regist": [4, 7, 10, 11, 16, 26], "torch": [4, 5, 35, 47, 86, 100, 109, 113, 114, 122, 140, 142, 147, 172, 179, 188, 189, 190, 194, 199, 202, 209, 214, 222, 226, 235, 247, 248, 252, 260, 268, 273, 274, 275, 276, 277, 278, 279, 281], "compil": [4, 6, 26, 142, 156, 179, 188, 194, 202, 211, 214, 226, 227, 235, 268, 272, 273, 274, 275, 276, 277, 279], "support": [4, 10, 11, 17, 93, 102, 118, 179, 210, 219, 233, 275], "hybrid": [4, 90, 92], "registr": 4, "test": [4, 11, 15, 17, 48, 80, 93, 143, 154, 193, 223, 250, 262], "creat": [4, 8, 14, 37, 41, 49, 54, 103, 107, 109, 113, 139, 140, 141, 155, 162, 172, 263], "mutabl": [4, 17], "load": [5, 7, 13, 25, 28, 37, 41, 42, 48, 54, 58, 105, 122, 128, 145, 147, 180, 182, 199, 230, 239, 248, 250, 252, 255, 256, 257, 263, 264, 265, 266, 280], "torchscript": [5, 24, 25, 26, 28, 188, 220, 233, 237, 280], "1": [5, 22, 48, 90, 115, 136, 162, 170, 171, 184, 185, 190, 193, 195, 214, 248, 250, 253, 262, 264, 265, 266], "convert": [5, 28, 159, 195, 204, 213], "script": [5, 26, 28, 58, 90, 164, 269, 281], "via": [5, 16, 198], "trace": [5, 26, 28, 87, 88, 90, 114, 155, 188, 221, 244, 253, 278], "annot": 5, "2": [5, 19, 22, 48, 49, 90, 115, 136, 162, 170, 171, 184, 185, 193, 195, 214, 217, 248, 250, 253, 262, 264, 265, 266], "serial": [5, 16, 25, 172], "file": [5, 37, 54, 115, 122, 145, 180, 198, 258], "3": [5, 22, 48, 49, 90, 115, 136, 170, 171, 184, 185, 195, 214, 248, 250, 253, 262, 264, 265, 266], "A": [5, 26, 47, 50, 62, 95, 96, 106, 143, 168, 244, 247, 256, 262, 264], "minim": [5, 105], "applic": [5, 7, 149, 171, 225, 260], "depend": [5, 115, 117, 179, 190, 191], "libtorch": 5, "4": [5, 19, 22, 48, 90, 115, 171, 173, 184, 185, 195, 214, 217, 248, 250, 253, 262, 264, 265, 266], "5": [5, 22, 48, 115, 184, 185, 195, 248, 253, 262, 266], "help": [5, 184], "extens": [6, 11, 14, 131, 171, 216, 224, 227, 237, 260, 271], "motiv": [6, 7, 90, 207], "exampl": [6, 14, 17, 24, 25, 80, 84, 90, 95, 96, 107, 110, 112, 121, 122, 138, 194, 198, 201, 211, 216, 237, 271, 276, 281], "write": [6, 7, 15, 56, 149, 185, 193, 207, 233], "setuptool": [6, 26], "pass": [6, 12, 120, 136, 142, 154, 165, 250], "backward": [6, 11, 24, 134, 135, 142, 143, 144, 165], "bind": [6, 25], "perform": [6, 120, 136, 151, 155, 156, 159, 167, 173, 179, 184, 202, 211, 229, 236, 238, 241, 263, 276, 281], "comparison": [6, 23, 143, 147, 167, 188], "gpu": [6, 7, 48, 49, 60, 84, 93, 122, 168, 184, 191, 200, 205, 237, 263], "devic": [6, 13, 16, 36, 122, 134, 223, 228, 249, 252, 255, 263], "jit": [6, 11, 26, 114, 173], "mix": [6, 28, 134, 135, 145, 247, 263], "accessor": 6, "integr": [6, 8, 16, 96], "neural": [7, 13, 36, 48, 51, 93, 113, 158, 162, 238, 250, 264, 265, 266], "paramet": [7, 14, 36, 40, 41, 49, 100, 122, 172, 174, 176, 177, 219, 248, 263, 264], "submodul": 7, "travers": 7, "hierarchi": [7, 244], "run": [7, 23, 25, 39, 49, 54, 55, 58, 59, 60, 80, 90, 99, 105, 139, 147, 184, 187, 190, 226, 227, 235, 253, 261, 280], "mode": [7, 21, 22, 153, 157, 211, 237, 274], "ownership": 7, "dcgan": [7, 57], "what": [7, 11, 12, 16, 19, 48, 57, 61, 62, 95, 113, 122, 144, 151, 167, 168, 198, 217, 222, 227, 228, 231, 232, 233, 244, 265, 277, 280, 281, 282], "wa": 7, "gan": [7, 57], "agan": 7, "gener": [7, 16, 57, 80, 122, 139, 141, 248, 256, 263], "discrimin": [7, 57, 106], "loop": [7, 15, 40, 104, 150, 174, 175], "move": [7, 25, 103], "checkpoint": [7, 60, 122, 134, 147, 158, 229, 230, 252, 256, 263], "recov": 7, "state": [7, 135, 282], "inspect": [7, 142, 166, 172, 185, 247], "imag": [7, 13, 23, 48, 63, 64, 102, 115, 128, 173, 187, 278], "author": [8, 28, 115], "manual": 8, "when": [8, 137, 144, 145, 209, 277], "should": [8, 61, 137], "i": [8, 12, 16, 33, 48, 57, 61, 62, 113, 122, 144, 145, 151, 165, 167, 194, 209, 222, 224, 228, 231, 232, 233, 244, 247, 265, 278, 280, 282], "why": [8, 58, 61, 137, 138, 209, 212, 231, 232], "distribut": [9, 12, 18, 21, 58, 59, 60, 61, 65, 87, 131, 147, 148, 149, 170, 177, 178, 191, 229, 230, 233, 263], "pipelin": [9, 148, 169, 170], "dispatch": [10, 11, 179], "schema": 10, "For": [10, 95, 257], "do": [10, 48, 95, 144, 159], "need": [10, 95, 194], "In": [10, 95, 103, 258], "place": [10, 95, 103], "view": [10, 184], "go": [10, 48, 57, 80, 187, 194], "beyond": 10, "autocast": [10, 247], "tracer": 10, "extend": [11, 25, 26, 118, 172, 194], "new": [11, 16, 68, 106, 121, 143], "": [11, 17, 109, 158, 208], "kei": [11, 278], "full": [11, 40, 93], "list": 11, "kernel": [11, 16, 87, 162, 235, 236, 275], "against": 11, "nativ": [11, 225], "compat": 11, "known": 11, "issu": 11, "addit": [11, 125, 132, 168, 170, 184, 198], "note": [11, 106, 246], "futur": [11, 16], "work": [11, 12, 16, 41, 133, 134, 135, 137, 159, 216, 230], "stai": 11, "touch": 11, "uneven": 12, "input": [12, 57, 60, 80, 144, 191, 194, 248, 263], "join": 12, "context": [12, 196], "manag": [12, 168], "requir": [12, 19, 115, 138, 172, 217, 228, 233, 244, 278, 280, 282], "distributeddataparallel": [12, 147, 263], "zeroredundancyoptim": [12, 282], "keyword": 12, "argument": 12, "how": [12, 16, 39, 133, 134, 135, 137, 165, 202, 216, 228, 230, 232, 233, 244, 250, 261, 280, 282], "doe": [12, 19, 138, 217], "joinabl": 12, "joinhook": 12, "make": [12, 106, 225], "toi": 12, "class": [12, 15, 25, 36, 56, 105, 166, 191], "transfer": [13, 128], "introduct": [13, 27, 28, 47, 57, 65, 87, 94, 96, 97, 98, 99, 102, 103, 104, 109, 117, 136, 166, 168, 170, 184, 187, 188, 191, 192, 196, 201, 202, 207, 210, 211, 214, 219, 223, 224, 250, 253, 264, 265, 266, 272, 273, 281], "underli": 13, "principl": [13, 210], "packag": [13, 83], "select": [13, 150, 196, 221], "content": [13, 121, 236], "style": [13, 194], "descent": 13, "numpi": [14, 44, 53, 77, 103, 121, 208], "scipi": 14, "less": 14, "parametr": [14, 166, 172], "pendulum": 15, "effect": 15, "action": [15, 150], "_step": 15, "reset": 15, "simul": 15, "_reset": 15, "metadata": [15, 16], "env": 15, "_spec": 15, "spec": 15, "shape": [15, 42, 103, 190, 254], "reproduc": 15, "seed": [15, 103], "wrap": [15, 17, 113, 134, 193, 262, 275], "envbas": 15, "our": [15, 21, 143, 149, 154, 165, 250, 264, 265, 266], "rollout": 15, "simpl": [15, 49, 95, 115, 155, 180, 247, 253], "facilit": 16, "privateuse1": 16, "guard": [16, 190], "deseri": [16, 25], "other": [16, 21, 100, 102, 104, 168, 184], "improv": [16, 120, 184, 214, 236], "user": [16, 86, 223, 275], "renam": 16, "name": [16, 140, 141, 190], "properti": 16, "relat": [16, 42, 187, 260], "pil": 17, "crop": 17, "combin": [18, 137, 147], "dataparallel": [18, 49, 61, 93, 122, 147], "rpc": [18, 131, 148, 176, 177, 178, 197, 228, 234], "framework": [18, 177, 178], "beta": [19, 22, 153, 154, 155, 179, 213, 226, 227, 236, 240, 274, 277, 279], "acceler": [19, 103, 113, 164, 194, 199, 217], "bert": [19, 217], "semi": [19, 27, 217], "structur": [19, 217], "sparsiti": [19, 210, 217], "problem": [19, 217], "solv": [19, 217], "intro": [19, 217], "establish": 19, "baselin": 19, "prune": [19, 172, 217], "spars": [19, 207, 210, 217], "infer": [19, 46, 122, 128, 173, 236, 237, 247, 257, 263, 271, 277, 280], "torchrec": [21, 191, 192], "shard": [21, 65, 133, 134, 135, 137, 191, 282], "instal": [21, 87, 96, 115, 173, 191, 202, 214, 238, 261], "embed": [21, 102, 112, 191], "distributedmodelparallel": [21, 191], "multiprocess": 21, "tabl": [21, 121], "wise": 21, "static": [22, 106, 278], "quantiz": [22, 173, 195, 200, 214, 238], "eager": 22, "architectur": 22, "helper": [22, 210, 235], "dataset": [22, 30, 37, 49, 56, 98, 102, 104, 113, 127, 193, 266], "loader": [22, 93], "imagenet": 22, "post": [22, 214], "awar": [22, 238], "speedup": [22, 188, 247], "option": [23, 35, 47, 49, 115, 125, 193, 214, 223, 250, 281], "export": [23, 114, 115, 118, 122, 189, 190, 214, 277, 278, 280], "runtim": [23, 115, 263, 277, 281], "between": [23, 147, 209], "dynam": [24, 106, 190, 276], "syntax": [24, 90, 220], "appli": [24, 65, 137, 214, 216, 281], "ensembl": [24, 151], "bidirect": 24, "lstm": [24, 106, 110, 150], "layer": [24, 36, 96, 100, 137, 143, 194, 263], "asid": 24, "visual": [24, 37, 96, 102, 115, 128, 165, 180, 182, 185, 244, 246], "project": [25, 194], "With": [25, 184], "cmake": [25, 26], "save": [25, 28, 41, 42, 58, 60, 115, 122, 134, 138, 144, 145, 147, 158, 165, 199, 229, 230, 247, 248, 255, 256, 257, 258, 264], "To": [25, 65], "ivalu": 25, "take": 25, "return": [25, 138], "bound": 25, "appendix": [26, 210], "more": [26, 35, 95, 103, 138, 156, 157, 176, 184, 229, 248, 250, 253, 261, 264, 265, 266], "wai": [26, 167], "supervis": 27, "learn": [27, 38, 39, 50, 62, 90, 106, 107, 108, 121, 128, 131, 158, 168, 174, 175, 176, 178, 184, 198, 248, 250, 253, 261, 264, 265, 266, 277, 281], "usb": 27, "built": [27, 195], "upon": 27, "freematch": 27, "softmatch": 27, "cifar": [27, 105], "10": [27, 105, 165], "onli": [27, 237, 238], "40": 27, "label": [27, 187], "specif": [27, 187, 263], "imbalanc": 27, "algorithm": [27, 175], "further": [28, 35, 36, 37, 40, 45, 47, 58, 60, 61, 114, 115, 117, 118, 120, 125, 128, 145, 146, 150, 194, 195, 207, 209, 210, 263], "read": [28, 35, 36, 37, 40, 45, 47, 58, 60, 61, 114, 115, 117, 118, 120, 125, 145, 146, 150, 187, 195, 207, 209, 210, 244, 263], "audio": [29, 30, 31, 32, 33, 34], "augment": [29, 31, 87, 110, 263], "featur": [31, 32, 96, 110, 128, 134, 184, 187, 191, 237, 238], "extract": [32, 187], "o": 33, "resampl": 34, "automat": [35, 109, 153, 247, 278], "differenti": [35, 47, 109, 153], "tensor": [35, 44, 53, 67, 78, 85, 98, 103, 109, 121, 131, 137, 138, 140, 165, 179, 194, 210, 212, 227, 260, 263, 278], "disabl": [35, 263], "track": [35, 144, 185], "jacobian": [35, 157, 162], "product": [35, 157, 162, 179], "nn": [36, 72, 73, 83, 90, 100, 113, 121, 122, 129, 130, 172, 194, 252, 260, 278], "flatten": 36, "linear": [36, 100, 107, 113], "relu": [36, 195], "sequenti": [36, 113], "softmax": [36, 107, 209], "dataload": [37, 56, 98, 104, 113], "iter": [37, 54, 56, 172], "__len__": 37, "__getitem__": 37, "prepar": [37, 54, 140, 141, 180, 184, 195, 207, 208, 209, 223, 242, 243], "through": [37, 56, 90, 195, 250], "thi": [39, 62, 134, 165, 194, 216], "guid": [39, 135, 168, 263], "hyperparamet": [40, 93, 174, 175], "quickstart": 41, "weight": [42, 51, 57, 70, 121], "initi": [44, 53, 57, 58, 135, 136, 147, 149, 158, 166, 212, 219, 250, 264, 265], "attribut": [44, 53, 96, 246], "bridg": [44, 53, 103], "arrai": [44, 53], "totensor": 45, "lambda": 45, "fast": [46, 80, 236], "better": [46, 202, 211], "gentl": 47, "background": [47, 168], "usag": [47, 142, 143, 153, 165, 168, 188, 190, 223, 236, 238, 271, 275], "vector": [47, 151, 157, 162], "calculu": 47, "exclus": 47, "dag": 47, "classifi": [48, 107, 115, 140, 187], "about": [48, 254], "cifar10": 48, "convolut": [48, 100, 143, 150, 154, 263], "multipl": [48, 122, 172, 258], "where": [48, 57, 80, 187, 209], "dummi": 49, "8": [49, 248, 262], "summari": [49, 134, 179, 245], "deep": [50, 62, 106, 107, 108], "60": [50, 62], "minut": [50, 62], "blitz": [50, 62], "backprop": 51, "chatbot": 54, "preprocess": [54, 127, 158, 173], "format": [54, 115, 159, 198, 230, 263], "trim": 54, "seq2seq": [54, 180], "encod": [54, 112, 180], "decod": [54, 180], "procedur": 54, "mask": [54, 194, 209], "singl": [54, 161], "greedi": 54, "my": 54, "text": [54, 126, 127, 186], "googl": 55, "colab": 55, "version": [55, 162], "drive": 55, "enabl": [55, 135, 196, 198, 201, 263], "compos": [56, 157, 275], "afterword": 56, "torchvis": [56, 81, 193], "adversari": [57, 80], "fault": 58, "toler": 58, "torchrun": [58, 147], "grace": 58, "restart": 58, "process": [58, 60, 147, 170, 171, 176], "group": [58, 60, 171], "provid": 58, "variabl": [58, 136, 263], "snapshot": [58, 165], "trainer": 58, "constructor": [58, 263], "resum": [58, 122, 247], "video": [59, 173, 278], "section": 59, "multi": [60, 84, 93, 139], "ddp": [60, 61, 131, 145, 147, 263], "job": [60, 198, 253], "you": [61, 102, 137, 168, 194, 198, 246, 277, 281], "prefer": 61, "over": 61, "dp": 61, "goal": 62, "segment": [63, 64, 193, 278], "deeplabv3": [63, 64], "android": [63, 206, 221, 223, 225, 240, 242], "io": [64, 205, 206, 221, 240, 243], "primit": 65, "commun": [65, 87, 93, 149, 228], "launcher": 65, "scale": [65, 137, 146, 179], "develop": 65, "control": [70, 114, 121, 179, 190, 263, 276, 281], "flow": [70, 114, 121, 190, 278], "share": [70, 121], "warm": [77, 121], "threat": 80, "sign": 80, "attack": 80, "under": 80, "fgsm": 80, "accuraci": [80, 93, 156, 238], "v": [80, 157, 168, 208], "epsilon": 80, "sampl": [80, 141, 167, 244], "finetun": [81, 128, 193], "former": 86, "holist": [87, 88], "analysi": [87, 88], "hta": 87, "tempor": 87, "breakdown": 87, "idl": 87, "durat": 87, "overlap": 87, "counter": 87, "memori": [87, 110, 120, 138, 143, 159, 165, 168, 175, 229, 236, 253, 263, 281], "bandwidth": 87, "queue": 87, "length": [87, 263], "launch": [87, 170, 244], "statist": 87, "diff": 88, "inform": [90, 156], "part": [90, 110], "pure": 90, "top": 90, "level": [90, 95, 110, 140, 141], "tune": [93, 134, 236, 263], "rai": 93, "configur": [93, 139, 244, 272], "search": 93, "space": 93, "youtub": [94, 97, 99], "seri": [94, 99], "fundament": 95, "we": 95, "turn": [95, 140], "off": 95, "On": 95, "profil": [95, 120, 155, 156, 184, 197, 234, 244, 253], "advanc": [95, 106, 134, 149, 184, 208, 224, 247, 275], "topic": [95, 149, 247], "detail": [95, 219], "high": [95, 179], "understand": 96, "captum": [96, 246], "first": [96, 114, 166], "occlus": 96, "gradcam": 96, "insight": 96, "common": [100, 142, 278], "type": [100, 103, 191, 247, 278], "recurr": [100, 150], "manipul": [100, 103], "activ": [100, 104, 211], "tensorboard": [102, 184, 185, 261], "befor": [102, 187, 246], "show": 102, "scalar": [102, 261], "resourc": [102, 104, 132, 168, 170, 280], "random": [103, 106], "math": [103, 236], "logic": 103, "brief": 103, "broadcast": 103, "alter": 103, "copi": [103, 168], "chang": [103, 249], "number": 103, "dimens": [103, 236], "per": [104, 167], "epoch": 104, "knowledg": 105, "distil": 105, "util": [105, 172, 175, 194, 224, 248, 260, 263, 274], "cross": [105, 194], "entropi": 105, "cosin": 105, "intermedi": [105, 144, 263], "regressor": 105, "decis": 106, "bi": 106, "crf": 106, "versu": 106, "toolkit": 106, "condit": 106, "field": 106, "discuss": 106, "exercis": [106, 110, 112, 125, 140, 141, 180], "tag": [106, 110], "block": [107, 194, 248], "affin": 107, "map": 107, "non": [107, 168, 190, 227, 263], "probabl": 107, "compon": [107, 156], "logist": 107, "regress": 107, "bag": [107, 112], "word": [107, 112], "nlp": [108, 140, 141, 163, 180], "librari": [109, 126, 187, 225, 250, 253, 263, 264, 265, 266, 281], "reshap": 109, "sequenc": [110, 137, 180], "long": [110, 253], "short": [110, 244], "term": 110, "speech": [110, 183, 186, 278], "tagger": 110, "charact": [110, 140, 141], "lexic": 112, "semant": [112, 207, 208], "dens": [112, 179], "n": 112, "gram": 112, "languag": [112, 129, 130], "continu": 112, "realli": 113, "mnist": 113, "net": 113, "scratch": [113, 140, 141, 163, 180], "without": [113, 223], "refactor": [113, 114], "add": [113, 136, 193, 274], "valid": [113, 263], "fit": [113, 165], "get_data": 113, "switch": [113, 263], "cnn": 113, "close": 113, "thought": 113, "attempt": 114, "suggest": [114, 190], "patch": [114, 187], "cond": 114, "netron": 115, "6": [115, 184, 185, 195, 248, 253, 262], "7": [115, 184, 195, 248, 253, 262], "compar": [115, 248], "ones": 115, "overrid": 118, "exist": [118, 159], "debug": [120, 156, 198, 263], "print": 120, "state_dict": [122, 265], "recommend": [122, 140, 168, 188], "entir": 122, "program": [122, 190], "One": [122, 258], "warmstart": [122, 264], "differ": [122, 142, 193, 264], "across": [122, 255], "cpu": [122, 134, 138, 155, 156, 168, 202, 211, 224, 237, 244, 263, 271, 275, 281], "t5": [124, 134], "base": [124, 197, 221, 234], "summar": 124, "sentiment": 124, "classif": [124, 126, 187, 278], "templat": 125, "torchtext": [126, 127, 129, 130], "vision": [128, 263], "few": 128, "predict": [128, 187], "convnet": 128, "fix": [128, 190], "extractor": 128, "fsdp": [131, 133, 134], "tp": [131, 137], "devicemesh": [131, 232], "welcom": 132, "fulli": [133, 134, 135, 137, 194], "recap": 134, "fine": 134, "hf": 134, "precis": [134, 135, 145, 247, 263], "intial": 134, "strategi": [134, 139], "prefetch": [134, 135], "stream": 134, "rank0": 134, "fsdp2": 135, "clip": [135, 247], "dtensor": 135, "dict": 135, "dcp": [135, 229, 230], "fsdp1": 135, "migrat": 135, "libuv": 136, "tcpstore": 136, "benchmark": [136, 154, 226, 248], "impact": 136, "exit": 136, "rout": 136, "use_libuv": 136, "fals": 136, "0": [136, 190, 209], "init_method": 136, "processgroup": 136, "larg": 137, "layernorm": 137, "rmsnorm": 137, "hook": [138, 165], "typic": 138, "than": 138, "concept": [138, 190], "pack": [138, 194], "unpack": 138, "some": 138, "unconvent": 138, "int": 138, "tupl": 138, "str": 138, "disk": 138, "na": 139, "ax": 139, "torchx": 139, "app": [139, 223], "runner": 139, "searchspac": 139, "metric": [139, 214], "optimizationconfig": 139, "choos": [139, 281], "schedul": [139, 227], "acknowledg": 139, "rnn": [140, 141, 178], "plot": [140, 141, 180], "captur": [142, 155, 165, 173, 214], "larger": 142, "log": [142, 156, 158, 261], "flag": 142, "address": [142, 278], "certain": 142, "limit": [142, 275], "aotautograd": 142, "recompil": [142, 276], "reason": [142, 254], "fuse": [143, 154, 165, 179, 191, 263], "norm": [143, 154, 263], "formula": [143, 275], "batchnorm": 143, "out": [143, 154, 216, 266], "doubl": 144, "output": [144, 191, 238], "real": [145, 173], "world": 145, "cloud": 145, "enough": 145, "multinod": 146, "local": 146, "global": [146, 172], "rank": 146, "heteregen": 146, "troubleshoot": [146, 173, 247], "case": [147, 263], "skew": 147, "speed": [147, 236], "point": [149, 260], "collect": [149, 174, 248], "own": 149, "ring": 149, "allreduc": 149, "dqn": [150, 175], "mlp": 150, "q": [150, 175], "vmap": [151, 222], "forc": 152, "align": 152, "wav2vec2": [152, 183], "fuser": 154, "fx": [154, 155, 188, 214], "fusion": [154, 195, 235], "resnet18": [154, 155], "symbol": [155, 190], "interpret": [155, 206, 221, 240, 246], "investig": 155, "inductor": [156, 201, 272], "determin": 156, "error": [156, 190, 247, 278], "hessian": 157, "hvp": 157, "vhp": 157, "revers": 157, "jacrev": 157, "jacfwd": 157, "functorch": 157, "mario": 158, "plai": 158, "rl": 158, "agent": 158, "definit": 158, "act": 158, "cach": [158, 166, 272, 273], "recal": 158, "td": 158, "all": [158, 165, 194, 247, 253, 263], "let": 158, "channel": 159, "last": 159, "gain": [159, 276], "machin": 161, "best": [161, 188, 191], "practic": [161, 168, 184, 188, 191], "tangent": 162, "ntk": 162, "contract": 162, "nvfuser": 164, "dure": [165, 263], "disclaim": 165, "techniqu": 165, "register_post_accumulate_grad_hook": 165, "everyth": [165, 193], "line": 165, "hand": 166, "ar": [166, 194], "citizen": 166, "concaten": 166, "remov": [166, 172], "grad": [167, 209, 263], "effici": [167, 207, 240, 263], "good": 168, "non_block": 168, "pin_memori": 168, "preambl": 168, "pageabl": 168, "asynchron": [168, 176, 229, 263], "synchron": [168, 263], "true": [168, 252, 263], "cudamemcpyasync": 168, "perspect": 168, "synergi": 168, "direct": [168, 228], "mp": 168, "consider": 168, "partit": 170, "main": 170, "cpp": 171, "subclass": [171, 179, 260], "expos": 171, "re": 172, "raspberri": 173, "pi": 173, "30": 173, "fp": 173, "opencv": 173, "choic": 173, "mobilenetv2": [173, 204, 213], "It": 173, "reinforc": [174, 175, 178], "ppo": 174, "server": [176, 177], "cartpol": 176, "solver": 176, "rref": 178, "dot": 179, "attent": [179, 180, 194], "sdpa": 179, "explicit": [179, 235], "hardwar": 179, "causal": 179, "self": 179, "nestedtensor": 179, "attn_bia": 179, "spatial": 182, "depict": 182, "stn": 182, "recognit": [183, 278], "event": 184, "analyz": [184, 198, 253], "amd": 184, "projector": 185, "assess": 185, "tacotron2": 186, "whole": 187, "slide": 187, "tiatoolbox": 187, "clean": 187, "download": 187, "patchpredictor": 187, "pathologi": 187, "here": 187, "nest": [188, 194, 212], "demonstr": [188, 278], "torchdynamo": [188, 273, 278], "nightli": 189, "break": [190, 278], "strict": [190, 278], "constraint": [190, 195], "special": 190, "dim": 190, "violat": 190, "_check": 190, "ir": 190, "decomposit": 190, "exportdb": 190, "recsi": 191, "embeddingbag": 191, "embeddingbagcollect": 191, "planner": 191, "lazyawait": 191, "anatomi": 191, "lookup": 191, "detect": 193, "pennfudan": 193, "pretrain": 193, "modifi": [193, 247], "backbon": 193, "instanc": 193, "replac": 194, "me": 194, "introduc": [194, 206], "abov": 194, "octob": 194, "2024": 194, "multiheadattent": 194, "gpt": 194, "one": 194, "row": 194, "longer": 194, "caus": 194, "nan": [194, 209, 247], "flexattent": 194, "njt": 194, "swiglu": 194, "feed": 194, "prototyp": [195, 198, 199, 200, 204, 205, 206, 207, 208, 209, 210, 215, 217, 221], "backendconfig": 195, "deriv": 195, "refer": 195, "pattern": 195, "each": 195, "dtypeconfig": 195, "conv": 195, "qconfigmap": 195, "satisfi": 195, "faulti": 195, "rotat": 196, "approach": 196, "workload": [197, 224, 234, 244, 263], "flight": 198, "stuck": 198, "retriev": 198, "dump": 198, "end": [198, 273], "gpudirect": 199, "torchao": 200, "wrapper": [201, 223], "window": 202, "xpu": [202, 244], "softwar": 202, "altern": 202, "intel": [202, 224, 237, 238, 244, 263, 271, 281], "llvm": 202, "core": [204, 263], "ml": 204, "lite": 206, "workflow": [206, 223], "adagrad": 207, "maskedtensor": [207, 208, 209, 210], "simpler": 207, "origin": 207, "maskedarrai": 208, "reduct": [208, 210], "access": [209, 263, 265, 281], "index": 209, "slice": 209, "distinguish": 209, "anoth": 209, "x": 209, "yield": 209, "nansum": 209, "nanmean": 209, "safe": 209, "miss": 209, "coo": 210, "csr": 210, "unari": 210, "binari": 210, "max": 211, "autotun": 211, "see": [212, 226, 275], "also": [212, 226, 275], "nnapi": 213, "openvino": 214, "nncf": 214, "lower": 214, "represent": 214, "recip": [215, 241, 242, 243, 245, 251, 267, 269], "autoload": 216, "tree": 216, "mechan": 216, "skip": [219, 263], "freez": 220, "mobil": [221, 240, 241, 245, 269], "so": 222, "vulkan": 223, "desktop": 223, "sdk": 223, "java": 223, "upload": 223, "leverag": 224, "matrix": 224, "amx": 224, "guidelin": 224, "can": 224, "confirm": 224, "being": 224, "prebuilt": 225, "lr": 227, "happen": 227, "tensorpip": 228, "even": 229, "pin": 229, "commdebugmod": 231, "hsdp": 232, "solut": [232, 278], "horizont": 235, "foreach_map": 235, "aw": 236, "graviton": 236, "processor": 236, "bfloat16": [236, 237], "openbla": 236, "smaller": 236, "alloc": [236, 263, 281], "overhead": 236, "linux": 236, "transpar": 236, "huge": 236, "page": 236, "thp": 236, "float32": 237, "imper": 237, "float16": 237, "zoo": 237, "eas": 238, "compressor": 238, "driven": 238, "deploy": [238, 280], "instrument": 244, "technologi": 244, "itt": 244, "vtune": 244, "showcas": 244, "begin": 246, "final": 246, "default": [247, 249], "gradscal": 247, "e": 247, "g": 247, "amp": [247, 263], "minor": 247, "inf": 247, "mismatch": 247, "mai": 247, "manifest": 247, "cudnn_status_bad_param": 247, "syntaxerror": 248, "timeit": 248, "timer": [248, 262], "autorang": 248, "fuzz": 248, "instruct": [248, 262], "count": [248, 262], "callgrind": [248, 262], "necessari": [250, 253, 264, 265, 266], "specifi": 250, "tip": 252, "mmap": 252, "meta": 252, "load_state_dict": [252, 260], "assign": 252, "instanti": 253, "resnet": 253, "consumpt": 253, "examin": 253, "stack": 253, "And": [256, 257], "swap_tensor": 260, "quick": [262, 281], "wall": 262, "blocked_autorang": 262, "snippet": 262, "collect_callgrind": 262, "delv": 262, "deeper": 262, "b": [262, 264], "footnot": 262, "calcul": 263, "bia": 263, "directli": 263, "follow": 263, "none": 263, "instead": 263, "zero_grad": 263, "channels_last": 263, "uniform": 263, "numa": [263, 281], "openmp": [263, 281], "libiomp": 263, "cudnn": 263, "auto": 263, "tuner": 263, "avoid": 263, "unnecessari": 263, "prealloc": 263, "reduc": [263, 268], "accumul": 263, "match": 263, "find_unused_paramet": 263, "balanc": 263, "zero": 266, "while": 266, "cold": 268, "region": 268, "fp32": 271, "bf16": 271, "torchinductor_fx_graph_cach": 272, "torchinductor_autograd_cach": 272, "torchinductor_cache_dir": 272, "torchinductor_fx_graph_remote_cach": 272, "torchinductor_autograd_remote_cach": 272, "torchinductor_autotune_remote_cach": 272, "torchinductor_force_disable_cach": 272, "offer": 273, "mega": 273, "modular": 273, "torchinductor": 273, "triton": [273, 275], "remot": 273, "rewrit": 274, "mul": 274, "triton_op": 275, "fallback": 275, "flopcount": 275, "set_stanc": 276, "descript": 276, "prevent": 276, "measur": 276, "crash": 276, "sooner": 276, "aotinductor": 277, "challeng": 278, "them": 278, "No": 278, "caption": 278, "cannot": 278, "mutat": 278, "frozen": 278, "promptabl": 278, "torch_log": 279, "engin": 280, "xeon": 281, "run_cpu": 281, "Will": 281, "command": 281, "explan": 281}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"ONNX Live Tutorial": [[0, "onnx-live-tutorial"]], "TorchRL objectives: Coding a DDPG loss": [[1, "torchrl-objectives-coding-a-ddpg-loss"]], "Overview": [[1, "overview"], [19, "overview"], [114, "overview"], [118, "overview"], [125, "overview"], [142, "overview"], [150, "overview"], [156, "overview"], [179, "overview"], [198, "overview"], [238, "overview"], [263, "overview"]], "Prerequisites": [[1, "prerequisites"], [105, "prerequisites"], [114, "prerequisites"], [118, "prerequisites"], [173, "prerequisites"], [198, "prerequisites"], [214, "prerequisites"], [231, "prerequisites"], [235, "prerequisites"], [253, "prerequisites"], [268, "prerequisites"], [272, "prerequisites"], [273, "prerequisites"], [275, "prerequisites"], [276, "prerequisites"], [277, "prerequisites"], [278, "prerequisites"]], "Imports and setup": [[1, "imports-and-setup"]], "TorchRL LossModule": [[1, "torchrl-lossmodule"]], "The __init__ method": [[1, "the-init-method"]], "The value estimator loss method": [[1, "the-value-estimator-loss-method"]], "The actor loss method": [[1, "the-actor-loss-method"]], "The value loss method": [[1, "the-value-loss-method"]], "Putting things together in a forward call": [[1, "putting-things-together-in-a-forward-call"]], "Environment": [[1, "environment"], [150, "environment"], [158, "environment"]], "Transforms": [[1, "transforms"], [45, "transforms"], [56, "transforms"], [174, "transforms"]], "Parallel execution": [[1, "parallel-execution"]], "Normalization of the observations": [[1, "normalization-of-the-observations"]], "Normalization stats": [[1, "normalization-stats"]], "Building the model": [[1, "building-the-model"]], "Exploration": [[1, "exploration"]], "Data collector": [[1, "data-collector"], [174, "data-collector"]], "Evaluator: building your recorder object": [[1, "evaluator-building-your-recorder-object"]], "Replay buffer": [[1, "replay-buffer"], [174, "replay-buffer"]], "Replay buffer storage and batch size": [[1, "replay-buffer-storage-and-batch-size"]], "Loss module construction": [[1, "loss-module-construction"]], "Target network updater": [[1, "target-network-updater"]], "Optimizer": [[1, "optimizer"], [40, "optimizer"], [104, "optimizer"]], "Time to train the policy": [[1, "time-to-train-the-policy"]], "Experiment results": [[1, "experiment-results"]], "Conclusion": [[1, "conclusion"], [2, "conclusion"], [3, "conclusion"], [4, "conclusion"], [6, "conclusion"], [7, "conclusion"], [15, "conclusion"], [16, "conclusion"], [17, "conclusion"], [19, "conclusion"], [22, "conclusion"], [24, "conclusion"], [25, "conclusion"], [26, "conclusion"], [54, "conclusion"], [87, "conclusion"], [105, "conclusion"], [114, "conclusion"], [115, "conclusion"], [118, "conclusion"], [125, "conclusion"], [136, "conclusion"], [137, "conclusion"], [142, "conclusion"], [150, "conclusion"], [155, "conclusion"], [156, "conclusion"], [158, "conclusion"], [159, "conclusion"], [165, "conclusion"], [168, "conclusion"], [170, "conclusion"], [179, "conclusion"], [188, "conclusion"], [190, "conclusion"], [191, "conclusion"], [194, "conclusion"], [196, "conclusion"], [198, "conclusion"], [199, "conclusion"], [200, "conclusion"], [201, "conclusion"], [202, "conclusion"], [207, "conclusion"], [208, "conclusion"], [209, "conclusion"], [210, "conclusion"], [211, "conclusion"], [212, "conclusion"], [214, "conclusion"], [216, "conclusion"], [217, "conclusion"], [220, "conclusion"], [224, "conclusion"], [227, "conclusion"], [229, "conclusion"], [230, "conclusion"], [231, "conclusion"], [232, "conclusion"], [235, "conclusion"], [236, "conclusion"], [252, "conclusion"], [260, "conclusion"], [263, "conclusion"], [268, "conclusion"], [272, "conclusion"], [273, "conclusion"], [274, "conclusion"], [275, "conclusion"], [276, "conclusion"], [277, "conclusion"], [278, "conclusion"], [279, "conclusion"], [281, "conclusion"]], "Next Steps": [[1, "next-steps"], [173, "next-steps"]], "Autograd in C++ Frontend": [[2, "autograd-in-c-frontend"]], "Basic autograd operations": [[2, "basic-autograd-operations"]], "Computing higher-order gradients in C++": [[2, "computing-higher-order-gradients-in-c"]], "Using custom autograd function in C++": [[2, "using-custom-autograd-function-in-c"]], "Translating autograd code from Python to C++": [[2, "translating-autograd-code-from-python-to-c"]], "Using CUDA Graphs in PyTorch C++ API": [[3, "using-cuda-graphs-in-pytorch-c-api"]], "Getting Started": [[3, "getting-started"], [87, "getting-started"], [237, "getting-started"], [238, "getting-started"]], "Training Results": [[3, "training-results"]], "Custom C++ and CUDA Operators": [[4, "custom-c-and-cuda-operators"]], "Setting up the Build System": [[4, "setting-up-the-build-system"]], "Defining the custom op and adding backend implementations": [[4, "defining-the-custom-op-and-adding-backend-implementations"]], "Defining an operator": [[4, "defining-an-operator"]], "Registering backend implementations for an operator": [[4, "registering-backend-implementations-for-an-operator"]], "Adding torch.compile support for an operator": [[4, "adding-torch-compile-support-for-an-operator"]], "Setting up hybrid Python/C++ registration": [[4, "setting-up-hybrid-python-c-registration"]], "Adding training (autograd) support for an operator": [[4, "adding-training-autograd-support-for-an-operator"]], "Testing an operator": [[4, "testing-an-operator"]], "Creating mutable operators": [[4, "creating-mutable-operators"]], "Loading a TorchScript Model in C++": [[5, "loading-a-torchscript-model-in-c"]], "Step 1: Converting Your PyTorch Model to Torch Script": [[5, "step-1-converting-your-pytorch-model-to-torch-script"]], "Converting to Torch Script via Tracing": [[5, "converting-to-torch-script-via-tracing"]], "Converting to Torch Script via Annotation": [[5, "converting-to-torch-script-via-annotation"]], "Step 2: Serializing Your Script Module to a File": [[5, "step-2-serializing-your-script-module-to-a-file"]], "Step 3: Loading Your Script Module in C++": [[5, "step-3-loading-your-script-module-in-c"]], "A Minimal C++ Application": [[5, "a-minimal-c-application"]], "Depending on LibTorch and Building the Application": [[5, "depending-on-libtorch-and-building-the-application"]], "Step 4: Executing the Script Module in C++": [[5, "step-4-executing-the-script-module-in-c"]], "Step 5: Getting Help and Exploring the API": [[5, "step-5-getting-help-and-exploring-the-api"]], "Custom C++ and CUDA Extensions": [[6, "custom-c-and-cuda-extensions"]], "Motivation and Example": [[6, "motivation-and-example"]], "Writing a C++ Extension": [[6, "writing-a-c-extension"]], "Building with setuptools": [[6, "building-with-setuptools"]], "Writing the C++ Op": [[6, "writing-the-c-op"]], "Forward Pass": [[6, "forward-pass"]], "Backward Pass": [[6, "backward-pass"]], "Binding to Python": [[6, "binding-to-python"]], "Using Your Extension": [[6, "using-your-extension"]], "Performance Comparison": [[6, "performance-comparison"], [6, "id4"]], "Performance on GPU Devices": [[6, "performance-on-gpu-devices"]], "JIT Compiling Extensions": [[6, "jit-compiling-extensions"]], "Writing a Mixed C++/CUDA extension": [[6, "writing-a-mixed-c-cuda-extension"]], "Using accessors": [[6, "using-accessors"]], "Integrating a C++/CUDA Operation with PyTorch": [[6, "integrating-a-c-cuda-operation-with-pytorch"]], "Using the PyTorch C++ Frontend": [[7, "using-the-pytorch-c-frontend"]], "Motivation": [[7, "motivation"]], "Writing a Basic Application": [[7, "writing-a-basic-application"]], "Defining the Neural Network Models": [[7, "defining-the-neural-network-models"]], "Module API Basics": [[7, "module-api-basics"]], "Defining a Module and Registering Parameters": [[7, "defining-a-module-and-registering-parameters"]], "Registering Submodules and Traversing the Module Hierarchy": [[7, "registering-submodules-and-traversing-the-module-hierarchy"]], "Running the Network in Forward Mode": [[7, "running-the-network-in-forward-mode"]], "Module Ownership": [[7, "module-ownership"]], "Defining the DCGAN Modules": [[7, "defining-the-dcgan-modules"]], "What was a GAN aGAN?": [[7, "what-was-a-gan-agan"]], "The Generator Module": [[7, "the-generator-module"]], "The Discriminator Module": [[7, "the-discriminator-module"]], "Loading Data": [[7, "loading-data"]], "Writing the Training Loop": [[7, "writing-the-training-loop"]], "Moving to the GPU": [[7, "moving-to-the-gpu"]], "Checkpointing and Recovering the Training State": [[7, "checkpointing-and-recovering-the-training-state"]], "Inspecting Generated Images": [[7, "inspecting-generated-images"]], "PyTorch Custom Operators": [[8, "pytorch-custom-operators"]], "Authoring a custom operator from Python": [[8, "authoring-a-custom-operator-from-python"]], "Integrating custom C++ and/or CUDA code with PyTorch": [[8, "integrating-custom-c-and-or-cuda-code-with-pytorch"]], "The Custom Operators Manual": [[8, "the-custom-operators-manual"]], "When should I create a Custom Operator?": [[8, "when-should-i-create-a-custom-operator"]], "Why should I create a Custom Operator?": [[8, "why-should-i-create-a-custom-operator"]], "Training Transformer models using Distributed Data Parallel and Pipeline Parallelism": [[9, "training-transformer-models-using-distributed-data-parallel-and-pipeline-parallelism"]], "Registering a Dispatched Operator in C++": [[10, "registering-a-dispatched-operator-in-c"]], "Defining schema and backend implementations": [[10, "defining-schema-and-backend-implementations"]], "For operators that do not need autograd": [[10, "for-operators-that-do-not-need-autograd"]], "In-place or view ops": [[10, "in-place-or-view-ops"]], "Adding autograd support": [[10, "adding-autograd-support"]], "Going beyond autograd": [[10, "going-beyond-autograd"]], "Autocast": [[10, "autocast"]], "Batched": [[10, "batched"]], "Tracer": [[10, "tracer"]], "Extending dispatcher for a new backend in C++": [[11, "extending-dispatcher-for-a-new-backend-in-c"]], "What\u2019s a new backend?": [[11, "what-s-a-new-backend"]], "Get a dispatch key for your backend": [[11, "get-a-dispatch-key-for-your-backend"]], "Get the full list of PyTorch operators": [[11, "get-the-full-list-of-pytorch-operators"]], "Register kernels for the new backend": [[11, "register-kernels-for-the-new-backend"], [16, "register-kernels-for-the-new-backend"]], "Autograd support for the new backend": [[11, "autograd-support-for-the-new-backend"]], "Build an extension": [[11, "build-an-extension"]], "Custom operator support": [[11, "custom-operator-support"]], "JIT support": [[11, "jit-support"]], "Testing your backend against native PyTorch backends": [[11, "testing-your-backend-against-native-pytorch-backends"]], "Backward Compatibility": [[11, "backward-compatibility"]], "Known issues & additional notes": [[11, "known-issues-additional-notes"]], "Future Work": [[11, "future-work"], [16, "future-work"]], "Stay in touch": [[11, "stay-in-touch"]], "Distributed Training with Uneven Inputs Using the Join Context Manager": [[12, "distributed-training-with-uneven-inputs-using-the-join-context-manager"]], "Requirements": [[12, "requirements"], [19, "requirements"], [172, "requirements"], [217, "requirements"], [228, "requirements"], [233, "requirements"], [244, "requirements"], [280, "requirements"], [282, "requirements"]], "What is Join?": [[12, "what-is-join"]], "Using Join with DistributedDataParallel": [[12, "using-join-with-distributeddataparallel"]], "Using Join with DistributedDataParallel and ZeroRedundancyOptimizer": [[12, "using-join-with-distributeddataparallel-and-zeroredundancyoptimizer"]], "Passing Keyword Arguments": [[12, "passing-keyword-arguments"]], "How Does Join Work?": [[12, "how-does-join-work"]], "Joinable": [[12, "joinable"]], "JoinHook": [[12, "joinhook"]], "Join": [[12, "join"]], "Making a Toy Class Work with Join": [[12, "making-a-toy-class-work-with-join"]], "Neural Transfer Using PyTorch": [[13, "neural-transfer-using-pytorch"]], "Introduction": [[13, "introduction"], [57, "introduction"], [65, "introduction"], [96, "id1"], [102, "id1"], [104, "id1"], [136, "introduction"], [168, "introduction"], [184, "introduction"], [187, "introduction"], [196, "introduction"], [201, "introduction"], [202, "introduction"], [210, "introduction"], [211, "introduction"], [214, "introduction"], [219, "introduction"], [223, "introduction"], [224, "introduction"], [250, "introduction"], [253, "introduction"], [264, "introduction"], [265, "introduction"], [266, "introduction"], [272, "introduction"], [273, "introduction"]], "Underlying Principle": [[13, "underlying-principle"]], "Importing Packages and Selecting a Device": [[13, "importing-packages-and-selecting-a-device"]], "Loading the Images": [[13, "loading-the-images"]], "Loss Functions": [[13, "loss-functions"], [100, "loss-functions"]], "Content Loss": [[13, "content-loss"]], "Style Loss": [[13, "style-loss"]], "Importing the Model": [[13, "importing-the-model"]], "Gradient Descent": [[13, "gradient-descent"]], "Creating Extensions Using NumPy and SciPy": [[14, "creating-extensions-using-numpy-and-scipy"]], "Parameter-less example": [[14, "parameter-less-example"]], "Parametrized example": [[14, "parametrized-example"]], "Pendulum: Writing your environment and transforms with TorchRL": [[15, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: _step()": [[15, "coding-the-effect-of-an-action-step"]], "Resetting the simulator: _reset()": [[15, "resetting-the-simulator-reset"]], "Environment metadata: env.*_spec": [[15, "environment-metadata-env-spec"]], "Specs shape": [[15, "specs-shape"]], "Reproducible experiments: seeding": [[15, "reproducible-experiments-seeding"]], "Wrapping things together: the EnvBase class": [[15, "wrapping-things-together-the-envbase-class"]], "Testing our environment": [[15, "testing-our-environment"]], "Transforming an environment": [[15, "transforming-an-environment"]], "Writing custom transforms": [[15, "writing-custom-transforms"]], "Executing a rollout": [[15, "executing-a-rollout"]], "Batching computations": [[15, "batching-computations"]], "Training a simple policy": [[15, "training-a-simple-policy"]], "Training loop": [[15, "training-loop"], [150, "training-loop"], [174, "training-loop"], [175, "training-loop"]], "Facilitating New Backend Integration by PrivateUse1": [[16, "facilitating-new-backend-integration-by-privateuse1"]], "What is PrivateUse1?": [[16, "what-is-privateuse1"]], "How to integrate new backend via PrivateUse1": [[16, "how-to-integrate-new-backend-via-privateuse1"]], "Register generator for the new backend": [[16, "register-generator-for-the-new-backend"]], "Register device guard for the new backend": [[16, "register-device-guard-for-the-new-backend"]], "Register serialization and deserialization functions for new backend metadata": [[16, "register-serialization-and-deserialization-functions-for-new-backend-metadata"]], "Other Modules": [[16, "other-modules"]], "How to Improve User Experience with Privateuse1": [[16, "how-to-improve-user-experience-with-privateuse1"]], "Register new backend module to Pytorch": [[16, "register-new-backend-module-to-pytorch"]], "Rename PrivateUse1 to a custom name for the new backend": [[16, "rename-privateuse1-to-a-custom-name-for-the-new-backend"]], "Generate methods and properties related to the new backend": [[16, "generate-methods-and-properties-related-to-the-new-backend"]], "Custom Python Operators": [[17, "custom-python-operators"]], "Example: Wrapping PIL\u2019s crop into a custom operator": [[17, "example-wrapping-pil-s-crop-into-a-custom-operator"]], "Adding training support for crop": [[17, "adding-training-support-for-crop"]], "Testing Python Custom operators": [[17, "testing-python-custom-operators"]], "Mutable Python Custom operators": [[17, "mutable-python-custom-operators"]], "Combining Distributed DataParallel with Distributed RPC Framework": [[18, "combining-distributed-dataparallel-with-distributed-rpc-framework"]], "(beta) Accelerating BERT with semi-structured (2:4) sparsity": [[19, "beta-accelerating-bert-with-semi-structured-2-4-sparsity"]], "What problem does semi-structured sparsity solve?": [[19, "what-problem-does-semi-structured-sparsity-solve"], [217, "what-problem-does-semi-structured-sparsity-solve"]], "Intro & Setup": [[19, "intro-setup"], [217, "intro-setup"]], "Establishing a baseline": [[19, "establishing-a-baseline"]], "Pruning BERT to be 2:4 sparse": [[19, "pruning-bert-to-be-2-4-sparse"], [217, "pruning-bert-to-be-2-4-sparse"]], "Accelerating 2:4 sparse models for inference": [[19, "accelerating-2-4-sparse-models-for-inference"]], "Computation times": [[20, "computation-times"], [43, "computation-times"], [52, "computation-times"], [69, "computation-times"], [75, "computation-times"], [79, "computation-times"], [91, "computation-times"], [101, "computation-times"], [111, "computation-times"], [119, "computation-times"], [123, "computation-times"], [181, "computation-times"], [218, "computation-times"], [259, "computation-times"], [270, "computation-times"], [283, "computation-times"]], "Exploring TorchRec sharding": [[21, "exploring-torchrec-sharding"]], "Installation": [[21, "installation"], [96, "installation"], [238, "installation"], [261, "installation"]], "Distributed Setup": [[21, "distributed-setup"]], "Constructing our embedding model": [[21, "constructing-our-embedding-model"]], "DistributedModelParallel in multiprocessing": [[21, "distributedmodelparallel-in-multiprocessing"]], "Multiprocessing Execution": [[21, "multiprocessing-execution"]], "Table Wise Sharding": [[21, "table-wise-sharding"]], "Explore other sharding modes": [[21, "explore-other-sharding-modes"]], "(beta) Static Quantization with Eager Mode in PyTorch": [[22, "beta-static-quantization-with-eager-mode-in-pytorch"]], "1. Model architecture": [[22, "model-architecture"]], "2. Helper functions": [[22, "helper-functions"]], "3. Define dataset and data loaders": [[22, "define-dataset-and-data-loaders"]], "ImageNet Data": [[22, "imagenet-data"]], "4. Post-training static quantization": [[22, "post-training-static-quantization"]], "5. Quantization-aware training": [[22, "quantization-aware-training"]], "Speedup from quantization": [[22, "speedup-from-quantization"]], "(optional) Exporting a Model from PyTorch to ONNX and Running it using ONNX Runtime": [[23, "optional-exporting-a-model-from-pytorch-to-onnx-and-running-it-using-onnx-runtime"]], "Timing Comparison Between Models": [[23, "timing-comparison-between-models"]], "Running the model on an image using ONNX Runtime": [[23, "running-the-model-on-an-image-using-onnx-runtime"]], "Dynamic Parallelism in TorchScript": [[24, "dynamic-parallelism-in-torchscript"]], "Basic Syntax": [[24, "basic-syntax"], [220, "basic-syntax"]], "Applied Example: Ensemble of Bidirectional LSTMs": [[24, "applied-example-ensemble-of-bidirectional-lstms"]], "Parallelizing Forward and Backward Layers": [[24, "parallelizing-forward-and-backward-layers"]], "Aside: Visualizing Parallelism": [[24, "aside-visualizing-parallelism"]], "Parallelizing Models in the Ensemble": [[24, "parallelizing-models-in-the-ensemble"]], "Extending TorchScript with Custom C++ Classes": [[25, "extending-torchscript-with-custom-c-classes"]], "Implementing and Binding the Class in C++": [[25, "implementing-and-binding-the-class-in-c"]], "Building the Example as a C++ Project With CMake": [[25, "building-the-example-as-a-c-project-with-cmake"]], "Using the C++ Class from Python and TorchScript": [[25, "using-the-c-class-from-python-and-torchscript"]], "Saving, Loading, and Running TorchScript Code Using Custom Classes": [[25, "saving-loading-and-running-torchscript-code-using-custom-classes"]], "Moving Custom Classes To/From IValues": [[25, "moving-custom-classes-to-from-ivalues"]], "Defining Serialization/Deserialization Methods for Custom C++ Classes": [[25, "defining-serialization-deserialization-methods-for-custom-c-classes"]], "Defining Custom Operators that Take or Return Bound C++ Classes": [[25, "defining-custom-operators-that-take-or-return-bound-c-classes"]], "Extending TorchScript with Custom C++ Operators": [[26, "extending-torchscript-with-custom-c-operators"]], "Implementing the Custom Operator in C++": [[26, "implementing-the-custom-operator-in-c"]], "Registering the Custom Operator with TorchScript": [[26, "registering-the-custom-operator-with-torchscript"]], "Building the Custom Operator": [[26, "building-the-custom-operator"]], "Environment setup": [[26, "environment-setup"]], "Building with CMake": [[26, "building-with-cmake"]], "Using the TorchScript Custom Operator in Python": [[26, "using-the-torchscript-custom-operator-in-python"]], "Using the Custom Operator with Tracing": [[26, "using-the-custom-operator-with-tracing"]], "Using the Custom Operator with Script": [[26, "using-the-custom-operator-with-script"]], "Using the TorchScript Custom Operator in C++": [[26, "using-the-torchscript-custom-operator-in-c"]], "Appendix A: More Ways of Building Custom Operators": [[26, "appendix-a-more-ways-of-building-custom-operators"]], "Building with JIT compilation": [[26, "building-with-jit-compilation"]], "Building with Setuptools": [[26, "building-with-setuptools"]], "Semi-Supervised Learning using USB built upon PyTorch": [[27, "semi-supervised-learning-using-usb-built-upon-pytorch"]], "Introduction to FreeMatch and SoftMatch in Semi-Supervised Learning": [[27, "introduction-to-freematch-and-softmatch-in-semi-supervised-learning"]], "Use USB to Train FreeMatch/SoftMatch on CIFAR-10 with only 40 labels": [[27, "use-usb-to-train-freematch-softmatch-on-cifar-10-with-only-40-labels"]], "Use USB to Train SoftMatch with specific imbalanced algorithm on imbalanced CIFAR-10": [[27, "use-usb-to-train-softmatch-with-specific-imbalanced-algorithm-on-imbalanced-cifar-10"]], "Introduction to TorchScript": [[28, "introduction-to-torchscript"]], "Basics of PyTorch Model Authoring": [[28, "basics-of-pytorch-model-authoring"]], "Basics of TorchScript": [[28, "basics-of-torchscript"]], "Tracing Modules": [[28, "tracing-modules"]], "Using Scripting to Convert Modules": [[28, "using-scripting-to-convert-modules"]], "Mixing Scripting and Tracing": [[28, "mixing-scripting-and-tracing"]], "Saving and Loading models": [[28, "saving-and-loading-models"]], "Further Reading": [[28, "further-reading"], [35, "further-reading"], [36, "further-reading"], [37, "further-reading"], [40, "further-reading"], [45, "further-reading"], [58, "further-reading"], [60, "further-reading"], [61, "further-reading"], [120, "further-reading"], [125, "further-reading"], [145, "further-reading"], [146, "further-reading"], [150, "further-reading"], [195, "further-reading"], [207, "further-reading"], [209, "further-reading"], [210, "further-reading"], [263, "further-reading"]], "Audio Data Augmentation": [[29, "audio-data-augmentation"]], "Audio Datasets": [[30, "audio-datasets"]], "Audio Feature Augmentation": [[31, "audio-feature-augmentation"]], "Audio Feature Extractions": [[32, "audio-feature-extractions"]], "Audio I/O": [[33, "audio-i-o"]], "Audio Resampling": [[34, "audio-resampling"]], "Automatic Differentiation with torch.autograd": [[35, "automatic-differentiation-with-torch-autograd"]], "Tensors, Functions and Computational graph": [[35, "tensors-functions-and-computational-graph"]], "Computing Gradients": [[35, "computing-gradients"]], "Disabling Gradient Tracking": [[35, "disabling-gradient-tracking"]], "More on Computational Graphs": [[35, "more-on-computational-graphs"]], "Optional Reading: Tensor Gradients and Jacobian Products": [[35, "optional-reading-tensor-gradients-and-jacobian-products"]], "Build the Neural Network": [[36, "build-the-neural-network"]], "Get Device for Training": [[36, "get-device-for-training"]], "Define the Class": [[36, "define-the-class"]], "Model Layers": [[36, "model-layers"]], "nn.Flatten": [[36, "nn-flatten"]], "nn.Linear": [[36, "nn-linear"]], "nn.ReLU": [[36, "nn-relu"]], "nn.Sequential": [[36, "nn-sequential"]], "nn.Softmax": [[36, "nn-softmax"]], "Model Parameters": [[36, "model-parameters"]], "Datasets & DataLoaders": [[37, "datasets-dataloaders"]], "Loading a Dataset": [[37, "loading-a-dataset"]], "Iterating and Visualizing the Dataset": [[37, "iterating-and-visualizing-the-dataset"]], "Creating a Custom Dataset for your files": [[37, "creating-a-custom-dataset-for-your-files"]], "__init__": [[37, "init"]], "__len__": [[37, "len"]], "__getitem__": [[37, "getitem"]], "Preparing your data for training with DataLoaders": [[37, "preparing-your-data-for-training-with-dataloaders"]], "Iterate through the DataLoader": [[37, "iterate-through-the-dataloader"]], "Learn the Basics": [[38, "learn-the-basics"], [39, "learn-the-basics"]], "Running the Tutorial Code": [[39, "running-the-tutorial-code"], [99, "running-the-tutorial-code"]], "How to Use this Guide": [[39, "how-to-use-this-guide"]], "Optimizing Model Parameters": [[40, "optimizing-model-parameters"]], "Prerequisite Code": [[40, "prerequisite-code"]], "Hyperparameters": [[40, "hyperparameters"]], "Optimization Loop": [[40, "optimization-loop"]], "Loss Function": [[40, "loss-function"], [51, "loss-function"], [104, "loss-function"]], "Full Implementation": [[40, "full-implementation"]], "Quickstart": [[41, "quickstart"]], "Working with data": [[41, "working-with-data"]], "Creating Models": [[41, "creating-models"]], "Optimizing the Model Parameters": [[41, "optimizing-the-model-parameters"]], "Saving Models": [[41, "saving-models"]], "Loading Models": [[41, "loading-models"]], "Save and Load the Model": [[42, "save-and-load-the-model"]], "Saving and Loading Model Weights": [[42, "saving-and-loading-model-weights"]], "Saving and Loading Models with Shapes": [[42, "saving-and-loading-models-with-shapes"]], "Related Tutorials": [[42, "related-tutorials"]], "Tensors": [[44, "tensors"], [53, "tensors"], [85, "tensors"], [121, "tensors"], [121, "id1"]], "Initializing a Tensor": [[44, "initializing-a-tensor"]], "Attributes of a Tensor": [[44, "attributes-of-a-tensor"]], "Operations on Tensors": [[44, "operations-on-tensors"]], "Bridge with NumPy": [[44, "bridge-with-numpy"], [53, "bridge-with-numpy"]], "Tensor to NumPy array": [[44, "tensor-to-numpy-array"], [53, "tensor-to-numpy-array"]], "NumPy array to Tensor": [[44, "numpy-array-to-tensor"], [53, "numpy-array-to-tensor"]], "ToTensor()": [[45, "totensor"]], "Lambda Transforms": [[45, "lambda-transforms"]], "Fast Transformer Inference with Better Transformer": [[46, "fast-transformer-inference-with-better-transformer"]], "A Gentle Introduction to torch.autograd": [[47, "a-gentle-introduction-to-torch-autograd"]], "Background": [[47, "background"], [168, "background"]], "Usage in PyTorch": [[47, "usage-in-pytorch"]], "Differentiation in Autograd": [[47, "differentiation-in-autograd"]], "Optional Reading - Vector Calculus using autograd": [[47, "optional-reading-vector-calculus-using-autograd"]], "Computational Graph": [[47, "computational-graph"]], "Exclusion from the DAG": [[47, "exclusion-from-the-dag"]], "Further readings:": [[47, "further-readings"]], "Training a Classifier": [[48, "training-a-classifier"]], "What about data?": [[48, "what-about-data"]], "Training an image classifier": [[48, "training-an-image-classifier"]], "1. Load and normalize CIFAR10": [[48, "load-and-normalize-cifar10"]], "2. Define a Convolutional Neural Network": [[48, "define-a-convolutional-neural-network"]], "3. Define a Loss function and optimizer": [[48, "define-a-loss-function-and-optimizer"]], "4. Train the network": [[48, "train-the-network"]], "5. Test the network on the test data": [[48, "test-the-network-on-the-test-data"]], "Training on GPU": [[48, "training-on-gpu"]], "Training on multiple GPUs": [[48, "training-on-multiple-gpus"]], "Where do I go next?": [[48, "where-do-i-go-next"]], "Optional: Data Parallelism": [[49, "optional-data-parallelism"]], "Imports and parameters": [[49, "imports-and-parameters"]], "Dummy DataSet": [[49, "dummy-dataset"]], "Simple Model": [[49, "simple-model"]], "Create Model and DataParallel": [[49, "create-model-and-dataparallel"]], "Run the Model": [[49, "run-the-model"]], "Results": [[49, "results"], [57, "results"], [80, "results"], [174, "results"]], "2 GPUs": [[49, "gpus"]], "3 GPUs": [[49, "id1"]], "8 GPUs": [[49, "id2"]], "Summary": [[49, "summary"], [134, "summary"], [179, "summary"]], "Deep Learning with PyTorch: A 60 Minute Blitz": [[50, "deep-learning-with-pytorch-a-60-minute-blitz"], [62, "deep-learning-with-pytorch-a-60-minute-blitz"]], "Neural Networks": [[51, "neural-networks"]], "Define the network": [[51, "define-the-network"]], "Backprop": [[51, "backprop"]], "Update the weights": [[51, "update-the-weights"]], "Tensor Initialization": [[53, "tensor-initialization"]], "Tensor Attributes": [[53, "tensor-attributes"]], "Tensor Operations": [[53, "tensor-operations"]], "Chatbot Tutorial": [[54, "chatbot-tutorial"]], "Preparations": [[54, "preparations"]], "Load & Preprocess Data": [[54, "load-preprocess-data"]], "Create formatted data file": [[54, "create-formatted-data-file"]], "Load and trim data": [[54, "load-and-trim-data"]], "Prepare Data for Models": [[54, "prepare-data-for-models"]], "Define Models": [[54, "define-models"]], "Seq2Seq Model": [[54, "seq2seq-model"]], "Encoder": [[54, "encoder"]], "Decoder": [[54, "decoder"]], "Define Training Procedure": [[54, "define-training-procedure"]], "Masked loss": [[54, "masked-loss"]], "Single training iteration": [[54, "single-training-iteration"]], "Training iterations": [[54, "training-iterations"]], "Define Evaluation": [[54, "define-evaluation"]], "Greedy decoding": [[54, "greedy-decoding"]], "Evaluate my text": [[54, "evaluate-my-text"]], "Run Model": [[54, "run-model"]], "Run Training": [[54, "run-training"]], "Run Evaluation": [[54, "run-evaluation"]], "Running Tutorials in Google Colab": [[55, "running-tutorials-in-google-colab"]], "PyTorch Version in Google Colab": [[55, "pytorch-version-in-google-colab"]], "Using Tutorial Data from Google Drive in Colab": [[55, "using-tutorial-data-from-google-drive-in-colab"]], "Enabling CUDA": [[55, "enabling-cuda"]], "Writing Custom Datasets, DataLoaders and Transforms": [[56, "writing-custom-datasets-dataloaders-and-transforms"]], "Dataset class": [[56, "dataset-class"]], "Compose transforms": [[56, "compose-transforms"]], "Iterating through the dataset": [[56, "iterating-through-the-dataset"]], "Afterword: torchvision": [[56, "afterword-torchvision"]], "DCGAN Tutorial": [[57, "dcgan-tutorial"]], "Generative Adversarial Networks": [[57, "generative-adversarial-networks"]], "What is a GAN?": [[57, "what-is-a-gan"]], "What is a DCGAN?": [[57, "what-is-a-dcgan"]], "Inputs": [[57, "inputs"], [80, "inputs"]], "Data": [[57, "data"]], "Implementation": [[57, "implementation"], [80, "implementation"]], "Weight Initialization": [[57, "weight-initialization"]], "Generator": [[57, "generator"]], "Discriminator": [[57, "discriminator"]], "Loss Functions and Optimizers": [[57, "loss-functions-and-optimizers"]], "Training": [[57, "training"], [140, "training"], [141, "training"], [175, "training"], [180, "training"], [237, "training"], [237, "id5"]], "Where to Go Next": [[57, "where-to-go-next"]], "Fault-tolerant Distributed Training with torchrun": [[58, "fault-tolerant-distributed-training-with-torchrun"]], "Why use torchrun": [[58, "why-use-torchrun"]], "Graceful restarts": [[58, "graceful-restarts"]], "Process group initialization": [[58, "process-group-initialization"]], "Use torchrun-provided environment variables": [[58, "use-torchrun-provided-environment-variables"]], "Saving and loading snapshots": [[58, "saving-and-loading-snapshots"]], "Loading a snapshot in the Trainer constructor": [[58, "loading-a-snapshot-in-the-trainer-constructor"]], "Resuming training": [[58, "resuming-training"]], "Running the script": [[58, "running-the-script"]], "Distributed Data Parallel in PyTorch - Video Tutorials": [[59, "distributed-data-parallel-in-pytorch-video-tutorials"]], "Running the code": [[59, "running-the-code"]], "Tutorial sections": [[59, "tutorial-sections"]], "Multi GPU training with DDP": [[60, "multi-gpu-training-with-ddp"]], "Imports": [[60, "imports"]], "Constructing the process group": [[60, "constructing-the-process-group"]], "Constructing the DDP model": [[60, "constructing-the-ddp-model"]], "Distributing input data": [[60, "distributing-input-data"]], "Saving model checkpoints": [[60, "saving-model-checkpoints"]], "Running the distributed training job": [[60, "running-the-distributed-training-job"]], "What is Distributed Data Parallel (DDP)": [[61, "what-is-distributed-data-parallel-ddp"]], "Why you should prefer DDP over DataParallel (DP)": [[61, "why-you-should-prefer-ddp-over-dataparallel-dp"]], "What is PyTorch?": [[62, "what-is-pytorch"]], "Goal of this tutorial:": [[62, "goal-of-this-tutorial"]], "Image Segmentation DeepLabV3 on Android": [[63, "image-segmentation-deeplabv3-on-android"]], "Image Segmentation DeepLabV3 on iOS": [[64, "image-segmentation-deeplabv3-on-ios"]], "PyTorch Distributed Overview": [[65, "pytorch-distributed-overview"]], "Parallelism APIs": [[65, "parallelism-apis"]], "Sharding primitives": [[65, "sharding-primitives"]], "Communications APIs": [[65, "communications-apis"]], "Launcher": [[65, "launcher"]], "Applying Parallelism To Scale Your Model": [[65, "applying-parallelism-to-scale-your-model"]], "PyTorch Distributed Developers": [[65, "pytorch-distributed-developers"]], "PyTorch: Tensors and autograd": [[67, "pytorch-tensors-and-autograd"], [121, "pytorch-tensors-and-autograd"]], "PyTorch: Defining New autograd Functions": [[68, "pytorch-defining-new-autograd-functions"]], "PyTorch: Control Flow + Weight Sharing": [[70, "pytorch-control-flow-weight-sharing"], [121, "pytorch-control-flow-weight-sharing"]], "PyTorch: Custom nn Modules": [[72, "pytorch-custom-nn-modules"], [121, "pytorch-custom-nn-modules"]], "PyTorch: nn": [[73, "pytorch-nn"], [121, "pytorch-nn"]], "PyTorch: optim": [[74, "pytorch-optim"], [121, "pytorch-optim"]], "Warm-up: numpy": [[77, "warm-up-numpy"], [121, "warm-up-numpy"]], "PyTorch: Tensors": [[78, "pytorch-tensors"], [121, "pytorch-tensors"]], "Adversarial Example Generation": [[80, "adversarial-example-generation"]], "Threat Model": [[80, "threat-model"]], "Fast Gradient Sign Attack": [[80, "fast-gradient-sign-attack"]], "Model Under Attack": [[80, "model-under-attack"]], "FGSM Attack": [[80, "fgsm-attack"]], "Testing Function": [[80, "testing-function"]], "Run Attack": [[80, "run-attack"]], "Accuracy vs Epsilon": [[80, "accuracy-vs-epsilon"]], "Sample Adversarial Examples": [[80, "sample-adversarial-examples"]], "Where to go next?": [[80, "where-to-go-next"]], "Finetuning Torchvision Models": [[81, "finetuning-torchvision-models"]], "Autograd": [[82, "autograd"], [121, "autograd"], [121, "id2"]], "nn Package": [[83, "nn-package"]], "Multi-GPU Examples": [[84, "multi-gpu-examples"]], "PyTorch for Former Torch Users": [[86, "pytorch-for-former-torch-users"]], "Introduction to Holistic Trace Analysis": [[87, "introduction-to-holistic-trace-analysis"]], "Installing HTA": [[87, "installing-hta"]], "Temporal Breakdown": [[87, "temporal-breakdown"]], "Idle Time Breakdown": [[87, "idle-time-breakdown"]], "Kernel Breakdown": [[87, "kernel-breakdown"]], "Kernel Duration Distribution": [[87, "kernel-duration-distribution"]], "Communication Computation Overlap": [[87, "communication-computation-overlap"]], "Augmented Counters": [[87, "augmented-counters"]], "Memory Bandwidth & Queue Length Counters": [[87, "memory-bandwidth-queue-length-counters"]], "CUDA Kernel Launch Statistics": [[87, "cuda-kernel-launch-statistics"]], "Trace Diff using Holistic Trace Analysis": [[88, "trace-diff-using-holistic-trace-analysis"]], "Learning Hybrid Frontend Syntax Through Example": [[90, "learning-hybrid-frontend-syntax-through-example"]], "Hybrid Frontend Information": [[90, "hybrid-frontend-information"]], "Motivating Example": [[90, "motivating-example"]], "Part 1 - Tracing a pure python function": [[90, "part-1-tracing-a-pure-python-function"]], "Part 2 - Scripting a pure python function": [[90, "part-2-scripting-a-pure-python-function"]], "Part 3 - Tracing a nn.Module": [[90, "part-3-tracing-a-nn-module"]], "Part 4 - Scripting a nn.Module": [[90, "part-4-scripting-a-nn-module"]], "Top-Level Module": [[90, "top-level-module"]], "Running the Model": [[90, "running-the-model"]], "Tracing the Top-Level Model": [[90, "tracing-the-top-level-model"]], "Hybrid Frontend Tutorials": [[92, "hybrid-frontend-tutorials"]], "Hyperparameter tuning with Ray Tune": [[93, "hyperparameter-tuning-with-ray-tune"]], "Setup / Imports": [[93, "setup-imports"]], "Data loaders": [[93, "data-loaders"]], "Configurable neural network": [[93, "configurable-neural-network"]], "The train function": [[93, "the-train-function"]], "Adding (multi) GPU support with DataParallel": [[93, "adding-multi-gpu-support-with-dataparallel"]], "Communicating with Ray Tune": [[93, "communicating-with-ray-tune"]], "Full training function": [[93, "full-training-function"]], "Test set accuracy": [[93, "test-set-accuracy"]], "Configuring the search space": [[93, "configuring-the-search-space"]], "Introduction to PyTorch - YouTube Series": [[94, "introduction-to-pytorch-youtube-series"], [99, "introduction-to-pytorch-youtube-series"]], "The Fundamentals of Autograd": [[95, "the-fundamentals-of-autograd"]], "What Do We Need Autograd For?": [[95, "what-do-we-need-autograd-for"]], "A Simple Example": [[95, "a-simple-example"]], "Autograd in Training": [[95, "autograd-in-training"]], "Turning Autograd Off and On": [[95, "turning-autograd-off-and-on"]], "Autograd and In-place Operations": [[95, "autograd-and-in-place-operations"]], "Autograd Profiler": [[95, "autograd-profiler"]], "Advanced Topic: More Autograd Detail and the High-Level API": [[95, "advanced-topic-more-autograd-detail-and-the-high-level-api"]], "The High-Level API": [[95, "the-high-level-api"]], "Model Understanding with Captum": [[96, "model-understanding-with-captum"]], "A First Example": [[96, "a-first-example"]], "Feature Attribution with Integrated Gradients": [[96, "feature-attribution-with-integrated-gradients"]], "Feature Attribution with Occlusion": [[96, "feature-attribution-with-occlusion"]], "Layer Attribution with Layer GradCAM": [[96, "layer-attribution-with-layer-gradcam"]], "Visualization with Captum Insights": [[96, "visualization-with-captum-insights"]], "Introduction to PyTorch on YouTube": [[97, "introduction-to-pytorch-on-youtube"]], "Introduction to PyTorch": [[98, "introduction-to-pytorch"], [109, "introduction-to-pytorch"]], "PyTorch Tensors": [[98, "pytorch-tensors"]], "PyTorch Models": [[98, "pytorch-models"]], "Datasets and Dataloaders": [[98, "datasets-and-dataloaders"]], "Training Your PyTorch Model": [[98, "training-your-pytorch-model"]], "Building Models with PyTorch": [[100, "building-models-with-pytorch"]], "torch.nn.Module and torch.nn.Parameter": [[100, "torch-nn-module-and-torch-nn-parameter"]], "Common Layer Types": [[100, "common-layer-types"]], "Linear Layers": [[100, "linear-layers"]], "Convolutional Layers": [[100, "convolutional-layers"]], "Recurrent Layers": [[100, "recurrent-layers"]], "Transformers": [[100, "transformers"]], "Other Layers and Functions": [[100, "other-layers-and-functions"]], "Data Manipulation Layers": [[100, "data-manipulation-layers"]], "Activation Functions": [[100, "activation-functions"]], "PyTorch TensorBoard Support": [[102, "pytorch-tensorboard-support"]], "Before You Start": [[102, "before-you-start"]], "Showing Images in TensorBoard": [[102, "showing-images-in-tensorboard"]], "Graphing Scalars to Visualize Training": [[102, "graphing-scalars-to-visualize-training"]], "Visualizing Your Model": [[102, "visualizing-your-model"]], "Visualizing Your Dataset with Embeddings": [[102, "visualizing-your-dataset-with-embeddings"]], "Other Resources": [[102, "other-resources"], [104, "other-resources"]], "Introduction to PyTorch Tensors": [[103, "introduction-to-pytorch-tensors"]], "Creating Tensors": [[103, "creating-tensors"], [109, "creating-tensors"]], "Random Tensors and Seeding": [[103, "random-tensors-and-seeding"]], "Tensor Shapes": [[103, "tensor-shapes"]], "Tensor Data Types": [[103, "tensor-data-types"]], "Math & Logic with PyTorch Tensors": [[103, "math-logic-with-pytorch-tensors"]], "In Brief: Tensor Broadcasting": [[103, "in-brief-tensor-broadcasting"]], "More Math with Tensors": [[103, "more-math-with-tensors"]], "Altering Tensors in Place": [[103, "altering-tensors-in-place"]], "Copying Tensors": [[103, "copying-tensors"]], "Moving to Accelerator": [[103, "moving-to-accelerator"]], "Manipulating Tensor Shapes": [[103, "manipulating-tensor-shapes"]], "Changing the Number of Dimensions": [[103, "changing-the-number-of-dimensions"]], "NumPy Bridge": [[103, "numpy-bridge"]], "Training with PyTorch": [[104, "training-with-pytorch"]], "Dataset and DataLoader": [[104, "dataset-and-dataloader"]], "The Model": [[104, "the-model"]], "The Training Loop": [[104, "the-training-loop"]], "Per-Epoch Activity": [[104, "per-epoch-activity"]], "Knowledge Distillation Tutorial": [[105, "knowledge-distillation-tutorial"]], "Loading CIFAR-10": [[105, "loading-cifar-10"]], "Defining model classes and utility functions": [[105, "defining-model-classes-and-utility-functions"]], "Cross-entropy runs": [[105, "cross-entropy-runs"]], "Knowledge distillation run": [[105, "knowledge-distillation-run"]], "Cosine loss minimization run": [[105, "cosine-loss-minimization-run"]], "Intermediate regressor run": [[105, "intermediate-regressor-run"]], "Advanced: Making Dynamic Decisions and the Bi-LSTM CRF": [[106, "advanced-making-dynamic-decisions-and-the-bi-lstm-crf"]], "Dynamic versus Static Deep Learning Toolkits": [[106, "dynamic-versus-static-deep-learning-toolkits"]], "Bi-LSTM Conditional Random Field Discussion": [[106, "bi-lstm-conditional-random-field-discussion"]], "Implementation Notes": [[106, "implementation-notes"]], "Exercise: A new loss function for discriminative tagging": [[106, "exercise-a-new-loss-function-for-discriminative-tagging"]], "Deep Learning with PyTorch": [[107, "deep-learning-with-pytorch"]], "Deep Learning Building Blocks: Affine maps, non-linearities and objectives": [[107, "deep-learning-building-blocks-affine-maps-non-linearities-and-objectives"]], "Affine Maps": [[107, "affine-maps"]], "Non-Linearities": [[107, "non-linearities"]], "Softmax and Probabilities": [[107, "softmax-and-probabilities"]], "Objective Functions": [[107, "objective-functions"]], "Optimization and Training": [[107, "optimization-and-training"]], "Creating Network Components in PyTorch": [[107, "creating-network-components-in-pytorch"]], "Example: Logistic Regression Bag-of-Words classifier": [[107, "example-logistic-regression-bag-of-words-classifier"]], "Deep Learning for NLP with Pytorch": [[108, "deep-learning-for-nlp-with-pytorch"]], "Introduction to Torch\u2019s tensor library": [[109, "introduction-to-torch-s-tensor-library"]], "Operations with Tensors": [[109, "operations-with-tensors"]], "Reshaping Tensors": [[109, "reshaping-tensors"]], "Computation Graphs and Automatic Differentiation": [[109, "computation-graphs-and-automatic-differentiation"]], "Sequence Models and Long Short-Term Memory Networks": [[110, "sequence-models-and-long-short-term-memory-networks"]], "LSTMs in Pytorch": [[110, "lstms-in-pytorch"]], "Example: An LSTM for Part-of-Speech Tagging": [[110, "example-an-lstm-for-part-of-speech-tagging"]], "Exercise: Augmenting the LSTM part-of-speech tagger with character-level features": [[110, "exercise-augmenting-the-lstm-part-of-speech-tagger-with-character-level-features"]], "Word Embeddings: Encoding Lexical Semantics": [[112, "word-embeddings-encoding-lexical-semantics"]], "Getting Dense Word Embeddings": [[112, "getting-dense-word-embeddings"]], "Word Embeddings in Pytorch": [[112, "word-embeddings-in-pytorch"]], "An Example: N-Gram Language Modeling": [[112, "an-example-n-gram-language-modeling"]], "Exercise: Computing Word Embeddings: Continuous Bag-of-Words": [[112, "exercise-computing-word-embeddings-continuous-bag-of-words"]], "What is torch.nn really?": [[113, "what-is-torch-nn-really"]], "MNIST data setup": [[113, "mnist-data-setup"]], "Neural net from scratch (without torch.nn)": [[113, "neural-net-from-scratch-without-torch-nn"]], "Using torch.nn.functional": [[113, "using-torch-nn-functional"]], "Refactor using nn.Module": [[113, "refactor-using-nn-module"]], "Refactor using nn.Linear": [[113, "refactor-using-nn-linear"]], "Refactor using torch.optim": [[113, "refactor-using-torch-optim"]], "Refactor using Dataset": [[113, "refactor-using-dataset"]], "Refactor using DataLoader": [[113, "refactor-using-dataloader"]], "Add validation": [[113, "add-validation"]], "Create fit() and get_data()": [[113, "create-fit-and-get-data"]], "Switch to CNN": [[113, "switch-to-cnn"]], "Using nn.Sequential": [[113, "using-nn-sequential"]], "Wrapping DataLoader": [[113, "wrapping-dataloader"]], "Using your Accelerator": [[113, "using-your-accelerator"]], "Closing thoughts": [[113, "closing-thoughts"]], "Export a model with control flow to ONNX": [[114, "export-a-model-with-control-flow-to-onnx"]], "Define the Models": [[114, "define-the-models"]], "Exporting the Model: First Attempt": [[114, "exporting-the-model-first-attempt"]], "Using torch.onnx.export() with JIT Tracing": [[114, "using-torch-onnx-export-with-jit-tracing"]], "Suggested Patch: Refactoring with torch.cond()": [[114, "suggested-patch-refactoring-with-torch-cond"]], "Further reading": [[114, "further-reading"], [115, "further-reading"], [117, "further-reading"], [118, "further-reading"]], "Export a PyTorch model to ONNX": [[115, "export-a-pytorch-model-to-onnx"]], "1. Install the required dependencies": [[115, "install-the-required-dependencies"]], "2. Author a simple image classifier model": [[115, "author-a-simple-image-classifier-model"]], "3. Export the model to ONNX format": [[115, "export-the-model-to-onnx-format"]], "3.5. (Optional) Optimize the ONNX model": [[115, "optional-optimize-the-onnx-model"]], "4. Save the ONNX model in a file": [[115, "save-the-onnx-model-in-a-file"]], "5. Visualize the ONNX model graph using Netron": [[115, "visualize-the-onnx-model-graph-using-netron"]], "6. Execute the ONNX model with ONNX Runtime": [[115, "execute-the-onnx-model-with-onnx-runtime"]], "7. Compare the PyTorch results with the ones from the ONNX Runtime": [[115, "compare-the-pytorch-results-with-the-ones-from-the-onnx-runtime"]], "ONNX": [[116, "onnx"]], "Introduction to ONNX": [[117, "introduction-to-onnx"]], "Dependencies": [[117, "dependencies"]], "Extending the ONNX Exporter Operator Support": [[118, "extending-the-onnx-exporter-operator-support"]], "Overriding the implementation of an existing PyTorch operator": [[118, "overriding-the-implementation-of-an-existing-pytorch-operator"]], "Using custom ONNX operators": [[118, "using-custom-onnx-operators"]], "Supporting a custom PyTorch operator": [[118, "supporting-a-custom-pytorch-operator"]], "Profiling your PyTorch Module": [[120, "profiling-your-pytorch-module"]], "Performance debugging using Profiler": [[120, "performance-debugging-using-profiler"]], "Profile the forward pass": [[120, "profile-the-forward-pass"]], "Print profiler results": [[120, "print-profiler-results"]], "Improve memory performance": [[120, "improve-memory-performance"]], "Improve time performance": [[120, "improve-time-performance"]], "Learning PyTorch with Examples": [[121, "learning-pytorch-with-examples"]], "Table of Contents": [[121, "table-of-contents"]], "PyTorch: Defining new autograd functions": [[121, "pytorch-defining-new-autograd-functions"]], "nn module": [[121, "nn-module"], [121, "id3"]], "Examples": [[121, "examples"], [216, "examples"], [276, "examples"]], "Saving and Loading Models": [[122, "saving-and-loading-models"]], "What is a state_dict?": [[122, "what-is-a-state-dict"]], "Example:": [[122, "example"]], "Saving & Loading Model for Inference": [[122, "saving-loading-model-for-inference"]], "Save/Load state_dict (Recommended)": [[122, "save-load-state-dict-recommended"]], "Save/Load Entire Model": [[122, "save-load-entire-model"]], "Saving an Exported Program": [[122, "saving-an-exported-program"]], "Saving & Loading a General Checkpoint for Inference and/or Resuming Training": [[122, "saving-loading-a-general-checkpoint-for-inference-and-or-resuming-training"]], "Save:": [[122, "save"], [122, "id1"], [122, "id3"]], "Load:": [[122, "load"], [122, "id2"], [122, "id4"]], "Saving Multiple Models in One File": [[122, "saving-multiple-models-in-one-file"]], "Warmstarting Model Using Parameters from a Different Model": [[122, "warmstarting-model-using-parameters-from-a-different-model"]], "Saving & Loading Model Across Devices": [[122, "saving-loading-model-across-devices"]], "Save on GPU, Load on CPU": [[122, "save-on-gpu-load-on-cpu"]], "Save on GPU, Load on GPU": [[122, "save-on-gpu-load-on-gpu"]], "Save on CPU, Load on GPU": [[122, "save-on-cpu-load-on-gpu"]], "Saving torch.nn.DataParallel Models": [[122, "saving-torch-nn-dataparallel-models"]], "T5-Base Model for Summarization, Sentiment Classification, and Translation": [[124, "t5-base-model-for-summarization-sentiment-classification-and-translation"]], "Template Tutorial": [[125, "template-tutorial"]], "Steps": [[125, "steps"], [184, "steps"], [248, "steps"], [250, "steps"], [253, "steps"], [264, "steps"], [265, "steps"], [266, "steps"], [268, "steps"]], "(Optional) Additional Exercises": [[125, "optional-additional-exercises"]], "Text classification with the torchtext library": [[126, "text-classification-with-the-torchtext-library"]], "Preprocess custom text dataset using torchtext": [[127, "preprocess-custom-text-dataset-using-torchtext"]], "Transfer Learning for Computer Vision Tutorial": [[128, "transfer-learning-for-computer-vision-tutorial"]], "Load Data": [[128, "load-data"]], "Visualize a few images": [[128, "visualize-a-few-images"]], "Training the model": [[128, "training-the-model"], [182, "training-the-model"]], "Visualizing the model predictions": [[128, "visualizing-the-model-predictions"]], "Finetuning the ConvNet": [[128, "finetuning-the-convnet"]], "Train and evaluate": [[128, "train-and-evaluate"], [128, "id1"]], "ConvNet as fixed feature extractor": [[128, "convnet-as-fixed-feature-extractor"]], "Inference on custom images": [[128, "inference-on-custom-images"]], "Further Learning": [[128, "further-learning"]], "Language Modeling with nn.Transformer and torchtext": [[129, "language-modeling-with-nn-transformer-and-torchtext"]], "Language Translation with nn.Transformer and torchtext": [[130, "language-translation-with-nn-transformer-and-torchtext"]], "Distributed and Parallel Training Tutorials": [[131, "distributed-and-parallel-training-tutorials"]], "Learn DDP": [[131, "learn-ddp"]], "Learn FSDP": [[131, "learn-fsdp"]], "Learn Tensor Parallel (TP)": [[131, "learn-tensor-parallel-tp"]], "Learn DeviceMesh": [[131, "learn-devicemesh"]], "Learn RPC": [[131, "learn-rpc"]], "Custom Extensions": [[131, "custom-extensions"]], "Welcome to PyTorch Tutorials": [[132, "welcome-to-pytorch-tutorials"]], "Additional Resources": [[132, "additional-resources"], [170, "additional-resources"]], "Getting Started with Fully Sharded Data Parallel(FSDP)": [[133, "getting-started-with-fully-sharded-data-parallel-fsdp"]], "How FSDP works": [[133, "how-fsdp-works"]], "How to use FSDP": [[133, "how-to-use-fsdp"]], "Advanced Model Training with Fully Sharded Data Parallel (FSDP)": [[134, "advanced-model-training-with-fully-sharded-data-parallel-fsdp"]], "FSDP Features in This Tutorial": [[134, "fsdp-features-in-this-tutorial"]], "Recap on How FSDP Works": [[134, "recap-on-how-fsdp-works"]], "Fine-tuning HF T5": [[134, "fine-tuning-hf-t5"]], "Transformer Wrapping Policy": [[134, "transformer-wrapping-policy"]], "Mixed Precision": [[134, "mixed-precision"]], "Intializing FSDP Model on Device": [[134, "intializing-fsdp-model-on-device"]], "Sharding Strategy": [[134, "sharding-strategy"]], "Backward Prefetch": [[134, "backward-prefetch"]], "Model Checkpoint Saving, by streaming to the Rank0 CPU": [[134, "model-checkpoint-saving-by-streaming-to-the-rank0-cpu"]], "Getting Started with Fully Sharded Data Parallel (FSDP2)": [[135, "getting-started-with-fully-sharded-data-parallel-fsdp2"]], "How FSDP2 works": [[135, "how-fsdp2-works"]], "How to use FSDP2": [[135, "how-to-use-fsdp2"]], "Model Initialization": [[135, "model-initialization"]], "Forward/Backward with Prefetching": [[135, "forward-backward-with-prefetching"]], "Enabling Mixed Precision": [[135, "enabling-mixed-precision"]], "Gradient Clipping and Optimizer with DTensor": [[135, "gradient-clipping-and-optimizer-with-dtensor"]], "State Dicts with DTensor APIs": [[135, "state-dicts-with-dtensor-apis"]], "State Dict with DCP APIs": [[135, "state-dict-with-dcp-apis"]], "FSDP1-to-FSDP2 migration guide": [[135, "fsdp1-to-fsdp2-migration-guide"]], "Introduction to Libuv TCPStore Backend": [[136, "introduction-to-libuv-tcpstore-backend"]], "Performance Benchmark": [[136, "performance-benchmark"]], "Impact": [[136, "impact"]], "Exit Route 1: Pass use_libuv=False to TCPStore Initialization": [[136, "exit-route-1-pass-use-libuv-false-to-tcpstore-initialization"]], "Exit Route 2: Add use_libuv=0 to init_method at ProcessGroup Initialization": [[136, "exit-route-2-add-use-libuv-0-to-init-method-at-processgroup-initialization"]], "Exit Route 3: Set Environment Variable USE_LIBUV to 0": [[136, "exit-route-3-set-environment-variable-use-libuv-to-0"]], "Large Scale Transformer model training with Tensor Parallel (TP)": [[137, "large-scale-transformer-model-training-with-tensor-parallel-tp"]], "How Tensor Parallel works?": [[137, "how-tensor-parallel-works"]], "When and Why you should apply Tensor Parallel": [[137, "when-and-why-you-should-apply-tensor-parallel"]], "How to apply Tensor Parallel": [[137, "how-to-apply-tensor-parallel"]], "Apply Sequence Parallel to LayerNorm/RMSNorm layers": [[137, "apply-sequence-parallel-to-layernorm-rmsnorm-layers"]], "Apply Loss Parallel": [[137, "apply-loss-parallel"]], "Combine Tensor Parallel with Fully Sharded Data Parallel together": [[137, "combine-tensor-parallel-with-fully-sharded-data-parallel-together"]], "Hooks for autograd saved tensors": [[138, "hooks-for-autograd-saved-tensors"]], "Saved tensors": [[138, "saved-tensors"]], "Why does training a model (typically) requires more memory than evaluating it?": [[138, "why-does-training-a-model-typically-requires-more-memory-than-evaluating-it"]], "The concept of packing / unpacking": [[138, "the-concept-of-packing-unpacking"]], "Saved tensors hooks": [[138, "saved-tensors-hooks"]], "Some unconventional examples": [[138, "some-unconventional-examples"]], "Returning an int": [[138, "returning-an-int"]], "Returning a tuple": [[138, "returning-a-tuple"]], "Returning a str": [[138, "returning-a-str"]], "Saving tensors to CPU": [[138, "saving-tensors-to-cpu"]], "Saving tensors to disk": [[138, "saving-tensors-to-disk"]], "Multi-Objective NAS with Ax": [[139, "multi-objective-nas-with-ax"]], "Defining the TorchX App": [[139, "defining-the-torchx-app"]], "Setting up the Runner": [[139, "setting-up-the-runner"]], "Setting up the SearchSpace": [[139, "setting-up-the-searchspace"]], "Setting up Metrics": [[139, "setting-up-metrics"]], "Setting up the OptimizationConfig": [[139, "setting-up-the-optimizationconfig"]], "Creating the Ax Experiment": [[139, "creating-the-ax-experiment"]], "Choosing the Generation Strategy": [[139, "choosing-the-generation-strategy"]], "Configuring the Scheduler": [[139, "configuring-the-scheduler"]], "Running the optimization": [[139, "running-the-optimization"]], "Evaluating the results": [[139, "evaluating-the-results"]], "Acknowledgments": [[139, "acknowledgments"]], "NLP From Scratch: Classifying Names with a Character-Level RNN": [[140, "nlp-from-scratch-classifying-names-with-a-character-level-rnn"]], "Recommended Preparation": [[140, "recommended-preparation"]], "Preparing Torch": [[140, "preparing-torch"]], "Preparing the Data": [[140, "preparing-the-data"], [141, "preparing-the-data"]], "Turning Names into Tensors": [[140, "turning-names-into-tensors"]], "Creating the Network": [[140, "creating-the-network"], [141, "creating-the-network"]], "Training the Network": [[140, "training-the-network"], [141, "training-the-network"]], "Plotting the Results": [[140, "plotting-the-results"]], "Evaluating the Results": [[140, "evaluating-the-results"]], "Exercises": [[140, "exercises"], [141, "exercises"], [180, "exercises"]], "NLP From Scratch: Generating Names with a Character-Level RNN": [[141, "nlp-from-scratch-generating-names-with-a-character-level-rnn"]], "Preparing for Training": [[141, "preparing-for-training"]], "Plotting the Losses": [[141, "plotting-the-losses"]], "Sampling the Network": [[141, "sampling-the-network"]], "Compiled Autograd: Capturing a larger backward graph for torch.compile": [[142, "compiled-autograd-capturing-a-larger-backward-graph-for-torch-compile"]], "Setup": [[142, "setup"], [149, "setup"], [150, "setup"], [162, "setup"], [170, "setup"], [184, "setup"], [196, "setup"], [250, "setup"], [253, "setup"], [264, "setup"], [265, "setup"], [266, "setup"], [268, "setup"], [279, "setup"]], "Basic usage": [[142, "basic-usage"]], "Inspecting the compiled autograd logs": [[142, "inspecting-the-compiled-autograd-logs"]], "Compiling the forward and backward pass using different flags": [[142, "compiling-the-forward-and-backward-pass-using-different-flags"]], "Compiled Autograd addresses certain limitations of AOTAutograd": [[142, "compiled-autograd-addresses-certain-limitations-of-aotautograd"]], "Common recompilation reasons for Compiled Autograd": [[142, "common-recompilation-reasons-for-compiled-autograd"]], "Fusing Convolution and Batch Norm using Custom Function": [[143, "fusing-convolution-and-batch-norm-using-custom-function"]], "Backward Formula Implementation for Convolution": [[143, "backward-formula-implementation-for-convolution"]], "Backward Formula Implementation for Batch Norm": [[143, "backward-formula-implementation-for-batch-norm"]], "Fusing Convolution and BatchNorm": [[143, "fusing-convolution-and-batchnorm"]], "Testing out our new Layer": [[143, "testing-out-our-new-layer"]], "A Comparison of Memory Usage": [[143, "a-comparison-of-memory-usage"]], "Double Backward with Custom Functions": [[144, "double-backward-with-custom-functions"]], "Saving the Inputs": [[144, "saving-the-inputs"]], "Saving the Outputs": [[144, "saving-the-outputs"]], "Saving Intermediate Results": [[144, "saving-intermediate-results"]], "Saving Intermediate Results: What not to do": [[144, "saving-intermediate-results-what-not-to-do"]], "When Backward is not Tracked": [[144, "when-backward-is-not-tracked"]], "Training \u201creal-world\u201d models with DDP": [[145, "training-real-world-models-with-ddp"]], "Files used for training": [[145, "files-used-for-training"]], "Saving and Loading from the cloud": [[145, "saving-and-loading-from-the-cloud"]], "Using Mixed Precision": [[145, "using-mixed-precision"]], "When is DDP not enough?": [[145, "when-is-ddp-not-enough"]], "Multinode Training": [[146, "multinode-training"]], "Local and Global ranks": [[146, "local-and-global-ranks"]], "Heteregeneous Scaling": [[146, "heteregeneous-scaling"]], "Troubleshooting": [[146, "troubleshooting"], [247, "troubleshooting"]], "Getting Started with Distributed Data Parallel": [[147, "getting-started-with-distributed-data-parallel"]], "Comparison between DataParallel and DistributedDataParallel": [[147, "comparison-between-dataparallel-and-distributeddataparallel"]], "Basic Use Case": [[147, "basic-use-case"]], "Skewed Processing Speeds": [[147, "skewed-processing-speeds"]], "Save and Load Checkpoints": [[147, "save-and-load-checkpoints"]], "Combining DDP with Model Parallelism": [[147, "combining-ddp-with-model-parallelism"]], "Initialize DDP with torch.distributed.run/torchrun": [[147, "initialize-ddp-with-torch-distributed-run-torchrun"]], "Distributed Pipeline Parallelism Using RPC": [[148, "distributed-pipeline-parallelism-using-rpc"]], "Writing Distributed Applications with PyTorch": [[149, "writing-distributed-applications-with-pytorch"]], "Point-to-Point Communication": [[149, "point-to-point-communication"]], "Collective Communication": [[149, "collective-communication"]], "Distributed Training": [[149, "distributed-training"]], "Our Own Ring-Allreduce": [[149, "our-own-ring-allreduce"]], "Advanced Topics": [[149, "advanced-topics"]], "Communication Backends": [[149, "communication-backends"]], "Initialization Methods": [[149, "initialization-methods"]], "Recurrent DQN: Training recurrent policies": [[150, "recurrent-dqn-training-recurrent-policies"]], "Policy": [[150, "policy"], [174, "policy"]], "Convolutional network": [[150, "convolutional-network"]], "LSTM Module": [[150, "lstm-module"]], "MLP": [[150, "mlp"]], "Using the Q-Values to select an action": [[150, "using-the-q-values-to-select-an-action"]], "Using the model for the loss": [[150, "using-the-model-for-the-loss"]], "DQN Loss": [[150, "dqn-loss"]], "Collector and replay buffer": [[150, "collector-and-replay-buffer"]], "Model ensembling": [[151, "model-ensembling"]], "What is model ensembling?": [[151, "what-is-model-ensembling"]], "Using vmap to vectorize the ensemble": [[151, "using-vmap-to-vectorize-the-ensemble"]], "Performance": [[151, "performance"]], "Forced Alignment with Wav2Vec2": [[152, "forced-alignment-with-wav2vec2"]], "Forward-mode Automatic Differentiation (Beta)": [[153, "forward-mode-automatic-differentiation-beta"]], "Basic Usage": [[153, "basic-usage"], [188, "basic-usage"], [190, "basic-usage"], [236, "basic-usage"], [275, "basic-usage"]], "Usage with Modules": [[153, "usage-with-modules"]], "Using the functional Module API (beta)": [[153, "using-the-functional-module-api-beta"]], "Custom autograd Function": [[153, "custom-autograd-function"]], "Functional API (beta)": [[153, "functional-api-beta"]], "Using the functional API with Modules": [[153, "using-the-functional-api-with-modules"]], "(beta) Building a Convolution/Batch Norm fuser in FX": [[154, "beta-building-a-convolution-batch-norm-fuser-in-fx"]], "Fusing Convolution with Batch Norm": [[154, "fusing-convolution-with-batch-norm"], [154, "id1"]], "FX Fusion Pass": [[154, "fx-fusion-pass"]], "Testing out our Fusion Pass": [[154, "testing-out-our-fusion-pass"]], "Benchmarking our Fusion on ResNet18": [[154, "benchmarking-our-fusion-on-resnet18"]], "(beta) Building a Simple CPU Performance Profiler with FX": [[155, "beta-building-a-simple-cpu-performance-profiler-with-fx"]], "Capturing the Model with Symbolic Tracing": [[155, "capturing-the-model-with-symbolic-tracing"]], "Creating a Profiling Interpreter": [[155, "creating-a-profiling-interpreter"]], "Investigating the Performance of ResNet18": [[155, "investigating-the-performance-of-resnet18"]], "Inductor CPU backend debugging and profiling": [[156, "inductor-cpu-backend-debugging-and-profiling"]], "Debugging": [[156, "debugging"]], "Get more logging information": [[156, "get-more-logging-information"]], "Determine component of error": [[156, "determine-component-of-error"]], "Compilation error": [[156, "compilation-error"]], "Accuracy debugging": [[156, "accuracy-debugging"]], "Performance profiling": [[156, "performance-profiling"]], "Jacobians, Hessians, hvp, vhp, and more: composing function transforms": [[157, "jacobians-hessians-hvp-vhp-and-more-composing-function-transforms"]], "Computing the Jacobian": [[157, "computing-the-jacobian"]], "Reverse-mode Jacobian (jacrev) vs forward-mode Jacobian (jacfwd)": [[157, "reverse-mode-jacobian-jacrev-vs-forward-mode-jacobian-jacfwd"]], "Hessian computation with functorch.hessian": [[157, "hessian-computation-with-functorch-hessian"]], "Batch Jacobian and Batch Hessian": [[157, "batch-jacobian-and-batch-hessian"]], "Computing Hessian-vector products": [[157, "computing-hessian-vector-products"]], "Train a Mario-playing RL Agent": [[158, "train-a-mario-playing-rl-agent"]], "RL Definitions": [[158, "rl-definitions"]], "Initialize Environment": [[158, "initialize-environment"]], "Preprocess Environment": [[158, "preprocess-environment"]], "Agent": [[158, "agent"]], "Act": [[158, "act"]], "Cache and Recall": [[158, "cache-and-recall"]], "Learn": [[158, "learn"]], "Neural Network": [[158, "neural-network"]], "TD Estimate & TD Target": [[158, "td-estimate-td-target"]], "Updating the model": [[158, "updating-the-model"]], "Save checkpoint": [[158, "save-checkpoint"]], "Putting it all together": [[158, "putting-it-all-together"]], "Logging": [[158, "logging"]], "Let\u2019s play!": [[158, "lets-play"]], "Channels Last Memory Format in PyTorch": [[159, "channels-last-memory-format-in-pytorch"]], "Memory Format API": [[159, "memory-format-api"]], "Performance Gains": [[159, "performance-gains"]], "Converting existing models": [[159, "converting-existing-models"]], "Work to do": [[159, "work-to-do"]], "Single-Machine Model Parallel Best Practices": [[161, "single-machine-model-parallel-best-practices"]], "Neural Tangent Kernels": [[162, "neural-tangent-kernels"]], "Create a function version of the model": [[162, "create-a-function-version-of-the-model"]], "Compute the NTK: method 1 (Jacobian contraction)": [[162, "compute-the-ntk-method-1-jacobian-contraction"]], "Compute the NTK: method 2 (NTK-vector products)": [[162, "compute-the-ntk-method-2-ntk-vector-products"]], "NLP from Scratch": [[163, "nlp-from-scratch"]], "Getting Started - Accelerate Your Scripts with nvFuser": [[164, "getting-started-accelerate-your-scripts-with-nvfuser"]], "How to save memory by fusing the optimizer step into the backward pass": [[165, "how-to-save-memory-by-fusing-the-optimizer-step-into-the-backward-pass"]], "Memory usage during training": [[165, "memory-usage-during-training"]], "Capturing and visualizing memory snapshots": [[165, "capturing-and-visualizing-memory-snapshots"]], "DISCLAIMER: This technique is not for all": [[165, "disclaimer-this-technique-is-not-for-all"]], "Tensor.register_post_accumulate_grad_hook(hook) API and our technique": [[165, "tensor-register-post-accumulate-grad-hook-hook-api-and-our-technique"]], "How everything fits together in 10 lines": [[165, "how-everything-fits-together-in-10-lines"]], "Parametrizations Tutorial": [[166, "parametrizations-tutorial"]], "Implementing parametrizations by hand": [[166, "implementing-parametrizations-by-hand"]], "Introduction to parametrizations": [[166, "introduction-to-parametrizations"]], "Inspecting a parametrized module": [[166, "inspecting-a-parametrized-module"]], "Parametrizations are first-class citizens": [[166, "parametrizations-are-first-class-citizens"]], "Caching the value of a parametrization": [[166, "caching-the-value-of-a-parametrization"]], "Concatenating parametrizations": [[166, "concatenating-parametrizations"]], "Initializing parametrizations": [[166, "initializing-parametrizations"]], "Removing parametrizations": [[166, "removing-parametrizations"]], "Per-sample-gradients": [[167, "per-sample-gradients"]], "What is it?": [[167, "what-is-it"]], "Per-sample-grads, the efficient way, using function transforms": [[167, "per-sample-grads-the-efficient-way-using-function-transforms"]], "Performance comparison": [[167, "performance-comparison"]], "A guide on good usage of non_blocking and pin_memory() in PyTorch": [[168, "a-guide-on-good-usage-of-non-blocking-and-pin-memory-in-pytorch"]], "What you will learn": [[168, "what-you-will-learn"], [198, "what-you-will-learn"], [277, "what-you-will-learn"]], "Preamble": [[168, "preamble"]], "Memory management basics": [[168, "memory-management-basics"]], "CUDA and (non-)pageable memory": [[168, "cuda-and-non-pageable-memory"]], "Asynchronous vs. Synchronous Operations with non_blocking=True (CUDA cudaMemcpyAsync)": [[168, "asynchronous-vs-synchronous-operations-with-non-blocking-true-cuda-cudamemcpyasync"]], "A PyTorch perspective": [[168, "a-pytorch-perspective"]], "pin_memory()": [[168, "pin-memory"]], "non_blocking=True": [[168, "non-blocking-true"]], "Synergies": [[168, "synergies"]], "Other copy directions (GPU -> CPU, CPU -> MPS)": [[168, "other-copy-directions-gpu-cpu-cpu-mps"]], "Practical recommendations": [[168, "practical-recommendations"]], "Additional considerations": [[168, "additional-considerations"]], "Additional resources": [[168, "additional-resources"]], "Training Transformer models using Pipeline Parallelism": [[169, "training-transformer-models-using-pipeline-parallelism"]], "Introduction to Distributed Pipeline Parallelism": [[170, "introduction-to-distributed-pipeline-parallelism"]], "Step 1: Partition the Transformer Model": [[170, "step-1-partition-the-transformer-model"]], "Step 2: Define The Main Execution": [[170, "step-2-define-the-main-execution"]], "Step 3: Launch the Distributed Processes": [[170, "step-3-launch-the-distributed-processes"]], "Customize Process Group Backends Using Cpp Extensions": [[171, "customize-process-group-backends-using-cpp-extensions"]], "Basics": [[171, "basics"], [176, "basics"]], "Step 1: Implement a Subclass of Backend": [[171, "step-1-implement-a-subclass-of-backend"]], "Step 2: Expose The Extension Python APIs": [[171, "step-2-expose-the-extension-python-apis"]], "Step 3: Build The Custom Extension": [[171, "step-3-build-the-custom-extension"]], "Step 4: Use The Extension in Application": [[171, "step-4-use-the-extension-in-application"]], "Pruning Tutorial": [[172, "pruning-tutorial"]], "Create a model": [[172, "create-a-model"]], "Inspect a Module": [[172, "inspect-a-module"]], "Pruning a Module": [[172, "pruning-a-module"]], "Iterative Pruning": [[172, "iterative-pruning"]], "Serializing a pruned model": [[172, "serializing-a-pruned-model"]], "Remove pruning re-parametrization": [[172, "remove-pruning-re-parametrization"]], "Pruning multiple parameters in a model": [[172, "pruning-multiple-parameters-in-a-model"]], "Global pruning": [[172, "global-pruning"]], "Extending torch.nn.utils.prune with custom pruning functions": [[172, "extending-torch-nn-utils-prune-with-custom-pruning-functions"]], "Real Time Inference on Raspberry Pi 4 (30 fps!)": [[173, "real-time-inference-on-raspberry-pi-4-30-fps"]], "Raspberry Pi 4 Setup": [[173, "raspberry-pi-4-setup"]], "Installing PyTorch and OpenCV": [[173, "installing-pytorch-and-opencv"]], "Video Capture": [[173, "video-capture"]], "Image Preprocessing": [[173, "image-preprocessing"]], "Model Choices": [[173, "model-choices"]], "MobileNetV2: Quantization and JIT": [[173, "mobilenetv2-quantization-and-jit"]], "Putting It Together": [[173, "putting-it-together"]], "Troubleshooting: Performance": [[173, "troubleshooting-performance"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[174, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[174, "define-hyperparameters"]], "Data collection parameters": [[174, "data-collection-parameters"]], "PPO parameters": [[174, "ppo-parameters"]], "Define an environment": [[174, "define-an-environment"]], "Normalization": [[174, "normalization"]], "Value network": [[174, "value-network"]], "Loss function": [[174, "loss-function"]], "Conclusion and next steps": [[174, "conclusion-and-next-steps"]], "Reinforcement Learning (DQN) Tutorial": [[175, "reinforcement-learning-dqn-tutorial"]], "Replay Memory": [[175, "replay-memory"]], "DQN algorithm": [[175, "dqn-algorithm"]], "Q-network": [[175, "q-network"]], "Hyperparameters and utilities": [[175, "hyperparameters-and-utilities"]], "Implementing Batch RPC Processing Using Asynchronous Executions": [[176, "implementing-batch-rpc-processing-using-asynchronous-executions"]], "Batch-Updating Parameter Server": [[176, "batch-updating-parameter-server"]], "Batch-Processing CartPole Solver": [[176, "batch-processing-cartpole-solver"]], "Learn More": [[176, "learn-more"], [184, "learn-more"], [248, "learn-more"], [250, "learn-more"], [253, "learn-more"], [261, "learn-more"], [264, "learn-more"], [265, "learn-more"], [266, "learn-more"]], "Implementing a Parameter Server Using Distributed RPC Framework": [[177, "implementing-a-parameter-server-using-distributed-rpc-framework"]], "Getting Started with Distributed RPC Framework": [[178, "getting-started-with-distributed-rpc-framework"]], "Distributed Reinforcement Learning using RPC and RRef": [[178, "distributed-reinforcement-learning-using-rpc-and-rref"]], "Distributed RNN using Distributed Autograd and Distributed Optimizer": [[178, "distributed-rnn-using-distributed-autograd-and-distributed-optimizer"]], "(Beta) Implementing High-Performance Transformers with Scaled Dot Product Attention (SDPA)": [[179, "beta-implementing-high-performance-transformers-with-scaled-dot-product-attention-sdpa"]], "Fused implementations": [[179, "fused-implementations"]], "Explicit Dispatcher Control": [[179, "explicit-dispatcher-control"]], "Hardware dependence": [[179, "hardware-dependence"]], "Causal Self Attention": [[179, "causal-self-attention"]], "NestedTensor and Dense tensor support": [[179, "nestedtensor-and-dense-tensor-support"]], "Using SDPA with torch.compile": [[179, "using-sdpa-with-torch-compile"]], "Using SDPA with attn_bias subclasses": [[179, "using-sdpa-with-attn-bias-subclasses"]], "NLP From Scratch: Translation with a Sequence to Sequence Network and Attention": [[180, "nlp-from-scratch-translation-with-a-sequence-to-sequence-network-and-attention"]], "Loading data files": [[180, "loading-data-files"]], "The Seq2Seq Model": [[180, "the-seq2seq-model"]], "The Encoder": [[180, "the-encoder"]], "The Decoder": [[180, "the-decoder"]], "Simple Decoder": [[180, "simple-decoder"]], "Attention Decoder": [[180, "attention-decoder"]], "Preparing Training Data": [[180, "preparing-training-data"]], "Training the Model": [[180, "training-the-model"]], "Plotting results": [[180, "plotting-results"]], "Evaluation": [[180, "evaluation"]], "Training and Evaluating": [[180, "training-and-evaluating"]], "Visualizing Attention": [[180, "visualizing-attention"]], "Spatial Transformer Networks Tutorial": [[182, "spatial-transformer-networks-tutorial"]], "Loading the data": [[182, "loading-the-data"]], "Depicting spatial transformer networks": [[182, "depicting-spatial-transformer-networks"]], "Visualizing the STN results": [[182, "visualizing-the-stn-results"]], "Speech Recognition with Wav2Vec2": [[183, "speech-recognition-with-wav2vec2"]], "PyTorch Profiler With TensorBoard": [[184, "pytorch-profiler-with-tensorboard"]], "1. Prepare the data and model": [[184, "prepare-the-data-and-model"]], "2. Use profiler to record execution events": [[184, "use-profiler-to-record-execution-events"]], "3. Run the profiler": [[184, "run-the-profiler"]], "4. Use TensorBoard to view results and analyze model performance": [[184, "use-tensorboard-to-view-results-and-analyze-model-performance"]], "5. Improve performance with the help of profiler": [[184, "improve-performance-with-the-help-of-profiler"]], "6. Analyze performance with other advanced features": [[184, "analyze-performance-with-other-advanced-features"]], "7. Additional Practices: Profiling PyTorch on AMD GPUs": [[184, "additional-practices-profiling-pytorch-on-amd-gpus"]], "Visualizing Models, Data, and Training with TensorBoard": [[185, "visualizing-models-data-and-training-with-tensorboard"]], "1. TensorBoard setup": [[185, "tensorboard-setup"]], "2. Writing to TensorBoard": [[185, "writing-to-tensorboard"]], "3. Inspect the model using TensorBoard": [[185, "inspect-the-model-using-tensorboard"]], "4. Adding a \u201cProjector\u201d to TensorBoard": [[185, "adding-a-projector-to-tensorboard"]], "5. Tracking model training with TensorBoard": [[185, "tracking-model-training-with-tensorboard"]], "6. Assessing trained models with TensorBoard": [[185, "assessing-trained-models-with-tensorboard"]], "Text-to-speech with Tacotron2": [[186, "text-to-speech-with-tacotron2"]], "Whole Slide Image Classification Using PyTorch and TIAToolbox": [[187, "whole-slide-image-classification-using-pytorch-and-tiatoolbox"]], "Setting up the environment": [[187, "setting-up-the-environment"]], "Importing related libraries": [[187, "importing-related-libraries"]], "Clean-up before a run": [[187, "clean-up-before-a-run"]], "Downloading the data": [[187, "downloading-the-data"]], "Reading the data": [[187, "reading-the-data"]], "Classify image patches": [[187, "classify-image-patches"]], "Define PatchPredictor model": [[187, "define-patchpredictor-model"]], "Predict patch labels": [[187, "predict-patch-labels"]], "Predict patch labels for a whole slide": [[187, "predict-patch-labels-for-a-whole-slide"]], "Feature extraction with a pathology-specific model": [[187, "feature-extraction-with-a-pathology-specific-model"]], "Where to Go From Here": [[187, "where-to-go-from-here"]], "Introduction to torch.compile": [[188, "introduction-to-torch-compile"]], "torch.compile and Nested Calls": [[188, "torch-compile-and-nested-calls"]], "Best Practices and Recommendations": [[188, "best-practices-and-recommendations"]], "Demonstrating Speedups": [[188, "demonstrating-speedups"]], "Comparison to TorchScript and FX Tracing": [[188, "comparison-to-torchscript-and-fx-tracing"]], "TorchDynamo and FX Graphs": [[188, "torchdynamo-and-fx-graphs"]], "torch.export Nightly Tutorial": [[189, "torch-export-nightly-tutorial"]], "torch.export Tutorial": [[190, "torch-export-tutorial"]], "Graph Breaks": [[190, "graph-breaks"]], "Non-Strict Export": [[190, "non-strict-export"]], "Control Flow Ops": [[190, "control-flow-ops"]], "Constraints/Dynamic Shapes": [[190, "constraints-dynamic-shapes"]], "Basic concepts: symbols and guards": [[190, "basic-concepts-symbols-and-guards"]], "0/1 specialization": [[190, "specialization"]], "Named Dims": [[190, "named-dims"]], "Constraint violations, suggested fixes": [[190, "constraint-violations-suggested-fixes"]], "Data-dependent errors": [[190, "data-dependent-errors"]], "Guards, torch._check()": [[190, "guards-torch-check"]], "Specialized values": [[190, "specialized-values"]], "Custom Ops": [[190, "custom-ops"]], "IR/Decompositions": [[190, "ir-decompositions"]], "ExportDB": [[190, "exportdb"]], "Running the Exported Program": [[190, "running-the-exported-program"]], "Introduction to TorchRec": [[191, "introduction-to-torchrec"], [192, "introduction-to-torchrec"]], "Install Dependencies": [[191, "install-dependencies"]], "Embeddings": [[191, "embeddings"]], "Embeddings in RecSys": [[191, "embeddings-in-recsys"]], "Embeddings in PyTorch": [[191, "embeddings-in-pytorch"]], "TorchRec Features Overview": [[191, "torchrec-features-overview"]], "From EmbeddingBag to EmbeddingBagCollection": [[191, "from-embeddingbag-to-embeddingbagcollection"]], "TorchRec Input/Output Data Types": [[191, "torchrec-input-output-data-types"]], "Distributed Training and Sharding": [[191, "distributed-training-and-sharding"]], "Distributed Embeddings": [[191, "distributed-embeddings"]], "Sharding": [[191, "sharding"]], "Sharded Modules": [[191, "sharded-modules"]], "Planner": [[191, "planner"]], "Planner Result": [[191, "planner-result"]], "GPU Training with LazyAwaitable": [[191, "gpu-training-with-lazyawaitable"]], "Anatomy of Sharded TorchRec modules": [[191, "anatomy-of-sharded-torchrec-modules"]], "Optimizing Embedding Lookups": [[191, "optimizing-embedding-lookups"]], "DistributedModelParallel": [[191, "distributedmodelparallel"]], "Sharding Best Practices": [[191, "sharding-best-practices"]], "Adding in the Optimizer": [[191, "adding-in-the-optimizer"]], "Optimizer Classes": [[191, "optimizer-classes"]], "Fused optimizer in TorchRec": [[191, "fused-optimizer-in-torchrec"]], "Adding an Optimizer to EmbeddingBagCollection": [[191, "adding-an-optimizer-to-embeddingbagcollection"]], "TorchVision Object Detection Finetuning Tutorial": [[193, "torchvision-object-detection-finetuning-tutorial"]], "Defining the Dataset": [[193, "defining-the-dataset"]], "Writing a custom dataset for PennFudan": [[193, "writing-a-custom-dataset-for-pennfudan"]], "Defining your model": [[193, "defining-your-model"]], "1 - Finetuning from a pretrained model": [[193, "finetuning-from-a-pretrained-model"]], "2 - Modifying the model to add a different backbone": [[193, "modifying-the-model-to-add-a-different-backbone"]], "Object detection and instance segmentation model for PennFudan Dataset": [[193, "object-detection-and-instance-segmentation-model-for-pennfudan-dataset"]], "Putting everything together": [[193, "putting-everything-together"]], "Testing forward() method (Optional)": [[193, "testing-forward-method-optional"]], "Wrapping up": [[193, "wrapping-up"]], "Accelerating PyTorch Transformers by replacing nn.Transformer with Nested Tensors and torch.compile()": [[194, "accelerating-pytorch-transformers-by-replacing-nn-transformer-with-nested-tensors-and-torch-compile"]], "Is this tutorial for me?": [[194, "is-this-tutorial-for-me"]], "Introducing the Building Blocks": [[194, "introducing-the-building-blocks"]], "The above building blocks are \u201cAll You Need\u201d (as of October 2024)": [[194, "the-above-building-blocks-are-all-you-need-as-of-october-2024"]], "MultiheadAttention": [[194, "multiheadattention"]], "Utilities": [[194, "utilities"]], "GPT-style layer": [[194, "gpt-style-layer"]], "Going one step further": [[194, "going-one-step-further"]], "Cross Attention": [[194, "cross-attention"]], "Fully masked rows no longer cause NaNs": [[194, "fully-masked-rows-no-longer-cause-nans"]], "FlexAttention + NJT": [[194, "flexattention-njt"]], "Packed Projection": [[194, "packed-projection"]], "Input projection for MultiheadAttention": [[194, "input-projection-for-multiheadattention"]], "SwiGLU feed forward network of Transformer Layer": [[194, "swiglu-feed-forward-network-of-transformer-layer"]], "Extended examples": [[194, "extended-examples"]], "(prototype) PyTorch BackendConfig Tutorial": [[195, "prototype-pytorch-backendconfig-tutorial"]], "1. Derive reference pattern for each quantized operator": [[195, "derive-reference-pattern-for-each-quantized-operator"]], "2. Set DTypeConfigs with backend constraints": [[195, "set-dtypeconfigs-with-backend-constraints"]], "3. Set up fusion for conv-relu": [[195, "set-up-fusion-for-conv-relu"]], "4. Define the BackendConfig": [[195, "define-the-backendconfig"]], "5. Set up QConfigMapping that satisfies the backend constraints": [[195, "set-up-qconfigmapping-that-satisfies-the-backend-constraints"]], "6. Quantize the model through prepare and convert": [[195, "quantize-the-model-through-prepare-and-convert"]], "(7. Experiment with faulty BackendConfig setups)": [[195, "experiment-with-faulty-backendconfig-setups"]], "Built-in BackendConfigs": [[195, "built-in-backendconfigs"]], "Introduction to Context Parallel": [[196, "introduction-to-context-parallel"]], "Enable Context Parallel": [[196, "enable-context-parallel"]], "Select Rotation Approach": [[196, "select-rotation-approach"]], "Profiling PyTorch RPC-Based Workloads": [[197, "profiling-pytorch-rpc-based-workloads"], [234, "profiling-pytorch-rpc-based-workloads"]], "(prototype) Flight Recorder for Debugging Stuck Jobs": [[198, "prototype-flight-recorder-for-debugging-stuck-jobs"]], "Enabling Flight Recorder": [[198, "enabling-flight-recorder"]], "Additional Settings": [[198, "additional-settings"]], "Retrieving Flight Recorder Data via an API": [[198, "retrieving-flight-recorder-data-via-an-api"]], "Flight Recorder File Formats": [[198, "flight-recorder-file-formats"]], "Analyzing Flight Recorder Dumps": [[198, "analyzing-flight-recorder-dumps"]], "An End-to-End Example": [[198, "an-end-to-end-example"]], "(prototype) Accelerating torch.save and torch.load with GPUDirect Storage": [[199, "prototype-accelerating-torch-save-and-torch-load-with-gpudirect-storage"]], "Using GPUDirect Storage with torch.save and torch.load": [[199, "using-gpudirect-storage-with-torch-save-and-torch-load"]], "(prototype) GPU Quantization with TorchAO": [[200, "prototype-gpu-quantization-with-torchao"]], "Set up Your Environment": [[200, "set-up-your-environment"]], "Inductor C++ Wrapper Tutorial": [[201, "inductor-c-wrapper-tutorial"]], "Prerequisites:": [[201, "prerequisites"], [211, "prerequisites"]], "Enabling the API": [[201, "enabling-the-api"]], "Example code": [[201, "example-code"]], "How to use torch.compile on Windows CPU/XPU": [[202, "how-to-use-torch-compile-on-windows-cpu-xpu"]], "Software Installation": [[202, "software-installation"]], "Install a Compiler": [[202, "install-a-compiler"]], "Set Up Environment": [[202, "set-up-environment"]], "Alternative Compiler for better performance on CPU": [[202, "id1"]], "Intel Compiler": [[202, "id2"]], "LLVM Compiler": [[202, "id4"]], "(Prototype) Convert Mobilenetv2 to Core ML": [[204, "prototype-convert-mobilenetv2-to-core-ml"]], "(Prototype) Use iOS GPU in PyTorch": [[205, "prototype-use-ios-gpu-in-pytorch"]], "(Prototype) Introduce lite interpreter workflow in Android and iOS": [[206, "prototype-introduce-lite-interpreter-workflow-in-android-and-ios"]], "(Prototype) Efficiently writing \u201csparse\u201d semantics for Adagrad with MaskedTensor": [[207, "prototype-efficiently-writing-sparse-semantics-for-adagrad-with-maskedtensor"]], "Introduction and Motivation": [[207, "introduction-and-motivation"]], "Preparation": [[207, "preparation"], [208, "preparation"], [209, "preparation"]], "Simpler Code with MaskedTensor": [[207, "simpler-code-with-maskedtensor"]], "Original Sparse Implementation": [[207, "original-sparse-implementation"]], "MaskedTensor Sparse Implementation": [[207, "maskedtensor-sparse-implementation"]], "(Prototype) MaskedTensor Advanced Semantics": [[208, "prototype-maskedtensor-advanced-semantics"]], "MaskedTensor vs NumPy\u2019s MaskedArray": [[208, "maskedtensor-vs-numpy-s-maskedarray"]], "Reduction Semantics": [[208, "reduction-semantics"]], "(Prototype) MaskedTensor Overview": [[209, "prototype-maskedtensor-overview"]], "Using MaskedTensor": [[209, "using-maskedtensor"]], "Construction": [[209, "construction"]], "Accessing the data and mask": [[209, "accessing-the-data-and-mask"]], "Indexing and slicing": [[209, "indexing-and-slicing"]], "Why is MaskedTensor useful?": [[209, "why-is-maskedtensor-useful"]], "Distinguishing between 0 and NaN gradient": [[209, "distinguishing-between-0-and-nan-gradient"]], "torch.where": [[209, "torch-where"]], "Another torch.where": [[209, "another-torch-where"]], "When using mask, x/0 yields NaN grad": [[209, "when-using-mask-x-0-yields-nan-grad"]], "torch.nansum() and torch.nanmean()": [[209, "torch-nansum-and-torch-nanmean"]], "Safe Softmax": [[209, "safe-softmax"]], "Implementing missing torch.nan* operators": [[209, "implementing-missing-torch-nan-operators"]], "(Prototype) MaskedTensor Sparsity": [[210, "prototype-maskedtensor-sparsity"]], "Principles": [[210, "principles"]], "Sparse COO tensors": [[210, "sparse-coo-tensors"]], "Sparse CSR tensors": [[210, "sparse-csr-tensors"]], "Supported Operations": [[210, "supported-operations"]], "Unary": [[210, "unary"]], "Binary": [[210, "binary"]], "Reductions": [[210, "reductions"]], "MaskedTensor Helper Methods": [[210, "maskedtensor-helper-methods"]], "Appendix": [[210, "appendix"]], "Sparse COO Construction": [[210, "sparse-coo-construction"]], "Sparse CSR Construction": [[210, "sparse-csr-construction"]], "Using Max-Autotune Compilation on CPU for Better Performance": [[211, "using-max-autotune-compilation-on-cpu-for-better-performance"]], "Activating the max-autotune mode": [[211, "activating-the-max-autotune-mode"]], "Example": [[211, "example"]], "Getting Started with Nested Tensors": [[212, "getting-started-with-nested-tensors"]], "Nested tensor initialization": [[212, "nested-tensor-initialization"]], "Nested Tensor Operations": [[212, "nested-tensor-operations"]], "Why Nested Tensor": [[212, "why-nested-tensor"]], "See Also": [[212, "see-also"], [226, "see-also"], [275, "see-also"]], "(Beta) Convert MobileNetV2 to NNAPI": [[213, "beta-convert-mobilenetv2-to-nnapi"]], "PyTorch 2 Export Quantization for OpenVINO torch.compile Backend": [[214, "pytorch-2-export-quantization-for-openvino-torch-compile-backend"]], "Post Training Quantization": [[214, "post-training-quantization"]], "Prerequisite: OpenVINO and NNCF installation": [[214, "prerequisite-openvino-and-nncf-installation"]], "1. Capture FX Graph": [[214, "capture-fx-graph"]], "2. Apply Quantization": [[214, "apply-quantization"]], "3. Lower into OpenVINO representation": [[214, "lower-into-openvino-representation"]], "4. Optional: Improve quantized model metrics": [[214, "optional-improve-quantized-model-metrics"]], "PyTorch Prototype Recipes": [[215, "pytorch-prototype-recipes"]], "Autoloading Out-of-Tree Extension": [[216, "autoloading-out-of-tree-extension"]], "How to apply this mechanism to out-of-tree extensions?": [[216, "how-to-apply-this-mechanism-to-out-of-tree-extensions"]], "How it works": [[216, "how-it-works"]], "(prototype) Accelerating BERT with semi-structured (2:4) sparsity": [[217, "prototype-accelerating-bert-with-semi-structured-2-4-sparsity"]], "results": [[217, "id1"]], "Skipping Module Parameter Initialization": [[219, "skipping-module-parameter-initialization"]], "Skipping Initialization": [[219, "skipping-initialization"]], "Updating Modules to Support Skipping Initialization": [[219, "updating-modules-to-support-skipping-initialization"]], "Implementation Details": [[219, "implementation-details"]], "Model Freezing in TorchScript": [[220, "model-freezing-in-torchscript"]], "(prototype) Tracing-based Selective Build Mobile Interpreter in Android and iOS": [[221, "prototype-tracing-based-selective-build-mobile-interpreter-in-android-and-ios"]], "torch.vmap": [[222, "torch-vmap"]], "So, what is vmap?": [[222, "so-what-is-vmap"]], "PyTorch Vulkan Backend User Workflow": [[223, "pytorch-vulkan-backend-user-workflow"]], "Building PyTorch with Vulkan backend": [[223, "building-pytorch-with-vulkan-backend"]], "Optional usage of vulkan wrapper": [[223, "optional-usage-of-vulkan-wrapper"]], "Desktop build": [[223, "desktop-build"]], "Vulkan SDK": [[223, "vulkan-sdk"]], "Android build": [[223, "android-build"]], "Model preparation": [[223, "model-preparation"]], "Using Vulkan backend in code": [[223, "using-vulkan-backend-in-code"]], "C++ API": [[223, "c-api"]], "Python API": [[223, "python-api"]], "Android Java API": [[223, "android-java-api"]], "Building android test app with Vulkan": [[223, "building-android-test-app-with-vulkan"]], "Testing models without uploading to android device": [[223, "testing-models-without-uploading-to-android-device"]], "Leverage Intel\u00ae Advanced Matrix Extensions": [[224, "leverage-intel-advanced-matrix-extensions"]], "AMX in PyTorch": [[224, "amx-in-pytorch"]], "Guidelines of leveraging AMX with workloads": [[224, "guidelines-of-leveraging-amx-with-workloads"]], "CPU operators that can leverage AMX:": [[224, "cpu-operators-that-can-leverage-amx"]], "Confirm AMX is being utilized": [[224, "confirm-amx-is-being-utilized"]], "Making Native Android Application that uses PyTorch prebuilt libraries": [[225, "making-native-android-application-that-uses-pytorch-prebuilt-libraries"]], "(beta) Compiling the optimizer with torch.compile": [[226, "beta-compiling-the-optimizer-with-torch-compile"]], "Model Setup": [[226, "model-setup"], [227, "model-setup"], [235, "model-setup"]], "Setting up and running the optimizer benchmark": [[226, "setting-up-and-running-the-optimizer-benchmark"]], "(beta) Running the compiled optimizer with an LR Scheduler": [[227, "beta-running-the-compiled-optimizer-with-an-lr-scheduler"]], "Setting up and running the compiled optimizer with LR Scheduler": [[227, "setting-up-and-running-the-compiled-optimizer-with-lr-scheduler"]], "Extension: What happens with a non-tensor LR?": [[227, "extension-what-happens-with-a-non-tensor-lr"]], "Direct Device-to-Device Communication with TensorPipe CUDA RPC": [[228, "direct-device-to-device-communication-with-tensorpipe-cuda-rpc"]], "What is CUDA RPC?": [[228, "what-is-cuda-rpc"]], "How to use CUDA RPC?": [[228, "how-to-use-cuda-rpc"]], "Asynchronous Saving with Distributed Checkpoint (DCP)": [[229, "asynchronous-saving-with-distributed-checkpoint-dcp"]], "Asynchronous Checkpointing Overview": [[229, "asynchronous-checkpointing-overview"]], "Even more performance with Pinned Memory": [[229, "even-more-performance-with-pinned-memory"]], "Getting Started with Distributed Checkpoint (DCP)": [[230, "getting-started-with-distributed-checkpoint-dcp"]], "How DCP works": [[230, "how-dcp-works"]], "How to use DCP": [[230, "how-to-use-dcp"]], "Saving": [[230, "saving"]], "Loading": [[230, "loading"]], "Formats": [[230, "formats"]], "Getting Started with CommDebugMode": [[231, "getting-started-with-commdebugmode"]], "What is CommDebugMode and why is it useful": [[231, "what-is-commdebugmode-and-why-is-it-useful"]], "Using CommDebugMode": [[231, "using-commdebugmode"]], "Getting Started with DeviceMesh": [[232, "getting-started-with-devicemesh"]], "What is DeviceMesh": [[232, "what-is-devicemesh"]], "Why DeviceMesh is Useful": [[232, "why-devicemesh-is-useful"]], "How to use DeviceMesh with HSDP": [[232, "how-to-use-devicemesh-with-hsdp"]], "How to use DeviceMesh for your custom parallel solutions": [[232, "how-to-use-devicemesh-for-your-custom-parallel-solutions"]], "Distributed Optimizer with TorchScript support": [[233, "distributed-optimizer-with-torchscript-support"]], "What is Distributed Optimizer?": [[233, "what-is-distributed-optimizer"]], "What is Distributed Optimizer with TorchScript support?": [[233, "what-is-distributed-optimizer-with-torchscript-support"]], "How to write a customized distributed optimizer with TorchScript support?": [[233, "how-to-write-a-customized-distributed-optimizer-with-torchscript-support"]], "Explicit horizontal fusion with foreach_map and torch.compile": [[235, "explicit-horizontal-fusion-with-foreach-map-and-torch-compile"]], "Helper functions for foreach_map implementation": [[235, "helper-functions-for-foreach-map-implementation"]], "Setting up and running the compiled kernel": [[235, "setting-up-and-running-the-compiled-kernel"]], "(Beta) PyTorch Inference Performance Tuning on AWS Graviton Processors": [[236, "beta-pytorch-inference-performance-tuning-on-aws-graviton-processors"]], "Contents": [[236, "contents"]], "Speed up Inference with bfloat16 Fast Math Kernels": [[236, "speed-up-inference-with-bfloat16-fast-math-kernels"]], "Improve Inference Performance with OpenBLAS for Smaller Batch Dimensions": [[236, "improve-inference-performance-with-openblas-for-smaller-batch-dimensions"]], "Optimize Memory Allocation Overhead with Linux Transparent Huge Pages (THP)": [[236, "optimize-memory-allocation-overhead-with-linux-transparent-huge-pages-thp"]], "Intel\u00ae Extension for PyTorch*": [[237, "intel-extension-for-pytorch"]], "Features": [[237, "features"], [238, "features"]], "Examples \u2013 CPU": [[237, "examples-cpu"]], "Float32": [[237, "float32"], [237, "id1"], [237, "id3"], [237, "id6"], [237, "id9"], [237, "id12"]], "BFloat16": [[237, "bfloat16"], [237, "id2"], [237, "id4"], [237, "id7"], [237, "id10"], [237, "id13"]], "Inference - Imperative Mode": [[237, "inference-imperative-mode"], [237, "id8"]], "Inference - TorchScript Mode": [[237, "inference-torchscript-mode"], [237, "id11"]], "Examples \u2013 GPU": [[237, "examples-gpu"]], "Float16": [[237, "float16"], [237, "id14"]], "C++ (CPU only)": [[237, "c-cpu-only"]], "Model Zoo (CPU only)": [[237, "model-zoo-cpu-only"]], "Tutorials": [[237, "tutorials"], [238, "tutorials"]], "Ease-of-use quantization for PyTorch with Intel\u00ae Neural Compressor": [[238, "ease-of-use-quantization-for-pytorch-with-intel-neural-compressor"]], "Usages": [[238, "usages"]], "Model": [[238, "model"]], "Accuracy driven quantization": [[238, "accuracy-driven-quantization"]], "Quantization aware training": [[238, "quantization-aware-training"]], "Performance only quantization": [[238, "performance-only-quantization"]], "Quantization outputs": [[238, "quantization-outputs"]], "Deployment": [[238, "deployment"]], "Loading data in PyTorch": [[239, "loading-data-in-pytorch"]], "(beta) Efficient mobile interpreter in Android and iOS": [[240, "beta-efficient-mobile-interpreter-in-android-and-ios"]], "Pytorch Mobile Performance Recipes": [[241, "pytorch-mobile-performance-recipes"]], "Model Preparation for Android Recipe": [[242, "model-preparation-for-android-recipe"]], "Model Preparation for iOS Recipe": [[243, "model-preparation-for-ios-recipe"]], "Profiling PyTorch workloads with The Instrumentation and Tracing Technology (ITT) API": [[244, "profiling-pytorch-workloads-with-the-instrumentation-and-tracing-technology-itt-api"]], "What is Intel\u00ae VTune\u2122 Profiler": [[244, "what-is-intel-vtune-profiler"]], "What is Instrumentation and Tracing Technology (ITT) API": [[244, "what-is-instrumentation-and-tracing-technology-itt-api"]], "How to visualize PyTorch model hierarchy in Intel\u00ae VTune\u2122 Profiler": [[244, "how-to-visualize-pytorch-model-hierarchy-in-intel-vtune-profiler"]], "Launch Intel\u00ae VTune\u2122 Profiler": [[244, "launch-intel-vtune-profiler"]], "Configure Profiling for CPU": [[244, "configure-profiling-for-cpu"]], "Configure Profiling for XPU": [[244, "configure-profiling-for-xpu"]], "Read Profiling Result": [[244, "read-profiling-result"]], "Read XPU Profiling Result": [[244, "read-xpu-profiling-result"]], "A short sample code showcasing how to use PyTorch ITT APIs": [[244, "a-short-sample-code-showcasing-how-to-use-pytorch-itt-apis"]], "Summary of PyTorch Mobile Recipes": [[245, "summary-of-pytorch-mobile-recipes"]], "Model Interpretability using Captum": [[246, "model-interpretability-using-captum"]], "Before you begin": [[246, "before-you-begin"]], "Computing Attribution": [[246, "computing-attribution"]], "Visualizing the Results": [[246, "visualizing-the-results"]], "Final Notes": [[246, "final-notes"]], "Automatic Mixed Precision": [[247, "automatic-mixed-precision"]], "A simple network": [[247, "a-simple-network"]], "Default Precision": [[247, "default-precision"]], "Adding torch.autocast": [[247, "adding-torch-autocast"]], "Adding GradScaler": [[247, "adding-gradscaler"]], "All together: \u201cAutomatic Mixed Precision\u201d": [[247, "all-together-automatic-mixed-precision"]], "Inspecting/modifying gradients (e.g., clipping)": [[247, "inspecting-modifying-gradients-e-g-clipping"]], "Saving/Resuming": [[247, "saving-resuming"]], "Inference/Evaluation": [[247, "inference-evaluation"]], "Advanced topics": [[247, "advanced-topics"]], "Speedup with Amp is minor": [[247, "speedup-with-amp-is-minor"]], "Loss is inf/NaN": [[247, "loss-is-inf-nan"]], "Type mismatch error (may manifest as CUDNN_STATUS_BAD_PARAM)": [[247, "type-mismatch-error-may-manifest-as-cudnn-status-bad-param"]], "SyntaxError": [[248, "syntaxerror"]], "1. Defining functions to benchmark": [[248, "defining-functions-to-benchmark"]], "2. Benchmarking with timeit.Timer": [[248, "benchmarking-with-timeit-timer"]], "3. Benchmarking with torch.utils.benchmark.Timer": [[248, "benchmarking-with-torch-utils-benchmark-timer"]], "4. Benchmarking with Blocked Autorange": [[248, "benchmarking-with-blocked-autorange"]], "5. Comparing benchmark results": [[248, "comparing-benchmark-results"]], "6. Saving/Loading benchmark results": [[248, "saving-loading-benchmark-results"]], "7. Generating inputs with Fuzzed Parameters": [[248, "generating-inputs-with-fuzzed-parameters"]], "8. Collecting instruction counts with Callgrind": [[248, "collecting-instruction-counts-with-callgrind"]], "Changing default device": [[249, "changing-default-device"]], "Defining a Neural Network in PyTorch": [[250, "defining-a-neural-network-in-pytorch"]], "1. Import necessary libraries for loading our data": [[250, "import-necessary-libraries-for-loading-our-data"], [264, "import-necessary-libraries-for-loading-our-data"], [265, "import-necessary-libraries-for-loading-our-data"], [266, "import-necessary-libraries-for-loading-our-data"]], "2. Define and initialize the neural network": [[250, "define-and-initialize-the-neural-network"], [265, "define-and-initialize-the-neural-network"]], "3. Specify how data will pass through your model": [[250, "specify-how-data-will-pass-through-your-model"]], "4. [Optional] Pass data through your model to test": [[250, "optional-pass-data-through-your-model-to-test"]], "PyTorch Recipes": [[251, "pytorch-recipes"], [267, "pytorch-recipes"]], "Tips for Loading an nn.Module from a Checkpoint": [[252, "tips-for-loading-an-nn-module-from-a-checkpoint"]], "Using torch.load(mmap=True)": [[252, "using-torch-load-mmap-true"]], "Using torch.device('meta')": [[252, "using-torch-device-meta"]], "Using load_state_dict(assign=True)": [[252, "using-load-state-dict-assign-true"]], "PyTorch Profiler": [[253, "pytorch-profiler"]], "1. Import all necessary libraries": [[253, "import-all-necessary-libraries"]], "2. Instantiate a simple Resnet model": [[253, "instantiate-a-simple-resnet-model"]], "3. Using profiler to analyze execution time": [[253, "using-profiler-to-analyze-execution-time"]], "4. Using profiler to analyze memory consumption": [[253, "using-profiler-to-analyze-memory-consumption"]], "5. Using tracing functionality": [[253, "using-tracing-functionality"]], "6. Examining stack traces": [[253, "examining-stack-traces"]], "7. Using profiler to analyze long-running jobs": [[253, "using-profiler-to-analyze-long-running-jobs"]], "Reasoning about Shapes in PyTorch": [[254, "reasoning-about-shapes-in-pytorch"]], "Save Load Across Devices": [[255, "save-load-across-devices"]], "Saving And Loading A General Checkpoint": [[256, "saving-and-loading-a-general-checkpoint"]], "Saving And Loading Models For Inference": [[257, "saving-and-loading-models-for-inference"]], "Saving Multiple Models In One File": [[258, "saving-multiple-models-in-one-file"]], "Extension points in nn.Module for load_state_dict and tensor subclasses": [[260, "extension-points-in-nn-module-for-load-state-dict-and-tensor-subclasses"]], "torch.utils.swap_tensors": [[260, "torch-utils-swap-tensors"]], "Application to nn.Module": [[260, "application-to-nn-module"]], "nn.Module.to() and related methods": [[260, "nn-module-to-and-related-methods"]], "nn.Module.load_state_dict()": [[260, "nn-module-load-state-dict"]], "How to use TensorBoard with PyTorch": [[261, "how-to-use-tensorboard-with-pytorch"]], "Using TensorBoard in PyTorch": [[261, "using-tensorboard-in-pytorch"]], "Log scalars": [[261, "log-scalars"]], "Run TensorBoard": [[261, "run-tensorboard"]], "Timer quick start": [[262, "timer-quick-start"]], "1. Defining a Timer": [[262, "defining-a-timer"]], "2. Wall time: Timer.blocked_autorange(...)": [[262, "wall-time-timer-blocked-autorange"]], "3. C++ snippets": [[262, "c-snippets"]], "4. Instruction counts: Timer.collect_callgrind(...)": [[262, "instruction-counts-timer-collect-callgrind"]], "5. Instruction counts: Delving deeper": [[262, "instruction-counts-delving-deeper"]], "6. A/B testing with Callgrind": [[262, "a-b-testing-with-callgrind"]], "7. Wrapping up": [[262, "wrapping-up"]], "8. Footnotes": [[262, "footnotes"]], "Performance Tuning Guide": [[263, "performance-tuning-guide"]], "General optimizations": [[263, "general-optimizations"]], "Enable asynchronous data loading and augmentation": [[263, "enable-asynchronous-data-loading-and-augmentation"]], "Disable gradient calculation for validation or inference": [[263, "disable-gradient-calculation-for-validation-or-inference"]], "Disable bias for convolutions directly followed by a batch norm": [[263, "disable-bias-for-convolutions-directly-followed-by-a-batch-norm"]], "Use parameter.grad = None instead of model.zero_grad() or optimizer.zero_grad()": [[263, "use-parameter-grad-none-instead-of-model-zero-grad-or-optimizer-zero-grad"]], "Fuse operations": [[263, "fuse-operations"]], "Enable channels_last memory format for computer vision models": [[263, "enable-channels-last-memory-format-for-computer-vision-models"]], "Checkpoint intermediate buffers": [[263, "checkpoint-intermediate-buffers"]], "Disable debugging APIs": [[263, "disable-debugging-apis"]], "CPU specific optimizations": [[263, "cpu-specific-optimizations"]], "Utilize Non-Uniform Memory Access (NUMA) Controls": [[263, "utilize-non-uniform-memory-access-numa-controls"]], "Utilize OpenMP": [[263, "utilize-openmp"]], "Intel OpenMP Runtime Library (libiomp)": [[263, "intel-openmp-runtime-library-libiomp"]], "Switch Memory allocator": [[263, "switch-memory-allocator"]], "Train a model on CPU with PyTorch ``DistributedDataParallel``(DDP) functionality": [[263, "train-a-model-on-cpu-with-pytorch-distributeddataparallel-ddp-functionality"]], "GPU specific optimizations": [[263, "gpu-specific-optimizations"]], "Enable Tensor cores": [[263, "enable-tensor-cores"]], "Use CUDA Graphs": [[263, "use-cuda-graphs"]], "Enable cuDNN auto-tuner": [[263, "enable-cudnn-auto-tuner"]], "Avoid unnecessary CPU-GPU synchronization": [[263, "avoid-unnecessary-cpu-gpu-synchronization"]], "Create tensors directly on the target device": [[263, "create-tensors-directly-on-the-target-device"]], "Use mixed precision and AMP": [[263, "use-mixed-precision-and-amp"]], "Preallocate memory in case of variable input length": [[263, "preallocate-memory-in-case-of-variable-input-length"]], "Distributed optimizations": [[263, "distributed-optimizations"]], "Use efficient data-parallel backend": [[263, "use-efficient-data-parallel-backend"]], "Skip unnecessary all-reduce if training with DistributedDataParallel and gradient accumulation": [[263, "skip-unnecessary-all-reduce-if-training-with-distributeddataparallel-and-gradient-accumulation"]], "Match the order of layers in constructors and during the execution if using DistributedDataParallel(find_unused_parameters=True)": [[263, "match-the-order-of-layers-in-constructors-and-during-the-execution-if-using-distributeddataparallel-find-unused-parameters-true"]], "Load-balance workload in a distributed setting": [[263, "load-balance-workload-in-a-distributed-setting"]], "Warmstarting model using parameters from a different model in PyTorch": [[264, "warmstarting-model-using-parameters-from-a-different-model-in-pytorch"]], "2. Define and initialize the neural network A and B": [[264, "define-and-initialize-the-neural-network-a-and-b"]], "3. Save model A": [[264, "save-model-a"]], "4. Load into model B": [[264, "load-into-model-b"]], "What is a state_dict in PyTorch": [[265, "what-is-a-state-dict-in-pytorch"]], "3. Initialize the optimizer": [[265, "initialize-the-optimizer"]], "4. Access the model and optimizer state_dict": [[265, "access-the-model-and-optimizer-state-dict"]], "Zeroing out gradients in PyTorch": [[266, "zeroing-out-gradients-in-pytorch"]], "2. Load and normalize the dataset": [[266, "load-and-normalize-the-dataset"]], "3. Build the neural network": [[266, "build-the-neural-network"]], "4. Define a Loss function and optimizer": [[266, "define-a-loss-function-and-optimizer"]], "5. Zero the gradients while training the network": [[266, "zero-the-gradients-while-training-the-network"]], "Reducing torch.compile cold start compilation time with regional compilation": [[268, "reducing-torch-compile-cold-start-compilation-time-with-regional-compilation"]], "Script and Optimize for Mobile Recipe": [[269, "script-and-optimize-for-mobile-recipe"]], "Intel\u00ae Extension for PyTorch* Backend on Intel\u00ae CPUs": [[271, "intel-extension-for-pytorch-backend-on-intel-cpus"]], "Usage Example": [[271, "usage-example"]], "Train FP32": [[271, "train-fp32"]], "Train BF16": [[271, "train-bf16"]], "Inference FP32": [[271, "inference-fp32"]], "Inference BF16": [[271, "inference-bf16"]], "Compile Time Caching Configuration": [[272, "compile-time-caching-configuration"]], "Inductor Cache Settings": [[272, "inductor-cache-settings"]], "TORCHINDUCTOR_FX_GRAPH_CACHE": [[272, "torchinductor-fx-graph-cache"]], "TORCHINDUCTOR_AUTOGRAD_CACHE": [[272, "torchinductor-autograd-cache"]], "TORCHINDUCTOR_CACHE_DIR": [[272, "torchinductor-cache-dir"]], "TORCHINDUCTOR_FX_GRAPH_REMOTE_CACHE": [[272, "torchinductor-fx-graph-remote-cache"]], "TORCHINDUCTOR_AUTOGRAD_REMOTE_CACHE": [[272, "torchinductor-autograd-remote-cache"]], "TORCHINDUCTOR_AUTOTUNE_REMOTE_CACHE": [[272, "torchinductor-autotune-remote-cache"]], "TORCHINDUCTOR_FORCE_DISABLE_CACHES": [[272, "torchinductor-force-disable-caches"]], "Compile Time Caching in torch.compile": [[273, "compile-time-caching-in-torch-compile"]], "Caching Offerings": [[273, "caching-offerings"]], "torch.compile end-to-end caching (Mega-Cache)": [[273, "torch-compile-end-to-end-caching-mega-cache"]], "Modular caching of TorchDynamo, TorchInductor, and Triton": [[273, "modular-caching-of-torchdynamo-torchinductor-and-triton"]], "Remote Caching": [[273, "remote-caching"]], "(beta) Utilizing Torch Function modes with torch.compile": [[274, "beta-utilizing-torch-function-modes-with-torch-compile"]], "Rewriting a torch op (torch.add -> torch.mul)": [[274, "rewriting-a-torch-op-torch-add-torch-mul"]], "Using User-Defined Triton Kernels with torch.compile": [[275, "using-user-defined-triton-kernels-with-torch-compile"]], "Advanced Usage": [[275, "advanced-usage"]], "Composability": [[275, "composability"]], "Wrapping Triton kernels with triton_op": [[275, "wrapping-triton-kernels-with-triton-op"]], "Adding training support": [[275, "adding-training-support"]], "Adding a CPU Fallback": [[275, "adding-a-cpu-fallback"]], "Adding a FlopCounter Formula": [[275, "adding-a-flopcounter-formula"]], "Limitations": [[275, "limitations"]], "Dynamic Compilation Control with torch.compiler.set_stance": [[276, "dynamic-compilation-control-with-torch-compiler-set-stance"]], "Description": [[276, "description"]], "Preventing recompilation": [[276, "preventing-recompilation"]], "Measuring performance gains": [[276, "measuring-performance-gains"]], "Crashing sooner": [[276, "crashing-sooner"]], "torch.export AOTInductor Tutorial for Python runtime (Beta)": [[277, "torch-export-aotinductor-tutorial-for-python-runtime-beta"]], "Model Compilation": [[277, "model-compilation"]], "Model Inference in Python": [[277, "model-inference-in-python"]], "When to use AOTInductor with a Python Runtime": [[277, "when-to-use-aotinductor-with-a-python-runtime"]], "Demonstration of torch.export flow, common challenges and the solutions to address them": [[278, "demonstration-of-torch-export-flow-common-challenges-and-the-solutions-to-address-them"]], "Key requirement for torch.export: No graph break": [[278, "key-requirement-for-torch-export-no-graph-break"]], "Video Classification": [[278, "video-classification"]], "Error: Static batch size": [[278, "error-static-batch-size"]], "Solution": [[278, "solution"], [278, "id1"], [278, "id2"], [278, "id3"]], "Automatic Speech Recognition": [[278, "automatic-speech-recognition"]], "Error: strict tracing with TorchDynamo": [[278, "error-strict-tracing-with-torchdynamo"]], "Image Captioning": [[278, "image-captioning"]], "Error: Cannot mutate tensors with frozen storage": [[278, "error-cannot-mutate-tensors-with-frozen-storage"]], "Promptable Image Segmentation": [[278, "promptable-image-segmentation"]], "Error: Model is not of type torch.nn.Module": [[278, "error-model-is-not-of-type-torch-nn-module"]], "(beta) Using TORCH_LOGS python API with torch.compile": [[279, "beta-using-torch-logs-python-api-with-torch-compile"]], "TorchScript for Deployment": [[280, "torchscript-for-deployment"]], "What is TorchScript?": [[280, "what-is-torchscript"]], "How to Export Your Model": [[280, "how-to-export-your-model"]], "Loading TorchScript Models in C++": [[280, "loading-torchscript-models-in-c"]], "Building and Running Your C++ Inference Engine": [[280, "building-and-running-your-c-inference-engine"]], "Important Resources": [[280, "important-resources"]], "Optimizing CPU Performance on Intel\u00ae Xeon\u00ae with run_cpu Script": [[281, "optimizing-cpu-performance-on-intel-xeon-with-run-cpu-script"]], "What You Will Learn": [[281, "what-you-will-learn"]], "Introduction of the Optimizations": [[281, "introduction-of-the-optimizations"]], "Applying NUMA Access Control": [[281, "applying-numa-access-control"]], "Using Intel\u00ae OpenMP Runtime Library": [[281, "using-intel-openmp-runtime-library"]], "Choosing an Optimized Memory Allocator": [[281, "choosing-an-optimized-memory-allocator"]], "Quick Start Example Commands": [[281, "quick-start-example-commands"]], "Using torch.backends.xeon.run_cpu": [[281, "using-torch-backends-xeon-run-cpu"]], "Explanation of the options": [[281, "explanation-of-the-options"]], "Shard Optimizer States with ZeroRedundancyOptimizer": [[282, "shard-optimizer-states-with-zeroredundancyoptimizer"]], "What is ZeroRedundancyOptimizer?": [[282, "what-is-zeroredundancyoptimizer"]], "How to use ZeroRedundancyOptimizer?": [[282, "how-to-use-zeroredundancyoptimizer"]]}, "indexentries": {}})